{"pageProps":{"data":{"answer":["\n&lt;p&gt;Yes, using &lt;code&gt;eval&lt;/code&gt; is a bad practice. Just to name a few reasons:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;There is almost always a better way to do it&lt;/li&gt;\n&lt;li&gt;Very dangerous and insecure&lt;/li&gt;\n&lt;li&gt;Makes debugging difficult&lt;/li&gt;\n&lt;li&gt;Slow&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;In your case you can use &lt;a href=&quot;http://docs.python.org/library/functions.html#setattr&quot; rel=&quot;noreferrer&quot;&gt;setattr&lt;/a&gt; instead:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Song&lt;/span&gt;:\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;The class to store the details of each song&quot;&quot;&quot;&lt;/span&gt;\n    attsToStore=(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Artist&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Album&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Genre&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Location&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; att &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self.attsToStore:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(self, att.lower(), &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setDetail&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, key, val&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self.attsToStore:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(self, key.lower(), val)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There are some cases where you have to use &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;exec&lt;/code&gt;. But they are rare. Using &lt;code&gt;eval&lt;/code&gt; in your case is a bad practice for sure. I&apos;m emphasizing on bad practice because &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt; are frequently used in the wrong place.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Replying to the comments:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;It looks like some disagree that &lt;code&gt;eval&lt;/code&gt; is &apos;very dangerous and insecure&apos; in the OP case. That might be true for this specific case but not in general. The question was general and the reasons I listed are true for the general case as well.&lt;/p&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;eval&lt;/code&gt; is weak, not a clearly &lt;em&gt;bad&lt;/em&gt; practice.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;It violates the &quot;Fundamental Principle of Software&quot;.  Your source is not the sum total of what&apos;s executable.  In addition to your source, there are the arguments to &lt;code&gt;eval&lt;/code&gt;, which must be clearly understood.  For this reason, it&apos;s the tool of last resort.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It&apos;s usually a sign of thoughtless design.  There&apos;s rarely a good reason for dynamic source code, built on-the-fly.  Almost anything can be done with delegation and other OO design techniques.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It leads to relatively slow on-the-fly compilation of small pieces of code.  An overhead which can be avoided by using better design patterns.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;As a footnote, in the hands of deranged sociopaths, it may not work out well.  However, when confronted with deranged sociopathic users or administrators, it&apos;s best to not give them interpreted Python in the first place.  In the hands of the truly evil, Python can a liability; &lt;code&gt;eval&lt;/code&gt; doesn&apos;t increase the risk at all.  &lt;/p&gt;\n    ","\n&lt;p&gt;Yes, it is:&lt;/p&gt;\n\n&lt;p&gt;Hack using Python:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;())\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;__import__(&apos;os&apos;).listdir(&apos;.&apos;)&quot;&lt;/span&gt;\n...........\n...........   &lt;span class=&quot;hljs-comment&quot;&gt;#dir listing&lt;/span&gt;\n...........\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The below code will list all tasks running on a Windows machine.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;())\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;__import__(&apos;subprocess&apos;).Popen([&apos;tasklist&apos;],stdout=__import__(&apos;subprocess&apos;).PIPE).communicate()[0]&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Linux:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;())\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;__import__(&apos;subprocess&apos;).Popen([&apos;ps&apos;, &apos;aux&apos;],stdout=__import__(&apos;subprocess&apos;).PIPE).communicate()[0]&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In this case, yes. Instead of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;self.Foo=val&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you should use the &lt;a href=&quot;http://docs.python.org/library/functions.html&quot; rel=&quot;noreferrer&quot;&gt;builtin&lt;/a&gt; function &lt;code&gt;setattr&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(self, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo&apos;&lt;/span&gt;, val)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s worth noting that for the specific problem in question, there are several alternatives to using &lt;code&gt;eval&lt;/code&gt;:&lt;/p&gt;\n\n&lt;p&gt;The simplest, as noted, is using &lt;code&gt;setattr&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; attsToStore:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(self, name, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A less obvious approach is updating the object&apos;s &lt;code&gt;__dict__&lt;/code&gt; object directly.  If all you want to do is initialize the attributes to &lt;code&gt;None&lt;/code&gt;, then this is less straightforward than the above.  But consider this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, **kwargs&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self.attsToStore:\n       self.__dict__[name] = kwargs.get(name, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This allows you to pass keyword arguments to the constructor, e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s = Song(name=&lt;span class=&quot;hljs-string&quot;&gt;&apos;History&apos;&lt;/span&gt;, artist=&lt;span class=&quot;hljs-string&quot;&gt;&apos;The Verve&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It also allows you to make your use of &lt;code&gt;locals()&lt;/code&gt; more explicit, e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s = Song(**&lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...and, if you really want to assign &lt;code&gt;None&lt;/code&gt; to the attributes whose names are found in &lt;code&gt;locals()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s = Song(**&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;([(k, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;().keys()]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another approach to providing an object with default values for a list of attributes is to define the class&apos;s &lt;code&gt;__getattr__&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__getattr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self.attsToStore:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; NameError, name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This method gets called when the named attribute isn&apos;t found in the normal way.  This approach somewhat less straightforward than simply setting the attributes in the constructor or updating the &lt;code&gt;__dict__&lt;/code&gt;, but it has the merit of not actually creating the attribute unless it exists, which can pretty substantially reduce the class&apos;s memory usage.&lt;/p&gt;\n\n&lt;p&gt;The point of all this:  There are lots of reasons, in general, to avoid &lt;code&gt;eval&lt;/code&gt; - the security problem of executing code that you don&apos;t control, the practical problem of code you can&apos;t debug, etc.  But an even more important reason is that generally, you don&apos;t need to use it.  Python exposes so much of its internal mechanisms to the programmer that you rarely really need to write code that writes code.&lt;/p&gt;\n    ","\n&lt;p&gt;Other users pointed out how your code can be changed as to not depend on &lt;code&gt;eval&lt;/code&gt;; I&apos;ll offer a legitimate use-case for using &lt;code&gt;eval&lt;/code&gt;, one that is found even in CPython: &lt;em&gt;testing&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s one example I found in &lt;a href=&quot;https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Lib/test/test_unary.py#L43&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;test_unary.py&lt;/code&gt;&lt;/a&gt; where a test on whether &lt;code&gt;(+|-|~)b&apos;a&apos;&lt;/code&gt; raises a &lt;code&gt;TypeError&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_bad_types&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; op &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;~&apos;&lt;/span&gt;:\n        self.assertRaises(TypeError, &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;, op + &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&apos;a&apos;&quot;&lt;/span&gt;)\n        self.assertRaises(TypeError, &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;, op + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;a&apos;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The usage is clearly not bad practice here; &lt;em&gt;you define the input&lt;/em&gt; and merely observe behavior. &lt;code&gt;eval&lt;/code&gt; is handy for testing.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/python/cpython/search?l=Python&amp;amp;p=1&amp;amp;q=eval&amp;amp;utf8=%E2%9C%93&quot; rel=&quot;noreferrer&quot;&gt;Take a look at this search&lt;/a&gt; for &lt;code&gt;eval&lt;/code&gt;, performed on the CPython git repository; testing with eval is heavily used.&lt;/p&gt;\n    ","\n&lt;p&gt;When &lt;code&gt;eval()&lt;/code&gt; is used to process user-provided input, you enable the user to &lt;a href=&quot;https://docs.python.org/3/library/code.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Drop-to-REPL&lt;/a&gt; providing something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;__import__(&apos;code&apos;).InteractiveConsole(locals=globals()).interact()&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may get away with it, but normally you don&apos;t want vectors for &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrary_code_execution&quot; rel=&quot;nofollow noreferrer&quot;&gt;arbitrary code execution&lt;/a&gt; in your applications.&lt;/p&gt;\n    ","\n&lt;p&gt;In addition to @Nadia Alramli answer, since I am new to Python and was eager to check how using &lt;code&gt;eval&lt;/code&gt; will affect the &lt;em&gt;timings&lt;/em&gt;, I tried a small program and below were the observations: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Difference while using print() with eval() and w/o eval() to print an int = 0.528969s per 100000 evals()&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strOfNos&lt;/span&gt;():\n    s = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;):\n        s.append(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(x))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s\n\nstrOfNos()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(datetime.now())\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; strOfNos():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x) &lt;span class=&quot;hljs-comment&quot;&gt;#print(eval(x))&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(datetime.now())\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#when using eval(int)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#2018-10-29 12:36:08.206022&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#2018-10-29 12:36:10.407911&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#diff = 2.201889 s&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#when using int only&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#2018-10-29 12:37:50.022753&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#2018-10-29 12:37:51.090045&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#diff = 1.67292&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;how did you learn about &lt;code&gt;exec/eval&lt;/code&gt; and still didn&apos;t know &lt;code&gt;setattr&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/137317/u0b34a0f6ae&quot; title=&quot;45,645 reputation&quot; class=&quot;comment-user&quot;&gt;u0b34a0f6ae&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1725429_1832940&quot;&gt;&lt;span title=&quot;2009-12-02 14:59:17Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2009 at 14:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I believe it was from an article comparing python and lisp than I learned about eval.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/32001/nikwin&quot; title=&quot;6,336 reputation&quot; class=&quot;comment-user owner&quot;&gt;Nikwin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1726037_1832940&quot;&gt;&lt;span title=&quot;2009-12-02 16:05:46Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2009 at 16:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This should have been considered as two separate questions in the first place - explaining the risk of &lt;code&gt;eval&lt;/code&gt;, and showing how to replace this specific usage. However, this question is much too important as a canonical duplicate to do much about that.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/523612/karl-knechtel&quot; title=&quot;57,128 reputation&quot; class=&quot;comment-user&quot;&gt;Karl Knechtel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127949976_1832940&quot;&gt;&lt;span title=&quot;2022-05-30 00:36:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 30 at 0:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See also: &lt;a href=&quot;https://stackoverflow.com/questions/9561174/using-setattr-in-python&quot;&gt;Using setattr() in python&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/523612/karl-knechtel&quot; title=&quot;57,128 reputation&quot; class=&quot;comment-user&quot;&gt;Karl Knechtel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127949979_1832940&quot;&gt;&lt;span title=&quot;2022-05-30 00:37:04Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 30 at 0:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;-1: &quot;Very dangerous and insecure&quot; is false.  The other three are outstandingly clear.  Please reorder them so that 2 and 4 are the first two.  It&apos;s only insecure if you are surrounded by evil sociopaths who are looking for ways to subvert your application.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10661/s-lott&quot; title=&quot;374,142 reputation&quot; class=&quot;comment-user&quot;&gt;S.Lott&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1725807_1832957&quot;&gt;&lt;span title=&quot;2009-12-02 15:41:00Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2009 at 15:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@S.Lott, Insecurity is a very important reason to avoid eval/exec in general. Many applications like websites should take extra care. Take the OP example in a website that expects users to enter the song name. It is bound to be exploited sooner or later. Even an innocent input like: Let&apos;s have fun. will cause a syntax error and expose the vulnerability.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/97828/nadia-alramli&quot; title=&quot;106,434 reputation&quot; class=&quot;comment-user&quot;&gt;Nadia Alramli&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1726183_1832957&quot;&gt;&lt;span title=&quot;2009-12-02 16:20:55Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2009 at 16:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Nadia Alramli: User input and &lt;code&gt;eval&lt;/code&gt; have nothing to do with each other.  An application that&apos;s fundamentally mis-designed is fundamentally mis-designed.  &lt;code&gt;eval&lt;/code&gt; is no more the root cause of bad design than division by zero or attempting to import a module which is known not to exist.  &lt;code&gt;eval&lt;/code&gt; isn&apos;t insecure.  Applications are insecure.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10661/s-lott&quot; title=&quot;374,142 reputation&quot; class=&quot;comment-user&quot;&gt;S.Lott&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1726811_1832957&quot;&gt;&lt;span title=&quot;2009-12-02 17:38:45Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2009 at 17:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@jeffjose: Actually, &lt;b&gt;it is&lt;/b&gt; fundamentally bad/evil because it&apos;s treating unparamaterized data as code (this is why XSS, SQL injection, and stack smashes exist). @S.Lott: &quot;It&apos;s only insecure if you are surrounded by evil sociopaths who are looking for ways to subvert your application.&quot; Cool, so say you make a program &lt;code&gt;calc&lt;/code&gt;, and to add numbers it executes &lt;code&gt;print(eval(&quot;{} + {}&quot;.format(n1, n2)))&lt;/code&gt; and exits. Now you distribute this program with some OS. Then someone makes a bash script that takes some numbers from a stock site and adds them using &lt;code&gt;calc&lt;/code&gt;. boom?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/80243/l%cc%b2%cc%b3o%cc%b2%cc%b3%cc%b3n%cc%b2%cc%b3%cc%b3g%cc%b2%cc%b3%cc%b3p%cc%b2%cc%b3o%cc%b2%cc%b3%cc%b3k%cc%b2%cc%b3%cc%b3e%cc%b2%cc%b3%cc%b3&quot; title=&quot;12,218 reputation&quot; class=&quot;comment-user&quot;&gt;L̲̳o̲̳̳n̲̳̳g̲̳̳p̲̳o̲̳̳k̲̳̳e̲̳̳&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3268287_1832957&quot;&gt;&lt;span title=&quot;2010-07-04 17:23:40Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 4, 2010 at 17:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;m not sure why Nadia&apos;s assertion is so contentious. It seems simple to me: eval is a vector for code injection, and is dangerous in a way that most other Python functions are not. That doesn&apos;t mean you shouldn&apos;t use it at all, but I think you should use it judiciously.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/329289/owen-s&quot; title=&quot;7,320 reputation&quot; class=&quot;comment-user&quot;&gt;Owen S.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8538640_1832957&quot;&gt;&lt;span title=&quot;2011-08-19 16:52:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 19, 2011 at 16:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Owen S. The point is this.  Folks will tell you that &lt;code&gt;eval&lt;/code&gt; is some kind of &quot;security vulnerability&quot;.  As if Python -- itself -- was not just a bunch of interpreted source that anyone could modify.  When confronted with the &quot;eval is a security hole&quot;, you can only assume that it&apos;s a security hole in the hands of sociopaths.  Ordinary programmers merely modify the existing Python source and cause their problems directly.  Not indirectly through &lt;code&gt;eval&lt;/code&gt; magic.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10661/s-lott&quot; title=&quot;374,142 reputation&quot; class=&quot;comment-user&quot;&gt;S.Lott&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8543247_1834754&quot;&gt;&lt;span title=&quot;2011-08-19 21:34:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 19, 2011 at 21:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Well, I can tell you exactly why I would say eval is a security vulnerability, and it has to do with the trustworthiness of the string it&apos;s given as input. If that string comes, in whole or in part, from the outside world, there&apos;s a possibility of a scripting attack on your program if you&apos;re not careful. But that&apos;s thge derangement of an outside attacker, not of the user or administrator.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/329289/owen-s&quot; title=&quot;7,320 reputation&quot; class=&quot;comment-user&quot;&gt;Owen S.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10920770_1834754&quot;&gt;&lt;span title=&quot;2012-01-06 18:42:47Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 6, 2012 at 18:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@OwenS.: &quot;If that string comes, in whole or in part, from the outside world&quot;  Often false.  This isn&apos;t a &quot;careful&quot; thing.  It&apos;s black and white.  If the text comes from a user, it can &lt;b&gt;never&lt;/b&gt; be trusted. Care isn&apos;t really part of it, it&apos;s absolutely untrustable. Otherwise, the text comes from a developer, installer or admin, and can be trusted.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10661/s-lott&quot; title=&quot;374,142 reputation&quot; class=&quot;comment-user&quot;&gt;S.Lott&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10921231_1834754&quot;&gt;&lt;span title=&quot;2012-01-06 19:08:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 6, 2012 at 19:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@OwenS.: There&apos;s no possible escaping for a string of untrusted Python code that would make it trustable.  I agree with most of what you&apos;re saying except for the &quot;careful&quot; part.  It&apos;s a very crisp distinction. Code from the outside world is untrustable.  AFAIK, no amount of escaping or filtering can clean it up.  If you have some kind of escaping function that would make code acceptable, please share.  I didn&apos;t think such a thing was possible.  For example &lt;code&gt;while True: pass&lt;/code&gt; would be hard to clean up with some kind of escaping.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10661/s-lott&quot; title=&quot;374,142 reputation&quot; class=&quot;comment-user&quot;&gt;S.Lott&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10925199_1834754&quot;&gt;&lt;span title=&quot;2012-01-06 22:54:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 6, 2012 at 22:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@OwenS.: &quot;intended as a string, not arbitrary code&quot;.  That&apos;s unrelated.  That&apos;s just a string value, which you would never pass through &lt;code&gt;eval()&lt;/code&gt;, since it&apos;s a string.  Code from the &quot;outside world&quot; cannot be sanitized.  Strings from the outside world are just strings.  I&apos;m unclear on what you&apos;re talking about.  Perhaps you should provide a more complete blog post and link to it here.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10661/s-lott&quot; title=&quot;374,142 reputation&quot; class=&quot;comment-user&quot;&gt;S.Lott&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10952344_1834754&quot;&gt;&lt;span title=&quot;2012-01-09 00:01:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 9, 2012 at 0:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why is that bad/dangerous? Can&apos;t I just execute the same Python code anyway without &lt;code&gt;eval&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4621513/mkrieger1&quot; title=&quot;14,856 reputation&quot; class=&quot;comment-user&quot;&gt;mkrieger1&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127060561_37081082&quot;&gt;&lt;span title=&quot;2022-04-17 18:45:20Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 17 at 18:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is dangerous because it allows for text &lt;i&gt;that is not the intentionally written source code of the program&lt;/i&gt; to be used as if it were source code. This means that you cannot feed your program with data that came from another source (such as an Internet download, a web submission form, a keyboard at a public kiosk...) without allowing arbitrary code execution on the computer where the program runs. This is fundamentally the same problem as SQL injection, except worse because it has access to an entire computer, not just a database.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/523612/karl-knechtel&quot; title=&quot;57,128 reputation&quot; class=&quot;comment-user&quot;&gt;Karl Knechtel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127949948_37081082&quot;&gt;&lt;span title=&quot;2022-05-30 00:31:54Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 30 at 0:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Another way that&apos;s arguably more (or less) Pythonic: Instead of using the object&apos;s &lt;code&gt;__dict__&lt;/code&gt; directly, give the object an actual dictionary  object, either through inheritance or as an attribute.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/19750/josh-lee&quot; title=&quot;161,959 reputation&quot; class=&quot;comment-user&quot;&gt;Josh Lee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1727231_1834815&quot;&gt;&lt;span title=&quot;2009-12-02 18:41:30Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2009 at 18:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;A less obvious approach is updating the object&apos;s &lt;b&gt;dict&lt;/b&gt; object directly&quot; =&amp;gt; Note that this will bypass any descriptor (property or other) or &lt;code&gt;__setattr__&lt;/code&gt; override, which might lead to unexpected results. &lt;code&gt;setattr()&lt;/code&gt; doesn&apos;t have this problem.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/41316/bruno-desthuilliers&quot; title=&quot;72,579 reputation&quot; class=&quot;comment-user&quot;&gt;bruno desthuilliers&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment88177930_1834815&quot;&gt;&lt;span title=&quot;2018-05-29 12:27:19Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 29, 2018 at 12:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":231,"title":"Why is using 'eval' a bad practice?","content":"\n                \n&lt;p&gt;I use the following class to easily store data of my songs.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Song&lt;/span&gt;:\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;The class to store the details of each song&quot;&quot;&quot;&lt;/span&gt;\n    attsToStore=(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Artist&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Album&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Genre&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Location&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; att &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self.attsToStore:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;self.%s=None&apos;&lt;/span&gt;%(att.lower()) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setDetail&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, key, val&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self.attsToStore:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;self.%s=val&apos;&lt;/span&gt;%(key.lower()) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I feel that this is just much more extensible than writing out an &lt;code&gt;if/else&lt;/code&gt; block. However, I have heard that &lt;code&gt;eval&lt;/code&gt; is unsafe. Is it? What is the risk? How can I solve the underlying problem in my class (setting attributes of &lt;code&gt;self&lt;/code&gt; dynamically) without incurring that risk?&lt;/p&gt;\n    ","slug":"why-is-using-'eval'-a-bad-practice-1657387348760","postType":"QUESTION","createdAt":"2022-07-09T17:22:28.000Z","updatedAt":"2022-07-09T17:22:28.000Z","tags":[{"id":1554,"name":"eval","slug":"eval","createdAt":"2022-07-09T17:22:28.000Z","updatedAt":"2022-07-09T17:22:28.000Z","Questions_Tags":{"questionId":231,"tagId":1554}}]}},"__N_SSG":true}