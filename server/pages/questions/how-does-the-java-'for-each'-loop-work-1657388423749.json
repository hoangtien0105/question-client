{"pageProps":{"data":{"answer":["\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;String&amp;gt; i = someIterable.iterator(); i.hasNext();) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; i.next();\n    System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that if you need to use &lt;code&gt;i.remove();&lt;/code&gt; in your loop, or access the actual iterator in some way, you cannot use the &lt;code&gt;for ( : )&lt;/code&gt; idiom, since the actual iterator is merely inferred.&lt;/p&gt;\n\n&lt;p&gt;As was noted by Denis Bueno, this code works for any object that implements the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Iterable&lt;/code&gt; interface&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Also, if the right-hand side of the &lt;code&gt;for (:)&lt;/code&gt; idiom is an &lt;code&gt;array&lt;/code&gt; rather than an &lt;code&gt;Iterable&lt;/code&gt; object, the internal code uses an int index counter and checks against &lt;code&gt;array.length&lt;/code&gt; instead. See the &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.14.2&quot; rel=&quot;noreferrer&quot;&gt;Java Language Specification&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The construct &lt;em&gt;for each&lt;/em&gt; is also valid for arrays. e.g.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] fruits = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] { &lt;span class=&quot;hljs-string&quot;&gt;&quot;Orange&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pear&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Strawberry&quot;&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String fruit : fruits) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// fruit is an element of the `fruits` array.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which is essentially equivalent of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; fruits.length; i++) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fruit&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; fruits[i];\n    &lt;span class=&quot;hljs-comment&quot;&gt;// fruit is an element of the `fruits` array.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, overall summary: &lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work/85206#85206&quot;&gt;[nsayer]&lt;/a&gt; The following is the longer form of what is happening:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(Iterator&amp;lt;String&amp;gt; i = someList.iterator(); i.hasNext(); ) {\n  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; i.next();\n  System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;Note that if you need to use\n  i.remove(); in your loop, or access\n  the actual iterator in some way, you\n  cannot use the for( : ) idiom, since\n  the actual Iterator is merely\n  inferred.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work/85242#85242&quot;&gt;[Denis Bueno]&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;It&apos;s implied by nsayer&apos;s answer, but\n  it&apos;s worth noting that the OP&apos;s for(..)\n  syntax will work when &quot;someList&quot; is\n  anything that implements\n  java.lang.Iterable -- it doesn&apos;t have\n  to be a list, or some collection from\n  java.util. Even your own types,\n  therefore, can be used with this\n  syntax.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/guide/language/foreach.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;for-each loop&lt;/a&gt;, added in &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/guide/language/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java 5&lt;/a&gt; (also called the &quot;enhanced for loop&quot;), is equivalent to using a &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;java.util.Iterator&lt;/code&gt;&lt;/a&gt;--it&apos;s syntactic sugar for the same thing. Therefore, when reading each element, one by one and in order, a for-each should always be chosen over an iterator, as it is more convenient and concise.&lt;/p&gt;\n&lt;h3&gt;For-each&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i : intList) {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;An element in the list: &quot;&lt;/span&gt; + i);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Iterator&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;Integer&amp;gt; intItr = intList.iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (intItr.hasNext()) {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;An element in the list: &quot;&lt;/span&gt; + intItr.next());\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There are situations where you must use an &lt;code&gt;Iterator&lt;/code&gt; directly. For example, attempting to delete an element while using a for-each can (will?) result in a &lt;code&gt;ConcurrentModificationException&lt;/code&gt;.&lt;/p&gt;\n&lt;h2&gt;For-each vs. for-loop: Basic differences&lt;/h2&gt;\n&lt;p&gt;The only practical difference between for-loop and for-each is that, in the case of indexable objects, you do not have access to the index. An example when the basic for-loop is required:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.length; i++) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Do something special&lt;/span&gt;\n   }  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Do other stuff&lt;/span&gt;\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Although you could manually create a separate index int-variable with for-each,&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i : intArray) {\n   idx++;\n   ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;...it is not recommended, since &lt;a href=&quot;http://www.java-made-easy.com/variable-scope.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;variable-scope&lt;/a&gt; is not ideal, and the basic &lt;code&gt;for&lt;/code&gt; loop is simply the standard and expected format for this use case.&lt;/p&gt;\n&lt;h2&gt;For-each vs. for-loop: Performance&lt;/h2&gt;\n&lt;p&gt;When accessing collections, a for-each is &lt;a href=&quot;https://stackoverflow.com/questions/1879255/traditional-for-loop-vs-iterator-in-java&quot;&gt;significantly faster&lt;/a&gt; than the basic &lt;code&gt;for&lt;/code&gt; loop&apos;s array access. When accessing arrays, however--at least with primitive and wrapper-arrays--access via indexes is dramatically faster.&lt;/p&gt;\n&lt;h3&gt;Timing the difference between iterator and index access for primitive int-arrays&lt;/h3&gt;\n&lt;p&gt;Indexes are 23-&lt;em&gt;40&lt;/em&gt; percent faster than iterators when accessing &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;Integer&lt;/code&gt; arrays. Here is the output from the testing class at the bottom of this post, which sums the numbers in a 100-element primitive-int array (A is iterator, B is index):&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;[C:\\java_code\\]java TimeIteratorVsIndexIntArray 1000000\nTest A: 358,597,622 nanoseconds\nTest B: 269,167,681 nanoseconds\nB faster by 89,429,941 nanoseconds (24.438799231635727% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntArray 1000000\nTest A: 377,461,823 nanoseconds\nTest B: 278,694,271 nanoseconds\nB faster by 98,767,552 nanoseconds (25.666236154695838% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntArray 1000000\nTest A: 288,953,495 nanoseconds\nTest B: 207,050,523 nanoseconds\nB faster by 81,902,972 nanoseconds (27.844689860906513% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntArray 1000000\nTest A: 375,373,765 nanoseconds\nTest B: 283,813,875 nanoseconds\nB faster by 91,559,890 nanoseconds (23.891659337194227% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntArray 1000000\nTest A: 375,790,818 nanoseconds\nTest B: 220,770,915 nanoseconds\nB faster by 155,019,903 nanoseconds (40.75164734599769% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntArray 1000000\nTest A: 326,373,762 nanoseconds\nTest B: 202,555,566 nanoseconds\nB faster by 123,818,196 nanoseconds (37.437545972215744% faster)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I also ran this for an &lt;code&gt;Integer&lt;/code&gt; array, and indexes are still the clear winner, but only between 18 and 25 percent faster.&lt;/p&gt;\n&lt;h3&gt;For collections, iterators are faster than indexes&lt;/h3&gt;\n&lt;p&gt;For a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Integers&lt;/code&gt;, however, iterators are the clear winner. Just change the int-array in the test-class to:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Integer&amp;gt; intList = Arrays.asList(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;[] {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;48&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;51&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;58&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;61&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;62&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;63&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;66&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;68&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;69&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;71&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;72&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;73&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;74&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;76&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;77&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;78&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;79&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;82&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;83&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;84&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;85&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;86&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;88&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;89&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;90&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;92&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;94&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;96&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;97&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;98&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And make the necessary changes to the test-function (&lt;code&gt;int[]&lt;/code&gt; to &lt;code&gt;List&amp;lt;Integer&amp;gt;&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt; to &lt;code&gt;size()&lt;/code&gt;, etc.):&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;[C:\\java_code\\]java TimeIteratorVsIndexIntegerList 1000000\nTest A: 3,429,929,976 nanoseconds\nTest B: 5,262,782,488 nanoseconds\nA faster by 1,832,852,512 nanoseconds (34.326681820485675% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntegerList 1000000\nTest A: 2,907,391,427 nanoseconds\nTest B: 3,957,718,459 nanoseconds\nA faster by 1,050,327,032 nanoseconds (26.038700083921256% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntegerList 1000000\nTest A: 2,566,004,688 nanoseconds\nTest B: 4,221,746,521 nanoseconds\nA faster by 1,655,741,833 nanoseconds (38.71935684115413% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntegerList 1000000\nTest A: 2,770,945,276 nanoseconds\nTest B: 3,829,077,158 nanoseconds\nA faster by 1,058,131,882 nanoseconds (27.134122749113843% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntegerList 1000000\nTest A: 3,467,474,055 nanoseconds\nTest B: 5,183,149,104 nanoseconds\nA faster by 1,715,675,049 nanoseconds (32.60101667104192% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntList 1000000\nTest A: 3,439,983,933 nanoseconds\nTest B: 3,509,530,312 nanoseconds\nA faster by 69,546,379 nanoseconds (1.4816434912159906% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntList 1000000\nTest A: 3,451,101,466 nanoseconds\nTest B: 5,057,979,210 nanoseconds\nA faster by 1,606,877,744 nanoseconds (31.269164666060377% faster)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In one test they&apos;re almost equivalent, but with collections, iterator wins.&lt;/p&gt;\n&lt;p&gt;*This post is based on two answers I wrote on Stack Overflow:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/22110482/uses-and-syntax-for-for-each-loop-in-java/22110517#22110517&quot;&gt;Uses and syntax for for-each loop in Java&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/22540025/should-i-use-an-iterator-or-a-forloop-to-iterate/22540191#22540191&quot;&gt;Should I use an Iterator or a forloop to iterate?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Some more information: &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2113216/which-is-more-efficient-a-for-each-loop-or-an-iterator&quot;&gt;Which is more efficient, a for-each loop, or an iterator?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;The full testing class&lt;/h3&gt;\n&lt;p&gt;I created this compare-the-time-it-takes-to-do-any-two-things class after reading &lt;a href=&quot;https://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;this question&lt;/a&gt; on Stack Overflow:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt;  java.text.NumberFormat;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt;  java.util.Locale;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n   &amp;amp;lt;P&amp;amp;gt;{&lt;span class=&quot;hljs-doctag&quot;&gt;@code&lt;/span&gt; java TimeIteratorVsIndexIntArray 1000000}&amp;amp;lt;/P&amp;amp;gt;\n\n   &lt;span class=&quot;hljs-doctag&quot;&gt;@see&lt;/span&gt;  &amp;amp;lt;CODE&amp;amp;gt;&amp;amp;lt;A HREF=&amp;amp;quot;https://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&amp;amp;quot;&amp;amp;gt;https://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&amp;amp;lt;/A&amp;amp;gt;&amp;amp;lt;/CODE&amp;amp;gt;\n **/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TimeIteratorVsIndexIntArray&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NumberFormat&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; NumberFormat.getNumberInstance(Locale.US);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] tryCount_inParamIdx0)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; testCount;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Get try-count from a command-line parameter&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n           testCount = Integer.parseInt(tryCount_inParamIdx0[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(ArrayIndexOutOfBoundsException | NumberFormatException x) {\n           &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IllegalArgumentException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Missing or invalid command line parameter: The number of testCount for each test. &quot;&lt;/span&gt; + x);\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Test proper...START&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] intArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[] {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;48&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;51&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;58&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;61&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;62&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;63&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;66&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;68&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;69&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;71&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;72&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;73&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;74&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;76&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;77&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;78&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;79&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;82&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;83&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;84&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;85&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;86&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;88&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;89&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;90&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;92&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;94&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;96&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;97&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;98&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;};\n\n        &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lStart&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; System.nanoTime();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; testCount; i++) {\n           testIterator(intArray);\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lADuration&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; outputGetNanoDuration(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;, lStart);\n\n        lStart = System.nanoTime();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; testCount; i++) {\n           testFor(intArray);\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lBDuration&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; outputGetNanoDuration(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;, lStart);\n\n        outputGetABTestNanoDifference(lADuration, lBDuration, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testIterator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] int_array)&lt;/span&gt; {\n       &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; int_array.length; i++) {\n          total += int_array[i];\n       }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testFor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] int_array)&lt;/span&gt; {\n       &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i : int_array) {\n          total += i;\n       }\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Test proper...END&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Timer testing utilities...START&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outputGetNanoDuration&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String s_testName, &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; l_nanoStart)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lDuration&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; System.nanoTime() - l_nanoStart;\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Test &quot;&lt;/span&gt; + s_testName + &lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;/span&gt; + nf.format(lDuration) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; nanoseconds&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  lDuration;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outputGetABTestNanoDifference&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; l_aDuration, &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; l_bDuration, String s_aTestName, String s_bTestName)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lDiff&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;dPct&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sFaster&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(l_aDuration &amp;gt; l_bDuration) {\n            lDiff = l_aDuration - l_bDuration;\n            dPct = &lt;span class=&quot;hljs-number&quot;&gt;100.00&lt;/span&gt; - (l_bDuration * &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt; / l_aDuration + &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;);\n            sFaster = &lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            lDiff = l_bDuration - l_aDuration;\n            dPct = &lt;span class=&quot;hljs-number&quot;&gt;100.00&lt;/span&gt; - (l_aDuration * &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt; / l_bDuration + &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;);\n            sFaster = &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;;\n        }\n        System.out.println(sFaster + &lt;span class=&quot;hljs-string&quot;&gt;&quot; faster by &quot;&lt;/span&gt; + nf.format(lDiff) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; nanoseconds (&quot;&lt;/span&gt; + dPct + &lt;span class=&quot;hljs-string&quot;&gt;&quot;% faster)&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  lDiff;\n   }\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;//Timer testing utilities...END&lt;/span&gt;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is an answer which does not assume knowledge of Java Iterators. It is less precise, but it is useful for education.&lt;/p&gt;\n\n&lt;p&gt;While programming we often write code that looks like the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[] grades = ....\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; grades.length; i++) {   &lt;span class=&quot;hljs-comment&quot;&gt;// for i goes from 0 to grades.length&lt;/span&gt;\n    System.out.print(grades[i]);           &lt;span class=&quot;hljs-comment&quot;&gt;// Print grades[i]&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The foreach syntax allows this common pattern to be written in a more natural and less syntactically noisy way.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; grade : grades) {   &lt;span class=&quot;hljs-comment&quot;&gt;// foreach grade in grades&lt;/span&gt;\n    System.out.print(grade); &lt;span class=&quot;hljs-comment&quot;&gt;// print that grade&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Additionally this syntax is valid for objects such as Lists or Sets which do not support array indexing, but which do implement the Java Iterable interface.&lt;/p&gt;\n    ","\n&lt;p&gt;The for-each loop in Java uses the underlying iterator mechanism. So it&apos;s identical to the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;String&amp;gt; iterator = someList.iterator();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iterator.hasNext()) {\n  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iterator.next();\n  System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As defined in &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.14.2&quot; rel=&quot;nofollow noreferrer&quot;&gt;JLS&lt;/a&gt;, a &lt;em&gt;for-each&lt;/em&gt; loop can have two forms:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;If the type of expression is a subtype of &lt;code&gt;Iterable&lt;/code&gt; then translation is as:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; someList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\nsomeList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;);\nsomeList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ball&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String item : someList) {\n    System.out.println(item);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Is translated to:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(Iterator&amp;lt;String&amp;gt; stringIterator = someList.iterator(); stringIterator.hasNext(); ) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; stringIterator.next();\n    System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the expression necessarily has an array type &lt;code&gt;T[]&lt;/code&gt; then:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] someArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\nsomeArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;;\nsomeArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ball&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String item2 : someArray) {\n    System.out.println(item2);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Is translated to:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; someArray.length; i++) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; someArray[i];\n    System.out.println(item2);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Java 8 has introduced streams which perform generally better with a decent size dataset. We can use them as:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;someList.stream().forEach(System.out::println);\nArrays.stream(someArray).forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s implied by &lt;a href=&quot;https://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work/85206#85206&quot;&gt;nsayer&apos;s answer&lt;/a&gt;, but it&apos;s worth noting that the OP&apos;s for(..) syntax will work when &quot;someList&quot; is &lt;em&gt;anything&lt;/em&gt; that implements java.lang.Iterable -- it doesn&apos;t have to be a list, or some collection from java.util. Even your own types, therefore, can be used with this syntax.&lt;/p&gt;\n    ","\n&lt;p&gt;A foreach loop syntax is:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (type obj:array) {...}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] s = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Java&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Coffe&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Is&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cool&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String str:s &lt;span class=&quot;hljs-comment&quot;&gt;/*s is the array*/&lt;/span&gt;) {\n    System.out.println(str);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Java\nCoffe\nIs\nCool\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;WARNING: You can access array elements with the foreach loop, but you can NOT initialize them. Use the original &lt;code&gt;for&lt;/code&gt; loop for that.&lt;/p&gt;\n&lt;p&gt;WARNING: You must match the type of the array with the other object.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; b:s) &lt;span class=&quot;hljs-comment&quot;&gt;// Invalid-double is not String&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to edit elements, use the original &lt;code&gt;for&lt;/code&gt; loop like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; s.length-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/*-1 because of the 0 index */&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//1 because once again I say the 0 index&lt;/span&gt;\n        s[i]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2 is cool&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        s[i] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now if we dump s to the console, we get:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;hello\n2 is cool\nhello\nhello\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The Java &quot;for-each&quot; loop construct will allow iteration over two types of objects:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;T[]&lt;/code&gt; &lt;em&gt;(arrays of any type)&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;java.lang.Iterable&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt; interface has only one method: &lt;code&gt;Iterator&amp;lt;T&amp;gt; iterator()&lt;/code&gt;.  This works on objects of type &lt;code&gt;Collection&amp;lt;T&amp;gt;&lt;/code&gt; because the &lt;code&gt;Collection&amp;lt;T&amp;gt;&lt;/code&gt; interface extends &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In Java 8 features you can use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; messages = Arrays.asList(&lt;span class=&quot;hljs-string&quot;&gt;&quot;First&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Second&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Third&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forTest&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n    messages.forEach(System.out::println);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;First\nSecond\nThird\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The concept of a foreach loop as mentioned in Wikipedia is highlighted below:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Unlike other for loop constructs, however, foreach loops usually\n  maintain &lt;strong&gt;no explicit counter&lt;/strong&gt;: they essentially say &quot;do this to\n  everything in this set&quot;, rather than &quot;do this x times&quot;. This avoids\n  potential &lt;strong&gt;off-by-one errors&lt;/strong&gt; and makes code simpler to read.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So the concept of a foreach loop describes that the loop does not use any explicit counter which means that there is no need of using indexes to traverse in the list thus it saves user from off-by-one error. To describe the general concept of this off-by-one error, let us take an example of a loop to traverse in a list using indexes.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// In this loop it is assumed that the list starts with index 0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;list.length; i++){\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But suppose if the list starts with index 1 then this loop is going to throw an exception as it will found no element at index 0 and this error is called an off-by-one error. So to avoid this off-by-one error the concept of a foreach loop is used. There may be other advantages too, but this is what I think is the main concept and advantage of using a foreach loop.&lt;/p&gt;\n    ","\n&lt;p&gt;In Java 8, they introduced forEach. Using it List, Maps can be looped.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Loop a List using for each&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; someList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\nsomeList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;);\nsomeList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;);\nsomeList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;);\n\nsomeList.forEach(listItem -&amp;gt; System.out.println(listItem))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;someList.forEach(listItem-&amp;gt; {\n     System.out.println(listItem); \n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Loop a Map using for each&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;String, String&amp;gt; mapList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n    mapList.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Key1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Value1&quot;&lt;/span&gt;);\n    mapList.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Key2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Value2&quot;&lt;/span&gt;);\n    mapList.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Key3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Value3&quot;&lt;/span&gt;);\n\nmapList.forEach((key,value)-&amp;gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Key: &quot;&lt;/span&gt; + key + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Value : &quot;&lt;/span&gt; + value));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mapList.forEach((key,value)-&amp;gt;{\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Key : &quot;&lt;/span&gt; + key + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Value : &quot;&lt;/span&gt; + value);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s an equivalent expression.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(Iterator&amp;lt;String&amp;gt; sit = someList.iterator(); sit.hasNext(); ) {\n    System.out.println(sit.next());\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using older Java versions, including &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_7&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java&amp;nbsp;7&lt;/a&gt;, you can use a &lt;code&gt;foreach&lt;/code&gt; loop as follows.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; items = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\nitems.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;);\nitems.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;);\nitems.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;);\nitems.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;);\nitems.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;E&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String item : items) {\n    System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The following is the very latest way of using a &lt;em&gt;for each&lt;/em&gt; loop in &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_8&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java&amp;nbsp;8&lt;/a&gt; (loop a List with &lt;code&gt;forEach&lt;/code&gt; + lambda expression or method reference).&lt;/p&gt;\n&lt;h3&gt;Lambda&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Output: A,B,C,D,E&lt;/span&gt;\nitems.forEach(item-&amp;gt;System.out.println(item));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Method reference&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Output: A,B,C,D,E&lt;/span&gt;\nitems.forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For more information, refer to &lt;em&gt;&quot;&lt;a href=&quot;https://www.mkyong.com/java8/java-8-foreach-examples/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java 8 forEach examples&lt;/a&gt;&quot;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;String&amp;gt; itr = someList.iterator(); itr.hasNext(); ) {\n   &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; itr.next();\n   System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Also note that using the &quot;foreach&quot; method in the original question does have some limitations, such as not being able to remove items from the list during the iteration.&lt;/p&gt;\n\n&lt;p&gt;The new for-loop is easier to read and removes the need for a separate iterator, but is only really usable in read-only iteration passes.&lt;/p&gt;\n    ","\n&lt;p&gt;An alternative to forEach in order to avoid your &quot;for each&quot;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; someList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Variant 1 (plain):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;someList.stream().forEach(listItem -&amp;gt; {\n    System.out.println(listItem);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Variant 2 (parallel execution (faster)):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;someList.parallelStream().forEach(listItem -&amp;gt; {\n    System.out.println(listItem);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It adds beauty to your code by removing all the basic looping clutter. It gives a clean look to your code, justified below.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Normal &lt;code&gt;for&lt;/code&gt; loop:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cancelAll&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Collection&amp;lt;TimerTask&amp;gt; list)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;TimerTask&amp;gt; i = list.iterator(); i.hasNext();)\n         i.next().cancel();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Using for-each:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cancelAll&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Collection&amp;lt;TimerTask&amp;gt; list)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (TimerTask t : list)\n        t.cancel();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;for-each&lt;/strong&gt; is a construct over a collection that implements &lt;strong&gt;Iterator&lt;/strong&gt;. Remember that, your collection should implement &lt;strong&gt;Iterator&lt;/strong&gt;; otherwise you can&apos;t use it with for-each.&lt;/p&gt;\n\n&lt;p&gt;The following line is read as &quot;&lt;em&gt;for each TimerTask t in list.&lt;/em&gt;&quot;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (TimerTask t : list)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is less chance for errors in case of for-each. You don&apos;t have to worry about initializing the iterator or initializing the loop counter and terminating it (where there is scope for errors).&lt;/p&gt;\n    ","\n&lt;p&gt;Prior to Java 8, you need to use the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;String&amp;gt; iterator = someList.iterator();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iterator.hasNext()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iterator.next();\n    System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, with the introduction of Streams in Java 8 you can do same thing in much less syntax. For example, for your &lt;code&gt;someList&lt;/code&gt; you can do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;someList.stream().forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can find more about streams &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It would look something like this. Very crufty. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;String&amp;gt; i = someList.iterator(); i.hasNext(); )\n        System.out.println(i.next());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is a good writeup on &lt;em&gt;for each&lt;/em&gt; in the &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/guide/language/foreach.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sun documentation&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;https://funnelgarden.com/java-for-loop/#Enhanced_For_Loop&quot; rel=&quot;noreferrer&quot;&gt;Java for each loop&lt;/a&gt; (aka enhanced for loop) is a simplified version of a for loop. The advantage is that there is less code to write and less variables to manage. The downside is that you have no control over the step value and no access to the loop index inside the loop body.&lt;/p&gt;\n\n&lt;p&gt;They are best used when the step value is a simple increment of 1 and when you only need access to the current loop element. For example, if you need to loop over every element in an array or Collection without peeking ahead or behind the current element.&lt;/p&gt;\n\n&lt;p&gt;There is no loop initialization, no boolean condition and the step value is implicit and is a simple increment. This is why they are considered so much simpler than regular for loops.&lt;/p&gt;\n\n&lt;p&gt;Enhanced for loops follow this order of execution:&lt;/p&gt;\n\n&lt;p&gt;1) loop body&lt;/p&gt;\n\n&lt;p&gt;2) repeat from step 1 until entire array or collection has been traversed&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example  Integer Array&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; [] intArray = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; currentValue : intArray) {\n  System.out.println(currentValue);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The currentValue variable holds the current value being looped over in the intArray array. Notice theres no explicit step value  its always an increment by 1.&lt;/p&gt;\n\n&lt;p&gt;The colon can be thought of to mean in. So the enhanced for loop declaration states: loop over intArray and store the current array int value &lt;strong&gt;in&lt;/strong&gt; the currentValue variable.&lt;/p&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example  String Array&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;We can use the for-each loop to iterate over an array of strings. The loop declaration states: loop over myStrings String array and store the current String value &lt;strong&gt;in&lt;/strong&gt; the currentString variable.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String [] myStrings  = {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;alpha&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;beta&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;gamma&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;delta&quot;&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String currentString : myStrings) {\n  System.out.println(currentString);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;alpha\nbeta\ngamma\ndelta\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example  List&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The enhanced for loop can also be used to iterate over a java.util.List as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; myList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\nmyList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;alpha&quot;&lt;/span&gt;);\nmyList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;beta&quot;&lt;/span&gt;);\nmyList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;gamma&quot;&lt;/span&gt;);\nmyList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;delta&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String currentItem : myList) {\n  System.out.println(currentItem);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The loop declaration states: loop over myList List of Strings and store the current List value &lt;strong&gt;in&lt;/strong&gt; the currentItem variable.&lt;/p&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;alpha\nbeta\ngamma\ndelta\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example  Set&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The enhanced for loop can also be used to iterate over a java.util.Set as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Set&amp;lt;String&amp;gt; mySet = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashSet&lt;/span&gt;&amp;lt;String&amp;gt;();\nmySet.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;alpha&quot;&lt;/span&gt;);\nmySet.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;alpha&quot;&lt;/span&gt;);\nmySet.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;beta&quot;&lt;/span&gt;);\nmySet.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;gamma&quot;&lt;/span&gt;);\nmySet.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;gamma&quot;&lt;/span&gt;);\nmySet.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;delta&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String currentItem : mySet) {\n  System.out.println(currentItem);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The loop declaration states: loop over mySet Set of Strings and store the current Set value &lt;strong&gt;in&lt;/strong&gt; the currentItem variable. Notice that since this is a Set, duplicate String values are not stored.&lt;/p&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;alpha\ndelta\nbeta\ngamma\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;https://funnelgarden.com/java-for-loop/&quot; rel=&quot;noreferrer&quot;&gt;Loops in Java  Ultimate Guide&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As so many good answers said, an object must implement the &lt;code&gt;Iterable interface&lt;/code&gt; if it wants to use a &lt;code&gt;for-each&lt;/code&gt; loop.&lt;/p&gt;\n&lt;p&gt;I&apos;ll post a simple example and try to explain in a different way how a &lt;code&gt;for-each&lt;/code&gt; loop works.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;for-each&lt;/code&gt; loop example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ForEachTest&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n\n        List&amp;lt;String&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n        list.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;111&quot;&lt;/span&gt;);\n        list.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;222&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String str : list) {\n            System.out.println(str);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, if we use &lt;code&gt;javap&lt;/code&gt; to decompile this class, we will get this bytecode sample:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;public static void main(java.lang.String[]);\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=4, args_size=1\n         0: new           #16                 // class java/util/ArrayList\n         3: dup\n         4: invokespecial #18                 // Method java/util/ArrayList.&quot;&amp;lt;init&amp;gt;&quot;:()V\n         7: astore_1\n         8: aload_1\n         9: ldc           #19                 // String 111\n        11: invokeinterface #21,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        16: pop\n        17: aload_1\n        18: ldc           #27                 // String 222\n        20: invokeinterface #21,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        25: pop\n        26: aload_1\n        27: invokeinterface #29,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As we can see from the last line of the sample, the compiler will automatically convert the use of &lt;code&gt;for-each&lt;/code&gt; keyword to the use of an &lt;code&gt;Iterator&lt;/code&gt; at compile time. That may explain why object, which doesn&apos;t implement the &lt;code&gt;Iterable interface&lt;/code&gt;, will throw an &lt;code&gt;Exception&lt;/code&gt; when it tries to use the &lt;code&gt;for-each&lt;/code&gt; loop.&lt;/p&gt;\n    ","\n&lt;p&gt;As many of other answers correctly state, the &lt;em&gt;for each&lt;/em&gt; loop is just syntactic sugar over the same old &lt;em&gt;for&lt;/em&gt; loop and the compiler translates it to the same old &lt;em&gt;for&lt;/em&gt; loop.&lt;/p&gt;\n&lt;p&gt;javac (&lt;a href=&quot;https://en.wikipedia.org/wiki/OpenJDK&quot; rel=&quot;nofollow noreferrer&quot;&gt;OpenJDK&lt;/a&gt;) has a switch, &lt;code&gt;-XD-printflat&lt;/code&gt;, which generates a Java file with all the syntactic sugar removed. The complete command looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;javac -XD-printflat -d src/ MyFile.java\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//-d is used to specify the directory for output java file&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;So lets remove the syntactical sugar&lt;/h3&gt;\n&lt;p&gt;To answer this question, I created a file and wrote two versions of &lt;em&gt;for each&lt;/em&gt;, one with &lt;em&gt;array&lt;/em&gt; and another with a &lt;em&gt;list&lt;/em&gt;. My Java file looked like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Temp&lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forEachArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] arr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i: arr){\n            System.out.print(i);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forEachList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n        List&amp;lt;Integer&amp;gt; list = Arrays.asList(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(Integer i: list){\n            System.out.print(i);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When I &lt;code&gt;compiled&lt;/code&gt; this file with above switch, I got the following output.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Temp&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Temp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forEachArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] arr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-comment&quot;&gt;/*synthetic*/&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] arr$ = arr, len$ = arr$.length, i$ = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i$ &amp;lt; len$; ++i$) {\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; arr$[i$];\n            {\n                System.out.print(i);\n            }\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forEachList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Arrays.asList(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;[]{Integer.valueOf(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), Integer.valueOf(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), Integer.valueOf(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), Integer.valueOf(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), Integer.valueOf(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)});\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-comment&quot;&gt;/*synthetic*/&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i$&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; list.iterator(); i$.hasNext(); ) {\n            &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Integer)i$.next();\n            {\n                System.out.print(i);\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can see that along with the other syntactic sugar (Autoboxing), &lt;em&gt;for each&lt;/em&gt; loops got changed to simple loops.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Boolean &lt;span class=&quot;hljs-title function_&quot;&gt;Add_Tag&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; totalsize)&lt;/span&gt;\n{\n    List&amp;lt;String&amp;gt; fullst = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; k=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; k&amp;lt;totalsize; k++)\n    {\n        fullst.addAll();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The Java for-each idiom can only be applied to arrays or objects of type &lt;strong&gt;*Iterable&lt;/strong&gt;. This idiom is &lt;strong&gt;&lt;em&gt;implicit&lt;/em&gt;&lt;/strong&gt; as it truly backed by an Iterator. The Iterator is programmed by the programmer and often uses an integer index or a node (depending on the data structure) to keep track of its position. On paper it is slower than a regular for-loop, a least for &quot;linear&quot; structures like arrays and Lists but it provides greater abstraction. &lt;/p&gt;\n    ","\n&lt;p&gt;This looks crazy but hey it works&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; someList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//has content&lt;/span&gt;\nsomeList.forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works. &lt;strong&gt;&lt;em&gt;Magic&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I think this will work:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;String&amp;gt; i = someList.iterator(); i.hasNext(); ) {\n   &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; i.next();\n   System.out.println(x);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The code would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ForLoopDemo&lt;/span&gt; {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n\n    List&amp;lt;String&amp;gt; someList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n\n    someList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;monkey&quot;&lt;/span&gt;);\n    someList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;donkey&quot;&lt;/span&gt;);\n    someList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;skeleton key&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Iteration using For Each loop&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Iteration using a For Each loop:&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String item : someList) {\n      System.out.println(item);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Iteration using a normal For loop&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nIteration using normal For loop: &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; index &amp;lt; someList.size(); index++) {\n      System.out.println(someList.get(index));\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;em&gt;forEach&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] numbers = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n\nArrays.stream(numbers).forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Response:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1\n2\n3\n4\n5\n\nThe process finished with exit code 0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;PS: You need a Array (&lt;code&gt;int[] numbers&lt;/code&gt;), and &lt;code&gt;import java.util.Arrays;&lt;/code&gt;&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;As per JLS it has two forms: &lt;a href=&quot;https://stackoverflow.com/a/33232565/1216775&quot;&gt;stackoverflow.com/a/33232565/1216775&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1216775/akhil-mittal&quot; title=&quot;21,553 reputation&quot; class=&quot;comment-user&quot;&gt;akhil_mittal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91887268_85190&quot;&gt;&lt;span title=&quot;2018-09-24 04:40:54Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 24, 2018 at 4:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;There are different types of Java for loop as mentioned below. The working of for loop is the same for all the types and varies only in the syntax. * Simple for loop (&lt;a href=&quot;https://www.tutorialcup.com/java/java-for-loop.htm#Simple_Java_For_Loop_example&quot; rel=&quot;nofollow noreferrer&quot;&gt;tutorialcup.com/java/&lt;/a&gt;) * Enhanced for loop  for each loop (&lt;a href=&quot;https://www.tutorialcup.com/java/java-for-loop.htm#Enhanced_Java_For_loop&quot; rel=&quot;nofollow noreferrer&quot;&gt;tutorialcup.com/java/java-for-loop.htm#Enhanced_Java_For_loop&lt;/a&gt;) * Nested for loop (&lt;a href=&quot;https://www.tutorialcup.com/java/java-for-loop.htm#Nested_For_Loop&quot; rel=&quot;nofollow noreferrer&quot;&gt;tutorialcup.com/java/java-for-loop.htm#Nested_For_Loop&lt;/a&gt;) * Labeled for loop (&lt;a href=&quot;https://www.tutorialcup.com/java/java-for-loop.htm#Labeled_For_loop&quot; rel=&quot;nofollow noreferrer&quot;&gt;tutorialcup.com/java/java-for-loop.htm#Labeled_For_loop&lt;/a&gt;)  &lt;a href=&quot;https://www.tutorialcup.com/java/java-for-loop.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;tutorialcup.com/java/java-for-loop.htm&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/851340/rahul-gupta&quot; title=&quot;91 reputation&quot; class=&quot;comment-user&quot;&gt;Rahul Gupta&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment111422966_85190&quot;&gt;&lt;span title=&quot;2020-07-21 06:35:51Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 21, 2020 at 6:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;We can use enhanced for loop to iterate elements for the below collection:  Array ArrayList Map Set LinkedList and so on. &lt;a href=&quot;https://www.tutorialcup.com/java/java-for-each-loop.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;tutorialcup.com/java/java-for-each-loop.htm&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/851340/rahul-gupta&quot; title=&quot;91 reputation&quot; class=&quot;comment-user&quot;&gt;Rahul Gupta&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment111432794_85190&quot;&gt;&lt;span title=&quot;2020-07-21 12:16:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 21, 2020 at 12:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;ve found just calling a while-loop like &lt;i&gt;while (someList.hasMoreElements()) { //do something }}&lt;/i&gt; - gets me close to the coding grace I&apos;d hoped to find when I searched for this question.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/146698/james-t-snell&quot; title=&quot;1,478 reputation&quot; class=&quot;comment-user&quot;&gt;James T Snell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18342865_85206&quot;&gt;&lt;span title=&quot;2012-11-16 18:10:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 16, 2012 at 18:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I wouldn&apos;t say the 2nd example is &quot;essentially equivalent to the first&quot;, since if its a list of primitive values, any modification you make to the values will not modify the original list in example 1, but will modify the original list in example 2.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6338007/kosaro&quot; title=&quot;365 reputation&quot; class=&quot;comment-user&quot;&gt;Kosaro&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment112694796_85424&quot;&gt;&lt;span title=&quot;2020-09-03 18:21:49Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 3, 2020 at 18:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer is now a &lt;a href=&quot;http://aliteralmind.wordpress.com/2014/03/22/for_foreach/&quot; rel=&quot;nofollow noreferrer&quot;&gt;blog post&lt;/a&gt; and was created from two related answers that I&apos;ve written: &lt;a href=&quot;http://stackoverflow.com/questions/22540025/should-i-use-an-iterator-or-a-forloop-to-iterate/22540191#22540191&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://stackoverflow.com/questions/22110482/uses-and-syntax-for-for-each-loop-in-java/22110517#22110517&quot;&gt;here&lt;/a&gt;. It also includes a generically useful class for comparing the speed of two functions (at the bottom).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2736496/aliteralmind&quot; title=&quot;19,229 reputation&quot; class=&quot;comment-user&quot;&gt;aliteralmind&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment35440627_22114571&quot;&gt;&lt;span title=&quot;2014-04-19 18:23:12Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 19, 2014 at 18:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Just one minor comment here, you shouldn&apos;t categorically state that for(:) syntax is always better for accessing collections; if you are using an array list, the for (:) loop will be about 2 x slower than using for (int i = 0, len = arrayList.size(); i &amp;lt; len; i++).  I think you mentioned that in the [link]( &lt;a href=&quot;http://stackoverflow.com/questions/2113216/which-is-more-efficient-a-for-each-loop-or-an-iterator&quot; title=&quot;which is more efficient a for each loop or an iterator&quot;&gt;stackoverflow.com/questions/2113216/&lt;/a&gt;) link anyway, but is important to highlight that...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/895295/leo&quot; title=&quot;1,070 reputation&quot; class=&quot;comment-user&quot;&gt;Leo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment40824195_22114571&quot;&gt;&lt;span title=&quot;2014-09-26 11:25:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 26, 2014 at 11:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I imagine the &lt;code&gt;for(int value : int_array) {/* loop content */}&lt;/code&gt; is slowest in your test because it is syntactically equivalent to &lt;code&gt;for(int i = 0; i &amp;lt; int_array.length; i++) {int value =  int_array[i]; /* loop content */}&lt;/code&gt;, which isn&apos;t what your test compares.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/889583/daiscog&quot; title=&quot;10,390 reputation&quot; class=&quot;comment-user&quot;&gt;daiscog&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment52120328_22114571&quot;&gt;&lt;span title=&quot;2015-08-20 08:53:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 20, 2015 at 8:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s important to compare apples-to-apples, here. The question was about &lt;code&gt;for&lt;/code&gt; versus &lt;code&gt;foreach&lt;/code&gt;. You are comparing indexed-access versus iterated access. It&apos;s important to point out that &lt;code&gt;foreach&lt;/code&gt; is just syntactic sugar wrapping &quot;iterator&quot; traversal of the collection. There is no discernible difference between &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;foreach&lt;/code&gt; when you are always using an iterator, so it&apos;s not fair to imply that &lt;code&gt;foreach&lt;/code&gt; is better for performance. Technically speaking, it generates the same code as a regular &lt;code&gt;for&lt;/code&gt; loop &lt;i&gt;provided that you are still using an iterator in the for loop&lt;/i&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/276232/christopher-schultz&quot; title=&quot;19,297 reputation&quot; class=&quot;comment-user&quot;&gt;Christopher Schultz&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103252702_22114571&quot;&gt;&lt;span title=&quot;2019-10-18 20:35:59Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 18, 2019 at 20:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;To me saying that foreach is more performant when going through Collection is terribly misleading. If it is a linked list in a for loop using the get(i), you&apos;re not traversing once, you&apos;re traversing 1+2+..n times. Using iterable is to make sure to go through the Collection in the most optimal way without having to have to write extra code (ex : current = current.getChild()). Of course for ArrayList, you will be a bit faster using a for instead fo foreach because you don&apos;t need to construct the intermediary Iterator. A logical explanation is way better than benchmarks in this case for me&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5070577/walfrat&quot; title=&quot;5,315 reputation&quot; class=&quot;comment-user&quot;&gt;Walfrat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment110181294_22114571&quot;&gt;&lt;span title=&quot;2020-06-10 08:14:34Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 10, 2020 at 8:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is what people actually used before for-each, not the C-style for statement.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4520074/danny&quot; title=&quot;132 reputation&quot; class=&quot;comment-user&quot;&gt;Danny&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124976472_85209&quot;&gt;&lt;span title=&quot;2022-01-13 10:41:41Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 13 at 10:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The most relevant and accurate answer. Enchansed for has two translations indeed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1923644/zarial&quot; title=&quot;283 reputation&quot; class=&quot;comment-user&quot;&gt;Zarial&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79717120_33232565&quot;&gt;&lt;span title=&quot;2017-09-23 11:57:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2017 at 11:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I entirely disagree with: &lt;i&gt;Java 8 has introduced streams which perform generally better.&lt;/i&gt;, streams are only really feasible if you work with a big enough data set. Also &lt;code&gt;.stream().forEach()&lt;/code&gt; can be replaced with &lt;code&gt;.forEach()&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5515060/lino&quot; title=&quot;18,846 reputation&quot; class=&quot;comment-user&quot;&gt;Lino&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117699284_33232565&quot;&gt;&lt;span title=&quot;2021-03-11 10:42:55Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 11, 2021 at 10:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;m not so thinking about .forEach(), because the run times of forEeach more than for loop, so that&apos;s  forEarch don&apos;t best solutions&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5727849/thang&quot; title=&quot;321 reputation&quot; class=&quot;comment-user&quot;&gt;Thang&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122639785_33232565&quot;&gt;&lt;span title=&quot;2021-09-30 04:54:35Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 30, 2021 at 4:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;fd is right - the internal code when the right-hand side of the for(:) idiom uses an int and array.length instead of fetching an Iterator. &lt;a href=&quot;http://forums.sun.com/thread.jspa?messageID=2743233&quot; rel=&quot;nofollow noreferrer&quot;&gt;forums.sun.com/thread.jspa?messageID=2743233&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/13757/nsayer&quot; title=&quot;16,449 reputation&quot; class=&quot;comment-user&quot;&gt;nsayer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment11428_85242&quot;&gt;&lt;span title=&quot;2008-09-17 17:54:54Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2008 at 17:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;this random information doesn&apos;t even remotely answer the question&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1843331/tim&quot; title=&quot;39,813 reputation&quot; class=&quot;comment-user&quot;&gt;Tim&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84662523_23171818&quot;&gt;&lt;span title=&quot;2018-02-16 14:55:37Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 16, 2018 at 14:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How does this answer the question? &lt;i&gt;&quot;What would the equivalent for loop look like without using the for each syntax?&quot;&lt;/i&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/63550/peter-mortensen&quot; title=&quot;30,018 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Mortensen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126992575_12722557&quot;&gt;&lt;span title=&quot;2022-04-13 22:07:29Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 13 at 22:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In those cases, the use of &lt;code&gt;removeIf&lt;/code&gt; might be the right tool&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/467379/ncmathsadist&quot; title=&quot;4,524 reputation&quot; class=&quot;comment-user&quot;&gt;ncmathsadist&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86537469_85279&quot;&gt;&lt;span title=&quot;2018-04-10 18:57:54Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 10, 2018 at 18:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Should have mention that it&apos;s added in Java 1.8&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3434763/thelibrarian&quot; title=&quot;181 reputation&quot; class=&quot;comment-user&quot;&gt;TheLibrarian&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77669463_44018004&quot;&gt;&lt;span title=&quot;2017-07-27 14:42:57Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 27, 2017 at 14:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;We cant be 100% sure that the same thread is used. I like to use the &lt;code&gt;for(&lt;/code&gt; form if I like to make sure the same thread is used. I like to use the stream-form if I like to allow multithreaded execution.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/843943/grim&quot; title=&quot;4,523 reputation&quot; class=&quot;comment-user&quot;&gt;Grim&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment96276442_44018004&quot;&gt;&lt;span title=&quot;2019-02-18 12:27:40Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 18, 2019 at 12:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;The foreach loop, added in Java 5 (also called the &quot;enhanced for loop&quot;), is equivalent to using a java.util.Iterator&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4854931/alex78191&quot; title=&quot;1,642 reputation&quot; class=&quot;comment-user&quot;&gt;Alex78191&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment104216877_49015283&quot;&gt;&lt;span title=&quot;2019-11-21 19:10:37Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 21, 2019 at 19:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I don&apos;t think we need this answer. See &lt;a href=&quot;https://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work/59667941#comment121529936_66815146&quot;&gt;this comment&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/63550/peter-mortensen&quot; title=&quot;30,018 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Mortensen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126992661_40283536&quot;&gt;&lt;span title=&quot;2022-04-13 22:14:40Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 13 at 22:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;-1: this is way less readable (generally): even your own example (the first one) is wrong, as it leaves out the first element in the array.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2713162/ondrej-skopek&quot; title=&quot;768 reputation&quot; class=&quot;comment-user&quot;&gt;Ondrej Skopek&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59825043_30700135&quot;&gt;&lt;span title=&quot;2016-03-18 17:11:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 18, 2016 at 17:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This requires Java 1.8 +&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4616324/barni&quot; title=&quot;152 reputation&quot; class=&quot;comment-user&quot;&gt;BARNI&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84606430_48497277&quot;&gt;&lt;span title=&quot;2018-02-15 07:31:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 15, 2018 at 7:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;doesn&apos;t even remotely answer the question&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1843331/tim&quot; title=&quot;39,813 reputation&quot; class=&quot;comment-user&quot;&gt;Tim&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84662580_48497277&quot;&gt;&lt;span title=&quot;2018-02-16 14:57:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 16, 2018 at 14:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;An explanation would be in order.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/63550/peter-mortensen&quot; title=&quot;30,018 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Mortensen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126992634_48497277&quot;&gt;&lt;span title=&quot;2022-04-13 22:11:33Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 13 at 22:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Please explain why your code and try to answer the question &quot;How does the Java &apos;for each&apos; loop work?&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11876201/phoenixstudio&quot; title=&quot;961 reputation&quot; class=&quot;comment-user&quot;&gt;phoenixstudio&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment116529126_65906872&quot;&gt;&lt;span title=&quot;2021-01-26 18:27:40Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 26, 2021 at 18:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;1) This is incorrect.  The direct equivalent to a for-each on an iterable (such as a list) uses an iterator.  That&apos;s what the JLS says.  Look it up. 2) We don&apos;t need more answers to this question.  Please don&apos;t waste everyone&apos;s time by adding yet another answer to old questions.  Find new questions that you can answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/139985/stephen-c&quot; title=&quot;672,245 reputation&quot; class=&quot;comment-user&quot;&gt;Stephen C&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121529936_66815146&quot;&gt;&lt;span title=&quot;2021-08-13 04:01:02Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 13, 2021 at 4:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;As its currently written, your answer is unclear. Please &lt;a href=&quot;https://stackoverflow.com/posts/71194990/edit&quot;&gt;edit&lt;/a&gt; to add additional details that will help others understand how this addresses the question asked. You can find more information on how to write good answers &lt;a href=&quot;/help/how-to-answer&quot;&gt;in the help center&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/-1/community&quot; title=&quot;1 reputation&quot; class=&quot;comment-user&quot;&gt;Community&lt;/a&gt;\n&lt;span class=&quot;flex--item s-badge ml2  s-badge__xs &quot; title=&quot;Community Bot  not a real person. Replies to this bot are not monitored.&quot;&gt;Bot&lt;/span&gt;                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125848840_71194990&quot;&gt;&lt;span title=&quot;2022-02-20 16:10:54Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 20 at 16:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":561,"title":"How does the Java 'for each' loop work?","content":"\n                \n&lt;p&gt;Consider:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; someList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// add &quot;monkey&quot;, &quot;donkey&quot;, &quot;skeleton key&quot; to someList&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String item : someList) {\n    System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What would the equivalent &lt;code&gt;for&lt;/code&gt; loop look like without using the &lt;em&gt;for each&lt;/em&gt; syntax?&lt;/p&gt;\n    ","slug":"how-does-the-java-'for-each'-loop-work-1657388423749","postType":"QUESTION","createdAt":"2022-07-09T17:40:23.000Z","updatedAt":"2022-07-09T17:40:23.000Z","tags":[{"id":2714,"name":"foreach","slug":"foreach","createdAt":"2022-07-09T17:40:23.000Z","updatedAt":"2022-07-09T17:40:23.000Z","Questions_Tags":{"questionId":561,"tagId":2714}},{"id":2715,"name":"syntactic-sugar","slug":"syntactic-sugar","createdAt":"2022-07-09T17:40:23.000Z","updatedAt":"2022-07-09T17:40:23.000Z","Questions_Tags":{"questionId":561,"tagId":2715}}]}},"__N_SSG":true}