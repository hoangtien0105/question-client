{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;code&gt;console.log&lt;/code&gt; is not standardized, so the behavior is rather undefined, and can be changed easily from release to release of the developer tools. Your book is likely to be outdated, as might my answer soon.&lt;/p&gt;\n\n&lt;p&gt;To our code, it does not make any difference whether &lt;code&gt;console.log&lt;/code&gt; is async or not, it does not provide any kind of callback or so; and the values you pass are always referenced and computed at the time you call the function.&lt;/p&gt;\n\n&lt;p&gt;We don&apos;t really know what happens then (OK, we could, since Firebug, Chrome Devtools and Opera Dragonfly are all open source). The console will need to store the logged values somewhere, and it will display them on the screen. The rendering will happen asynchronously for sure (being throttled to rate-limit updates), as will future interactions with the logged objects in the console (like expanding object properties).&lt;/p&gt;\n\n&lt;p&gt;So the console might either clone (serialize) the mutable objects that you did log, or it will store references to them. The first one doesn&apos;t work well with deep/large objects. Also, at least the initial rendering in the console will probably show the &quot;current&quot; state of the object, i.e. the one when it got logged - in your example you see &lt;code&gt;Object {}&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;However, when you expand the object to inspect its properties further, it is likely that the console will have only stored a reference to your object and its properties, and displaying them now will then show their current (already mutated) state. If you click on the &lt;code&gt;+&lt;/code&gt;, you should be able to see the &lt;code&gt;bar&lt;/code&gt; property in your example.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a screenshot that was posted in the &lt;a href=&quot;http://code.google.com/p/chromium/issues/detail?id=50316&quot; rel=&quot;noreferrer&quot;&gt;bug report&lt;/a&gt; to explain their &quot;fix&quot;:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/UEMqd.png&quot; alt=&quot;&quot;&gt;\n&lt;/p&gt;\n\n&lt;p&gt;So, some values might be referenced long after they have been logged, and the evaluation of these is rather &lt;em&gt;lazy&lt;/em&gt; (&quot;when needed&quot;). The most famous example of this discrepancy is handled in the question &lt;a href=&quot;https://stackoverflow.com/questions/4057440/is-chromes-javascript-console-lazy-about-evaluating-arrays&quot;&gt;Is Chrome&apos;s JavaScript console lazy about evaluating arrays?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;A workaround is to make sure to log serialized snapshots of your objects always, e.g. by doing &lt;code&gt;console.log(JSON.stringify(obj))&lt;/code&gt;. This will work for non-circular and rather small objects only, though. See also &lt;a href=&quot;https://stackoverflow.com/q/7389069/1048572&quot;&gt;How can I change the default behavior of console.log in Safari?&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The better solution is to use breakpoints for debugging, where the execution completely stops and you can inspect the current values at each point. Use logging only with serialisable and immutable data.&lt;/p&gt;\n    ","\n&lt;p&gt;This isn&apos;t really an answer to the question, but it might be handy to someone who stumbled on this post, and it was too long to put in a comment:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;logSync&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    args = args.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(arg)));\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(...args);\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Error trying to console.logSync()&apos;&lt;/span&gt;, ...args);\n  }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This creates a pseudo-synchronous version of &lt;code&gt;console.log&lt;/code&gt;, but with the same caveats as mentioned in the accepted answer.&lt;/p&gt;\n\n&lt;p&gt;Since it seems like, at the moment, most browsers&apos; &lt;code&gt;console.log&lt;/code&gt;&apos;s are asynchronous in some manner, you may want to use a function like this in certain scenarios.&lt;/p&gt;\n    ","\n&lt;p&gt;When using console.log:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = {}; a.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a);a.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-comment&quot;&gt;// without b&lt;/span&gt;\na = {}; a.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a1&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a2&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a3&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a4&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a5&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a6&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a7&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;a.&lt;span class=&quot;hljs-property&quot;&gt;a8&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a);a.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-comment&quot;&gt;// with b, maybe&lt;/span&gt;\na = {}; a.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a);a.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-comment&quot;&gt;// with b&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in the first situation the object is simple enough, so console can &apos;stringify&apos; it then present to you; but in the other situations, a is too &apos;complicated&apos; to &apos;stringify&apos; so console will show you the in memory object instead, and yes, when you look at it b has already be attached to a.&lt;/p&gt;\n    "],"id":553,"title":"console.log() async or sync?","content":"\n                \n&lt;p&gt;I am currently reading &lt;a href=&quot;http://pragprog.com/book/tbajs/async-javascript&quot;&gt;Async Javascript&lt;/a&gt; by Trevor Burnham.  This has been a great book so far.&lt;/p&gt;\n\n&lt;p&gt;He talks about this snippet and console.log being &apos;async&apos; in the Safari and Chrome console. Unfortunately I can&apos;t replicate this. Here is the code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {}; \n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj); \nobj.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// my outcome: Object{}; &apos;bar&apos;;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// The book outcome: {foo:bar};&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If this was async, I would anticipate the outcome to be the books outcome. console.log() is put in the event queue until all code is executed, then it is ran and it would have the bar property.&lt;/p&gt;\n\n&lt;p&gt;It appears though it is running synchronously.&lt;/p&gt;\n\n&lt;p&gt;Am I running this code wrong? Is console.log actually async?&lt;/p&gt;\n    ","slug":"console.log()-async-or-sync-1657388401087","postType":"QUESTION","createdAt":"2022-07-09T17:40:01.000Z","updatedAt":"2022-07-09T17:40:01.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How do I list all files of a directory?","slug":"how-do-i-list-all-files-of-a-directory-1657388340404"},{"title":"What is the difference between == and equals() in Java?","slug":"what-is-the-difference-between-and-equals()-in-java-1657387729654"},{"title":"HTTP GET with request body","slug":"http-get-with-request-body-1657387379038"},{"title":"Is List<Dog> a subclass of List<Animal>? Why are Java generics not implicitly polymorphic?","slug":"is-listlessdoggreater-a-subclass-of-listlessanimalgreater-why-are-java-generics-not-implicitly-polymorphic-1657384766724"},{"title":"How do you access the matched groups in a JavaScript regular expression?","slug":"how-do-you-access-the-matched-groups-in-a-javascript-regular-expression-1657388233817"},{"title":"How can I vertically center a div element for all browsers using CSS?","slug":"how-can-i-vertically-center-a-div-element-for-all-browsers-using-css-1657385488425"},{"title":"Cross-thread operation not valid: Control accessed from a thread other than the thread it was created on","slug":"cross-thread-operation-not-valid:-control-accessed-from-a-thread-other-than-the-thread-it-was-created-on-1657387659019"},{"title":"Dynamically select data frame columns using $ and a character value","slug":"dynamically-select-data-frame-columns-using-dollar-and-a-character-value-1657387836662"},{"title":"Using i and j as variables in MATLAB","slug":"using-i-and-j-as-variables-in-matlab-1657388506358"},{"title":"Iterating through a Collection, avoiding ConcurrentModificationException when removing objects in a loop","slug":"iterating-through-a-collection-avoiding-concurrentmodificationexception-when-removing-objects-in-a-loop-1657387311824"},{"title":"How do I expire a PHP session after 30 minutes?","slug":"how-do-i-expire-a-php-session-after-30-minutes-1657387990658"},{"title":"Which equals operator (== vs ===) should be used in JavaScript comparisons?","slug":"which-equals-operator-(-vs-)-should-be-used-in-javascript-comparisons-1657384663105"},{"title":"Why can't I store a value and a reference to that value in the same struct?","slug":"why-can't-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct-1657387506828"},{"title":"How can I save an activity state using the save instance state?","slug":"how-can-i-save-an-activity-state-using-the-save-instance-state-1657387429981"},{"title":"When to use virtual destructors?","slug":"when-to-use-virtual-destructors-1657388152135"},{"title":"How to remove \"noise\" from GCC/clang assembly output?","slug":"how-to-remove-\"noise\"-from-gccclang-assembly-output-1657387612391"},{"title":"Detecting a mobile browser","slug":"detecting-a-mobile-browser-1657388460071"},{"title":"Object comparison in JavaScript [duplicate]","slug":"object-comparison-in-javascript-duplicate-1657387675463"},{"title":"Is there a built in function for string natural sort?","slug":"is-there-a-built-in-function-for-string-natural-sort-1657388069553"},{"title":"Are dictionaries ordered in Python 3.6+?","slug":"are-dictionaries-ordered-in-python-3.6+-1657387834234"}]},"__N_SSG":true}