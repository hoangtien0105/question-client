{"pageProps":{"data":{"answer":["\n&lt;p&gt;For syntax errors, you need to enable error display in the php.ini. By default these are turned off because you don&apos;t want a &quot;customer&quot; seeing the error messages. &lt;a href=&quot;http://php.net/manual/en/errorfunc.configuration.php#ini.error-reporting&quot; rel=&quot;noreferrer&quot;&gt;Check this page&lt;/a&gt; in the PHP documentation for information on the 2 directives: &lt;code&gt;error_reporting&lt;/code&gt; and &lt;code&gt;display_errors&lt;/code&gt;. &lt;code&gt;display_errors&lt;/code&gt; is probably the one you want to change. If you can&apos;t modify the php.ini, you can also add the following lines to an .htaccess file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;php_flag  display_errors        on\nphp_value error_reporting       &lt;span class=&quot;hljs-number&quot;&gt;2039&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may want to consider using the value of E_ALL (as mentioned by Gumbo) for your version of PHP for &lt;code&gt;error_reporting&lt;/code&gt; to get all of the errors. &lt;a href=&quot;http://docs.php.net/manual/en/errorfunc.constants.php&quot; rel=&quot;noreferrer&quot;&gt;more info&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;3 other items: (1) You can check the error log file as it will have all of the errors (unless logging has been disabled). (2) Adding the following 2 lines will help you debug errors that are not syntax errors:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;On&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(3) Another option is to use an editor that checks for errors when you type, such as &lt;a href=&quot;http://www.nusphere.com/products/phped.htm&quot; rel=&quot;noreferrer&quot;&gt;PhpEd&lt;/a&gt;. PhpEd also comes with a debugger which can provide more detailed information. (The PhpEd debugger is very similar to xdebug and integrates directly into the editor so you use 1 program to do everything.)&lt;/p&gt;\n\n&lt;p&gt;Cartman&apos;s &lt;a href=&quot;http://www.ibm.com/developerworks/library/os-debug/&quot; rel=&quot;noreferrer&quot;&gt;link&lt;/a&gt; is also very good: &lt;a href=&quot;http://www.ibm.com/developerworks/library/os-debug/&quot; rel=&quot;noreferrer&quot;&gt;http://www.ibm.com/developerworks/library/os-debug/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The following enables all errors:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_startup_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also see the following links&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/errorfunc.configuration.php#ini.display-errors&quot; rel=&quot;noreferrer&quot;&gt;http://php.net/manual/en/errorfunc.configuration.php#ini.display-errors&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/errorfunc.configuration.php#ini.display-startup-errors&quot; rel=&quot;noreferrer&quot;&gt;http://php.net/manual/en/errorfunc.configuration.php#ini.display-startup-errors&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/function.error-reporting.php&quot; rel=&quot;noreferrer&quot;&gt;http://php.net/manual/en/function.error-reporting.php&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The following code should display all errors:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// - Display Errors&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;On&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;html_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// - Error Reporting&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// - Shutdown Handler&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ShutdownHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(@&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$error&lt;/span&gt; = @&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_get_last&lt;/span&gt;()))\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(@&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;call_user_func_array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ErrorHandler&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$error&lt;/span&gt;));\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n};\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;register_shutdown_function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ShutdownHandler&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// - Error Handler&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ErrorHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$message&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$file&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$line&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$_ERRORS&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt;(\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0001&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_ERROR&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0002&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_WARNING&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0004&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_PARSE&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0008&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_NOTICE&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0010&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_CORE_ERROR&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0020&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_CORE_WARNING&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0040&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_COMPILE_ERROR&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0080&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_COMPILE_WARNING&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0100&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_USER_ERROR&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0200&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_USER_WARNING&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0400&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_USER_NOTICE&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x0800&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_STRICT&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x1000&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_RECOVERABLE_ERROR&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x2000&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_DEPRECATED&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-number&quot;&gt;0x4000&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_USER_DEPRECATED&apos;&lt;/span&gt;\n    );\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!@&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt; = @&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_search&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;, @&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_flip&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_ERRORS&lt;/span&gt;))))\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;E_UNKNOWN&apos;&lt;/span&gt;;\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt;(@&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s Error in file \\xBB%s\\xAB at line %d: %s\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;, @&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;basename&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$file&lt;/span&gt;), &lt;span class=&quot;hljs-variable&quot;&gt;$line&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$message&lt;/span&gt;)));\n};\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$old_error_handler&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;set_error_handler&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ErrorHandler&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// other php code&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The only way to generate a blank page with this code is when you have a error in the shutdown handler. I copied and pasted this from my own cms without testing it, but I am sure it works.&lt;/p&gt;\n    ","\n&lt;p&gt;You can include the following lines in the file you want to debug:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This overrides the default settings in php.ini, which just make PHP report the errors to the log.&lt;/p&gt;\n    ","\n&lt;p&gt;Errors and warnings usually appear in &lt;code&gt;....\\logs\\php_error.log&lt;/code&gt; or &lt;code&gt;....\\logs\\apache_error.log&lt;/code&gt; depending on your php.ini settings.&lt;/p&gt;\n\n&lt;p&gt;Also useful errors are often directed to the browser, but as they are not valid html they are not displayed.&lt;/p&gt;\n\n&lt;p&gt;So &lt;code&gt;&quot;tail -f&lt;/code&gt;&quot; your log files and when you get a blank screen use IEs &quot;view&quot; -&amp;gt; &quot;source&quot; menu options to view the raw output.&lt;/p&gt;\n    ","\n&lt;h2&gt;PHP Configuration&lt;/h2&gt;\n\n&lt;p&gt;2 entries in &lt;a href=&quot;https://stackoverflow.com/questions/8684609/dude-wheres-my-php-ini&quot;&gt;php.ini&lt;/a&gt; dictate the output of errors:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://il1.php.net/manual/en/errorfunc.configuration.php#ini.display-errors&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;display_errors&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://il1.php.net/manual/en/errorfunc.configuration.php#ini.error-reporting&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;error_reporting&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In &lt;strong&gt;production&lt;/strong&gt;, &lt;code&gt;display_errors&lt;/code&gt; is usually set to &lt;code&gt;Off&lt;/code&gt; (Which is a good thing, because error display in production sites is generally not desirable!).&lt;/p&gt;\n\n&lt;p&gt;However, in &lt;strong&gt;development&lt;/strong&gt;, it should be set to &lt;code&gt;On&lt;/code&gt;, so that errors get displayed. &lt;strong&gt;Check&lt;/strong&gt;!&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;error_reporting&lt;/code&gt; (as of PHP 5.3) is set by default to &lt;code&gt;E_ALL &amp;amp; ~E_NOTICE &amp;amp; ~E_STRICT &amp;amp; ~E_DEPRECATED&lt;/code&gt; (meaning, everything is shown except for notices, strict standards and deprecation notices). When in doubt, set it to &lt;code&gt;E_ALL&lt;/code&gt; to display &lt;strong&gt;all&lt;/strong&gt; the errors. &lt;strong&gt;Check&lt;/strong&gt;!&lt;/p&gt;\n\n&lt;h2&gt;Whoa whoa! No check! I can&apos;t change my php.ini!&lt;/h2&gt;\n\n&lt;p&gt;That&apos;s a shame. Usually shared hosts do not allow the alteration of their php.ini file, and so, that option is sadly unavailable. But fear not! We have &lt;a href=&quot;https://www.php.net/manual/en/configuration.file.per-user.php&quot; rel=&quot;noreferrer&quot;&gt;other options&lt;/a&gt;!&lt;/p&gt;\n\n&lt;h2&gt;Runtime configuration&lt;/h2&gt;\n\n&lt;p&gt;In the desired script, we can alter the php.ini entries in runtime! Meaning, it&apos;ll run when the script runs! Sweet!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;&lt;strong&gt;&lt;a href=&quot;http://il1.php.net/manual/en/function.error-reporting.php&quot; rel=&quot;noreferrer&quot;&gt;error_reporting&lt;/a&gt;&lt;/strong&gt;(E_ALL);\n&lt;strong&gt;&lt;a href=&quot;http://php.net/ini_set&quot; rel=&quot;noreferrer&quot;&gt;ini_set&lt;/a&gt;&lt;/strong&gt;(&quot;display_errors&quot;, &quot;On&quot;);&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;These two lines will do the same effect as altering the php.ini entries as above! Awesome!&lt;/p&gt;\n\n&lt;h2&gt;I still get a blank page/500 error!&lt;/h2&gt;\n\n&lt;p&gt;That means that the script hadn&apos;t even run! That usually happens when you have a syntax error!&lt;/p&gt;\n\n&lt;p&gt;With syntax errors, the script doesn&apos;t even get to runtime. It fails at &lt;strong&gt;compile time&lt;/strong&gt;, meaning that it&apos;ll use the values in php.ini, which if you hadn&apos;t changed, may not allow the display of errors.&lt;/p&gt;\n\n&lt;h2&gt;Error logs&lt;/h2&gt;\n\n&lt;p&gt;In addition, PHP by default logs errors. In shared hosting, it may be in a dedicated folder or on the same folder as the offending script.&lt;/p&gt;\n\n&lt;p&gt;If you have access to php.ini, you can find it under the &lt;strong&gt;&lt;a href=&quot;http://il1.php.net/manual/en/errorfunc.configuration.php#ini.error-log&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;error_log&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; entry.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m always using this syntax at the very top of the php script.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;error_reporting&apos;&lt;/span&gt;, E_ALL);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;On&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//On or Off&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is a really useful extension called &quot;&lt;a href=&quot;http://www.xdebug.org/&quot; rel=&quot;noreferrer&quot;&gt;xdebug&lt;/a&gt;&quot; that will make your reports much nicer as well.&lt;/p&gt;\n    ","\n&lt;p&gt;For quick, hands-on troubleshooting I normally suggest here on SO:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(~&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to be put at the beginning of the script that is under trouble-shooting. This is not perfect, the perfect variant is that you also enable that in the &lt;code&gt;php.ini&lt;/code&gt; and that you log the errors in PHP to catch syntax and startup errors.&lt;/p&gt;\n\n&lt;p&gt;The settings outlined here display all errors, notices and warnings, including strict ones, regardless which PHP version.&lt;/p&gt;\n\n&lt;p&gt;Next things to consider:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Install &lt;a href=&quot;http://xdebug.org/&quot; rel=&quot;noreferrer&quot;&gt;Xdebug&lt;/a&gt; and enable remote-debugging with your IDE.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;See as well:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.phptherightway.com/#error_reporting&quot; rel=&quot;noreferrer&quot;&gt;Error Reporting (PHP The Right Way.)&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.php.net/errorfunc.constants.php&quot; rel=&quot;noreferrer&quot;&gt;Predefined Constants&lt;sup&gt;&lt;em&gt;Docs&lt;/em&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/function.error-reporting.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;error_reporting()&lt;/code&gt;&lt;sup&gt;&lt;em&gt;Docs&lt;/em&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/display_errors&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;display_errors&lt;/code&gt;&lt;sup&gt;&lt;em&gt;Docs&lt;/em&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;It is possible to register an hook to make the last error or warning visible.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;shutdown&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{\n  &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_get_last&lt;/span&gt;());\n}\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;register_shutdown_function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;shutdown&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;adding this code to the beginning of you index.php will help you debug the problems.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are super cool, you might try:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$test_server&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;SERVER_NAME&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt; || &lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;SERVER_NAME&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt; || &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;SERVER_NAME&apos;&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;192&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$test_server&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL|E_STRICT);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will only display errors when you are running locally. It also gives you the test_server variable to use in other places where appropriate.&lt;/p&gt;\n\n&lt;p&gt;Any errors that happen before the script runs won&apos;t be caught, but for 99% of errors that I make, that&apos;s not an issue.&lt;/p&gt;\n    ","\n&lt;p&gt;On the top of the page choose a parameter &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ERROR | E_WARNING | E_PARSE);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;This is a problem of loaded vs. runtime configuration&lt;/h1&gt;\n&lt;p&gt;It&apos;s important to recognize that a syntax error or parse error happens during the &lt;strong&gt;compile&lt;/strong&gt; or &lt;strong&gt;parsing&lt;/strong&gt; step, which means that PHP will bail before it&apos;s even had a chance to execute any of your code. So if you are modifying PHP&apos;s &lt;code&gt;display_errors&lt;/code&gt; configuration during runtime, (this includes anything from using &lt;code&gt;ini_set&lt;/code&gt; in your code to using .htaccess, which is a runtime configuration file) then only the default &lt;strong&gt;loaded configuration settings&lt;/strong&gt; are in play.&lt;/p&gt;\n&lt;h1&gt;How to always avoid WSOD in development&lt;/h1&gt;\n&lt;p&gt;To avoid a WSOD you want to make sure that your &lt;strong&gt;loaded configuration file&lt;/strong&gt; has &lt;code&gt;display_errors&lt;/code&gt; on and &lt;code&gt;error_reporting&lt;/code&gt; set to &lt;code&gt;-1&lt;/code&gt; (&lt;em&gt;this is the equivalent E_ALL because it ensures all bits are turned on regardless of which version of PHP you&apos;re running&lt;/em&gt;). Don&apos;t hardcode the constant value of E_ALL, because that value is subject to change between different versions of PHP.&lt;/p&gt;\n&lt;p&gt;Loaded configuration is either your loaded &lt;code&gt;php.ini&lt;/code&gt; file or your &lt;code&gt;apache.conf&lt;/code&gt; or &lt;code&gt;httpd.conf&lt;/code&gt; or virtualhost file. Those files are only read once during the startup stage (when you first start apache httpd or php-fpm, for example) and only overridden by runtime configuration changes. Making sure that &lt;code&gt;display_errors = 1&lt;/code&gt; and &lt;code&gt;error_reporting = -1&lt;/code&gt; in your loaded configuration file ensures that you will never see a &lt;em&gt;WSOD&lt;/em&gt; regardless of syntax or parse error that occur before a runtime change like &lt;code&gt;ini_set(&apos;display_errors&apos;, 1);&lt;/code&gt; or &lt;code&gt;error_reporting(E_ALL);&lt;/code&gt; can take place.&lt;/p&gt;\n&lt;h1&gt;How to find your (php.ini) loaded configuration files&lt;/h1&gt;\n&lt;p&gt;To locate your loaded configuration file(s) just create a new PHP file with only the following code...&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;phpinfo&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then point your browser there and look at &lt;strong&gt;Loaded Configuration File&lt;/strong&gt; and &lt;strong&gt;Additional .ini files parsed&lt;/strong&gt;, which are usually at the top of your &lt;code&gt;phpinfo()&lt;/code&gt; and will include the absolute path to all your loaded configuration files.&lt;/p&gt;\n&lt;p&gt;If you see &lt;code&gt;(none)&lt;/code&gt; instead of the file, that means you don&apos;t have a php.ini in &lt;strong&gt;Configuration File (php.ini) Path&lt;/strong&gt;. So you can &lt;a href=&quot;https://raw.githubusercontent.com/php/php-src/master/php.ini-development&quot; rel=&quot;noreferrer&quot;&gt;download the stock php.ini bundled with PHP from here&lt;/a&gt; and copy that to your configuration file path as php.ini then make sure your php user has sufficient permissions to read from that file. You&apos;ll need to restart httpd or php-fpm to load it in. Remember, this is the &lt;em&gt;development&lt;/em&gt; php.ini file that comes bundled with the PHP source. So please don&apos;t use it in production!&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;Just don&apos;t do this in production&lt;/h1&gt;\n&lt;p&gt;This really is the best way to avoid a WSOD in development. Anyone suggesting that you put &lt;code&gt;ini_set(&apos;display_errors&apos;, 1);&lt;/code&gt; or &lt;code&gt;error_reporting(E_ALL);&lt;/code&gt; at the top of your PHP script or using .htaccess like you did here, is not going to help you avoid a WSOD when a syntax or parse error occurs (like in your case here) if your loaded configuration file has &lt;code&gt;display_errors&lt;/code&gt; turned off.&lt;/p&gt;\n&lt;p&gt;Many people (and stock installations of PHP) will use a production-ini file that has &lt;code&gt;display_errors&lt;/code&gt; turned off by default, which typically results in this same frustration you&apos;ve experienced here. Because PHP already has it turned off when it starts up, then encounters a syntax or parse error, and bails with nothing to output. You expect that your &lt;code&gt;ini_set(&apos;display_errors&apos;,1);&lt;/code&gt; at the top of your PHP script should have avoided that, but it won&apos;t matter if PHP can&apos;t parse your code because it will never have reached the runtime.&lt;/p&gt;\n    ","\n&lt;p&gt;To persist this and make it confortale, you can edit your php.ini file. It is usually stored in &lt;code&gt;/etc/php.ini&lt;/code&gt; or &lt;code&gt;/etc/php/php.ini&lt;/code&gt;, but more local &lt;code&gt;php.ini&lt;/code&gt;&apos;s may overwrite it, depending on your hosting provider&apos;s setup guidelines. Check a &lt;code&gt;phpinfo()&lt;/code&gt; file for &lt;code&gt;Loaded Configuration File&lt;/code&gt; at the top, to be sure which one gets loaded last.&lt;/p&gt;\n\n&lt;p&gt;Search for display_errors in that file. There should be only 3 instances, of which 2 are commented.&lt;/p&gt;\n\n&lt;p&gt;Change the uncommented line to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;display_errors = stdout\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_startup_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I don&apos;t know if it will help, but here is a piece of my standard config file for php projects.  I tend not to depend too much on the apache configs even on my own server.&lt;/p&gt;\n&lt;p&gt;I never have the disappearing error problem, so perhaps something here will give you an idea.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Edited to show APPLICATON_LIVE&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\nAPPLICATION_LIVE will be used in process to tell if we are in a development or production environment.  It&apos;s generally set as early as possible (often the first code to run), before any config, url routing, etc.\n*/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;%^(www.)?livedomain.com$%&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;HTTP_HOST&quot;&lt;/span&gt;]) ) {\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;APPLICATION_LIVE&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; ( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;%^(www.)?devdomain.net$%&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;HTTP_HOST&quot;&lt;/span&gt;]) ) {\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;APPLICATION_LIVE&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INVALID HOST REQUEST (&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;HTTP_HOST&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Log or take other appropriate action.&lt;/span&gt;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\n--------------------------------------------------------------------\nDEFAULT ERROR HANDLING\n--------------------------------------------------------------------\nDefault error logging.  Some of these may be changed later based on APPLICATION_LIVE.\n*/&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL &amp;amp; ~E_STRICT);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;display_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;display_startup_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;log_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;log_errors_max_len&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;error_log&quot;&lt;/span&gt;, APPLICATION_ROOT.&lt;span class=&quot;hljs-string&quot;&gt;&quot;logs/php_error_log.txt&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;display_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;display_startup_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( ! APPLICATION_LIVE ) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// A few changes to error handling for development.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// We will want errors to be visible during development.&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;display_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;display_startup_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;html_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;docref_root&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.php.net/&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;error_prepend_string&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;div style=&apos;color:red; font-family:verdana; border:1px solid red; padding:5px;&apos;&amp;gt;&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt; ( &lt;span class=&quot;hljs-string&quot;&gt;&quot;error_append_string&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL | E_STRICT);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;html_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In addition, you can get more detailed information with &lt;a href=&quot;https://xdebug.org&quot; rel=&quot;noreferrer&quot;&gt;xdebug&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I recommend &lt;a href=&quot;https://tracy.nette.org/en/&quot; rel=&quot;noreferrer&quot;&gt;Nette Tracy&lt;/a&gt; for better visualization of errors and exceptions in PHP:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/B1gSC.png&quot; alt=&quot;Nette Tracy screenshot&quot;&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL | E_STRICT);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And turn on display errors in php.ini&lt;/p&gt;\n    ","\n&lt;p&gt;You can register your own &lt;a href=&quot;http://de.php.net/manual/en/function.set-error-handler.php&quot; rel=&quot;noreferrer&quot;&gt;error handler&lt;/a&gt; in PHP. Dumping all errors to a file might help you in these obscure cases, for example. Note that your function will get called, no matter what your current &lt;a href=&quot;http://de.php.net/manual/en/function.error-reporting.php&quot; rel=&quot;noreferrer&quot;&gt;error_reporting&lt;/a&gt; is set to. Very basic example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dump_error_to_file&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$errno&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$errstr&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_put_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/tmp/php-errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y-m-d H:i:s - &apos;&lt;/span&gt;) . &lt;span class=&quot;hljs-variable&quot;&gt;$errstr&lt;/span&gt;, FILE_APPEND);\n}\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;set_error_handler&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;dump_error_to_file&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The two key lines you need to get useful errors out of PHP are:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As pointed out by other contributors, these are switched off by default for security reasons. As a useful tip - when you&apos;re setting up your site it&apos;s handy to do a switch for your different environments so that these errors are ON by default in your local and development environments. This can be achieved with the following code (ideally in your index.php or config file so this is active from the start):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;SERVER_NAME&apos;&lt;/span&gt;])\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// local&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;yourdomain.dev&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;// dev&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;dev.yourdomain.com&apos;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//live&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;yourdomain.com&apos;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;open your php.ini, \nmake sure it&apos;s set to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;display_errors = On\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;restart your server.&lt;/p&gt;\n    ","\n&lt;p&gt;You might also want to try PHPStorm as your code editor.  It will find many PHP and other syntax errors right as you are typing in the editor. &lt;/p&gt;\n    ","\n&lt;p&gt;if you are a ubuntu user then goto your terminal and run this command&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;sudo tail -&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;f /&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;/log/apache2/error.log\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where it will display recent 50 errors. \nThere is a error file &lt;code&gt;error.log&lt;/code&gt; for apache2 which logs all the errors.&lt;/p&gt;\n    ","\n&lt;p&gt;To turn on full error reporting, add this to your script:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This causes even minimal warnings to show up. And, just in case:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display_errors&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Will force the display of errors. This should be turned off in production servers, but not when you&apos;re developing.&lt;/p&gt;\n    ","\n&lt;p&gt;The ERRORS are the most useful things for the developers to know their mistakes and resolved them  to make the system working perfect.&lt;/p&gt;\n\n&lt;p&gt;PHP provides some of better ways to know the developers why and where their piece of code is getting the errors, so by knowing those errors developers can make their code better in many ways.&lt;/p&gt;\n\n&lt;p&gt;Best ways to write following two lines on the top of script to get all errors messages:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;display_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another way to use debugger tools like &lt;a href=&quot;http://xdebug.org&quot; rel=&quot;noreferrer&quot;&gt;xdebug&lt;/a&gt; in your IDE.&lt;/p&gt;\n    ","\n&lt;p&gt;In addition to all the wonderful answers here, I&apos;d like to throw in a special mention for the MySQLi and PDO libraries.&lt;/p&gt;\n\n&lt;p&gt;In order to...&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Always see database related errors, and&lt;/li&gt;\n&lt;li&gt;Avoid checking the return types for methods to see if something went wrong&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The best option is to configure the libraries to &lt;a href=&quot;https://secure.php.net/manual/language.exceptions.php&quot; rel=&quot;noreferrer&quot;&gt;throw exceptions&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h3&gt;MySQLi&lt;/h3&gt;\n\n&lt;p&gt;Add this near the top of your script&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_report&lt;/span&gt;(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is best placed before you use &lt;code&gt;new mysqli()&lt;/code&gt; or &lt;code&gt;mysqli_connect()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h3&gt;PDO&lt;/h3&gt;\n\n&lt;p&gt;Set the &lt;code&gt;PDO::ATTR_ERRMODE&lt;/code&gt; attribute to &lt;code&gt;PDO::ERRMODE_EXCEPTION&lt;/code&gt; on your connection instance. You can either do this in the constructor&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;PDO&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;driver:host=localhost;...&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;username&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;, [\n    PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_ERRMODE&lt;/span&gt; =&amp;gt; PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ERRMODE_EXCEPTION&lt;/span&gt;\n]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or after creation&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setAttribute&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_ERRMODE&lt;/span&gt;, PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ERRMODE_EXCEPTION&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can enable full error reporting (including notices and strict messages). Some people find this too verbose, but it&apos;s worth a try. Set &lt;code&gt;error_reporting&lt;/code&gt; to &lt;code&gt;E_ALL | E_STRICT&lt;/code&gt; in your php.ini.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;error_reporting = E_ALL | E_STRICT\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;E_STRICT&lt;/code&gt; will notify you about deprecated functions and give you recommendations about the best methods to do certain tasks.&lt;/p&gt;\n\n&lt;p&gt;If you don&apos;t want notices, but you find other message types helpful, try excluding notices:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;error_reporting = (E_ALL | E_STRICT) &amp;amp; ~E_NOTICE\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also make sure that &lt;code&gt;display_errors&lt;/code&gt; is enabled in php.ini. If your PHP version is older than 5.2.4, set it to &lt;code&gt;On&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;display_errors = &lt;span class=&quot;hljs-string&quot;&gt;&quot;On&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If your version is 5.2.4 or newer, use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;display_errors = &lt;span class=&quot;hljs-string&quot;&gt;&quot;stderr&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Aside from error_reporting and the display_errors ini setting, you can get SYNTAX errors from your web server&apos;s log files. When I&apos;m developing PHP I load my development system&apos;s web server logs into my editor. Whenever I test a page and get a blank screen, the log file goes stale and my editor asks if I want to reload it. When I do, I jump to the bottom and there is the syntax error. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;[Sun Apr &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;09&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2009&lt;/span&gt;] [error] [client &lt;span class=&quot;hljs-number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;] PHP Parse error:  syntax error, unexpected T_ENCAPSED_AND_WHITESPACE, expecting T_STRING &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; T_VARIABLE &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; T_NUM_STRING in D:\\\\webroot\\\\test\\\\test.php on line &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;This answer is brought to you by the department of redundancy department.    &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ini_set()&lt;/code&gt; / php.ini / .htaccess / .user.ini&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The settings &lt;code&gt;display_errors&lt;/code&gt; and &lt;code&gt;error_reporting&lt;/code&gt; have been covered sufficiently now. But just to recap when to use which option:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/ini_set&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;ini_set()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://php.net/error_reporting&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;error_reporting()&lt;/code&gt;&lt;/a&gt; apply for runtime errors only.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/php.ini&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;php.ini&lt;/code&gt;&lt;/a&gt; should primarily be edited for development setups. (Webserver and CLI version often have different php.ini&apos;s)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/configuration.changes.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;.htaccess&lt;/code&gt;&lt;/a&gt; flags only work for dated setups (Find a new hoster! Well managed servers are cheaper.)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/configuration.file.per-user.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;.user.ini&lt;/code&gt;&lt;/a&gt; are partial php.ini&apos;s for modern setups (FCGI/FPM)&lt;br&gt;&lt;br&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;And as crude alternative for runtime errors you can often use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;set_error_handler&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;var_dump&quot;&lt;/span&gt;);   &lt;span class=&quot;hljs-comment&quot;&gt;// ignores error_reporting and `@` suppression&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://php.net/error_get_last&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;error_get_last()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Can be used to retrieve the last runtime notice/warning/error, when error_display is disabled.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.php.net/manual/en/reserved.variables.phperrormsg.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;$php_errormsg&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Is a superlocal variable, which also contains the last PHP runtime message.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;isset()&lt;/code&gt; begone!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I know this will displease a lot of folks, but &lt;a href=&quot;http://php.net/isset&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;isset&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://php.net/empty&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt; should &lt;strong&gt;not&lt;/strong&gt; be used by newcomers. You can add the notice suppression &lt;strong&gt;&lt;em&gt;after&lt;/em&gt;&lt;/strong&gt; you verified your code is working. But never before.&lt;/p&gt;\n\n&lt;p&gt;A lot of the &quot;something doesn&apos;t work&quot; questions we get lately are the result of typos like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;sumbit&apos;&lt;/span&gt;]))\n&lt;span class=&quot;hljs-comment&quot;&gt;#                  &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You won&apos;t get any useful notices if your code is littered with &lt;code&gt;isset&lt;/code&gt;/&lt;code&gt;empty&lt;/code&gt;/&lt;code&gt;array_keys_exists&lt;/code&gt;. It&apos;s sometimes more &lt;a href=&quot;https://stackoverflow.com/a/4261242&quot;&gt;sensible to use &lt;code&gt;@&lt;/code&gt;&lt;/a&gt;, so notices and warnings go to the logs at least.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.php.net/manual/en/function.assert-options.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;assert_options(ASSERT_ACTIVE|ASSERT_WARNING);&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;To get warnings for &lt;code&gt;assert()&lt;/code&gt; sections. (Pretty uncommon, but more proficient code might contain some.)&lt;/p&gt;\n\n&lt;p&gt;PHP7 requires &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.zend.assertions&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;zend.assertions=1&lt;/code&gt;&lt;/a&gt; in the php.ini as well.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;declare(strict_types=1);&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Bending PHP into a strictly typed language is not going to fix a whole lot of logic errors, but it&apos;s definitely an option for debugging purposes.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;PDO / MySQLi&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;And @Phil already mentioned &lt;a href=&quot;https://stackoverflow.com/a/52324601&quot;&gt;PDO/MySQLi error reporting&lt;/a&gt; options. Similar options exist for other database APIs of course.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://php.net/json_last_error&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;json_last_error()&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;http://php.net/json_last_error_msg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;json_last_error_msg&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For JSON parsing.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://php.net/preg_last_error&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;preg_last_error()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For regexen.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3757071/php-debugging-curl&quot;&gt;CURLOPT_VERBOSE&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;To debug curl requests, you need CURLOPT_VERBOSE at the very least.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/12199353/how-can-i-debug-exec-problems&quot;&gt;&lt;code&gt;shell/exec()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Likewise will shell command execution not yield errors on its own. You always need &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; and peek at the $errno.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    "],"id":101,"title":"How can I get useful error messages in PHP?","content":"\n                \n&lt;p&gt;Quite often I will try and run a PHP script and just get a blank screen back. No error message; just an empty screen. The cause might have been a simple syntax error (wrong bracket, missing semicolon), or a failed function call, or something else entirely.&lt;/p&gt;\n\n&lt;p&gt;It is very difficult to figure out what went wrong. I end up commenting out code, entering &quot;echo&quot; statements everywhere, etc. trying to narrow down the problem. But there surely must be a better way, right?&lt;/p&gt;\n\n&lt;p&gt;Is there a way to get PHP to produce a useful error message, like Java does?&lt;/p&gt;\n    ","slug":"how-can-i-get-useful-error-messages-in-php-1657384609065","postType":"QUESTION","createdAt":"2022-07-09T16:36:49.000Z","updatedAt":"2022-07-09T16:36:49.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Undefined, unspecified and implementation-defined behavior","slug":"undefined-unspecified-and-implementation-defined-behavior-1657384516085"},{"title":"Is there a unique Android device ID?","slug":"is-there-a-unique-android-device-id-1657388089268"},{"title":"How do I correctly clone a JavaScript object?","slug":"how-do-i-correctly-clone-a-javascript-object-1657387325850"},{"title":"How to serve static files in Flask","slug":"how-to-serve-static-files-in-flask-1657387862496"},{"title":"How do you access the matched groups in a JavaScript regular expression?","slug":"how-do-you-access-the-matched-groups-in-a-javascript-regular-expression-1657388233817"},{"title":"When to use virtual destructors?","slug":"when-to-use-virtual-destructors-1657388152135"},{"title":"No 'Access-Control-Allow-Origin' header is present on the requested resource—when trying to get data from a REST API","slug":"no-'access-control-allow-origin'-header-is-present-on-the-requested-resourcewhen-trying-to-get-data-from-a-rest-api-1657387628467"},{"title":"How can I upload files to a server using JSP/Servlet?","slug":"how-can-i-upload-files-to-a-server-using-jspservlet-1657384847658"},{"title":"Make a div fill the height of the remaining screen space","slug":"make-a-div-fill-the-height-of-the-remaining-screen-space-1657387482387"},{"title":"How do I add a delay in a JavaScript loop?","slug":"how-do-i-add-a-delay-in-a-javascript-loop-1657388544679"},{"title":"Alternatives to gprof [closed]","slug":"alternatives-to-gprof-closed-1657388336554"},{"title":"Download a file by jQuery.Ajax","slug":"download-a-file-by-jquery.ajax-1657388220611"},{"title":"addEventListener vs onclick","slug":"addeventlistener-vs-onclick-1657388191429"},{"title":"Accessing an array out of bounds gives no error, why?","slug":"accessing-an-array-out-of-bounds-gives-no-error-why-1657387979932"},{"title":"How to iterate over rows in a DataFrame in Pandas","slug":"how-to-iterate-over-rows-in-a-dataframe-in-pandas-1657387358115"},{"title":"How to return DataSnapshot value as a result of a method?","slug":"how-to-return-datasnapshot-value-as-a-result-of-a-method-1657387538165"},{"title":"Why are these constructs using pre and post-increment undefined behavior?","slug":"why-are-these-constructs-using-pre-and-post-increment-undefined-behavior-1657384520109"},{"title":"How to create a generic array in Java?","slug":"how-to-create-a-generic-array-in-java-1657387532298"},{"title":"Removing trailing newline character from fgets() input","slug":"removing-trailing-newline-character-from-fgets()-input-1657387308069"},{"title":"Strange result when removing item from a list while iterating over it [duplicate]","slug":"strange-result-when-removing-item-from-a-list-while-iterating-over-it-duplicate-1657387735759"}]},"__N_SSG":true}