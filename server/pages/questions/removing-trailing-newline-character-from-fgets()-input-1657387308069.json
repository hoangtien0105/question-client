{"pageProps":{"data":{"answer":["\n&lt;p&gt;Perhaps the simplest solution uses one of my favorite little-known functions, &lt;a href=&quot;http://www.freebsd.org/cgi/man.cgi?query=strcspn&amp;amp;sektion=3&quot; rel=&quot;noreferrer&quot; title=&quot;strcspn manpage&quot;&gt;&lt;code&gt;strcspn()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;buffer[&lt;span class=&quot;hljs-built_in&quot;&gt;strcspn&lt;/span&gt;(buffer, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;)] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want it to also handle &lt;code&gt;&apos;\\r&apos;&lt;/code&gt; (say, if the stream is binary):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;buffer[&lt;span class=&quot;hljs-built_in&quot;&gt;strcspn&lt;/span&gt;(buffer, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\r\\n&quot;&lt;/span&gt;)] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// works for LF, CR, CRLF, LFCR, ...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function counts the number of characters until it hits a &lt;code&gt;&apos;\\r&apos;&lt;/code&gt; or a &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; (in other words, it finds the first &lt;code&gt;&apos;\\r&apos;&lt;/code&gt; or &lt;code&gt;&apos;\\n&apos;&lt;/code&gt;). If it doesn&apos;t hit anything, it stops at the &lt;code&gt;&apos;\\0&apos;&lt;/code&gt; (returning the length of the string).&lt;/p&gt;\n\n&lt;p&gt;Note that this works fine even if there is no newline, because &lt;code&gt;strcspn&lt;/code&gt; stops at a &lt;code&gt;&apos;\\0&apos;&lt;/code&gt;. In that case, the entire line is simply replacing &lt;code&gt;&apos;\\0&apos;&lt;/code&gt; with &lt;code&gt;&apos;\\0&apos;&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The elegant way:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;Name[&lt;span class=&quot;hljs-built_in&quot;&gt;strcspn&lt;/span&gt;(Name, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;)] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The slightly ugly way:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pos;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((pos=&lt;span class=&quot;hljs-built_in&quot;&gt;strchr&lt;/span&gt;(Name, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)) != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)\n    *pos = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* input too long for buffer, flag error */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The slightly strange way:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;strtok(Name, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that the &lt;code&gt;strtok&lt;/code&gt; function doesn&apos;t work as expected if the user enters an empty string (i.e. presses only Enter). It leaves the &lt;code&gt;\\n&lt;/code&gt; character intact.&lt;/p&gt;\n&lt;p&gt;There are others as well, of course.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; ln = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(name) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*name &amp;amp;&amp;amp; name[ln] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) \n    name[ln] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Below is a fast approach to remove a potential &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; from a string saved by &lt;code&gt;fgets()&lt;/code&gt;.&lt;br&gt;\nIt uses &lt;code&gt;strlen()&lt;/code&gt;, with 2 tests.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; buffer[&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fgets(buffer, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; buffer, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;) != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;) {\n\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(buffer);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (len &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; buffer[len&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) {\n    buffer[--len] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now use &lt;code&gt;buffer&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; as needed.&lt;/p&gt;\n\n&lt;p&gt;This method has the side benefit of a &lt;code&gt;len&lt;/code&gt; value for subsequent code.  It can be easily faster than &lt;code&gt;strchr(Name, &apos;\\n&apos;)&lt;/code&gt;.  &lt;a href=&quot;https://codereview.stackexchange.com/a/67844/29485&quot;&gt;Ref&lt;/a&gt;  YMMV, but both methods work.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;code&gt;buffer&lt;/code&gt;, from the original &lt;code&gt;fgets()&lt;/code&gt; will not contain in &lt;code&gt;&quot;\\n&quot;&lt;/code&gt; under some circumstances:&lt;br&gt;\nA) The line was too long for &lt;code&gt;buffer&lt;/code&gt; so only &lt;code&gt;char&lt;/code&gt; preceding the &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; is saved in &lt;code&gt;buffer&lt;/code&gt;. The unread characters remain in the stream.&lt;br&gt;\nB) The last line in the file did not end with a &lt;code&gt;&apos;\\n&apos;&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;p&gt;If input has embedded null characters &lt;code&gt;&apos;\\0&apos;&lt;/code&gt; in it somewhere, the length reported by &lt;code&gt;strlen()&lt;/code&gt; will not include the &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; location.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Some other answers&apos; issues: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;strtok(buffer, &quot;\\n&quot;);&lt;/code&gt; fails to remove the &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; when &lt;code&gt;buffer&lt;/code&gt; is &lt;code&gt;&quot;\\n&quot;&lt;/code&gt;.  From this &lt;a href=&quot;https://stackoverflow.com/a/2693826/2410359&quot;&gt;answer&lt;/a&gt; - amended after this answer to warn of this limitation. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The following fails on rare occasions when the first &lt;code&gt;char&lt;/code&gt; read by &lt;code&gt;fgets()&lt;/code&gt; is &lt;code&gt;&apos;\\0&apos;&lt;/code&gt;.  This happens when input begins with an embedded &lt;code&gt;&apos;\\0&apos;&lt;/code&gt;.  Then &lt;code&gt;buffer[len -1]&lt;/code&gt; becomes &lt;code&gt;buffer[SIZE_MAX]&lt;/code&gt; accessing memory certainly outside the legitimate range of &lt;code&gt;buffer&lt;/code&gt;. Something a hacker may try or found in foolishly reading UTF16 text files.  This was the state of an &lt;a href=&quot;https://stackoverflow.com/a/2693827/2410359&quot;&gt;answer&lt;/a&gt; when this answer was written.  Later a non-OP edited it to include code like this answer&apos;s check for &lt;code&gt;&quot;&quot;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(buffer);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (buffer[len - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) {  &lt;span class=&quot;hljs-comment&quot;&gt;// FAILS when len == 0&lt;/span&gt;\n  buffer[len &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;sprintf(buffer,&quot;%s&quot;,buffer);&lt;/code&gt; is undefined behavior: &lt;a href=&quot;https://stackoverflow.com/questions/1283354/is-sprintfbuffer-s-buffer-safe&quot;&gt;Ref&lt;/a&gt;.  Further, it does not save any leading, separating or trailing whitespace.  Now &lt;a href=&quot;https://stackoverflow.com/a/23695411/2410359&quot;&gt;deleted&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;[Edit due to good later &lt;a href=&quot;https://stackoverflow.com/a/28462221/2410359&quot;&gt;answer&lt;/a&gt;] There are no problems with the 1 liner &lt;code&gt;buffer[strcspn(buffer, &quot;\\n&quot;)] = 0;&lt;/code&gt; other than performance as compared to the &lt;code&gt;strlen()&lt;/code&gt; approach.  Performance in trimming is usually not an issue given code is doing I/O - a black hole of CPU time.  Should following code need the string&apos;s length or is highly performance conscious, use this &lt;code&gt;strlen()&lt;/code&gt; approach.  Else the &lt;code&gt;strcspn()&lt;/code&gt; is a fine alternative.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Direct to remove the &apos;\\n&apos; from the fgets output if every line has &apos;\\n&apos;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;line[&lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(line) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Otherwise:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_newline_ch&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *line)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; new_line = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(line) &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (line[new_line] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n        line[new_line] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For single &apos;\\n&apos; trimming,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_new_line&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; length = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[length&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;))\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[length&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] =&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;for multiple &apos;\\n&apos; trimming,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_multi_new_line&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; length = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((length&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[length&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;))\n  {\n      --length;\n      &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[length] =&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My Newbie way ;-) Please let me know if that&apos;s correct. It seems to be working for all my cases:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; IPT_SIZE 5&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;findNULL&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* arr)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(arr); i++)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*(arr+i) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *input = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(IPT_SIZE + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)), buff;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; counter = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//prompt user for the input:&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;input string no longer than %i characters: &quot;&lt;/span&gt;, IPT_SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;\n    {\n        fgets(input, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n        *(input + findNULL(input)) = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(input) &amp;gt; IPT_SIZE)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;error! the given string is too large. try again...\\n&quot;&lt;/span&gt;);\n            counter++;\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;//if the counter exceeds 3, exit the program (custom function):&lt;/span&gt;\n        errorMsgExit(counter, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;); \n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(input) &amp;gt; IPT_SIZE);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//rest of the program follows&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(input)\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The steps to remove the newline character in the perhaps most obvious way:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Determine the length of the string inside &lt;code&gt;NAME&lt;/code&gt; by using &lt;code&gt;strlen()&lt;/code&gt;, header &lt;code&gt;string.h&lt;/code&gt;. Note that &lt;code&gt;strlen()&lt;/code&gt; does not count the terminating &lt;code&gt;\\0&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; sl = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(NAME);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Look if the string begins with or only includes one &lt;code&gt;\\0&lt;/code&gt; character (empty string). In this case &lt;code&gt;sl&lt;/code&gt; would be &lt;code&gt;0&lt;/code&gt; since &lt;code&gt;strlen()&lt;/code&gt; as I said above doesn´t count the &lt;code&gt;\\0&lt;/code&gt; and stops at the first occurrence of it: &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(sl == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n{\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Skip the newline replacement process.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;Check if the last character of the proper string is a newline character &lt;code&gt;&apos;\\n&apos;&lt;/code&gt;.  If this is the case, replace &lt;code&gt;\\n&lt;/code&gt; with a &lt;code&gt;\\0&lt;/code&gt;. Note that index counts start at &lt;code&gt;0&lt;/code&gt; so we will need to do &lt;code&gt;NAME[sl - 1]&lt;/code&gt;:&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(NAME[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n{\n   NAME[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note if you only pressed Enter at the &lt;code&gt;fgets()&lt;/code&gt; string request (the string content was only consisted of a newline character) the string in &lt;code&gt;NAME&lt;/code&gt; will be an empty string thereafter.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;ol start=&quot;4&quot;&gt;\n&lt;li&gt;We can combine step 2. and 3. together in just one &lt;code&gt;if&lt;/code&gt;-statement by using the logic operator &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;:&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(sl &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; NAME[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n{\n   NAME[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;ol start=&quot;5&quot;&gt;\n&lt;li&gt;The finished code:&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; sl = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(NAME);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(sl &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; NAME[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n{\n   NAME[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you rather like a function for use this technique by handling &lt;code&gt;fgets&lt;/code&gt; output strings in general without retyping each and every time, here is &lt;code&gt;fgets_newline_kill&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fgets_newline_kill&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; a[])&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; sl = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(a);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(sl &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; a[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n    {\n       a[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In your provided example, it would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter your Name: &quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fgets(Name, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; Name, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Error reading Name.\\n&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    fgets_newline_kill(NAME);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that this method does not work if the input string has embedded &lt;code&gt;\\0&lt;/code&gt;s in it. If that would be the case &lt;code&gt;strlen()&lt;/code&gt; would only return the amount of characters until the first &lt;code&gt;\\0&lt;/code&gt;. But this isn´t quite a common approach, since the most string-reading functions usually stop at the first &lt;code&gt;\\0&lt;/code&gt; and take the string until that null character.&lt;/p&gt;\n\n&lt;p&gt;Aside from the question on its own. Try to avoid double negations that make your code unclearer: &lt;code&gt;if (!(fgets(Name, sizeof Name, stdin) != NULL) {}&lt;/code&gt;. You can simply do &lt;code&gt;if (fgets(Name, sizeof Name, stdin) == NULL) {}&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If using &lt;code&gt;getline&lt;/code&gt; is an option - Not neglecting its security issues and if you wish to brace pointers - you can avoid string functions as the &lt;code&gt;getline&lt;/code&gt; returns the number of characters. Something like below&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *fname, *lname;\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; size = &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;, nchar; &lt;span class=&quot;hljs-comment&quot;&gt;// Max size of strings and number of characters read&lt;/span&gt;\n    fname = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(size * &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; *fname);\n    lname = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(size * &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; *lname);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; == fname || &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; == lname)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error in memory allocation.&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter first name &quot;&lt;/span&gt;);\n    nchar = getline(&amp;amp;fname, &amp;amp;size, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (nchar == &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// getline return -1 on failure to read a line.&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Line couldn&apos;t be read..&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-comment&quot;&gt;// This if block could be repeated for next getline too&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Number of characters read :%zu\\n&quot;&lt;/span&gt;, nchar);\n    fname[nchar - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter last name &quot;&lt;/span&gt;);\n    nchar = getline(&amp;amp;lname, &amp;amp;size, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Number of characters read :%zu\\n&quot;&lt;/span&gt;, nchar);\n    lname[nchar - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name entered %s %s\\n&quot;&lt;/span&gt;, fname, lname);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;a href=&quot;https://stackoverflow.com/questions/2008173/writing-secure-c-and-secure-c-idioms&quot;&gt;[ &lt;strong&gt;security issues&lt;/strong&gt; ]&lt;/a&gt; with &lt;code&gt;getline&lt;/code&gt; shouldn&apos;t be neglected though.&lt;/sup&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In general, rather than trimming data that you don&apos;t want, avoid writing it in the first place.  If you don&apos;t want the newline in the buffer, don&apos;t use fgets.  Instead, use &lt;code&gt;getc&lt;/code&gt; or &lt;code&gt;fgetc&lt;/code&gt; or &lt;code&gt;scanf&lt;/code&gt;.  Perhaps something like:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; Name[&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;];\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; fmt[&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;snprintf&lt;/span&gt;(fmt, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; fmt, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%%%zd[^\\n]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; Name - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;gt;= (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; fmt ){\n                &lt;span class=&quot;hljs-built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to write format\\n&quot;&lt;/span&gt;);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; EXIT_FAILURE;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(fmt, Name) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ) {\n                &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name = %s\\n&quot;&lt;/span&gt;, Name);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that this particular approach will leave the newline unread, so you may want to use a format string like &lt;code&gt;&quot;%255[^\\n]%*c&quot;&lt;/code&gt; to discard it (eg, &lt;code&gt;sprintf(fmt, &quot;%%%zd[^\\n]%%*c&quot;, sizeof Name - 1);&lt;/code&gt;), or perhaps follow the scanf with a &lt;code&gt;getchar()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Tim Čas one liner is amazing for strings obtained by a call to fgets, because you know they contain a single newline at the end. &lt;/p&gt;\n\n&lt;p&gt;If you are in a different context and want to handle strings that may contain more than one newline, you might be looking for strrspn. It is not POSIX, meaning you will not find it on all Unices. I wrote one for my own needs.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Returns the length of the segment leading to the last \n   characters of s in accept. */&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strrspn&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *s, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *accept)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *ch;\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(s);\n\nmore: \n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (len &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (ch = accept ; *ch != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ; ch++) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s[len - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == *ch) {\n        len--;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;goto&lt;/span&gt; more;\n      }\n    }\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; len;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For those looking for a Perl chomp equivalent in C, I think this is it (chomp only removes the trailing newline).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;line[strrspn(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\r\\n&quot;&lt;/span&gt;)] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The strrcspn function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Returns the length of the segment leading to the last \n   character of reject in s. */&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strrcspn&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *s, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *reject)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *ch;\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(s);\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; origlen = len;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (len &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (ch = reject ; *ch != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ; ch++) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s[len - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == *ch) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; len;\n      }\n    }\n    len--;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; origlen;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is my solution. Very simple.&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Delete new line&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// char preDelete[256]  include &quot;\\n&quot; as newline after fgets&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; deletedWords[&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; iLeng = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(preDelete);\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; iFinal = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; iLeng; i++) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (preDelete[i] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) {\n\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        deletedWords[iFinal]  = preDelete[i];\n        iFinal++;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i == iLeng &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; ) {\n        deletedWords[iFinal] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The function below is a part of string processing library I am maintaining on Github. It removes and unwanted characters from a string, exactly what you want&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;zstring_search_chr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *token,&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; s)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!token || s==&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;*token; token++)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*token == s)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;hljs-title function_&quot;&gt;zstring_remove_chr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *str,&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *bad)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *src = str , *dst = str;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(*src)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(zstring_search_chr(bad,*src))\n            src++;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            *dst++ = *src++;  &lt;span class=&quot;hljs-comment&quot;&gt;/* assign first, then incement */&lt;/span&gt;\n\n    *dst=&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;An example usage could be &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;Example Usage\n      &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; s[]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;this is a trial string to test the function.&quot;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; *d=&lt;span class=&quot;hljs-string&quot;&gt;&quot; .&quot;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s\\n&quot;&lt;/span&gt;,zstring_remove_chr(s,d));\n\n  Example Output\n      thisisatrialstringtotestthefunction\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may want to check other available functions, or even contribute to the project :)\n&lt;a href=&quot;https://github.com/fnoyanisi/zString&quot; rel=&quot;nofollow&quot;&gt;https://github.com/fnoyanisi/zString&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(Name); i++ )\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(Name[i] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) Name[i] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You should give it a try. This code basically loop through the string until it finds the &apos;\\n&apos;. When it&apos;s found the &apos;\\n&apos; will be replaced by the null character terminator &apos;\\0&apos;&lt;/p&gt;\n\n&lt;p&gt;Note that you are comparing characters and not strings in this line, then there&apos;s no need to use strcmp():&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(Name[i] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) Name[i] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;since you will be using single quotes and not double quotes. &lt;a href=&quot;https://stackoverflow.com/questions/3683602/single-quotes-vs-double-quotes-in-c-or-c&quot; title=&quot;Here&apos;s&quot;&gt;Here&apos;s&lt;/a&gt; a link about single vs double quotes if you want to know more&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;if (!fgets(Name, sizeof Name, stdin))&lt;/code&gt; (at the very least don&apos;t use two negations, ! and !=)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;Roger Pate&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment2715782_2693776&quot;&gt;&lt;span title=&quot;2010-04-22 20:05:00Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 22, 2010 at 20:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Roger Pate  &quot;don&apos;t use two negations&quot; --&amp;gt; hmmm, if we dig deep &quot;don&apos;t&quot;  and &quot;negation&quot; are both &lt;i&gt;negations&lt;/i&gt;. ;-).   Perhaps &quot;Use &lt;code&gt;if (fgets(Name, sizeof Name, stdin)) {&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65598759_2693776&quot;&gt;&lt;span title=&quot;2016-08-24 14:53:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 24, 2016 at 14:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@chux, I am sure you meant &lt;code&gt;if (fgets(Name, sizeof Name, stdin) == NULL ) {&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/434551/r-sahu&quot; title=&quot;200,839 reputation&quot; class=&quot;comment-user&quot;&gt;R Sahu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86370602_2693776&quot;&gt;&lt;span title=&quot;2018-04-05 18:50:32Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 5, 2018 at 18:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@RSahu &lt;a href=&quot;https://stackoverflow.com/questions/2693776/removing-trailing-newline-character-from-fgets-input?noredirect=1#comment86370602_2693776&quot;&gt;True&lt;/a&gt;: pesky &lt;code&gt;!&lt;/code&gt;:&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86371972_2693776&quot;&gt;&lt;span title=&quot;2018-04-05 19:30:37Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 5, 2018 at 19:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This even handles the rare &lt;code&gt;buffer&lt;/code&gt; than &lt;i&gt;begins&lt;/i&gt; with &lt;code&gt;&apos;\\0&apos;&lt;/code&gt;,  something that causes grief for the &lt;code&gt;buffer[strlen(buffer) - 1] = &apos;\\0&apos;;&lt;/code&gt; approach.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45251848_28462221&quot;&gt;&lt;span title=&quot;2015-02-11 19:39:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 11, 2015 at 19:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@chux: Yup, I wish more people had known about &lt;code&gt;strcspn()&lt;/code&gt;. One of the more useful functions in the library, IMO. I&apos;ve decided to write and publish a bunch of common C hacks like this one today; a &lt;code&gt;strtok_r&lt;/code&gt; implementation using &lt;code&gt;strcspn&lt;/code&gt; and &lt;code&gt;strspn&lt;/code&gt; was one of the first: &lt;a href=&quot;http://codepad.org/2lBkZk0w&quot; rel=&quot;nofollow noreferrer&quot;&gt;codepad.org/2lBkZk0w&lt;/a&gt; (&lt;i&gt;Warning:&lt;/i&gt; I can&apos;t guarantee that it&apos;s without bugs; it was written hastily and probably has a few). I dunno where I&apos;ll publish &apos;em yet, though, but I intend to make it in the spirit of the famous &quot;bit twiddling hacks&quot;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/485088/tim-%c4%8cas&quot; title=&quot;9,868 reputation&quot; class=&quot;comment-user&quot;&gt;Tim Čas&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45252032_28462221&quot;&gt;&lt;span title=&quot;2015-02-11 19:44:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 11, 2015 at 19:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 4 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Looked into ways to &lt;i&gt;robustly&lt;/i&gt; &lt;a href=&quot;http://codereview.stackexchange.com/q/67608/29485&quot;&gt;trim &lt;code&gt;fgets()&lt;/code&gt;&lt;/a&gt;.  This &lt;code&gt;strcspn()&lt;/code&gt; seems to be the &lt;i&gt;only&lt;/i&gt; correct one-liner.  &lt;a href=&quot;http://stackoverflow.com/a/27729970/2410359&quot;&gt;&lt;code&gt;strlen&lt;/code&gt;&lt;/a&gt; is quicker - though not as simple.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45252664_28462221&quot;&gt;&lt;span title=&quot;2015-02-11 20:04:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 11, 2015 at 20:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@sidbushes: The question, both in the title and the content, asks about the trailing newline &lt;i&gt;from &lt;code&gt;fgets()&lt;/code&gt; input&lt;/i&gt;. Which is always also the first newline.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/485088/tim-%c4%8cas&quot; title=&quot;9,868 reputation&quot; class=&quot;comment-user&quot;&gt;Tim Čas&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment73679425_28462221&quot;&gt;&lt;span title=&quot;2017-04-09 13:44:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 9, 2017 at 13:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@sidbushes: I understand where you&apos;re coming from, but I cannot be held responsible for Google search results for specific terms. Talk to Google, not me.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/485088/tim-%c4%8cas&quot; title=&quot;9,868 reputation&quot; class=&quot;comment-user&quot;&gt;Tim Čas&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment74730249_28462221&quot;&gt;&lt;span title=&quot;2017-05-08 12:08:51Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 8, 2017 at 12:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Any C runtime library that is thread aware (which is to say, most any that target a multi-threaded platform), &lt;code&gt;strtok()&lt;/code&gt; will be thread safe (it will use thread local storage for the &apos;inter-call&apos; state). That said, it&apos;s still generally better to use the non-standard (but common enough) &lt;code&gt;strtok_r()&lt;/code&gt; variant.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12711/michael-burr&quot; title=&quot;322,355 reputation&quot; class=&quot;comment-user&quot;&gt;Michael Burr&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment2716485_2693826&quot;&gt;&lt;span title=&quot;2010-04-22 21:36:51Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 22, 2010 at 21:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See my answer for completely thread-safe and reentrant variant, similar to your &lt;code&gt;strtok&lt;/code&gt; approach (and it works with empty inputs). In fact, a good way to implement &lt;code&gt;strtok&lt;/code&gt; is to use &lt;code&gt;strcspn&lt;/code&gt; and &lt;code&gt;strspn&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/485088/tim-%c4%8cas&quot; title=&quot;9,868 reputation&quot; class=&quot;comment-user&quot;&gt;Tim Čas&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45250712_2693826&quot;&gt;&lt;span title=&quot;2015-02-11 19:09:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 11, 2015 at 19:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s important to handle the else case if you are in an environment where there is a risk of over-long lines. Silently truncating input can cause very damaging bugs.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3310281/malcolm-mclean&quot; title=&quot;6,192 reputation&quot; class=&quot;comment-user&quot;&gt;Malcolm McLean&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment70278193_2693826&quot;&gt;&lt;span title=&quot;2017-01-08 18:52:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 8, 2017 at 18:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you like one-liners and are using glibc, try &lt;code&gt;*strchrnul(Name, &apos;\\n&apos;) = &apos;\\0&apos;;&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6677995/twobit&quot; title=&quot;61 reputation&quot; class=&quot;comment-user&quot;&gt;twobit&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment78418744_2693826&quot;&gt;&lt;span title=&quot;2017-08-17 08:55:03Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 17, 2017 at 8:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;When &lt;code&gt;strchr(Name, &apos;\\n&apos;) == NULL&lt;/code&gt;, then aside from &quot;input too long for buffer, flag error&quot;, other possibilities exist: Last text in &lt;code&gt;stdin&lt;/code&gt; did not end with a &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; or a rare embedded null character was read.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment82328845_2693826&quot;&gt;&lt;span title=&quot;2017-12-06 22:36:03Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 6, 2017 at 22:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Will probably throw exception if the string is empty, won&apos;t it?   Like index out of range.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/556649/edward-olamisan&quot; title=&quot;795 reputation&quot; class=&quot;comment-user&quot;&gt;Edward Olamisan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment24298608_2693827&quot;&gt;&lt;span title=&quot;2013-05-31 03:26:12Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 31, 2013 at 3:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@EdwardOlamisan, the string won&apos;t ever be empty however.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/191492/james-morris&quot; title=&quot;4,789 reputation&quot; class=&quot;comment-user&quot;&gt;James Morris&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25694394_2693827&quot;&gt;&lt;span title=&quot;2013-07-14 23:27:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 14, 2013 at 23:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@James Morris In unusual cases &lt;code&gt;fgets(buf, size, ....)&lt;/code&gt; --&amp;gt; &lt;code&gt;strlen(buf) == 0&lt;/code&gt;.  1) &lt;code&gt;fgets()&lt;/code&gt; reads as the first &lt;code&gt;char&lt;/code&gt; a &lt;code&gt;&apos;\\0&apos;&lt;/code&gt;.  2) &lt;code&gt;size == 1&lt;/code&gt; 3) &lt;code&gt;fgets()&lt;/code&gt; returns &lt;code&gt;NULL&lt;/code&gt; then &lt;code&gt;buf&lt;/code&gt; contents could be anything.  (OP&apos;s code does test for NULL though)  Suggest: &lt;code&gt;size_t ln = strlen(name); if (ln &amp;gt; 0 &amp;amp;&amp;amp; name[ln-1] == &apos;\\n&apos;) name[--ln] = &apos;\\0&apos;;&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment37988974_2693827&quot;&gt;&lt;span title=&quot;2014-07-02 14:00:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 2, 2014 at 14:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What if the string is empty? &lt;code&gt;ln&lt;/code&gt; would be -1, save for the fact &lt;code&gt;size_t&lt;/code&gt; is unsigned, thus writing to random memory. I think you want to use &lt;code&gt;ssize_t&lt;/code&gt; and check &lt;code&gt;ln&lt;/code&gt; is &amp;gt;0.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3177124/abligh&quot; title=&quot;23,887 reputation&quot; class=&quot;comment-user&quot;&gt;abligh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46409233_2693827&quot;&gt;&lt;span title=&quot;2015-03-16 22:38:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 16, 2015 at 22:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@legends2k: A search for a compile-time value (especially a zero value as in &lt;code&gt;strlen&lt;/code&gt;) can be implemented much more efficiently than a plain char-by-char search. For which reason I&apos;d consider this solution better than a &lt;code&gt;strchr&lt;/code&gt; or &lt;code&gt;strcspn&lt;/code&gt; based ones.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/187690/ant-stop-the-ukronazis&quot; title=&quot;302,970 reputation&quot; class=&quot;comment-user&quot;&gt;AnT - Stop the UkroNazis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment60209733_2693827&quot;&gt;&lt;span title=&quot;2016-03-29 18:28:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 29, 2016 at 18:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks for the helpful answer. Can we use &lt;code&gt;strlen(buffer)&lt;/code&gt; when buffer size is dynamically allocated using &lt;code&gt;malloc&lt;/code&gt; ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7389018/rrz0&quot; title=&quot;1,992 reputation&quot; class=&quot;comment-user&quot;&gt;rrz0&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93361960_27729970&quot;&gt;&lt;span title=&quot;2018-11-10 10:16:57Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 10, 2018 at 10:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Rrz0 &lt;code&gt;buffer = malloc(allocation_size); length = strlen(buffer);&lt;/code&gt; is bad - data at memory pointed to by &lt;code&gt;buffer&lt;/code&gt; is unknown.  &lt;code&gt;buffer = malloc(allocation_size_4_or_more); strcpy(buffer, &quot;abc&quot;); length = strlen(buffer);&lt;/code&gt; is OK&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93367395_27729970&quot;&gt;&lt;span title=&quot;2018-11-10 16:15:27Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 10, 2018 at 16:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note it would be &lt;a href=&quot;http://stackoverflow.com/a/1253079/795339&quot;&gt;safer&lt;/a&gt; to use &lt;code&gt;strnlen&lt;/code&gt; instead of &lt;code&gt;strlen&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/795339/mike-mertsock&quot; title=&quot;11,425 reputation&quot; class=&quot;comment-user&quot;&gt;Mike Mertsock&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25239780_17386177&quot;&gt;&lt;span title=&quot;2013-06-30 01:37:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 30, 2013 at 1:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;A comment to the first answer in the question linked states &quot;Note that strlen(), strcmp() and strdup() are safe. The &apos;n&apos; alternatives give you additional functionality.&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1710392/%c3%89tienne&quot; title=&quot;4,446 reputation&quot; class=&quot;comment-user&quot;&gt;Étienne&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29921778_17386177&quot;&gt;&lt;span title=&quot;2013-11-19 23:12:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 19, 2013 at 23:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@esker no, it wouldn&apos;t. inserting an &lt;code&gt;n&lt;/code&gt; does not magically increase safety, in this case it in fact would make the code more dangerous. Similarly with &lt;code&gt;strncpy&lt;/code&gt;, a terribly unsafe function. The post you linked to is bad advice.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1505939/m-m&quot; title=&quot;135,063 reputation&quot; class=&quot;comment-user&quot;&gt;M.M&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment54594108_17386177&quot;&gt;&lt;span title=&quot;2015-10-28 20:55:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 28, 2015 at 20:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This fails miserably for an empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;). Also &lt;code&gt;strlen()&lt;/code&gt; returns &lt;code&gt;size_t&lt;/code&gt; not &lt;code&gt;int&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/694576/alk&quot; title=&quot;68,380 reputation&quot; class=&quot;comment-user&quot;&gt;alk&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment76193620_17386177&quot;&gt;&lt;span title=&quot;2017-06-17 09:55:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 17, 2017 at 9:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;this is unsafe for an empty string, it will write at index -1. Don&apos;t use this.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6451573/jean-fran%c3%a7ois-fabre&quot; title=&quot;132,267 reputation&quot; class=&quot;comment-user&quot;&gt;Jean-François Fabre&lt;/a&gt;\n&lt;span class=&quot;mod-flair &quot; title=&quot;Moderator&quot;&gt;&lt;/span&gt;                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment88731950_17386177&quot;&gt;&lt;span title=&quot;2018-06-14 19:38:04Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 14, 2018 at 19:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why nest &lt;code&gt;if&lt;/code&gt; when you can simply write one condition using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;? That &lt;code&gt;while&lt;/code&gt; loop has a strange structure; it could simply be &lt;code&gt;while (length &amp;gt; 0 &amp;amp;&amp;amp; string[length-1] == &apos;\\n&apos;) { --length; string[length] = &apos;\\0&apos;; }&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1848654/melpomene&quot; title=&quot;81,971 reputation&quot; class=&quot;comment-user&quot;&gt;melpomene&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91666676_29070298&quot;&gt;&lt;span title=&quot;2018-09-17 05:26:33Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2018 at 5:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@melpomene thanks for the suggestion. Update the code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4650806/bepp&quot; title=&quot;805 reputation&quot; class=&quot;comment-user&quot;&gt;BEPP&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91704928_29070298&quot;&gt;&lt;span title=&quot;2018-09-18 06:39:31Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 18, 2018 at 6:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;d suggest that the first function is more naturally defined as: &lt;code&gt;size_t length = strlen(string); if (length &amp;gt; 0 &amp;amp;&amp;amp; string[length-1] == &apos;\\n&apos;) { string[length-1] = &apos;\\0&apos;; }&lt;/code&gt;. This also mirrors the second definition better (just using &lt;code&gt;if&lt;/code&gt; instead of &lt;code&gt;while&lt;/code&gt;).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1848654/melpomene&quot; title=&quot;81,971 reputation&quot; class=&quot;comment-user&quot;&gt;melpomene&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91705183_29070298&quot;&gt;&lt;span title=&quot;2018-09-18 06:47:09Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 18, 2018 at 6:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@elpomene thanks. It makes sense. I updated the code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4650806/bepp&quot; title=&quot;805 reputation&quot; class=&quot;comment-user&quot;&gt;BEPP&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91705600_29070298&quot;&gt;&lt;span title=&quot;2018-09-18 07:00:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 18, 2018 at 7:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Not sure why you would want to do this. The point of removing newlines isn&apos;t to null-terminate strings; it is to remove newlines. Replacing a &lt;code&gt;\\n&lt;/code&gt; with a &lt;code&gt;\\0&lt;/code&gt; at the &lt;i&gt;end&lt;/i&gt; of a string is a way of &quot;removing&quot; the newline. But replacing &lt;code&gt;\\n&lt;/code&gt; characters within a string fundamentally changes the string. It is not uncommon to have strings with intentional multiple newline characters, and this would effectively chop off the ends of those strings. To &lt;i&gt;remove&lt;/i&gt; such newlines, array contents need to shift left to over-write the &lt;code&gt;\\n&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6879826/ad-absurdum&quot; title=&quot;18,007 reputation&quot; class=&quot;comment-user&quot;&gt;ad absurdum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107125927_60551717&quot;&gt;&lt;span title=&quot;2020-03-05 19:23:39Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 5, 2020 at 19:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@exnihilo How can someone input a string with multiple newlines inside by using &lt;code&gt;fgets()&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12139179/roberts-supports-monica-cellio&quot; title=&quot;13,801 reputation&quot; class=&quot;comment-user&quot;&gt;RobertS supports Monica Cellio&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107125993_60551717&quot;&gt;&lt;span title=&quot;2020-03-05 19:26:17Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 5, 2020 at 19:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Well, you might concatenate strings obtained by multiple calls to &lt;code&gt;fgets()&lt;/code&gt;. But I don&apos;t understand your objection: you are the one proposing code to handle multiple newlines.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6879826/ad-absurdum&quot; title=&quot;18,007 reputation&quot; class=&quot;comment-user&quot;&gt;ad absurdum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107126076_60551717&quot;&gt;&lt;span title=&quot;2020-03-05 19:29:05Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 5, 2020 at 19:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@exnihilo You´re right, I`ll overthink the strategy. I´d just wanted to add a very harsh but possible way to get the desired result.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12139179/roberts-supports-monica-cellio&quot; title=&quot;13,801 reputation&quot; class=&quot;comment-user&quot;&gt;RobertS supports Monica Cellio&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107129518_60551717&quot;&gt;&lt;span title=&quot;2020-03-05 21:50:43Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 5, 2020 at 21:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@exnihilo Edited my answer completely and followed the main approach by using &lt;code&gt;strlen&lt;/code&gt; etc. Justification for not being an duplicate: 1. Explanation of the code by steps. 2. Provided as function and context-based solution. 3. Hint to avoid double negation expressions.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12139179/roberts-supports-monica-cellio&quot; title=&quot;13,801 reputation&quot; class=&quot;comment-user&quot;&gt;RobertS supports Monica Cellio&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107141051_60551717&quot;&gt;&lt;span title=&quot;2020-03-06 09:18:51Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 6, 2020 at 9:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Do you realize that the above code snippet is vulnerable to buffer overruns? &lt;code&gt;sprintf&lt;/code&gt; doesn&apos;t check the size of the buffer!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11714860/sapphire-brick&quot; title=&quot;1,401 reputation&quot; class=&quot;comment-user&quot;&gt;Sapphire_Brick&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121690040_65009713&quot;&gt;&lt;span title=&quot;2021-08-20 03:19:39Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 20, 2021 at 3:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Sapphire_Brick It really isn&apos;t.  The length of the format string will be 7 + the number of digits in the base 10 representation of the length of name.  If that length is greater than 24, you will have other issues.  If you want to be safe and use &lt;code&gt;snprintf&lt;/code&gt; you certainly could, but this will work for buffers that are significantly larger than a petabyte.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140750/william-pursell&quot; title=&quot;191,423 reputation&quot; class=&quot;comment-user&quot;&gt;William Pursell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121690209_65009713&quot;&gt;&lt;span title=&quot;2021-08-20 03:36:55Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 20, 2021 at 3:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In order to overflow the buffer, you would need to be creating an automatic array that is about 8 yotta-bytes, since you won&apos;t overflow the buffer until &lt;code&gt;Name&lt;/code&gt; is over 2^83 bytes in size.  In practical terms, this is not a problem. But, yes, &lt;code&gt;snprintf&lt;/code&gt; should always be preferred over &lt;code&gt;sprintf&lt;/code&gt;.  Code edited.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140750/william-pursell&quot; title=&quot;191,423 reputation&quot; class=&quot;comment-user&quot;&gt;William Pursell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121698992_65009713&quot;&gt;&lt;span title=&quot;2021-08-20 11:56:33Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 20, 2021 at 11:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;because you know they contain a single newline at the end.&quot;  --&amp;gt; It even works when there is no &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; (or if the string is &lt;code&gt;&quot;&quot;&lt;/code&gt;).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55341021_33786802&quot;&gt;&lt;span title=&quot;2015-11-18 17:59:12Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 18, 2015 at 17:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In response to your first comment chux, my answer preserves that. I had to throw resetlen in &lt;code&gt;strrcspn&lt;/code&gt; for when there is no &lt;code&gt;\\n&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/393262/philippe-a&quot; title=&quot;2,736 reputation&quot; class=&quot;comment-user&quot;&gt;Philippe A.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55341561_33786802&quot;&gt;&lt;span title=&quot;2015-11-18 18:14:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 18, 2015 at 18:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why use &lt;code&gt;goto end;&lt;/code&gt; instead of &lt;code&gt;return len;&lt;/code&gt; ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4593267/chqrlie&quot; title=&quot;116,263 reputation&quot; class=&quot;comment-user&quot;&gt;chqrlie&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65351472_33786802&quot;&gt;&lt;span title=&quot;2016-08-17 14:48:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 17, 2016 at 14:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@chqrlie I needed to get out of this inelegant 2-level loop I got into. The harm was done. Why not a goto?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/393262/philippe-a&quot; title=&quot;2,736 reputation&quot; class=&quot;comment-user&quot;&gt;Philippe A.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment68966071_33786802&quot;&gt;&lt;span title=&quot;2016-11-29 20:48:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 29, 2016 at 20:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You have two kinds of &lt;code&gt;goto&lt;/code&gt;s in your code: a useless &lt;code&gt;goto&lt;/code&gt; that can be replaced with a &lt;code&gt;return&lt;/code&gt; statement and a backwards &lt;code&gt;goto&lt;/code&gt; that is considered evil.  Using &lt;code&gt;strchr&lt;/code&gt; helps implement &lt;code&gt;strrspn&lt;/code&gt; and &lt;code&gt;strrcspn&lt;/code&gt; in a simpler fashion: &lt;code&gt;size_t strrspn(const char *s, const char *accept) { size_t len = strlen(s); while (len &amp;gt; 0 &amp;amp;&amp;amp; strchr(accept, s[len - 1])) { len--; } return len; }&lt;/code&gt; and &lt;code&gt;size_t strrcspn(const char *s, const char *reject) { size_t len = strlen(s); while (len &amp;gt; 0 &amp;amp;&amp;amp; !strchr(reject, s[len - 1])) { len--; } return len; }&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4593267/chqrlie&quot; title=&quot;116,263 reputation&quot; class=&quot;comment-user&quot;&gt;chqrlie&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment68969883_33786802&quot;&gt;&lt;span title=&quot;2016-11-29 23:04:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 29, 2016 at 23:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You should remove the &lt;code&gt;*&lt;/code&gt; in &lt;code&gt;*src++;&lt;/code&gt; and make &lt;code&gt;bad&lt;/code&gt;, &lt;code&gt;token&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; &lt;code&gt;const char *&lt;/code&gt;.  Also why not use &lt;code&gt;strchr&lt;/code&gt; instead of &lt;code&gt;zChrSearch&lt;/code&gt;? &lt;code&gt;*src&lt;/code&gt; cannot be &lt;code&gt;&apos;\\0&apos;&lt;/code&gt; in your &lt;code&gt;zStrrmv&lt;/code&gt; function.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4593267/chqrlie&quot; title=&quot;116,263 reputation&quot; class=&quot;comment-user&quot;&gt;chqrlie&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65351273_35470648&quot;&gt;&lt;span title=&quot;2016-08-17 14:43:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 17, 2016 at 14:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks @chqrlie! updated the code to reflect your suggestions..... zstring started as a fun project with the aim of creating a string manipulation library without using any standard library functions, hence I did not use &lt;code&gt;strchr&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1884351/fnisi&quot; title=&quot;1,106 reputation&quot; class=&quot;comment-user&quot;&gt;fnisi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment67611362_35470648&quot;&gt;&lt;span title=&quot;2016-10-21 08:30:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 21, 2016 at 8:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Writing a &quot;&lt;i&gt;string manipulation library without using any standard library functions&lt;/i&gt;&quot; is a nice exercise, but why tell other people to use it? If anything, it&apos;s going to be slower and less tested than any standard library.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1848654/melpomene&quot; title=&quot;81,971 reputation&quot; class=&quot;comment-user&quot;&gt;melpomene&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91666730_35470648&quot;&gt;&lt;span title=&quot;2018-09-17 05:29:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2018 at 5:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is doing a different job from what the question asks about.  It probably can be used to get rid of the only newline, but it feels like overkill.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15168/jonathan-leffler&quot; title=&quot;700,786 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Leffler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment92520115_35470648&quot;&gt;&lt;span title=&quot;2018-10-14 07:53:12Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 14, 2018 at 7:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Inefficient: &lt;code&gt;for(int i = 0; i &amp;lt; strlen(Name); i++ )&lt;/code&gt; will call &lt;code&gt;strlen(Name)&lt;/code&gt; many times (loop changes  &lt;code&gt;Name[]&lt;/code&gt;) so with a length &lt;code&gt;N&lt;/code&gt;, this is a &lt;code&gt;O(N*N)&lt;/code&gt; solution.  Only 1 call to &lt;code&gt;strlen(Name)&lt;/code&gt;, if any , is needed to provide an O(N)` solution.  Unclear why &lt;code&gt;int i&lt;/code&gt; is used instead of &lt;code&gt;size_t i&lt;/code&gt;.  Consider &lt;code&gt;for(size_t i = 0; i &amp;lt; Name[i]; i++ )&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment82328012_46264011&quot;&gt;&lt;span title=&quot;2017-12-06 22:03:29Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 6, 2017 at 22:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 4 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@chux More like &lt;code&gt;for (size_t i = 0; Name[i]; i++) { if (Name[i] == &apos;\\n&apos;) { Name[i] = &apos;\\0&apos;; break; } }&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1848654/melpomene&quot; title=&quot;81,971 reputation&quot; class=&quot;comment-user&quot;&gt;melpomene&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91666647_46264011&quot;&gt;&lt;span title=&quot;2018-09-17 05:24:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2018 at 5:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@melpomene Yes that would be direct and good.  Yet if the &lt;code&gt;break&lt;/code&gt; was not there,  &lt;code&gt;i++&lt;/code&gt; would occur and the following &lt;code&gt;Name[i]&lt;/code&gt; would be 0,  stopping the loop.  Your good idea has the advantage of &lt;code&gt;i&lt;/code&gt; being the string length after the loop.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91666788_46264011&quot;&gt;&lt;span title=&quot;2018-09-17 05:33:15Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2018 at 5:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@melpomene I see now.  yes &lt;code&gt;for(size_t i = 0; i &amp;lt; Name[i]; i++ )&lt;/code&gt; should have been &lt;code&gt;for(size_t i = 0; Name[i]; i++ )&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91666834_46264011&quot;&gt;&lt;span title=&quot;2018-09-17 05:36:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2018 at 5:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":218,"title":"Removing trailing newline character from fgets() input","content":"\n                \n&lt;p&gt;I am trying to get some data from the user and send it to another function in gcc. The code is something like this.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter your Name: &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(fgets(Name, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; Name, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;) != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Error reading Name.\\n&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, I find that it has a newline &lt;code&gt;\\n&lt;/code&gt; character in the end. So if I enter &lt;code&gt;John&lt;/code&gt; it ends up sending &lt;code&gt;John\\n&lt;/code&gt;. How do I remove that &lt;code&gt;\\n&lt;/code&gt; and send a proper string.&lt;/p&gt;\n    ","slug":"removing-trailing-newline-character-from-fgets()-input-1657387308069","postType":"QUESTION","createdAt":"2022-07-09T17:21:48.000Z","updatedAt":"2022-07-09T17:21:48.000Z","tags":[{"id":1501,"name":"gcc","slug":"gcc","createdAt":"2022-07-09T17:21:48.000Z","updatedAt":"2022-07-09T17:21:48.000Z","Questions_Tags":{"questionId":218,"tagId":1501}},{"id":1502,"name":"newline","slug":"newline","createdAt":"2022-07-09T17:21:48.000Z","updatedAt":"2022-07-09T17:21:48.000Z","Questions_Tags":{"questionId":218,"tagId":1502}}]}},"__N_SSG":true}