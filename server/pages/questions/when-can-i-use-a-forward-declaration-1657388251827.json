{"pageProps":{"data":{"answer":["\n&lt;p&gt;Put yourself in the compiler&apos;s position: when you forward declare a type, all the compiler knows is that this type exists; it knows nothing about its size, members, or methods. This is why it&apos;s called an &lt;em&gt;incomplete type&lt;/em&gt;. Therefore, you cannot use the type to declare a member, or a base class, since the compiler would need to know the layout of the type.&lt;/p&gt;\n\n&lt;p&gt;Assuming the following forward declaration.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&apos;s what you can and cannot do.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What you can do with an incomplete type:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Declare a member to be a pointer or a reference to the incomplete type:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X *p;\n    X &amp;amp;r;\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Declare&lt;/em&gt; functions or methods which accept/return incomplete types:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;X    &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Define&lt;/em&gt; functions or methods which accept/return pointers/references to the incomplete type (but without using its members):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X*, X&amp;amp;)&lt;/span&gt; &lt;/span&gt;{}\n&lt;span class=&quot;hljs-function&quot;&gt;X&amp;amp;   &lt;span class=&quot;hljs-title&quot;&gt;f4&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;       &lt;/span&gt;{}\n&lt;span class=&quot;hljs-function&quot;&gt;X*   &lt;span class=&quot;hljs-title&quot;&gt;f5&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;       &lt;/span&gt;{}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;What you cannot do with an incomplete type:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Use it as a base class&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; : X {} &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use it to declare a member:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X m; &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Define&lt;/em&gt; functions or methods using this type&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X x)&lt;/span&gt; &lt;/span&gt;{} &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;X    &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;    &lt;/span&gt;{} &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use its methods or fields, in fact trying to dereference a variable with incomplete type&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X *m;            \n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;            \n    &lt;/span&gt;{\n        m-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;someMethod&lt;/span&gt;();      &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = m-&amp;gt;someField; &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;When it comes to templates, there is no absolute rule: whether you can use an incomplete type as a template parameter is dependent on the way the type is used in the template.&lt;/p&gt;\n\n&lt;p&gt;For instance, &lt;code&gt;std::vector&amp;lt;T&amp;gt;&lt;/code&gt; requires its parameter to be a complete type, while &lt;code&gt;boost::container::vector&amp;lt;T&amp;gt;&lt;/code&gt; does not. Sometimes, a complete type is required only if you use certain member functions; &lt;a href=&quot;https://stackoverflow.com/questions/6012157/is-stdunique-ptrt-required-to-know-the-full-definition-of-t&quot;&gt;this is the case for &lt;code&gt;std::unique_ptr&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, for example.&lt;/p&gt;\n\n&lt;p&gt;A well-documented template should indicate in its documentation all the requirements of its parameters, including whether they need to be complete types or not.&lt;/p&gt;\n    ","\n&lt;p&gt;The main rule is that you can only forward-declare classes whose memory layout (and thus member functions and data members) do not need to be known in the file you forward-declare it.&lt;/p&gt;\n\n&lt;p&gt;This would rule out base classes and anything but classes used via references and pointers.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633620&quot; rel=&quot;noreferrer&quot;&gt;Lakos&lt;/a&gt; distinguishes between class usage&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;em&gt;in-name-only&lt;/em&gt; (for which a forward declaration is sufficient) and&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;in-size&lt;/em&gt; (for which the class definition is needed).&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I&apos;ve never seen it pronounced more succinctly :)&lt;/p&gt;\n    ","\n&lt;p&gt;As well as pointers and references to incomplete types, you can also declare function prototypes that specify parameters and/or return values that are incomplete types.  However, you cannot &lt;em&gt;define&lt;/em&gt; a function having a parameter or return type that is incomplete, unless it is a pointer or reference.&lt;/p&gt;\n\n&lt;p&gt;Examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt;;              &lt;span class=&quot;hljs-comment&quot;&gt;// Forward declaration of X&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X* px)&lt;/span&gt; &lt;/span&gt;{}      &lt;span class=&quot;hljs-comment&quot;&gt;// Legal: can always use a pointer&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;amp;  x)&lt;/span&gt; &lt;/span&gt;{}      &lt;span class=&quot;hljs-comment&quot;&gt;// Legal: can always use a reference&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;X &lt;span class=&quot;hljs-title&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;             &lt;span class=&quot;hljs-comment&quot;&gt;// Legal: return value in function prototype&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f4&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X)&lt;/span&gt;&lt;/span&gt;;            &lt;span class=&quot;hljs-comment&quot;&gt;// Legal: parameter in function prototype&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f5&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X)&lt;/span&gt; &lt;/span&gt;{}          &lt;span class=&quot;hljs-comment&quot;&gt;// ILLEGAL: *definitions* require complete types&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;None of the answers so far describe when one can use a forward declaration of a class template. So, here it goes.&lt;/p&gt;\n\n&lt;p&gt;A class template can be forwarded declared as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Following the structure of the &lt;a href=&quot;https://stackoverflow.com/a/553869/434551&quot;&gt;accepted answer&lt;/a&gt;,&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s what you can and cannot do.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What you can do with an incomplete type:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Declare a member to be a pointer or a reference to the incomplete type in another class template:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X&amp;lt;T&amp;gt;* ptr;\n    X&amp;lt;T&amp;gt;&amp;amp; ref;\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Declare a member to be a pointer or a reference to one of its incomplete instantiations:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;* ptr;\n    X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; ref;\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Declare function templates or member function templates which accept/return incomplete types:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n   &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;      &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;T&amp;gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n   &lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;T&amp;gt;    &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Declare functions or member functions which accept/return one of its incomplete instantiations:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;      &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;    &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Define function templates or member function templates which accept/return pointers/references to the incomplete type (but without using its members):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n   &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;      &lt;span class=&quot;hljs-title&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;T&amp;gt;*, X&amp;lt;T&amp;gt;&amp;amp;)&lt;/span&gt; &lt;/span&gt;{}\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n   &lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;T&amp;gt;&amp;amp;   &lt;span class=&quot;hljs-title&quot;&gt;f4&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;T&amp;gt;&amp;amp; in)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; in; }\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n   &lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;T&amp;gt;*   &lt;span class=&quot;hljs-title&quot;&gt;f5&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;T&amp;gt;* in)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; in; }\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Define functions or methods which accept/return pointers/references to one of its incomplete instantiations  (but without using its members):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;      &lt;span class=&quot;hljs-title&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;*, X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;)&lt;/span&gt; &lt;/span&gt;{}\n&lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;   &lt;span class=&quot;hljs-title&quot;&gt;f4&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; in)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; in; }\n&lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;*   &lt;span class=&quot;hljs-title&quot;&gt;f5&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;* in)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; in; }\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use it as a base class of another template class&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; : X&amp;lt;T&amp;gt; {} &lt;span class=&quot;hljs-comment&quot;&gt;// OK as long as X is defined before&lt;/span&gt;\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// Foo is instantiated.&lt;/span&gt;\n\nFoo&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; a1; &lt;span class=&quot;hljs-comment&quot;&gt;// Compiler error.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt; {};\nFoo&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; a2; &lt;span class=&quot;hljs-comment&quot;&gt;// OK since X is now defined.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use it to declare a member of another class template:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X&amp;lt;T&amp;gt; m; &lt;span class=&quot;hljs-comment&quot;&gt;// OK as long as X is defined before&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Foo is instantiated. &lt;/span&gt;\n};\n\nFoo&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; a1; &lt;span class=&quot;hljs-comment&quot;&gt;// Compiler error.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt; {};\nFoo&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; a2; &lt;span class=&quot;hljs-comment&quot;&gt;// OK since X is now defined.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Define&lt;/em&gt; function templates or methods using this type&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;T&amp;gt; x)&lt;/span&gt; &lt;/span&gt;{}    &lt;span class=&quot;hljs-comment&quot;&gt;// OK if X is defined before calling f1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;T&amp;gt;    &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;X&lt;/span&gt;&amp;lt;T&amp;gt;(); }  &lt;span class=&quot;hljs-comment&quot;&gt;// OK if X is defined before calling f2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-built_in&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;X&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;());  &lt;span class=&quot;hljs-comment&quot;&gt;// Compiler error&lt;/span&gt;\n   &lt;span class=&quot;hljs-built_in&quot;&gt;f2&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;();     &lt;span class=&quot;hljs-comment&quot;&gt;// Compiler error&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt; {};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-built_in&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;X&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;());  &lt;span class=&quot;hljs-comment&quot;&gt;// OK since X is defined now&lt;/span&gt;\n   &lt;span class=&quot;hljs-built_in&quot;&gt;f2&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;();     &lt;span class=&quot;hljs-comment&quot;&gt;// OK since X is defined now&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;What you cannot do with an incomplete type:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Use one of its instantiations as a base class&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; : X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; {} &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use one of its instantiations to declare a member:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; m; &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Define&lt;/em&gt; functions or methods using one of its instantiations&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;      &lt;span class=&quot;hljs-title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; x)&lt;/span&gt; &lt;/span&gt;{}            &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;    &lt;span class=&quot;hljs-title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;X&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;(); }   &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use the methods or fields of one of its instantiations, in fact trying to dereference a variable with incomplete type&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;* m;            \n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;            \n    &lt;/span&gt;{\n        m-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;someMethod&lt;/span&gt;();      &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = m-&amp;gt;someField; &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error!&lt;/span&gt;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Create explicit instantiations of the class template&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;In file in which you use only Pointer or Reference to a class.And no member/member function should be invoked thought those Pointer/ reference.&lt;/p&gt;\n\n&lt;p&gt;with &lt;code&gt;class Foo;&lt;/code&gt;//forward declaration&lt;/p&gt;\n\n&lt;p&gt;We can declare data members of type Foo* or Foo&amp;amp;.&lt;/p&gt;\n\n&lt;p&gt;We can declare (but not define) functions with arguments, and/or return values, of type Foo.&lt;/p&gt;\n\n&lt;p&gt;We can declare static data members of type Foo. This is because static data members are defined outside the class definition.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m writing this as a separate answer rather than just a comment because I disagree with Luc Touraille&apos;s answer, not on the grounds of legality but for robust software and the danger of misinterpretation.&lt;/p&gt;\n\n&lt;p&gt;Specifically, I have an issue with the implied contract of what you expect users of your interface to have to know.&lt;/p&gt;\n\n&lt;p&gt;If you are returning or accepting reference types, then you are just saying they can pass through a pointer or reference which they may in turn have known only through a forward declaration.&lt;/p&gt;\n\n&lt;p&gt;When you are returning an incomplete type &lt;code&gt;X    f2();&lt;/code&gt; then you are saying your caller &lt;strong&gt;must&lt;/strong&gt; have the full type specification of X. They need it in order to create the LHS or temporary object at the call site.&lt;/p&gt;\n\n&lt;p&gt;Similarly, if you accept an incomplete type, the caller has to have constructed the object which is the parameter. Even if that object was returned as another incomplete type from a function, the call site needs the full declaration. i.e.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// forward for two legal declarations &lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;X &lt;span class=&quot;hljs-title&quot;&gt;returnsX&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;XAcceptor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;XAcepptor&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;returnsX&lt;/span&gt;() );  &lt;span class=&quot;hljs-comment&quot;&gt;// X declaration needs to be known here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I think there&apos;s an important principle that a header should supply enough information to use it without a dependency requiring other headers. That means header should be able to be included in a  compilation unit without causing a compiler error when you use any functions it declares.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Except&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;If this external dependency is &lt;strong&gt;desired&lt;/strong&gt; behaviour. Instead of using conditional compilation you could have a &lt;em&gt;well-documented&lt;/em&gt; requirement for them to supply their own header declaring X. This is an alternative to using #ifdefs and can be a useful way to introduce mocks or other variants.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The important distinction being some template techniques where you are explicitly NOT expected to instantiate them, mentioned just so someone doesn&apos;t get snarky with me.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;The general rule I follow is not to include any header file unless I have to.  So unless I am storing the object of a class as a member variable of my class I won&apos;t include it, I&apos;ll just use the forward declaration.&lt;/p&gt;\n    ","\n&lt;p&gt;As long as you don&apos;t need the definition (think pointers and references) you can get away with forward declarations. This is why mostly you&apos;d see them in headers while implementation files typically will pull the header for the appropriate definition(s).&lt;/p&gt;\n    ","\n&lt;p&gt;You will usually want to use forward declaration in a classes header file when you want to use the other type (class) as a member of the class. You can not use the forward-declared classes &lt;em&gt;methods&lt;/em&gt; in the header file because C++ does not know the definition of that class at that point yet. That&apos;s logic you have to move into the .cpp-files, but if you are using template-functions you should reduce them to only the part that uses the template and move that function into the header. &lt;/p&gt;\n    ","\n&lt;p&gt;Take it that forward declaration will get your code to compile (obj is created). Linking however (exe creation) will not be successfull unless the definitions are found. &lt;/p&gt;\n    ","\n&lt;p&gt;I just want to add one important thing you can do with a forwarded class not mentioned in the answer of Luc Touraille.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What you can do with an incomplete type:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Define&lt;/em&gt; functions or methods which accept/return \npointers/references to the incomplete type and forward that pointers/references \nto another function.     &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;hljs-title&quot;&gt;f6&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X*)&lt;/span&gt;       &lt;/span&gt;{}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;hljs-title&quot;&gt;f7&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X&amp;amp;)&lt;/span&gt;       &lt;/span&gt;{}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;hljs-title&quot;&gt;f8&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X* x_ptr, X&amp;amp; x_ref)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-built_in&quot;&gt;f6&lt;/span&gt;(x_ptr); &lt;span class=&quot;hljs-built_in&quot;&gt;f7&lt;/span&gt;(x_ref); }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A module can pass through an object of a forward declared class to another module.&lt;/p&gt;\n    ","\n&lt;p&gt;As, Luc Touraille has already explained it very well where to use and not use forward declaration of the class.&lt;/p&gt;\n\n&lt;p&gt;I will just add to that why we need to use it.&lt;/p&gt;\n\n&lt;p&gt;We should be using Forward declaration wherever possible to avoid the unwanted dependency injection.&lt;/p&gt;\n\n&lt;p&gt;As &lt;code&gt;#include&lt;/code&gt; header files are added on multiple files therefore, if we add a header into another header file it will add unwanted dependency injection in various parts of source code which can be avoided by adding &lt;code&gt;#include&lt;/code&gt; header into &lt;code&gt;.cpp&lt;/code&gt; files wherever possible rather than adding to another header file and use class forward declaration wherever possible in header &lt;code&gt;.h&lt;/code&gt; files.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I desperately want this to be renamed &quot;when &lt;i&gt;should&lt;/i&gt; I&quot;, and the answers updated appropriately...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14250/deworde&quot; title=&quot;2,569 reputation&quot; class=&quot;comment-user&quot;&gt;deworde&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49465314_553682&quot;&gt;&lt;span title=&quot;2015-06-08 07:51:47Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 8, 2015 at 7:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@deworde When you say when &quot;should&quot; you are asking for opinion.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/984975/atursams&quot; title=&quot;7,129 reputation&quot; class=&quot;comment-user&quot;&gt;AturSams&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment60037875_553682&quot;&gt;&lt;span title=&quot;2016-03-24 14:12:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 24, 2016 at 14:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@deworde it is my understanding that you want to use forward declarations whenever you can, to improve build time and avoid circular references. The only exception I can think of is when an include file contains typedefs, in which case there&apos;s a tradeoff between re-defining the typedef (and risking it changing) and including an entire file (along with its recursive includes).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/67824/ohad-schneider&quot; title=&quot;35,140 reputation&quot; class=&quot;comment-user&quot;&gt;Ohad Schneider&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment69234920_553682&quot;&gt;&lt;span title=&quot;2016-12-07 09:29:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 7, 2016 at 9:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@OhadSchneider From a practical perspective, I&apos;m not a big fan of headers that my. ÷&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14250/deworde&quot; title=&quot;2,569 reputation&quot; class=&quot;comment-user&quot;&gt;deworde&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment69236749_553682&quot;&gt;&lt;span title=&quot;2016-12-07 10:16:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 7, 2016 at 10:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;basically always require you to include a different header in order to use them (forward decl of constructor parameter is a big culprit here)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14250/deworde&quot; title=&quot;2,569 reputation&quot; class=&quot;comment-user&quot;&gt;deworde&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment69237041_553682&quot;&gt;&lt;span title=&quot;2016-12-07 10:23:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 7, 2016 at 10:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Great answer but please see mine below for the engineering point on which I disagree. In short, if you don&apos;t include headers for incomplete types you accept or return, you force an invisible dependency on the consumer of your header having to know which others they need.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/53870/andy-dent&quot; title=&quot;17,025 reputation&quot; class=&quot;comment-user&quot;&gt;Andy Dent&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25437731_553869&quot;&gt;&lt;span title=&quot;2013-07-06 02:55:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 6, 2013 at 2:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AndyDent: True, but the consumer of the header only needs to include the dependencies (s)he actually uses, so this follows the C++ principle of &quot;you only pay for what you use&quot;. But indeed, it can be inconvenient for the user who would expect the header to be standalone.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/20984/luc-touraille&quot; title=&quot;76,916 reputation&quot; class=&quot;comment-user&quot;&gt;Luc Touraille&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25484460_553869&quot;&gt;&lt;span title=&quot;2013-07-08 11:45:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 8, 2013 at 11:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This set of rules ignores one very important case: you need a complete type to instantiate most templates in the standard library.  Particular attention needs to be paid to this, because violating the rule results in undefined behavior, and may not cause a compiler error.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/649665/james-kanze&quot; title=&quot;146,942 reputation&quot; class=&quot;comment-user&quot;&gt;James Kanze&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25632818_553869&quot;&gt;&lt;span title=&quot;2013-07-12 08:11:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 12, 2013 at 8:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1 for the &quot;put yourself in the compiler&apos;s position&quot;. I imagine the &quot;compiler being&quot; having a mustache.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1575066/pascalvkooten&quot; title=&quot;19,619 reputation&quot; class=&quot;comment-user&quot;&gt;PascalVKooten&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27305033_553869&quot;&gt;&lt;span title=&quot;2013-09-01 15:31:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 1, 2013 at 15:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JesusChrist: Exactly: when you pass an object by value, the compiler needs to know its size in order to make the appropriate stack manipulation; when passing a pointer or a reference, the compiler does not need the size or layout of the object, only the size of an address (i.e. the size of a pointer), which does not depend on the type pointed to.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/20984/luc-touraille&quot; title=&quot;76,916 reputation&quot; class=&quot;comment-user&quot;&gt;Luc Touraille&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42704996_553869&quot;&gt;&lt;span title=&quot;2014-11-24 08:12:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 24, 2014 at 8:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Almost.  You can also refer to &quot;plain&quot; (i.e. non-pointer/reference) incomplete types as parameters or return types in function prototypes.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/47984/j-random-hacker&quot; title=&quot;49,399 reputation&quot; class=&quot;comment-user&quot;&gt;j_random_hacker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment365546_553697&quot;&gt;&lt;span title=&quot;2009-02-16 16:04:36Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 16, 2009 at 16:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What about classes that I want to use as members of a class that I define in the header file? Can I forward declare them?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/44673/igor&quot; title=&quot;25,848 reputation&quot; class=&quot;comment-user owner&quot;&gt;Igor&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment365585_553697&quot;&gt;&lt;span title=&quot;2009-02-16 16:15:41Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 16, 2009 at 16:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yes, but in that case you can only use a reference or a pointer to the forward-declared class. But it does let you have members, nevertheless.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/19254/reunanen&quot; title=&quot;7,721 reputation&quot; class=&quot;comment-user&quot;&gt;Reunanen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment365598_553697&quot;&gt;&lt;span title=&quot;2009-02-16 16:21:52Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 16, 2009 at 16:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What is in-name-only mean?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/66814/boon&quot; title=&quot;39,446 reputation&quot; class=&quot;comment-user&quot;&gt;Boon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment43714783_1157780&quot;&gt;&lt;span title=&quot;2014-12-25 15:58:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 25, 2014 at 15:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Boon: dare I say it...? If you use &lt;i&gt;only&lt;/i&gt; the class&apos; &lt;i&gt;name&lt;/i&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/134841/marc-mutz-mmutz&quot; title=&quot;23,807 reputation&quot; class=&quot;comment-user&quot;&gt;Marc Mutz - mmutz&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment43879638_1157780&quot;&gt;&lt;span title=&quot;2015-01-01 19:52:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 1, 2015 at 19:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;None of the answers so far describe when one can the forward declaration of a class template.&quot; Isn&apos;t that simply because the semantics of &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;X&amp;lt;int&amp;gt;&lt;/code&gt; are exactly the same, and only the forward-declaring syntax differs in any substantive way, with all but 1 line of your answer amounting to just taking Luc&apos;s and &lt;code&gt;s/X/X&amp;lt;int&amp;gt;/g&lt;/code&gt;? Is that really needed? Or have I missed a tiny detail that&apos;s different? It&apos;s possible, but I&apos;ve visually compared a few times and can&apos;t see any...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2757035/underscore-d&quot; title=&quot;5,910 reputation&quot; class=&quot;comment-user&quot;&gt;underscore_d&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65208475_33448221&quot;&gt;&lt;span title=&quot;2016-08-12 20:11:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 12, 2016 at 20:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 4 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thank you! That edit adds a tonne of valuable info. I&apos;ll have to read it several times to fully understand it... or maybe use the often-better tactic of waiting until I get horribly confused in real code and coming back here! I suspect I&apos;ll be able to use this to reduce dependencies in various places.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2757035/underscore-d&quot; title=&quot;5,910 reputation&quot; class=&quot;comment-user&quot;&gt;underscore_d&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65219953_33448221&quot;&gt;&lt;span title=&quot;2016-08-13 11:10:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 13, 2016 at 11:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;I think there&apos;s an important principle that a header should supply enough information to use it without a dependency requiring other headers.&quot; - another issue is mentioned in a comment by Adrian McCarthy on Naveen&apos;s answer.  That provides a sound reason not to follow your &quot;should supply enough information to use&quot; principle even for currently non-templated types.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/410767/tony-delroy&quot; title=&quot;99,376 reputation&quot; class=&quot;comment-user&quot;&gt;Tony Delroy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment33797520_17499222&quot;&gt;&lt;span title=&quot;2014-03-07 14:52:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 7, 2014 at 14:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You are talking about when you &lt;i&gt;should&lt;/i&gt; (or shouldn&apos;t) use forward declarion. That is totally not the point of this question, though. This is about knowing the technical possibilities when (for example) want to break a circular dependency problem.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1904815/jonnyjd&quot; title=&quot;2,463 reputation&quot; class=&quot;comment-user&quot;&gt;JonnyJD&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment38986969_17499222&quot;&gt;&lt;span title=&quot;2014-07-31 14:46:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 31, 2014 at 14:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;I disagree with Luc Touraille&apos;s answer&lt;/code&gt; So write him a comment, including a link to a blog post if you need the length. This doesn&apos;t answer the question asked. If everyone thought questions about how X works justified answers disagreeing with X doing that or debating limits within which we should restrain our freedom to use X - we&apos;d have almost no real answers.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2757035/underscore-d&quot; title=&quot;5,910 reputation&quot; class=&quot;comment-user&quot;&gt;underscore_d&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65220001_17499222&quot;&gt;&lt;span title=&quot;2016-08-13 11:14:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 13, 2016 at 11:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;IMHO, this answer depends on the position of a developer. Eg: application developers and library developers might have different opinions.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4123703/louis-go&quot; title=&quot;2,069 reputation&quot; class=&quot;comment-user&quot;&gt;Louis Go&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127408147_17499222&quot;&gt;&lt;span title=&quot;2022-05-04 04:22:28Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 4 at 4:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This breaks encapsulation and makes code brittle.  To do this, you need to know if the type is a typedef or a class for a class template with default template parameters, and if the implementation ever changes, you&apos;ll need to update ever place you&apos;ve used a forward declaration.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1386054/adrian-mccarthy&quot; title=&quot;43,460 reputation&quot; class=&quot;comment-user&quot;&gt;Adrian McCarthy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment24295395_553884&quot;&gt;&lt;span title=&quot;2013-05-30 23:19:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 30, 2013 at 23:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AdrianMcCarthy is right, and a reasonable solution is to have a forward declaration header that&apos;s included by the header whose content it forward declares, which should be owned/maintained/shipped by whomever owns that header too.  For example: the iosfwd Standard library header, which contains forward declarations of iostream content.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/410767/tony-delroy&quot; title=&quot;99,376 reputation&quot; class=&quot;comment-user&quot;&gt;Tony Delroy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment33797289_553884&quot;&gt;&lt;span title=&quot;2014-03-07 14:47:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 7, 2014 at 14:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This makes no sense. One cannot have a member of an incomplete type. Any class&apos;s declaration must provide everything all users need to know about its size and layout. Its size includes the sizes of all of its non-static members. Forward-declaring a member leaves users with no idea of its size.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2757035/underscore-d&quot; title=&quot;5,910 reputation&quot; class=&quot;comment-user&quot;&gt;underscore_d&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65208034_553706&quot;&gt;&lt;span title=&quot;2016-08-12 19:55:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 12, 2016 at 19:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why ever did 2 people upvote this? You&apos;re not talking about what the question is talking about. You mean normal - not forward - declaration of &lt;i&gt;functions&lt;/i&gt;. The question is about forward-declaration of &lt;b&gt;classes&lt;/b&gt;. As you said &quot;forward declaration will get your code to compile&quot;, do me a favour: compile &lt;code&gt;class A; class B { A a; }; int main(){}&lt;/code&gt;, and let me know how that goes. Of course it won&apos;t compile. All the proper answers here explain why and the precise, limited contexts in which forward-declaration &lt;i&gt;is&lt;/i&gt; valid. You instead have written this about something totally different.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2757035/underscore-d&quot; title=&quot;5,910 reputation&quot; class=&quot;comment-user&quot;&gt;underscore_d&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65208402_553709&quot;&gt;&lt;span title=&quot;2016-08-12 20:08:29Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 12, 2016 at 20:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;a forwarded class&quot; and &quot;a forward declared class&quot; might be mistaken to refer to two very different things. What you&apos;ve written follows directly from concepts implicit in Luc&apos;s answer, so while it would&apos;ve made a good comment adding overt clarification, I&apos;m not sure it justifies an answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2757035/underscore-d&quot; title=&quot;5,910 reputation&quot; class=&quot;comment-user&quot;&gt;underscore_d&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65208104_37710326&quot;&gt;&lt;span title=&quot;2016-08-12 19:57:51Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 12, 2016 at 19:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":516,"title":"When can I use a forward declaration?","content":"\n                \n&lt;p&gt;I am looking for the definition of when I am allowed to do forward declaration of a class in another class&apos;s header file:&lt;/p&gt;\n\n&lt;p&gt;Am I allowed to do it for a base class, for a class held as a member, for a class passed to member function by reference, etc. ?&lt;/p&gt;\n    ","slug":"when-can-i-use-a-forward-declaration-1657388251827","postType":"QUESTION","createdAt":"2022-07-09T17:37:31.000Z","updatedAt":"2022-07-09T17:37:31.000Z","tags":[{"id":2555,"name":"forward-declaration","slug":"forward-declaration","createdAt":"2022-07-09T17:37:31.000Z","updatedAt":"2022-07-09T17:37:31.000Z","Questions_Tags":{"questionId":516,"tagId":2555}}]}},"__N_SSG":true}