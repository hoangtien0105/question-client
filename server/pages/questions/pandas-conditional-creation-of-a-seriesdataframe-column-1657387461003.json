{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;strong&gt;If you only have two choices to select from:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = np.where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)})\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = np.where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yields&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;  color\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   Z    A  green\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   Z    B  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   X    B    red\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   Y    C    red\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;If you have more than two conditions then use &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.select.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;np.select&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;. For example, if you want &lt;code&gt;color&lt;/code&gt; to be &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;yellow&lt;/code&gt; when &lt;code&gt;(df[&apos;Set&apos;] == &apos;Z&apos;) &amp;amp; (df[&apos;Type&apos;] == &apos;A&apos;)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;otherwise &lt;code&gt;blue&lt;/code&gt; when &lt;code&gt;(df[&apos;Set&apos;] == &apos;Z&apos;) &amp;amp; (df[&apos;Type&apos;] == &apos;B&apos;)&lt;/code&gt; &lt;/li&gt;\n&lt;li&gt;otherwise &lt;code&gt;purple&lt;/code&gt; when &lt;code&gt;(df[&apos;Type&apos;] == &apos;B&apos;)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;otherwise &lt;code&gt;black&lt;/code&gt;,&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;then use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)})\nconditions = [\n    (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;) &amp;amp; (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;),\n    (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;) &amp;amp; (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;),\n    (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;)]\nchoices = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;purple&apos;&lt;/span&gt;]\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = np.select(conditions, choices, default=&lt;span class=&quot;hljs-string&quot;&gt;&apos;black&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which yields&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;   color\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   Z    A  yellow\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   Z    B    blue\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   X    B  purple\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   Y    C   black\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;List comprehension is another way to create another column conditionally. If you are working with object dtypes in columns, like in your example, list comprehensions typically outperform most other methods.&lt;/p&gt;\n\n&lt;p&gt;Example list comprehension:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;%timeit tests:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)})\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]]\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = np.where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;239&lt;/span&gt; µs per loop\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;523&lt;/span&gt; µs per loop\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;263&lt;/span&gt; µs per loop\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another way in which this could be achieved is &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The following is slower than the approaches timed &lt;a href=&quot;https://stackoverflow.com/a/31173785/1878788&quot;&gt;here&lt;/a&gt;, but we can compute the extra column based on the contents of more than one column, and more than two values can be computed for the extra column.&lt;/p&gt;\n\n&lt;p&gt;Simple example using just the &quot;Set&quot; column:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;set_color&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;row&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; row[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Set&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;\n\ndf = df.assign(color=df.apply(set_color, axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;  Set Type  color\n0   Z    A    red\n1   Z    B    red\n2   X    B  green\n3   Y    C  green\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example with more colours and more columns taken into account:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;set_color&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;row&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; row[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Set&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; row[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Type&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;\n\ndf = df.assign(color=df.apply(set_color, axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;  Set Type  color\n0   Z    A    red\n1   Z    B    red\n2   X    B  green\n3   Y    C   blue\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Edit (21/06/2019): Using plydata&lt;/h3&gt;\n\n&lt;p&gt;It is also possible to use &lt;a href=&quot;https://github.com/has2k1/plydata&quot; rel=&quot;noreferrer&quot;&gt;plydata&lt;/a&gt; to do this kind of things (this seems even slower than using &lt;code&gt;assign&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;, though).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; plydata &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; define, if_else\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Simple &lt;code&gt;if_else&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = define(df, color=if_else(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set==&quot;Z&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;red&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;green&quot;&apos;&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;  Set Type  color\n0   Z    A    red\n1   Z    B    red\n2   X    B  green\n3   Y    C  green\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Nested &lt;code&gt;if_else&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = define(df, color=if_else(\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set==&quot;Z&quot;&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;red&quot;&apos;&lt;/span&gt;,\n    if_else(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type==&quot;C&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;green&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;blue&quot;&apos;&lt;/span&gt;)))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)                            \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;  Set Type  color\n0   Z    A    red\n1   Z    B    red\n2   X    B   blue\n3   Y    C  green\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s yet another way to skin this cat, using a dictionary to map new values onto the keys in the list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;map_values&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;row, values_dict&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; values_dict[row]\n\nvalues_dict = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;INDICATOR&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;VALUE&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]})\n\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;NEW_VALUE&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;INDICATOR&apos;&lt;/span&gt;].apply(map_values, args = (values_dict,))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What&apos;s it look like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df\nOut[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: \n  INDICATOR  VALUE  NEW_VALUE\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;         A     &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         B      &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;         C      &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;         D      &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This approach can be very powerful when you have many &lt;code&gt;ifelse&lt;/code&gt;-type statements to make (i.e. many unique values to replace).&lt;/p&gt;\n\n&lt;p&gt;And of course you could always do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;NEW_VALUE&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;INDICATOR&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(values_dict)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But that approach is more than three times as slow as the &lt;code&gt;apply&lt;/code&gt; approach from above, on my machine.&lt;/p&gt;\n\n&lt;p&gt;And you could also do this, using &lt;code&gt;dict.get&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;NEW_VALUE&apos;&lt;/span&gt;] = [values_dict.get(v, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;INDICATOR&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can simply use the powerful &lt;code&gt;.loc&lt;/code&gt; method and use one condition or several depending on your need (tested with pandas=1.0.5).&lt;/p&gt;\n&lt;p&gt;Code Summary:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=pd.DataFrame(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;A B B C&apos;&lt;/span&gt;.split(), &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z Z X Y&apos;&lt;/span&gt;.split()))\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;\ndf.loc[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#practice!&lt;/span&gt;\ndf.loc[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;)&amp;amp;(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;)|(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;purple&quot;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Explanation:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=pd.DataFrame(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;A B B C&apos;&lt;/span&gt;.split(), &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z Z X Y&apos;&lt;/span&gt;.split()))\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# df so far: &lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  \n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    A   Z \n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    B   Z \n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   X \n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    C   Y\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;add a &apos;color&apos; column and set all values to &quot;red&quot;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Apply your single condition:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.loc[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# df: &lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  Color\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    A   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    B   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   X    red\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    C   Y    red\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or multiple conditions if you want:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.loc[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;)&amp;amp;(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;)|(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;purple&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can read on Pandas logical operators and conditional selection here:\n&lt;a href=&quot;https://stackoverflow.com/questions/21415661/logical-operators-for-boolean-indexing-in-pandas&quot;&gt;Logical operators for boolean indexing in Pandas&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can use pandas methods &lt;a href=&quot;http://pandas.pydata.org/docs/reference/api/pandas.Series.where.html#pandas.Series.where&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;where&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://pandas.pydata.org/docs/reference/api/pandas.Series.mask.html#pandas.Series.mask&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;mask&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;].where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, other=&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# Replace values where the condition is False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;].mask(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, other=&lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# Replace values where the condition is True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively, you can use the method &lt;code&gt;transform&lt;/code&gt; with a lambda function:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;].transform(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  color\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    B   X    red\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    C   Y    red\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Performance comparison from @chai:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;})\n \n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color1&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color1&apos;&lt;/span&gt;].where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color2&apos;&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]]\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color3&apos;&lt;/span&gt;] = np.where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color4&apos;&lt;/span&gt;] = df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;397&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\n&lt;span class=&quot;hljs-number&quot;&gt;976&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;241&lt;/span&gt; ms per loop\n&lt;span class=&quot;hljs-number&quot;&gt;673&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;139&lt;/span&gt; ms per loop\n&lt;span class=&quot;hljs-number&quot;&gt;796&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;182&lt;/span&gt; ms per loop\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One liner with &lt;code&gt;.apply()&lt;/code&gt; method is following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;].apply(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; set_: &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; set_==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After that, &lt;code&gt;df&lt;/code&gt; data frame looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  color\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    A   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    B   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   X    red\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    C   Y    red\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;if you have only &lt;strong&gt;2 choices&lt;/strong&gt;, use &lt;code&gt;np.where()&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)})\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;] = np.where(df.A&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;yes&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;no&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;if you have over &lt;strong&gt;2 choices&lt;/strong&gt;, maybe &lt;code&gt;apply()&lt;/code&gt; could work\ninput&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;arr = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and arr is&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    A   B   C   D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   a   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   b   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   c   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;if you want the column E tobe &lt;code&gt;if arr.A ==&apos;a&apos; then arr.B elif arr.A==&apos;b&apos; then arr.C elif arr.A == &apos;c&apos; then arr.D else something_else&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;arr[&lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;] = arr.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;(x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;(x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1234&lt;/span&gt;)), axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and finally the arr is&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    A   B   C   D   E\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   a   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   b   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   c   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;If you&apos;re working with massive data, a memoized approach would be best:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# First create a dictionary of manually stored values&lt;/span&gt;\ncolor_dict = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Second, build a dictionary of &quot;other&quot; values&lt;/span&gt;\ncolor_dict_other = {x:&lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;].unique() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; color_dict.keys()}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Next, merge the two&lt;/span&gt;\ncolor_dict.update(color_dict_other)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Finally, map it to your column&lt;/span&gt;\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(color_dict)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;This approach will be fastest when you have many repeated values.&lt;/em&gt; My general rule of thumb is to memoize when: &lt;code&gt;data_size&lt;/code&gt; &amp;gt; &lt;code&gt;10**4&lt;/code&gt; &amp;amp; &lt;code&gt;n_distinct&lt;/code&gt; &amp;lt; &lt;code&gt;data_size/4&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;E.x. Memoize in a case 10,000 rows with 2,500 or fewer distinct values.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;https://pyjanitor-devs.github.io/pyjanitor/reference/janitor.functions/janitor.case_when.html#janitor.case_when&quot; rel=&quot;nofollow noreferrer&quot;&gt;case_when&lt;/a&gt; function from &lt;a href=&quot;https://pyjanitor-devs.github.io/pyjanitor/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;pyjanitor&lt;/a&gt; is a wrapper around &lt;code&gt;pd.Series.mask&lt;/code&gt; and offers a chainable/convenient form for multiple conditions:&lt;/p&gt;\n&lt;p&gt;For a single condition:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.case_when(\n    df.col1 == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;,  &lt;span class=&quot;hljs-comment&quot;&gt;# condition&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;,         &lt;span class=&quot;hljs-comment&quot;&gt;# value if True&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;,           &lt;span class=&quot;hljs-comment&quot;&gt;# value if False&lt;/span&gt;\n    column_name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;color&quot;&lt;/span&gt;\n    )\n\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  color\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    B   X    red\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    C   Y    red\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For multiple conditions:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.case_when(\n    df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;) &amp;amp; df.&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;# condition, result&lt;/span&gt;\n    df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;) &amp;amp; df.&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;,   &lt;span class=&quot;hljs-comment&quot;&gt;# condition, result&lt;/span&gt;\n    df.&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;purple&apos;&lt;/span&gt;,                  &lt;span class=&quot;hljs-comment&quot;&gt;# condition, result&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;black&apos;&lt;/span&gt;,              &lt;span class=&quot;hljs-comment&quot;&gt;# default if none of the conditions evaluate to True&lt;/span&gt;\n    column_name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;  \n)\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;  &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;   color\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A   Z  yellow\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   Z    blue\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    B   X  purple\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    C   Y   black\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;More examples can be found &lt;a href=&quot;https://github.com/pyjanitor-devs/pyjanitor/blob/dev/examples/notebooks/case_when.ipynb&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A Less verbose approach using &lt;code&gt;np.select&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = np.array([[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;X&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y&apos;&lt;/span&gt;]])\ndf = pd.DataFrame(a,columns=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;])\n\nconditions = [\n    df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;\n]\n\noutputs = [\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;\n    ]\n             &lt;span class=&quot;hljs-comment&quot;&gt;# conditions Z is Green, Red Otherwise.&lt;/span&gt;\nres = np.select(conditions, outputs, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;)\nres \narray([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;], dtype=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;U5&apos;&lt;/span&gt;)\ndf.insert(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;new_column&apos;&lt;/span&gt;,res)    \n\ndf\n    &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;    &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; new_column\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   A   Z   Green\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   B   Z   Green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   B   X   Red\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   C   Y   Red\n\ndf.to_numpy()    \n    \narray([[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;],\n       [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;],\n       [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;X&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;],\n       [&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;]], dtype=&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;)\n\n%%timeit conditions = [df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;] \noutputs = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;] \nnp.select(conditions, outputs, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;134&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;9.71&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n\ndf2 = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;})\n%%timeit conditions = [df2[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;] \noutputs = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;] \nnp.select(conditions, outputs, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;188&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;26.5&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":266,"title":"Pandas conditional creation of a series/dataframe column","content":"\n                \n&lt;p&gt;How do I add a &lt;code&gt;color&lt;/code&gt; column to the following dataframe so that &lt;code&gt;color=&apos;green&apos;&lt;/code&gt; if &lt;code&gt;Set&amp;nbsp;==&amp;nbsp;&apos;Z&apos;&lt;/code&gt;, and &lt;code&gt;color=&apos;red&apos;&lt;/code&gt; otherwise?&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;       &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A          Z\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B          Z           \n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    B          X\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    C          Y\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"pandas-conditional-creation-of-a-seriesdataframe-column-1657387461003","postType":"QUESTION","createdAt":"2022-07-09T17:24:21.000Z","updatedAt":"2022-07-09T17:24:21.000Z","tags":[{"id":1685,"name":"numpy","slug":"numpy","createdAt":"2022-07-09T17:24:21.000Z","updatedAt":"2022-07-09T17:24:21.000Z","Questions_Tags":{"questionId":266,"tagId":1685}}],"relatedQuestions":[{"title":"Pandas conditional creation of a series/dataframe column","slug":"pandas-conditional-creation-of-a-seriesdataframe-column-1657387461003","tags":[{"name":"numpy","Questions_Tags":{"questionId":266,"tagId":1685}}]}]},"randomQuestions":[{"title":"Why do I get a segmentation fault when writing to a \"char *s\" initialized with a string literal, but not \"char s[]\"?","slug":"why-do-i-get-a-segmentation-fault-when-writing-to-a-\"char-*s\"-initialized-with-a-string-literal-but-not-\"char-s\"-1657385511046"},{"title":"Correctly allocating multi-dimensional arrays","slug":"correctly-allocating-multi-dimensional-arrays-1657387733756"},{"title":"Get selected value in dropdown list using JavaScript","slug":"get-selected-value-in-dropdown-list-using-javascript-1657387631638"},{"title":"The Definitive C Book Guide and List","slug":"the-definitive-c-book-guide-and-list-1657384747653"},{"title":"Error: could not find function ... in R","slug":"error:-could-not-find-function-...-in-r-1657388476492"},{"title":"How to make a div 100% height of the browser window","slug":"how-to-make-a-div-100percent-height-of-the-browser-window-1657388265955"},{"title":"Persist variables between page loads","slug":"persist-variables-between-page-loads-1657388558452"},{"title":"What special characters must be escaped in regular expressions?","slug":"what-special-characters-must-be-escaped-in-regular-expressions-1657387465381"},{"title":"What are good ways to prevent SQL injection? [duplicate]","slug":"what-are-good-ways-to-prevent-sql-injection-duplicate-1657388431570"},{"title":"What does ** (double star/asterisk) and * (star/asterisk) do for parameters?","slug":"what-does-**-(double-starasterisk)-and-*-(starasterisk)-do-for-parameters-1657384800967"},{"title":"How to choose the right bean scope?","slug":"how-to-choose-the-right-bean-scope-1657387596513"},{"title":"Why does \"a == x or y or z\" always evaluate to True?","slug":"why-does-\"a-x-or-y-or-z\"-always-evaluate-to-true-1657384855216"},{"title":"Why can templates only be implemented in the header file?","slug":"why-can-templates-only-be-implemented-in-the-header-file-1657384341933"},{"title":"What is the scope of variables in JavaScript?","slug":"what-is-the-scope-of-variables-in-javascript-1657384464291"},{"title":"What does this symbol mean in JavaScript?","slug":"what-does-this-symbol-mean-in-javascript-1657387632971"},{"title":"What is the difference between a definition and a declaration?","slug":"what-is-the-difference-between-a-definition-and-a-declaration-1657387851618"},{"title":"How to find the 'sizeof' (a pointer pointing to an array)?","slug":"how-to-find-the-'sizeof'-(a-pointer-pointing-to-an-array)-1657387354284"},{"title":"Trouble with UTF-8 characters; what I see is not what I stored","slug":"trouble-with-utf-8-characters-what-i-see-is-not-what-i-stored-1657384817490"},{"title":"How to reshape data from long to wide format","slug":"how-to-reshape-data-from-long-to-wide-format-1657384486421"},{"title":"addEventListener vs onclick","slug":"addeventlistener-vs-onclick-1657388191429"}]},"__N_SSG":true}