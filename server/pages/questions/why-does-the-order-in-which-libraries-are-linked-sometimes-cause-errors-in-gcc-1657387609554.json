{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;sub&gt;(See the history on this answer to get the more elaborate text, but I now think it&apos;s easier for the reader to see real command lines).&lt;/sub&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Common files shared by all below commands&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;$ cat a.cpp\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n}\n\n$ cat b.cpp\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = b;\n\n$ cat d.cpp\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Linking to static libraries&lt;/h1&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;$ g++ -c b.cpp -o b.o\n$ ar cr libb.a b.o\n$ g++ -c d.cpp -o d.o\n$ ar cr libd.a d.o\n\n$ g++ -L. -ld -lb a.cpp &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order&lt;/span&gt;\n$ g++ -L. -lb -ld a.cpp &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order&lt;/span&gt;\n$ g++ a.cpp -L. -ld -lb &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order&lt;/span&gt;\n$ g++ a.cpp -L. -lb -ld &lt;span class=&quot;hljs-meta&quot;&gt;# right order&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The linker searches from left to right, and notes unresolved symbols as it goes. If a library resolves the symbol, it takes the object files of that library to resolve the symbol (b.o out of libb.a in this case).&lt;/p&gt;\n&lt;p&gt;Dependencies of static libraries against each other work the same - the library that needs symbols must be first, then the library that resolves the symbol.&lt;/p&gt;\n&lt;p&gt;If a static library depends on another library, but the other library again depends on the former library, there is a cycle. You can resolve this by enclosing the cyclically dependent libraries by &lt;code&gt;-(&lt;/code&gt; and &lt;code&gt;-)&lt;/code&gt;, such as &lt;code&gt;-( -la -lb -)&lt;/code&gt; (you may need to escape the parens, such as &lt;code&gt;-\\(&lt;/code&gt; and &lt;code&gt;-\\)&lt;/code&gt;). The linker then searches those enclosed lib multiple times to ensure cycling dependencies are resolved. Alternatively, you can specify the libraries multiple times, so each is before one another: &lt;code&gt;-la -lb -la&lt;/code&gt;.&lt;/p&gt;\n&lt;h1&gt;Linking to dynamic libraries&lt;/h1&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;$ export LD_LIBRARY_PATH=. &lt;span class=&quot;hljs-meta&quot;&gt;# not needed &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; libs go to /usr/lib etc&lt;/span&gt;\n$ g++ -fpic -shared d.cpp -o libd.so\n$ g++ -fpic -shared b.cpp -L. -ld -o libb.so &lt;span class=&quot;hljs-meta&quot;&gt;# specifies its dependency!&lt;/span&gt;\n\n$ g++ -L. -lb a.cpp &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order (works on some distributions)&lt;/span&gt;\n$ g++ -Wl,--as-needed -L. -lb a.cpp &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order&lt;/span&gt;\n$ g++ -Wl,--as-needed a.cpp -L. -lb &lt;span class=&quot;hljs-meta&quot;&gt;# right order&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s the same here - the libraries must follow the object files of the program. The difference here compared with static libraries is that you need not care about the dependencies of the libraries against each other, because &lt;em&gt;dynamic libraries sort out their dependencies themselves&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Some recent distributions apparently default to using the &lt;code&gt;--as-needed&lt;/code&gt; linker flag, which enforces that the program&apos;s object files come before the dynamic libraries. If that flag is passed, the linker will not link to libraries that are not actually needed by the executable (and it detects this from left to right). My recent archlinux distribution doesn&apos;t use this flag by default, so it didn&apos;t give an error for not following the correct order.&lt;/p&gt;\n&lt;p&gt;It is not correct to omit the dependency of &lt;code&gt;b.so&lt;/code&gt; against &lt;code&gt;d.so&lt;/code&gt; when creating the former. You will be required to specify the library when linking &lt;code&gt;a&lt;/code&gt; then, but &lt;code&gt;a&lt;/code&gt; doesn&apos;t really need the integer &lt;code&gt;b&lt;/code&gt; itself, so it should not be made to care about &lt;code&gt;b&lt;/code&gt;&apos;s own dependencies.&lt;/p&gt;\n&lt;p&gt;Here is an example of the implications if you miss specifying the dependencies for &lt;code&gt;libb.so&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;$ export LD_LIBRARY_PATH=. &lt;span class=&quot;hljs-meta&quot;&gt;# not needed &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; libs go to /usr/lib etc&lt;/span&gt;\n$ g++ -fpic -shared d.cpp -o libd.so\n$ g++ -fpic -shared b.cpp -o libb.so &lt;span class=&quot;hljs-meta&quot;&gt;# wrong (but links)&lt;/span&gt;\n\n$ g++ -L. -lb a.cpp &lt;span class=&quot;hljs-meta&quot;&gt;# wrong, as above&lt;/span&gt;\n$ g++ -Wl,--as-needed -L. -lb a.cpp &lt;span class=&quot;hljs-meta&quot;&gt;# wrong, as above&lt;/span&gt;\n$ g++ a.cpp -L. -lb &lt;span class=&quot;hljs-meta&quot;&gt;# wrong, missing libd.so&lt;/span&gt;\n$ g++ a.cpp -L. -ld -lb &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order (works on some distributions)&lt;/span&gt;\n$ g++ -Wl,--as-needed a.cpp -L. -ld -lb &lt;span class=&quot;hljs-meta&quot;&gt;# wrong order (like static libs)&lt;/span&gt;\n$ g++ -Wl,--as-needed a.cpp -L. -lb -ld # &lt;span class=&quot;hljs-string&quot;&gt;&quot;right&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you now look into what dependencies the binary has, you note the binary itself depends also on &lt;code&gt;libd&lt;/code&gt;, not just &lt;code&gt;libb&lt;/code&gt; as it should. The binary will need to be relinked if &lt;code&gt;libb&lt;/code&gt; later depends on another library, if you do it this way. And if someone else loads &lt;code&gt;libb&lt;/code&gt; using &lt;code&gt;dlopen&lt;/code&gt; at runtime (think of loading plugins dynamically), the call will fail as well. So the &lt;code&gt;&quot;right&quot;&lt;/code&gt; really should be a &lt;code&gt;wrong&lt;/code&gt; as well.&lt;/p&gt;\n    ","\n&lt;p&gt;The GNU ld linker is a so-called smart linker.  It will keep track of the functions used by preceding static libraries, permanently tossing out those functions that are not used from its lookup tables.  The result is that if you link a static library too early, then the functions in that library are no longer available to static libraries later on the link line.  &lt;/p&gt;\n\n&lt;p&gt;The typical UNIX linker works from left to right, so put all your dependent libraries on the left, and the ones that satisfy those dependencies on the right of the link line.  You may find that some libraries depend on others while at the same time other libraries depend on them.  This is where it gets complicated.  When it comes to circular references, fix your code!&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s an example to make it clear how things work with GCC when &lt;strong&gt;static&lt;/strong&gt; libraries are involved. So let&apos;s assume we have the following scenario:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;myprog.o&lt;/code&gt; - containing &lt;code&gt;main()&lt;/code&gt; function, dependent on &lt;code&gt;libmysqlclient&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;libmysqlclient&lt;/code&gt; - static, for the sake of the example (you&apos;d prefer the shared library, of course, as the &lt;code&gt;libmysqlclient&lt;/code&gt; is huge); in &lt;code&gt;/usr/local/lib&lt;/code&gt;; and dependent on stuff from &lt;code&gt;libz&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;libz&lt;/code&gt; (dynamic)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;How do we link this? (Note: examples from compiling on Cygwin using gcc 4.3.4)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;gcc -L/usr/local/lib -lmysqlclient myprog.o\n&lt;span class=&quot;hljs-meta&quot;&gt;# undefined reference to `_mysql_init&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;# myprog depends on libmysqlclient&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;# so myprog has to come earlier on the command &lt;span class=&quot;hljs-keyword&quot;&gt;line&lt;/span&gt;&lt;/span&gt;\n\ngcc myprog.o -L/usr/local/lib -lmysqlclient\n&lt;span class=&quot;hljs-meta&quot;&gt;# undefined reference to `_uncompress&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;# we have to link with libz, too&lt;/span&gt;\n\ngcc myprog.o -lz -L/usr/local/lib -lmysqlclient\n&lt;span class=&quot;hljs-meta&quot;&gt;# undefined reference to `_uncompress&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;# libz is needed by libmysqlclient&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;# so it has to appear *after* it on the command &lt;span class=&quot;hljs-keyword&quot;&gt;line&lt;/span&gt;&lt;/span&gt;\n\ngcc myprog.o -L/usr/local/lib -lmysqlclient -lz\n&lt;span class=&quot;hljs-meta&quot;&gt;# this works&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you add &lt;code&gt;-Wl,--start-group&lt;/code&gt; to the linker flags it does not care which order they&apos;re in or if there are circular dependencies.&lt;/p&gt;\n\n&lt;p&gt;On Qt this means adding: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;QMAKE_LFLAGS += -Wl,--start-group\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Saves loads of time messing about and it doesn&apos;t seem to slow down linking much (which takes far less time than compilation anyway).&lt;/p&gt;\n    ","\n&lt;p&gt;Another alternative would be to specify the list of libraries twice:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;gcc prog.o libA.a libB.a libA.a libB.a -o prog.x\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Doing this, you don&apos;t have to bother with the right sequence since the reference will be resolved in the second block.&lt;/p&gt;\n    ","\n&lt;p&gt;A quick tip that tripped me up: if you&apos;re invoking the linker as &quot;gcc&quot; or &quot;g++&quot;, then using &quot;--start-group&quot; and &quot;--end-group&quot; won&apos;t pass those options through to the linker -- nor will it flag an error. It will just fail the link with undefined symbols if you had the library order wrong.&lt;/p&gt;\n\n&lt;p&gt;You need to write them as &quot;-Wl,--start-group&quot; etc. to tell GCC to pass the argument through to the linker.&lt;/p&gt;\n    ","\n&lt;p&gt;You may can use -Xlinker option.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;g++ -o foobar  -Xlinker -start-group  -Xlinker libA.a -Xlinker libB.a -Xlinker libC.a  -Xlinker -end-group \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is ALMOST equal to&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;g++ -o foobar  -Xlinker -start-group  -Xlinker libC.a -Xlinker libB.a -Xlinker libA.a  -Xlinker -end-group \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Careful !&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The order within a group is important !\nHere&apos;s an example: a debug library has a debug routine, but the non-debug\nlibrary has a weak version of the same. You must put the debug library\nFIRST in the group or you will resolve to the non-debug version.&lt;/li&gt;\n&lt;li&gt;You need to precede each library in the group list with -Xlinker&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Link order certainly does matter, at least on some platforms. I have seen crashes for applications linked with libraries in wrong order (where wrong means A linked before B but B depends on A).&lt;/p&gt;\n    ","\n&lt;p&gt;I have seen this a lot, some of our modules link in excess of a 100 libraries of our code plus system &amp;amp; 3rd party libs. &lt;/p&gt;\n\n&lt;p&gt;Depending on different linkers HP/Intel/GCC/SUN/SGI/IBM/etc you can get unresolved functions/variables etc, on some platforms you have to list libraries twice. &lt;/p&gt;\n\n&lt;p&gt;For the most part we use structured hierarchy of libraries, core, platform, different layers of abstraction, but for some systems you still have to play with the order in the link command.&lt;/p&gt;\n\n&lt;p&gt;Once you hit upon a solution document it so the next developer does not have to work it out again.&lt;/p&gt;\n\n&lt;p&gt;My old lecturer used to say, &quot;&lt;em&gt;high cohesion &amp;amp; low coupling&lt;/em&gt;&quot;, its still true today.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See also now &lt;a href=&quot;http://stackoverflow.com/questions/7826448/linking-libraries-with-gcc-order-of-arguments&quot; title=&quot;linking libraries with gcc order of arguments&quot;&gt;stackoverflow.com/questions/7826448/&lt;/a&gt; -- TLDR &lt;code&gt;gcc&lt;/code&gt; changed to more-strict behavior (relatively) recently.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874188/tripleee&quot; title=&quot;159,777 reputation&quot; class=&quot;comment-user&quot;&gt;tripleee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment43959406_45135&quot;&gt;&lt;span title=&quot;2015-01-05 06:17:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 5, 2015 at 6:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Repeat until all symbols resolved, eh - you&apos;d think they could manage a topological sort. LLVM has 78 static libraries on it&apos;s own, with who-knows-what dependencies. True it also has a script to figure out compile/link options - but you can&apos;t use that in all circumstances.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user180247&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3325557_409470&quot;&gt;&lt;span title=&quot;2010-07-11 13:27:46Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 11, 2010 at 13:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Steve that&apos;s what the programs &lt;code&gt;lorder&lt;/code&gt; + &lt;code&gt;tsort&lt;/code&gt; do. But sometimes there is no order, if you have cyclic references. Then you just have to cycle through the libraries list until everything is resolved.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/34509/johannes-schaub-litb&quot; title=&quot;482,727 reputation&quot; class=&quot;comment-user&quot;&gt;Johannes Schaub - litb&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8520879_409470&quot;&gt;&lt;span title=&quot;2011-08-18 19:01:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 18, 2011 at 19:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Johannes - Determine the maximal strongly connected components (e.g. Tarjans algorithm) then topologically sort the (inherently non-cyclic) digraph of components. Each component can be treated as one library - if any one library from the component is needed, the dependency cycle(s) will cause all libraries in that component to be needed. So no, there really is no need to cycle through all the libraries in order to resolve everything, and no need for awkward command-line options - one method using two well-known algorithms can handle all cases correctly.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user180247&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8524547_409470&quot;&gt;&lt;span title=&quot;2011-08-18 22:44:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 18, 2011 at 22:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I would like to add one important detail to this excellent answer: Using &quot;-( archives -)&quot; or &quot;--start-group archives --end-group&quot; &lt;b&gt;is the only sure-fire way of resolving circular dependencies&lt;/b&gt;, since each time the linker visits an archive, it pulls in (and registers the unresolved symbols of) &lt;i&gt;only the object files that resolve currently unresolved symbols&lt;/i&gt;. Because of this, CMake&apos;s algorithm of repeating connected components in the dependency graph may occasionally fail. (See also &lt;a href=&quot;http://www.airs.com/blog/archives/48&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ian Lance Taylor&apos;s excellent blog post&lt;/a&gt; on linkers for more detail.)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/395370/jorgen&quot; title=&quot;515 reputation&quot; class=&quot;comment-user&quot;&gt;jorgen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29065251_409470&quot;&gt;&lt;span title=&quot;2013-10-25 07:34:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 25, 2013 at 7:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Fantastic write up: it gets an up-vote from me.  I would add to the section on &lt;i&gt;resolving cyclic dependencies&lt;/i&gt;, I&apos;ll leave it to the original poster if they wish to modify, that when passing the &lt;code&gt;--start-group&lt;/code&gt; and &lt;code&gt;--end-group&lt;/code&gt; options using gcc, you must precede with &lt;code&gt;-Wl,&amp;lt;option&amp;gt;&lt;/code&gt; as in &lt;code&gt;-Wl,--start-group &amp;lt;archives&amp;gt; -Wl,--end-group&lt;/code&gt;.  It is mentioned in the manual page which is referenced, but a quick mention here is helpful too.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/988207/andrew-falanga&quot; title=&quot;2,141 reputation&quot; class=&quot;comment-user&quot;&gt;Andrew Falanga&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment40116679_409470&quot;&gt;&lt;span title=&quot;2014-09-04 16:27:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 4, 2014 at 16:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Is this something with only gnu ld/gcc? Or is this something common with linkers?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/841/mike&quot; title=&quot;3,286 reputation&quot; class=&quot;comment-user&quot;&gt;Mike&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15864864_409402&quot;&gt;&lt;span title=&quot;2008-09-05 03:17:32Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 5, 2008 at 3:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Apparently more Unix compilers have similar issues. MSVC isn&apos;t entirely free of these issues, eiher, but they don&apos;t appear to be that bad.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15416/msalters&quot; title=&quot;168,160 reputation&quot; class=&quot;comment-user&quot;&gt;MSalters&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15864865_409402&quot;&gt;&lt;span title=&quot;2009-04-28 14:42:36Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 28, 2009 at 14:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The MS dev tools don&apos;t tend to show these issues as much because if you use an all-MS tool chain it ends up setting up the linker order properly, and you never notice the issue.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5801/michael-kohne&quot; title=&quot;11,679 reputation&quot; class=&quot;comment-user&quot;&gt;Michael Kohne&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15864866_409402&quot;&gt;&lt;span title=&quot;2009-08-28 20:59:10Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Aug 28, 2009 at 20:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The MSVC linker is less sensitive to this issue because it will search all libraries for an unreferenced symbol. Library order still can affect &lt;i&gt;which&lt;/i&gt; symbol gets resolved if more than one library have the symbol. From MSDN: &quot;Libraries are searched in command line order as well, with the following caveat: Symbols that are unresolved when bringing in an object file from a library are searched for in that library first, and then the following libraries from the command line and /DEFAULTLIB (Specify Default Library) directives, and then to any libraries at the beginning of the command line&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12711/michael-burr&quot; title=&quot;322,355 reputation&quot; class=&quot;comment-user&quot;&gt;Michael Burr&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15864867_409402&quot;&gt;&lt;span title=&quot;2012-04-24 06:19:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 24, 2012 at 6:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;i&gt;&quot;... smart linker ...&quot;&lt;/i&gt; - I believe it is classified as a &quot;single pass&quot; linker, not a &quot;smart linker&quot;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/608639/jww&quot; title=&quot;91,521 reputation&quot; class=&quot;comment-user&quot;&gt;jww&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91049913_409402&quot;&gt;&lt;span title=&quot;2018-08-28 03:34:10Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 28, 2018 at 3:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;it works because of &lt;code&gt;/usr/bin/ld: missing --end-group; added as last command line option&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/955508/leanid-chaika&quot; title=&quot;1,823 reputation&quot; class=&quot;comment-user&quot;&gt;leanid.chaika&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122336028_29457226&quot;&gt;&lt;span title=&quot;2021-09-16 22:10:50Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 16, 2021 at 22:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":316,"title":"Why does the order in which libraries are linked sometimes cause errors in GCC?","content":"\n                \n&lt;p&gt;Why does the order in which libraries are linked sometimes cause errors in GCC?&lt;/p&gt;\n    ","slug":"why-does-the-order-in-which-libraries-are-linked-sometimes-cause-errors-in-gcc-1657387609554","postType":"QUESTION","createdAt":"2022-07-09T17:26:49.000Z","updatedAt":"2022-07-09T17:26:49.000Z","tags":[{"id":1854,"name":"linker","slug":"linker","createdAt":"2022-07-09T17:26:49.000Z","updatedAt":"2022-07-09T17:26:49.000Z","Questions_Tags":{"questionId":316,"tagId":1854}}]}},"__N_SSG":true}