{"pageProps":{"data":{"answer":["\n&lt;p&gt;In general, the answer to  your question is &quot;yes&quot;, but...&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;.equals(...)&lt;/code&gt; will only compare what it is written to compare, no more, no less.&lt;/li&gt;\n&lt;li&gt;If a class does not override the equals method, then it defaults to the &lt;code&gt;equals(Object o)&lt;/code&gt; method of the closest parent class that has overridden this method. &lt;/li&gt;\n&lt;li&gt;If no parent classes have provided an override, then it defaults to the method from the ultimate parent class, Object, and so you&apos;re left with the &lt;code&gt;Object#equals(Object o)&lt;/code&gt; method. Per the Object API this is the same as &lt;code&gt;==&lt;/code&gt;; that is, it returns true &lt;em&gt;if and only if&lt;/em&gt; both variables refer to the same object, if their references are one and the same. Thus you will be testing  for &lt;strong&gt;object equality&lt;/strong&gt; and not &lt;strong&gt;functional equality&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;Always remember to override &lt;code&gt;hashCode&lt;/code&gt; if you override &lt;code&gt;equals&lt;/code&gt; so as not to &quot;break the contract&quot;. As per the API, the result returned from the &lt;code&gt;hashCode()&lt;/code&gt; method for two objects &lt;strong&gt;must&lt;/strong&gt; be the same if their &lt;code&gt;equals&lt;/code&gt; methods show that they are equivalent. The converse is &lt;em&gt;not&lt;/em&gt; necessarily true. &lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;With respect to the String class:&lt;/p&gt;\n\n&lt;p&gt;The equals() &lt;strong&gt;method&lt;/strong&gt; compares the &quot;value&quot; inside String instances (on the heap) irrespective if the two object references refer to the same String instance or not. If any two object references of type String refer to the same String instance then great! If the two object references refer to two different String instances .. it doesn&apos;t make a difference. Its the &quot;value&quot; (that is: the contents of the character array) inside each String instance that is being compared.&lt;/p&gt;\n\n&lt;p&gt;On the other hand, the &quot;==&quot; &lt;strong&gt;operator&lt;/strong&gt; compares the value of &lt;strong&gt;two object references&lt;/strong&gt; to see whether they refer to the same &lt;strong&gt;String instance&lt;/strong&gt;. If the value of both object references &quot;refer to&quot; the same String instance then the result of the boolean expression would be &quot;true&quot;..duh. If, on the other hand, the value of both object references &quot;refer to&quot; &lt;strong&gt;different String instances&lt;/strong&gt; (even though both String instances have identical &quot;values&quot;, that is, the contents of the character arrays of each String instance are the same) the result of the boolean expression would be &quot;false&quot;.&lt;/p&gt;\n\n&lt;p&gt;As with any explanation, let it sink in.&lt;/p&gt;\n\n&lt;p&gt;I hope this clears things up a bit.&lt;/p&gt;\n    ","\n&lt;p&gt;There are some small differences depending whether you are talking about &quot;primitives&quot; or &quot;Object Types&quot;; the same can be said if you are talking about &quot;static&quot; or &quot;non-static&quot; members; you can also mix all the above...&lt;/p&gt;\n\n&lt;p&gt;Here is an example (you can run it):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyEqualityTest&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( String args[] )&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;Test&quot;&lt;/span&gt; );\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;Test&quot;&lt;/span&gt; );\n\n        System.out.println( &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n1 - PRIMITIVES &quot;&lt;/span&gt;);\n        System.out.println( s1 == s2 ); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n        System.out.println( s1.equals( s2 )); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;();\n\n        System.out.println( &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n2 - OBJECT TYPES / STATIC VARIABLE&quot;&lt;/span&gt; );\n        System.out.println( a1 == a2 ); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n        System.out.println( a1.s == a2.s ); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n        System.out.println( a1.s.equals( a2.s ) ); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-type&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;();\n\n        System.out.println( &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n3 - OBJECT TYPES / NON-STATIC VARIABLE&quot;&lt;/span&gt; );\n        System.out.println( b1 == b2 ); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n        System.out.println( b1.getS() == b2.getS() ); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n        System.out.println( b1.getS().equals( b2.getS() ) ); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// static&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String s;\n    A()\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.s = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;aTest&quot;&lt;/span&gt; );\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String s;\n    B()\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.s = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;aTest&quot;&lt;/span&gt; );\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getS&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s;\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can compare the explanations for &quot;==&quot; (Equality Operator) and &quot;.equals(...)&quot; (method in the java.lang.Object class) through these links:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;==: &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op2.html&quot;&gt;http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op2.html&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;.equals(...): &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The difference between == and equals confused me for sometime until I decided to have a closer look at it.\nMany of them say that for comparing string you should use &lt;code&gt;equals&lt;/code&gt; and not &lt;code&gt;==&lt;/code&gt;. Hope in this answer I will be able to say the difference.&lt;/p&gt;\n\n&lt;p&gt;The best way to answer this question will be by asking a few questions to yourself. so let&apos;s start:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What is the output for the below program:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\nSystem.out.println(mango != mango2);\nSystem.out.println(mango == mango2);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;if you say, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I will say you are &lt;em&gt;right&lt;/em&gt; but &lt;strong&gt;why did you say that&lt;/strong&gt;?\nand If you say the output is,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I will say you are &lt;em&gt;wrong&lt;/em&gt; but I will still ask you, why you think that is right?&lt;/p&gt;\n\n&lt;p&gt;Ok, Let&apos;s try to answer this one:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What is the output for the below program:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;);\nSystem.out.println(mango != mango3);\nSystem.out.println(mango == mango3);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now If you say,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I will say you are &lt;em&gt;wrong&lt;/em&gt; but &lt;strong&gt;why is it wrong now&lt;/strong&gt;?\nthe correct output for this program is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please compare the above program and try to think about it.&lt;/p&gt;\n\n&lt;p&gt;Ok. Now this might help (please read this : &lt;a href=&quot;https://stackoverflow.com/questions/18396927/how-to-print-the-address-of-an-object-if-you-have-redefined-tostring-method&quot;&gt;print the address of object&lt;/a&gt; - not possible but still we can use it.)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;);\nSystem.out.println(mango != mango2);\nSystem.out.println(mango == mango2);\nSystem.out.println(mango3 != mango2);\nSystem.out.println(mango3 == mango2);\n&lt;span class=&quot;hljs-comment&quot;&gt;// mango2 = &quot;mang&quot;;&lt;/span&gt;\nSystem.out.println(mango+&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;+ mango2);\nSystem.out.println(mango != mango2);\nSystem.out.println(mango == mango2);\n\nSystem.out.println(System.identityHashCode(mango));\nSystem.out.println(System.identityHashCode(mango2));\nSystem.out.println(System.identityHashCode(mango3));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;can you just try to think about the output of the last three lines in the code above:\nfor me ideone printed this out (&lt;a href=&quot;https://ideone.com/JA6NgB&quot; rel=&quot;noreferrer&quot;&gt;you can check the code here&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\nmango mango\n&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;17225372&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;17225372&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5433634&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Oh! Now you see the &lt;strong&gt;identityHashCode(mango) is equal to identityHashCode(mango2) But it is not equal to identityHashCode(mango3)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Even though all the string variables - mango, mango2 and mango3 - have the &lt;strong&gt;same&lt;/strong&gt; value, which is &quot;mango&quot;, &lt;code&gt;identityHashCode()&lt;/code&gt; is still not the same for all.&lt;/p&gt;\n\n&lt;p&gt;Now try to uncomment this line &lt;code&gt;// mango2 = &quot;mang&quot;;&lt;/code&gt; and run it again this time you will see all three &lt;code&gt;identityHashCode()&lt;/code&gt; are different.\nHmm that is a helpful hint&lt;/p&gt;\n\n&lt;p&gt;we know that if &lt;code&gt;hashcode(x)=N&lt;/code&gt; and &lt;code&gt;hashcode(y)=N&lt;/code&gt; =&amp;gt; &lt;code&gt;x is equal to y&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I am not sure how java works internally but I assume this is what happened when I said:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango = &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;java created a string &lt;code&gt;&quot;mango&quot;&lt;/code&gt; which was pointed(referenced) by the variable &lt;code&gt;mango&lt;/code&gt; something like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango ----&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now in the next line when I said:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango2 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It actually reused the same string &lt;code&gt;&quot;mango&quot;&lt;/code&gt; which looks something like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango ----&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt; &amp;lt;---- mango2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both mango and mango2 pointing to the same reference\nNow when I said &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango3 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It actually created a completely new reference(string) for &quot;mango&quot;. which looks something like this,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango -----&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt; &amp;lt;------ mango2\n\nmango3 ------&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and that&apos;s why when I put out the values for &lt;code&gt;mango == mango2&lt;/code&gt;, it put out &lt;code&gt;true&lt;/code&gt;. and when I put out the value for &lt;code&gt;mango3 == mango2&lt;/code&gt;, it put out &lt;code&gt;false&lt;/code&gt; (even when the values were the same).&lt;/p&gt;\n\n&lt;p&gt;and when you uncommented the line &lt;code&gt;// mango2 = &quot;mang&quot;;&lt;/code&gt;\nIt actually created a string &quot;mang&quot; which turned our graph like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango ----&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;\nmango2 ----&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mang&quot;&lt;/span&gt;\nmango3 -----&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is why the identityHashCode is not the same for all.&lt;/p&gt;\n\n&lt;p&gt;Hope this helps you guys.\nActually, I wanted to generate a test case where == fails and equals() pass.\nPlease feel free to comment and let me know If I am wrong.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;The &lt;strong&gt;==&lt;/strong&gt; operator tests whether two variables have the &lt;strong&gt;same references\n  (aka pointer to a memory address)&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(foo==bar)\n&lt;span class=&quot;hljs-comment&quot;&gt;// False (The objects are not the same)&lt;/span&gt;\n\nbar = foo;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(foo==bar)\n&lt;span class=&quot;hljs-comment&quot;&gt;// True (Now the objects are the same)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Whereas the &lt;strong&gt;equals()&lt;/strong&gt; method tests whether two variables refer to objects\n  that have the &lt;strong&gt;same state (values)&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(foo.equals(bar))\n&lt;span class=&quot;hljs-comment&quot;&gt;// True (The objects are identical but not same)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Cheers :-)&lt;/p&gt;\n    ","\n&lt;p&gt;You will have to override the equals function (along with others) to use this with custom classes.&lt;/p&gt;\n\n&lt;p&gt;The equals method compares the objects.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;==&lt;/code&gt; binary operator compares memory addresses.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; is an &lt;em&gt;operator&lt;/em&gt; and &lt;code&gt;equals()&lt;/code&gt; is a &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Operators are generally used for &lt;em&gt;primitive&lt;/em&gt; type comparisons and thus &lt;code&gt;==&lt;/code&gt; is used for memory address comparison and &lt;code&gt;equals()&lt;/code&gt; method is used for comparing &lt;em&gt;objects&lt;/em&gt;. &lt;/p&gt;\n    ","\n&lt;p&gt;Both == and .equals() refers to the same object if you don&apos;t override .equals(). &lt;/p&gt;\n\n&lt;p&gt;Its your wish  what you want to do once you override .equals(). You can compare the invoking object&apos;s state with the passed in object&apos;s state or you can just call super.equals()&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;w1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sarat&quot;&lt;/span&gt;;\n &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;w2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sarat&quot;&lt;/span&gt;;\n &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;w3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sarat&quot;&lt;/span&gt;);\n\n System.out.println(w1.hashCode());   &lt;span class=&quot;hljs-comment&quot;&gt;//3254818&lt;/span&gt;\n System.out.println(w2.hashCode());   &lt;span class=&quot;hljs-comment&quot;&gt;//3254818&lt;/span&gt;\n System.out.println(w3.hashCode());   &lt;span class=&quot;hljs-comment&quot;&gt;//3254818&lt;/span&gt;\n\n System.out.println(System.identityHashCode(w1)); &lt;span class=&quot;hljs-comment&quot;&gt;//prints 705927765&lt;/span&gt;\n System.out.println(System.identityHashCode(w2)); &lt;span class=&quot;hljs-comment&quot;&gt;//prints 705927765&lt;/span&gt;\n System.out.println(System.identityHashCode(w3)); &lt;span class=&quot;hljs-comment&quot;&gt;//prints 366712642&lt;/span&gt;\n\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(w1==w2)   &lt;span class=&quot;hljs-comment&quot;&gt;//  (705927765==705927765)&lt;/span&gt;\n {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-comment&quot;&gt;//prints true&lt;/span&gt;\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(w2==w3)   &lt;span class=&quot;hljs-comment&quot;&gt;//  (705927765==366712642)&lt;/span&gt;\n {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-comment&quot;&gt;//prints false&lt;/span&gt;\n\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(w2.equals(w3))   &lt;span class=&quot;hljs-comment&quot;&gt;//  (Content of 705927765== Content of 366712642)&lt;/span&gt;\n {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-comment&quot;&gt;//prints true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just remember that &lt;code&gt;.equals(...)&lt;/code&gt; has to be implemented by the class you are trying to compare. Otherwise, there isn&apos;t much of a point; the version of the method for the Object class does the same thing as the comparison operation: &lt;a href=&quot;http://download.oracle.com/javase/1.4.2/docs/api/java/lang/Object.html#equals%28java.lang.Object%29&quot; rel=&quot;nofollow&quot;&gt;Object#equals&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The only time you really want to use the comparison operator for objects is wen you are comparing Enums. This is because there is only one instance of an Enum value at a time. For instance, given the enum&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FooEnum&lt;/span&gt; {A, B, C}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You will never have more than one instance of &lt;code&gt;A&lt;/code&gt; at a time, and the same for &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;. This means that you can actually write a method like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareFoos&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(FooEnum x, FooEnum y)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (x == y);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And you will have no problems whatsoever.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Here is a general thumb of rule for the difference between &lt;strong&gt;&lt;code&gt;relational operator ==&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;the method .equals()&lt;/code&gt;&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;object1 == object2&lt;/code&gt; compares if the objects referenced by object1 and object2 refer to t&lt;strong&gt;he same memory location in Heap&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;object1.equals(object2)&lt;/code&gt; compares &lt;strong&gt;the values of object1 and object2 regardless of where they are located in memory&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;This can be demonstrated well using String&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Scenario 1&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Conditionals&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n       System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is str1 == str2 ? &quot;&lt;/span&gt; + (str1 == str2 ));\n       System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is str1.equals(str2) ? &quot;&lt;/span&gt; + (str1.equals(str2 )));\n    }\n\n }\n\n\n\nThe result is\n      &lt;span class=&quot;hljs-type&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= str2 ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n      is str1.equals(str2) ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Scenario 2&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Conditionals&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;\n       System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is str1 == str2 ? &quot;&lt;/span&gt; + (str1 == str2 ));\n       System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is str1.equals(str2) ? &quot;&lt;/span&gt; + (str1.equals(str2 )));\n    }\n\n}\n\nThe result is \n  &lt;span class=&quot;hljs-type&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= str2 ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n  is str1.equals(str2) ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This string comparison could be used as a basis for comparing other types of object.&lt;/p&gt;\n&lt;p&gt;For instance if I have &lt;strong&gt;a Person class&lt;/strong&gt;, I need to define the &lt;strong&gt;criteria base on which I will compare  two persons&lt;/strong&gt;. Let&apos;s say this person class has &lt;strong&gt;instance variables of height and weight.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;So creating person objects &lt;code&gt;person1 and person2&lt;/code&gt; and for comparing these two using the &lt;code&gt;.equals()&lt;/code&gt; I need to override the &lt;strong&gt;equals method of the person class&lt;/strong&gt; to define based on which instance variables(heigh or weight) the comparison will be.&lt;/p&gt;\n&lt;p&gt;However, the &lt;code&gt;== operator will still return results based on the memory location of the two objects(person1 and person2)&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;For ease of generalizing this person object comparison, I have created the following test class. &lt;strong&gt;Experimenting on these concepts will reveal tons of facts&lt;/strong&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.tadtab.CS5044;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; height;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; weight;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; height;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; height)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.height = height;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; weight;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setWeight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; weight)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.weight = weight;\n}\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;prime&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; temp;\n    temp = Double.doubleToLongBits(height);\n    result = prime * result + (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) (temp ^ (temp &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * This method uses the height as a means of comparing person objects.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;NOTE:&lt;/span&gt; weight is not part of the comparison criteria\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == obj)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (getClass() != obj.getClass())\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Person) obj;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (Double.doubleToLongBits(height) != Double.doubleToLongBits(other.height))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    \n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n    person1.setHeight(&lt;span class=&quot;hljs-number&quot;&gt;5.50&lt;/span&gt;);\n    person1.setWeight(&lt;span class=&quot;hljs-number&quot;&gt;140.00&lt;/span&gt;);\n    \n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n    person2.setHeight(&lt;span class=&quot;hljs-number&quot;&gt;5.70&lt;/span&gt;);\n    person2.setWeight(&lt;span class=&quot;hljs-number&quot;&gt;160.00&lt;/span&gt;);\n    \n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n    person3 = person2;\n    \n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n    person4.setHeight(&lt;span class=&quot;hljs-number&quot;&gt;5.70&lt;/span&gt;);\n    \n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person5&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n    person5.setWeight(&lt;span class=&quot;hljs-number&quot;&gt;160.00&lt;/span&gt;);\n    \n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is person1 == person2 ? &quot;&lt;/span&gt; + (person1 == person2)); &lt;span class=&quot;hljs-comment&quot;&gt;// false;&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is person2 == person3 ? &quot;&lt;/span&gt; + (person2 == person3)); &lt;span class=&quot;hljs-comment&quot;&gt;// true &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//this is because perosn3 and person to refer to the one person object in memory. They are aliases;&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is person2.equals(person3) ? &quot;&lt;/span&gt; + (person2.equals(person3))); &lt;span class=&quot;hljs-comment&quot;&gt;// true;&lt;/span&gt;\n    \n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is person2.equals(person4) ? &quot;&lt;/span&gt; + (person2.equals(person4))); &lt;span class=&quot;hljs-comment&quot;&gt;// true;&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;// even if the person2 and person5 have the same weight, they are not equal.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// it is because their height is different&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is person2.equals(person4) ? &quot;&lt;/span&gt; + (person2.equals(person5))); &lt;span class=&quot;hljs-comment&quot;&gt;// false;&lt;/span&gt;\n}\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Result of this class execution is:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= person2 ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= person3 ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\nis person2.equals(person3) ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\nis person2.equals(person4) ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\nis person2.equals(person4) ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When you evaluate the code, it is very clear that (==) compares according to memory address, while equals(Object o)  compares hashCode() of the instances. \nThat&apos;s why it is said do not break the contract between equals() and  hashCode() if you do not face surprises later. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ali&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Veli&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ali&quot;&lt;/span&gt;);\n\n    System.out.println(s1.hashCode());\n    System.out.println(s2.hashCode());\n    System.out.println(s3.hashCode());\n\n\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(s1==s2):&quot;&lt;/span&gt; + (s1 == s2));\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(s1==s3):&quot;&lt;/span&gt; + (s1 == s3));\n\n\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s1.equals(s2):&quot;&lt;/span&gt; + (s1.equals(s2)));\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s1.equal(s3):&quot;&lt;/span&gt; + (s1.equals(s3)));\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/*Output \n    96670     \n    3615852\n    96670\n    (s1==s2):false\n    (s1==s3):false\n    s1.equals(s2):false\n    s1.equal(s3):true\n    */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The major difference between == and equals() is&lt;/p&gt;\n\n&lt;p&gt;1) == is used to compare primitives.&lt;/p&gt;\n\n&lt;p&gt;For example : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ravi&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ravi&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ravi&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Prakash&quot;&lt;/span&gt;);\n\n        System.out.println(string1 == string2); &lt;span class=&quot;hljs-comment&quot;&gt;// true because same reference in string pool&lt;/span&gt;\n        System.out.println(string1 == string3); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;2) equals() is used to compare objects.\nFor example :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;        System.out.println(string1.equals(string2)); &lt;span class=&quot;hljs-comment&quot;&gt;// true equals() comparison of values in the objects&lt;/span&gt;\n        System.out.println(string1.equals(string3)); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n        System.out.println(string1.equals(string4)); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Also note that &lt;code&gt;.equals()&lt;/code&gt; normally contains &lt;code&gt;==&lt;/code&gt; for testing as this is the first thing you would wish to test for if you wanted to test if two objects are equal. &lt;/p&gt;\n\n&lt;p&gt;And &lt;code&gt;==&lt;/code&gt; actually does look at values for primitive types, for objects it checks the reference.&lt;/p&gt;\n    ","\n&lt;p&gt;== operator always reference is compared. But in case of &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;equals() method&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;it&apos;s depends&apos;s on implementation if we are overridden equals method than it compares object on basic of implementation given in overridden method. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;\n {\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id;\n   String str;\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id,String str)&lt;/span&gt;\n     {\n       &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id=id;\n       &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.str=str;\n     }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String arg[])&lt;/span&gt;\n    {\n      A obj=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;sam&quot;&lt;/span&gt;);\n      A obj1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;sam&quot;&lt;/span&gt;);\n\n      obj.equals(obj1)&lt;span class=&quot;hljs-comment&quot;&gt;//fasle&lt;/span&gt;\n      obj==obj1 &lt;span class=&quot;hljs-comment&quot;&gt;// fasle&lt;/span&gt;\n    }\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in above code both obj and obj1 object contains same data but reference is not same so equals return false and == also.\nbut if we overridden equals method than&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;\n {\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id;\n   String str;\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id,String str)&lt;/span&gt;\n     {\n       &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id=id;\n       &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.str=str;\n     }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt;\n    {\n       A a1=(A)obj;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id==a1.id;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String arg[])&lt;/span&gt;\n    {\n      A obj=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;sam&quot;&lt;/span&gt;);\n      A obj1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;sam&quot;&lt;/span&gt;);\n\n      obj.equals(obj1)&lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n      obj==obj1 &lt;span class=&quot;hljs-comment&quot;&gt;// fasle&lt;/span&gt;\n    }\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;know check out it will return true and false for same case only we overridden &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;equals method .&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;it compare object on basic of content(id) of object&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;but ==&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;still compare references of object.&lt;/p&gt;\n    ","\n&lt;p&gt;Example 1 -&lt;/p&gt;\n&lt;p&gt;Both == and .equals methods are there for reference comparison only. It means whether both objects are referring to same object or not.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/tip/src/share/classes/java/lang/Object.java#l149&quot; rel=&quot;nofollow noreferrer&quot;&gt;Object class equals method implementation&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HelloWorld&lt;/span&gt;{\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String []args)&lt;/span&gt;{\n       &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ob1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;();\n       &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ob2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ob1;\n       System.out.println(ob1 == ob2); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n       System.out.println(ob1.equals(ob2)); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n     }    \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Nbha6.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Nbha6.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Example 2 -&lt;/p&gt;\n&lt;p&gt;But if we wants to compare objects content using equals method then class has to override object&apos;s class equals() method and provide implementation for content comparison. Here, String class has overrided equals method for content comparison. All wrapper classes have overrided equals method for content comparison.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://hg.openjdk.java.net/jdk7u/jdk7u6/jdk/file/8c2c5d63a17e/src/share/classes/java/lang/String.java#l974&quot; rel=&quot;nofollow noreferrer&quot;&gt;String class equals method implementation&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HelloWorld&lt;/span&gt;{\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String []args)&lt;/span&gt;{\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ob1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;);\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ob2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;);\n       System.out.println(ob1 == ob2); &lt;span class=&quot;hljs-comment&quot;&gt;// false (Both references are referring two different objects)&lt;/span&gt;\n       System.out.println(ob1.equals(ob2)); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n     }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/HPVXk.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/HPVXk.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Example 3 -&lt;/p&gt;\n&lt;p&gt;In case of String, there is one more usecase. Here when we assign any string to  String reference then string constant is created inside &lt;strong&gt;String constant pool&lt;/strong&gt;. If we assign same string to new String reference then no new string constant is created rather it will refer to existing string constant.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HelloWorld&lt;/span&gt;{\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String []args)&lt;/span&gt;{\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ob1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;;\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ob2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;;\n       System.out.println(ob1 == ob2); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n       System.out.println(ob1.equals(ob2)); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n     }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/wIglp.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/wIglp.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java API equals() method contract&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; can be used in many object types but you can use &lt;code&gt;Object.equals&lt;/code&gt; for any type , especially Strings and Google Map Markers.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringPool&lt;/span&gt; {\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cat&quot;&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// will create reference in string pool of heap memory&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cat&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cat&quot;&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//will create a object in heap memory&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Using == will give us true because same reference in string pool&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s1 == s2) {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Using == with reference and Object will give us False&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s1 == s3) {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Using .equals method which refers to value&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s1.equals(s3)) {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;False&quot;&lt;/span&gt;);\n    }\n\n    }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;----Output-----\n   true\n   false\n   true&lt;/p&gt;\n    ","\n&lt;p&gt;It may be worth adding that for wrapper objects for primitive types - i.e. Int, Long, Double - == will return true if the two values are equal.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10L&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10L&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a == b) {\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Wrapped primitives behave like values&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To contrast, putting the above two Longs into two separate ArrayLists, equals sees them as the same, but == doesn&apos;t.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;ArrayList&amp;lt;Long&amp;gt; c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\nArrayList&amp;lt;Long&amp;gt; d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n\nc.add(a);\nd.add(b);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c == d) System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;No way!&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c.equals(d)) System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Yes, this is true.&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;The &lt;a href=&quot;https://stackoverflow.com/questions/2486191/what-is-the-java-string-pool-and-how-is-s-different-from-new-strings&quot;&gt;String pool&lt;/a&gt; (aka &lt;a href=&quot;https://stackoverflow.com/questions/10578984/what-is-string-interning&quot;&gt;interning&lt;/a&gt;) and &lt;a href=&quot;https://stackoverflow.com/questions/20877086/why-do-comparisons-with-integer-valueofstring-give-different-results-for-12&quot;&gt;Integer pool&lt;/a&gt;&lt;/strong&gt; blur the difference further, and may allow you to use &lt;code&gt;==&lt;/code&gt; for objects in some cases instead of &lt;code&gt;.equals&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;This can give you greater performance (?), at the cost of greater complexity.&lt;/p&gt;\n\n&lt;p&gt;E.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;ab&quot;&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; i;\n&lt;span class=&quot;hljs-type&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= j;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Complexity tradeoff: the following may surprise you:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;) != &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; i != j;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I advise you to stay away from such micro-optimization, and &lt;em&gt;always&lt;/em&gt; use &lt;code&gt;.equals&lt;/code&gt; for objects, and &lt;code&gt;==&lt;/code&gt; for primitives:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;)).equals(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; i.equals(j);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In short, the answer is &quot;Yes&quot;.&lt;/p&gt;\n\n&lt;p&gt;In Java, the &lt;code&gt;==&lt;/code&gt; operator compares the two objects to see if they point to the same memory location; while the &lt;code&gt;.equals()&lt;/code&gt; method actually compares the two objects to see if they have the same object value.&lt;/p&gt;\n    ","\n&lt;p&gt;It is the difference between &lt;em&gt;identity&lt;/em&gt; and &lt;em&gt;equivalence&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;a == b&lt;/code&gt; means that a and b are &lt;em&gt;identical&lt;/em&gt;, that is, they are symbols for very same object in memory.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;a.equals( b )&lt;/code&gt; means that they are &lt;em&gt;equivalent&lt;/em&gt;, that they are symbols for objects that in some sense have the same value -- although those objects may occupy different places in memory.&lt;/p&gt;\n\n&lt;p&gt;Note that with equivalence, the question of how to evaluate and compare objects comes into play -- complex objects may be regarded as equivalent for practical purposes even though some of their contents differ.  With identity, there is no such question.&lt;/p&gt;\n    ","\n&lt;p&gt;Since Java doesnt support operator overloading, &lt;code&gt;==&lt;/code&gt; behaves identical\nfor every object but &lt;code&gt;equals()&lt;/code&gt; is method, which can be overridden in\nJava and logic to compare objects can be changed based upon business\nrules.&lt;/p&gt;\n&lt;p&gt;Main difference between &lt;code&gt;==&lt;/code&gt; and equals in Java is that &lt;code&gt;&quot;==&quot;&lt;/code&gt; is used to\ncompare primitives while &lt;code&gt;equals()&lt;/code&gt; method is recommended to check\nequality of objects.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;String comparison is a common scenario of using both &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; method.&lt;/strong&gt; Since java.lang.String class override equals method, It\nreturn true if two String object contains same content but &lt;code&gt;==&lt;/code&gt; will\nonly return true if two references are pointing to same object.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Here is an example&lt;/strong&gt; of comparing two Strings in Java for equality using &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; method which will clear some doubts:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TEstT&lt;/span&gt;{\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n            \n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;text1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;apple&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;text2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;apple&quot;&lt;/span&gt;);\n          \n    &lt;span class=&quot;hljs-comment&quot;&gt;//since two strings are different object result should be false&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; text1 == text2;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Comparing two strings with == operator: &quot;&lt;/span&gt; + result);\n          \n    &lt;span class=&quot;hljs-comment&quot;&gt;//since strings contains same content , equals() should return true&lt;/span&gt;\n    result = text1.equals(text2);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Comparing two Strings with same content using equals method: &quot;&lt;/span&gt; + result);\n          \n    text2 = text1;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//since both text2 and text1d reference variable are pointing to same object&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//&quot;==&quot; should return true&lt;/span&gt;\n    result = (text1 == text2);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Comparing two reference pointing to same String with == operator: &quot;&lt;/span&gt; + result);\n\n    }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;equals() method mainly compares the original content of the object.&lt;/p&gt;\n&lt;p&gt;If we Write&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;);\n\n    System.out.println(s1.equals(s2));\n    System.out.println(s2.equals(s3));\n    System.out.println(s3.equals(s4));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output will be&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; \n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; \n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because equals() method compare the content of the object.\nin first System.out.println() the content of s1 and s2 is same that&apos;s why it print true.\nAnd it is same for others two System.out.println() is true.&lt;/p&gt;\n&lt;p&gt;Again ,&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;);\n    \n    System.out.println(s1 == s2);\n    System.out.println(s2 == s3);\n    System.out.println(s3 == s4);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output will be&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; \n&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because == operator mainly compare the references of the object not the value.\nIn first System.out.println(), the references of s1 and s2 is same thats why it returns true.&lt;/p&gt;\n&lt;p&gt;In second System.out.println(), s3 object is created , thats why another reference of s3 will create , and the references of s2 and s3 will difference, for this reason it return &quot;false&quot;.&lt;/p&gt;\n&lt;p&gt;Third System.out.println(), follow the rules of second System.out.println(), that&apos;s why it will return &quot;false&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;Basically, &lt;code&gt;==&lt;/code&gt; compares if two objects have the same reference on the heap, so unless two references are linked to the same object, this comparison will be false.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;equals()&lt;/code&gt; is a method inherited from &lt;strong&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/strong&gt; class. This method by default compares if two objects have the same referece. It means:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;object1.equals(object2)&lt;/code&gt; &lt;strong&gt;&amp;lt;=&amp;gt;&lt;/strong&gt; &lt;code&gt;object1 == object2&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;However, if you want to establish equality between two objects of the same class you should override this method. It is also very important to override the method &lt;code&gt;hashCode()&lt;/code&gt; if you have overriden &lt;code&gt;equals()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Implement &lt;code&gt;hashCode()&lt;/code&gt; when establishing equality is part of the Java Object Contract. If you are working with collections, and you haven&apos;t implemented &lt;code&gt;hashCode()&lt;/code&gt;, Strange Bad Things could happen:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;HashMap&amp;lt;Cat, String&amp;gt; cats = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Cat&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;molly&quot;&lt;/span&gt;);\ncats.put(cat, &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is a cool cat&quot;&lt;/span&gt;);\nSystem.out.println(cats.get(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Cat&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;molly&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;null&lt;/code&gt; will be printed after executing the previous code if you haven&apos;t implemented &lt;code&gt;hashCode()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In simple words, &lt;code&gt;==&lt;/code&gt; checks if both objects point to the same memory location whereas &lt;code&gt;.equals()&lt;/code&gt; evaluates to the comparison of values in the objects.&lt;/p&gt;\n    "],"id":355,"title":"What is the difference between == and equals() in Java?","content":"\n                \n&lt;p&gt;I wanted to clarify if I understand this correctly:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;==&lt;/code&gt; is a reference comparison, i.e. both objects point to the same memory location&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;.equals()&lt;/code&gt; evaluates to the comparison of values in the objects&lt;/li&gt;\n&lt;/ul&gt;\n    ","slug":"what-is-the-difference-between-and-equals()-in-java-1657387729654","postType":"QUESTION","createdAt":"2022-07-09T17:28:49.000Z","updatedAt":"2022-07-09T17:28:49.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Why aren't variable-length arrays part of the C++ standard?","slug":"why-aren't-variable-length-arrays-part-of-the-c++-standard-1657384712975"},{"title":"getContactsFromFirebase() method return an empty list","slug":"getcontactsfromfirebase()-method-return-an-empty-list-1657388433928"},{"title":"How to deal with floating point number precision in JavaScript?","slug":"how-to-deal-with-floating-point-number-precision-in-javascript-1657387293762"},{"title":"How to filter object array based on attributes?","slug":"how-to-filter-object-array-based-on-attributes-1657388211247"},{"title":"How do I make a list of data frames?","slug":"how-do-i-make-a-list-of-data-frames-1657385480437"},{"title":"How should a model be structured in MVC? [closed]","slug":"how-should-a-model-be-structured-in-mvc-closed-1657388394807"},{"title":"PHP parse/syntax errors; and how to solve them","slug":"php-parsesyntax-errors-and-how-to-solve-them-1657384264713"},{"title":"Strange result when removing item from a list while iterating over it [duplicate]","slug":"strange-result-when-removing-item-from-a-list-while-iterating-over-it-duplicate-1657387735759"},{"title":"How do I set a variable to the output of a command in Bash?","slug":"how-do-i-set-a-variable-to-the-output-of-a-command-in-bash-1657387250909"},{"title":"Safely turning a JSON string into an object","slug":"safely-turning-a-json-string-into-an-object-1657388194824"},{"title":"What should main() return in C and C++?","slug":"what-should-main()-return-in-c-and-c++-1657384745630"},{"title":"How to serve static files in Flask","slug":"how-to-serve-static-files-in-flask-1657387862496"},{"title":"How does the Java 'for each' loop work?","slug":"how-does-the-java-'for-each'-loop-work-1657388423749"},{"title":"How do I copy to the clipboard in JavaScript?","slug":"how-do-i-copy-to-the-clipboard-in-javascript-1657385501223"},{"title":"How can I remove a specific item from an array?","slug":"how-can-i-remove-a-specific-item-from-an-array-1657387552077"},{"title":"Why do I get a segmentation fault when writing to a \"char *s\" initialized with a string literal, but not \"char s[]\"?","slug":"why-do-i-get-a-segmentation-fault-when-writing-to-a-\"char-*s\"-initialized-with-a-string-literal-but-not-\"char-s\"-1657385511046"},{"title":"Is there a CSS parent selector?","slug":"is-there-a-css-parent-selector-1657384430692"},{"title":"What are the rules for JavaScript's automatic semicolon insertion (ASI)?","slug":"what-are-the-rules-for-javascript's-automatic-semicolon-insertion-(asi)-1657387472789"},{"title":"What is the explicit promise construction antipattern and how do I avoid it?","slug":"what-is-the-explicit-promise-construction-antipattern-and-how-do-i-avoid-it-1657384436212"},{"title":"How can I iterate through two lists in parallel?","slug":"how-can-i-iterate-through-two-lists-in-parallel-1657387278930"}]},"__N_SSG":true}