{"pageProps":{"data":{"answer":["\n&lt;p&gt;Since ECMA-/Javascript is all about &lt;code&gt;Objects&lt;/code&gt; and &lt;code&gt;Contexts&lt;/code&gt; (which, are also somekind of Object), every variable is stored in a such called &lt;strong&gt;Variable-&lt;/strong&gt; (or in case of a Function, &lt;strong&gt;Activation Object&lt;/strong&gt;).&lt;/p&gt;\n\n&lt;p&gt;So if you create variables like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n    c = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the &lt;strong&gt;Global scope&lt;/strong&gt; (= NO function context), you implicitly write those variables into the &lt;strong&gt;Global object&lt;/strong&gt; (= &lt;code&gt;window&lt;/code&gt; in a browser).&lt;/p&gt;\n\n&lt;p&gt;Those can get accessed by using the &quot;dot&quot; or &quot;bracket&quot; notation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This only works for the global object in this particular instance, because the &lt;strong&gt;Variable Object&lt;/strong&gt; of the &lt;strong&gt;Global Object&lt;/strong&gt; is the &lt;code&gt;window&lt;/code&gt; object itself. Within the Context of a function, you don&apos;t have direct access to the &lt;strong&gt;Activation Object&lt;/strong&gt;. For instance:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// === undefined&lt;/span&gt;\n   &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(name);\n   name = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// === 1&lt;/span&gt;\n   &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(name);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;new&lt;/code&gt; creates a new instance of a self-defined object (context). Without &lt;code&gt;new&lt;/code&gt; the scope of the function would be also &lt;code&gt;global&lt;/code&gt; (=window). This example would alert &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; respectively. If we would replace &lt;code&gt;this.a = 1; this.b = 2&lt;/code&gt; with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both alert outputs would be undefined. In that scenario, the variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; would get stored in the Activation Object from &lt;code&gt;foobar&lt;/code&gt;, which we cannot access (of course we could access those directly by calling &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; is one option.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(name)); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Note that using the &lt;code&gt;eval()&lt;/code&gt; function is not recommended if you don&apos;t know what you are doing, since it brings multiple security issues. Use something else unless absolutely necessary. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot; rel=&quot;noreferrer&quot;&gt;the MDN page for eval&lt;/a&gt; for more info.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use the window object to get at it . &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;myVar&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;window&lt;/code&gt; has a reference to all global variables and global functions you are using. &lt;/p&gt;\n    ","\n&lt;p&gt;Just don&apos;t know what a bad answer gets so many votes. It&apos;s quite easy answer but you make it complex.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// If you want to get article_count&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// var article_count = 1000;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; type = &lt;span class=&quot;hljs-string&quot;&gt;&apos;article&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[type+&lt;span class=&quot;hljs-string&quot;&gt;&apos;_count&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// in a function we use &quot;this&quot;;&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(article_count);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is an example : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;+i] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello &quot;&lt;/span&gt; + i;\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(p0); &lt;span class=&quot;hljs-comment&quot;&gt;// hello 0&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(p1); &lt;span class=&quot;hljs-comment&quot;&gt;// hello 1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(p2); &lt;span class=&quot;hljs-comment&quot;&gt;// hello 2&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(p3); &lt;span class=&quot;hljs-comment&quot;&gt;// hello 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another example :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myVariable = &lt;span class=&quot;hljs-string&quot;&gt;&apos;coco&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[myVariable] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;riko&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(coco); &lt;span class=&quot;hljs-comment&quot;&gt;// display : riko&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, the value &quot;&lt;em&gt;coco&lt;/em&gt;&quot; of &lt;strong&gt;myVariable&lt;/strong&gt; becomes a variable &lt;strong&gt;coco&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Because all the variables in the global scope are properties of the Window object.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = &lt;span class=&quot;hljs-string&quot;&gt;&apos;varname&apos;&lt;/span&gt;;\nstr = a+&lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(str)\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(varname);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Try this...&lt;/p&gt;\n    ","\n&lt;p&gt;In Javascript you can use the fact that all properties are key value pairs. jAndy already mentioned this but I don&apos;t think his answer show how it can be exploited.&lt;/p&gt;\n\n&lt;p&gt;Usually you are not trying to create a variable to hold a variable name but are trying to generate variable names and then use them. PHP does it with &lt;code&gt;$$var&lt;/code&gt; notation but Javascript doesn&apos;t need to because property keys are interchangeable with array keys.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mine = {};\nmine[id] = &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(mine.&lt;span class=&quot;hljs-property&quot;&gt;abc&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;gives 123. Usually you want to construct the variable which is why there is the indirection so you can also do it the other way around.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mine = {};\nmine.&lt;span class=&quot;hljs-property&quot;&gt;abc&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(mine[&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot;bc&quot;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you don&apos;t want to use a global object like window or global (node), you can try something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {};\nobj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;whatever&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;There\\&apos;s no need to store even more stuff in a global object.&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;whatever&apos;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;2019 &lt;/p&gt;\n\n&lt;h3&gt;TL;DR&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;eval&lt;/code&gt; operator can run string expression in the context it called and return variables from that context; &lt;/li&gt;\n&lt;li&gt;&lt;code&gt;literal object&lt;/code&gt; theoretically can do that by write:&lt;code&gt;{[varName]}&lt;/code&gt;, but it blocked by definition. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So I come across this question and everyone here just play around without bringing a real solution. but @Axel Heider has a good approaching.&lt;/p&gt;\n\n&lt;p&gt;The solution is &lt;code&gt;eval&lt;/code&gt;.\nalmost most forgotten operator. ( think most one is &lt;code&gt;with()&lt;/code&gt; ) &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; operator can dynamically run expression in the context it called. and return the result of that expression. we can use that to dynamically return a  variable&apos;s value in function&apos;s context. &lt;/p&gt;\n\n&lt;p&gt;example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;exmaple1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(name)\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;example1&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// return 1&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;example2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;option&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, defaultValue = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(option){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;: name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;defaultValue&apos;&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt; (name);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;example2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return 1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;example2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return 2&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;example2&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// return 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note that I always write explicitly the expression &lt;code&gt;eval&lt;/code&gt; will run.\nTo avoid unnecessary surprises in the code. &lt;code&gt;eval&lt;/code&gt; is very strong&lt;/strong&gt;\nBut I&apos;m sure you know that already&lt;/p&gt;\n\n&lt;p&gt;BTW, if it was legal we could use &lt;code&gt;literal object&lt;/code&gt; to capture the variable name and value, but we cant combine computed property names and property value shorthand, sadly, is invalid&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;functopn &lt;span class=&quot;hljs-title function_&quot;&gt;example&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; varName &lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; var1 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, var2 =&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; capture = {[varName]}\n\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;example&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;var1&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//trow &apos;Uncaught SyntaxError: Unexpected token }`&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I needed to draw multiple FormData on the fly and object way worked well&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; forms = {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then in my loops whereever i needed to create a form data i used&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;forms[&lt;span class=&quot;hljs-string&quot;&gt;&quot;formdata&quot;&lt;/span&gt;+counter]=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;();\nforms[&lt;span class=&quot;hljs-string&quot;&gt;&quot;formdata&quot;&lt;/span&gt;+counter].&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(var_name, var_value);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is an alternative for those who need to export a dynamically named variable&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; {\n  [someVariable]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;some value&apos;&lt;/span&gt;,\n  [anotherVariable]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;another value&apos;&lt;/span&gt;,\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// then.... import from another file like this:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; vars &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;./some-file&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another alternative is to simply create an object whose keys are named dynamically&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; vars = { [someVariable]: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, [otherVariable]: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// consume it like this&lt;/span&gt;\nvars[someVariable];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;use Object is great too.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b=&lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;:a,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:b}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(temp[&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;],temp[&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Although this have an accepted answer I would like to add an observation: &lt;/p&gt;\n\n&lt;p&gt;In ES6 using &lt;code&gt;let&lt;/code&gt; &lt;strong&gt;doesn&apos;t work&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*this is NOT working*/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; t = &lt;span class=&quot;hljs-string&quot;&gt;&quot;skyBlue&quot;&lt;/span&gt;,\n    m = &lt;span class=&quot;hljs-string&quot;&gt;&quot;gold&quot;&lt;/span&gt;,\n    b = &lt;span class=&quot;hljs-string&quot;&gt;&quot;tomato&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; color = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(color);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;However using &lt;code&gt;var&lt;/code&gt; &lt;strong&gt;works&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*this IS working*/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t = &lt;span class=&quot;hljs-string&quot;&gt;&quot;skyBlue&quot;&lt;/span&gt;,\n    m = &lt;span class=&quot;hljs-string&quot;&gt;&quot;gold&quot;&lt;/span&gt;,\n    b = &lt;span class=&quot;hljs-string&quot;&gt;&quot;tomato&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; color = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(color);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;I hope this may be useful to some.&lt;/p&gt;\n    ","\n&lt;p&gt;This will do exactly what you done in php:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ccc = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[name] ); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;what they mean is no, you can&apos;t.\nthere is no way to get it done.\nso it was possible you could do something like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;){\n&lt;span class=&quot;hljs-comment&quot;&gt;// where obj is an object and const is a variable name&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;const&lt;/span&gt; () {}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myProperty&lt;/span&gt; = property_value;\n&lt;span class=&quot;hljs-comment&quot;&gt;// .. more prototype&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;const&lt;/span&gt;();\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;having a create function just like the one implemented in ECMAScript 5.&lt;/p&gt;\n    ","\n&lt;p&gt;eval() did not work in my tests. But adding new JavaScript code to the DOM tree is possible. So here is a function that adds a new variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createVariable&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;varName,varContent&lt;/span&gt;)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; scriptStr = &lt;span class=&quot;hljs-string&quot;&gt;&quot;var &quot;&lt;/span&gt;+varName+&lt;span class=&quot;hljs-string&quot;&gt;&quot;= \\&quot;&quot;&lt;/span&gt;+varContent+&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\&quot;&quot;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; node_scriptCode = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createTextNode&lt;/span&gt;( scriptStr )\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; node_script = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;script&quot;&lt;/span&gt;);\n  node_script.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;\n  node_script.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(node_scriptCode);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; node_head = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByTagName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;head&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n  node_head.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(node_script);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;createVariable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dynamicVar&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;some content&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(dynamicVar)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It is always better to use create a namespace and declare a variable in it instead of adding it to the global object. We can also create a function to get and set the value&lt;/p&gt;\n&lt;p&gt;See the below code snippet:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//creating a namespace in which all the variables will be defined.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myObjects={};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//function that will set the name property in the myObjects namespace&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;val&lt;/span&gt;){\n  myObjects.&lt;span class=&quot;hljs-property&quot;&gt;Name&lt;/span&gt;=val;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//function that will return the name property in the myObjects namespace&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myObjects.&lt;span class=&quot;hljs-property&quot;&gt;Name&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//now we can use it like:&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kevin&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = x;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(y)  &lt;span class=&quot;hljs-comment&quot;&gt;//&quot;kevin&quot;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; z = &lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(z); &lt;span class=&quot;hljs-comment&quot;&gt;//&quot;y&quot;&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(z)); &lt;span class=&quot;hljs-comment&quot;&gt;//&quot;kevin&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In this similar way, we can declare and use multiple variables. Although this will increase the line of code but the code will be more robust and less error-prone.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Does this answer your question? &lt;a href=&quot;https://stackoverflow.com/questions/5187530/variable-variables-in-javascript&quot;&gt;&quot;Variable&quot; variables in Javascript?&lt;/a&gt;. The accepted answer there is better than the one here because it shows how to do it, but also &lt;i&gt;correctly warns that there&apos;s almost always a better way to do whatever it is you want to do&lt;/i&gt;. See &lt;a href=&quot;https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem&quot;&gt;XY problem&lt;/a&gt; on meta.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6243352/ggorlen&quot; title=&quot;34,352 reputation&quot; class=&quot;comment-user&quot;&gt;ggorlen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment104655408_5117127&quot;&gt;&lt;span title=&quot;2019-12-06 20:37:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 6, 2019 at 20:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Another cool thing is that in this way you can add callback (start/end) for any global level function.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/339872/antitoxic&quot; title=&quot;3,696 reputation&quot; class=&quot;comment-user&quot;&gt;antitoxic&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15746348_5117172&quot;&gt;&lt;span title=&quot;2012-08-07 07:39:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 7, 2012 at 7:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;But what if my dynamic variable is local in a function? for example:  function boink() {   var a = 1;   // this will not work   var dynamic = this[&apos;a&apos;];   // this also wont work   var dynamic = [&apos;a&apos;]; }&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1083572/kokodoko&quot; title=&quot;23,150 reputation&quot; class=&quot;comment-user&quot;&gt;Kokodoko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29148115_5117172&quot;&gt;&lt;span title=&quot;2013-10-28 11:03:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 28, 2013 at 11:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Kokodokobecause &lt;i&gt;this&lt;/i&gt; isn&apos;t &quot;context&quot; or a reference to a function&apos;s execution context (there is no way to reference an execution context, it&apos;s forbidden by the ECMA-262). &lt;i&gt;this&lt;/i&gt; is set by how a function is called (or by &lt;i&gt;bind&lt;/i&gt;), it&apos;s just an Object that has nothing to do with the execution context in which it&apos;s accessible.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/257182/robg&quot; title=&quot;135,390 reputation&quot; class=&quot;comment-user&quot;&gt;RobG&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48514839_5117172&quot;&gt;&lt;span title=&quot;2015-05-13 02:55:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 13, 2015 at 2:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you need to access nested properties check out &lt;a href=&quot;http://stackoverflow.com/questions/4244896/dynamically-access-object-property-using-variable/30974910#30974910&quot; title=&quot;dynamically access object property using variable&quot;&gt;stackoverflow.com/questions/4244896/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2188869/mr-br&quot; title=&quot;3,585 reputation&quot; class=&quot;comment-user&quot;&gt;Mr Br&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49980902_5117172&quot;&gt;&lt;span title=&quot;2015-06-22 08:12:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 22, 2015 at 8:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;pointed me in the right direction with the bracket notation. Was stuck thinking dot notation only.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3093731/andrew&quot; title=&quot;16,451 reputation&quot; class=&quot;comment-user&quot;&gt;Andrew&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment72264601_5117172&quot;&gt;&lt;span title=&quot;2017-03-02 20:29:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 2, 2017 at 20:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;No it shouldn&apos;t as eval is evil. Never use eval!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1760670/easybb&quot; title=&quot;5,412 reputation&quot; class=&quot;comment-user&quot;&gt;EasyBB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31941309_5117162&quot;&gt;&lt;span title=&quot;2014-01-18 21:18:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 18, 2014 at 21:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@EasyBB - if you&apos;re going to say never to use something, I&apos;t helpful to explain why. I have a situation in which I can&apos;t think of any other way to accomplish what I&apos;m doing other than eval()&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/545963/rampant-creative-group&quot; title=&quot;1,008 reputation&quot; class=&quot;comment-user&quot;&gt;Rampant Creative Group&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34466566_5117162&quot;&gt;&lt;span title=&quot;2014-03-25 10:54:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 25, 2014 at 10:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Eval poses a risk for attacks on end users and we&apos;ll it&apos;s not technically evil rather misunderstood and misused in a lost of cases. I&apos;ve seen php responses which hold literal vars in it then use eval to run it. Though this shouldn&apos;t be used in this case as there are better methods. This question at hand eval should not be used at all as there are better methods overall and I&apos;m sure a lot of us know this.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1760670/easybb&quot; title=&quot;5,412 reputation&quot; class=&quot;comment-user&quot;&gt;EasyBB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34473017_5117162&quot;&gt;&lt;span title=&quot;2014-03-25 13:26:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 25, 2014 at 13:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Via &lt;a href=&quot;https://javascriptweblog.wordpress.com/2010/04/19/how-evil-is-eval/&quot; rel=&quot;nofollow noreferrer&quot;&gt;javascriptweblog.wordpress.com/2010/04/19/how-evil-is-eval&lt;/a&gt; ---  &quot;Lets consider the arguments most frequently leveled against using eval: 1) It requires a compile and is therefore slow 2) What if a malicious script found its way into the eval argument? 3) It looks ugly 4) It inherits the execution context and this binding of the scope in which its invoked&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3287927/mattlummus&quot; title=&quot;526 reputation&quot; class=&quot;comment-user&quot;&gt;mattLummus&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48541405_5117162&quot;&gt;&lt;span title=&quot;2015-05-13 15:07:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 13, 2015 at 15:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Here is how to create dynamic variables using eval: &lt;a href=&quot;http://stackoverflow.com/a/13291766/5528600&quot;&gt;stackoverflow.com/a/13291766/5528600&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5528600/am2124429&quot; title=&quot;345 reputation&quot; class=&quot;comment-user&quot;&gt;am2124429&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59901721_5117162&quot;&gt;&lt;span title=&quot;2016-03-21 12:54:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 21, 2016 at 12:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;And needless to say, this one is safer than eval().&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/419542/cray&quot; title=&quot;2,276 reputation&quot; class=&quot;comment-user&quot;&gt;Cray&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment5738151_5117153&quot;&gt;&lt;span title=&quot;2011-02-25 12:23:37Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 25, 2011 at 12:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;the &lt;code&gt;window&lt;/code&gt; is look like &lt;code&gt;state&lt;/code&gt;. that realy helpfull.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6396981/binpy&quot; title=&quot;3,624 reputation&quot; class=&quot;comment-user&quot;&gt;binpy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment112608265_5117153&quot;&gt;&lt;span title=&quot;2020-09-01 02:48:37Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 1, 2020 at 2:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;But how about when I want to use a local varaible?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4763511/bu-saeed&quot; title=&quot;943 reputation&quot; class=&quot;comment-user&quot;&gt;Bu Saeed&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127032551_5117153&quot;&gt;&lt;span title=&quot;2022-04-15 19:20:18Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 15 at 19:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@BuSaeed Not sure I understand, if the variable is already local scope, can&apos;t you just refer it to it by name? You should probably ask a new question as this is an old question with a different meaning.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/295508/johnp&quot; title=&quot;48,661 reputation&quot; class=&quot;comment-user&quot;&gt;JohnP&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127042946_5117153&quot;&gt;&lt;span title=&quot;2022-04-16 13:36:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 16 at 13:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;in a function we use &lt;code&gt;this&lt;/code&gt;&quot; - If you want to access a &lt;i&gt;global&lt;/i&gt; variable in this way, it is better to be explicit and use the &lt;code&gt;window&lt;/code&gt; object, not &lt;code&gt;this&lt;/code&gt;. &lt;code&gt;this&lt;/code&gt; is ambiguous.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/369434/mrwhite&quot; title=&quot;35,928 reputation&quot; class=&quot;comment-user&quot;&gt;MrWhite&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment52231370_28063322&quot;&gt;&lt;span title=&quot;2015-08-23 23:25:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 23, 2015 at 23:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;But &lt;b&gt;inside of a function&lt;/b&gt; you cannot use &lt;code&gt;this&lt;/code&gt;, or anything else, to access the variable &lt;code&gt;type&lt;/code&gt; from your example, if you have its name in another variable: &lt;code&gt;function test(vname) { var type = &apos;article&apos;; this[vname] = &apos;something else&apos;; alert(type); }; test(&apos;type&apos;)&lt;/code&gt; will show &lt;code&gt;article&lt;/code&gt;, not &lt;code&gt;something else&lt;/code&gt;. And that is what the &quot;complex answer&quot; explains.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6854781/orafu&quot; title=&quot;191 reputation&quot; class=&quot;comment-user&quot;&gt;Orafu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105397800_28063322&quot;&gt;&lt;span title=&quot;2020-01-06 18:36:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 6, 2020 at 18:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This does not work. It outputs &lt;code&gt;undefined&lt;/code&gt; to the alert box if you put it in a function and call it with an object (either with the &lt;code&gt;new&lt;/code&gt; operator or with dot notation).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1502810/celticminstrel&quot; title=&quot;1,577 reputation&quot; class=&quot;comment-user&quot;&gt;celticminstrel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment110755776_28063322&quot;&gt;&lt;span title=&quot;2020-06-29 00:24:54Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 29, 2020 at 0:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Works great inside of Express.js routes&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6209382/gavinbelson&quot; title=&quot;2,006 reputation&quot; class=&quot;comment-user&quot;&gt;GavinBelson&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment116600706_28063322&quot;&gt;&lt;span title=&quot;2021-01-29 01:47:35Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 29, 2021 at 1:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks @Terry, this works perfectly in Vue. When you have multiple data properties declared, and you want a method to decide which data property to target, you just pass the property name like this:  &lt;code&gt;changeProperty(propertyName) { this[propertyName] = 1; } &lt;/code&gt; &lt;code&gt;changeProperty(&quot;bar&quot;)&lt;/code&gt; &lt;code&gt;changeProperty(&quot;baz&quot;)&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12268893/demia&quot; title=&quot;315 reputation&quot; class=&quot;comment-user&quot;&gt;DemiA&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment123181452_28063322&quot;&gt;&lt;span title=&quot;2021-10-23 15:38:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 23, 2021 at 15:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 4 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;var someJsonObj = {}; in a loop.... for(var i=0; i&amp;lt;=3; i++) {     someJsonObj[i] = []; }, but i can be anything. so dynamically generated variables, all sit inside someJsonObj for easy reference.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/986818/rajeev&quot; title=&quot;1,105 reputation&quot; class=&quot;comment-user&quot;&gt;rajeev&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment73610549_27162245&quot;&gt;&lt;span title=&quot;2017-04-07 06:31:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 7, 2017 at 6:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s a fast solution, but it is a bad practice because it&apos;s not safe and decrease performance since the JS engine can&apos;t optimize that method.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5229593/diego-ortiz&quot; title=&quot;111 reputation&quot; class=&quot;comment-user&quot;&gt;Diego Ortiz&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106099594_54044696&quot;&gt;&lt;span title=&quot;2020-01-30 19:46:31Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 30, 2020 at 19:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Awesome solution&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8300620/rohit-parte&quot; title=&quot;2,703 reputation&quot; class=&quot;comment-user&quot;&gt;Rohit Parte&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment108561951_54044696&quot;&gt;&lt;span title=&quot;2020-04-22 14:34:48Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 22, 2020 at 14:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;default&quot; is a reserved word in JavaScript. You should not use it as a variable name&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3791358/gust-van-de-wal&quot; title=&quot;5,080 reputation&quot; class=&quot;comment-user&quot;&gt;Gust van de Wal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115422460_54044696&quot;&gt;&lt;span title=&quot;2020-12-14 11:37:40Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 14, 2020 at 11:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks...It totally saved me !  this.$refs[&apos;listView&apos; + index].nativeView.animate({..}) I needed vars inside refs like this.$refs.listView1 listView2 and so on...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3727909/meiki-neumann&quot; title=&quot;119 reputation&quot; class=&quot;comment-user&quot;&gt;Meiki Neumann&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106986145_46269741&quot;&gt;&lt;span title=&quot;2020-03-01 14:31:08Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 1, 2020 at 14:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why do you need to &lt;code&gt;import&lt;/code&gt;/&lt;code&gt;export&lt;/code&gt; to do that? Why not simply creating an object and accessing its properties? Also, it&apos;s &lt;b&gt;not&lt;/b&gt; possible to export dynamic names, unless you export an object as default...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8376184/fzs&quot; title=&quot;14,643 reputation&quot; class=&quot;comment-user&quot;&gt;FZs&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114590457_56280794&quot;&gt;&lt;span title=&quot;2020-11-12 21:02:51Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 12, 2020 at 21:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;same applies to &lt;code&gt;const&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user4244405&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98192856_55312413&quot;&gt;&lt;span title=&quot;2019-04-19 08:26:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 19, 2019 at 8:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;True. But you can create an object with the variables and select the variable from there: &lt;code&gt;const vars = { t, m, b }; console.log(vars[&apos;b&apos;])&lt;/code&gt;. Otherwise &lt;code&gt;eval&lt;/code&gt; works too.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5950626/fabian-von-ellerts&quot; title=&quot;4,077 reputation&quot; class=&quot;comment-user&quot;&gt;Fabian von Ellerts&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102818721_55312413&quot;&gt;&lt;span title=&quot;2019-10-03 14:41:36Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 3, 2019 at 14:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@FabianvonEllerts what is the purpose of your comment? This answer only aims to address the difference between block-level scope (&lt;code&gt;let&lt;/code&gt; &amp;amp; &lt;code&gt;const&lt;/code&gt;) and global (&lt;code&gt;window&lt;/code&gt;) scope (&lt;code&gt;var&lt;/code&gt; &amp;amp; &lt;code&gt;function&lt;/code&gt;). Your comment has nothing to do with that and rather serves as a separate answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3791358/gust-van-de-wal&quot; title=&quot;5,080 reputation&quot; class=&quot;comment-user&quot;&gt;Gust van de Wal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115422835_55312413&quot;&gt;&lt;span title=&quot;2020-12-14 11:51:52Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 14, 2020 at 11:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;use a global scope - is bad idea, imho&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/828799/alexander-shestakov&quot; title=&quot;153 reputation&quot; class=&quot;comment-user&quot;&gt;Alexander Shestakov&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117296803_63919083&quot;&gt;&lt;span title=&quot;2021-02-24 08:57:04Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 24, 2021 at 8:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Beware: const is a keyword in ES6&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3783901/tejas-manohar&quot; title=&quot;923 reputation&quot; class=&quot;comment-user&quot;&gt;Tejas Manohar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55273124_13538567&quot;&gt;&lt;span title=&quot;2015-11-17 09:00:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 17, 2015 at 9:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;...and prior to that was a &lt;i&gt;future reserved word&lt;/i&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/157247/t-j-crowder&quot; title=&quot;965,854 reputation&quot; class=&quot;comment-user&quot;&gt;T.J. Crowder&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment56113798_13538567&quot;&gt;&lt;span title=&quot;2015-12-09 16:23:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 9, 2015 at 16:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;there is &lt;code&gt;eval&lt;/code&gt; operator&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1919821/pery-mimon&quot; title=&quot;6,720 reputation&quot; class=&quot;comment-user&quot;&gt;pery mimon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94936028_13538567&quot;&gt;&lt;span title=&quot;2019-01-05 09:46:17Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 5, 2019 at 9:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;small improvement, it is better to use &lt;code&gt;var node_head = document.getElementsByTagName(&quot;head&quot;)[0]&lt;/code&gt; instead of ID, as no one gives an &lt;code&gt;id=&quot;head&quot;&lt;/code&gt; to &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; :-)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1150871/ddlab&quot; title=&quot;910 reputation&quot; class=&quot;comment-user&quot;&gt;ddlab&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42228971_26208035&quot;&gt;&lt;span title=&quot;2014-11-09 17:41:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 9, 2014 at 17:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I do :) But thanks, now I can finally remove this `id=&quot;head&quot; thing&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/831399/axel-heider&quot; title=&quot;496 reputation&quot; class=&quot;comment-user&quot;&gt;Axel Heider&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48174445_26208035&quot;&gt;&lt;span title=&quot;2015-05-04 11:33:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 4, 2015 at 11:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This just seems to be an overly complex way of creating a global variable?! (...and how does this answer the question?)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/369434/mrwhite&quot; title=&quot;35,928 reputation&quot; class=&quot;comment-user&quot;&gt;MrWhite&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment52231531_26208035&quot;&gt;&lt;span title=&quot;2015-08-23 23:39:03Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 23, 2015 at 23:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;genius :) eval is the solution. Even if your code does not work&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1919821/pery-mimon&quot; title=&quot;6,720 reputation&quot; class=&quot;comment-user&quot;&gt;pery mimon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94924040_26208035&quot;&gt;&lt;span title=&quot;2019-01-04 18:27:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 4, 2019 at 18:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":576,"title":"Use dynamic variable names in JavaScript","content":"\n                \n&lt;p&gt;In PHP you can do amazing/horrendous things like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n$b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n$c = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n$name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;;\necho $$name;\n&lt;span class=&quot;hljs-comment&quot;&gt;// prints 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is there any way of doing something like this with Javascript?&lt;/p&gt;\n\n&lt;p&gt;E.g. if I have a &lt;code&gt;var name = &apos;the name of the variable&apos;;&lt;/code&gt; can I get a reference to the variable with name &lt;code&gt;name&lt;/code&gt;?&lt;/p&gt;\n    ","slug":"use-dynamic-variable-names-in-javascript-1657388468075","postType":"QUESTION","createdAt":"2022-07-09T17:41:08.000Z","updatedAt":"2022-07-09T17:41:08.000Z","tags":[{"id":2766,"name":"dynamic-variables","slug":"dynamic-variables","createdAt":"2022-07-09T17:41:08.000Z","updatedAt":"2022-07-09T17:41:08.000Z","Questions_Tags":{"questionId":576,"tagId":2766}}]}},"__N_SSG":true}