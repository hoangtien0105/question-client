{"pageProps":{"data":{"answer":["\n&lt;p&gt;Yes - take a copy of the variable inside the loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; copy = variable;\n    actions.Add(() =&amp;gt; copy * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    ++ variable;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can think of it as if the C# compiler creates a &quot;new&quot; local variable every time it hits the variable declaration. In fact it&apos;ll create appropriate new closure objects, and it gets complicated (in terms of implementation) if you refer to variables in multiple scopes, but it works :)&lt;/p&gt;\n\n&lt;p&gt;Note that a more common occurrence of this problem is using &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;foreach&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; i++) &lt;span class=&quot;hljs-comment&quot;&gt;// Just one variable&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; foo) &lt;span class=&quot;hljs-comment&quot;&gt;// And again, despite how it reads out loud&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See section 7.14.4.2 of the C# 3.0 spec for more details of this, and my &lt;a href=&quot;http://csharpindepth.com/Articles/Chapter5/Closures.aspx&quot; rel=&quot;noreferrer&quot;&gt;article on closures&lt;/a&gt; has more examples too.&lt;/p&gt;\n\n&lt;p&gt;Note that as of the C# 5 compiler and beyond (even when specifying an earlier version of C#), the behavior of &lt;code&gt;foreach&lt;/code&gt; changed so you no longer need to make local copy. See &lt;a href=&quot;https://stackoverflow.com/questions/8898925/is-there-a-reason-for-cs-reuse-of-the-variable-in-a-foreach/8899347#8899347&quot;&gt;this answer&lt;/a&gt; for more details.&lt;/p&gt;\n    ","\n&lt;p&gt;I believe what you are experiencing is something known as Closure &lt;a href=&quot;http://en.wikipedia.org/wiki/Closure_(computer_science)&quot; rel=&quot;noreferrer&quot;&gt;http://en.wikipedia.org/wiki/Closure_(computer_science)&lt;/a&gt;. Your lamba has a reference to a variable which is scoped outside the function itself. Your lamba is not interpreted until you invoke it and once it is it will get the value the variable has at execution time.&lt;/p&gt;\n    ","\n&lt;p&gt;Behind the scenes, the compiler is generating a class that represents the closure for your method call. It uses that single instance of the closure class for each iteration of the loop. The code looks something like this, which makes it easier to see why the bug happens:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;()&lt;/span&gt;\n{\n    List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; actions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; closure = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CompilerGeneratedClosure();\n\n    Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; anonymousMethodAction = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (closure.variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(anonymousMethodAction == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            anonymousMethodAction = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;(closure.YourAnonymousMethod);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//we&apos;re re-adding the same function &lt;/span&gt;\n        actions.Add(anonymousMethodAction);\n\n        ++closure.variable;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; act &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; actions)\n    {\n        Console.WriteLine(act.Invoke());\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CompilerGeneratedClosure&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;YourAnonymousMethod&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.variable * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This isn&apos;t actually the compiled code from your sample, but I&apos;ve examined my own code and this looks very much like what the compiler would actually generate.&lt;/p&gt;\n    ","\n&lt;p&gt;The way around this is to store the value you need in a proxy variable, and have that variable get captured.&lt;/p&gt;\n\n&lt;p&gt;I.E.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; )\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; copy = variable;\n    actions.Add( () =&amp;gt; copy * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; );\n    ++variable;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;This has nothing to do with loops. &lt;/h1&gt;\n\n&lt;p&gt;This behavior is triggered because you use a lambda expression &lt;code&gt;() =&amp;gt; variable * 2&lt;/code&gt; where the outer scoped &lt;code&gt;variable&lt;/code&gt; not actually defined in the lambda&apos;s inner scope. &lt;/p&gt;\n\n&lt;p&gt;Lambda expressions (in C#3+, as well as anonymous methods in C#2) still create actual methods. Passing variables to these methods involve some dilemmas (pass by value? pass by reference? C# goes with by reference - but this opens another problem where the reference can outlive the actual variable). What C# does to resolve all these dilemmas is to create a new helper class (&quot;closure&quot;) with fields corresponding to the local variables used in the lambda expressions, and methods corresponding to the actual lambda methods. Any changes to &lt;code&gt;variable&lt;/code&gt; in your code is actually translated to change in that &lt;code&gt;ClosureClass.variable&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;So your while loop keeps updating the &lt;code&gt;ClosureClass.variable&lt;/code&gt; until it reaches 10, then you for loops executes the actions, which all operate on the same &lt;code&gt;ClosureClass.variable&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;To get your expected result, you need to create a separation between the loop variable, and the variable that is being closured. You can do this by introducing another variable, i.e.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; actions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t = variable; &lt;span class=&quot;hljs-comment&quot;&gt;// now t will be closured (i.e. replaced by a field in the new class)&lt;/span&gt;\n    actions.Add(() =&amp;gt; t * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    ++variable; &lt;span class=&quot;hljs-comment&quot;&gt;// changing variable won&apos;t affect the closured variable t&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; act &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; actions)\n{\n    Console.WriteLine(act.Invoke());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You could also move the closure to another method to create this separation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; actions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n{\n    actions.Add(Mult(variable));\n    ++variable;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; act &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; actions)\n{\n    Console.WriteLine(act.Invoke());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can implement Mult as a lambda expression (implicit closure) &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Mult&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; () =&amp;gt; i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or with an actual helper class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Helper&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; _i;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Helper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i&lt;/span&gt;)&lt;/span&gt;\n    {\n        _i = i;\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Method&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Mult&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i&lt;/span&gt;)&lt;/span&gt;\n{\n    Helper help = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Helper(i);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; help.Method;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In any case, &lt;strong&gt;&quot;Closures&quot; are NOT a concept related to loops&lt;/strong&gt;, but rather to anonymous methods / lambda expressions use of local scoped variables - although some incautious use of loops demonstrate closures traps.&lt;/p&gt;\n    ","\n&lt;p&gt;Yes you need to scope &lt;code&gt;variable&lt;/code&gt; within the loop and pass it to the lambda that way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; actions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable1 = variable;\n    actions.Add(() =&amp;gt; variable1 * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    ++variable;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; act &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; actions)\n{\n    Console.WriteLine(act.Invoke());\n}\n\nConsole.ReadLine();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The same situation is happening in multi-threading (C#, &lt;a href=&quot;http://en.wikipedia.org/wiki/.NET_Framework&quot; rel=&quot;nofollow&quot;&gt;.NET&lt;/a&gt; 4.0].&lt;/p&gt;\n\n&lt;p&gt;See the following code:&lt;/p&gt;\n\n&lt;p&gt;Purpose is to print 1,2,3,4,5 in order.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; counter = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; counter &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; counter++)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Thread (() =&amp;gt; Console.Write (counter)).Start();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output is interesting! (It might be like 21334...)&lt;/p&gt;\n\n&lt;p&gt;The only solution is to use local variables.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; counter = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; counter &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; counter++)\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; localVar= counter;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Thread (() =&amp;gt; Console.Write (localVar)).Start();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; n &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; n++) &lt;span class=&quot;hljs-comment&quot;&gt;//forloop syntax&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; foo) &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; syntax\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It is called the closure problem,\nsimply use a copy variable, and it&apos;s done.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; actions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = variable;\n    actions.Add(() =&amp;gt; i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    ++ variable;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; act &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; actions)\n{\n    Console.WriteLine(act.Invoke());\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Since no one here directly quoted &lt;a href=&quot;https://ecma-international.org/publications/files/ECMA-ST/ECMA-334.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMA-334&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;10.4.4.10 For statements &lt;/p&gt;\n  \n  &lt;p&gt;Definite assignment checking for a for-statement of the form:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-initializer; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-condition; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-iterator) embedded-statement\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;is done as if the statement were written:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-initializer;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-condition) {\n        embedded-statement;\n    LLoop: &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;-iterator;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Further on in the spec,&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;12.16.6.3 Instantiation of local variables&lt;/p&gt;\n  \n  &lt;p&gt;A local variable is considered to be instantiated when execution enters the scope of the variable. &lt;/p&gt;\n  \n  &lt;p&gt;[Example: For example, when the following method is invoked, the local variable &lt;code&gt;x&lt;/code&gt; is instantiated and initialized three timesonce for each iteration of the loop.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;F&lt;/span&gt;()&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x = i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    ...\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;However, moving the declaration of &lt;code&gt;x&lt;/code&gt; outside the loop results in a single instantiation of &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;F&lt;/span&gt;()&lt;/span&gt; {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    x = i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    ...\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;end example]&lt;/p&gt;\n  \n  &lt;p&gt;When not captured, there is no way to observe exactly how often a local variable is instantiatedbecause the lifetimes of the instantiations are disjoint, it is possible for each instantation to simply use the same storage location. However, when an anonymous function captures a local variable, the effects of instantiation become apparent.&lt;/p&gt;\n  \n  &lt;p&gt;[Example: The example &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;D&lt;/span&gt;()&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Test&lt;/span&gt;{\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; D[] &lt;span class=&quot;hljs-title&quot;&gt;F&lt;/span&gt;()&lt;/span&gt; {\n    D[] result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; D[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x = i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n      result[i] = () =&amp;gt; { Console.WriteLine(x); };\n    }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n  }\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-function&quot;&gt;D d &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;F&lt;/span&gt;()) &lt;span class=&quot;hljs-title&quot;&gt;d&lt;/span&gt;()&lt;/span&gt;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;produces the output:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;However, when the declaration of &lt;code&gt;x&lt;/code&gt; is moved outside the loop:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; D[] &lt;span class=&quot;hljs-title&quot;&gt;F&lt;/span&gt;()&lt;/span&gt; {\n  D[] result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; D[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n  &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    x = i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    result[i] = () =&amp;gt; { Console.WriteLine(x); };\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;the output is:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Note that the compiler is permitted (but not required) to optimize the three instantiations into a single delegate instance (§11.7.2).&lt;/p&gt;\n  \n  &lt;p&gt;If a for-loop declares an iteration variable, that variable itself is considered to be declared outside of the loop. \n  [Example: Thus, if the example is changed to capture the iteration variable itself:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; D[] &lt;span class=&quot;hljs-title&quot;&gt;F&lt;/span&gt;()&lt;/span&gt; {\n  D[] result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; D[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    result[i] = () =&amp;gt; { Console.WriteLine(i); };\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;only one instance of the iteration variable is captured, which produces the output:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;end example]&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Oh yea, I guess it should be mentioned that in C++ this problem doesn&apos;t occur because you can choose if the variable is captured by value or by reference (see: &lt;a href=&quot;https://en.cppreference.com/w/cpp/language/lambda#Lambda_capture&quot; rel=&quot;nofollow noreferrer&quot;&gt;Lambda capture&lt;/a&gt;).&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See also Eric Lippert&apos;s Blog series on the subject: &lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/tags/closures/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Closing over the Loop Variable Considered Harmful&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/18192/brian&quot; title=&quot;24,987 reputation&quot; class=&quot;comment-user&quot;&gt;Brian&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment4490025_271440&quot;&gt;&lt;span title=&quot;2010-11-11 21:50:50Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 11, 2010 at 21:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also, they are changing C# 5 to work as you expect within a foreach.  (breaking change)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/167575/neal-tibrewala&quot; title=&quot;435 reputation&quot; class=&quot;comment-user&quot;&gt;Neal Tibrewala&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment12114757_271440&quot;&gt;&lt;span title=&quot;2012-03-04 18:55:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 4, 2012 at 18:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Related: &lt;a href=&quot;http://stackoverflow.com/questions/227820/why-is-it-bad-to-use-an-iteration-variable-in-a-lambda-expression&quot;&gt;why-is-it-bad-to-use-an-iteration-variable-in-a-lambda-expression&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/661933/nawfal&quot; title=&quot;66,732 reputation&quot; class=&quot;comment-user&quot;&gt;nawfal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29330134_271440&quot;&gt;&lt;span title=&quot;2013-11-02 07:08:51Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 2, 2013 at 7:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Neal: although this example still doesn&apos;t work properly in C# 5, as it still outputs five 10s&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/21606/ian-oakes&quot; title=&quot;10,044 reputation&quot; class=&quot;comment-user&quot;&gt;Ian Oakes&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment32624771_271440&quot;&gt;&lt;span title=&quot;2014-02-06 05:41:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 6, 2014 at 5:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It verified that it outputs five 10s till today on C# 6.0 (VS 2015). I doubt that this behavior of closure variables is a candidate for change. &lt;code&gt;Captured variables are always evaluated when the delegate is actually invoked, not when the variables were captured&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/465053/rbt&quot; title=&quot;21,579 reputation&quot; class=&quot;comment-user&quot;&gt;RBT&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment74161499_271440&quot;&gt;&lt;span title=&quot;2017-04-22 03:03:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 22, 2017 at 3:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Jon&apos;s book also has a very good chapter on this (stop being humble, Jon!)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/23354/marc-gravell&quot; title=&quot;980,686 reputation&quot; class=&quot;comment-user&quot;&gt;Marc Gravell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125373_271447&quot;&gt;&lt;span title=&quot;2008-11-07 07:57:41Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 7, 2008 at 7:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It looks better if I let other people plug it ;) (I confess that I do tend to vote up answers recommending it though.)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/22656/jon-skeet&quot; title=&quot;1,342,502 reputation&quot; class=&quot;comment-user&quot;&gt;Jon Skeet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125381_271447&quot;&gt;&lt;span title=&quot;2008-11-07 08:03:03Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 7, 2008 at 8:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;As ever, feedback to skeet@pobox.com would be appreciated :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/22656/jon-skeet&quot; title=&quot;1,342,502 reputation&quot; class=&quot;comment-user&quot;&gt;Jon Skeet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125454_271447&quot;&gt;&lt;span title=&quot;2008-11-07 09:30:44Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 7, 2008 at 9:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For C# 5.0 behavior is different (more reasonable) see newer answer by Jon Skeet - &lt;a href=&quot;http://stackoverflow.com/questions/16264289/captured-closure-loop-variable-in-c-sharp-5-0&quot; title=&quot;captured closure loop variable in c sharp 5 0&quot;&gt;stackoverflow.com/questions/16264289/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/477420/alexei-levenkov&quot; title=&quot;97,117 reputation&quot; class=&quot;comment-user&quot;&gt;Alexei Levenkov&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment57608419_271447&quot;&gt;&lt;span title=&quot;2016-01-22 02:35:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 22, 2016 at 2:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Florimond: That&apos;s just not how closures work in C#. They capture &lt;i&gt;variables&lt;/i&gt;, not &lt;i&gt;values&lt;/i&gt;. (That&apos;s true regardless of loops, and is easily demonstrated with a lambda that captures a variable, and just prints the current value whenever it&apos;s executed.)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/22656/jon-skeet&quot; title=&quot;1,342,502 reputation&quot; class=&quot;comment-user&quot;&gt;Jon Skeet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98471632_271447&quot;&gt;&lt;span title=&quot;2019-04-29 17:27:18Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 29, 2019 at 17:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See the explanation in my edited answer. I&apos;m finding the relevant bit of the spec now.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/22656/jon-skeet&quot; title=&quot;1,342,502 reputation&quot; class=&quot;comment-user&quot;&gt;Jon Skeet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125347_271450&quot;&gt;&lt;span title=&quot;2008-11-07 07:35:07Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 7, 2008 at 7:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Haha jon, I actually just read your article: &lt;a href=&quot;http://csharpindepth.com/Articles/Chapter5/Closures.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;csharpindepth.com/Articles/Chapter5/Closures.aspx&lt;/a&gt;  You do good work my friend.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/35339/tyler-levine&quot; title=&quot;373 reputation&quot; class=&quot;comment-user&quot;&gt;Tyler Levine&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125349_271450&quot;&gt;&lt;span title=&quot;2008-11-07 07:36:06Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 7, 2008 at 7:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@tjlevine: Thanks very much. I&apos;ll add a reference to that in my answer. I&apos;d forgotten about it!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/22656/jon-skeet&quot; title=&quot;1,342,502 reputation&quot; class=&quot;comment-user&quot;&gt;Jon Skeet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125351_271450&quot;&gt;&lt;span title=&quot;2008-11-07 07:37:54Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 7, 2008 at 7:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also, Jon, I&apos;d love to read about your thoughts on the various Java 7 closure proposals. I&apos;ve seen you mention that you wanted to write one, but I haven&apos;t seen it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/35339/tyler-levine&quot; title=&quot;373 reputation&quot; class=&quot;comment-user&quot;&gt;Tyler Levine&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125356_271450&quot;&gt;&lt;span title=&quot;2008-11-07 07:42:34Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 7, 2008 at 7:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@tjlevine: Okay, I promise to try to write it up by the end of the year :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/22656/jon-skeet&quot; title=&quot;1,342,502 reputation&quot; class=&quot;comment-user&quot;&gt;Jon Skeet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125370_271450&quot;&gt;&lt;span title=&quot;2008-11-07 07:54:24Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 7, 2008 at 7:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This does not seem to help me. Still non-deterministic.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11421/mladen-mihajlovic&quot; title=&quot;5,575 reputation&quot; class=&quot;comment-user&quot;&gt;Mladen Mihajlovic&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment32417885_4829027&quot;&gt;&lt;span title=&quot;2014-01-31 11:14:47Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 31, 2014 at 11:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This has nothing to do with why you need to &quot;redeclare&quot; the variable you want to capture. This solely has to do with the fact that the second thread might be &quot;ready for work&quot; faster on the OS level, or that the executing code gets scheduled earlier. Your second example isn&apos;t going to output 1-5 every time either. It might in Debug, because that&apos;s magnitudes slower, but it definitely won&apos;t in Release builds.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9033739/dennis19901&quot; title=&quot;485 reputation&quot; class=&quot;comment-user&quot;&gt;Dennis19901&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122805716_4829027&quot;&gt;&lt;span title=&quot;2021-10-07 10:11:59Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 7, 2021 at 10:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It doesn&apos;t make harm to add some lines of explanation to code samples ;)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4457451/maksym-rudenko&quot; title=&quot;626 reputation&quot; class=&quot;comment-user&quot;&gt;Maksym Rudenko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115694669_65439550&quot;&gt;&lt;span title=&quot;2020-12-24 14:52:03Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 24, 2020 at 14:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Ok @MaksymRudenko&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6366945/arshman-saleem&quot; title=&quot;79 reputation&quot; class=&quot;comment-user&quot;&gt;Arshman Saleem&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120044347_65439550&quot;&gt;&lt;span title=&quot;2021-06-10 07:50:00Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 10, 2021 at 7:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In what way your answer is different from the answer provided by someone above?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1363011/thangadurai&quot; title=&quot;2,463 reputation&quot; class=&quot;comment-user&quot;&gt;Thangadurai&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95680296_53744561&quot;&gt;&lt;span title=&quot;2019-01-30 07:38:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 30, 2019 at 7:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":343,"title":"Captured variable in a loop in C#","content":"\n                \n&lt;p&gt;I met an interesting issue about C#. I have code like below.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; actions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Func&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; variable = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (variable &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n{\n    actions.Add(() =&amp;gt; variable * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    ++ variable;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; act &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; actions)\n{\n    Console.WriteLine(act.Invoke());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I expect it to output 0, 2, 4, 6, 8. However, it actually outputs five 10s.&lt;/p&gt;\n\n&lt;p&gt;It seems that it is due to all actions referring to one captured variable. As a result, when they get invoked, they all have same output.&lt;/p&gt;\n\n&lt;p&gt;Is there a way to work round this limit to have each action instance have its own captured variable?&lt;/p&gt;\n    ","slug":"captured-variable-in-a-loop-in-c-1657387696779","postType":"QUESTION","createdAt":"2022-07-09T17:28:16.000Z","updatedAt":"2022-07-09T17:28:16.000Z","tags":[{"id":1947,"name":"captured-variable","slug":"captured-variable","createdAt":"2022-07-09T17:28:16.000Z","updatedAt":"2022-07-09T17:28:16.000Z","Questions_Tags":{"questionId":343,"tagId":1947}}]}},"__N_SSG":true}