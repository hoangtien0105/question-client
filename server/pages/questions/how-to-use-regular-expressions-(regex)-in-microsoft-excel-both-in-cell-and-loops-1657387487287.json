{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Regular_expressions&quot; rel=&quot;noreferrer&quot;&gt;Regular expressions&lt;/a&gt; are used for Pattern Matching.&lt;/p&gt;\n&lt;p&gt;To use in Excel follow these steps:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Add VBA reference to &quot;Microsoft VBScript Regular Expressions 5.5&quot;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Select &quot;Developer&quot; tab (&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb608625.aspx&quot; rel=&quot;noreferrer&quot;&gt;I don&apos;t have this tab what do I do?&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;Select &quot;Visual Basic&quot; icon from &apos;Code&apos; ribbon section&lt;/li&gt;\n&lt;li&gt;In &quot;Microsoft Visual Basic for Applications&quot; window select &quot;Tools&quot; from the top menu.&lt;/li&gt;\n&lt;li&gt;Select &quot;References&quot;&lt;/li&gt;\n&lt;li&gt;Check the box next to &quot;Microsoft VBScript Regular Expressions 5.5&quot; to include in your workbook.&lt;/li&gt;\n&lt;li&gt;Click &quot;OK&quot;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Define your pattern&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Basic definitions:&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;-&lt;/code&gt;  Range.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;E.g. &lt;code&gt;a-z&lt;/code&gt; matches an lower case letters from a to z&lt;/li&gt;\n&lt;li&gt;E.g. &lt;code&gt;0-5&lt;/code&gt; matches any number from 0 to 5&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;[]&lt;/code&gt; Match exactly one of the objects inside these brackets.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;E.g. &lt;code&gt;[a]&lt;/code&gt; matches the letter a&lt;/li&gt;\n&lt;li&gt;E.g. &lt;code&gt;[abc]&lt;/code&gt; matches a single letter which can be a, b or c&lt;/li&gt;\n&lt;li&gt;E.g. &lt;code&gt;[a-z]&lt;/code&gt; matches any single lower case letter of the alphabet.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;()&lt;/code&gt; Groups different matches for return purposes.  See examples below.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;{}&lt;/code&gt; Multiplier for repeated copies of pattern defined before it.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;E.g. &lt;code&gt;[a]{2}&lt;/code&gt; matches two consecutive lower case letter a: &lt;code&gt;aa&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;E.g. &lt;code&gt;[a]{1,3}&lt;/code&gt; matches at least one and up to three lower case letter &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;aa&lt;/code&gt;, &lt;code&gt;aaa&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;+&lt;/code&gt;  Match at least one, or more, of the pattern defined before it.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;E.g. &lt;code&gt;a+&lt;/code&gt; will match consecutive a&apos;s &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;aa&lt;/code&gt;, &lt;code&gt;aaa&lt;/code&gt;, and so on&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;?&lt;/code&gt;  Match zero or one of the pattern defined before it.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;E.g. Pattern may or may not be present but can only be matched one time.&lt;/li&gt;\n&lt;li&gt;E.g. &lt;code&gt;[a-z]?&lt;/code&gt; matches empty string or any single lower case letter.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;*&lt;/code&gt;  Match zero or more of the pattern defined before it.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;E.g. Wildcard for pattern that may or may not be present.&lt;/li&gt;\n&lt;li&gt;E.g. &lt;code&gt;[a-z]*&lt;/code&gt; matches empty string or string of lower case letters.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;.&lt;/code&gt;  Matches any character except newline &lt;code&gt;\\n&lt;/code&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;E.g. &lt;code&gt;a.&lt;/code&gt; Matches a two character string starting with a and ending with anything except &lt;code&gt;\\n&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;  OR operator&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;E.g. &lt;code&gt;a|b&lt;/code&gt; means either &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; can be matched.&lt;/li&gt;\n&lt;li&gt;E.g. &lt;code&gt;red|white|orange&lt;/code&gt; matches exactly one of the colors.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;^&lt;/code&gt;  NOT operator&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;E.g. &lt;code&gt;[^0-9]&lt;/code&gt; character can not contain a number&lt;/li&gt;\n&lt;li&gt;E.g. &lt;code&gt;[^aA]&lt;/code&gt; character can not be lower case &lt;code&gt;a&lt;/code&gt; or upper case &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;\\&lt;/code&gt;  Escapes special character that follows (overrides above behavior)&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;E.g. &lt;code&gt;\\.&lt;/code&gt;, &lt;code&gt;\\\\&lt;/code&gt;, &lt;code&gt;\\(&lt;/code&gt;, &lt;code&gt;\\?&lt;/code&gt;, &lt;code&gt;\\$&lt;/code&gt;, &lt;code&gt;\\^&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;Anchoring Patterns:&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;^&lt;/code&gt;  Match must occur at start of string&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;E.g. &lt;code&gt;^a&lt;/code&gt; First character must be lower case letter &lt;code&gt;a&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;E.g. &lt;code&gt;^[0-9]&lt;/code&gt; First character must be a number.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;$&lt;/code&gt;  Match must occur at end of string&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;E.g. &lt;code&gt;a$&lt;/code&gt; Last character must be lower case letter &lt;code&gt;a&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;Precedence table:&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Order&lt;/span&gt;  Name                Representation\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;      Parentheses         ( )\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;      Multipliers         ? + * {m,n} {m, n}?\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;      Sequence &amp;amp; Anchors  abc ^ $\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;      Alternation         |\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;Predefined Character Abbreviations:&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;abr    same &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt;       meaning\n\\d     [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]         Any &lt;span class=&quot;hljs-type&quot;&gt;single&lt;/span&gt; digit\n\\D     [^&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]        Any &lt;span class=&quot;hljs-type&quot;&gt;single&lt;/span&gt; character that&lt;span class=&quot;hljs-comment&quot;&gt;&apos;s not a digit&lt;/span&gt;\n\\w     [a-zA-Z0-&lt;span class=&quot;hljs-number&quot;&gt;9_&lt;/span&gt;]  Any word character\n\\W     [^a-zA-Z0-&lt;span class=&quot;hljs-number&quot;&gt;9_&lt;/span&gt;] Any non-word character\n\\s     [ \\r\\t\\n\\f]   Any space character\n\\S     [^ \\r\\t\\n\\f]  Any non-space character\n\\n     [\\n]          &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; line\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Example 1&lt;/strong&gt;: &lt;em&gt;Run as macro&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;The following example macro looks at the value in cell &lt;code&gt;A1&lt;/code&gt; to see if the first 1 or 2 characters are digits.  If so, they are removed and the rest of the string is displayed.  If not, then a box appears telling you that no match is found.  Cell &lt;code&gt;A1&lt;/code&gt; values of &lt;code&gt;12abc&lt;/code&gt; will return &lt;code&gt;abc&lt;/code&gt;, value of &lt;code&gt;1abc&lt;/code&gt; will return &lt;code&gt;abc&lt;/code&gt;, value of &lt;code&gt;abc123&lt;/code&gt; will return &quot;Not Matched&quot; because the digits were not at the start of the string.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; simpleRegex()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strPattern &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;: strPattern = &lt;span class=&quot;hljs-string&quot;&gt;&quot;^[0-9]{1,2}&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strReplace &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;: strReplace = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; regEx &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; RegExp\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strInput &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; Myrange &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Myrange = ActiveSheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;)\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; strPattern &amp;lt;&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n        strInput = Myrange.Value\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; regEx\n            .&lt;span class=&quot;hljs-keyword&quot;&gt;Global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n            .MultiLine = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n            .IgnoreCase = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n            .Pattern = strPattern\n        &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; regEx.Test(strInput) &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n            MsgBox (regEx.Replace(strInput, strReplace))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Else&lt;/span&gt;\n            MsgBox (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not matched&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;: &lt;em&gt;Run as an in-cell function&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;This example is the same as example 1 but is setup to run as an in-cell function. To use, change the code to this:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt; simpleCellRegex(Myrange &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range) &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; regEx &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; RegExp\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strPattern &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strInput &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strReplace &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strOutput &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n    \n    \n    strPattern = &lt;span class=&quot;hljs-string&quot;&gt;&quot;^[0-9]{1,3}&quot;&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; strPattern &amp;lt;&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n        strInput = Myrange.Value\n        strReplace = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; regEx\n            .&lt;span class=&quot;hljs-keyword&quot;&gt;Global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n            .MultiLine = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n            .IgnoreCase = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n            .Pattern = strPattern\n        &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; regEx.test(strInput) &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n            simpleCellRegex = regEx.Replace(strInput, strReplace)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Else&lt;/span&gt;\n            simpleCellRegex = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Not matched&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Place your strings (&quot;12abc&quot;) in cell &lt;code&gt;A1&lt;/code&gt;.  Enter this formula &lt;code&gt;=simpleCellRegex(A1)&lt;/code&gt; in cell &lt;code&gt;B1&lt;/code&gt; and the result will be &quot;abc&quot;.&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/q3RRC.png&quot; alt=&quot;results image&quot;&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Example 3&lt;/strong&gt;: &lt;em&gt;Loop Through Range&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;This example is the same as example 1 but loops through a range of cells.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; simpleRegex()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strPattern &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;: strPattern = &lt;span class=&quot;hljs-string&quot;&gt;&quot;^[0-9]{1,2}&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strReplace &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;: strReplace = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; regEx &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; RegExp\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strInput &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; Myrange &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Myrange = ActiveSheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1:A5&quot;&lt;/span&gt;)\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; cell &lt;span class=&quot;hljs-keyword&quot;&gt;In&lt;/span&gt; Myrange\n        &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; strPattern &amp;lt;&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n            strInput = cell.Value\n            \n            &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; regEx\n                .&lt;span class=&quot;hljs-keyword&quot;&gt;Global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n                .MultiLine = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n                .IgnoreCase = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n                .Pattern = strPattern\n            &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n            \n            &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; regEx.Test(strInput) &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n                MsgBox (regEx.Replace(strInput, strReplace))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;Else&lt;/span&gt;\n                MsgBox (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not matched&quot;&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Example 4&lt;/strong&gt;: Splitting apart different patterns&lt;/p&gt;\n&lt;p&gt;This example loops through a range (&lt;code&gt;A1&lt;/code&gt;, &lt;code&gt;A2&lt;/code&gt; &amp;amp; &lt;code&gt;A3&lt;/code&gt;) and looks for a string starting with three digits followed by a single alpha character and then 4 numeric digits.  The output splits apart the pattern matches into adjacent cells by using the &lt;code&gt;()&lt;/code&gt;.  &lt;code&gt;$1&lt;/code&gt; represents the first pattern matched within the first set of &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; splitUpRegexPattern()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; regEx &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; RegExp\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strPattern &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strInput &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; Myrange &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Myrange = ActiveSheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1:A3&quot;&lt;/span&gt;)\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; C &lt;span class=&quot;hljs-keyword&quot;&gt;In&lt;/span&gt; Myrange\n        strPattern = &lt;span class=&quot;hljs-string&quot;&gt;&quot;(^[0-9]{3})([a-zA-Z])([0-9]{4})&quot;&lt;/span&gt;\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; strPattern &amp;lt;&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n            strInput = C.Value\n            \n            &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; regEx\n                .&lt;span class=&quot;hljs-keyword&quot;&gt;Global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n                .MultiLine = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n                .IgnoreCase = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n                .Pattern = strPattern\n            &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n            \n            &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; regEx.test(strInput) &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n                C.Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = regEx.Replace(strInput, &lt;span class=&quot;hljs-string&quot;&gt;&quot;$1&quot;&lt;/span&gt;)\n                C.Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = regEx.Replace(strInput, &lt;span class=&quot;hljs-string&quot;&gt;&quot;$2&quot;&lt;/span&gt;)\n                C.Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) = regEx.Replace(strInput, &lt;span class=&quot;hljs-string&quot;&gt;&quot;$3&quot;&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;Else&lt;/span&gt;\n                C.Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;(Not matched)&quot;&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Results:&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/9eCZ5.png&quot; alt=&quot;results image&quot;&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Additional Pattern Examples&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;String   Regex Pattern                  Explanation\na1aaa    [a-zA-Z][0-9][a-zA-Z]{3}       Single alpha, single digit, three alpha characters\na1aaa    [a-zA-Z]?[0-9][a-zA-Z]{3}      May or may not have preceding alpha character\na1aaa    [a-zA-Z][0-9][a-zA-Z]{0,3}     Single alpha, single digit, 0 to 3 alpha characters\na1aaa    [a-zA-Z][0-9][a-zA-Z]*         Single alpha, single digit, followed by any number of alpha characters\n\n&amp;lt;/i8&amp;gt;    \\&amp;lt;\\/[a-zA-Z][0-9]\\&amp;gt;            Exact non-word character except any single alpha followed by any single digit\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To make use of regular expressions directly in Excel formulas the following UDF (user defined function) can be of help. It more or less directly exposes regular expression functionality as an excel function.&lt;/p&gt;\n\n&lt;h2&gt;How it works&lt;/h2&gt;\n\n&lt;p&gt;It takes 2-3 parameters.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;A text to use the regular expression on.&lt;/li&gt;\n&lt;li&gt;A regular expression.&lt;/li&gt;\n&lt;li&gt;A format string specifying how the result should look. It can contain &lt;code&gt;$0&lt;/code&gt;, &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, and so on. &lt;code&gt;$0&lt;/code&gt; is the entire match, &lt;code&gt;$1&lt;/code&gt; and up correspond to the respective match groups in the regular expression. Defaults to &lt;code&gt;$0&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Some examples&lt;/h2&gt;\n\n&lt;p&gt;Extracting an email address:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;=regex(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Peter Gordon: some@email.com, 47&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\w+@\\w+\\.\\w+&quot;&lt;/span&gt;)\n=regex(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Peter Gordon: some@email.com, 47&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\w+@\\w+\\.\\w+&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;$0&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Results in: &lt;code&gt;some@email.com&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Extracting several substrings:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;=regex(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Peter Gordon: some@email.com, 47&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;^(.+): (.+), (\\d+)$&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;E-Mail: $2, Name: $1&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Results in: &lt;code&gt;E-Mail: some@email.com, Name: Peter Gordon&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;To take apart a combined string in a single cell into its components in multiple cells:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;=regex(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Peter Gordon: some@email.com, 47&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;^(.+): (.+), (\\d+)$&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;$&quot;&lt;/span&gt; &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n=regex(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Peter Gordon: some@email.com, 47&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;^(.+): (.+), (\\d+)$&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;$&quot;&lt;/span&gt; &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Results in: &lt;code&gt;Peter Gordon&lt;/code&gt; &lt;code&gt;some@email.com&lt;/code&gt; ...&lt;/p&gt;\n\n&lt;h2&gt;How to use&lt;/h2&gt;\n\n&lt;p&gt;To use this UDF do the following (roughly based on &lt;a href=&quot;https://support.office.com/en-in/article/Create-Custom-Functions-in-Excel-2007-2f06c10b-3622-40d6-a1b2-b6748ae8231f&quot; title=&quot;This Microsoft page&quot;&gt;this Microsoft page&lt;/a&gt;. They have some good additional info there!):&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;In Excel in a Macro enabled file (&apos;.xlsm&apos;) push &lt;code&gt;ALT+F11&lt;/code&gt; to open the &lt;em&gt;Microsoft Visual Basic for Applications&lt;/em&gt; Editor.&lt;/li&gt;\n&lt;li&gt;Add VBA reference to the Regular Expressions library (shamelessly copied from &lt;a href=&quot;/questions/22542834/how-to-use-regular-expressions-regex-in-microsoft-excel-both-in-cell-and-loops#answer-22542835&quot;&gt;Portland Runners++ answer&lt;/a&gt;):\n\n&lt;ol&gt;\n&lt;li&gt;Click on &lt;em&gt;Tools&lt;/em&gt; -&amp;gt; &lt;em&gt;References&lt;/em&gt; (please excuse the german screenshot)\n&lt;img src=&quot;https://i.stack.imgur.com/etyH4.png&quot; alt=&quot;Tools -&gt; References&quot;&gt;&lt;/li&gt;\n&lt;li&gt;Find &lt;em&gt;Microsoft VBScript Regular Expressions 5.5&lt;/em&gt; in the list and tick the checkbox next to it.&lt;/li&gt;\n&lt;li&gt;Click &lt;em&gt;OK&lt;/em&gt;.&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Click on &lt;em&gt;Insert Module&lt;/em&gt;. If you give your module a different name make sure the Module does &lt;em&gt;not&lt;/em&gt; have the same name as the UDF below (e.g. naming the Module &lt;code&gt;Regex&lt;/code&gt; and the function &lt;code&gt;regex&lt;/code&gt; causes &lt;em&gt;#NAME!&lt;/em&gt; errors).&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/nlTpn.png&quot; alt=&quot;Second icon in the icon row -&gt; Module&quot;&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In the big text window in the middle insert the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt; regex(strInput &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, matchPattern &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;Optional&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ByVal&lt;/span&gt; outputPattern &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;$0&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Variant\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; inputRegexObj &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; VBScript_RegExp_55.RegExp, outputRegexObj &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; VBScript_RegExp_55.RegExp, outReplaceRegexObj &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; VBScript_RegExp_55.RegExp\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; inputMatches &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt;, replaceMatches &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt;, replaceMatch &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; replaceNumber &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; inputRegexObj\n        .&lt;span class=&quot;hljs-keyword&quot;&gt;Global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        .MultiLine = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        .IgnoreCase = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n        .Pattern = matchPattern\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; outputRegexObj\n        .&lt;span class=&quot;hljs-keyword&quot;&gt;Global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        .MultiLine = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        .IgnoreCase = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n        .Pattern = &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\$(\\d+)&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; outReplaceRegexObj\n        .&lt;span class=&quot;hljs-keyword&quot;&gt;Global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        .MultiLine = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        .IgnoreCase = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; inputMatches = inputRegexObj.Execute(strInput)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; inputMatches.Count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n        regex = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; replaceMatches = outputRegexObj.Execute(outputPattern)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; replaceMatch &lt;span class=&quot;hljs-keyword&quot;&gt;In&lt;/span&gt; replaceMatches\n            replaceNumber = replaceMatch.SubMatches(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            outReplaceRegexObj.Pattern = &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\$&quot;&lt;/span&gt; &amp;amp; replaceNumber\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; replaceNumber = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n                outputPattern = outReplaceRegexObj.Replace(outputPattern, inputMatches(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).Value)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;Else&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; replaceNumber &amp;gt; inputMatches(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).SubMatches.Count &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n                    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;regex = &quot;A to high $ tag found. Largest allowed is $&quot; &amp;amp; inputMatches(0).SubMatches.Count &amp;amp; &quot;.&quot;&lt;/span&gt;\n                    regex = CVErr(xlErrValue)\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;Exit&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;Else&lt;/span&gt;\n                    outputPattern = outReplaceRegexObj.Replace(outputPattern, inputMatches(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).SubMatches(replaceNumber - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n                &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt;\n        regex = outputPattern\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Save and close the &lt;em&gt;Microsoft Visual Basic for Applications&lt;/em&gt; Editor window.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Expanding on &lt;a href=&quot;https://stackoverflow.com/users/1975049/patszim&quot;&gt;patszim&lt;/a&gt;&apos;s &lt;a href=&quot;https://stackoverflow.com/a/28176749/1699071&quot;&gt;answer&lt;/a&gt; for those in a rush.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Open Excel workbook.&lt;/li&gt;\n&lt;li&gt;&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;F11&lt;/kbd&gt; to open VBA/Macros window.&lt;/li&gt;\n&lt;li&gt;Add reference to regex under &lt;strong&gt;&lt;em&gt;Tools&lt;/em&gt;&lt;/strong&gt; then &lt;strong&gt;&lt;em&gt;References&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/sKCdA.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/sKCdA.png&quot; alt=&quot;![Excel VBA Form add references&quot;&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;and selecting &lt;strong&gt;Microsoft VBScript Regular Expression 5.5&lt;/strong&gt;&lt;br&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/nmSgP.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/nmSgP.png&quot; alt=&quot;![Excel VBA add regex reference&quot;&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Insert a new module (code needs to reside in the module otherwise it doesn&apos;t work).&lt;br&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/RaLQ0.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/RaLQ0.png&quot; alt=&quot;![Excel VBA insert code module&quot;&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;In the newly inserted module,&lt;br&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/DFJ7F.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/DFJ7F.png&quot; alt=&quot;![Excel VBA insert code into module&quot;&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;add the following code:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt; RegxFunc(strInput &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, regexPattern &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; regEx &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; RegExp\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; regEx\n        .&lt;span class=&quot;hljs-keyword&quot;&gt;Global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        .MultiLine = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        .IgnoreCase = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n        .pattern = regexPattern\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; regEx.Test(strInput) &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; matches = regEx.Execute(strInput)\n        RegxFunc = matches(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).Value\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Else&lt;/span&gt;\n        RegxFunc = &lt;span class=&quot;hljs-string&quot;&gt;&quot;not matched&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The regex pattern is placed in one of the cells and &lt;strong&gt;&lt;em&gt;absolute referencing&lt;/em&gt;&lt;/strong&gt; is used on it.\n&lt;a href=&quot;https://i.stack.imgur.com/XnS6t.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/XnS6t.png&quot; alt=&quot;![Excel regex function in-cell usage&quot;&gt;&lt;/a&gt;\nFunction will be tied to workbook that its created in.&lt;br&gt;\nIf there&apos;s a need for it to be used in different workbooks, store the function in &lt;strong&gt;Personal.XLSB&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Here is my attempt:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt; RegParse(&lt;span class=&quot;hljs-keyword&quot;&gt;ByVal&lt;/span&gt; pattern &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;ByVal&lt;/span&gt; html &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; regex   &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; RegExp\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; regex = &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; RegExp\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; regex\n        .IgnoreCase = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;&apos;ignoring cases while regex engine performs the search.&lt;/span&gt;\n        .pattern = pattern  &lt;span class=&quot;hljs-comment&quot;&gt;&apos;declaring regex pattern.&lt;/span&gt;\n        .&lt;span class=&quot;hljs-keyword&quot;&gt;Global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;&apos;restricting regex to find only first match.&lt;/span&gt;\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; .Test(html) &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;         &lt;span class=&quot;hljs-comment&quot;&gt;&apos;Testing if the pattern matches or not&lt;/span&gt;\n            mStr = .Execute(html)(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)        &lt;span class=&quot;hljs-comment&quot;&gt;&apos;.Execute(html)(0) will provide the String which matches with Regex&lt;/span&gt;\n            RegParse = .Replace(mStr, &lt;span class=&quot;hljs-string&quot;&gt;&quot;$1&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;&apos;.Replace function will replace the String with whatever is in the first set of braces - $1.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Else&lt;/span&gt;\n            RegParse = &lt;span class=&quot;hljs-string&quot;&gt;&quot;#N/A&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; \n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This isn&apos;t a direct answer but may provide a more efficient alternative for your consideration. Which is that Google Sheets has several built in &lt;a href=&quot;https://support.google.com/docs/answer/3098292&quot; rel=&quot;nofollow noreferrer&quot;&gt;Regex Functions&lt;/a&gt; these can be very convenient and help circumvent some of the technical procedures in Excel. Obviously there are some advantages to using Excel on your PC but for the large majority of users Google Sheets will offer an identical experience and may offer some benefits in portability and sharing of documents.&lt;/p&gt;\n&lt;p&gt;They offer&lt;/p&gt;\n&lt;p&gt;REGEXEXTRACT: Extracts matching substrings according to a regular expression.&lt;/p&gt;\n&lt;p&gt;REGEXREPLACE: Replaces part of a text string with a different text string using regular expressions.&lt;/p&gt;\n&lt;p&gt;SUBSTITUTE: Replaces existing text with new text in a string.&lt;/p&gt;\n&lt;p&gt;REPLACE: Replaces part of a text string with a different text string.&lt;/p&gt;\n&lt;p&gt;You can type these directly into a cell like so and will produce whatever you&apos;d like&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;=REGEXMATCH(A2, &lt;span class=&quot;hljs-string&quot;&gt;&quot;[0-9]+&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;They also work quite well in combinations with other functions such as &lt;strong&gt;IF&lt;/strong&gt; statements like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;IF&lt;/span&gt;(REGEXMATCH(E8,&lt;span class=&quot;hljs-string&quot;&gt;&quot;MiB&quot;&lt;/span&gt;),REGEXEXTRACT(E8,&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\d*\\.\\d*|\\d*&quot;&lt;/span&gt;)/&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;IF&lt;/span&gt;(REGEXMATCH(E8,&lt;span class=&quot;hljs-string&quot;&gt;&quot;GiB&quot;&lt;/span&gt;),REGEXEXTRACT(E8,&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\d*\\.\\d*|\\d*&quot;&lt;/span&gt;),&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ycpdK.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ycpdK.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Hopefully this provides a simple workaround for those users who feel daunted by the VBS component of Excel.&lt;/p&gt;\n    ","\n&lt;p&gt;To add to the valuable content, I would like to create this reminder on why sometimes RegEx within VBA is not ideal. Not all expressions are supported, but instead may throw an &lt;code&gt;Error 5017&lt;/code&gt; and may leave the author guessing (which I am a victim of myself).&lt;/p&gt;\n\n&lt;p&gt;Whilst we can find some &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions//1400241x%28v%3dvs.85%29&quot; rel=&quot;noreferrer&quot;&gt;sources&lt;/a&gt; on what &lt;strong&gt;is&lt;/strong&gt; supported, it would be helpfull to know which metacharacters etc. are &lt;strong&gt;not&lt;/strong&gt; supported. A more in-depth explaination can be found &lt;a href=&quot;https://www.regular-expressions.info/vbscript.html&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;. Mentioned in this source:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;em&gt;&quot;Although &quot;VBScripts regular expression ... version 5.5 implements quite a few essential regex features that were missing in previous versions of VBScript. ... JavaScript and VBScript implement Perl-style regular expressions. However, they lack quite a number of advanced features available in Perl and other modern regular expression flavors:&quot;&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;So, &lt;strong&gt;not&lt;/strong&gt; supported are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Start of String ancor &lt;code&gt;\\A&lt;/code&gt;, alternatively use the &lt;code&gt;^&lt;/code&gt; caret to match postion before 1st char in string&lt;/li&gt;\n&lt;li&gt;End of String ancor &lt;code&gt;\\Z&lt;/code&gt;, alternatively use the &lt;code&gt;$&lt;/code&gt; dollar sign to match postion after last char in string&lt;/li&gt;\n&lt;li&gt;Positive LookBehind, e.g.: &lt;code&gt;(?&amp;lt;=a)b&lt;/code&gt; (whilst postive LookAhead &lt;strong&gt;is&lt;/strong&gt; supported)&lt;/li&gt;\n&lt;li&gt;Negative LookBehind, e.g.: &lt;code&gt;(?&amp;lt;!a)b&lt;/code&gt; (whilst negative LookAhead &lt;strong&gt;is&lt;/strong&gt; supported)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.regular-expressions.info/atomic.html&quot; rel=&quot;noreferrer&quot;&gt;Atomic Grouping&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.regular-expressions.info/possessive.html&quot; rel=&quot;noreferrer&quot;&gt;Possessive Quantifiers&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Unicode e.g.: &lt;code&gt;\\{uFFFF}&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.regular-expressions.info/named.html&quot; rel=&quot;noreferrer&quot;&gt;Named Capturing Groups&lt;/a&gt;. Alternatively use &lt;a href=&quot;https://www.regular-expressions.info/brackets.html&quot; rel=&quot;noreferrer&quot;&gt;Numbered Capturing Groups&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Inline modifiers, e.g.: &lt;code&gt;/i&lt;/code&gt; (case sensitivity) or &lt;code&gt;/g&lt;/code&gt; (global) etc. Set these through the &lt;code&gt;RegExp&lt;/code&gt; object properties &amp;gt; &lt;code&gt;RegExp.Global = True&lt;/code&gt; and &lt;code&gt;RegExp.IgnoreCase = True&lt;/code&gt; if available.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.regular-expressions.info/conditional.html&quot; rel=&quot;noreferrer&quot;&gt;Conditionals&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.regular-expressions.info/freespacing.html#freecomment&quot; rel=&quot;noreferrer&quot;&gt;Regular Expression Comments&lt;/a&gt;. Add these with regular &lt;code&gt;&apos;&lt;/code&gt; comments in script &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I already hit a wall more than once using regular expressions within VBA. Usually with &lt;code&gt;LookBehind&lt;/code&gt; but sometimes I even forget the modifiers. I have not experienced all these above mentioned backdrops myself but thought I would try to be extensive referring to some more in-depth information. Feel free to comment/correct/add. Big shout out to &lt;a href=&quot;https://www.regular-expressions.info/&quot; rel=&quot;noreferrer&quot;&gt;regular-expressions.info&lt;/a&gt; for a wealth of information.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; You have mentioned regular VBA methods and functions, and I can confirm they (at least to myself) have been helpful in their own ways where RegEx would fail.&lt;/p&gt;\n    ","\n&lt;p&gt;I needed to use this as a cell function (like &lt;code&gt;SUM&lt;/code&gt; or &lt;code&gt;VLOOKUP&lt;/code&gt;) and found that it was easy to:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Make sure you are in a Macro Enabled Excel File (save as xlsm).&lt;/li&gt;\n&lt;li&gt;Open developer tools &lt;kbd&gt;Alt&lt;/kbd&gt; + &lt;kbd&gt;F11&lt;/kbd&gt;&lt;/li&gt;\n&lt;li&gt;Add &lt;em&gt;Microsoft VBScript Regular Expressions 5.5&lt;/em&gt; as in other answers&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Create the following function either in workbook or in its own module:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt; REGPLACE(myRange &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range, matchPattern &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, outputPattern &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Variant\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; regex &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; VBScript_RegExp_55.RegExp\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strInput &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n\n    strInput = myRange.Value\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; regex\n        .&lt;span class=&quot;hljs-keyword&quot;&gt;Global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        .MultiLine = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        .IgnoreCase = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n        .Pattern = matchPattern\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n\n    REGPLACE = regex.Replace(strInput, outputPattern)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Then you can use in cell with &lt;code&gt;=REGPLACE(B1, &quot;(\\w) (\\d+)&quot;, &quot;$1$2&quot;)&lt;/code&gt; (ex: &quot;A 243&quot; to &quot;A243&quot;)&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Here is a  &lt;code&gt;regex_subst()&lt;/code&gt; function. Examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;=regex_subst(&lt;span class=&quot;hljs-string&quot;&gt;&quot;watermellon&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;[aeiou]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n---&amp;gt; wtrmlln\n=regex_subst(&lt;span class=&quot;hljs-string&quot;&gt;&quot;watermellon&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;[^aeiou]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n---&amp;gt; aeeo\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is the simplified code (simpler for me, anyway).  I couldn&apos;t figure out how to build a suitable output pattern using the above to work like my examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt; regex_subst( _\n     strInput &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; _\n   , matchPattern &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; _\n   , &lt;span class=&quot;hljs-keyword&quot;&gt;Optional&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ByVal&lt;/span&gt; replacePattern &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; _\n) &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Variant\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; inputRegexObj &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;New&lt;/span&gt; VBScript_RegExp_55.RegExp\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; inputRegexObj\n        .&lt;span class=&quot;hljs-keyword&quot;&gt;Global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        .MultiLine = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        .IgnoreCase = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n        .Pattern = matchPattern\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n\n    regex_subst = inputRegexObj.Replace(strInput, replacePattern)\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;em&gt;I don&apos;t want to have to enable a reference library as I need my scripts to be portable.&lt;/em&gt; The &lt;code&gt;Dim foo As New VBScript_RegExp_55.RegExp&lt;/code&gt; line caused &lt;code&gt;User Defined Type Not Defined&lt;/code&gt; errors, but I found a solution that worked for me.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Update RE comments w/ @chrisneilsen :&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;I was under the impression that enabling a reference library was tied to the local computers settings, but it is in fact, tied directly to the workbook.&lt;/strong&gt; So, you can enable a reference library, share a macro enabled workbook and the end user wouldn&apos;t have to enable the library as well. Caveat: &lt;em&gt;The advantage to Late Binding is that the developer does not have to worry about the wrong version of an object library being installed on the user&apos;s computer.&lt;/em&gt; This likely would not be an issue w/ the &lt;code&gt;VBScript_RegExp_55.RegExp&lt;/code&gt; library, but I&apos;m not sold that the &quot;performance&quot; benifit is worth it for me at this time, as we are talking imperceptible milliseconds in my code. I felt this deserved an update to help others understand. If you enable the reference library, you can use &quot;early bind&quot;, but &lt;strong&gt;if you don&apos;t, as far as I can tell, the code will work fine, but you need to &quot;late bind&quot;&lt;/strong&gt; and loose on some performance/debugging features.&lt;/p&gt;\n&lt;p&gt;Source: &lt;a href=&quot;https://peltiertech.com/Excel/EarlyLateBinding.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://peltiertech.com/Excel/EarlyLateBinding.html&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;What you&apos;ll want to do is put an example string in cell &lt;code&gt;A1&lt;/code&gt;, then test your &lt;code&gt;strPattern&lt;/code&gt;. Once that&apos;s working adjust then &lt;code&gt;rng&lt;/code&gt; as desired.&lt;/p&gt;\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; RegExSearch()\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;https://stackoverflow.com/questions/22542834/how-to-use-regular-expressions-regex-in-microsoft-excel-both-in-cell-and-loops&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;https://wellsr.com/vba/2018/excel/vba-regex-regular-expressions-guide/&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;https://www.vitoshacademy.com/vba-regex-in-excel/&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; regexp &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;Dim regex As New VBScript_RegExp_55.regexp &apos;Caused &quot;User Defined Type Not Defined&quot; Error&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; rng &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range, rcell &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; strInput &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, strPattern &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; regexp = CreateObject(&lt;span class=&quot;hljs-string&quot;&gt;&quot;vbscript.regexp&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; rng = ActiveSheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A1:A1&quot;&lt;/span&gt;)\n        \n    strPattern = &lt;span class=&quot;hljs-string&quot;&gt;&quot;([a-z]{2})([0-9]{8})&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&apos;Search for 2 Letters then 8 Digits Eg: XY12345678 = Matched&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; regexp\n        .&lt;span class=&quot;hljs-keyword&quot;&gt;Global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n        .MultiLine = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n        .ignoreCase = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        .Pattern = strPattern\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Each&lt;/span&gt; rcell &lt;span class=&quot;hljs-keyword&quot;&gt;In&lt;/span&gt; rng.Cells\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; strPattern &amp;lt;&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n            strInput = rcell.Value\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt; regexp.test(strInput) &lt;span class=&quot;hljs-keyword&quot;&gt;Then&lt;/span&gt;\n                MsgBox rcell &amp;amp; &lt;span class=&quot;hljs-string&quot;&gt;&quot; Matched in Cell &quot;&lt;/span&gt; &amp;amp; rcell.Address\n            &lt;span class=&quot;hljs-keyword&quot;&gt;Else&lt;/span&gt;\n                MsgBox &lt;span class=&quot;hljs-string&quot;&gt;&quot;No Matches!&quot;&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;If&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":277,"title":"How to use Regular Expressions (Regex) in Microsoft Excel both in-cell and loops","content":"\n                \n&lt;p&gt;How can I use regular expressions in Excel and take advantage of Excel&apos;s powerful grid-like setup for data manipulation?&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;In-cell function to return a matched pattern or replaced value in a string.&lt;/li&gt;\n&lt;li&gt;Sub to loop through a column of data and extract matches to adjacent cells.&lt;/li&gt;\n&lt;li&gt;What setup is necessary?&lt;/li&gt;\n&lt;li&gt;What are Excel&apos;s special characters for Regular expressions?&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I understand Regex is not ideal for many situations (&lt;a href=&quot;https://stackoverflow.com/a/4098123/2521004&quot;&gt;To use or not to use regular expressions?&lt;/a&gt;) since excel can use &lt;code&gt;Left&lt;/code&gt;, &lt;code&gt;Mid&lt;/code&gt;, &lt;code&gt;Right&lt;/code&gt;, &lt;code&gt;Instr&lt;/code&gt; type commands for similar manipulations.  &lt;/p&gt;\n    ","slug":"how-to-use-regular-expressions-(regex)-in-microsoft-excel-both-in-cell-and-loops-1657387487287","postType":"QUESTION","createdAt":"2022-07-09T17:24:47.000Z","updatedAt":"2022-07-09T17:24:47.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Why is using \"for...in\" for array iteration a bad idea?","slug":"why-is-using-\"for...in\"-for-array-iteration-a-bad-idea-1657384653458"},{"title":"How do I detect a click outside an element?","slug":"how-do-i-detect-a-click-outside-an-element-1657387505351"},{"title":"Why is “while( !feof(file) )” always wrong?","slug":"why-is-\"while(-!feof(file)-)\"-always-wrong-1657384367349"},{"title":"Of the many findElement(s)/By functions in Selenium, when would you use one over the other?","slug":"of-the-many-findelement(s)by-functions-in-selenium-when-would-you-use-one-over-the-other-1657388412658"},{"title":"Importing files from different folder","slug":"importing-files-from-different-folder-1657388203798"},{"title":"Why aren't variable-length arrays part of the C++ standard?","slug":"why-aren't-variable-length-arrays-part-of-the-c++-standard-1657384712975"},{"title":"How can I access an array/object?","slug":"how-can-i-access-an-arrayobject-1657387395541"},{"title":"Crash or \"segmentation fault\" when data is copied/scanned/read to an uninitialized pointer","slug":"crash-or-\"segmentation-fault\"-when-data-is-copiedscannedread-to-an-uninitialized-pointer-1657387520581"},{"title":"What is the !! (not not) operator in JavaScript?","slug":"what-is-the-!!-(not-not)-operator-in-javascript-1657387947844"},{"title":"How do I add a delay in a JavaScript loop?","slug":"how-do-i-add-a-delay-in-a-javascript-loop-1657388544679"},{"title":"Undefined behavior and sequence points","slug":"undefined-behavior-and-sequence-points-1657384639493"},{"title":"How do you access the matched groups in a JavaScript regular expression?","slug":"how-do-you-access-the-matched-groups-in-a-javascript-regular-expression-1657388233817"},{"title":"Sort array of objects by string property value","slug":"sort-array-of-objects-by-string-property-value-1657384860090"},{"title":"How do I generate random integers within a specific range in Java?","slug":"how-do-i-generate-random-integers-within-a-specific-range-in-java-1657385458888"},{"title":"What is the meaning of single and double underscore before an object name?","slug":"what-is-the-meaning-of-single-and-double-underscore-before-an-object-name-1657387926929"},{"title":"Dynamically select data frame columns using $ and a character value","slug":"dynamically-select-data-frame-columns-using-dollar-and-a-character-value-1657387836662"},{"title":"Example images for code and mark-up Q&As [closed]","slug":"example-images-for-code-and-mark-up-qandas-closed-1657387690222"},{"title":"Using LIMIT within GROUP BY to get N results per group?","slug":"using-limit-within-group-by-to-get-n-results-per-group-1657388324167"},{"title":"Why does Spring MVC respond with a 404 and report \"No mapping found for HTTP request with URI [...] in DispatcherServlet\"?","slug":"why-does-spring-mvc-respond-with-a-404-and-report-\"no-mapping-found-for-http-request-with-uri-...-in-dispatcherservlet\"-1657387995250"},{"title":"Error in finding last used cell in Excel with VBA","slug":"error-in-finding-last-used-cell-in-excel-with-vba-1657384584748"}]},"__N_SSG":true}