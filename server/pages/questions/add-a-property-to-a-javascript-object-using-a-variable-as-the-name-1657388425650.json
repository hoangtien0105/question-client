{"pageProps":{"data":{"answer":["\n&lt;p&gt;You can use this equivalent syntax:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj[name] = value\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj = {};\nobj[&lt;span class=&quot;hljs-string&quot;&gt;&quot;the_key&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;the_value&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or with ES6 features:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; key = &lt;span class=&quot;hljs-string&quot;&gt;&quot;the_key&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj = {\n  [key]: &lt;span class=&quot;hljs-string&quot;&gt;&quot;the_value&quot;&lt;/span&gt;,\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;in both examples, &lt;code&gt;console.log(obj)&lt;/code&gt; will return: &lt;code&gt;{ the_key: &apos;the_value&apos; }&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;With &lt;a href=&quot;https://kangax.github.io/compat-table/es6/&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript 2015&lt;/a&gt; you can do it directly in object declaration using bracket notation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n  [key]: value\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where &lt;code&gt;key&lt;/code&gt; can be any sort of expression (e.g. a variable) returning a value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n  [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;World&apos;&lt;/span&gt;,\n  [x + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n  [someObject.&lt;span class=&quot;hljs-title function_&quot;&gt;getId&lt;/span&gt;()]: someVar\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can even make List of objects like this &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; feeTypeList = [];\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#feeTypeTable &amp;gt; tbody &amp;gt; tr&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;i, el&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; feeType = {};\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; $ID = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;input[id^=txtFeeType]&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;);\n\n    feeType[&lt;span class=&quot;hljs-string&quot;&gt;&quot;feeTypeID&quot;&lt;/span&gt;] = $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#ddlTerm&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;();\n    feeType[&lt;span class=&quot;hljs-string&quot;&gt;&quot;feeTypeName&quot;&lt;/span&gt;] = $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#ddlProgram&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;();\n    feeType[&lt;span class=&quot;hljs-string&quot;&gt;&quot;feeTypeDescription&quot;&lt;/span&gt;] = $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#ddlBatch&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;();\n\n    feeTypeList.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(feeType);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are two different notations to access object properties&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Dot&lt;/strong&gt; notation: &lt;em&gt;myObj.prop1&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Bracket&lt;/strong&gt; notation: &lt;em&gt;myObj[&quot;prop1&quot;]&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Dot notation is fast and easy but you &lt;em&gt;must&lt;/em&gt; use the actual property name explicitly.  No substitution, variables, etc.   &lt;/p&gt;\n\n&lt;p&gt;Bracket notation is open ended.  It uses a string but you can produce the string using any legal js code.  You may specify the string as literal (though in this case dot notation would read easier) or use a variable or calculate in some way.&lt;/p&gt;\n\n&lt;p&gt;So, these all set the &lt;em&gt;myObj&lt;/em&gt; property named &lt;em&gt;prop1&lt;/em&gt; to the value &lt;em&gt;Hello&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// quick easy-on-the-eye dot notation&lt;/span&gt;\nmyObj.&lt;span class=&quot;hljs-property&quot;&gt;prop1&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// brackets+literal&lt;/span&gt;\nmyObj[&lt;span class=&quot;hljs-string&quot;&gt;&quot;prop1&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// using a variable&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-string&quot;&gt;&quot;prop1&quot;&lt;/span&gt;; \nmyObj[x] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;                     \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// calculate the accessor string in some weird way&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numList = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\nmyObj[ &lt;span class=&quot;hljs-string&quot;&gt;&quot;prop&quot;&lt;/span&gt; + numList[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] ] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;     \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Pitfalls:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;myObj.[xxxx] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;      &lt;span class=&quot;hljs-comment&quot;&gt;// wrong: mixed notations, syntax fail&lt;/span&gt;\nmyObj[prop1] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;      &lt;span class=&quot;hljs-comment&quot;&gt;// wrong: this expects a variable called prop1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;tl;dnr&lt;/strong&gt;: If you want to compute or reference the key you &lt;em&gt;must&lt;/em&gt; use &lt;em&gt;bracket notation&lt;/em&gt;. If you are using the key explicitly, then use &lt;em&gt;dot notation&lt;/em&gt; for simple clear code.&lt;/p&gt;\n\n&lt;p&gt;Note: there are some other good and correct answers but I personally found them a bit brief coming from a low familiarity with JS on-the-fly quirkiness.  This might be useful to some people.   &lt;/p&gt;\n    ","\n&lt;p&gt;With lodash, you can create new object like this &lt;a href=&quot;https://lodash.com/docs/#set&quot; rel=&quot;nofollow noreferrer&quot;&gt;_.set&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj = _.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;({}, key, val);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or you can set to existing object like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; existingObj = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; };\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(existingObj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// existingObj will be: { a: 5 }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You should take care if you want to use dot (&quot;.&quot;) in your path, because lodash can set hierarchy, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;({}, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a.b.c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// { &quot;a&quot;: { &quot;b&quot;: { &quot;c&quot;: &quot;d&quot; } } }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;First we need to define key as variable and then we need to assign as key as object., for example\n&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = {&lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;dynamic_key&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;dynamic_value&apos;&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key = data.&lt;span class=&quot;hljs-property&quot;&gt;key&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { [key]: data.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Related to the subject, not specifically for jquery though. I used this in ec6 react projects, maybe helps someone:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setState&lt;/span&gt;({ [&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${name}&lt;/span&gt;`&lt;/span&gt;]: value}, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;State updated: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;state&lt;/span&gt;[name]));\n    });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;PS: Please mind the quote character.&lt;/p&gt;\n    ","\n&lt;p&gt;With the advent of ES2015  &lt;a href=&quot;http://devdocs.io/javascript/global_objects/object/assign&quot; rel=&quot;nofollow noreferrer&quot;&gt;Object.assign&lt;/a&gt; and &lt;a href=&quot;http://devdocs.io/javascript/operators/object_initializer&quot; rel=&quot;nofollow noreferrer&quot;&gt;computed property names&lt;/a&gt; the OP&apos;s code boils down to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;assign&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;({}, $(itemsFromDom).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i, el&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({[el.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;]: el.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;})));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;ajavascript have two type of annotation for fetching javascript Object properties:&lt;/p&gt;\n\n&lt;p&gt;Obj = {};&lt;/p&gt;\n\n&lt;p&gt;1)  (.) annotation eg. Obj.id\nthis will only work if the object already have a property with name &apos;id&apos;&lt;/p&gt;\n\n&lt;p&gt;2) ([]) annotation  eg . Obj[id] here if the object does not have any property with name &apos;id&apos;,it will create a new property with name &apos;id&apos;.&lt;/p&gt;\n\n&lt;p&gt;so for below example:&lt;/p&gt;\n\n&lt;p&gt;A new property will be created always when you write Obj[name].\nAnd if the property already exist with the same name it will override it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {}\n    &lt;span class=&quot;hljs-title function_&quot;&gt;jQuery&lt;/span&gt;(itemsFromDom).&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;hljs-title function_&quot;&gt;jQuery&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; name = element.&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = element.&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;)\n      &lt;span class=&quot;hljs-comment&quot;&gt;// This will work&lt;/span&gt;\n      obj[name]= value;\n    })\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to add fields to an object dynamically, simplest way to do it is as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; params = [\n  { &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;k1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; },\n  { &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;k2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; },\n  { &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;k3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; },\n];\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data = {};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; params.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n  data[params[i].&lt;span class=&quot;hljs-property&quot;&gt;key&lt;/span&gt;] = params[i].&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; { k1: 1, k2: 2, k3: 3 }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The 3 ways to access the object value\nWe can output the object value by passing in the appropriate key. Because I used emoji as the key in my example, it&apos;s a bit tricky. So let&apos;s look at a easier example.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; me = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;samantha&apos;&lt;/span&gt;,\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 1. Dot notation&lt;/span&gt;\nme.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// samantha&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2. Bracket notation (string key)&lt;/span&gt;\nme[&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// samantha&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 3. Bracket notation (variable key)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; key = &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;;\nme[key]; &lt;span class=&quot;hljs-comment&quot;&gt;// samantha&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.samanthaming.com/tidbits/37-dynamic-property-name-with-es6/&quot; rel=&quot;nofollow noreferrer&quot;&gt;know more&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you have object, you can make array of keys, than map through, and create new object from previous object keys, and values.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(myObject)\n.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt; =&amp;gt;&lt;/span&gt;{\n &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {};\n obj[el]=myObject[el].&lt;span class=&quot;hljs-property&quot;&gt;code&lt;/span&gt;;\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;objectname.newProperty = value;&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = [{\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;BMW&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;25641&apos;&lt;/span&gt;\n  }, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Apple&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;45876&apos;&lt;/span&gt;\n  },\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Benz&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;65784&apos;&lt;/span&gt;\n  },\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Toyota&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;254&apos;&lt;/span&gt;\n  }\n]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;carsList&lt;/span&gt;: [{\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Ford&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;47563&apos;&lt;/span&gt;\n  }, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Toyota&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;254&apos;&lt;/span&gt;\n  }],\n  &lt;span class=&quot;hljs-attr&quot;&gt;pastriesList&lt;/span&gt;: [],\n  &lt;span class=&quot;hljs-attr&quot;&gt;fruitsList&lt;/span&gt;: [{\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Apple&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;45876&apos;&lt;/span&gt;\n  }, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Pineapple&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;84523&apos;&lt;/span&gt;\n  }]\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; keys = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(obj);\n\nresult = {};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(key &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; keys){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a =  [...data,...obj[key]];\n    result[key] = a;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":562,"title":"Add a property to a JavaScript object using a variable as the name?","content":"\n                \n&lt;p&gt;I&apos;m pulling items out of the DOM with jQuery and want to set a property on an object using the &lt;code&gt;id&lt;/code&gt; of the DOM element. &lt;/p&gt;\n\n&lt;h3&gt;Example&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;jQuery&lt;/span&gt;(itemsFromDom).&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;hljs-title function_&quot;&gt;jQuery&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; name = element.&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = element.&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;)\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Here is the problem&lt;/span&gt;\n  obj.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = value\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If &lt;code&gt;itemsFromDom&lt;/code&gt; includes an element with an &lt;code&gt;id&lt;/code&gt; of &quot;myId&quot;, I want &lt;code&gt;obj&lt;/code&gt; to have a property named &quot;myId&quot;. The above gives me &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;How do I name a property of an object using a variable using JavaScript?&lt;/p&gt;\n    ","slug":"add-a-property-to-a-javascript-object-using-a-variable-as-the-name-1657388425650","postType":"QUESTION","createdAt":"2022-07-09T17:40:25.000Z","updatedAt":"2022-07-09T17:40:25.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How to make function decorators and chain them together?","slug":"how-to-make-function-decorators-and-chain-them-together-1657388180803"},{"title":"List of lists changes reflected across sublists unexpectedly","slug":"list-of-lists-changes-reflected-across-sublists-unexpectedly-1657384393720"},{"title":"Transitions on the CSS display property","slug":"transitions-on-the-css-display-property-1657387761601"},{"title":"What are the basic rules and idioms for operator overloading?","slug":"what-are-the-basic-rules-and-idioms-for-operator-overloading-1657384449752"},{"title":"Servlet returns \"HTTP Status 404 The requested resource (/servlet) is not available\"","slug":"servlet-returns-\"http-status-404-the-requested-resource-(servlet)-is-not-available\"-1657384850661"},{"title":"Can I mix MySQL APIs in PHP?","slug":"can-i-mix-mysql-apis-in-php-1657384597444"},{"title":"What is The Rule of Three?","slug":"what-is-the-rule-of-three-1657384390295"},{"title":"What is the difference between const int*, const int * const, and int const *?","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604"},{"title":"What's the difference between INNER JOIN, LEFT JOIN, RIGHT JOIN and FULL JOIN? [duplicate]","slug":"what's-the-difference-between-inner-join-left-join-right-join-and-full-join-duplicate-1657388082887"},{"title":"How do I detect collision in pygame?","slug":"how-do-i-detect-collision-in-pygame-1657387496338"},{"title":"How can I access the contents of an iframe with JavaScript/jQuery?","slug":"how-can-i-access-the-contents-of-an-iframe-with-javascriptjquery-1657388369923"},{"title":"Accessing an array out of bounds gives no error, why?","slug":"accessing-an-array-out-of-bounds-gives-no-error-why-1657387979932"},{"title":"JSTL in JSF2 Facelets... makes sense?","slug":"jstl-in-jsf2-facelets...-makes-sense-1657387667435"},{"title":"Is Java \"pass-by-reference\" or \"pass-by-value\"?","slug":"is-java-\"pass-by-reference\"-or-\"pass-by-value\"-1657384319828"},{"title":"Disable same origin policy in Chrome","slug":"disable-same-origin-policy-in-chrome-1657387743804"},{"title":"Is it possible to escape regex metacharacters reliably with sed","slug":"is-it-possible-to-escape-regex-metacharacters-reliably-with-sed-1657388428795"},{"title":"input() error - NameError: name '...' is not defined","slug":"input()-error-nameerror:-name-'...'-is-not-defined-1657388497243"},{"title":"Prototypical inheritance - writing up [duplicate]","slug":"prototypical-inheritance-writing-up-duplicate-1657385478064"},{"title":"How can I return pivot table output in MySQL?","slug":"how-can-i-return-pivot-table-output-in-mysql-1657384715043"},{"title":"What do 'lazy' and 'greedy' mean in the context of regular expressions?","slug":"what-do-'lazy'-and-'greedy'-mean-in-the-context-of-regular-expressions-1657388200552"}]},"__N_SSG":true}