{"pageProps":{"data":{"answer":["\n&lt;p&gt;This &lt;a href=&quot;http://www.movable-type.co.uk/scripts/latlong.html&quot; rel=&quot;noreferrer&quot;&gt;link&lt;/a&gt; might be helpful to you, as it details the use of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Haversine_formula&quot; rel=&quot;noreferrer&quot;&gt;Haversine formula&lt;/a&gt; to calculate the distance.&lt;/p&gt;\n\n&lt;p&gt;Excerpt:&lt;/p&gt;\n\n\n\n&lt;blockquote&gt;\n  &lt;p&gt;This script [in Javascript] calculates great-circle distances between the two points \n  that is, the shortest distance over the earths surface  using the\n  Haversine formula.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getDistanceFromLatLonInKm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;lat1,lon1,lat2,lon2&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; R = &lt;span class=&quot;hljs-number&quot;&gt;6371&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Radius of the earth in km&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dLat = &lt;span class=&quot;hljs-title function_&quot;&gt;deg2rad&lt;/span&gt;(lat2-lat1);  &lt;span class=&quot;hljs-comment&quot;&gt;// deg2rad below&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dLon = &lt;span class=&quot;hljs-title function_&quot;&gt;deg2rad&lt;/span&gt;(lon2-lon1); \n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = \n    &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;sin&lt;/span&gt;(dLat/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) * &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;sin&lt;/span&gt;(dLat/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) +\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;cos&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;deg2rad&lt;/span&gt;(lat1)) * &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;cos&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;deg2rad&lt;/span&gt;(lat2)) * \n    &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;sin&lt;/span&gt;(dLon/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) * &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;sin&lt;/span&gt;(dLon/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n    ; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;atan2&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;sqrt&lt;/span&gt;(a), &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-a)); \n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = R * c; &lt;span class=&quot;hljs-comment&quot;&gt;// Distance in km&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deg2rad&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;deg&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; deg * (&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;PI&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;180&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I needed to calculate a lot of distances between the points for my project, so I went ahead and tried to optimize the code, I have found here. On average in different browsers my new implementation &lt;strong&gt;runs 2 times faster&lt;/strong&gt; than the most upvoted answer.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;distance&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;lat1, lon1, lat2, lon2&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;hljs-number&quot;&gt;0.017453292519943295&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;// Math.PI / 180&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cos&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt; - &lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;((lat2 - lat1) * p)/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + \n          &lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;(lat1 * p) * &lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;(lat2 * p) * \n          (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;hljs-title function_&quot;&gt;c&lt;/span&gt;((lon2 - lon1) * p))/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12742&lt;/span&gt; * &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;asin&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;sqrt&lt;/span&gt;(a)); &lt;span class=&quot;hljs-comment&quot;&gt;// 2 * R; R = 6371 km&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can play with my jsPerf and see the &lt;a href=&quot;http://jsperf.com/haversine-salvador/8&quot; rel=&quot;noreferrer&quot;&gt;results here&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Recently I needed to do the same in python, so here is a &lt;strong&gt;python implementation&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; math &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cos, asin, sqrt, pi\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;distance&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;lat1, lon1, lat2, lon2&lt;/span&gt;):\n    p = pi/&lt;span class=&quot;hljs-number&quot;&gt;180&lt;/span&gt;\n    a = &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt; - cos((lat2-lat1)*p)/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + cos(lat1*p) * cos(lat2*p) * (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-cos((lon2-lon1)*p))/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12742&lt;/span&gt; * asin(sqrt(a)) &lt;span class=&quot;hljs-comment&quot;&gt;#2*R*asin...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And for the sake of completeness: &lt;a href=&quot;https://en.wikipedia.org/wiki/Haversine_formula&quot; rel=&quot;noreferrer&quot;&gt;Haversine&lt;/a&gt; on Wikipedia.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a C# Implementation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DistanceAlgorithm&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; PIx = &lt;span class=&quot;hljs-number&quot;&gt;3.141592653589793&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; RADIUS = &lt;span class=&quot;hljs-number&quot;&gt;6378.16&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Convert degrees to Radians&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;x&quot;&amp;gt;&lt;/span&gt;Degrees&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;The equivalent in radians&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Radians&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; x&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x * PIx / &lt;span class=&quot;hljs-number&quot;&gt;180&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Calculate the distance between two places.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;lon1&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;lat1&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;lon2&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;lat2&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DistanceBetweenPlaces&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; lon1,\n        &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; lat1,\n        &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; lon2,\n        &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; lat2&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; dlon = Radians(lon2 - lon1);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; dlat = Radians(lat2 - lat1);\n\n        &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; a = (Math.Sin(dlat / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) * Math.Sin(dlat / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)) + Math.Cos(Radians(lat1)) * Math.Cos(Radians(lat2)) * (Math.Sin(dlon / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) * Math.Sin(dlon / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n        &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; angle = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * Math.Atan2(Math.Sqrt(a), Math.Sqrt(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - a));\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; angle * RADIUS;\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a java implementation of the Haversine formula.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;AVERAGE_RADIUS_OF_EARTH_KM&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6371&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;calculateDistanceInKilometer&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; userLat, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; userLng,\n  &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; venueLat, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; venueLng)&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;latDistance&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Math.toRadians(userLat - venueLat);\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lngDistance&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Math.toRadians(userLng - venueLng);\n\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Math.sin(latDistance / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) * Math.sin(latDistance / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n      + Math.cos(Math.toRadians(userLat)) * Math.cos(Math.toRadians(venueLat))\n      * Math.sin(lngDistance / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) * Math.sin(lngDistance / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * Math.atan2(Math.sqrt(a), Math.sqrt(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - a));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) (Math.round(AVERAGE_RADIUS_OF_EARTH_KM * c));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that here we are rounding the answer to the nearest km.&lt;/p&gt;\n    ","\n&lt;p&gt;Thanks very much for all this. I used the following code in my Objective-C iPhone app:&lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; PIx = &lt;span class=&quot;hljs-number&quot;&gt;3.141592653589793&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; RADIO = &lt;span class=&quot;hljs-number&quot;&gt;6371&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Mean radius of Earth in Km&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;convertToRadians&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; val)&lt;/span&gt; {\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; val * PIx / &lt;span class=&quot;hljs-number&quot;&gt;180&lt;/span&gt;;\n}\n\n-(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)kilometresBetweenPlace1:(CLLocationCoordinate2D) place1 andPlace2:(CLLocationCoordinate2D) place2 {\n\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; dlon = convertToRadians(place2.longitude - place1.longitude);\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; dlat = convertToRadians(place2.latitude - place1.latitude);\n\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; a = ( &lt;span class=&quot;hljs-built_in&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sin&lt;/span&gt;(dlat / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;hljs-built_in&quot;&gt;cos&lt;/span&gt;(convertToRadians(place1.latitude))) * &lt;span class=&quot;hljs-built_in&quot;&gt;cos&lt;/span&gt;(convertToRadians(place2.latitude)) * &lt;span class=&quot;hljs-built_in&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sin&lt;/span&gt;(dlon / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; angle = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;hljs-built_in&quot;&gt;asin&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sqrt&lt;/span&gt;(a));\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; angle * RADIO;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Latitude and Longitude are in decimal. I didn&apos;t use min() for the asin() call as the distances that I&apos;m using are so small that they don&apos;t require it.&lt;/p&gt;\n\n&lt;p&gt;It gave incorrect answers until I passed in the values in Radians - now it&apos;s pretty much the same as the values obtained from Apple&apos;s Map app :-)&lt;/p&gt;\n\n&lt;p&gt;Extra update:&lt;/p&gt;\n\n&lt;p&gt;If you are using iOS4 or later then Apple provide some methods to do this so the same functionality would be achieved with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;-(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)kilometresBetweenPlace1:(CLLocationCoordinate2D) place1 andPlace2:(CLLocationCoordinate2D) place2 {\n\n    MKMapPoint  start, finish;\n\n\n    start = MKMapPointForCoordinate(place1);\n    finish = MKMapPointForCoordinate(place2);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; MKMetersBetweenMapPoints(start, finish) / &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is a simple PHP function that will give a very reasonable approximation (under +/-1% error margin).  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;distance&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$lat1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$lon1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$lat2&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$lon2&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$pi80&lt;/span&gt; = M_PI / &lt;span class=&quot;hljs-number&quot;&gt;180&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$lat1&lt;/span&gt; *= &lt;span class=&quot;hljs-variable&quot;&gt;$pi80&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$lon1&lt;/span&gt; *= &lt;span class=&quot;hljs-variable&quot;&gt;$pi80&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$lat2&lt;/span&gt; *= &lt;span class=&quot;hljs-variable&quot;&gt;$pi80&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$lon2&lt;/span&gt; *= &lt;span class=&quot;hljs-variable&quot;&gt;$pi80&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$r&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6372.797&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// mean radius of Earth in km&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$dlat&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$lat2&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$lat1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$dlon&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$lon2&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$lon1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$dlat&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) * &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$dlat&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;cos&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$lat1&lt;/span&gt;) * &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;cos&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$lat2&lt;/span&gt;) * &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$dlon&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) * &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$dlon&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$c&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;atan2&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;), &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;));\n    &lt;span class=&quot;hljs-variable&quot;&gt;$km&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$r&lt;/span&gt; * &lt;span class=&quot;hljs-variable&quot;&gt;$c&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//echo &apos;&amp;lt;br/&amp;gt;&apos;.$km;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$km&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As said before; the earth is NOT a sphere.  It is like an old, old baseball that Mark McGwire decided to practice with - it is full of dents and bumps.  The simpler calculations (like this) treat it like a sphere.&lt;/p&gt;\n\n&lt;p&gt;Different methods may be more or less precise according to where you are on this irregular ovoid AND how far apart your points are (the closer they are the smaller the absolute error margin).  The more precise your expectation, the more complex the math.&lt;/p&gt;\n\n&lt;p&gt;For more info: &lt;a href=&quot;http://en.wikipedia.org/wiki/Geographical_distance&quot; rel=&quot;noreferrer&quot;&gt;wikipedia geographic distance&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I post here my working example.&lt;/p&gt;\n\n&lt;p&gt;List all points in table having distance between a designated point (we use a random point - lat:45.20327, long:23.7806) less than 50 KM, with latitude &amp;amp; longitude, in MySQL (the table fields are coord_lat and coord_long):&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;List all having DISTANCE&amp;lt;50, in Kilometres (considered Earth radius 6371 KM):&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; denumire, (&lt;span class=&quot;hljs-number&quot;&gt;6371&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;acos&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;cos&lt;/span&gt;( radians(&lt;span class=&quot;hljs-number&quot;&gt;45.20327&lt;/span&gt;) ) &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;cos&lt;/span&gt;( radians( coord_lat ) ) &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;cos&lt;/span&gt;( radians( &lt;span class=&quot;hljs-number&quot;&gt;23.7806&lt;/span&gt; ) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; radians(coord_long) ) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sin&lt;/span&gt;( radians(&lt;span class=&quot;hljs-number&quot;&gt;45.20327&lt;/span&gt;) ) &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sin&lt;/span&gt;( radians(coord_lat) ) )) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; distanta \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; obiective \n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; coord_lat&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; \n    &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; coord_long&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;HAVING&lt;/span&gt; distanta&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; distanta &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above example was tested in MySQL 5.0.95 and 5.5.16 (Linux). &lt;/p&gt;\n    ","\n&lt;p&gt;In the other answers an implementation in &lt;a href=&quot;/questions/tagged/r&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;r&apos;&quot; rel=&quot;tag&quot;&gt;r&lt;/a&gt; is missing.&lt;/p&gt;\n\n&lt;p&gt;Calculating the distance between two point is quite straightforward with the &lt;code&gt;distm&lt;/code&gt; function from the &lt;code&gt;geosphere&lt;/code&gt; package:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;distm(p1, p2, fun = distHaversine)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;p1 = longitude/latitude for point(s)\np2 = longitude/latitude for point(s)\n# type of distance calculation\nfun = distCosine / distHaversine / distVincentySphere / distVincentyEllipsoid \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As the earth is not perfectly spherical, the &lt;a href=&quot;http://en.wikipedia.org/wiki/Vincenty%27s_formulae&quot; rel=&quot;noreferrer&quot;&gt;Vincenty formula for ellipsoids&lt;/a&gt; is probably the best way to calculate distances. Thus in the &lt;code&gt;geosphere&lt;/code&gt; package you use then:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;distm(p1, p2, fun = distVincentyEllipsoid)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Off course you don&apos;t necessarily have to use &lt;code&gt;geosphere&lt;/code&gt; package, you can also calculate the distance in base &lt;code&gt;R&lt;/code&gt; with a function:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;hav.dist &amp;lt;- function(long1, lat1, long2, lat2) {\n  R &amp;lt;- 6371\n  diff.long &amp;lt;- (long2 - long1)\n  diff.lat &amp;lt;- (lat2 - lat1)\n  a &amp;lt;- sin(diff.lat/2)^2 + cos(lat1) * cos(lat2) * sin(diff.long/2)^2\n  b &amp;lt;- 2 * asin(pmin(1, sqrt(a))) \n  d = R * b\n  return(d)\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The haversine is definitely a good formula for probably most cases, other answers already include it so I am not going to take the space. But it is important to note that no matter what formula is used (yes not just one). Because of the huge range of accuracy possible as well as the computation time required. The choice of formula requires a bit more thought than a simple no brainer answer. &lt;/p&gt;\n\n&lt;p&gt;This posting from a person at nasa, is the best one I found at discussing the options&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.cs.nyu.edu/visual/home/proj/tiger/gisfaq.html&quot; rel=&quot;noreferrer&quot;&gt;http://www.cs.nyu.edu/visual/home/proj/tiger/gisfaq.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For example, if you are just sorting rows by distance in a 100 miles radius. The flat earth formula will be much faster than the haversine.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;HalfPi = 1.5707963;\nR = 3956; /* the radius gives you the measurement unit*/\n\na = HalfPi - latoriginrad;\nb = HalfPi - latdestrad;\nu = a * a + b * b;\nv = - 2 * a * b * cos(longdestrad - longoriginrad);\nc = sqrt(abs(u + v));\nreturn R * c;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice there is just one cosine and one square root. Vs 9 of them on the Haversine formula.&lt;/p&gt;\n    ","\n&lt;p&gt;There could be a simpler solution, and more correct: The perimeter of earth is 40,000Km at the equator, about 37,000 on Greenwich (or any longitude) cycle. Thus:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;pythagoras = function (lat1, lon1, lat2, lon2) {\n   function sqr(x) {return x * x;}\n   function cosDeg(x) {return Math.cos(x * Math.PI / 180.0);}\n\n   var earthCyclePerimeter = 40000000.0 * cosDeg((lat1 + lat2) / 2.0);\n   var dx = (lon1 - lon2) * earthCyclePerimeter / 360.0;\n   var dy = 37000000.0 * (lat1 - lat2) / 360.0;\n\n   return Math.sqrt(sqr(dx) + sqr(dy));\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I agree that it should be fine-tuned as, I myself said that it&apos;s an ellipsoid, so the radius to be multiplied by the cosine varies. But it&apos;s a bit more accurate. Compared with Google Maps and it did reduce the error significantly.&lt;/p&gt;\n    ","\n&lt;p&gt;All the above answers assumes the earth is a sphere. However, a more accurate approximation would be that of an oblate spheroid.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a= 6378.137#equitorial radius in km\nb= 6356.752#polar radius in km\n\ndef Distance(lat1, lons1, lat2, lons2):\n    lat1=math.radians(lat1)\n    lons1=math.radians(lons1)\n    R1=(((((a**2)*math.cos(lat1))**2)+(((b**2)*math.sin(lat1))**2))/((a*math.cos(lat1))**2+(b*math.sin(lat1))**2))**0.5 #radius of earth at lat1\n    x1=R*math.cos(lat1)*math.cos(lons1)\n    y1=R*math.cos(lat1)*math.sin(lons1)\n    z1=R*math.sin(lat1)\n\n    lat2=math.radians(lat2)\n    lons2=math.radians(lons2)\n    R1=(((((a**2)*math.cos(lat2))**2)+(((b**2)*math.sin(lat2))**2))/((a*math.cos(lat2))**2+(b*math.sin(lat2))**2))**0.5 #radius of earth at lat2\n    x2=R*math.cos(lat2)*math.cos(lons2)\n    y2=R*math.cos(lat2)*math.sin(lons2)\n    z2=R*math.sin(lat2)\n\n    return ((x1-x2)**2+(y1-y2)**2+(z1-z2)**2)**0.5\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;pip install haversine&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Python implementation&lt;/p&gt;\n&lt;p&gt;Origin is the center of the contiguous United States.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;from haversine import haversine, Unit\norigin = (39.50, 98.35)\nparis = (48.8567, 2.3508)\nhaversine(origin, paris, unit=Unit.MILES)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To get the answer in kilometers simply set &lt;code&gt;unit=Unit.KILOMETERS&lt;/code&gt; (that&apos;s the default).&lt;/p&gt;\n    ","\n&lt;p&gt;I don&apos;t like adding yet another answer, but the Google maps API v.3 has spherical geometry (and more). After converting your WGS84 to decimal degrees you can do this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;http://maps.google.com/maps/api/js?sensor=false&amp;amp;libraries=geometry&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;  \n\ndistance = google.maps.geometry.spherical.computeDistanceBetween(\n    new google.maps.LatLng(fromLat, fromLng), \n    new google.maps.LatLng(toLat, toLng));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;No word about how accurate Google&apos;s calculations are or even what model is used (though it does say &quot;spherical&quot; rather than &quot;geoid&quot;.  By the way, the &quot;straight line&quot; distance will obviously be different from the distance if one travels on the surface of the earth which is what everyone seems to be presuming.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use the build in CLLocationDistance to calculate this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CLLocation *location1 = [[CLLocation alloc] initWithLatitude:latitude1 longitude:longitude1];\nCLLocation *location2 = [[CLLocation alloc] initWithLatitude:latitude2 longitude:longitude2];\n[self distanceInMetersFromLocation:location1 toLocation:location2]\n\n- (int)distanceInMetersFromLocation:(CLLocation*)location1 toLocation:(CLLocation*)location2 {\n    CLLocationDistance distanceInMeters = [location1 distanceFromLocation:location2];\n    return distanceInMeters;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In your case if you want kilometers just divide by 1000.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a &lt;strong&gt;typescript&lt;/strong&gt; implementation of the Haversine formula&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;static getDistanceFromLatLonInKm(lat1: number, lon1: number, lat2: number, lon2: number): number {\n    var deg2Rad = deg =&amp;gt; {\n        return deg * Math.PI / 180;\n    }\n\n    var r = 6371; // Radius of the earth in km\n    var dLat = deg2Rad(lat2 - lat1);   \n    var dLon = deg2Rad(lon2 - lon1);\n    var a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(deg2Rad(lat1)) * Math.cos(deg2Rad(lat2)) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = r * c; // Distance in km\n    return d;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As pointed out, an accurate calculation should take into account that the earth is not a perfect sphere. Here are some comparisons of the various algorithms offered here:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;geoDistance(50,5,58,3)\nHaversine: 899 km\nMaymenn: 833 km\nKeerthana: 897 km\ngoogle.maps.geometry.spherical.computeDistanceBetween(): 900 km\n\ngeoDistance(50,5,-58,-3)\nHaversine: 12030 km\nMaymenn: 11135 km\nKeerthana: 10310 km\ngoogle.maps.geometry.spherical.computeDistanceBetween(): 12044 km\n\ngeoDistance(.05,.005,.058,.003)\nHaversine: 0.9169 km\nMaymenn: 0.851723 km\nKeerthana: 0.917964 km\ngoogle.maps.geometry.spherical.computeDistanceBetween(): 0.917964 km\n\ngeoDistance(.05,80,.058,80.3)\nHaversine: 33.37 km\nMaymenn: 33.34 km\nKeerthana: 33.40767 km\ngoogle.maps.geometry.spherical.computeDistanceBetween(): 33.40770 km\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Over small distances, Keerthana&apos;s algorithm does seem to coincide with that of Google Maps. Google Maps does not seem to follow any simple algorithm, suggesting that it may be the most accurate method here.&lt;/p&gt;\n\n&lt;p&gt;Anyway, here is a Javascript implementation of Keerthana&apos;s algorithm:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function geoDistance(lat1, lng1, lat2, lng2){\n    const a = 6378.137; // equitorial radius in km\n    const b = 6356.752; // polar radius in km\n\n    var sq = x =&amp;gt; (x*x);\n    var sqr = x =&amp;gt; Math.sqrt(x);\n    var cos = x =&amp;gt; Math.cos(x);\n    var sin = x =&amp;gt; Math.sin(x);\n    var radius = lat =&amp;gt; sqr((sq(a*a*cos(lat))+sq(b*b*sin(lat)))/(sq(a*cos(lat))+sq(b*sin(lat))));\n\n    lat1 = lat1 * Math.PI / 180;\n    lng1 = lng1 * Math.PI / 180;\n    lat2 = lat2 * Math.PI / 180;\n    lng2 = lng2 * Math.PI / 180;\n\n    var R1 = radius(lat1);\n    var x1 = R1*cos(lat1)*cos(lng1);\n    var y1 = R1*cos(lat1)*sin(lng1);\n    var z1 = R1*sin(lat1);\n\n    var R2 = radius(lat2);\n    var x2 = R2*cos(lat2)*cos(lng2);\n    var y2 = R2*cos(lat2)*sin(lng2);\n    var z2 = R2*sin(lat2);\n\n    return sqr(sq(x1-x2)+sq(y1-y2)+sq(z1-z2));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is the SQL Implementation to calculate the distance in km,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT UserId, ( 3959 * acos( cos( radians( your latitude here ) ) * cos( radians(latitude) ) * \ncos( radians(longitude) - radians( your longitude here ) ) + sin( radians( your latitude here ) ) * \nsin( radians(latitude) ) ) ) AS distance FROM user HAVING\ndistance &amp;lt; 5  ORDER BY distance LIMIT 0 , 5;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For further details in the implementation by programming langugage, you can just go through the php script given &lt;a href=&quot;https://www.geodatasource.com/developers/php&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This script [in PHP] calculates distances between the two points.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public static function getDistanceOfTwoPoints($source, $dest, $unit=&apos;K&apos;) {\n        $lat1 = $source[0];\n        $lon1 = $source[1];\n        $lat2 = $dest[0];\n        $lon2 = $dest[1];\n\n        $theta = $lon1 - $lon2;\n        $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));\n        $dist = acos($dist);\n        $dist = rad2deg($dist);\n        $miles = $dist * 60 * 1.1515;\n        $unit = strtoupper($unit);\n\n        if ($unit == &quot;K&quot;) {\n            return ($miles * 1.609344);\n        }\n        else if ($unit == &quot;M&quot;)\n        {\n            return ($miles * 1.609344 * 1000);\n        }\n        else if ($unit == &quot;N&quot;) {\n            return ($miles * 0.8684);\n        } \n        else {\n            return $miles;\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;Java implementation in according &lt;a href=&quot;https://en.wikipedia.org/wiki/Haversine_formula&quot; rel=&quot;nofollow noreferrer&quot;&gt;Haversine formula&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;calculateDistance&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; latPoint1, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; lngPoint1, \n                         &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; latPoint2, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; lngPoint2)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(latPoint1 == latPoint2 &amp;amp;&amp;amp; lngPoint1 == lngPoint2) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0d&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;EARTH_RADIUS&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6371.0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//km value;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//converting to radians&lt;/span&gt;\n    latPoint1 = Math.toRadians(latPoint1);\n    lngPoint1 = Math.toRadians(lngPoint1);\n    latPoint2 = Math.toRadians(latPoint2);\n    lngPoint2 = Math.toRadians(lngPoint2);\n\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Math.pow(Math.sin((latPoint2 - latPoint1) / &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) \n            + Math.cos(latPoint1) * Math.cos(latPoint2)\n            * Math.pow(Math.sin((lngPoint2 - lngPoint1) / &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    distance = &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt; * EARTH_RADIUS * Math.asin(Math.sqrt(distance));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; distance; &lt;span class=&quot;hljs-comment&quot;&gt;//km value&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To calculate the distance between two points on a sphere you need to do the &lt;a href=&quot;http://en.wikipedia.org/wiki/Great-circle_distance&quot; rel=&quot;nofollow noreferrer&quot;&gt;Great Circle calculation&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;There are a number of C/C++ libraries to help with map projection at &lt;a href=&quot;http://www.maptools.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;MapTools&lt;/a&gt; if you need to reproject your distances to a flat surface.  To do this you will need the projection string of the various coordinate systems.&lt;/p&gt;\n\n&lt;p&gt;You may also find &lt;a href=&quot;http://www.mapwindow.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;MapWindow&lt;/a&gt; a useful tool to visualise the points.  Also as its open source its a useful guide to how to use the proj.dll library, which appears to be the core open source projection library.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is my java implementation for calculation distance via decimal degrees after some search. I used mean radius of world (from wikipedia) in km. İf you want result miles then use world radius in miles.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public static double distanceLatLong2(double lat1, double lng1, double lat2, double lng2) \n{\n  double earthRadius = 6371.0d; // KM: use mile here if you want mile result\n\n  double dLat = toRadian(lat2 - lat1);\n  double dLng = toRadian(lng2 - lng1);\n\n  double a = Math.pow(Math.sin(dLat/2), 2)  + \n          Math.cos(toRadian(lat1)) * Math.cos(toRadian(lat2)) * \n          Math.pow(Math.sin(dLng/2), 2);\n\n  double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n  return earthRadius * c; // returns result kilometers\n}\n\npublic static double toRadian(double degrees) \n{\n  return (degrees * Math.PI) / 180.0d;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s the accepted answer implementation ported to Java in case anyone needs it.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package com.project529.garage.util;\n\n\n/**\n * Mean radius.\n */\nprivate static double EARTH_RADIUS = 6371;\n\n/**\n * Returns the distance between two sets of latitudes and longitudes in meters.\n * &amp;lt;p/&amp;gt;\n * Based from the following JavaScript SO answer:\n * http://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula,\n * which is based on https://en.wikipedia.org/wiki/Haversine_formula (error rate: ~0.55%).\n */\npublic double getDistanceBetween(double lat1, double lon1, double lat2, double lon2) {\n    double dLat = toRadians(lat2 - lat1);\n    double dLon = toRadians(lon2 - lon1);\n\n    double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *\n                    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    double d = EARTH_RADIUS * c;\n\n    return d;\n}\n\npublic double toRadians(double degrees) {\n    return degrees * (Math.PI / 180);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;here is an example in &lt;strong&gt;postgres&lt;/strong&gt; sql (in km, for miles version, replace 1.609344 by 0.8684 version)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CREATE OR REPLACE FUNCTION public.geodistance(alat float, alng float, blat  \n\nfloat, blng  float)\n  RETURNS float AS\n$BODY$\nDECLARE\n    v_distance float;\nBEGIN\n\n    v_distance = asin( sqrt(\n            sin(radians(blat-alat)/2)^2 \n                + (\n                    (sin(radians(blng-alng)/2)^2) *\n                    cos(radians(alat)) *\n                    cos(radians(blat))\n                )\n          )\n        ) * cast(&apos;7926.3352&apos; as float) * cast(&apos;1.609344&apos; as float) ;\n\n\n    RETURN v_distance;\nEND \n$BODY$\nlanguage plpgsql VOLATILE SECURITY DEFINER;\nalter function geodistance(alat float, alng float, blat float, blng float)\nowner to postgres;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For those looking for an Excel formula based on WGS-84 &amp;amp; GRS-80 standards:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;=ACOS(COS(RADIANS(90-Lat1))*COS(RADIANS(90-Lat2))+SIN(RADIANS(90-Lat1))*SIN(RADIANS(90-Lat2))*COS(RADIANS(Long1-Long2)))*6371\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://bluemm.blogspot.com/2007/01/excel-formula-to-calculate-distance.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I made a custom function in R to calculate haversine distance(km) between two spatial points using functions available in R base package.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;custom_hav_dist &amp;lt;- function(lat1, lon1, lat2, lon2) {\nR &amp;lt;- 6371\nRadian_factor &amp;lt;- 0.0174533\nlat_1 &amp;lt;- (90-lat1)*Radian_factor\nlat_2 &amp;lt;- (90-lat2)*Radian_factor\ndiff_long &amp;lt;-(lon1-lon2)*Radian_factor\n\ndistance_in_km &amp;lt;- 6371*acos((cos(lat_1)*cos(lat_2))+ \n                 (sin(lat_1)*sin(lat_2)*cos(diff_long)))\nrm(lat1, lon1, lat2, lon2)\nreturn(distance_in_km)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Sample output&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;custom_hav_dist(50.31,19.08,54.14,19.39)\n[1] 426.3987\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;PS: To calculate distances in miles, substitute R in function (6371) with 3958.756 (and for nautical miles, use 3440.065).&lt;/p&gt;\n    ","\n&lt;p&gt;there is a good example in here to calculate distance with PHP &lt;a href=&quot;http://www.geodatasource.com/developers/php&quot; rel=&quot;nofollow&quot;&gt;http://www.geodatasource.com/developers/php&lt;/a&gt; :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; function distance($lat1, $lon1, $lat2, $lon2, $unit) {\n\n     $theta = $lon1 - $lon2;\n     $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));\n     $dist = acos($dist);\n     $dist = rad2deg($dist);\n     $miles = $dist * 60 * 1.1515;\n     $unit = strtoupper($unit);\n\n     if ($unit == &quot;K&quot;) {\n         return ($miles * 1.609344);\n     } else if ($unit == &quot;N&quot;) {\n          return ($miles * 0.8684);\n     } else {\n          return $miles;\n     }\n }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is the implementation VB.NET, this implementation will give you the result in KM or Miles based on an Enum value you pass.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Public Enum DistanceType\n    Miles\n    KiloMeters\nEnd Enum\n\nPublic Structure Position\n    Public Latitude As Double\n    Public Longitude As Double\nEnd Structure\n\nPublic Class Haversine\n\n    Public Function Distance(Pos1 As Position,\n                             Pos2 As Position,\n                             DistType As DistanceType) As Double\n\n        Dim R As Double = If((DistType = DistanceType.Miles), 3960, 6371)\n\n        Dim dLat As Double = Me.toRadian(Pos2.Latitude - Pos1.Latitude)\n\n        Dim dLon As Double = Me.toRadian(Pos2.Longitude - Pos1.Longitude)\n\n        Dim a As Double = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(Me.toRadian(Pos1.Latitude)) * Math.Cos(Me.toRadian(Pos2.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)\n\n        Dim c As Double = 2 * Math.Asin(Math.Min(1, Math.Sqrt(a)))\n\n        Dim result As Double = R * c\n\n        Return result\n\n    End Function\n\n    Private Function toRadian(val As Double) As Double\n\n        Return (Math.PI / 180) * val\n\n    End Function\n\nEnd Class\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I condensed the computation down by simplifying the formula.&lt;/p&gt;\n\n&lt;p&gt;Here it is in Ruby:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;include Math\nearth_radius_mi = 3959\nradians = lambda { |deg| deg * PI / 180 }\ncoord_radians = lambda { |c| { :lat =&amp;gt; radians[c[:lat]], :lng =&amp;gt; radians[c[:lng]] } }\n\n# from/to = { :lat =&amp;gt; (latitude_in_degrees), :lng =&amp;gt; (longitude_in_degrees) }\ndef haversine_distance(from, to)\n  from, to = coord_radians[from], coord_radians[to]\n  cosines_product = cos(to[:lat]) * cos(from[:lat]) * cos(from[:lng] - to[:lng])\n  sines_product = sin(to[:lat]) * sin(from[:lat])\n  return earth_radius_mi * acos(cosines_product + sines_product)\nend\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre&gt;&lt;code&gt;function getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2,units) {\n  var R = 6371; // Radius of the earth in km\n  var dLat = deg2rad(lat2-lat1);  // deg2rad below\n  var dLon = deg2rad(lon2-lon1); \n  var a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n    Math.sin(dLon/2) * Math.sin(dLon/2)\n    ; \n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n  var d = R * c; \n  var miles = d / 1.609344; \n\nif ( units == &apos;km&apos; ) {  \nreturn d; \n } else {\nreturn miles;\n}}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Chuck&apos;s solution, valid for miles also.&lt;/p&gt;\n    ","\n&lt;p&gt;In Mysql use the following function pass the parameters as using  &lt;code&gt;POINT(LONG,LAT)&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CREATE FUNCTION `distance`(a POINT, b POINT)\n RETURNS double\n    DETERMINISTIC\nBEGIN\n\nRETURN\n\nGLength( LineString(( PointFromWKB(a)), (PointFromWKB(b)))) * 100000; -- To Make the distance in meters\n\nEND;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For better accuracy - see &lt;a href=&quot;https://stackoverflow.com/questions/1420045/how-to-find-distance-from-the-latitude-and-longitude-of-two-locations/1422562#1422562&quot; title=&quot;how to find distance from the latitude and longitude of two locations&quot;&gt;stackoverflow.com/questions/1420045/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/171006/lior-kogan&quot; title=&quot;18,914 reputation&quot; class=&quot;comment-user&quot;&gt;Lior Kogan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77429769_27928&quot;&gt;&lt;span title=&quot;2017-07-21 07:54:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 21, 2017 at 7:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that you cannot apply a Haversine formula on an ellipsoid of revolution like WGS 84. You can only apply this method on a sphere with a radius.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/327026/mike-t&quot; title=&quot;38,306 reputation&quot; class=&quot;comment-user&quot;&gt;Mike T&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment89909816_27928&quot;&gt;&lt;span title=&quot;2018-07-23 02:05:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 23, 2018 at 2:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Most of the answers here are using simple spherical trigonometry, so the results are rather crude compared to the WGS84 ellipsoid distances used in the GPS system. Some of the answers do refer to Vincenty&apos;s formula for ellipsoids, but that algorithm was designed for use on 1960s&apos; era desk calculators and it has stability &amp;amp; accuracy issues; we have better hardware and software now. Please see &lt;a href=&quot;https://geographiclib.sourceforge.io/&quot; rel=&quot;nofollow noreferrer&quot;&gt;GeographicLib&lt;/a&gt; for a high quality library with implementations in various languages.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4014959/pm-2ring&quot; title=&quot;52,419 reputation&quot; class=&quot;comment-user&quot;&gt;PM 2Ring&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90310172_27928&quot;&gt;&lt;span title=&quot;2018-08-03 13:26:32Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 3, 2018 at 13:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MikeT - true though many of the answers here seem useful &lt;i&gt;over small distances&lt;/i&gt;: If you take lat/long from WGS 84, and apply Haversine &lt;i&gt;as if those were&lt;/i&gt; points on a sphere, don&apos;t you get answers whose errors are only due to the earth&apos;s flattening factor, so perhaps within 1% of a more accurate formula? With the caveat that these are small distances, say within a single town.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/199364/toolmakersteve&quot; title=&quot;11,966 reputation&quot; class=&quot;comment-user&quot;&gt;ToolmakerSteve&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93808440_27928&quot;&gt;&lt;span title=&quot;2018-11-25 15:27:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 25, 2018 at 15:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For these plateforms: Mono/.NET 4.5/.NET Core/Windows Phone 8.x/Universal Windows Platform/Xamarin iOS/Xamarin Android see &lt;a href=&quot;https://stackoverflow.com/a/54296314/2736742&quot;&gt;stackoverflow.com/a/54296314/2736742&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2736742/a-morel&quot; title=&quot;7,615 reputation&quot; class=&quot;comment-user&quot;&gt;A. Morel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95414363_27928&quot;&gt;&lt;span title=&quot;2019-01-21 20:02:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 21, 2019 at 20:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Does this calculation/method account for the Earth being a spheroid (not a perfect sphere)? The original question asked for distance on between points on a WGS84 globe. Not sure how much error creeps in by using a perfect sphere, but I suspect it can be quite a lot depending on where the points are on the globe, thus the distinction is worth bearing in mind.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15703/redcalx&quot; title=&quot;7,827 reputation&quot; class=&quot;comment-user&quot;&gt;redcalx&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment9855599_27943&quot;&gt;&lt;span title=&quot;2011-11-08 08:33:38Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 8, 2011 at 8:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The Haversine formula doesn&apos;t account for the Earth being a spheroid, so you&apos;ll get some error introduced due to that fact.  It can&apos;t be guaranteed correct to better than 0.5%.  That may or may not be an acceptable level of error though.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/85721/brandon&quot; title=&quot;483 reputation&quot; class=&quot;comment-user&quot;&gt;Brandon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10758317_27943&quot;&gt;&lt;span title=&quot;2011-12-28 16:20:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 28, 2011 at 16:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Is there any reason to use &lt;code&gt;Math.atan2(Math.sqrt(a), Math.sqrt(1-a))&lt;/code&gt; instead of &lt;code&gt;Math.asin(Math.sqrt(h))&lt;/code&gt;, which would be the direct implementation of the formula that the Wikipedia article uses? Is it more efficient and/or more numerically stable?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/424632/musiphil&quot; title=&quot;3,687 reputation&quot; class=&quot;comment-user&quot;&gt;musiphil&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment19264838_27943&quot;&gt;&lt;span title=&quot;2012-12-20 03:47:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 20, 2012 at 3:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@UsmanMutawakil Well, the 38 miles you get is distance on the road. This algorithm calculates a straight line distance on the earth&apos;s surface. Google Maps has a distance tool (bottom left, &quot;Labs&quot;) that does the same, use that to compare.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/148335/pascal&quot; title=&quot;16,659 reputation&quot; class=&quot;comment-user&quot;&gt;Pascal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25359822_27943&quot;&gt;&lt;span title=&quot;2013-07-03 17:35:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 3, 2013 at 17:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Forte_201092: Because that is not necessary - as &lt;code&gt;(sin(x))²&lt;/code&gt; equals &lt;code&gt;(sin(-x))²&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/113158/jean-hominal&quot; title=&quot;16,168 reputation&quot; class=&quot;comment-user&quot;&gt;Jean Hominal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment36895098_27943&quot;&gt;&lt;span title=&quot;2014-05-30 09:16:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 30, 2014 at 9:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AngularM and there is highly likely that google calculates distance if you will be taking some roads and not a straight line.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1090562/salvador-dali&quot; title=&quot;201,043 reputation&quot; class=&quot;comment-user&quot;&gt;Salvador Dali&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment60933520_21623206&quot;&gt;&lt;span title=&quot;2016-04-16 23:53:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 16, 2016 at 23:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Google calculates driving distance, this calculates &quot;as the crow flies&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4111710/hobbyist&quot; title=&quot;15,178 reputation&quot; class=&quot;comment-user&quot;&gt;Hobbyist&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65086699_21623206&quot;&gt;&lt;span title=&quot;2016-08-09 22:24:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 9, 2016 at 22:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Ouadie and will it improve speed? Most probably no, but I will end up with a lot of &apos;your stuff doesn&apos;t work&apos; for people who copypaste it in old browsers&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1090562/salvador-dali&quot; title=&quot;201,043 reputation&quot; class=&quot;comment-user&quot;&gt;Salvador Dali&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment70986257_21623206&quot;&gt;&lt;span title=&quot;2017-01-27 19:58:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 27, 2017 at 19:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;well yeah but what does &lt;code&gt;// 2 * R; R = 6371 km&lt;/code&gt; stands for? and the current method provides answer in km or miles? needs better documentation. Thanks&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5890227/khalil-khalaf&quot; title=&quot;8,887 reputation&quot; class=&quot;comment-user&quot;&gt;Khalil Khalaf&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment78610852_21623206&quot;&gt;&lt;span title=&quot;2017-08-22 20:25:37Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 22, 2017 at 20:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@KhalilKhalaf are you joking or trying to troll here? km stands for kilometers. What do you think R stands for (especially if we speak about a shpere)? Guess in what units the answer will be if you already see the km. What kind of documentation are you looking for here: there are literally 4 lines there.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1090562/salvador-dali&quot; title=&quot;201,043 reputation&quot; class=&quot;comment-user&quot;&gt;Salvador Dali&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment78612432_21623206&quot;&gt;&lt;span title=&quot;2017-08-22 21:22:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 22, 2017 at 21:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You are using the equatorial radius, but you should be using the mean radius, which is 6371 km&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/113570/philippe-leybaert&quot; title=&quot;163,459 reputation&quot; class=&quot;comment-user&quot;&gt;Philippe Leybaert&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment924262_215849&quot;&gt;&lt;span title=&quot;2009-07-10 12:18:21Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 10, 2009 at 12:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Shouldn&apos;t this be &lt;code&gt;double dlon = Radians(lon2 - lon1);&lt;/code&gt; and &lt;code&gt;double dlat = Radians(lat2 - lat1);&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/37055/chris-marisic&quot; title=&quot;31,703 reputation&quot; class=&quot;comment-user&quot;&gt;Chris Marisic&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment2002586_215849&quot;&gt;&lt;span title=&quot;2010-01-15 15:40:33Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jan 15, 2010 at 15:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I agree with Chris Marisic. I used the original code and the calculations were wrong. I added the call to convert the deltas to radians and it works properly now. I submitted an edit and am waiting for it to be peer reviewed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/213138/bryan-bedard&quot; title=&quot;2,589 reputation&quot; class=&quot;comment-user&quot;&gt;Bryan Bedard&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10332836_215849&quot;&gt;&lt;span title=&quot;2011-12-04 04:53:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 4, 2011 at 4:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I submitted another edit because lat1 &amp;amp; lat2 also need to be converted to radians. I also revised the formula for the assignment to a to match the formula and code found here: &lt;a href=&quot;http://www.movable-type.co.uk/scripts/latlong.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;movable-type.co.uk/scripts/latlong.html&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/213138/bryan-bedard&quot; title=&quot;2,589 reputation&quot; class=&quot;comment-user&quot;&gt;Bryan Bedard&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10333335_215849&quot;&gt;&lt;span title=&quot;2011-12-04 06:48:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 4, 2011 at 6:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;does the &lt;code&gt;RADIUS&lt;/code&gt; value need to be 6371 as in the other answers?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/103897/chris-hayes&quot; title=&quot;3,786 reputation&quot; class=&quot;comment-user&quot;&gt;Chris Hayes&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95483876_215849&quot;&gt;&lt;span title=&quot;2019-01-23 18:02:16Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 23, 2019 at 18:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If we wanted to calculate the distance between between two points in meters, what would be the more accurate way? To use &lt;code&gt;6371000&lt;/code&gt; as the radius of the earth? (avg. radius of earth is 6371000 meters) or convert kilometers to meters from your function?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3075340/micro&quot; title=&quot;9,823 reputation&quot; class=&quot;comment-user&quot;&gt;Micro&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment69418643_12600225&quot;&gt;&lt;span title=&quot;2016-12-12 18:29:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 12, 2016 at 18:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;if you want miles, multiple the result by &lt;code&gt;0.621371&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2445763/lasec0203&quot; title=&quot;2,147 reputation&quot; class=&quot;comment-user&quot;&gt;lasec0203&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102123287_12600225&quot;&gt;&lt;span title=&quot;2019-09-09 05:20:34Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 9, 2019 at 5:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;iOS SDK has its own implementation: &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocation_Class/#//apple_ref/occ/instm/CLLocation/distanceFromLocation&quot; rel=&quot;nofollow noreferrer&quot;&gt;developer.apple.com/library/ios/documentation/CoreLocation/&lt;/a&gt;:&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/54623/tuler&quot; title=&quot;3,259 reputation&quot; class=&quot;comment-user&quot;&gt;tuler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment60124007_4377364&quot;&gt;&lt;span title=&quot;2016-03-27 12:15:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 27, 2016 at 12:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I think the parenthesis around &lt;code&gt;pow(sin(dlat / 2), 2) + cos(convertToRadians(place1.latitude))&lt;/code&gt; is incorrect. Remove those, and the result matches what I get when I use other implementations on this page, or implement the Haversine formula from &lt;a href=&quot;https://en.wikipedia.org/wiki/Great-circle_distance&quot; rel=&quot;nofollow noreferrer&quot;&gt;Wikipedia&lt;/a&gt; from scratch.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/700883/zanedp&quot; title=&quot;409 reputation&quot; class=&quot;comment-user&quot;&gt;zanedp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95310437_4377364&quot;&gt;&lt;span title=&quot;2019-01-17 19:33:00Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 17, 2019 at 19:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Using the coordinates (40.7127837, -74.0059413) for NYC and (34.052234, -118.243685) for LA, with the &lt;code&gt;()&lt;/code&gt; around that sum, I get 3869.75. Without them, I get 3935.75, which is pretty much what a web search turns up.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/700883/zanedp&quot; title=&quot;409 reputation&quot; class=&quot;comment-user&quot;&gt;zanedp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95310609_4377364&quot;&gt;&lt;span title=&quot;2019-01-17 19:39:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 17, 2019 at 19:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This works perfectly! I just added $distance_miles = $km * 0.621371; and that&apos;s all I needed for approximate distance in miles! Thanks Tony.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user321531&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39237671_11178145&quot;&gt;&lt;span title=&quot;2014-08-08 05:17:57Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 8, 2014 at 5:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I think a good approach might be pre filtering the results using an aproximation, so the heavy formula is applied only for some cases. Specially usefull if you have other conditions. I&apos;m using this for the initial aprox: &lt;a href=&quot;http://stackoverflow.com/questions/1253499/simple-calculations-for-working-with-lat-lon-km-distance&quot; title=&quot;simple calculations for working with lat lon km distance&quot;&gt;stackoverflow.com/questions/1253499/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/483475/pato&quot; title=&quot;672 reputation&quot; class=&quot;comment-user&quot;&gt;Pato&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment75181741_9676337&quot;&gt;&lt;span title=&quot;2017-05-19 20:57:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 19, 2017 at 20:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;To make sure I am clear on what you said: The code you give at end of post:  Is that an implementation of Vincenty formula? As far as you know, it should give same answer as calling Vincenty in geosphere? [I don&apos;t have geosphere or other library; just looking for some code to include in a cross-platform app. I would of course verify some test cases against a known good calculator.]&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/199364/toolmakersteve&quot; title=&quot;11,966 reputation&quot; class=&quot;comment-user&quot;&gt;ToolmakerSteve&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93808236_23095329&quot;&gt;&lt;span title=&quot;2018-11-25 15:16:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 25, 2018 at 15:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ToolmakerSteve the function at the end of my answer is an implementation of the Haversine method&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2204410/jaap&quot; title=&quot;77,377 reputation&quot; class=&quot;comment-user&quot;&gt;Jaap&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93808379_23095329&quot;&gt;&lt;span title=&quot;2018-11-25 15:23:29Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 25, 2018 at 15:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Hi @Jaap could I ask what is the unit of measurement for the formula? Is it in metres?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7635792/jackson&quot; title=&quot;63 reputation&quot; class=&quot;comment-user&quot;&gt;Jackson&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment104559112_23095329&quot;&gt;&lt;span title=&quot;2019-12-04 01:53:01Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 4, 2019 at 1:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Jaap I liked the explanation of &apos;Vincenty formula for ellipsoids&apos; which I tested to be very accurate. @Jackson &lt;code&gt;distm(p1, p2, fun = distVincentyEllipsoid)&lt;/code&gt; gives output in metres which you have to divide with 1000 to get values in kilometres.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6254041/tiny-hopper&quot; title=&quot;350 reputation&quot; class=&quot;comment-user&quot;&gt;Tiny_hopper&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114914142_23095329&quot;&gt;&lt;span title=&quot;2020-11-25 05:28:02Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 25, 2020 at 5:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s a nice possibility. Just be aware that the recommended maximum distance in the discussion is &lt;i&gt;12&lt;/i&gt; miles, not &lt;i&gt;100&lt;/i&gt;, and that even so, errors might creep up to 30 meters (100 ft), depending on the globe&apos;s position.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2713582/eric-wu&quot; title=&quot;871 reputation&quot; class=&quot;comment-user&quot;&gt;Eric Wu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment101403987_19772119&quot;&gt;&lt;span title=&quot;2019-08-12 17:00:59Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 12, 2019 at 17:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Is this function return distance in km?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/460966/wikki&quot; title=&quot;590 reputation&quot; class=&quot;comment-user&quot;&gt;Wikki&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment67398232_35309170&quot;&gt;&lt;span title=&quot;2016-10-15 17:34:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 15, 2016 at 17:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is, just because the equator and the longitude cycles are in Km. For miles, just divide 40000 and 37000 by 1.6. Feeling geeky, you can convert it to Ris, multiplyung by about 7 or to parasang, dividing by 2.2 ;-)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/361169/meymann&quot; title=&quot;2,510 reputation&quot; class=&quot;comment-user&quot;&gt;Meymann&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment67430058_35309170&quot;&gt;&lt;span title=&quot;2016-10-17 04:46:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 17, 2016 at 4:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This seems to be the best answer offered here. I wish to use it but I just wonder whether there is a way to verify the correctness of this algorithm. I tested f(50,5,58,3). It gives 832km, whereas &lt;a href=&quot;https://www.movable-type.co.uk/scripts/latlong.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;movable-type.co.uk/scripts/latlong.html&lt;/a&gt; using the &apos;haversine&apos; formula gives 899km. Is there such a big difference?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2691226/chong-lip-phang&quot; title=&quot;7,835 reputation&quot; class=&quot;comment-user&quot;&gt;Chong Lip Phang&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86846429_35309170&quot;&gt;&lt;span title=&quot;2018-04-19 07:44:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 19, 2018 at 7:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Moreover, I think the value returned by the above code is in m, and not km.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2691226/chong-lip-phang&quot; title=&quot;7,835 reputation&quot; class=&quot;comment-user&quot;&gt;Chong Lip Phang&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86846471_35309170&quot;&gt;&lt;span title=&quot;2018-04-19 07:45:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 19, 2018 at 7:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This formula has an inaccurate number in it. circumference through poles is 6356.752 NASA * 2 Pi = 39940.651 km. Not 37000. So gives low answers for changes in latitude, as Chong saw. Replace &quot;37000000.0&quot; with &quot;39940651.0&quot;. With this correction, my guess is accuracy to 1 part in 100, over distances up to one degree. (Not verified.)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/199364/toolmakersteve&quot; title=&quot;11,966 reputation&quot; class=&quot;comment-user&quot;&gt;ToolmakerSteve&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93808183_35309170&quot;&gt;&lt;span title=&quot;2018-11-25 15:12:53Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 25, 2018 at 15:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Could you add sources to your formulae?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8565438/zabop&quot; title=&quot;5,544 reputation&quot; class=&quot;comment-user&quot;&gt;zabop&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124277906_37870363&quot;&gt;&lt;span title=&quot;2021-12-10 12:11:27Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 10, 2021 at 12:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You&apos;re importing a non-standard package that does all the work.  I don&apos;t know if that&apos;s all that useful.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2336725/teepeemm&quot; title=&quot;4,162 reputation&quot; class=&quot;comment-user&quot;&gt;Teepeemm&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55777914_31398615&quot;&gt;&lt;span title=&quot;2015-12-01 01:23:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 1, 2015 at 1:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The package is in the PyPI, Python Package Index, as a python 3 package along with numpy and scikit-learn.  Not sure why one is apposed to packages.  They tend to be quite useful.  As open source, one could also examine the methods contained.  I think many would find this package useful so I will leave the post despite the downvote.  Cheers. :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4930264/invoketheshell&quot; title=&quot;3,651 reputation&quot; class=&quot;comment-user&quot;&gt;invoketheshell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63689523_31398615&quot;&gt;&lt;span title=&quot;2016-06-30 16:55:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 30, 2016 at 16:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It looks useful,  but I would like to include the exact pip command to install this package.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1412564/uri&quot; title=&quot;2,413 reputation&quot; class=&quot;comment-user&quot;&gt;Uri&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121264872_31398615&quot;&gt;&lt;span title=&quot;2021-08-02 05:26:02Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 2, 2021 at 5:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;distance is in meters. alternatively one can use      computeLength()&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3006465/electrobabe&quot; title=&quot;1,371 reputation&quot; class=&quot;comment-user&quot;&gt;electrobabe&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment58995786_24846150&quot;&gt;&lt;span title=&quot;2016-02-26 17:08:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 26, 2016 at 17:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;how to calculate the speed?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8814173/lemarque&quot; title=&quot;577 reputation&quot; class=&quot;comment-user&quot;&gt;LeMarque&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124627909_64214020&quot;&gt;&lt;span title=&quot;2021-12-28 04:50:10Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 28, 2021 at 4:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The code is about calculating the distance between two geostationary-spatial points. Didn&apos;t get the idea why speed calculation is required here ??&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5022656/sourav-karwa&quot; title=&quot;91 reputation&quot; class=&quot;comment-user&quot;&gt;sourav karwa&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124650084_64214020&quot;&gt;&lt;span title=&quot;2021-12-29 05:38:43Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 29, 2021 at 5:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Actually, if the timestamps are given, we can calculate the speed, as distance is calculated using the formula. but if there are one minute interval time stamps and we wanted to learn about the speed of (any vehicle moving) at every 5 minute interval, I was wondering how to do that?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8814173/lemarque&quot; title=&quot;577 reputation&quot; class=&quot;comment-user&quot;&gt;LeMarque&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124650742_64214020&quot;&gt;&lt;span title=&quot;2021-12-29 06:41:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 29, 2021 at 6:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You can further add in the code to calculate speed but in my use case, it wasn&apos;t necessary hence didn&apos;t calculate speed. Would love to hear what&apos;s your approach with that&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5022656/sourav-karwa&quot; title=&quot;91 reputation&quot; class=&quot;comment-user&quot;&gt;sourav karwa&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124688868_64214020&quot;&gt;&lt;span title=&quot;2021-12-30 22:15:17Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 30, 2021 at 22:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Upon calculating &quot;a&quot;, did you wrote Math.Sin( &lt;i&gt;dLat&lt;/i&gt; ..) twice by mistake?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3961710/marco-ottina&quot; title=&quot;276 reputation&quot; class=&quot;comment-user&quot;&gt;Marco Ottina&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment100878849_15759519&quot;&gt;&lt;span title=&quot;2019-07-24 13:32:08Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 24, 2019 at 13:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":589,"title":"Calculate distance between two latitude-longitude points? (Haversine formula)","content":"\n                \n&lt;p&gt;How do I calculate the distance between two points specified by latitude and longitude?&lt;/p&gt;\n\n&lt;p&gt;For clarification, I&apos;d like the distance in kilometers; the points use the WGS84 system and I&apos;d like to understand the relative accuracies of the approaches available.&lt;/p&gt;\n    ","slug":"calculate-distance-between-two-latitude-longitude-points-(haversine-formula)-1657388500103","postType":"QUESTION","createdAt":"2022-07-09T17:41:40.000Z","updatedAt":"2022-07-09T17:41:40.000Z","tags":[{"id":2805,"name":"maps","slug":"maps","createdAt":"2022-07-09T17:41:40.000Z","updatedAt":"2022-07-09T17:41:40.000Z","Questions_Tags":{"questionId":589,"tagId":2805}},{"id":2806,"name":"latitude-longitude","slug":"latitude-longitude","createdAt":"2022-07-09T17:41:40.000Z","updatedAt":"2022-07-09T17:41:40.000Z","Questions_Tags":{"questionId":589,"tagId":2806}},{"id":2807,"name":"haversine","slug":"haversine","createdAt":"2022-07-09T17:41:40.000Z","updatedAt":"2022-07-09T17:41:40.000Z","Questions_Tags":{"questionId":589,"tagId":2807}}]}},"__N_SSG":true}