{"pageProps":{"data":{"answer":["\n&lt;p&gt;Here you have some alternatives: &lt;a href=&quot;http://www.peterbe.com/plog/uniqifiers-benchmark&quot; rel=&quot;noreferrer&quot;&gt;http://www.peterbe.com/plog/uniqifiers-benchmark&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Fastest one:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f7&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq&lt;/span&gt;):\n    seen = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n    seen_add = seen.add\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seq &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; (x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seen &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; seen_add(x))]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Why assign &lt;code&gt;seen.add&lt;/code&gt; to &lt;code&gt;seen_add&lt;/code&gt; instead of just calling &lt;code&gt;seen.add&lt;/code&gt;? Python is a dynamic language, and resolving &lt;code&gt;seen.add&lt;/code&gt; each iteration is more costly than resolving a local variable. &lt;code&gt;seen.add&lt;/code&gt; could have changed between iterations, and the runtime isn&apos;t smart enough to rule that out. To play it safe, it has to check the object each time.&lt;/p&gt;\n\n&lt;p&gt;If you plan on using this function a lot on the same dataset, perhaps you would be better off with an ordered set: &lt;a href=&quot;http://code.activestate.com/recipes/528878/&quot; rel=&quot;noreferrer&quot;&gt;http://code.activestate.com/recipes/528878/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;O&lt;/em&gt;(1) insertion, deletion and member-check per operation.&lt;/p&gt;\n\n&lt;p&gt;(Small additional note: &lt;code&gt;seen.add()&lt;/code&gt; always returns &lt;code&gt;None&lt;/code&gt;, so the &lt;em&gt;&lt;code&gt;or&lt;/code&gt;&lt;/em&gt; above is there only as a way to attempt a set update, and not as an integral part of the logical test.)&lt;/p&gt;\n    ","\n&lt;p&gt;The best solution varies by Python version and environment constraints:&lt;/p&gt;\n&lt;h4&gt;Python 3.7+ (and most interpreters supporting 3.6, as an implementation detail):&lt;/h4&gt;\n&lt;p&gt;First introduced in PyPy 2.5.0, and adopted in CPython 3.6 as an implementation detail, before being made a language guarantee in Python 3.7, plain &lt;code&gt;dict&lt;/code&gt; is insertion-ordered, and even more efficient than the (also C implemented as of CPython 3.5) &lt;code&gt;collections.OrderedDict&lt;/code&gt;. So the fastest solution, by far, is also the simplest:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;items = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;.fromkeys(items))  &lt;span class=&quot;hljs-comment&quot;&gt;# Or [*dict.fromkeys(items)] if you prefer&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Like &lt;code&gt;list(set(items))&lt;/code&gt; this pushes all the work to the C layer (on CPython), but since &lt;code&gt;dict&lt;/code&gt;s are insertion ordered, &lt;code&gt;dict.fromkeys&lt;/code&gt; doesn&apos;t lose ordering. It&apos;s slower than &lt;code&gt;list(set(items))&lt;/code&gt; (takes 50-100% longer typically), but &lt;em&gt;much&lt;/em&gt; faster than any other order-preserving solution (takes about half the time of &lt;a href=&quot;https://stackoverflow.com/a/480227/364696&quot;&gt;hacks involving use of &lt;code&gt;set&lt;/code&gt;s in a listcomp&lt;/a&gt;).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Important note&lt;/strong&gt;: The &lt;code&gt;unique_everseen&lt;/code&gt; solution from &lt;code&gt;more_itertools&lt;/code&gt; (see below) has some unique advantages in terms of laziness and support for non-hashable input items; if you need these features, it&apos;s the &lt;em&gt;only&lt;/em&gt; solution that will work.&lt;/p&gt;\n&lt;h4&gt;Python 3.5 (and all older versions if performance isn&apos;t &lt;em&gt;critical&lt;/em&gt;)&lt;/h4&gt;\n&lt;p&gt;As Raymond &lt;a href=&quot;https://stackoverflow.com/a/39835527/336527&quot;&gt;pointed out&lt;/a&gt;, in CPython 3.5 where &lt;code&gt;OrderedDict&lt;/code&gt; is implemented in C, ugly list comprehension hacks are slower than &lt;code&gt;OrderedDict.fromkeys&lt;/code&gt; (unless you actually need the list at the end - and even then, only if the input is very short). So on both performance and readability the best solution for CPython 3.5 is the &lt;code&gt;OrderedDict&lt;/code&gt; equivalent of the 3.6+ use of plain &lt;code&gt;dict&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;items = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(OrderedDict.fromkeys(items))\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;On CPython 3.4 and earlier, this will be slower than some other solutions, so if profiling shows you need a better solution, keep reading.&lt;/p&gt;\n&lt;h4&gt;Python 3.4 and earlier, if performance is critical and third-party modules are acceptable&lt;/h4&gt;\n&lt;p&gt;As &lt;a href=&quot;https://stackoverflow.com/a/19279812/1219006&quot;&gt;@abarnert&lt;/a&gt; notes, the &lt;a href=&quot;https://pythonhosted.org/more-itertools/api.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;more_itertools&lt;/code&gt;&lt;/a&gt; library (&lt;code&gt;pip install more_itertools&lt;/code&gt;) contains a &lt;a href=&quot;https://pythonhosted.org/more-itertools/api.html#more_itertools.unique_everseen&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;unique_everseen&lt;/code&gt;&lt;/a&gt; function that is built to solve this problem without any &lt;strong&gt;unreadable&lt;/strong&gt; (&lt;code&gt;not seen.add&lt;/code&gt;) &lt;strong&gt;mutations&lt;/strong&gt; in list comprehensions. This is the fastest solution too:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; more_itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; unique_everseen\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;items = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(unique_everseen(items))\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Just one simple library import and no hacks.&lt;/p&gt;\n&lt;p&gt;The module is adapting the itertools recipe &lt;a href=&quot;https://docs.python.org/3/library/itertools.html#itertools-recipes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;unique_everseen&lt;/code&gt;&lt;/a&gt; which looks like:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unique_everseen&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable, key=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;List unique elements, preserving order. Remember all elements ever seen.&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# unique_everseen(&apos;AAAABBBCCDAABBB&apos;) --&amp;gt; A B C D&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# unique_everseen(&apos;ABBCcAD&apos;, str.lower) --&amp;gt; A B C D&lt;/span&gt;\n    seen = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n    seen_add = seen.add\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; filterfalse(seen.__contains__, iterable):\n            seen_add(element)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; element\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; iterable:\n            k = key(element)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seen:\n                seen_add(k)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; element\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;but unlike the &lt;code&gt;itertools&lt;/code&gt; recipe, it supports non-hashable items (at a performance cost; if all elements in &lt;code&gt;iterable&lt;/code&gt; are non-hashable, the algorithm becomes &lt;code&gt;O(n²)&lt;/code&gt;, vs. &lt;code&gt;O(n)&lt;/code&gt; if they&apos;re all hashable).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Important note&lt;/strong&gt;: Unlike all the other solutions here, &lt;code&gt;unique_everseen&lt;/code&gt; can be used lazily; the peak memory usage will be the same (eventually, the underlying &lt;code&gt;set&lt;/code&gt; grows to the same size), but if you don&apos;t &lt;code&gt;list&lt;/code&gt;ify the result, you just iterate it, you&apos;ll be able to process unique items as they&apos;re found, rather than waiting until the entire input has been deduplicated before processing the first unique item.&lt;/p&gt;\n&lt;h4&gt;Python 3.4 and earlier, if performance is critical &lt;em&gt;and&lt;/em&gt; third party modules are unavailable&lt;/h4&gt;\n&lt;p&gt;You have two options:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Copy and paste in &lt;a href=&quot;https://docs.python.org/3/library/itertools.html#itertools-recipes&quot; rel=&quot;noreferrer&quot;&gt;the &lt;code&gt;unique_everseen&lt;/code&gt; recipe&lt;/a&gt; to your code and use it per the &lt;code&gt;more_itertools&lt;/code&gt; example above&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use ugly hacks to allow a single listcomp to both check and update a &lt;code&gt;set&lt;/code&gt; to track what&apos;s been seen:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;seen = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n[x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seq &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seen &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; seen.add(x)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;at the expense of relying on the &lt;strong&gt;ugly hack&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; seen.add(x)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which relies on the fact that &lt;code&gt;set.add&lt;/code&gt; is an in-place method that always returns &lt;code&gt;None&lt;/code&gt; so &lt;code&gt;not None&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Note that &lt;em&gt;all&lt;/em&gt; of the solutions above are &lt;code&gt;O(n)&lt;/code&gt; (save calling &lt;code&gt;unique_everseen&lt;/code&gt; on an iterable of non-hashable items, which is &lt;code&gt;O(n²)&lt;/code&gt;, while the others would fail immediately with a &lt;code&gt;TypeError&lt;/code&gt;), so all solutions are performant enough when they&apos;re not the hottest code path. Which one to use depends on which versions of the language spec/interpreter/third-party modules you can rely on, whether or not performance is critical (don&apos;t assume it is; it usually isn&apos;t), and most importantly, readability (because if the person who maintains this code later ends up in a murderous mood, your clever micro-optimization probably wasn&apos;t worth it).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;In CPython 3.6+&lt;/strong&gt; (and all other Python implementations starting with &lt;strong&gt;Python 3.7+&lt;/strong&gt;), dictionaries &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.7.html#summary-release-highlights&quot; rel=&quot;noreferrer&quot;&gt;are ordered&lt;/a&gt;, so the way to remove duplicates from an iterable while keeping it in the original order is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;.fromkeys(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abracadabra&apos;&lt;/span&gt;))\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;In Python 3.5&lt;/strong&gt; and below (including &lt;strong&gt;Python 2.7&lt;/strong&gt;), use the &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.OrderedDict&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;OrderedDict&lt;/code&gt;&lt;/a&gt;. My timings show that this is now both the fastest and shortest of the various approaches for Python 3.5 (when it gained a C implementation; prior to 3.5 it&apos;s still the clearest solution, though not the fastest).&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(OrderedDict.fromkeys(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abracadabra&apos;&lt;/span&gt;))\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Not to kick a dead horse (this question is very old and already has lots of good answers), but here is a solution using pandas that is quite fast in many circumstances and is dead simple to use.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n\nmy_list = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;pd.Series(my_list).drop_duplicates().tolist()\n&lt;span class=&quot;hljs-comment&quot;&gt;# Output:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# [0, 1, 2, 3, 4, 5]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In &lt;strong&gt;Python 3.7&lt;/strong&gt; and above, dictionaries are &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2017-December/151283.html&quot; rel=&quot;noreferrer&quot;&gt;guaranteed&lt;/a&gt; to remember their key insertion order. The answer to &lt;a href=&quot;https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6&quot;&gt;this&lt;/a&gt; question summarizes the current state of affairs.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;OrderedDict&lt;/code&gt; solution thus becomes obsolete and without any import statements we can simply issue:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lst = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;.fromkeys(lst))\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;sequence = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;6&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;4&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;5&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;6&apos;&lt;/span&gt;]\nunique = []\n[unique.append(item) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sequence &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; unique]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;unique  &lt;code&gt;[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;6&apos;, &apos;4&apos;, &apos;5&apos;]&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; groupby\n[ key &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key,_ &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; groupby(sortedList)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The list doesn&apos;t even have to be &lt;em&gt;sorted&lt;/em&gt;, the sufficient condition is that equal values are grouped together.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit: I assumed that &quot;preserving order&quot; implies that the list is actually ordered. If this is not the case, then the solution from MizardX is the right one.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Community edit: This is however the most elegant way to &quot;compress duplicate consecutive elements into a single element&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;I think if you wanna maintain the order,&lt;/p&gt;\n\n&lt;h2&gt;you can try this:&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;list1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]    \nlist2 = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(list1))    \nlist2.sort(key=list1.index)    \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; list2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;OR similarly you can do this:&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;list1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]  \nlist2 = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(list1),key=list1.index)  \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; list2 \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;You can also do this:&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;list1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]    \nlist2 = []    \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list1:    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list2:  \n        list2.append(i)`    \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; list2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;It can also be written as this:&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;list1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]    \nlist2 = []    \n[list2.append(i) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list1 &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list2]    \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; list2 \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just to add another (very performant) implementation of such a functionality from an external module&lt;sup&gt;1&lt;/sup&gt;: &lt;a href=&quot;https://iteration-utilities.readthedocs.io/en/latest/generated/unique_everseen.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;iteration_utilities.unique_everseen&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; iteration_utilities &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; unique_everseen\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lst = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(unique_everseen(lst))\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Timings&lt;/h1&gt;\n\n&lt;p&gt;I did some timings (Python 3.6) and these show that it&apos;s faster than all other alternatives I tested, including &lt;code&gt;OrderedDict.fromkeys&lt;/code&gt;, &lt;code&gt;f7&lt;/code&gt; and &lt;code&gt;more_itertools.unique_everseen&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%matplotlib notebook\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; iteration_utilities &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; unique_everseen\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; more_itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; unique_everseen &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; mi_unique_everseen\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f7&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq&lt;/span&gt;):\n    seen = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n    seen_add = seen.add\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seq &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; (x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seen &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; seen_add(x))]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;iteration_utilities_unique_everseen&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(unique_everseen(seq))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;more_itertools_unique_everseen&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(mi_unique_everseen(seq))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;odict&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(OrderedDict.fromkeys(seq))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; simple_benchmark &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; benchmark\n\nb = benchmark([f7, iteration_utilities_unique_everseen, more_itertools_unique_everseen, odict],\n              {&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;**i: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;**i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)},\n              &lt;span class=&quot;hljs-string&quot;&gt;&apos;list size (no duplicates)&apos;&lt;/span&gt;)\nb.plot()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/XLrov.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/XLrov.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;And just to make sure I also did a test with more duplicates just to check if it makes a difference:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; random\n\nb = benchmark([f7, iteration_utilities_unique_everseen, more_itertools_unique_everseen, odict],\n              {&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;**i: [random.randint(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;**(i-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;**i)] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)},\n              &lt;span class=&quot;hljs-string&quot;&gt;&apos;list size (lots of duplicates)&apos;&lt;/span&gt;)\nb.plot()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/YCx2c.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/YCx2c.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;And one containing only one value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;b = benchmark([f7, iteration_utilities_unique_everseen, more_itertools_unique_everseen, odict],\n              {&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;**i: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]*(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;**i) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)},\n              &lt;span class=&quot;hljs-string&quot;&gt;&apos;list size (only duplicates)&apos;&lt;/span&gt;)\nb.plot()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/SPCcT.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/SPCcT.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;In all of these cases the &lt;code&gt;iteration_utilities.unique_everseen&lt;/code&gt; function is the fastest (on my computer).&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;This &lt;code&gt;iteration_utilities.unique_everseen&lt;/code&gt; function can also handle unhashable values in the input (however with an &lt;code&gt;O(n*n)&lt;/code&gt; performance instead of the &lt;code&gt;O(n)&lt;/code&gt; performance when the values are hashable).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lst = [{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}, {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(unique_everseen(lst))\n[{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}, {&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Disclaimer: I&apos;m the author of that package.&lt;/p&gt;\n    ","\n&lt;p&gt;For another very late answer to another very old question:&lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=&quot;http://docs.python.org/3/library/itertools.html#itertools-recipes&quot;&gt;&lt;code&gt;itertools&lt;/code&gt; recipes&lt;/a&gt; have a function that does this, using the &lt;code&gt;seen&lt;/code&gt; set technique, but:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Handles a standard &lt;code&gt;key&lt;/code&gt; function.&lt;/li&gt;\n&lt;li&gt;Uses no unseemly hacks.&lt;/li&gt;\n&lt;li&gt;Optimizes the loop by pre-binding &lt;code&gt;seen.add&lt;/code&gt; instead of looking it up N times. (&lt;code&gt;f7&lt;/code&gt; also does this, but some versions don&apos;t.)&lt;/li&gt;\n&lt;li&gt;Optimizes the loop by using &lt;code&gt;ifilterfalse&lt;/code&gt;, so you only have to loop over the unique elements in Python, instead of all of them. (You still iterate over all of them inside &lt;code&gt;ifilterfalse&lt;/code&gt;, of course, but that&apos;s in C, and much faster.)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Is it actually faster than &lt;code&gt;f7&lt;/code&gt;? It depends on your data, so you&apos;ll have to test it and see. If you want a list in the end, &lt;code&gt;f7&lt;/code&gt; uses a listcomp, and there&apos;s no way to do that here. (You can directly &lt;code&gt;append&lt;/code&gt; instead of &lt;code&gt;yield&lt;/code&gt;ing, or you can feed the generator into the &lt;code&gt;list&lt;/code&gt; function, but neither one can be as fast as the LIST_APPEND inside a listcomp.) At any rate, usually, squeezing out a few microseconds is not going to be as important as having an easily-understandable, reusable, already-written function that doesn&apos;t require DSU when you want to decorate.&lt;/p&gt;\n\n&lt;p&gt;As with all of the recipes, it&apos;s also available in &lt;a href=&quot;https://pypi.python.org/pypi/more-itertools&quot;&gt;&lt;code&gt;more-iterools&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you just want the no-&lt;code&gt;key&lt;/code&gt; case, you can simplify it as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unique&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable&lt;/span&gt;):\n    seen = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n    seen_add = seen.add\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.ifilterfalse(seen.__contains__, iterable):\n        seen_add(element)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; element\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For no hashable types (e.g. list of lists), based on MizardX&apos;s:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f7_noHash&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq&lt;/span&gt;)\n    seen = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [ x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seq &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;( x ) &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seen &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; seen.add( &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;( x ) )]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;here is a simple way to do it:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;list1 = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;w&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;o&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;l&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(list1 ), key=list1.index)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;that gives the output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;w&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;o&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;l&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;5 x faster reduce variant but more sophisticated&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;reduce(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; r, v: v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; r[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; r &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (r[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].append(v) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; r[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].add(v)) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; r, l, ([], &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()))[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Explanation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;default = (&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(), &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;())\n&lt;span class=&quot;hljs-comment&quot;&gt;# use list to keep order&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# use set to make lookup faster&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reducer&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result, item&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; result[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:\n        result[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].append(item)\n        result[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].add(item)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;reduce(reducer, l, default)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;pandas users should check out &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.unique.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.unique&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lst = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;pd.unique(lst)\narray([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function returns a NumPy array. If needed, you can convert it to a list with the &lt;a href=&quot;https://numpy.org/doc/1.18/reference/generated/numpy.ndarray.tolist.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;tolist&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;\n    ","\n&lt;p&gt;Borrowing the recursive idea used in definining Haskell&apos;s &lt;code&gt;nub&lt;/code&gt; function for lists, this would be a recursive approach:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unique&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;lst&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; lst==[] &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [lst[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]] + unique(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x!= lst[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], lst[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;118&lt;/span&gt;]: unique([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;])\nOut[&lt;span class=&quot;hljs-number&quot;&gt;118&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I tried it for growing data sizes and saw sub-linear time-complexity (not definitive, but suggests this should be fine for normal data).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;122&lt;/span&gt;]: %timeit unique(np.random.randint(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, size=(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)))\n&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;25.3&lt;/span&gt; us per loop\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;]: %timeit unique(np.random.randint(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, size=(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)))\n&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42.9&lt;/span&gt; us per loop\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;124&lt;/span&gt;]: %timeit unique(np.random.randint(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, size=(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)))\n&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;132&lt;/span&gt; us per loop\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;125&lt;/span&gt;]: %timeit unique(np.random.randint(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, size=(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)))\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.05&lt;/span&gt; ms per loop\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;126&lt;/span&gt;]: %timeit unique(np.random.randint(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, size=(&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;)))\n&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt; ms per loop\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I also think it&apos;s interesting that this could be readily generalized to uniqueness by other operations. Like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unique&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;lst, cmp_op=operator.ne&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; lst==[] &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [lst[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]] + unique(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: cmp_op(x, lst[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), lst[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]), cmp_op)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example, you could pass in a function that uses the notion of rounding to the same integer as if it was &quot;equality&quot; for uniqueness purposes, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_round&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,y&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;round&lt;/span&gt;(x) != &lt;span class=&quot;hljs-built_in&quot;&gt;round&lt;/span&gt;(y)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then unique(some_list, test_round) would provide the unique elements of the list where uniqueness no longer meant traditional equality (which is implied by using any sort of set-based or dict-key-based approach to this problem) but instead meant to take only the first element that rounds to K for each possible integer K that the elements might round to, e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]: unique([&lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1.9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4.2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4.8&lt;/span&gt;], test_round)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1.9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4.2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can reference a list comprehension as it is being built by the symbol &apos;_[1]&apos;. &lt;br&gt;For example, the following function unique-ifies a list of elements without changing their order by referencing its list comprehension.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unique&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;my_list&lt;/span&gt;): \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_list &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;_[1]&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Demo:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;l1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\nl2 = [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l1 &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;_[1]&apos;&lt;/span&gt;]]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; l2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;b&gt;1. These solutions are fine&lt;/b&gt;&lt;br&gt;\nFor removing duplicates while preserving order, the excellent solution(s) proposed elsewhere on this page:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;seen = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n[x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seq &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; (x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seen &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; seen.add(x))]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and variation(s), e.g.:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;seen = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n[x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seq &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seen &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; seen.add(x)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;are indeed popular because they are simple, minimalistic, and deploy the correct hashing for optimal efficency. The main complaint about these seems to be that using the invariant &lt;code&gt;None&lt;/code&gt; &quot;returned&quot; by method &lt;code&gt;seen.add(x)&lt;/code&gt; as a constant (and therefore excess/unnecessary) value in a logical expressionjust for its side-effectis hacky and/or confusing.&lt;/p&gt;\n&lt;p&gt;&lt;b&gt;2. but they waste one hash lookup per iteration.&lt;/b&gt;&lt;br&gt;\nSurprisingly, given the amount of discussion and debate on this topic, there is actually a significant improvement to the code that seems to have been overlooked. As shown, each &quot;test-and-set&quot; iteration requires &lt;strong&gt;two&lt;/strong&gt; hash lookups: the first to test membership &lt;code&gt;x not in seen&lt;/code&gt; and then again to actually add the value &lt;code&gt;seen.add(x)&lt;/code&gt;. Since the first operation guarantees that the second will always be successful, there is a wasteful duplication of effort here. And because the overall technique here is so efficient, the excess hash lookups will likely end up being the most expensive proportion of what little work remains.&lt;/p&gt;\n&lt;p&gt;&lt;b&gt;3. Instead, let the &lt;code&gt;set&lt;/code&gt; do its job!&lt;/b&gt;&lt;br&gt;\nNotice that the examples above only call &lt;code&gt;set.add&lt;/code&gt; with the foreknowledge that doing so will always result in an increase in set membership. The &lt;code&gt;set&lt;/code&gt; itself &lt;em&gt;never gets an chance to reject&lt;/em&gt; a duplicate; our code snippet has essentially usurped that role for itself. The use of explicit two-step test-and-set code is robbing &lt;code&gt;set&lt;/code&gt; of its core ability to exclude those duplicates itself.&lt;/p&gt;\n&lt;p&gt;&lt;b&gt;4. The improved code:&lt;/b&gt;&lt;br&gt;\nThe following version &lt;em&gt;&lt;strong&gt;cuts the number of hash lookups&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;per iteration&lt;/em&gt; &lt;em&gt;&lt;strong&gt;in half&lt;/strong&gt;&lt;/em&gt;from two down to just one. This improves the performance of an already-speedy approach considerably.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;seen = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n[x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seq &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(seen) &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(seen.add(x) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; seen)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As for the unpleasant hack, now mutated a bit from before, it does appear to live on to see another day.&lt;/p&gt;\n    ","\n&lt;p&gt;If you need one liner then maybe this would help:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;reduce(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x, y: x + y &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; y[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; x, &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: [x],lst))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... should work but correct me if i&apos;m wrong&lt;/p&gt;\n    ","\n&lt;p&gt;MizardX&apos;s answer gives a good collection of multiple approaches.&lt;/p&gt;\n\n&lt;p&gt;This is what I came up with while thinking aloud:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mylist = [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i,x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(mylist) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mylist[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You could do a sort of ugly list comprehension hack.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[l[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; l.index(l[i]) == i]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Relatively effective approach with &lt;code&gt;_sorted_&lt;/code&gt; a &lt;code&gt;numpy&lt;/code&gt; arrays:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;b = np.array([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;])    \nnumpy.hstack([b[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], [x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(b[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:], b[:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]!=x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]]])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Outputs:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;array([ &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,  &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;l = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,...]\nn = []\nn.extend(ele &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ele &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ele &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(n))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A generator expression that uses the O(1) look up of a set to determine whether or not to include an element in the new list.&lt;/p&gt;\n    ","\n&lt;p&gt;A simple recursive solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniquefy_list&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; uniquefy_list(a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:] &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]+uniquefy_list(a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a)&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Eliminating the duplicate values in a sequence, but preserve the order of the remaining items. Use of general purpose generator function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# for hashable sequence&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_duplicates&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;):\n    seen = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seen:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; item\n            seen.add(item)\n\na = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(remove_duplicates(a))\n&lt;span class=&quot;hljs-comment&quot;&gt;# [1, 5, 2, 9, 10]&lt;/span&gt;\n\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# for unhashable sequence&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_duplicates&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items, key=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    seen = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items:\n        val = item &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; key(item)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; val &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seen:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; item\n            seen.add(val)\n\na = [ {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}]\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(remove_duplicates(a, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; d: (d[&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;],d[&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;])))\n&lt;span class=&quot;hljs-comment&quot;&gt;# [{&apos;x&apos;: 1, &apos;y&apos;: 2}, {&apos;x&apos;: 1, &apos;y&apos;: 3}, {&apos;x&apos;: 2, &apos;y&apos;: 4}]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# brute force method&lt;/span&gt;\narr = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x:\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arr:\n    arr.insert(x[i],i)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# recursive method&lt;/span&gt;\ntmp = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_duplicates&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; j &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(x):\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; x[j] &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; tmp:\n        tmp.append(x[j])\n      i = j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  \n      remove_duplicates(i)\n\n      \n\nremove_duplicates()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One liner list comprehension:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;values_non_duplicated = [value &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; index, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(values) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; values[ : index]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you routinely use &lt;a href=&quot;http://pandas.pydata.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/a&gt;, and aesthetics is preferred over performance, then consider the built-in function &lt;code&gt;pandas.Series.drop_duplicates&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\n    uniquifier = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; alist: pd.Series(alist).drop_duplicates().tolist()\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# from the chosen answer &lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f7&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq&lt;/span&gt;):\n        seen = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n        seen_add = seen.add\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [ x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seq &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; (x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seen &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; seen_add(x))]\n\n    alist = np.random.randint(low=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, high=&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, size=&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;).tolist()\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; uniquifier(alist) == f7(alist)  &lt;span class=&quot;hljs-comment&quot;&gt;# True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Timing: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    In [&lt;span class=&quot;hljs-number&quot;&gt;104&lt;/span&gt;]: %timeit f7(alist)\n    &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt; ms per loop\n    In [&lt;span class=&quot;hljs-number&quot;&gt;110&lt;/span&gt;]: %timeit uniquifier(alist)\n    &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4.39&lt;/span&gt; ms per loop\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;this will preserve order and run in O(n) time. basically the idea is to create a hole wherever there is a duplicate found and sink it down to the bottom. makes use of a read and write pointer. whenever a duplicate is found only the read pointer advances and write pointer stays on the duplicate entry to overwrite it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deduplicate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;):\n    count = {}\n    (read,write) = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; read &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; l[read] &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; count:\n            read += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n        count[l[read]] = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        l[write] = l[read]\n        read += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        write += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:write]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A solution without using imported modules or sets:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;text = &lt;span class=&quot;hljs-string&quot;&gt;&quot;ask not what your country can do for you ask what you can do for your country&quot;&lt;/span&gt;\nsentence = text.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;)\nnoduplicates = [(sentence[i]) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(sentence)) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; sentence[i] &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sentence[:i]]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(noduplicates)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Gives output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;ask&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;not&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;what&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;your&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;country&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;can&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;do&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;for&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;you&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;An in-place method&lt;/h3&gt;\n\n&lt;p&gt;This method is quadratic, because we have a linear lookup into the list for every element of the list (to that we have to add the cost of rearranging the list because of the &lt;code&gt;del&lt;/code&gt; s).&lt;/p&gt;\n\n&lt;p&gt;That said, it is possible to operate in place if we start from the end of the list and proceed toward the origin removing each term that is present in the sub-list at its left&lt;/p&gt;\n\n&lt;p&gt;This idea in code is simply&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;): \n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; l[i] &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l[:i]: &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; l[i] \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;em&gt;A simple test of the implementation&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; random &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; randint, seed                                                                                            \nIn [&lt;span class=&quot;hljs-number&quot;&gt;92&lt;/span&gt;]: seed(&lt;span class=&quot;hljs-string&quot;&gt;&apos;20080808&apos;&lt;/span&gt;) ; l = [randint(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)] &lt;span class=&quot;hljs-comment&quot;&gt;# Beijing Olympics                                                                 &lt;/span&gt;\nIn [&lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;): \n    ...:     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(l) \n    ...:     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i, l[i], l[:i], end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) \n    ...:     &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; l[i] &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l[:i]: \n    ...:          &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&apos;: remove&apos;&lt;/span&gt;, l[i]) \n    ...:          &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; l[i] \n    ...:     &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;: \n    ...:          &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;() \n    ...: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(l)\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]: remove &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]: remove &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: remove &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: remove &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: remove &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]: remove &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]: remove &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;94&lt;/span&gt;]:                                                                                                                             \n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":406,"title":"How do you remove duplicates from a list whilst preserving order?","content":"\n                \n&lt;p&gt;Is there a built-in that removes duplicates from list in Python, whilst preserving order? I know that I can use a set to remove duplicates, but that destroys the original order. I also know that I can roll my own like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniq&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;&lt;/span&gt;):\n  output = []\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; output:\n      output.append(x)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; output\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Thanks to &lt;a href=&quot;https://stackoverflow.com/users/28169/unwind&quot;&gt;unwind&lt;/a&gt; for that &lt;a href=&quot;https://stackoverflow.com/questions/479897/how-do-you-remove-duplicates-from-a-list-in-python#479921&quot;&gt;code sample&lt;/a&gt;.)&lt;/p&gt;\n\n&lt;p&gt;But I&apos;d like to avail myself of a built-in or a more Pythonic idiom if possible.&lt;/p&gt;\n\n&lt;p&gt;Related question: &lt;a href=&quot;https://stackoverflow.com/questions/89178/in-python-what-is-the-fastest-algorithm-for-removing-duplicates-from-a-list-so-t&quot;&gt;In Python, what is the fastest algorithm for removing duplicates from a list so that all elements are unique &lt;em&gt;while preserving order&lt;/em&gt;?&lt;/a&gt;&lt;/p&gt;\n    ","slug":"how-do-you-remove-duplicates-from-a-list-whilst-preserving-order-1657387877978","postType":"QUESTION","createdAt":"2022-07-09T17:31:17.000Z","updatedAt":"2022-07-09T17:31:17.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"What happens if you use the 32-bit int 0x80 Linux ABI in 64-bit code?","slug":"what-happens-if-you-use-the-32-bit-int-0x80-linux-abi-in-64-bit-code-1657388560485"},{"title":"I just assigned a variable, but echo $variable shows something else","slug":"i-just-assigned-a-variable-but-echo-dollarvariable-shows-something-else-1657387574561"},{"title":"Why are these numbers not equal?","slug":"why-are-these-numbers-not-equal-1657384729559"},{"title":"How can I validate an email address using a regular expression?","slug":"how-can-i-validate-an-email-address-using-a-regular-expression-1657384549233"},{"title":"What is a lambda expression in C++11?","slug":"what-is-a-lambda-expression-in-c++11-1657387999252"},{"title":"What does the comma operator , do?","slug":"what-does-the-comma-operator-do-1657388258021"},{"title":"How can I transition height: 0; to height: auto; using CSS?","slug":"how-can-i-transition-height:-0-to-height:-auto-using-css-1657388022100"},{"title":"MySQL Error 1093 - Can't specify target table for update in FROM clause","slug":"mysql-error-1093-can't-specify-target-table-for-update-in-from-clause-1657388078961"},{"title":"Make a div fill the height of the remaining screen space","slug":"make-a-div-fill-the-height-of-the-remaining-screen-space-1657387482387"},{"title":"Why does Tkinter image not show up if created in a function?","slug":"why-does-tkinter-image-not-show-up-if-created-in-a-function-1657387388233"},{"title":"Detecting a mobile browser","slug":"detecting-a-mobile-browser-1657388460071"},{"title":"What is the difference between __str__ and __repr__?","slug":"what-is-the-difference-between-__str__-and-__repr__-1657387738760"},{"title":"How can I iterate through two lists in parallel?","slug":"how-can-i-iterate-through-two-lists-in-parallel-1657387278930"},{"title":"How to make a div 100% height of the browser window","slug":"how-to-make-a-div-100percent-height-of-the-browser-window-1657388265955"},{"title":"commandButton/commandLink/ajax action/listener method not invoked or input value not set/updated","slug":"commandbuttoncommandlinkajax-actionlistener-method-not-invoked-or-input-value-not-setupdated-1657384667519"},{"title":"Flexbox: center horizontally and vertically","slug":"flexbox:-center-horizontally-and-vertically-1657384587888"},{"title":"Why does my ArrayList contain N copies of the last item added to the list?","slug":"why-does-my-arraylist-contain-n-copies-of-the-last-item-added-to-the-list-1657387712003"},{"title":"Prefer composition over inheritance?","slug":"prefer-composition-over-inheritance-1657387399409"},{"title":"Variables are not behaving as expected","slug":"variables-are-not-behaving-as-expected-1657384865672"},{"title":"What's the meaning of \"=>\" (an arrow formed from equals & greater than) in JavaScript?","slug":"what's-the-meaning-of-\"greater\"-(an-arrow-formed-from-equals-and-greater-than)-in-javascript-1657387977118"}]},"__N_SSG":true}