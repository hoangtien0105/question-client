{"pageProps":{"data":{"answer":["\n&lt;p&gt;The &lt;a href=&quot;http://ex-parrot.com/%7Epdw/Mail-RFC822-Address.html&quot; rel=&quot;noreferrer&quot;&gt;fully RFC 822 compliant regex&lt;/a&gt; is inefficient and obscure because of its length.  Fortunately, RFC 822 was superseded twice and the current specification for email addresses is &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5322&quot; rel=&quot;noreferrer&quot;&gt;RFC 5322&lt;/a&gt;.  RFC 5322 leads to a regex that can be understood if studied for a few minutes and is efficient enough for actual use.&lt;/p&gt;\n&lt;p&gt;One RFC 5322 compliant regex can be found at the top of the page at &lt;a href=&quot;http://emailregex.com/&quot; rel=&quot;noreferrer&quot;&gt;http://emailregex.com/&lt;/a&gt; but uses the IP address pattern that is floating around the internet with a bug that allows &lt;code&gt;00&lt;/code&gt; for any of the unsigned byte decimal values in a dot-delimited address, which is illegal.  The rest of it appears to be consistent with the RFC 5322 grammar and passes several tests using &lt;code&gt;grep -Po&lt;/code&gt;, including cases domain names, IP addresses, bad ones, and account names with and without quotes.&lt;/p&gt;\n&lt;p&gt;Correcting the &lt;code&gt;00&lt;/code&gt; bug in the IP pattern, we obtain a working and fairly fast regex.  (Scrape the rendered version, not the markdown, for actual code.)&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;(?:[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+)*|&quot;(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*&quot;)@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;or:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;(?:[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;!#$%&amp;amp;&lt;span class=&quot;hljs-string&quot;&gt;&apos;*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;amp;&apos;&lt;/span&gt;*+/=?^_`{|}~-]+)*|&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*&quot;&lt;/span&gt;)@(?:(?:[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;](?:[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;-]*[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;])?\\.)+[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;](?:[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;-]*[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;])?|\\[(?:(?:(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]|[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;])|&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]|[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]?[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]))\\.){&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}(?:(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]|[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;])|&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]|[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]?[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;])|[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;-]*[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here is &lt;a href=&quot;https://regexper.com/#(%3F%3A%5Ba-z0-9!%23%24%25%26%27*%2B%2F%3D%3F%5E_%60%7B%7C%7D%7E-%5D%2B(%3F%3A%5C.%5Ba-z0-9!%23%24%25%26%27*%2B%2F%3D%3F%5E_%60%7B%7C%7D%7E-%5D%2B)*%7C%22(%3F%3A%5B%5Cx01-%5Cx08%5Cx0b%5Cx0c%5Cx0e-%5Cx1f%5Cx21%5Cx23-%5Cx5b%5Cx5d-%5Cx7f%5D%7C%5C%5C%5B%5Cx01-%5Cx09%5Cx0b%5Cx0c%5Cx0e-%5Cx7f%5D)*%22)%40(%3F%3A(%3F%3A%5Ba-z0-9%5D(%3F%3A%5Ba-z0-9-%5D*%5Ba-z0-9%5D)%3F%5C.)%2B%5Ba-z0-9%5D(%3F%3A%5Ba-z0-9-%5D*%5Ba-z0-9%5D)%3F%7C%5C%5B(%3F%3A(%3F%3A(2(5%5B0-5%5D%7C%5B0-4%5D%5B0-9%5D)%7C1%5B0-9%5D%5B0-9%5D%7C%5B1-9%5D%3F%5B0-9%5D))%5C.)%7B3%7D(%3F%3A(2(5%5B0-5%5D%7C%5B0-4%5D%5B0-9%5D)%7C1%5B0-9%5D%5B0-9%5D%7C%5B1-9%5D%3F%5B0-9%5D)%7C%5Ba-z0-9-%5D*%5Ba-z0-9%5D%3A(%3F%3A%5B%5Cx01-%5Cx08%5Cx0b%5Cx0c%5Cx0e-%5Cx1f%5Cx21-%5Cx5a%5Cx53-%5Cx7f%5D%7C%5C%5C%5B%5Cx01-%5Cx09%5Cx0b%5Cx0c%5Cx0e-%5Cx7f%5D)%2B)%5C%5D)&quot; rel=&quot;noreferrer&quot;&gt;diagram&lt;/a&gt; of &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot; rel=&quot;noreferrer&quot;&gt;finite state machine&lt;/a&gt; for above regexp which is more clear than regexp itself\n&lt;a href=&quot;https://i.stack.imgur.com/YI6KR.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/YI6KR.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The more sophisticated patterns in Perl and PCRE (regex library used e.g. in PHP) can &lt;a href=&quot;https://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/1917982#1917982&quot;&gt;correctly parse RFC 5322 without a hitch&lt;/a&gt;. Python and C# can do that too, but they use a different syntax from those first two. However, if you are forced to use one of the many less powerful pattern-matching languages, then its best to use a real parser.&lt;/p&gt;\n&lt;p&gt;It&apos;s also important to understand that validating it per the RFC tells you absolutely nothing about whether that address actually exists at the supplied domain, or whether the person entering the address is its true owner. People sign others up to mailing lists this way all the time. Fixing that requires a fancier kind of validation that involves sending that address a message that includes a confirmation token meant to be entered on the same web page as was the address.&lt;/p&gt;\n&lt;p&gt;Confirmation tokens are the only way to know you got the address of the person entering it. This is why most mailing lists now use that mechanism to confirm sign-ups. After all, anybody can put down &lt;code&gt;president@whitehouse.gov&lt;/code&gt;, and that will even parse as legal, but it isn&apos;t likely to be the person at the other end.&lt;/p&gt;\n&lt;p&gt;For PHP, you should &lt;em&gt;not&lt;/em&gt; use the pattern given in &lt;a href=&quot;http://www.linuxjournal.com/article/9585&quot; rel=&quot;noreferrer&quot;&gt;Validate an E-Mail Address with PHP, the Right Way&lt;/a&gt; from which I quote:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;There is some danger that common usage and widespread sloppy coding will establish a de facto standard for e-mail addresses that is more restrictive than the recorded formal standard.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;That is no better than all the other non-RFC patterns. It isnt even smart enough to handle even &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc822&quot; rel=&quot;noreferrer&quot;&gt;RFC 822&lt;/a&gt;, let alone RFC 5322. &lt;a href=&quot;https://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/1917982#1917982&quot;&gt;This one&lt;/a&gt;, however, is.&lt;/p&gt;\n&lt;p&gt;If you want to get fancy and pedantic, &lt;a href=&quot;http://cubicspot.blogspot.com/2012/06/correct-way-to-validate-e-mail-address.html&quot; rel=&quot;noreferrer&quot;&gt;implement a complete state engine&lt;/a&gt;. A regular expression can only act as a rudimentary filter. The problem with regular expressions is that telling someone that their perfectly valid e-mail address is invalid (a false positive) because your regular expression can&apos;t handle it is just rude and impolite from the user&apos;s perspective. A state engine for the purpose can both validate and even correct e-mail addresses that would otherwise be considered invalid as it disassembles the e-mail address according to each RFC. This allows for a potentially more pleasing experience, like&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The specified e-mail address &apos;myemail@address,com&apos; is invalid. Did you mean &apos;myemail@address.com&apos;?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;See also &lt;a href=&quot;http://worsethanfailure.com/Articles/Validating_Email_Addresses.aspx&quot; rel=&quot;noreferrer&quot;&gt;Validating Email Addresses&lt;/a&gt;, including the comments. Or &lt;a href=&quot;http://fightingforalostcause.net/misc/2006/compare-email-regex.php&quot; rel=&quot;noreferrer&quot;&gt;Comparing E-mail Address Validating Regular Expressions&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/SrUwP.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/SrUwP.png&quot; alt=&quot;Regular expression visualization&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.debuggex.com/r/aH_x42NflV8G-GS7&quot; rel=&quot;noreferrer&quot;&gt;Debuggex Demo&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You should not use regular expressions to validate email addresses.&lt;/p&gt;\n&lt;p&gt;Instead, in C# use the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.net.mail.mailaddress.aspx&quot; rel=&quot;noreferrer&quot;&gt;MailAddress&lt;/a&gt; class, like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-csharp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    address = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MailAddress(address).Address;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(FormatException) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// address is invalid&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;MailAddress&lt;/code&gt; class uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form&quot; rel=&quot;noreferrer&quot;&gt;BNF&lt;/a&gt; parser to validate the address in full accordance with RFC822.&lt;/p&gt;\n&lt;p&gt;If you plan to use the &lt;code&gt;MailAddress&lt;/code&gt; to validate the e-mail address, be aware that this approach accepts the display name part of the e-mail address as well, and that may not be exactly what you want to achieve. For example, it accepts these strings as valid e-mail addresses:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&quot;user1@hotmail.com; user2@gmail.com&quot;&lt;/li&gt;\n&lt;li&gt;&quot;user1@hotmail.com; user2@gmail.com; user3@company.com&quot;&lt;/li&gt;\n&lt;li&gt;&quot;User Display Name user3@company.com&quot;&lt;/li&gt;\n&lt;li&gt;&quot;user4 @company.com&quot;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In some of these cases, only the last part of the strings is parsed as the address; the rest before that is the display name. To get a plain e-mail address without any display name, you can check the normalized address against your original string.&lt;/p&gt;\n&lt;pre class=&quot;lang-csharp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; isValid = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n{\n    MailAddress address = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MailAddress(emailAddress);\n    isValid = (address.Address == emailAddress);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// or&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// isValid = string.IsNullOrEmpty(address.DisplayName);&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (FormatException)\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// address is invalid&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Furthermore, an address having a dot at the end, like &lt;code&gt;user@company.&lt;/code&gt; is accepted by MailAddress as well.&lt;/p&gt;\n&lt;p&gt;If you really want to use a regex, &lt;a href=&quot;http://www.ex-parrot.com/%7Epdw/Mail-RFC822-Address.html&quot; rel=&quot;noreferrer&quot;&gt;here it is&lt;/a&gt;:&lt;/p&gt;\n&lt;pre&gt;(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\n\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(\n?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \n\\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\0\n31]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\\n](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+\n(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:\n(?:\\r\\n)?[ \\t])*))*|(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)\n?[ \\t])*)*\\&amp;lt;(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\\nr\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[\n \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)\n?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t]\n)*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[\n \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*\n)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)\n*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+\n|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\n\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\n\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t\n]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031\n]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](\n?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?\n:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?\n:\\r\\n)?[ \\t])*))*\\&amp;gt;(?:(?:\\r\\n)?[ \\t])*)|(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?\n:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?\n[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)*:(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\n\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;\n\n@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;\n(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\\n&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?\n:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\n\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\n\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(\n?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)*\\&amp;lt;(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()&amp;lt;&amp;gt;@,;\n:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([\n^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;\n.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\\n]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\\n[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\\nr\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]\n|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\0\n00-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\\n.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,\n;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?\n:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*\n(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\n\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[\n^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]\n]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\&amp;gt;(?:(?:\\r\\n)?[ \\t])*)(?:,\\s*(\n?:(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\\n&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(\n?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\n\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t\n])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t\n])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?\n:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\n\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:\n[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\\n]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)*\\&amp;lt;(?:(?:\\r\\n)\n?[ \\t])*(?:@(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;\n()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)\n?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;\n\n@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[\n \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,\n;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\\n&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?\n(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\n\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\n\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\n&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])\n*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])\n+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\\n.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\&amp;gt;(?:(\n?:\\r\\n)?[ \\t])*))*)?;\\s*)&lt;/pre&gt;\n    ","\n&lt;p&gt;This question is asked a lot, but I think you should step back and ask yourself &lt;em&gt;why&lt;/em&gt; you want to validate email adresses syntactically? What is the benefit really?&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;It will not catch common typos.&lt;/li&gt;\n&lt;li&gt;It does not prevent people from entering invalid or made-up email addresses, or entering someone else&apos;s address for that matter.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If you want to validate that an email is correct, you have no choice than to send a confirmation email and have the user reply to that. In many cases you will &lt;em&gt;have&lt;/em&gt; to send a confirmation mail anyway for security reasons or for ethical reasons (so you cannot e.g. sign someone up to a service against their will).&lt;/p&gt;\n    ","\n&lt;p&gt;It all depends on how accurate you want to be.  For my purposes, where I&apos;m just trying to keep out things like &lt;code&gt;bob @ aol.com&lt;/code&gt; (spaces in emails) or &lt;code&gt;steve&lt;/code&gt; (no domain at all) or &lt;code&gt;mary@aolcom&lt;/code&gt; (no period before .com), I use&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/^\\S+@\\S+\\.\\S+$/&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sure, it will match things that aren&apos;t valid email addresses, but it&apos;s a matter of getting common simple errors.&lt;/p&gt;\n\n&lt;p&gt;There are any number of changes that can be made to that regex (and some are in the comments for this answer), but it&apos;s simple, and easy to understand, and is a fine first attempt.&lt;/p&gt;\n    ","\n&lt;p&gt;It depends on what you mean by best:\nIf you&apos;re talking about catching every valid email address use the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\n\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(\n?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \n\\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\0\n31]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\\n](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+\n(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:\n(?:\\r\\n)?[ \\t])*))*|(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)\n?[ \\t])*)*\\&amp;lt;(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\\nr\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[\n \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)\n?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t]\n)*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[\n \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*\n)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)\n*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+\n|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\n\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\n\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t\n]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031\n]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](\n?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?\n:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?\n:\\r\\n)?[ \\t])*))*\\&amp;gt;(?:(?:\\r\\n)?[ \\t])*)|(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?\n:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?\n[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)*:(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\n\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;\n@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;\n(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\\n&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?\n:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\n\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\n\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(\n?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)*\\&amp;lt;(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()&amp;lt;&amp;gt;@,;\n:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([\n^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;\n.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\\n]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\\n[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\\nr\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]\n|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\0\n00-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\\n.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,\n;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?\n:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*\n(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\n\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[\n^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]\n]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\&amp;gt;(?:(?:\\r\\n)?[ \\t])*)(?:,\\s*(\n?:(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\\n&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(\n?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\n\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t\n])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t\n])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?\n:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\n\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:\n[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\\n]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)*\\&amp;lt;(?:(?:\\r\\n)\n?[ \\t])*(?:@(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;\n()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)\n?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;\n@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[\n \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,\n;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\\n&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?\n(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\n\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\n\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\n&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])\n*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])\n+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\\n.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\&amp;gt;(?:(\n?:\\r\\n)?[ \\t])*))*)?;\\s*)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(&lt;a href=&quot;http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html&quot; rel=&quot;noreferrer&quot;&gt;http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html&lt;/a&gt;)\nIf you&apos;re looking for something simpler but that will catch most valid email addresses try something like: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;EDIT:\nFrom the link:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This regular expression will only validate addresses that have had any comments stripped and replaced with whitespace (this is done by the module).&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Per &lt;a href=&quot;http://www.w3.org/TR/html5/forms.html#valid-e-mail-address&quot; rel=&quot;noreferrer&quot;&gt;the W3C HTML5 specification&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;^[a-zA-Z0-9.!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Context:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;A &lt;strong&gt;valid e-mail address&lt;/strong&gt; is a string that matches the ABNF production [].&lt;/p&gt;\n&lt;p&gt;&lt;i&gt;Note: This requirement is a &lt;a href=&quot;http://www.w3.org/TR/html5/introduction.html#willful-violation&quot; rel=&quot;noreferrer&quot;&gt;willful violation&lt;/a&gt; of &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5322&quot; rel=&quot;noreferrer&quot;&gt;RFC 5322&lt;/a&gt;, which defines a syntax for e-mail addresses that is simultaneously too strict (before the @ character), too vague (after the @ character), and too lax (allowing comments, whitespace characters, and quoted strings in manners unfamiliar to most users) to be of practical use here.&lt;/i&gt;&lt;/p&gt;\n&lt;p&gt;&lt;i&gt;The following JavaScript- and Perl-compatible regular expression is an implementation of the above definition.&lt;/i&gt;&lt;/p&gt;&lt;i&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;/^[a-zA-Z0-9.!#$%&amp;amp;&apos;*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/i&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;[UPDATED] I&apos;ve collated everything I know about email address validation at &lt;a href=&quot;http://isemail.info&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://isemail.info&lt;/a&gt;, which now not only validates, but it also diagnoses problems with email addresses. I agree with many of the comments here that validation is only part of the answer; see my essay &lt;em&gt;&lt;a href=&quot;http://isemail.info/about&quot; rel=&quot;nofollow noreferrer&quot;&gt;What is a valid email address?&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;is_email() remains, as far as I know, the only validator that will tell you definitively whether a given string is a valid email address or not. I&apos;ve uploaded a new version at &lt;a href=&quot;http://isemail.info/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://isemail.info/&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;I collated test cases from Cal Henderson, Dave Child, Phil Haack, Doug Lovell, &lt;a href=&quot;https://en.wikipedia.org/wiki/Email#Message_format&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;5322&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Email_address#Syntax&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;3696&lt;/a&gt;. 275 test addresses in all. I ran all these tests against all the free validators I could find.&lt;/p&gt;\n&lt;p&gt;I&apos;ll try to keep this page up-to-date as people enhance their validators. Thanks to Cal, Michael, Dave, Paul and Phil for their help and cooperation in compiling these tests and constructive criticism of &lt;a href=&quot;http://code.google.com/p/isemail&quot; rel=&quot;nofollow noreferrer&quot;&gt;my own validator&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;People should be aware of the &lt;a href=&quot;http://www.rfc-editor.org/errata_search.php?rfc=3696&quot; rel=&quot;nofollow noreferrer&quot;&gt;errata against RFC 3696&lt;/a&gt; in particular. Three of the canonical examples are in fact invalid addresses. And the maximum length of an address is 254 or 256 characters, &lt;strong&gt;not&lt;/strong&gt; 320.&lt;/p&gt;\n    ","\n&lt;p&gt;Its easy in Perl 5.10 or newer:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;/(?(DEFINE)\n   (?&amp;lt;address&amp;gt;         (?&amp;amp;mailbox) | (?&amp;amp;group))\n   (?&amp;lt;mailbox&amp;gt;         (?&amp;amp;name_addr) | (?&amp;amp;addr_spec))\n   (?&amp;lt;name_addr&amp;gt;       (?&amp;amp;display_name)? (?&amp;amp;angle_addr))\n   (?&amp;lt;angle_addr&amp;gt;      (?&amp;amp;CFWS)? &amp;lt; (?&amp;amp;addr_spec) &amp;gt; (?&amp;amp;CFWS)?)\n   (?&amp;lt;group&amp;gt;           (?&amp;amp;display_name) : (?:(?&amp;amp;mailbox_list) | (?&amp;amp;CFWS))? ;\n                                          (?&amp;amp;CFWS)?)\n   (?&amp;lt;display_name&amp;gt;    (?&amp;amp;phrase))\n   (?&amp;lt;mailbox_list&amp;gt;    (?&amp;amp;mailbox) (?: , (?&amp;amp;mailbox))*)\n\n   (?&amp;lt;addr_spec&amp;gt;       (?&amp;amp;local_part) \\@ (?&amp;amp;domain))\n   (?&amp;lt;local_part&amp;gt;      (?&amp;amp;dot_atom) | (?&amp;amp;quoted_string))\n   (?&amp;lt;domain&amp;gt;          (?&amp;amp;dot_atom) | (?&amp;amp;domain_literal))\n   (?&amp;lt;domain_literal&amp;gt;  (?&amp;amp;CFWS)? \\[ (?: (?&amp;amp;FWS)? (?&amp;amp;dcontent))* (?&amp;amp;FWS)?\n                                 \\] (?&amp;amp;CFWS)?)\n   (?&amp;lt;dcontent&amp;gt;        (?&amp;amp;dtext) | (?&amp;amp;quoted_pair))\n   (?&amp;lt;dtext&amp;gt;           (?&amp;amp;NO_WS_CTL) | [\\x21-\\x5a\\x5e-\\x7e])\n\n   (?&amp;lt;atext&amp;gt;           (?&amp;amp;ALPHA) | (?&amp;amp;DIGIT) | [!#\\$%&amp;amp;&apos;*+-/=?^_`{|}~])\n   (?&amp;lt;atom&amp;gt;            (?&amp;amp;CFWS)? (?&amp;amp;atext)+ (?&amp;amp;CFWS)?)\n   (?&amp;lt;dot_atom&amp;gt;        (?&amp;amp;CFWS)? (?&amp;amp;dot_atom_text) (?&amp;amp;CFWS)?)\n   (?&amp;lt;dot_atom_text&amp;gt;   (?&amp;amp;atext)+ (?: \\. (?&amp;amp;atext)+)*)\n\n   (?&amp;lt;text&amp;gt;            [\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])\n   (?&amp;lt;quoted_pair&amp;gt;     \\\\ (?&amp;amp;text))\n\n   (?&amp;lt;qtext&amp;gt;           (?&amp;amp;NO_WS_CTL) | [\\x21\\x23-\\x5b\\x5d-\\x7e])\n   (?&amp;lt;qcontent&amp;gt;        (?&amp;amp;qtext) | (?&amp;amp;quoted_pair))\n   (?&amp;lt;quoted_string&amp;gt;   (?&amp;amp;CFWS)? (?&amp;amp;DQUOTE) (?:(?&amp;amp;FWS)? (?&amp;amp;qcontent))*\n                        (?&amp;amp;FWS)? (?&amp;amp;DQUOTE) (?&amp;amp;CFWS)?)\n\n   (?&amp;lt;word&amp;gt;            (?&amp;amp;atom) | (?&amp;amp;quoted_string))\n   (?&amp;lt;phrase&amp;gt;          (?&amp;amp;word)+)\n\n   # Folding white space\n   (?&amp;lt;FWS&amp;gt;             (?: (?&amp;amp;WSP)* (?&amp;amp;CRLF))? (?&amp;amp;WSP)+)\n   (?&amp;lt;ctext&amp;gt;           (?&amp;amp;NO_WS_CTL) | [\\x21-\\x27\\x2a-\\x5b\\x5d-\\x7e])\n   (?&amp;lt;ccontent&amp;gt;        (?&amp;amp;ctext) | (?&amp;amp;quoted_pair) | (?&amp;amp;comment))\n   (?&amp;lt;comment&amp;gt;         \\( (?: (?&amp;amp;FWS)? (?&amp;amp;ccontent))* (?&amp;amp;FWS)? \\) )\n   (?&amp;lt;CFWS&amp;gt;            (?: (?&amp;amp;FWS)? (?&amp;amp;comment))*\n                       (?: (?:(?&amp;amp;FWS)? (?&amp;amp;comment)) | (?&amp;amp;FWS)))\n\n   # No whitespace control\n   (?&amp;lt;NO_WS_CTL&amp;gt;       [\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f])\n\n   (?&amp;lt;ALPHA&amp;gt;           [A-Za-z])\n   (?&amp;lt;DIGIT&amp;gt;           [0-9])\n   (?&amp;lt;CRLF&amp;gt;            \\x0d \\x0a)\n   (?&amp;lt;DQUOTE&amp;gt;          &quot;)\n   (?&amp;lt;WSP&amp;gt;             [\\x20\\x09])\n )\n\n (?&amp;amp;address)/x\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;^\\w+([-+.&apos;]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is the one used in ASP.NET by the RegularExpressionValidator.&lt;/p&gt;\n    ","\n&lt;p&gt;I don&apos;t know about best, but &lt;a href=&quot;http://ex-parrot.com/%7Epdw/Mail-RFC822-Address.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;this one&lt;/a&gt; is at least correct, as long as the addresses have their comments stripped and replaced with white space.&lt;/p&gt;\n&lt;p&gt;Seriously. You should use an already-written library for validating emails. The best way is probably to just send a verification e-mail to that address.&lt;/p&gt;\n    ","\n&lt;h1&gt;Quick answer&lt;/h1&gt;\n&lt;p&gt;Use the following regex for input validation:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)+&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Addresses matched by this regex:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;have a local part (i.e. the part before the @-sign) that is strictly compliant with RFC&amp;nbsp;5321/5322,&lt;/li&gt;\n&lt;li&gt;have a domain part (i.e. the part after the @-sign) that is a host name with at least two labels, each of which is at most 63 characters long.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The second constraint is a restriction on RFC&amp;nbsp;5321/5322.&lt;/p&gt;\n&lt;h1&gt;Elaborate answer&lt;/h1&gt;\n&lt;p&gt;Using a regular expression that recognizes email addresses could be useful in various situations: for example to scan for email addresses in a document, to validate user input, or as an integrity constraint on a data repository.&lt;/p&gt;\n&lt;p&gt;It should however be noted that if you want to find out if the address actually refers to an existing mailbox, there&apos;s no substitute for sending a message to the address. If you only want to check if an address is grammatically correct then you could use a regular expression, but note that &lt;code&gt;&quot;&quot;@[]&lt;/code&gt; is a grammatically correct email address that certainly doesn&apos;t refer to an existing mailbox.&lt;/p&gt;\n&lt;p&gt;The syntax of email addresses has been defined in various &lt;a href=&quot;http://en.wikipedia.org/wiki/Request_for_Comments&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFCs&lt;/a&gt;, most notably &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc822&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;822&lt;/a&gt; and &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5322&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;5322&lt;/a&gt;. RFC&amp;nbsp;822 should be seen as the &quot;original&quot; standard and RFC&amp;nbsp;5322 as the latest standard. The syntax defined in RFC&amp;nbsp;822 is the most lenient and subsequent standards have restricted the syntax further and further, where newer systems or services should recognize obsolete syntax, but never produce it.&lt;/p&gt;\n&lt;p&gt;In this answer Ill take email address to mean &lt;code&gt;addr-spec&lt;/code&gt; as defined in the RFCs (i.e. &lt;code&gt;jdoe@example.org&lt;/code&gt;, but not &lt;code&gt;&quot;John Doe&quot;&amp;lt;jdoe@example.org&amp;gt;&lt;/code&gt;, nor &lt;code&gt;some-group:jdoe@example.org,mrx@exampel.org;&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;There&apos;s one problem with translating the RFC syntaxes into regexes: the syntaxes are not regular! This is because they allow for optional comments in email addresses that can be infinitely nested, while infinite nesting can&apos;t be described by a regular expression. To scan for or validate addresses containing comments you need a parser or more powerful expressions. (Note that languages like Perl have constructs to describe context free grammars in a regex-like way.) In this answer I&apos;ll disregard comments and only consider proper regular expressions.&lt;/p&gt;\n&lt;p&gt;The RFCs define syntaxes for email messages, not for email addresses as such. Addresses may appear in various header fields and this is where they are primarily defined. When they appear in header fields addresses may contain (between lexical tokens) whitespace, comments and even linebreaks. Semantically this has no significance however. By removing this whitespace, etc. from an address you get a semantically equivalent &lt;em&gt;canonical representation&lt;/em&gt;. Thus, the canonical representation of &lt;code&gt;first. last (comment) @   [3.5.7.9]&lt;/code&gt; is &lt;code&gt;first.last@[3.5.7.9]&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Different syntaxes should be used for different purposes. If you want to scan for email addresses in a (possibly very old) document it may be a good idea to use the syntax as defined in RFC&amp;nbsp;822. On the other hand, if you want to validate user input you may want to use the syntax as defined in RFC&amp;nbsp;5322, probably only accepting canonical representations. You should decide which syntax applies to your specific case.&lt;/p&gt;\n&lt;p&gt;I use POSIX &quot;extended&quot; regular expressions in this answer, assuming an ASCII compatible character set.&lt;/p&gt;\n&lt;h2&gt;RFC 822&lt;/h2&gt;\n&lt;p&gt;I arrived at the following regular expression. I invite everyone to try and break it. If you find any false positives or false negatives, please post them in a comment and I&apos;ll try to fix the expression as soon as possible.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*&quot;)(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*&quot;))*@([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*])(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*]))*&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;I believe it&apos;s fully compliant with RFC 822 including the &lt;a href=&quot;http://www.rfc-editor.org/errata_search.php?rfc=822&quot; rel=&quot;nofollow noreferrer&quot;&gt;errata&lt;/a&gt;. It only recognizes email addresses in their canonical form. For a regex that recognizes (folding) whitespace see the derivation below.&lt;/p&gt;\n&lt;p&gt;The derivation shows how I arrived at the expression. I list all the relevant grammar rules from the RFC exactly as they appear, followed by the corresponding regex. Where an erratum has been published I give a separate expression for the corrected grammar rule (marked &quot;erratum&quot;) and use the updated version as a subexpression in subsequent regular expressions.&lt;/p&gt;\n&lt;p&gt;As stated in paragraph 3.1.4. of RFC 822 optional linear white space may be inserted between lexical tokens. Where applicable I&apos;ve expanded the expressions to accommodate this rule and marked the result with &quot;opt-lwsp&quot;.&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;CHAR        =  &amp;lt;any ASCII character&amp;gt;\n            =~ .\n\nCTL         =  &amp;lt;any ASCII control character and DEL&amp;gt;\n            =~ [\\x00-\\x1F\\x7F]\n\nCR          =  &amp;lt;ASCII CR, carriage return&amp;gt;\n            =~ \\r\n\nLF          =  &amp;lt;ASCII LF, linefeed&amp;gt;\n            =~ \\n\n\nSPACE       =  &amp;lt;ASCII SP, space&amp;gt;\n            =~  \n\nHTAB        =  &amp;lt;ASCII HT, horizontal-tab&amp;gt;\n            =~ \\t\n\n&amp;lt;&quot;&amp;gt;         =  &amp;lt;ASCII quote mark&amp;gt;\n            =~ &quot;\n\nCRLF        =  CR LF\n            =~ \\r\\n\n\nLWSP-char   =  SPACE / HTAB\n            =~ [ \\t]\n\nlinear-white-space =  1*([CRLF] LWSP-char)\n                   =~ ((\\r\\n)?[ \\t])+\n\nspecials    =  &quot;(&quot; / &quot;)&quot; / &quot;&amp;lt;&quot; / &quot;&amp;gt;&quot; / &quot;@&quot; /  &quot;,&quot; / &quot;;&quot; / &quot;:&quot; / &quot;\\&quot; / &amp;lt;&quot;&amp;gt; /  &quot;.&quot; / &quot;[&quot; / &quot;]&quot;\n            =~ [][()&amp;lt;&amp;gt;@,;:\\\\&quot;.]\n\nquoted-pair =  &quot;\\&quot; CHAR\n            =~ \\\\.\n\nqtext       =  &amp;lt;any CHAR excepting &amp;lt;&quot;&amp;gt;, &quot;\\&quot; &amp;amp; CR, and including linear-white-space&amp;gt;\n            =~ [^&quot;\\\\\\r]|((\\r\\n)?[ \\t])+\n\ndtext       =  &amp;lt;any CHAR excluding &quot;[&quot;, &quot;]&quot;, &quot;\\&quot; &amp;amp; CR, &amp;amp; including linear-white-space&amp;gt;\n            =~ [^][\\\\\\r]|((\\r\\n)?[ \\t])+\n\nquoted-string  =  &amp;lt;&quot;&amp;gt; *(qtext|quoted-pair) &amp;lt;&quot;&amp;gt;\n               =~ &quot;([^&quot;\\\\\\r]|((\\r\\n)?[ \\t])|\\\\.)*&quot;\n(erratum)      =~ &quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;\n\ndomain-literal =  &quot;[&quot; *(dtext|quoted-pair) &quot;]&quot;\n               =~ \\[([^][\\\\\\r]|((\\r\\n)?[ \\t])|\\\\.)*]\n(erratum)      =~ \\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]\n\natom        =  1*&amp;lt;any CHAR except specials, SPACE and CTLs&amp;gt;\n            =~ [^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+\n\nword        =  atom / quoted-string\n            =~ [^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;\n\ndomain-ref  =  atom\n\nsub-domain  =  domain-ref / domain-literal\n            =~ [^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]\n\nlocal-part  =  word *(&quot;.&quot; word)\n            =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;)(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;))*\n(opt-lwsp)  =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;)(((\\r\\n)?[ \\t])*\\.((\\r\\n)?[ \\t])*([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;))*\n\ndomain      =  sub-domain *(&quot;.&quot; sub-domain)\n            =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n(opt-lwsp)  =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(((\\r\\n)?[ \\t])*\\.((\\r\\n)?[ \\t])*([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n\naddr-spec   =  local-part &quot;@&quot; domain\n            =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;)(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;))*@([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n(opt-lwsp)  =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;)((\\r\\n)?[ \\t])*(\\.((\\r\\n)?[ \\t])*([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;)((\\r\\n)?[ \\t])*)*@((\\r\\n)?[ \\t])*([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(((\\r\\n)?[ \\t])*\\.((\\r\\n)?[ \\t])*([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n(canonical) =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*&quot;)(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*&quot;))*@([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*])(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*]))*\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;RFC 5322&lt;/h2&gt;\n&lt;p&gt;I arrived at the following regular expression. I invite everyone to try and break it. If you find any false positives or false negatives, please post them in a comment and I&apos;ll try to fix the expression as soon as possible.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|\\[[\\t -Z^-~]*])&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;I believe it&apos;s fully compliant with RFC 5322 including the &lt;a href=&quot;http://www.rfc-editor.org/errata_search.php?rfc=5322&quot; rel=&quot;nofollow noreferrer&quot;&gt;errata&lt;/a&gt;. It only recognizes email addresses in their canonical form. For a regex that recognizes (folding) whitespace see the derivation below.&lt;/p&gt;\n&lt;p&gt;The derivation shows how I arrived at the expression. I list all the relevant grammar rules from the RFC exactly as they appear, followed by the corresponding regex. For rules that include semantically irrelevant (folding) whitespace, I give a separate regex marked &quot;(normalized)&quot; that doesn&apos;t accept this whitespace.&lt;/p&gt;\n&lt;p&gt;I ignored all the &quot;obs-&quot; rules from the RFC. This means that the regexes only match email addresses that are strictly RFC&amp;nbsp;5322 compliant. If you have to match &quot;old&quot; addresses (as the looser grammar including the &quot;obs-&quot; rules does), you can use one of the RFC&amp;nbsp;822 regexes from the previous paragraph.&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;VCHAR           =   %x21-7E\n                =~  [!-~]\n\nALPHA           =   %x41-5A / %x61-7A\n                =~  [A-Za-z]\n\nDIGIT           =   %x30-39\n                =~  [0-9]\n\nHTAB            =   %x09\n                =~  \\t\n\nCR              =   %x0D\n                =~  \\r\n\nLF              =   %x0A\n                =~  \\n\n\nSP              =   %x20\n                =~  \n\nDQUOTE          =   %x22\n                =~  &quot;\n\nCRLF            =   CR LF\n                =~  \\r\\n\n\nWSP             =   SP / HTAB\n                =~  [\\t ]\n\nquoted-pair     =   &quot;\\&quot; (VCHAR / WSP)\n                =~  \\\\[\\t -~]\n\nFWS             =   ([*WSP CRLF] 1*WSP)\n                =~  ([\\t ]*\\r\\n)?[\\t ]+\n\nctext           =   %d33-39 / %d42-91 / %d93-126\n                =~  []!-&apos;*-[^-~]\n\n(&quot;comment&quot; is left out in the regex)\nccontent        =   ctext / quoted-pair / comment\n                =~  []!-&apos;*-[^-~]|(\\\\[\\t -~])\n\n(not regular)\ncomment         =   &quot;(&quot; *([FWS] ccontent) [FWS] &quot;)&quot;\n\n(is equivalent to FWS when leaving out comments)\nCFWS            =   (1*([FWS] comment) [FWS]) / FWS\n                =~  ([\\t ]*\\r\\n)?[\\t ]+\n\natext           =   ALPHA / DIGIT / &quot;!&quot; / &quot;#&quot; / &quot;$&quot; / &quot;%&quot; / &quot;&amp;amp;&quot; / &quot;&apos;&quot; / &quot;*&quot; / &quot;+&quot; / &quot;-&quot; / &quot;/&quot; / &quot;=&quot; / &quot;?&quot; / &quot;^&quot; / &quot;_&quot; / &quot;`&quot; / &quot;{&quot; / &quot;|&quot; / &quot;}&quot; / &quot;~&quot;\n                =~  [-!#-&apos;*+/-9=?A-Z^-~]\n\ndot-atom-text   =   1*atext *(&quot;.&quot; 1*atext)\n                =~  [-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*\n\ndot-atom        =   [CFWS] dot-atom-text [CFWS]\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?[-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  [-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*\n\nqtext           =   %d33 / %d35-91 / %d93-126\n                =~  []!#-[^-~]\n\nqcontent        =   qtext / quoted-pair\n                =~  []!#-[^-~]|(\\\\[\\t -~])\n\n(erratum)\nquoted-string   =   [CFWS] DQUOTE ((1*([FWS] qcontent) [FWS]) / FWS) DQUOTE [CFWS]\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?&quot;(((([\\t ]*\\r\\n)?[\\t ]+)?([]!#-[^-~]|(\\\\[\\t -~])))+(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?)&quot;(([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  &quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;\n\ndtext           =   %d33-90 / %d94-126\n                =~  [!-Z^-~]\n\ndomain-literal  =   [CFWS] &quot;[&quot; *([FWS] dtext) [FWS] &quot;]&quot; [CFWS]\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?\\[((([\\t ]*\\r\\n)?[\\t ]+)?[!-Z^-~])*(([\\t ]*\\r\\n)?[\\t ]+)?](([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  \\[[\\t -Z^-~]*]\n\nlocal-part      =   dot-atom / quoted-string\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?[-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?&quot;(((([\\t ]*\\r\\n)?[\\t ]+)?([]!#-[^-~]|(\\\\[\\t -~])))+(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?)&quot;(([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  [-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;\n\ndomain          =   dot-atom / domain-literal\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?[-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?\\[((([\\t ]*\\r\\n)?[\\t ]+)?[!-Z^-~])*(([\\t ]*\\r\\n)?[\\t ]+)?](([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  [-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|\\[[\\t -Z^-~]*]\n\naddr-spec       =   local-part &quot;@&quot; domain\n                =~  ((([\\t ]*\\r\\n)?[\\t ]+)?[-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?&quot;(((([\\t ]*\\r\\n)?[\\t ]+)?([]!#-[^-~]|(\\\\[\\t -~])))+(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?)&quot;(([\\t ]*\\r\\n)?[\\t ]+)?)@((([\\t ]*\\r\\n)?[\\t ]+)?[-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?\\[((([\\t ]*\\r\\n)?[\\t ]+)?[!-Z^-~])*(([\\t ]*\\r\\n)?[\\t ]+)?](([\\t ]*\\r\\n)?[\\t ]+)?)\n(normalized)    =~  ([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|\\[[\\t -Z^-~]*])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that some sources (notably &lt;a href=&quot;http://www.w3.org/TR/html5/forms.html#valid-e-mail-address&quot; rel=&quot;nofollow noreferrer&quot;&gt;W3C&lt;/a&gt;) claim that RFC&amp;nbsp;5322 is too strict on the local part (i.e. the part before the @-sign). This is because &quot;..&quot;, &quot;a..b&quot; and &quot;a.&quot; are &lt;em&gt;not&lt;/em&gt; valid dot-atoms, while they may be used as mailbox names. The RFC, however, &lt;em&gt;does&lt;/em&gt; allow for local parts like these, except that they have to be quoted. So instead of &lt;code&gt;a..b@example.net&lt;/code&gt; you should write &lt;code&gt;&quot;a..b&quot;@example.net&lt;/code&gt;, which is semantically equivalent.&lt;/p&gt;\n&lt;h2&gt;Further restrictions&lt;/h2&gt;\n&lt;p&gt;SMTP (as defined in &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5321&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC 5321&lt;/a&gt;) further restricts the set of valid email addresses (or actually: mailbox names). It seems reasonable to impose this stricter grammar, so that the matched email address can actually be used to send an email.&lt;/p&gt;\n&lt;p&gt;RFC 5321 basically leaves alone the &quot;local&quot; part (i.e. the part before the @-sign), but is stricter on the domain part (i.e. the part after the @-sign). It allows only host names in place of dot-atoms and address literals in place of domain literals.&lt;/p&gt;\n&lt;p&gt;The grammar presented in RFC 5321 is too lenient when it comes to both host names and IP addresses. I took the liberty of &quot;correcting&quot; the rules in question, using &lt;a href=&quot;https://tools.ietf.org/id/draft-main-ipaddr-text-rep-01.txt&quot; rel=&quot;nofollow noreferrer&quot;&gt;this draft&lt;/a&gt; and &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc1034&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;1034&lt;/a&gt; as guidelines. Here&apos;s the resulting regex.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@([0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)*|\\[((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+)])&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Note that depending on the use case you may not want to allow for a &quot;General-address-literal&quot; in your regex. Also note that I used a negative lookahead &lt;code&gt;(?!IPv6:)&lt;/code&gt; in the final regex to prevent the &quot;General-address-literal&quot; part to match malformed IPv6 addresses. Some regex processors don&apos;t support negative lookahead. Remove the substring &lt;code&gt;|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+&lt;/code&gt; from the regex if you want to take the whole &quot;General-address-literal&quot; part out.&lt;/p&gt;\n&lt;p&gt;Here&apos;s the derivation:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Let-dig         =   ALPHA / DIGIT\n                =~  [0-9A-Za-z]\n\nLdh-str         =   *( ALPHA / DIGIT / &quot;-&quot; ) Let-dig\n                =~  [0-9A-Za-z-]*[0-9A-Za-z]\n\n(regex is updated to make sure sub-domains are max. 63 characters long - RFC 1034 section 3.5)\nsub-domain      =   Let-dig [Ldh-str]\n                =~  [0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?\n\nDomain          =   sub-domain *(&quot;.&quot; sub-domain)\n                =~  [0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)*\n\nSnum            =   1*3DIGIT\n                =~  [0-9]{1,3}\n\n(suggested replacement for &quot;Snum&quot;)\nip4-octet       =   DIGIT / %x31-39 DIGIT / &quot;1&quot; 2DIGIT / &quot;2&quot; %x30-34 DIGIT / &quot;25&quot; %x30-35\n                =~  25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9]\n\nIPv4-address-literal    =   Snum 3(&quot;.&quot;  Snum)\n                        =~  [0-9]{1,3}(\\.[0-9]{1,3}){3}\n\n(suggested replacement for &quot;IPv4-address-literal&quot;)\nip4-address     =   ip4-octet 3(&quot;.&quot; ip4-octet)\n                =~  (25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}\n\n(suggested replacement for &quot;IPv6-hex&quot;)\nip6-h16         =   &quot;0&quot; / ( (%x49-57 / %x65-70 /%x97-102) 0*3(%x48-57 / %x65-70 /%x97-102) )\n                =~  0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}\n\n(not from RFC)\nls32            =   ip6-h16 &quot;:&quot; ip6-h16 / ip4-address\n                =~  (0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}\n\n(suggested replacement of &quot;IPv6-addr&quot;)\nip6-address     =                                      6(ip6-h16 &quot;:&quot;) ls32\n                    /                             &quot;::&quot; 5(ip6-h16 &quot;:&quot;) ls32\n                    / [                 ip6-h16 ] &quot;::&quot; 4(ip6-h16 &quot;:&quot;) ls32\n                    / [ *1(ip6-h16 &quot;:&quot;) ip6-h16 ] &quot;::&quot; 3(ip6-h16 &quot;:&quot;) ls32\n                    / [ *2(ip6-h16 &quot;:&quot;) ip6-h16 ] &quot;::&quot; 2(ip6-h16 &quot;:&quot;) ls32\n                    / [ *3(ip6-h16 &quot;:&quot;) ip6-h16 ] &quot;::&quot;   ip6-h16 &quot;:&quot;  ls32\n                    / [ *4(ip6-h16 &quot;:&quot;) ip6-h16 ] &quot;::&quot;                ls32\n                    / [ *5(ip6-h16 &quot;:&quot;) ip6-h16 ] &quot;::&quot;   ip6-h16\n                    / [ *6(ip6-h16 &quot;:&quot;) ip6-h16 ] &quot;::&quot;\n                =~  (((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::\n\nIPv6-address-literal    =   &quot;IPv6:&quot; ip6-address\n                        =~  IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)\n\nStandardized-tag        =   Ldh-str\n                        =~  [0-9A-Za-z-]*[0-9A-Za-z]\n\ndcontent        =   %d33-90 / %d94-126\n                =~  [!-Z^-~]\n\nGeneral-address-literal =   Standardized-tag &quot;:&quot; 1*dcontent\n                        =~  [0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+\n\naddress-literal =   &quot;[&quot; ( IPv4-address-literal / IPv6-address-literal / General-address-literal ) &quot;]&quot;\n                =~  \\[((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+)]\n\nMailbox         =   Local-part &quot;@&quot; ( Domain / address-literal )\n                =~  ([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@([0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)*|\\[((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+)])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;User input validation&lt;/h2&gt;\n&lt;p&gt;A common use case is user input validation, for example on an html form. In that case it&apos;s usually reasonable to preclude address-literals and to require at least two labels in the hostname. Taking the improved RFC&amp;nbsp;5321 regex from the previous section as a basis, the resulting expression would be:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)+&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;I do not recommend restricting the local part further, e.g. by precluding quoted strings, since we don&apos;t know what kind of mailbox names some hosts allow (like &lt;code&gt;&quot;a..b&quot;@example.net&lt;/code&gt; or even &lt;code&gt;&quot;a b&quot;@example.net&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;I also do not recommend explicitly validating against a list of literal top-level domains or even imposing length-constraints (remember how &quot;.museum&quot; invalidated &lt;code&gt;[a-z]{2,4}&lt;/code&gt;), but if you must:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@([0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?\\.)*(net|org|com|info|&lt;/code&gt;&lt;em&gt;etc...&lt;/em&gt;&lt;code&gt;)&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Make sure to keep your regex up-to-date if you decide to go down the path of explicit top-level domain validation.&lt;/p&gt;\n&lt;h2&gt;Further considerations&lt;/h2&gt;\n&lt;p&gt;When only accepting host names in the domain part (after the @-sign), the regexes above accept only labels with at most 63 characters, as they should. However, they don&apos;t enforce the fact that the entire host name must be at most 253 characters long (including the dots). Although this constraint is strictly speaking still regular, it&apos;s not feasible to make a regex that incorporates this rule.&lt;/p&gt;\n&lt;p&gt;Another consideration, especially when using the regexes for input validation, is feedback to the user. If a user enters an incorrect address, it would be nice to give a little more feedback than a simple &quot;syntactically incorrect address&quot;. With &quot;vanilla&quot; regexes this is not possible.&lt;/p&gt;\n&lt;p&gt;These two considerations could be addressed by parsing the address. The extra length constraint on host names could in some cases also be addressed by using an extra regex that checks it, and matching the address against both expressions.&lt;/p&gt;\n&lt;p&gt;None of the regexes in this answer are optimized for performance. If performance is an issue, you should see if (and how) the regex of your choice can be optimized.&lt;/p&gt;\n    ","\n&lt;p&gt;The email addresses I want to validate are going to be used by an ASP.NET web application using the &lt;code&gt;System.Net.Mail&lt;/code&gt; namespace to send emails to a list of people.&lt;/p&gt;\n\n&lt;p&gt;So, rather than using some very complex regular expression, I just try to create a &lt;code&gt;MailAddress&lt;/code&gt; instance from the address. The &lt;code&gt;MailAddress&lt;/code&gt; constructor will throw an exception if the address is not formed properly. This way, I know I can at least get the email out of the door. Of course this is server-side validation, but at a minimum you need that anyway.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;emailValidator_ServerValidate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; source, ServerValidateEventArgs args&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MailAddress(txtEmail.Text);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)\n    {\n        args.IsValid = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        emailValidator.ErrorMessage = &lt;span class=&quot;hljs-string&quot;&gt;&quot;email: &quot;&lt;/span&gt; + ex.Message;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are plenty examples of this out on the Internet (and I think even one that fully validates the RFC - but it&apos;s tens/hundreds of lines long if memory serves).&lt;/p&gt;\n&lt;p&gt;People tend to get carried away validating this sort of thing. Why not just check it has an @ and at least one &lt;code&gt;.&lt;/code&gt; and meets some simple minimum length? It&apos;s trivial to enter a fake email and still match any valid regex anyway. I would guess that false positives are better than false negatives.&lt;/p&gt;\n    ","\n&lt;p&gt;This regex is from Perl&apos;s &lt;a href=&quot;https://metacpan.org/source/RJBS/Email-Valid-1.198/lib/Email/Valid.pm&quot; rel=&quot;nofollow noreferrer&quot;&gt;Email::Valid&lt;/a&gt; library. I believe it to be the most accurate, and it matches all of &lt;a href=&quot;https://en.wikipedia.org/wiki/Email&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;822&lt;/a&gt;. And, it is based on the regular expression in the O&apos;Reilly book:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Regular expression built using Jeffrey Friedl&apos;s example in\n&lt;em&gt;Mastering Regular Expressions&lt;/em&gt; (&lt;a href=&quot;http://www.ora.com/catalog/regexp/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.ora.com/catalog/regexp/&lt;/a&gt;).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;$RFC822PAT = &amp;lt;&amp;lt;&apos;EOF&apos;;\n[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\\nxff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xf\nf\\n\\015()]*)*\\)[\\040\\t]*)*(?:(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\x\nff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff])|&quot;[^\\\\\\x80-\\xff\\n\\015\n&quot;]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015&quot;]*)*&quot;)[\\040\\t]*(?:\\([^\\\\\\x80-\\\nxff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80\n-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*\n)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\n\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\\nx80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x8\n0-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff])|&quot;[^\\\\\\x80-\\xff\\n\n\\015&quot;]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015&quot;]*)*&quot;)[\\040\\t]*(?:\\([^\\\\\\x\n80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\n\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\n\\t]*)*)*@[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([\n^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\n\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\\nx80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\n\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()\n]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\\nx80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\04\n0\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\\nn\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\\n015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?!\n[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\\n]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\\nx80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\01\n5()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*|(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\n\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]\n)|&quot;[^\\\\\\x80-\\xff\\n\\015&quot;]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015&quot;]*)*&quot;)[^\n()&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]*(?:(?:\\([^\\\\\\x80-\\xff\\n\\0\n15()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][\n^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)|&quot;[^\\\\\\x80-\\xff\\\nn\\015&quot;]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015&quot;]*)*&quot;)[^()&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\\nx80-\\xff\\000-\\010\\012-\\037]*)*&amp;lt;[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?\n:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\n\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:@[\\040\\t]*\n(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015\n()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()\n]*)*\\)[\\040\\t]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\0\n40)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\\n[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\\nxff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*\n)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80\n-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x\n80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t\n]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\n\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])\n*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x\n80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80\n-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*(?:,[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015(\n)]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\n\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*@[\\040\\t\n]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\0\n15()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015\n()]*)*\\)[\\040\\t]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\n\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\n\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80\n-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()\n]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x\n80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\n\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\n\\t]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\n\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff\n])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\n\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x\n80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*)*:[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015\n()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\n\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)?(?:[^\n(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\n\\037\\x80-\\xff])|&quot;[^\\\\\\x80-\\xff\\n\\015&quot;]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\\nn\\015&quot;]*)*&quot;)[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\n\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))\n[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\n\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\x\nff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(\n?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\\n000-\\037\\x80-\\xff])|&quot;[^\\\\\\x80-\\xff\\n\\015&quot;]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\\nxff\\n\\015&quot;]*)*&quot;)[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\x\nff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)\n*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*@[\\040\\t]*(?:\\([^\\\\\\x80-\\x\nff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\n\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)\n*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\\n]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\]\n)[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\n\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\x\nff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(\n?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80\n-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)&amp;lt;\n&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x8\n0-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\n\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]\n*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)\n*\\)[\\040\\t]*)*)*&amp;gt;)\nEOF\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As you&apos;re writing in PHP I&apos;d advice you to use the PHP built-in validation for emails.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;filter_var&lt;/span&gt;($value, FILTER_VALIDATE_EMAIL)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you&apos;re running a PHP version lower than 5.3.6, please be aware of this issue: &lt;em&gt;&lt;a href=&quot;https://bugs.php.net/bug.php?id=53091&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bug #53091: Crashes when I try to filter a text of &amp;gt; 2264 characters&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;If you want more information how this built-in validation works, see here: &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3722831/does-phps-filter-var-filter-validate-email-actually-work&quot;&gt;Does PHP&apos;s filter_var FILTER_VALIDATE_EMAIL actually work?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://www.iamcal.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Cal Henderson&lt;/a&gt; (Flickr) wrote an article called &lt;em&gt;&lt;a href=&quot;http://www.iamcal.com/publish/articles/php/parsing_email/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Parsing Email Addresses in PHP&lt;/a&gt;&lt;/em&gt; and shows how to do proper RFC (2)822-compliant email address parsing.&lt;/p&gt;\n&lt;p&gt;You can also get the source code in &lt;a href=&quot;http://code.iamcal.com/php/rfc822/&quot; rel=&quot;nofollow noreferrer&quot;&gt;PHP&lt;/a&gt;, Python, and Ruby which is &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/2.5/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Creative Commons licensed&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I never bother creating with my own regular expression, because chances are that someone else has already come up with a better version.  I always use &lt;a href=&quot;http://regexlib.com/Search.aspx&quot; rel=&quot;noreferrer&quot;&gt;regexlib&lt;/a&gt; to find one to my liking.&lt;/p&gt;\n    ","\n&lt;p&gt;One simple regular expression which would at least not reject any valid email address would be checking for something, followed by an @ sign and then something followed by a period and at least 2 somethings. It won&apos;t reject anything, but after reviewing the spec I can&apos;t find any email that would be valid and rejected.&lt;/p&gt;\n\n&lt;p&gt;email =~ &lt;code&gt;/.+@[^@]+\\.[^@]{2,}$/&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;There is not one which is really usable. I discuss some issues in my &lt;a href=&quot;https://stackoverflow.com/questions/161342/is-there-a-php-library-for-email-address-validation#161582&quot; title=&quot;Is there a PHP library for email address validation?&quot;&gt;answer to &lt;em&gt;Is there a PHP library for email address validation?&lt;/em&gt;&lt;/a&gt;, it is discussed also in &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/156430/regexp-recognition-of-email-address-hard&quot; title=&quot;Is regular expression recognition of an email address hard?&quot;&gt;Is regular expression recognition of an email address hard?&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;In short, don&apos;t expect a single, usable regex to do a proper job. And the best regex will validate the syntax, not the validity of an e-mail (&lt;em&gt;jhohn@example.com&lt;/em&gt; is correct, but it will probably bounce...).&lt;/p&gt;\n    ","\n&lt;p&gt;You could use the one employed by the jQuery Validation plugin:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-markdown&quot;&gt;/^((([a-z]|\\d|[!#\\$%&amp;amp;&apos;\\&lt;span class=&quot;hljs-emphasis&quot;&gt;*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&amp;amp;&apos;\\*&lt;/span&gt;\\+\\-\\/=\\?\\^&lt;span class=&quot;hljs-emphasis&quot;&gt;_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_&lt;/span&gt;|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])&lt;span class=&quot;hljs-emphasis&quot;&gt;*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*&lt;/span&gt;([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Internationalized_domain_name&quot; rel=&quot;nofollow noreferrer&quot;&gt;Since May 2010&lt;/a&gt;, non-Latin (Chinese, Arabic, Greek, Hebrew, Cyrillic and so on) domain names exist on the Internet. Everyone has to change the email regex used, because those characters are surely not to be covered by &lt;code&gt;[a-z]/i&lt;/code&gt; nor &lt;code&gt;\\w&lt;/code&gt;. They will all fail.&lt;/p&gt;\n&lt;p&gt;After all, the &lt;strong&gt;best&lt;/strong&gt; way to validate the email address is still to actually &lt;em&gt;send&lt;/em&gt; an email to the address in question to validate the address. If the email address is part of user authentication (register/login/etc), then you can perfectly combine it with the user activation system. I.e. send an email with a link with an unique activation key to the specified email address and only allow login when the user has activated the newly created account using the link in the email.&lt;/p&gt;\n&lt;p&gt;If the purpose of the regex is just to quickly inform the user in the UI that the specified email address doesn&apos;t look like in the right format, best is still to check if it matches basically the following regex:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;^(&lt;span class=&quot;hljs-selector-attr&quot;&gt;[^.@]&lt;/span&gt;+)(\\.&lt;span class=&quot;hljs-selector-attr&quot;&gt;[^.@]&lt;/span&gt;+)*@([^.@]+\\.)+([^.@]+)$\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Simple as that. Why on earth would you care about the characters used in the name and domain? It&apos;s the client&apos;s responsibility to enter a valid email address, not the server&apos;s. Even when the client enters a &lt;em&gt;syntactically&lt;/em&gt; valid email address like &lt;code&gt;aa@bb.cc&lt;/code&gt;, this does not guarantee that it&apos;s a legit email address. No one regex can cover that.&lt;/p&gt;\n    ","\n&lt;p&gt;For the most comprehensive evaluation of the best regular expression for validating an email address please see this link; &quot;&lt;a href=&quot;http://fightingforalostcause.net/misc/2006/compare-email-regex.php&quot; rel=&quot;noreferrer&quot;&gt;Comparing E-mail Address Validating Regular Expressions&lt;/a&gt;&quot;&lt;/p&gt;\n\n&lt;p&gt;Here is the current top expression for reference purposes:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;/^([\\w\\!\\&lt;span class=&quot;hljs-comment&quot;&gt;#$\\%\\&amp;amp;\\&apos;\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&amp;amp;\\&apos;\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;http://www.w3.org/TR/html5/forms.html#valid-e-mail-address&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML5 specification suggests&lt;/a&gt; a simple regex for validating email addresses:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;/^[a-zA-Z0-9.!#$%&amp;amp;&apos;*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This intentionally doesn&apos;t comply with &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5322&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC 5322&lt;/a&gt;.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This requirement is a &lt;a href=&quot;http://www.w3.org/TR/html5/introduction.html#willful-violation&quot; rel=&quot;nofollow noreferrer&quot;&gt;wilful violation&lt;/a&gt; of &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5322&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC 5322&lt;/a&gt;, which defines a syntax for e-mail addresses that is simultaneously too strict (before the &lt;code&gt;@&lt;/code&gt; character), too vague (after the &lt;code&gt;@&lt;/code&gt; character), and too lax (allowing comments, whitespace characters, and quoted strings in manners unfamiliar to most users) to be of practical use here.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The total length could also be limited to 254 characters, per &lt;a href=&quot;https://www.rfc-editor.org/errata_search.php?rfc=3696&amp;amp;eid=1690&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC 3696  errata 1690&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;For a vivid demonstration, the following monster is pretty good, but it still does not correctly recognize all syntactically valid email addresses: it recognizes nested comments up to four levels deep.&lt;/p&gt;\n&lt;p&gt;This is a job for a parser, but even if an address is syntactically valid, it still may not be deliverable. Sometimes you have to resort to the hillbilly method of &quot;Hey, y&apos;all, watch ee-us!&quot;&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;// derivative of work with the following copyright and license:\n// Copyright (c) 2004 Casey West.  All rights reserved.\n// This module is free software; you can redistribute it and/or\n// modify it under the same terms as Perl itself.\n\n// see http://search.cpan.org/~cwest/Email-Address-1.80/\n\nprivate static string gibberish = @&quot;\n(?-xism:(?:(?-xism:(?-xism:(?-xism:(?-xism:(?-xism:(?-xism:\\\ns*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\n\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))\n|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+\n|\\s+)*[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+(?-xism:(?-xism:\\\ns*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\n\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))\n|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+\n|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(\n?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?\n:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x\n0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*&amp;lt;DQ&amp;gt;(?-xism:(?-xism:[\n^\\\\&amp;lt;DQ&amp;gt;])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])))+&amp;lt;DQ&amp;gt;(?-xism:(?-xi\nsm:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xis\nm:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\\n]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\\ns*)+|\\s+)*))+)?(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?\n-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\n\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[\n^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*&amp;lt;(?-xism:(?-xi\nsm:(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^(\n)\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(\n?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))\n|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()&amp;lt;\n&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+(?:\\.[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]\n+)*)(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))\n|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:\n(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s\n*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?\n:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x\n0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xi\nsm:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*\n&amp;lt;DQ&amp;gt;(?-xism:(?-xism:[^\\\\&amp;lt;DQ&amp;gt;])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]\n)))+&amp;lt;DQ&amp;gt;(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\\n]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-x\nism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+\n)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*))\\@(?-xism:(?-xism:(?-xism:(\n?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?\n-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^\n()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s\n*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+(\n?:\\.[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+)*)(?-xism:(?-xism:\n\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[\n^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+)\n)|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)\n+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:\n(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((\n?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\\nx0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*\\[(?:\\s*(?-xism:(?-x\nism:[^\\[\\]\\\\])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])))+)*\\s*\\](?-xi\nsm:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\n\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(\n?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+\n)*\\s*\\)\\s*)+|\\s+)*)))&amp;gt;(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-\nxism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\\ns*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\n\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*))|(?-xism:(?-x\nism:(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^\n()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*\n(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])\n)|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()\n&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+(?:\\.[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s\n]+)*)(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+)\n)|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism\n:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\\ns*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((\n?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\\nx0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-x\nism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)\n*&amp;lt;DQ&amp;gt;(?-xism:(?-xism:[^\\\\&amp;lt;DQ&amp;gt;])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D\n])))+&amp;lt;DQ&amp;gt;(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\n\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-\nxism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)\n+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*))\\@(?-xism:(?-xism:(?-xism:\n(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(\n?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[\n^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\\ns*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+\n(?:\\.[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+)*)(?-xism:(?-xism\n:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:\n[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+\n))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*\n)+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism\n:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\(\n(?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\n\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*\\[(?:\\s*(?-xism:(?-\nxism:[^\\[\\]\\\\])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])))+)*\\s*\\](?-x\nism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism\n:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:\n(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))\n+)*\\s*\\)\\s*)+|\\s+)*))))(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?\n&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\n\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0\nD]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)*)&quot;\n  .Replace(&quot;&amp;lt;DQ&amp;gt;&quot;, &quot;\\&quot;&quot;)\n  .Replace(&quot;\\t&quot;, &quot;&quot;)\n  .Replace(&quot; &quot;, &quot;&quot;)\n  .Replace(&quot;\\r&quot;, &quot;&quot;)\n  .Replace(&quot;\\n&quot;, &quot;&quot;);\n\nprivate static Regex mailbox =\n  new Regex(gibberish, RegexOptions.ExplicitCapture);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;According to the official standard, &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc2822#section-3.4.1&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC 2822&lt;/a&gt;, a valid email regex is:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;(?:[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+)*|&quot;(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*&quot;)@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to use it in Java, it&apos;s really very easy:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.regex.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;regexSample&lt;/span&gt; \n{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; args[]) \n   {\n      &lt;span class=&quot;hljs-comment&quot;&gt;//Input the string for validation&lt;/span&gt;\n      &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; email &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;xyz@hotmail.com&quot;&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;//Set the email pattern string&lt;/span&gt;\n      &lt;span class=&quot;hljs-type&quot;&gt;Pattern&lt;/span&gt; p &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Pattern&lt;/span&gt;.compile(&lt;span class=&quot;hljs-string&quot;&gt;&quot; (?:[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+(?:&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;.[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+)*|&quot;&lt;/span&gt;\n              &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?:[&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x01-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x08&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0b&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0c&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0e-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x1f&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x21&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x23-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x5b&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x5d-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x7f]|&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;[&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x01-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x09&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0b&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0c&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0e-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x7f])*&lt;span class=&quot;hljs-subst&quot;&gt;\\&quot;&lt;/span&gt;)&quot;&lt;/span&gt;\n                     &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x01-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x08&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0b&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0c&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0e-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x1f&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x21-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x5a&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x53-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x7f]|&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;[&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x01-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x09&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0b&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0c&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0e-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x7f])+)&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;]&quot;&lt;/span&gt;);\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;//Match the given string with the pattern&lt;/span&gt;\n      &lt;span class=&quot;hljs-type&quot;&gt;Matcher&lt;/span&gt; m &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; p.matcher(email);\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;//Check whether match is found &lt;/span&gt;\n      boolean matchFound &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; m.matches();\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (matchFound)\n        &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Valid Email Id.&quot;&lt;/span&gt;);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid Email Id.&quot;&lt;/span&gt;);\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;RFC 5322 standard:&lt;/p&gt;\n\n&lt;p&gt;Allows dot-atom local-part, quoted-string local-part, obsolete (mixed dot-atom and quoted-string) local-part, domain name domain, (IPv4, IPv6, and IPv4-mapped IPv6 address) domain literal domain, and (nested) CFWS.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scheme&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;/^&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&quot;?(?&amp;gt;\\\\\\[ -~]|[^&quot;&lt;/span&gt;])&lt;span class=&quot;hljs-string&quot;&gt;&quot;?(?1)){255,})(?!(?&amp;gt;(?1)&quot;&lt;/span&gt;?(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\\\\\[ -~]|[&lt;span class=&quot;hljs-name&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;])&quot;&lt;/span&gt;?(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;,}@)((&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;((&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\x0D\\x0A)?[\\t ])+|(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;[\\t ]*\\x0D\\x0A)?[\\t ]+)?)(\\((&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?2&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;[\\x01-\\x08\\x0B\\x0C\\x0E-\\&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;*-&lt;/span&gt;\\[\\]-\\x7F]|\\\\\\[\\x00-\\x7F]|(&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)))*(&lt;span class=&quot;hljs-name&quot;&gt;?2&lt;/span&gt;)\\)))+(&lt;span class=&quot;hljs-name&quot;&gt;?2&lt;/span&gt;))|(&lt;span class=&quot;hljs-name&quot;&gt;?2&lt;/span&gt;))?)([&lt;span class=&quot;hljs-name&quot;&gt;!&lt;/span&gt;#-\\&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;*+&lt;/span&gt;\\/-9=?^-~-]+|&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;gt;(?2)(?&amp;gt;[\\x01-\\x08\\x0B\\x0C\\x0E-!#-\\[\\]-\\x7F]|\\\\\\[\\x00-\\x7F]))*(?2)&quot;&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)\\.(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?4&lt;/span&gt;))*(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)@(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)[&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9-&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;,})(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;([&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9&lt;/span&gt;](&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9-&lt;/span&gt;]*[&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9&lt;/span&gt;])?)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)\\.(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)[&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9-&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;,})(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?5&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;126&lt;/span&gt;}|\\[(&lt;span class=&quot;hljs-name&quot;&gt;?:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;IPv6:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;([&lt;span class=&quot;hljs-name&quot;&gt;a-f0-9&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;})(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;}|(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?:.*&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;a-f0-9&lt;/span&gt;][&lt;span class=&quot;hljs-name&quot;&gt;:&lt;/span&gt;\\]]){&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,})((&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;})?::(&lt;span class=&quot;hljs-name&quot;&gt;?7&lt;/span&gt;)?))|(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;IPv6:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;}:|(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?:.*&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;a-f0-9&lt;/span&gt;]:){&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,})(&lt;span class=&quot;hljs-name&quot;&gt;?8&lt;/span&gt;)?::(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;((&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}):)?))?(&lt;span class=&quot;hljs-name&quot;&gt;25&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;0-5&lt;/span&gt;]|&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;0-4&lt;/span&gt;][&lt;span class=&quot;hljs-name&quot;&gt;0-9&lt;/span&gt;]|&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;0-9&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}|[&lt;span class=&quot;hljs-name&quot;&gt;1-9&lt;/span&gt;]?[&lt;span class=&quot;hljs-name&quot;&gt;0-9&lt;/span&gt;])(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\.(&lt;span class=&quot;hljs-name&quot;&gt;?9&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}))\\])(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)$/isD&apos;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;RFC 5321 standard:&lt;/p&gt;\n\n&lt;p&gt;Allows dot-atom local-part, quoted-string local-part, domain name domain, and (IPv4, IPv6, and IPv4-mapped IPv6 address) domain literal domain.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scheme&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;/^&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;?(?&amp;gt;\\\\\\[ -~]|[^&quot;&lt;/span&gt;])&lt;span class=&quot;hljs-string&quot;&gt;&quot;?){255,})(?!&quot;&lt;/span&gt;?(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\\\\\[ -~]|[&lt;span class=&quot;hljs-name&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;]){65,}&quot;&lt;/span&gt;?@)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;([&lt;span class=&quot;hljs-name&quot;&gt;!&lt;/span&gt;#-\\&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;*+&lt;/span&gt;\\/-9=?^-~-]+)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\.(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;))*|&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;gt;[ !#-\\[\\]-~]|\\\\\\[ -~])*&quot;&lt;/span&gt;)@(&lt;span class=&quot;hljs-name&quot;&gt;?!.*&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;^.&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;,})(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;([&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9&lt;/span&gt;](&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9-&lt;/span&gt;]*[&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9&lt;/span&gt;])?)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\.(&lt;span class=&quot;hljs-name&quot;&gt;?2&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;126&lt;/span&gt;}|\\[(&lt;span class=&quot;hljs-name&quot;&gt;?:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;IPv6:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;([&lt;span class=&quot;hljs-name&quot;&gt;a-f0-9&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;})(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;}|(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?:.*&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;a-f0-9&lt;/span&gt;][&lt;span class=&quot;hljs-name&quot;&gt;:&lt;/span&gt;\\]]){&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,})((&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;})?::(&lt;span class=&quot;hljs-name&quot;&gt;?4&lt;/span&gt;)?))|(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;IPv6:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;}:|(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?:.*&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;a-f0-9&lt;/span&gt;]:){&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,})(&lt;span class=&quot;hljs-name&quot;&gt;?5&lt;/span&gt;)?::(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;((&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}):)?))?(&lt;span class=&quot;hljs-name&quot;&gt;25&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;0-5&lt;/span&gt;]|&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;0-4&lt;/span&gt;][&lt;span class=&quot;hljs-name&quot;&gt;0-9&lt;/span&gt;]|&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;0-9&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}|[&lt;span class=&quot;hljs-name&quot;&gt;1-9&lt;/span&gt;]?[&lt;span class=&quot;hljs-name&quot;&gt;0-9&lt;/span&gt;])(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\.(&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}))\\])$/iD&apos;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Basic:&lt;/p&gt;\n\n&lt;p&gt;Allows dot-atom local-part and domain name domain (requiring at least two domain name labels with the TLD limited to 2-6 alphabetic characters).&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-markdown&quot;&gt;&quot;/^(?!.{255,})(?!.{65,}@)([&lt;span class=&quot;hljs-string&quot;&gt;!#-&apos;*+\\/-9=?^-~-&lt;/span&gt;]+)(?&amp;gt;\\.(?1))&lt;span class=&quot;hljs-emphasis&quot;&gt;*@(?!.*&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;^.&lt;/span&gt;]{64,})(?&amp;gt;[&lt;span class=&quot;hljs-string&quot;&gt;a-z0-9&lt;/span&gt;](&lt;span class=&quot;hljs-link&quot;&gt;?&amp;gt;[a-z0-9-]*[a-z0-9]&lt;/span&gt;)?\\.){1,126}[a-z]{2,6}$/iD&quot;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s the PHP code I use. I&apos;ve chosen this solution in the spirit of &quot;false positives are better than false negatives&quot; as declared by another commenter here &lt;em&gt;and&lt;/em&gt; with regards to keeping your response time up and server load down ... there&apos;s really no need to waste server resources with a regular expression when this will weed out most simple user errors. You can always follow this up by sending a test email if you want.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;validateEmail&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;) &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;stripos&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;@&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Strange that you &quot;cannot&quot; allow 4 characters TLDs.  You are banning people from &lt;em&gt;.info&lt;/em&gt; and &lt;em&gt;.name&lt;/em&gt;, and the length limitation stop &lt;em&gt;.travel&lt;/em&gt; and &lt;em&gt;.museum&lt;/em&gt;, but yes, they are less common than 2 characters TLDs and 3 characters TLDs.&lt;/p&gt;\n&lt;p&gt;You should allow uppercase alphabets too.  Email systems will normalize the local part and domain part.&lt;/p&gt;\n&lt;p&gt;For your regex of domain part, domain name cannot starts with &apos;-&apos; and cannot ends with &apos;-&apos;. Dash can only stays in between.&lt;/p&gt;\n&lt;p&gt;If you used the &lt;a href=&quot;https://en.wikipedia.org/wiki/PEAR&quot; rel=&quot;nofollow noreferrer&quot;&gt;PEAR&lt;/a&gt; library, check out their mail function (I forgot the exact name/library).  You can validate email address by calling one function, and it validates the email address according to definition in &lt;a href=&quot;https://en.wikipedia.org/wiki/Email&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;822&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are fine with accepting empty values (which is not an invalid email) and are running PHP&amp;nbsp;5.2+, I would suggest:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;checkEmail&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$ignore_empty&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$ignore_empty&lt;/span&gt; &amp;amp;&amp;amp; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_null&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt;) || &lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;filter_var&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt;, FILTER_VALIDATE_EMAIL);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ve been using this touched up version of the OP&apos;s regex for a while and it hasn&apos;t left me with too many surprises. &lt;strike&gt;I&apos;ve never encountered an apostrophe in an email yet so it doesn&apos;t validate that&lt;/strike&gt;. It does validate &lt;code&gt;Jean+François@anydomain.museum&lt;/code&gt; and &lt;code&gt;@..مثال.آزمایشی&lt;/code&gt;, but not weird abuse of those non alphanumeric characters &lt;code&gt;.+@you.com&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;(?!^[.+&amp;amp;&apos;_-]*@.*$)(^[_\\w\\d+&amp;amp;&apos;-]+(\\.[_\\w\\d+&amp;amp;&apos;-]*)*@[\\w\\d-]+(\\.[\\w\\d-]+)*\\.(([\\d]{1,3})|([\\w]{2,}))$)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It does support IP addresses &lt;code&gt;you@192.168.1.1&lt;/code&gt;, but I haven&apos;t refined it enough to deal with bogus IP address ranges such as &lt;code&gt;999.999.999.1&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strike&gt;It also supports all the TLDs over three characters which stops &lt;code&gt;asdf@asdf.asdf&lt;/code&gt; which I think the original let through.&lt;/strike&gt; &lt;a href=&quot;http://data.iana.org/TLD/tlds-alpha-by-domain.txt&quot; rel=&quot;nofollow noreferrer&quot;&gt;I&apos;ve been beat, there are too many TLDs now over 3 characters&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;I know the OP has abandoned his regex, but this flavour lives on.&lt;/p&gt;\n    "],"id":87,"title":"How can I validate an email address using a regular expression?","content":"\n                \n&lt;p&gt;Over the years I have slowly developed a &lt;a href=&quot;http://en.wikipedia.org/wiki/Regular_expression&quot; rel=&quot;noreferrer&quot;&gt;regular expression&lt;/a&gt; that validates &lt;em&gt;most&lt;/em&gt; email addresses correctly, assuming they don&apos;t use an IP address as the server part.&lt;/p&gt;\n&lt;p&gt;I use it in several PHP programs, and it works most of the time.  However, from time to time I get contacted by someone that is having trouble with a site that uses it, and I end up having to make some adjustment (most recently I realized that I wasn&apos;t allowing four-character &lt;a href=&quot;https://en.wikipedia.org/wiki/Top-level_domain&quot; rel=&quot;noreferrer&quot;&gt;TLDs&lt;/a&gt;).&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;What is the best regular expression you have or have seen for validating emails?&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;I&apos;ve seen several solutions that use functions that use several shorter expressions, but I&apos;d rather have one long complex expression in a simple function instead of several short expression in a more complex function.&lt;/p&gt;\n    ","slug":"how-can-i-validate-an-email-address-using-a-regular-expression-1657384549233","postType":"QUESTION","createdAt":"2022-07-09T16:35:49.000Z","updatedAt":"2022-07-09T16:35:49.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Example images for code and mark-up Q&As [closed]","slug":"example-images-for-code-and-mark-up-qandas-closed-1657387690222"},{"title":"Make a div fill the height of the remaining screen space","slug":"make-a-div-fill-the-height-of-the-remaining-screen-space-1657387482387"},{"title":"When to use virtual destructors?","slug":"when-to-use-virtual-destructors-1657388152135"},{"title":"What are valid values for the id attribute in HTML?","slug":"what-are-valid-values-for-the-id-attribute-in-html-1657384874780"},{"title":"Use a content script to access the page context variables and functions","slug":"use-a-content-script-to-access-the-page-context-variables-and-functions-1657384842444"},{"title":"Sort (order) data frame rows by multiple columns","slug":"sort-(order)-data-frame-rows-by-multiple-columns-1657388355671"},{"title":"What's the difference between INNER JOIN, LEFT JOIN, RIGHT JOIN and FULL JOIN? [duplicate]","slug":"what's-the-difference-between-inner-join-left-join-right-join-and-full-join-duplicate-1657388082887"},{"title":"What special characters must be escaped in regular expressions?","slug":"what-special-characters-must-be-escaped-in-regular-expressions-1657387465381"},{"title":"How do I profile a Python script?","slug":"how-do-i-profile-a-python-script-1657388346692"},{"title":"Get the cartesian product of a series of lists?","slug":"get-the-cartesian-product-of-a-series-of-lists-1657387709890"},{"title":"The model item passed into the dictionary is of type .. but this dictionary requires a model item of type","slug":"the-model-item-passed-into-the-dictionary-is-of-type-..-but-this-dictionary-requires-a-model-item-of-type-1657388480874"},{"title":"Test for existence of nested JavaScript object key","slug":"test-for-existence-of-nested-javascript-object-key-1657387935411"},{"title":"How to use variables in SQL statement in Python?","slug":"how-to-use-variables-in-sql-statement-in-python-1657388479077"},{"title":"Event binding on dynamically created elements?","slug":"event-binding-on-dynamically-created-elements-1657384268057"},{"title":"What is the JavaScript version of sleep()?","slug":"what-is-the-javascript-version-of-sleep()-1657387391406"},{"title":"Short description of the scoping rules?","slug":"short-description-of-the-scoping-rules-1657384853121"},{"title":"Why does my function that calls an API or launches a coroutine return an empty or null value?","slug":"why-does-my-function-that-calls-an-api-or-launches-a-coroutine-return-an-empty-or-null-value-1657388483820"},{"title":"Where can I find documentation on formatting a date in JavaScript?","slug":"where-can-i-find-documentation-on-formatting-a-date-in-javascript-1657384878157"},{"title":"Error: could not find function ... in R","slug":"error:-could-not-find-function-...-in-r-1657388476492"},{"title":"What is JavaScript's highest integer value that a number can go to without losing precision?","slug":"what-is-javascript's-highest-integer-value-that-a-number-can-go-to-without-losing-precision-1657387622983"}]},"__N_SSG":true}