{"pageProps":{"data":{"answer":["\n&lt;p&gt;By using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;SqlCommand&lt;/code&gt;&lt;/a&gt; and its &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.parameters.aspx&quot; rel=&quot;noreferrer&quot;&gt;child collection of parameters&lt;/a&gt; all the pain of checking for sql injection is taken away from you and will be handled by these classes.&lt;/p&gt;\n\n&lt;p&gt;Here is an example, taken from one of the articles above:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UpdateDemographics&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Int32 customerID,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; demoXml, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; connectionString&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Update the demographics for a store, which is stored  &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// in an xml column.  &lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; commandText = &lt;span class=&quot;hljs-string&quot;&gt;&quot;UPDATE Sales.Store SET Demographics = @demographics &quot;&lt;/span&gt;\n        + &lt;span class=&quot;hljs-string&quot;&gt;&quot;WHERE CustomerID = @ID;&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (SqlConnection connection = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlConnection(connectionString))\n    {\n        SqlCommand command = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlCommand(commandText, connection);\n        command.Parameters.Add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;@ID&quot;&lt;/span&gt;, SqlDbType.Int);\n        command.Parameters[&lt;span class=&quot;hljs-string&quot;&gt;&quot;@ID&quot;&lt;/span&gt;].Value = customerID;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Use AddWithValue to assign Demographics. &lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// SQL Server will implicitly convert strings into XML.&lt;/span&gt;\n        command.Parameters.AddWithValue(&lt;span class=&quot;hljs-string&quot;&gt;&quot;@demographics&quot;&lt;/span&gt;, demoXml);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n        {\n            connection.Open();\n            Int32 rowsAffected = command.ExecuteNonQuery();\n            Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;RowsAffected: {0}&quot;&lt;/span&gt;, rowsAffected);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My answer is quite easy:&lt;/p&gt;\n\n&lt;p&gt;Use Entity Framework for communication between C# and your SQL database. That will make parameterized SQL strings that isn&apos;t vulnerable to SQL injection.&lt;/p&gt;\n\n&lt;p&gt;As a bonus, it&apos;s very easy to work with as well.&lt;/p&gt;\n    ","\n&lt;p&gt;SQL injection can be a tricky problem but there are ways around it.  Your risk is reduced your risk simply by using an ORM like Linq2Entities, Linq2SQL, NHibrenate.  However you can have SQL injection problems even with them.&lt;/p&gt;\n\n&lt;p&gt;The main thing with SQL injection is user controlled input (as is with XSS).  In the most simple example if you have a login form (I hope you never have one that just does this) that takes a username and password.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; Username &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot; + username + &quot;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; password &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot; + password + &quot;&apos;&lt;/span&gt;&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If a user were to input the following for the username &lt;strong&gt;Admin&apos; --&lt;/strong&gt; the SQL Statement would look like this when executing against the database.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; Username &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Admin&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;--&apos; AND password = &apos;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this simple case using a paramaterized query (which is what an ORM does) would remove your risk.  You also have a the issue of a lesser known SQL injection attack vector and that&apos;s with stored procedures.  In this case even if you use a paramaterized query or an ORM you would still have a SQL injection problem.  Stored procedures can contain execute commands, and those commands themselves may be suceptable to SQL injection attacks.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PROCEDURE&lt;/span&gt; SP_GetLogin &lt;span class=&quot;hljs-variable&quot;&gt;@username&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;), &lt;span class=&quot;hljs-variable&quot;&gt;@password&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt; nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;4000&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; SELECT * FROM users&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;\n              &lt;span class=&quot;hljs-string&quot;&gt;&apos; FROM Product Where username = &apos;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@username&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos; AND password = &apos;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;@password&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;EXECUTE&lt;/span&gt; sp_executesql &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So this example would have the same SQL injection problem as the previous one even if you use paramaterized queries or an ORM. And although the example seems silly you&apos;d be surprised as to how often something like this is written.&lt;/p&gt;\n\n&lt;p&gt;My recommendations would be to use an ORM to immediately reduce your chances of having a SQL injection problem, and then learn to spot code and stored procedures which can have the problem and work to fix them. I don&apos;t recommend using ADO.NET (SqlClient, SqlCommand etc...) directly unless you have to, not because it&apos;s somehow not safe to use it with parameters but because it&apos;s that much easier to get lazy and just start writing a SQL query using strings and just ignoring the parameters.  ORMS do a great job of forcing you to use parameters because it&apos;s just what they do.  &lt;/p&gt;\n\n&lt;p&gt;Next Visit the OWASP site on SQL injection &lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection&quot; rel=&quot;noreferrer&quot;&gt;https://www.owasp.org/index.php/SQL_Injection&lt;/a&gt; and  use the SQL injection cheat sheet to make sure you can spot and take out any issues that will arise in your code.  &lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet&quot; rel=&quot;noreferrer&quot;&gt;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet&lt;/a&gt;  finally I would say put in place a good code review between you and other developers at your company where you can review each others code for things like SQL injection and XSS. A lot of times programmers miss this stuff because they&apos;re trying to rush out some feature and don&apos;t spend too much time on reviewing their code.  &lt;/p&gt;\n    ","\n&lt;p&gt;SQL injection should not be prevented by trying to validate your input; instead, that input should be properly escaped before being passed to the database.&lt;/p&gt;\n\n&lt;p&gt;How to escape input totally depends on what technology you are using to interface with the database. In most cases and unless you are writing bare SQL (which you should avoid as hard as you can) it will be taken care of automatically by the framework so you get bulletproof protection for free.&lt;/p&gt;\n\n&lt;p&gt;You should explore this question further after you have decided exactly what your interfacing technology will be.&lt;/p&gt;\n    "],"id":564,"title":"What are good ways to prevent SQL injection? [duplicate]","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;This question already has answers here&lt;/b&gt;:\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n                    &lt;div class=&quot;flex--item mb0 mt4&quot;&gt;\n                        &lt;a href=&quot;/questions/35163361/how-can-i-add-user-supplied-input-to-an-sql-statement&quot; dir=&quot;ltr&quot;&gt;How can I add user-supplied input to an SQL statement?&lt;/a&gt;\n                            &lt;span class=&quot;question-originals-answer-count&quot;&gt;\n                                (2 answers)\n                            &lt;/span&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item mb0 mt8&quot;&gt;Closed &lt;span title=&quot;2016-02-03 15:21:53Z&quot; class=&quot;relativetime&quot;&gt;6 years ago&lt;/span&gt;.&lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;I have to program an application management system for my OJT company. The front end will be done in C# and the back end in SQL.&lt;/p&gt;\n\n&lt;p&gt;Now I have never done a project of this scope before; in school we had only basic lessons about SQL. Somehow our teacher completely failed to discuss SQL injections, something which I have only now come in contact with by reading about it on the net.&lt;/p&gt;\n\n&lt;p&gt;So anyway my question is: how do you prevent SQL injections in C#? I vaguely think that it can be done by properly masking the text fields of the application so that it only accepts input in a specified format. For example: an e-mail textbox should be of the format &quot;example@examplecompany.tld&quot;. Would this approach be sufficient? Or does .NET have pre-defined methods that handle stuff like this? Can I apply a filter to a textbox so it only accepts email-address format or a name textbox so it doesn&apos;t accept special chars?&lt;/p&gt;\n    ","slug":"what-are-good-ways-to-prevent-sql-injection-duplicate-1657388431570","postType":"QUESTION","createdAt":"2022-07-09T17:40:31.000Z","updatedAt":"2022-07-09T17:40:31.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"R cannot be resolved - Android error","slug":"r-cannot-be-resolved-android-error-1657388526258"},{"title":"What special characters must be escaped in regular expressions?","slug":"what-special-characters-must-be-escaped-in-regular-expressions-1657387465381"},{"title":"Why do we always prefer using parameters in SQL statements?","slug":"why-do-we-always-prefer-using-parameters-in-sql-statements-1657388031476"},{"title":"Calling a function of a module by using its name (a string)","slug":"calling-a-function-of-a-module-by-using-its-name-(a-string)-1657388565656"},{"title":"How can I combine two strings together in PHP?","slug":"how-can-i-combine-two-strings-together-in-php-1657388279401"},{"title":"How do I undo the most recent local commits in Git?","slug":"how-do-i-undo-the-most-recent-local-commits-in-git-1657388262945"},{"title":"Parameterize an SQL IN clause","slug":"parameterize-an-sql-in-clause-1657387536064"},{"title":"Can I mix MySQL APIs in PHP?","slug":"can-i-mix-mysql-apis-in-php-1657384597444"},{"title":"How to include a PHP variable inside a MySQL statement","slug":"how-to-include-a-php-variable-inside-a-mysql-statement-1657387669365"},{"title":"What is a raw type and why shouldn't we use it?","slug":"what-is-a-raw-type-and-why-shouldn't-we-use-it-1657384481079"},{"title":"How to return value from an asynchronous callback function? [duplicate]","slug":"how-to-return-value-from-an-asynchronous-callback-function-duplicate-1657387545611"},{"title":"Captured variable in a loop in C#","slug":"captured-variable-in-a-loop-in-c-1657387696779"},{"title":"Where and why do I have to put the \"template\" and \"typename\" keywords?","slug":"where-and-why-do-i-have-to-put-the-\"template\"-and-\"typename\"-keywords-1657384467606"},{"title":"Change the maximum upload file size","slug":"change-the-maximum-upload-file-size-1657388495156"},{"title":"Get the data received in a Flask request","slug":"get-the-data-received-in-a-flask-request-1657387804432"},{"title":"Persist variables between page loads","slug":"persist-variables-between-page-loads-1657388558452"},{"title":"How do I use extern to share variables between source files?","slug":"how-do-i-use-extern-to-share-variables-between-source-files-1657387453605"},{"title":"Strange result when removing item from a list while iterating over it [duplicate]","slug":"strange-result-when-removing-item-from-a-list-while-iterating-over-it-duplicate-1657387735759"},{"title":"Is it possible to escape regex metacharacters reliably with sed","slug":"is-it-possible-to-escape-regex-metacharacters-reliably-with-sed-1657388428795"},{"title":"What is the strict aliasing rule?","slug":"what-is-the-strict-aliasing-rule-1657384742852"}]},"__N_SSG":true}