{"pageProps":{"data":{"answer":["\n&lt;h3&gt;2022 update&lt;/h3&gt;\n&lt;p&gt;There&apos;s a new JS standard called &quot;structured cloning&quot;. It works on all browsers:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; clone = &lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt;(object);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Old answer&lt;/h2&gt;\n&lt;p&gt;To do this for any object in JavaScript will not be simple or straightforward. You will run into the problem of erroneously picking up attributes from the object&apos;s prototype that should be left in the prototype and not copied to the new instance. If, for instance, you are adding a &lt;code&gt;clone&lt;/code&gt; method to &lt;code&gt;Object.prototype&lt;/code&gt;, as some answers depict, you will need to explicitly skip that attribute. But what if there are other additional methods added to &lt;code&gt;Object.prototype&lt;/code&gt;, or other intermediate prototypes, that you don&apos;t know about? In that case, you will copy attributes you shouldn&apos;t, so you need to detect unforeseen, non-local attributes with the &lt;a href=&quot;https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/hasOwnProperty&quot; rel=&quot;noreferrer&quot; title=&quot;Mozilla JavaScript Reference: Object.hasOwnProperty&quot;&gt;&lt;code&gt;hasOwnProperty&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;\n&lt;p&gt;In addition to non-enumerable attributes, you&apos;ll encounter a tougher problem when you try to copy objects that have hidden properties. For example, &lt;code&gt;prototype&lt;/code&gt; is a hidden property of a function. Also, an object&apos;s prototype is referenced with the attribute &lt;code&gt;__proto__&lt;/code&gt;, which is also hidden, and will not be copied by a for/in loop iterating over the source object&apos;s attributes. I think &lt;code&gt;__proto__&lt;/code&gt; might be specific to Firefox&apos;s JavaScript interpreter and it may be something different in other browsers, but you get the picture. Not everything is enumerable. You can copy a hidden attribute if you know its name, but I don&apos;t know of any way to discover it automatically.&lt;/p&gt;\n&lt;p&gt;Yet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object&apos;s prototype is &lt;code&gt;Object&lt;/code&gt;, then simply creating a new general object with &lt;code&gt;{}&lt;/code&gt; will work, but if the source&apos;s prototype is some descendant of &lt;code&gt;Object&lt;/code&gt;, then you are going to be missing the additional members from that prototype which you skipped using the &lt;code&gt;hasOwnProperty&lt;/code&gt; filter, or which were in the prototype, but weren&apos;t enumerable in the first place. One solution might be to call the source object&apos;s &lt;code&gt;constructor&lt;/code&gt; property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a &lt;a href=&quot;https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date&quot; rel=&quot;noreferrer&quot; title=&quot;Mozilla JavaScript Reference: Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object stores its data as a hidden member:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; == obj || &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt; != &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = obj.&lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; attr &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(attr)) copy[attr] = obj[attr];\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Executes function after 5 seconds. */&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d2 = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(d1);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d1 = &quot;&lt;/span&gt; + d1.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nd2 = &quot;&lt;/span&gt; + d2.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;());\n}, &lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The date string for &lt;code&gt;d1&lt;/code&gt; will be 5 seconds behind that of &lt;code&gt;d2&lt;/code&gt;. A way to make one &lt;code&gt;Date&lt;/code&gt; the same as another is by calling the &lt;code&gt;setTime&lt;/code&gt; method, but that is specific to the &lt;code&gt;Date&lt;/code&gt; class. I don&apos;t think there is a bullet-proof general solution to this problem, though I would be happy to be wrong!&lt;/p&gt;\n&lt;p&gt;When I had to implement general deep copying I ended up compromising by assuming that I would only need to copy a plain &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, or &lt;code&gt;Boolean&lt;/code&gt;. The last 3 types are immutable, so I could perform a shallow copy and not worry about it changing. I further assumed that any elements contained in &lt;code&gt;Object&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; would also be one of the 6 simple types in that list. This can be accomplished with code like the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle the 3 simple types, and null or undefined&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; == obj || &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt; != &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Date&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;) {\n        copy = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;();\n        copy.&lt;span class=&quot;hljs-title function_&quot;&gt;setTime&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;());\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Array&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) {\n        copy = [];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = obj.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; len; i++) {\n            copy[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj[i]);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Object&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;) {\n        copy = {};\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; attr &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(attr)) copy[attr] = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj[attr]);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to copy obj! Its type isn&apos;t supported.&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The above function will work adequately for the 6 simple types I mentioned, as long as the data in the objects and arrays form a tree structure. That is, there isn&apos;t more than one reference to the same data in the object. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// This would be cloneable:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tree = {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;left&quot;&lt;/span&gt;  : { &lt;span class=&quot;hljs-string&quot;&gt;&quot;left&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;right&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;data&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; },\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;right&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;data&quot;&lt;/span&gt;  : &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// This would kind-of work, but you would get 2 copies of the &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// inner node instead of 2 references to the same copy&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; directedAcylicGraph = {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;left&quot;&lt;/span&gt;  : { &lt;span class=&quot;hljs-string&quot;&gt;&quot;left&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;right&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;data&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; },\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;data&quot;&lt;/span&gt;  : &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n};\ndirectedAcyclicGraph[&lt;span class=&quot;hljs-string&quot;&gt;&quot;right&quot;&lt;/span&gt;] = directedAcyclicGraph[&lt;span class=&quot;hljs-string&quot;&gt;&quot;left&quot;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Cloning this would cause a stack overflow due to infinite recursion:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cyclicGraph = {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;left&quot;&lt;/span&gt;  : { &lt;span class=&quot;hljs-string&quot;&gt;&quot;left&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;right&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;data&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; },\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;data&quot;&lt;/span&gt;  : &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n};\ncyclicGraph[&lt;span class=&quot;hljs-string&quot;&gt;&quot;right&quot;&lt;/span&gt;] = cyclicGraph;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It will not be able to handle any JavaScript object, but it may be sufficient for many purposes as long as you don&apos;t assume that it will just work for anything you throw at it.&lt;/p&gt;\n    ","\n&lt;p&gt;If you do not use &lt;code&gt;Date&lt;/code&gt;s, functions, undefined, regExp or Infinity within your object, a very simple one liner is &lt;code&gt;JSON.parse(JSON.stringify(object))&lt;/code&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; a = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;string&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;number&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;bool&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;nul&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(),  &lt;span class=&quot;hljs-comment&quot;&gt;// stringified&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;undef&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,  &lt;span class=&quot;hljs-comment&quot;&gt;// lost&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;inf&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Infinity&lt;/span&gt;,  &lt;span class=&quot;hljs-comment&quot;&gt;// forced to &apos;null&apos;&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// Date object&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; clone = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(a));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(clone);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; clone.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// result of .toISOString()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;This works for all kind of objects containing objects, arrays, strings, booleans and numbers.&lt;/p&gt;\n\n&lt;p&gt;See also &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/The_structured_clone_algorithm&quot; rel=&quot;noreferrer&quot;&gt;this article about the structured clone algorithm of browsers&lt;/a&gt; which is used when posting messages to and from a worker. It also contains a function for deep cloning.&lt;/p&gt;\n    ","\n&lt;p&gt;With jQuery, you can &lt;strong&gt;shallow copy&lt;/strong&gt; with &lt;a href=&quot;http://api.jquery.com/jQuery.extend&quot; rel=&quot;noreferrer&quot;&gt;extend&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copiedObject = jQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;({}, originalObject)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;subsequent changes to the &lt;code&gt;copiedObject&lt;/code&gt; will not affect the &lt;code&gt;originalObject&lt;/code&gt;, and vice versa.&lt;/p&gt;\n\n&lt;p&gt;Or to make a &lt;strong&gt;deep copy&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copiedObject = jQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, {}, originalObject)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In ECMAScript 6 there is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot; rel=&quot;noreferrer&quot;&gt;Object.assign&lt;/a&gt; method, which copies values of all enumerable own properties from one object to another. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = {&lt;span class=&quot;hljs-attr&quot;&gt;myProp&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, x); \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But be aware &lt;strong&gt;this is a shallow copy&lt;/strong&gt; - nested objects are still copied as reference.&lt;/p&gt;\n    ","\n&lt;p&gt;Per &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Deep_Clone&quot; rel=&quot;noreferrer&quot;&gt;MDN&lt;/a&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you want shallow copy, use &lt;code&gt;Object.assign({}, a)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;For &quot;deep&quot; copy, use &lt;code&gt;JSON.parse(JSON.stringify(a))&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;There is no need for external libraries but you need to check &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Browser_compatibility&quot; rel=&quot;noreferrer&quot;&gt;browser compatibility first&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;There are many answers, but none that mentions &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create&quot; rel=&quot;noreferrer&quot;&gt;Object.create&lt;/a&gt; from ECMAScript 5, which admittedly does not give you an exact copy, but sets the source as the prototype of the new object.&lt;/p&gt;\n\n&lt;p&gt;Thus, this is not an exact answer to the question, but it is a one-line solution and thus elegant. And it works best for 2 cases:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Where such inheritance is useful (duh!)&lt;/li&gt;\n&lt;li&gt;Where the source object won&apos;t be modified, thus making the relation between the 2 objects a non issue.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = { a : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(foo);\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\nbar.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\nbar.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 2 - prototype changed&lt;/span&gt;\nbar.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\nfoo.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Still 2, since setting bar.a makes it an &quot;own&quot; property&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Why do I consider this solution to be superior? It&apos;s native, thus no looping, no recursion. However, older browsers will need a polyfill.&lt;/p&gt;\n    ","\n&lt;h1&gt;An elegant way to clone a Javascript object in one line of code&lt;/h1&gt;\n&lt;p&gt;An &lt;code&gt;Object.assign&lt;/code&gt; method is part of the ECMAScript 2015 (ES6) standard and does exactly what you need.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clone = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, obj);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot; rel=&quot;noreferrer&quot;&gt;Read more...&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The &lt;strong&gt;polyfill&lt;/strong&gt; to support older browsers:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;assign&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;assign&apos;&lt;/span&gt;, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;writable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-string&quot;&gt;&apos;use strict&apos;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (target === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; || target === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Cannot convert first argument to object&apos;&lt;/span&gt;);\n      }\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; to = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(target);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nextSource = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (nextSource === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; || nextSource === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n        }\n        nextSource = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(nextSource);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; keysArray = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(nextSource);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nextIndex = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = keysArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; nextIndex &amp;lt; len; nextIndex++) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nextKey = keysArray[nextIndex];\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; desc = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;(nextSource, nextKey);\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (desc !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; desc.&lt;span class=&quot;hljs-property&quot;&gt;enumerable&lt;/span&gt;) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; to;\n    }\n  });\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are several issues with most solutions on the internet. So I decided to make a follow-up, which includes, why the accepted answer shouldn&apos;t be accepted.&lt;/p&gt;\n\n&lt;h2&gt;starting situation&lt;/h2&gt;\n\n&lt;p&gt;I want to &lt;strong&gt;deep-copy&lt;/strong&gt; a Javascript &lt;code&gt;Object&lt;/code&gt; with all of its children and their children and so on. But since I&apos;m not kind of a normal developer, my &lt;code&gt;Object&lt;/code&gt; has &lt;em&gt;normal&lt;/em&gt; &lt;code&gt;properties&lt;/code&gt;, &lt;code&gt;circular structures&lt;/code&gt; and even &lt;code&gt;nested objects&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;So let&apos;s create a &lt;code&gt;circular structure&lt;/code&gt; and a &lt;code&gt;nested object&lt;/code&gt; first.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Circ&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;me&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Nested&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;y&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt; = y;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&apos;s bring everything together in an &lt;code&gt;Object&lt;/code&gt; named &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;circ&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt;(),\n    &lt;span class=&quot;hljs-attr&quot;&gt;nested&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Nested&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;)\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Next, we want to copy &lt;code&gt;a&lt;/code&gt; into a variable named &lt;code&gt;b&lt;/code&gt; and mutate it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = a;\n\nb.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;;\nb.&lt;span class=&quot;hljs-property&quot;&gt;nested&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You know what happened here because if not you wouldn&apos;t even land on this great question.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a, b);\n\na --&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;circ&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt; { ... }\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;nested&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Nested&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;\n    }\n}\n\nb --&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;circ&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt; { ... }\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;nested&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Nested&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now let&apos;s find a solution.&lt;/p&gt;\n\n&lt;h2&gt;JSON&lt;/h2&gt;\n\n&lt;p&gt;The first attempt I tried was using &lt;code&gt;JSON&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;( a ) );\n\nb.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;;\nb.&lt;span class=&quot;hljs-property&quot;&gt;nested&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Don&apos;t waste too much time on it, you&apos;ll get &lt;code&gt;TypeError: Converting circular structure to JSON&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Recursive copy &lt;em&gt;(the accepted &quot;answer&quot;)&lt;/em&gt;&lt;/h2&gt;\n\n&lt;p&gt;Let&apos;s have a look at the accepted answer.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cloneSO&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle the 3 simple types, and null or undefined&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; == obj || &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt; != &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Date&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;();\n        copy.&lt;span class=&quot;hljs-title function_&quot;&gt;setTime&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;());\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Array&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = [];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = obj.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; len; i++) {\n            copy[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneSO&lt;/span&gt;(obj[i]);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Object&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = {};\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; attr &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(attr)) copy[attr] = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneSO&lt;/span&gt;(obj[attr]);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to copy obj! Its type isn&apos;t supported.&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Looks good, heh? It&apos;s a recursive copy of the object and handles other types as well, like &lt;code&gt;Date&lt;/code&gt;, but that wasn&apos;t a requirement.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneSO&lt;/span&gt;(a);\n\nb.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;;\nb.&lt;span class=&quot;hljs-property&quot;&gt;nested&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Recursion and &lt;code&gt;circular structures&lt;/code&gt; doesn&apos;t work well together... &lt;code&gt;RangeError: Maximum call stack size exceeded&lt;/code&gt;&lt;/p&gt;\n\n&lt;h2&gt;native solution&lt;/h2&gt;\n\n&lt;p&gt;After arguing with my co-worker, my boss asked us what happened, and he found a simple &lt;em&gt;solution&lt;/em&gt; after some googling. It&apos;s called &lt;code&gt;Object.create&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(a);\n\nb.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;;\nb.&lt;span class=&quot;hljs-property&quot;&gt;nested&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This solution was added to Javascript some time ago and even handles &lt;code&gt;circular structure&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a, b);\n\na --&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;circ&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt; { ... }\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;nested&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Nested&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;\n    }\n}\n\nb --&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;circ&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt; { ... }\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;nested&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Nested&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... and you see, it didn&apos;t work with the nested structure inside.&lt;/p&gt;\n\n&lt;h2&gt;polyfill for the native solution&lt;/h2&gt;\n\n&lt;p&gt;There&apos;s a polyfill for &lt;code&gt;Object.create&lt;/code&gt; in the older browser just like the IE 8. It&apos;s something like recommended by Mozilla, and of course, it&apos;s not perfect and results in the same problem as the &lt;em&gt;native solution&lt;/em&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clonePF&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt;) {\n    F.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = o;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-title function_&quot;&gt;clonePF&lt;/span&gt;(a);\n\nb.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;;\nb.&lt;span class=&quot;hljs-property&quot;&gt;nested&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;ve put &lt;code&gt;F&lt;/code&gt; outside the scope so we can have a look at what &lt;code&gt;instanceof&lt;/code&gt; tells us.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a, b);\n\na --&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;circ&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt; { ... }\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;nested&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Nested&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;\n    }\n}\n\nb --&amp;gt; F {\n    &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;circ&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt; { ... }\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;nested&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Nested&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; a, &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; b);\n\na --&amp;gt; object\nb --&amp;gt; object\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;);\n\na --&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\nb --&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; F, b &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; F);\n\na --&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\nb --&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Same problem as the &lt;em&gt;native solution&lt;/em&gt;, but a little bit worse output.&lt;/p&gt;\n\n&lt;h2&gt;the better (but not perfect) solution&lt;/h2&gt;\n\n&lt;p&gt;When digging around, I found a similar question (&lt;a href=&quot;https://stackoverflow.com/questions/10728412/in-javascript-when-performing-a-deep-copy-how-do-i-avoid-a-cycle-due-to-a-pro&quot;&gt;In Javascript, when performing a deep copy, how do I avoid a cycle, due to a property being &quot;this&quot;?&lt;/a&gt;) to this one, but with a way better solution.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cloneDR&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; gdcc = &lt;span class=&quot;hljs-string&quot;&gt;&quot;__getDeepCircularCopy__&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (o !== &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(o)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o; &lt;span class=&quot;hljs-comment&quot;&gt;// primitive value&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; set = gdcc &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; o,\n        cache = o[gdcc],\n        result;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (set &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; cache == &lt;span class=&quot;hljs-string&quot;&gt;&quot;function&quot;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cache&lt;/span&gt;();\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// else&lt;/span&gt;\n    o[gdcc] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result; }; &lt;span class=&quot;hljs-comment&quot;&gt;// overwrite&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (o &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) {\n        result = [];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;o.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n            result[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneDR&lt;/span&gt;(o[i]);\n        }\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        result = {};\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; prop &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; o)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (prop != gdcc)\n                result[prop] = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneDR&lt;/span&gt;(o[prop]);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (set)\n                result[prop] = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneDR&lt;/span&gt;(cache);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (set) {\n        o[gdcc] = cache; &lt;span class=&quot;hljs-comment&quot;&gt;// reset&lt;/span&gt;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; o[gdcc]; &lt;span class=&quot;hljs-comment&quot;&gt;// unset again&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneDR&lt;/span&gt;(a);\n\nb.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;;\nb.&lt;span class=&quot;hljs-property&quot;&gt;nested&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And let&apos;s have a look at the output...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a, b);\n\na --&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;circ&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; { ... }\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;nested&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;\n    }\n}\n\nb --&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;circ&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; { ... }\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;nested&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; {\n        &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; a, &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; b);\n\na --&amp;gt; object\nb --&amp;gt; object\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;);\n\na --&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\nb --&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; F, b &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; F);\n\na --&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\nb --&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The requirements are matched, but there are still some smaller issues, including changing the &lt;code&gt;instance&lt;/code&gt; of &lt;code&gt;nested&lt;/code&gt; and &lt;code&gt;circ&lt;/code&gt; to &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The structure of trees that share a leaf won&apos;t be copied, they will become two independent leaves:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;        [&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;]                     [&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;]\n         /    \\                       /    \\\n        /      \\                     /      \\\n      |&lt;span class=&quot;hljs-regexp&quot;&gt;/_      _\\|                 |/&lt;/span&gt;_      _\\|  \n  [&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;]    [&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;]   ===&amp;gt;  [&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;]    [&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;]\n       \\        /                 |           |\n        \\      /                  |           |\n        _\\|  |&lt;span class=&quot;hljs-regexp&quot;&gt;/_                 \\|/&lt;/span&gt;         \\|/\n        [&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;]               [&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;]    [&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;conclusion&lt;/h2&gt;\n\n&lt;p&gt;The last solution using recursion and a cache, may not be the best, but it&apos;s a &lt;strong&gt;real&lt;/strong&gt; deep-copy of the object. It handles simple &lt;code&gt;properties&lt;/code&gt;, &lt;code&gt;circular structures&lt;/code&gt; and &lt;code&gt;nested object&lt;/code&gt;, but it will mess up the instance of them while cloning.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/einfallstoll/N4mr2/&quot; rel=&quot;noreferrer&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re okay with a shallow copy, the underscore.js library has a &lt;a href=&quot;http://underscorejs.org/#clone&quot; rel=&quot;noreferrer&quot;&gt;clone&lt;/a&gt; method.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;y = _.&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(x);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or you can extend it like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;copiedObject = _.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;({},originalObject);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;OK,&lt;/strong&gt; imagine you have this object below and you want to clone it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}; &lt;span class=&quot;hljs-comment&quot;&gt;//ES6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}; &lt;span class=&quot;hljs-comment&quot;&gt;//ES5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the answer is mainly depeneds on which &lt;strong&gt;ECMAscript&lt;/strong&gt; you using, in &lt;code&gt;ES6+&lt;/code&gt;, you can simply use &lt;code&gt;Object.assign&lt;/code&gt; to do the clone:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; cloned = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, obj); &lt;span class=&quot;hljs-comment&quot;&gt;//new {a:1, b:2, c:3};&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or using spread operator like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; cloned = {...obj}; &lt;span class=&quot;hljs-comment&quot;&gt;//new {a:1, b:2, c:3};&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But if you using &lt;code&gt;ES5&lt;/code&gt;, you can use few methods, but the &lt;code&gt;JSON.stringify&lt;/code&gt;, just make sure you not using for a big chunk of data to copy, but it could be one line handy way in many cases, something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; cloned = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj)); \n&lt;span class=&quot;hljs-comment&quot;&gt;//new {a:1, b:2, c:3};, can be handy, but avoid using on big chunk of data over and over&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Update 06 July 2020&lt;/h2&gt;\n&lt;p&gt;There are three (3) ways to clone objects in JavaScript. As objects in JavaScript are reference values, you can&apos;t simply just copy using the =.&lt;/p&gt;\n&lt;p&gt;The ways are:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; food = { &lt;span class=&quot;hljs-attr&quot;&gt;food&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;drink&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;milk&apos;&lt;/span&gt; }\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 1. Using the &quot;Spread&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------&lt;/span&gt;\n\n{ ...food }\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2. Using &quot;Object.assign&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, food)\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 3. &quot;JSON&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(food))\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// RESULT:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// { food: &apos;apple&apos;, drink: &apos;milk&apos; }&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This can be used as a reference summary.&lt;/p&gt;\n    ","\n&lt;p&gt;One particularly inelegant solution is to use JSON encoding to make deep copies of objects that do not have member methods. The methodology is to JSON encode your target object, then by decoding it, you get the copy you are looking for.  You can decode as many times as you want to make as many copies as you need.&lt;/p&gt;\n\n&lt;p&gt;Of course, functions do not belong in JSON, so this only works for objects without member methods.&lt;/p&gt;\n\n&lt;p&gt;This methodology was perfect for my use case, since I&apos;m storing JSON blobs in a key-value store, and when they are exposed as objects in a JavaScript API, each object actually contains a copy of the original state of the object so we can calculate the delta after the caller has mutated the exposed object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object1 = {&lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object2 = object1;\n\nobject2 = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(object1);\nobject2 = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(object2);\n\nobject2.&lt;span class=&quot;hljs-property&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a change&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(object1);&lt;span class=&quot;hljs-comment&quot;&gt;// returns value&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can simply use a &lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread/blob/master/Spread.md&quot; rel=&quot;noreferrer&quot;&gt;spread property&lt;/a&gt; to copy an object without references. But be careful (see comments), the &apos;copy&apos; is just on the lowest object/array level. Nested properties are still references!&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Complete clone:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; x = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;value1&apos;&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; x2 = {...x}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; mutate without references:&lt;/span&gt;\n\nx2.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;value2&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;)    &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; &apos;value1&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Clone with references on second level:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; y = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;value3&apos;&lt;/span&gt;}}\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; y2 = {...y}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; nested object is still a references:&lt;/span&gt;\n\ny2.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;value4&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(y.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;)    &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; &apos;value4&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;JavaScript actually does not support deep clones natively. Use an utility function. For example Ramda:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;a href=&quot;http://ramdajs.com/docs/#clone&quot; rel=&quot;noreferrer&quot;&gt;http://ramdajs.com/docs/#clone&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; objClone = { ...obj };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Be aware that &lt;strong&gt;nested objects&lt;/strong&gt; are still copied &lt;strong&gt;as a reference.&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;From this article: &lt;a href=&quot;https://greywyvern.com/?post=363&quot; rel=&quot;noreferrer&quot;&gt;How to copy arrays and objects in Javascript&lt;/a&gt; by Brian Huisman:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;clone&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj = (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) ? [] : {};\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i == &lt;span class=&quot;hljs-string&quot;&gt;&apos;clone&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) {\n      newObj[i] = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i].&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; newObj[i] = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i]\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newObj;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For those using AngularJS, there is also direct method for cloning or extending of the objects in this library.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; destination = angular.&lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;(source);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;angular.&lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;(source, destination);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More in angular.copy &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.copy&quot;&gt;documentation&lt;/a&gt;...&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(obj) != &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; obj.&lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;); \n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj)\n        temp[key] = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj[key]);    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A.Levy&apos;s answer is almost complete, here is my little contribution: &lt;strong&gt;there is a way how to handle recursive references&lt;/strong&gt;, see this line&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;if(this[attr]==this) copy[attr] = copy;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;If the object is XML DOM element, we must use &lt;strong&gt;cloneNode&lt;/strong&gt; instead&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;if(this.cloneNode) return this.cloneNode(true);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Inspired by A.Levy&apos;s exhaustive study and Calvin&apos;s prototyping approach, I offer this solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;clone&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cloneNode&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneNode&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt; ? [] : {};\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; attr &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[attr] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;function&quot;&lt;/span&gt; || &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[attr]==&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || !&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[attr].&lt;span class=&quot;hljs-property&quot;&gt;clone&lt;/span&gt;)\n      copy[attr] = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[attr];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[attr]==&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) copy[attr] = copy;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; copy[attr] = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[attr].&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;();\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;clone&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;();\n  copy.&lt;span class=&quot;hljs-title function_&quot;&gt;setTime&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;());\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;clone&lt;/span&gt; = \n&lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;clone&lt;/span&gt; =\n&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;clone&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See also Andy Burke&apos;s note in the answers.&lt;/p&gt;\n    ","\n&lt;h1&gt;Performance&lt;/h1&gt;\n\n&lt;p&gt;Today 2020.04.30 I perform tests of chosen solutions on Chrome v81.0, Safari v13.1 and Firefox v75.0 on MacOs High Sierra v10.13.6. &lt;/p&gt;\n\n&lt;p&gt;I focus on speed of copy DATA (object with simple type fields, not methods etc.). The solutions A-I can make only shallow copy, solutions J-U can make deep copy.&lt;/p&gt;\n\n&lt;h3&gt;Results for shallow copy&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;solution &lt;code&gt;{...obj}&lt;/code&gt; (A) is fastest on chrome and firefox and medium fast on safari&lt;/li&gt;\n&lt;li&gt;solution based on &lt;code&gt;Object.assign&lt;/code&gt; (B) is fast on all browsers&lt;/li&gt;\n&lt;li&gt;jQuery (E) and lodash (F,G,H) solutions are medium/quite fast&lt;/li&gt;\n&lt;li&gt;solution &lt;code&gt;JSON.parse/stringify&lt;/code&gt; (K) is quite slow&lt;/li&gt;\n&lt;li&gt;solutions D and U are slow on all browsers&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/mCte1.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/mCte1.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;h3&gt;Results for deep copy&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;solution Q is fastest on all browsers&lt;/li&gt;\n&lt;li&gt;jQuery (L) and lodash (J) are medium fast&lt;/li&gt;\n&lt;li&gt;solution &lt;code&gt;JSON.parse/stringify&lt;/code&gt; (K) is quite slow&lt;/li&gt;\n&lt;li&gt;solution U is slowest on all browsers&lt;/li&gt;\n&lt;li&gt;lodash (J) and solution U crash on Chrome for 1000 level deep object&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/KxBqv.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/KxBqv.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Details&lt;/h2&gt;\n\n&lt;p&gt;For choosen solutions: \n&lt;a href=&quot;https://stackoverflow.com/a/44950864/860099&quot;&gt;A&lt;/a&gt; \n&lt;a href=&quot;https://stackoverflow.com/a/30042948/860099&quot;&gt;B&lt;/a&gt;\nC(my)\n&lt;a href=&quot;https://stackoverflow.com/a/49497485/860099&quot;&gt;D&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/5164215/860099&quot;&gt;E&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/11024936/860099&quot;&gt;F&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/13850856/860099&quot;&gt;G&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/11024936/860099&quot;&gt;H&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/728694/860099&quot;&gt;I&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/57504513/860099&quot;&gt;J&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/10869248/860099&quot;&gt;K&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/5164215/860099&quot;&gt;L&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/728400/860099&quot;&gt;M&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/728395/860099&quot;&gt;N&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/1042676/860099&quot;&gt;O&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/33273256/860099&quot;&gt;P&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/24648941/860099&quot;&gt;Q&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/24648941/860099&quot;&gt;R&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/39029912/860099&quot;&gt;S&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/11462081/860099&quot;&gt;T&lt;/a&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/53737490/860099&quot;&gt;U&lt;/a&gt;,\n I perform 4 tests&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;shallow-small: object with 10 non-nested fields - you can run it &lt;a href=&quot;https://jsbench.me/0xk9l5ci9x/1&quot; rel=&quot;noreferrer&quot;&gt;HERE&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;shallow-big: object with 1000 non-nested fields - you can run it &lt;a href=&quot;https://jsbench.me/t0k9l64319/1&quot; rel=&quot;noreferrer&quot;&gt;HERE&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;deep-small: object with 10 levels-nested fields - you can run it &lt;a href=&quot;https://jsbench.me/pvk9l6pzfj/1&quot; rel=&quot;noreferrer&quot;&gt;HERE&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;deep-big: object with 1000 levels-nested fields - you can run it &lt;a href=&quot;https://jsbench.me/euk9l6x9jx/1&quot; rel=&quot;noreferrer&quot;&gt;HERE&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Objects used in tests are show in below snippet&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj_ShallowSmall = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;field0&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;field1&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;field2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;field3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;field4&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;field5&lt;/span&gt;: [],\n  &lt;span class=&quot;hljs-attr&quot;&gt;field6&lt;/span&gt;: {},\n  &lt;span class=&quot;hljs-attr&quot;&gt;field7&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;text7&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;field8&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;text8&quot;&lt;/span&gt;,\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj_DeepSmall = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;level0&lt;/span&gt;: {\n   &lt;span class=&quot;hljs-attr&quot;&gt;level1&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;level2&lt;/span&gt;: {\n     &lt;span class=&quot;hljs-attr&quot;&gt;level3&lt;/span&gt;: {\n      &lt;span class=&quot;hljs-attr&quot;&gt;level4&lt;/span&gt;: {\n       &lt;span class=&quot;hljs-attr&quot;&gt;level5&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;level6&lt;/span&gt;: {\n         &lt;span class=&quot;hljs-attr&quot;&gt;level7&lt;/span&gt;: {\n          &lt;span class=&quot;hljs-attr&quot;&gt;level8&lt;/span&gt;: {\n           &lt;span class=&quot;hljs-attr&quot;&gt;level9&lt;/span&gt;: [[[[[[[[[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;]]]]]]]]]],\n  }}}}}}}}},\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj_ShallowBig = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,c,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (a[&lt;span class=&quot;hljs-string&quot;&gt;&apos;field&apos;&lt;/span&gt;+i]=&lt;span class=&quot;hljs-title function_&quot;&gt;getField&lt;/span&gt;(i),a) ,{});\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj_DeepBig = &lt;span class=&quot;hljs-title function_&quot;&gt;genDeepObject&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Show objects&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;obj_ShallowSmall:&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj_ShallowSmall));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;obj_DeepSmall:&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj_DeepSmall));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;obj_ShallowBig:&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj_ShallowBig));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;obj_DeepBig:&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj_DeepBig));\n\n\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// HELPERS&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getField&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;k&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i=k%&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; k;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {};  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i&amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt;+k;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;genDeepObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;N&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// generate: {level0:{level1:{...levelN: {end:[[[...N-times...[&apos;abc&apos;]...]]] }}}...}}}&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj={};\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; o=obj;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a=arr;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;N; i++) {\n    o[&lt;span class=&quot;hljs-string&quot;&gt;&apos;level&apos;&lt;/span&gt;+i]={};\n    o=o[&lt;span class=&quot;hljs-string&quot;&gt;&apos;level&apos;&lt;/span&gt;+i];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; aa=[];\n    a.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(aa);\n    a=aa;\n  }\n\n  a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]=&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;;\n  o[&lt;span class=&quot;hljs-string&quot;&gt;&apos;end&apos;&lt;/span&gt;]=arr;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Below snippet presents tested solutions and shows differences between them&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {...obj}\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;B&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, obj); \n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;C&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(obj).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (a[c]=obj[c], a), {})\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;D&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; copyOfObject = {};\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperties&lt;/span&gt;(copyOfObject, &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptors&lt;/span&gt;(obj));\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copyOfObject;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;E&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;({}, obj) &lt;span class=&quot;hljs-comment&quot;&gt;// shallow&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _.&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;G&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _.&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;H&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;({},obj);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;I&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; == obj || &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt; != &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = obj.&lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; attr &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(attr)) copy[attr] = obj[attr];\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;J&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneDeep&lt;/span&gt;(obj,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;K&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n\t&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj));\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;L&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, {}, obj) &lt;span class=&quot;hljs-comment&quot;&gt;// deep&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;M&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(obj) != &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;    \n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; obj.&lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;); \n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj)\n    temp[key] = &lt;span class=&quot;hljs-title function_&quot;&gt;M&lt;/span&gt;(obj[key]);    \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;N&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EClone&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj = (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) ? [] : {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i == &lt;span class=&quot;hljs-string&quot;&gt;&apos;EClone&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj[i] &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj[i] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) {\n        newObj[i] = &lt;span class=&quot;hljs-title class_&quot;&gt;EClone&lt;/span&gt;(obj[i]);\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; newObj[i] = obj[i]\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newObj;\n  };\n\n\t&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EClone&lt;/span&gt;(obj);\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;O&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj != &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; != &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; &amp;amp;&amp;amp; obj.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; != &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; == &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt; || obj.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; == &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt; || obj.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; == &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt; ||\n        obj.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; == &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; || obj.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; == &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt; || obj.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; == &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; obj.&lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; to = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; obj.&lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj)\n    {\n        to[name] = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; to[name] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt; ? &lt;span class=&quot;hljs-title function_&quot;&gt;O&lt;/span&gt;(obj[name], &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) : to[name];\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; to;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;P&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target, source&lt;/span&gt;){\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; source){\n\n          &lt;span class=&quot;hljs-comment&quot;&gt;// Use getOwnPropertyDescriptor instead of source[key] to prevent from trigering setter/getter.&lt;/span&gt;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; descriptor = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;(source, key);\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;){\n              target[key] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;);\n          }\n          &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;){\n              target[key] = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;([], descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;);\n          }\n          &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;){\n              &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; prototype = &lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;);\n              &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; cloneObject = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;({}, descriptor.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;);\n              &lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setPrototypeOf&lt;/span&gt;(cloneObject, prototype);\n              target[key] = cloneObject;\n          }\n          &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n              &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(target, key, descriptor);\n          }\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; prototype = &lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(source);\n      &lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setPrototypeOf&lt;/span&gt;(target, prototype);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; target;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;({},obj);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Q&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle the 3 simple types, and null or undefined&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; == obj || &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt; != &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Date&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;) {\n        copy = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;();\n        copy.&lt;span class=&quot;hljs-title function_&quot;&gt;setTime&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;());\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Array&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) {\n        copy = [];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = obj.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; len; i++) {\n            copy[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;Q&lt;/span&gt;(obj[i]);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Object&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;) {\n        copy = {};\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; attr &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(attr)) copy[attr] = &lt;span class=&quot;hljs-title function_&quot;&gt;Q&lt;/span&gt;(obj[attr]);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to copy obj! Its type isn&apos;t supported.&quot;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;R&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; gdcc = &lt;span class=&quot;hljs-string&quot;&gt;&quot;__getDeepCircularCopy__&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj !== &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(obj)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj; &lt;span class=&quot;hljs-comment&quot;&gt;// primitive value&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; set = gdcc &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj,\n        cache = obj[gdcc],\n        result;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (set &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; cache == &lt;span class=&quot;hljs-string&quot;&gt;&quot;function&quot;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cache&lt;/span&gt;();\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// else&lt;/span&gt;\n    obj[gdcc] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result; }; &lt;span class=&quot;hljs-comment&quot;&gt;// overwrite&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) {\n        result = [];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;obj.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n            result[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;R&lt;/span&gt;(obj[i]);\n        }\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        result = {};\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; prop &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (prop != gdcc)\n                result[prop] = &lt;span class=&quot;hljs-title function_&quot;&gt;R&lt;/span&gt;(obj[prop]);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (set)\n                result[prop] = &lt;span class=&quot;hljs-title function_&quot;&gt;R&lt;/span&gt;(cache);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (set) {\n        obj[gdcc] = cache; &lt;span class=&quot;hljs-comment&quot;&gt;// reset&lt;/span&gt;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; obj[gdcc]; &lt;span class=&quot;hljs-comment&quot;&gt;// unset again&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;S&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; cache = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;WeakMap&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Map of old - new references&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; object !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; ||\n            object === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; ||\n            object &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HTMLElement&lt;/span&gt;\n        )\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; object; &lt;span class=&quot;hljs-comment&quot;&gt;// primitive value or HTMLElement&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (object &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;) \n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;setTime&lt;/span&gt;(object.&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;());\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (object &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;) \n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(object.&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;, object.&lt;span class=&quot;hljs-property&quot;&gt;flags&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (cache.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(object)) \n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cache.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(object);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = object &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt; ? [] : {};\n\n        cache.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(object, result); &lt;span class=&quot;hljs-comment&quot;&gt;// store reference to object before the recursive starts&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (object &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; object) {\n                 result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;(o));\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; keys = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(object); \n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; keys)\n            result[key] = &lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;(object[key]);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;(obj);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;T&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clonedObjectsArray = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; originalObjectsArray = []; &lt;span class=&quot;hljs-comment&quot;&gt;//used to remove the unique ids when finished&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; next_objid = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectId&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.&lt;span class=&quot;hljs-property&quot;&gt;__obj_id&lt;/span&gt; == &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){\n            obj.&lt;span class=&quot;hljs-property&quot;&gt;__obj_id&lt;/span&gt; = next_objid++;\n            originalObjectsArray[obj.&lt;span class=&quot;hljs-property&quot;&gt;__obj_id&lt;/span&gt;] = obj;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj.&lt;span class=&quot;hljs-property&quot;&gt;__obj_id&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cloneRecursive&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; == obj || &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj == &lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt; || &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj == &lt;span class=&quot;hljs-string&quot;&gt;&quot;number&quot;&lt;/span&gt; || &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj == &lt;span class=&quot;hljs-string&quot;&gt;&quot;boolean&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Date&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;();\n            copy.&lt;span class=&quot;hljs-title function_&quot;&gt;setTime&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;());\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Array&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = [];\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; obj.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; ++i) {\n                copy[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneRecursive&lt;/span&gt;(obj[i]);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Object&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (clonedObjectsArray[&lt;span class=&quot;hljs-title function_&quot;&gt;objectId&lt;/span&gt;(obj)] != &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; clonedObjectsArray[&lt;span class=&quot;hljs-title function_&quot;&gt;objectId&lt;/span&gt;(obj)];\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;//Handle Function&lt;/span&gt;\n                copy = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);};\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                copy = {};\n\n            clonedObjectsArray[&lt;span class=&quot;hljs-title function_&quot;&gt;objectId&lt;/span&gt;(obj)] = copy;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; attr &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (attr != &lt;span class=&quot;hljs-string&quot;&gt;&quot;__obj_id&quot;&lt;/span&gt; &amp;amp;&amp;amp; obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(attr))\n                    copy[attr] = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneRecursive&lt;/span&gt;(obj[attr]);                 \n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n        }       \n\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to copy obj! Its type isn&apos;t supported.&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cloneObj = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneRecursive&lt;/span&gt;(obj);\n\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//remove the unique ids&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; originalObjectsArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; originalObjectsArray[i].&lt;span class=&quot;hljs-property&quot;&gt;__obj_id&lt;/span&gt;;\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cloneObj;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;U&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;/*\n    Deep copy objects by value rather than by reference,\n    exception: `Proxy`\n  */&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; seen = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;WeakMap&lt;/span&gt;()\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj)\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;defineProp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object, key, descriptor = {}, copyFrom = {}&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { &lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: _configurable, &lt;span class=&quot;hljs-attr&quot;&gt;writable&lt;/span&gt;: _writable }\n      = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;(object, key)\n      || { &lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;writable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; test = _configurable &lt;span class=&quot;hljs-comment&quot;&gt;// Can redefine property&lt;/span&gt;\n      &amp;amp;&amp;amp; (_writable === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; || _writable) &lt;span class=&quot;hljs-comment&quot;&gt;// Can assign to property&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!test || &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; test\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; basisDesc = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;(copyFrom, key)\n      || { &lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;writable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; } &lt;span class=&quot;hljs-comment&quot;&gt;// Custom&lt;/span&gt;\n      || {}; &lt;span class=&quot;hljs-comment&quot;&gt;// or left to native default settings&lt;/span&gt;\n\n    [&lt;span class=&quot;hljs-string&quot;&gt;&quot;get&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;set&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;writable&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;enumerable&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;configurable&quot;&lt;/span&gt;]\n      .&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;attr&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n        descriptor[attr] === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp;\n        (descriptor[attr] = basisDesc[attr])\n      )\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { get, set, value, writable, enumerable, configurable }\n      = descriptor\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(object, key, {\n      enumerable, configurable, ...get || set\n        ? { get, set } &lt;span class=&quot;hljs-comment&quot;&gt;// Accessor descriptor&lt;/span&gt;\n        : { value, writable } &lt;span class=&quot;hljs-comment&quot;&gt;// Data descriptor&lt;/span&gt;\n    })\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (object !== &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(object)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; object &lt;span class=&quot;hljs-comment&quot;&gt;/*\n     Check if the object belongs to a primitive data type */&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (object &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Node&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; object.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneNode&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;/*\n     Clone DOM trees */&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; _object &lt;span class=&quot;hljs-comment&quot;&gt;// The clone of object&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (object.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;:\n        _object = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(object)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;:\n        _object = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(+object)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fnStr = &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(object)\n\n        _object = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;return &quot;&lt;/span&gt; +\n          (&lt;span class=&quot;hljs-regexp&quot;&gt;/^(?!function |[^{]+?=&amp;gt;)[^(]+?\\(/&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(fnStr)\n            ? &lt;span class=&quot;hljs-string&quot;&gt;&quot;function &quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n          ) + fnStr\n        )()\n\n        &lt;span class=&quot;hljs-title function_&quot;&gt;copyPropDescs&lt;/span&gt;(_object, object)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;:\n        _object = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(object)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n      &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(object.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;)) {\n          &lt;span class=&quot;hljs-comment&quot;&gt;//                              // Stem from:&lt;/span&gt;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Function]&quot;&lt;/span&gt;:       &lt;span class=&quot;hljs-comment&quot;&gt;// `class`&lt;/span&gt;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Undefined]&quot;&lt;/span&gt;:      &lt;span class=&quot;hljs-comment&quot;&gt;// `Object.create(null)`&lt;/span&gt;\n            _object = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(object)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n          &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;:                        &lt;span class=&quot;hljs-comment&quot;&gt;// `Proxy`&lt;/span&gt;\n            _object = object\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _object\n  }\n\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (seen.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(object)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; seen.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(object) &lt;span class=&quot;hljs-comment&quot;&gt;/*\n     Handle recursive references (circular structures) */&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; _object = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(object)\n      ? []\n      : &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(object)) &lt;span class=&quot;hljs-comment&quot;&gt;/*\n         Assign [[Prototype]] for inheritance */&lt;/span&gt;\n\n    seen.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(object, _object) &lt;span class=&quot;hljs-comment&quot;&gt;/*\n     Make `_object` the associative mirror of `object` */&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ownKeys&lt;/span&gt;(object).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-title function_&quot;&gt;defineProp&lt;/span&gt;(_object, key, { &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(object[key]) }, object)\n    )\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _object\n  }\n\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copyPropDescs&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target, source&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperties&lt;/span&gt;(target,\n      &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptors&lt;/span&gt;(source)\n    )\n  }\n}\n \n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Test properties&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------------&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`  shallow deep  func  circ  undefined date  RegExp bigInt`&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(A);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(B);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(C);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(D);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(E);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(F);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(G);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(H);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(I);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(J);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(K);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(L);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(M);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(N);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(O);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(P);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(Q);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(R);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(S);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(T);\n&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(U);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`  shallow deep  func  circ  undefined date  RegExp bigInt\n----\nLEGEND:\nshallow - solution create shallow copy\ndeep - solution create deep copy\nfunc - solution copy functions\ncirc - solution can copy object with circular references\nundefined - solution copy fields with undefined value\ndate - solution can copy date\nRegExp - solution can copy fields with regular expressions\nbigInt - solution can copy BigInt\n`&lt;/span&gt;)\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Helper functions&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------------&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepCompare&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj1,obj2&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj1)===&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj2);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getCase&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// pure data case&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; { \n    &lt;span class=&quot;hljs-attr&quot;&gt;undef&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;bool&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;str&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;txt1&quot;&lt;/span&gt;,    \n    &lt;span class=&quot;hljs-attr&quot;&gt;e1&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e2&lt;/span&gt;: [], &lt;span class=&quot;hljs-attr&quot;&gt;e3&lt;/span&gt;: {}, &lt;span class=&quot;hljs-attr&quot;&gt;e4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e5&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;arr&lt;/span&gt;: [ &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;txt3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, [], {},\n      [ &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;txt5&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, [], {},  [&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;txt7&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,[],{} ], \n        {&lt;span class=&quot;hljs-attr&quot;&gt;bool&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;str&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;txt9&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e1&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e2&lt;/span&gt;:[] ,&lt;span class=&quot;hljs-attr&quot;&gt;e3&lt;/span&gt;:{} ,&lt;span class=&quot;hljs-attr&quot;&gt;e4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e5&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;}\n      ],\n        {&lt;span class=&quot;hljs-attr&quot;&gt;bool&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;str&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;txt11&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e1&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e2&lt;/span&gt;:[] ,&lt;span class=&quot;hljs-attr&quot;&gt;e3&lt;/span&gt;:{} ,&lt;span class=&quot;hljs-attr&quot;&gt;e4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e5&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;}\n    ], \n    &lt;span class=&quot;hljs-attr&quot;&gt;obj&lt;/span&gt;: { \n        &lt;span class=&quot;hljs-attr&quot;&gt;bool&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;str&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;txt13&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;e1&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e2&lt;/span&gt;: [], &lt;span class=&quot;hljs-attr&quot;&gt;e3&lt;/span&gt;: {}, &lt;span class=&quot;hljs-attr&quot;&gt;e4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e5&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;arr&lt;/span&gt;: [&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;txt15&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,[],{} ],\n        &lt;span class=&quot;hljs-attr&quot;&gt;obj&lt;/span&gt;: { \n          &lt;span class=&quot;hljs-attr&quot;&gt;bool&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;str&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;txt17&quot;&lt;/span&gt;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;e1&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e2&lt;/span&gt;: [], &lt;span class=&quot;hljs-attr&quot;&gt;e3&lt;/span&gt;: {}, &lt;span class=&quot;hljs-attr&quot;&gt;e4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e5&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;arr&lt;/span&gt;: [&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;txt19&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,[],{} ],\n          &lt;span class=&quot;hljs-attr&quot;&gt;obj&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;bool&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;str&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;txt21&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e1&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e2&lt;/span&gt;:[] ,&lt;span class=&quot;hljs-attr&quot;&gt;e3&lt;/span&gt;:{} ,&lt;span class=&quot;hljs-attr&quot;&gt;e4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e5&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;}\n      } \n    } \n  };\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;check&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;org, copy, field, newValue&lt;/span&gt;) {\n  copy[field] = newValue;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepCompare&lt;/span&gt;(org,copy); \n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;) {\n\t&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; o = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;fun&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i,j&lt;/span&gt;)=&amp;gt;&lt;/span&gt; i+j };\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c = &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(o);\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; val = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n    val = c.&lt;span class=&quot;hljs-title function_&quot;&gt;fun&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;;\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) { }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; val;\n} \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testCirc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;) {\n\t&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Circ&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;me&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {\n      &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,\n      &lt;span class=&quot;hljs-attr&quot;&gt;circ&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Circ&lt;/span&gt;(),\n      &lt;span class=&quot;hljs-attr&quot;&gt;obj_circ&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n  };\n  \n  o.&lt;span class=&quot;hljs-property&quot;&gt;obj_circ&lt;/span&gt; = o;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; val = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c = &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(o);  \n    val = (o.&lt;span class=&quot;hljs-property&quot;&gt;obj_circ&lt;/span&gt; == o) &amp;amp;&amp;amp; (o.&lt;span class=&quot;hljs-property&quot;&gt;circ&lt;/span&gt; == o.&lt;span class=&quot;hljs-property&quot;&gt;circ&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;me&lt;/span&gt;);\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) { }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; val;\n} \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testRegExp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; o = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;re&lt;/span&gt;: &lt;span class=&quot;hljs-regexp&quot;&gt;/a[0-9]+/&lt;/span&gt;,\n  };\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; val = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c = &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(o);  \n    val = (&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(c.&lt;span class=&quot;hljs-property&quot;&gt;re&lt;/span&gt;) == &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/a[0-9]+/&lt;/span&gt;));\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) { }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; val;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testDate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; o = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(),\n  };\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; val = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c = &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(o);  \n    val = (+&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(c.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;) == +&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(o.&lt;span class=&quot;hljs-property&quot;&gt;date&lt;/span&gt;));\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) { }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; val;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testBigInt&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; val = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; o = {\n      &lt;span class=&quot;hljs-attr&quot;&gt;big&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;123n&lt;/span&gt;,\n    };\n  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c = &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(o);  \n  \n    val = o.&lt;span class=&quot;hljs-property&quot;&gt;big&lt;/span&gt; == c.&lt;span class=&quot;hljs-property&quot;&gt;big&lt;/span&gt;;\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) { }\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; val;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; o = &lt;span class=&quot;hljs-title function_&quot;&gt;getCase&lt;/span&gt;();  &lt;span class=&quot;hljs-comment&quot;&gt;// orginal object&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; oB = &lt;span class=&quot;hljs-title function_&quot;&gt;getCase&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;backup&quot; used for shallow valid test&lt;/span&gt;\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c1 = &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(o); &lt;span class=&quot;hljs-comment&quot;&gt;// copy 1 for reference&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c2 = &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(o); &lt;span class=&quot;hljs-comment&quot;&gt;// copy 2 for test shallow values&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; c3 = &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(o); &lt;span class=&quot;hljs-comment&quot;&gt;// copy 3 for test deep values&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; is_proper_copy = &lt;span class=&quot;hljs-title function_&quot;&gt;deepCompare&lt;/span&gt;(c1,o);  &lt;span class=&quot;hljs-comment&quot;&gt;// shoud be true&lt;/span&gt;\n  \n  &lt;span class=&quot;hljs-comment&quot;&gt;// shallow changes&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; testShallow = \n    [ [&lt;span class=&quot;hljs-string&quot;&gt;&apos;bool&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;num&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;666&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;xyz&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;arr&apos;&lt;/span&gt;,[]],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;obj&apos;&lt;/span&gt;,{}] ]\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;acc,curr&lt;/span&gt;)=&amp;gt;&lt;/span&gt; acc &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_&quot;&gt;check&lt;/span&gt;(c1,c2,curr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], curr[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]), &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; );\n  \n  &lt;span class=&quot;hljs-comment&quot;&gt;// should be true (original object shoud not have changed shallow fields)&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; is_valid = &lt;span class=&quot;hljs-title function_&quot;&gt;deepCompare&lt;/span&gt;(o,oB); \n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// deep test (intruduce some change)&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c3.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]) c3.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;num&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;777&lt;/span&gt;;\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; diff_shallow = !testShallow; &lt;span class=&quot;hljs-comment&quot;&gt;// shoud be true (shallow field was copied)&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; diff_deep = !&lt;span class=&quot;hljs-title function_&quot;&gt;deepCompare&lt;/span&gt;(c1,c3);    &lt;span class=&quot;hljs-comment&quot;&gt;// shoud be true (deep field was copied)&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; can_copy_functions = &lt;span class=&quot;hljs-title function_&quot;&gt;testFunc&lt;/span&gt;(f);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; can_copy_circular = &lt;span class=&quot;hljs-title function_&quot;&gt;testCirc&lt;/span&gt;(f);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; can_copy_regexp = &lt;span class=&quot;hljs-title function_&quot;&gt;testRegExp&lt;/span&gt;(f);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; can_copy_date = &lt;span class=&quot;hljs-title function_&quot;&gt;testDate&lt;/span&gt;(f);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; can_copy_bigInt = &lt;span class=&quot;hljs-title function_&quot;&gt;testBigInt&lt;/span&gt;(f);\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; has_undefined = &lt;span class=&quot;hljs-string&quot;&gt;&apos;undef&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; c1; &lt;span class=&quot;hljs-comment&quot;&gt;// field with undefined value is copied?  &lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; is_ok = is_valid &amp;amp;&amp;amp; is_proper_copy;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;=(&lt;span class=&quot;hljs-params&quot;&gt;bool&lt;/span&gt;) =&amp;gt; (bool+&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;padEnd&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// bool value to formated string&lt;/span&gt;\n  \n  &lt;span class=&quot;hljs-title function_&quot;&gt;testFunc&lt;/span&gt;(f);\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(is_ok) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${f.name}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${b(diff_shallow)}&lt;/span&gt;   &lt;span class=&quot;hljs-subst&quot;&gt;${b(diff_deep)}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${b(can_copy_functions)}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${b(can_copy_circular)}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${b(has_undefined)}&lt;/span&gt;     &lt;span class=&quot;hljs-subst&quot;&gt;${b(can_copy_date)}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${b(can_copy_regexp)}&lt;/span&gt;  &lt;span class=&quot;hljs-subst&quot;&gt;${b(can_copy_bigInt)}&lt;/span&gt;`&lt;/span&gt;)\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${f.name}&lt;/span&gt;: INVALID &lt;span class=&quot;hljs-subst&quot;&gt;${is_valid}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${is_proper_copy}&lt;/span&gt;`&lt;/span&gt;,{c1})\n  }\n  \n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://code.jquery.com/jquery-3.5.0.min.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;integrity&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;sha256-xNzN2a4ltkB44Mc/Jz3pT4iU1cmeR0FkXs4pru/JxaQ=&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;crossorigin&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://cdn.jsdelivr.net/npm/lodash@4.17.15/lodash.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\nThis snippet only presents tested solutions and show differences between them (but it no make performence tests)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Below there are example results for Chrome for shallow-big object&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/zluC1.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/zluC1.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Using Lodash: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = _.&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(x, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In ES-6 you can simply use Object.assign(...).\nEx:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;person&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Thor Odinson&apos;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; clone = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, obj);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A good reference is here:\n&lt;a href=&quot;https://googlechrome.github.io/samples/object-assign-es6/&quot; rel=&quot;noreferrer&quot;&gt;https://googlechrome.github.io/samples/object-assign-es6/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Interested in cloning simple objects:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;JSON.parse(JSON.stringify(json_original));&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Source : &lt;a href=&quot;https://stackoverflow.com/questions/18359093/how-to-copy-javascript-object-to-new-variable-not-by-reference?answertab=votes#tab-top&quot;&gt;How to copy JavaScript object to new variable NOT by reference?&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can clone an object and remove any reference from the previous one using a single line of code. Simply do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj1 = { &lt;span class=&quot;hljs-attr&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;moo1&apos;&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj2 = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(obj1); &lt;span class=&quot;hljs-comment&quot;&gt;// Creates a new clone without references&lt;/span&gt;\n\nobj2.&lt;span class=&quot;hljs-property&quot;&gt;text&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;moo2&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Only updates obj2&apos;s text property&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj1, obj2); &lt;span class=&quot;hljs-comment&quot;&gt;// Outputs: obj1: {text:&apos;moo1&apos;}, obj2: {text:&apos;moo2&apos;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For browsers / engines that do not currently support Object.create you can use this polyfill:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Polyfill Object.create if it does not exist&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;create&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;create&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; F = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n        F.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = o;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;F&lt;/span&gt;();\n    };\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; clone = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(obj)), obj)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;ES6 solution if you want to (shallow) clone a &lt;strong&gt;class instance&lt;/strong&gt; and not just a property object.&lt;/p&gt;\n    ","\n&lt;p&gt;New answer to an old question!  If you have the pleasure of having using ECMAScript 2016 (ES6) with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot; rel=&quot;noreferrer&quot;&gt;Spread Syntax&lt;/a&gt;, it&apos;s easy.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;keepMeTheSame = {&lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Me!&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;second&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;You!&quot;&lt;/span&gt;};\ncloned = {...keepMeTheSame}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This provides a clean method for a shallow copy of an object.  Making a deep copy, meaning makign a new copy of every value in every recursively nested object, requires on of the heavier solutions above.&lt;/p&gt;\n\n&lt;p&gt;JavaScript keeps evolving.&lt;/p&gt;\n    ","\n&lt;p&gt;I think there is a simple and working answer. In deep copying there are two concerns:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Keep properties independent to each other.&lt;/li&gt;\n&lt;li&gt;And keep the methods alive on cloned object.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;So I think one simple solution will be to first serialize and deserialize and then do an assign on it to copy functions too.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; deepCloned = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(source));\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; merged = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, source);\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(merged, deepCloned);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although this question has many answers, I hope this one helps too.&lt;/p&gt;\n    ","\n&lt;p&gt;For a deep copy and clone, JSON.stringify then JSON.parse the object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; , &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}};\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; deepClone = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj));\nobj.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\nobj.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(deepClone)); &lt;span class=&quot;hljs-comment&quot;&gt;// { a: 0, b: { c: 0}}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Structured Cloning&lt;/h1&gt;\n&lt;p&gt;&lt;strong&gt;2022 update:&lt;/strong&gt; The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/structuredClone&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;structuredClone()&lt;/code&gt;&lt;/a&gt; global function is already available in Node 17, Deno 1.14, and most major browsers (see &lt;a href=&quot;https://caniuse.com/?search=structuredClone&quot; rel=&quot;nofollow noreferrer&quot;&gt;Can I Use&lt;/a&gt;).&lt;/p&gt;\n&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; use the same structured clone mechanism that the HTML standard includes for sending data between realms.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; clone = &lt;span class=&quot;hljs-title function_&quot;&gt;structuredClone&lt;/span&gt;(original);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/a/10916838/157247&quot;&gt;the other answer&lt;/a&gt; for more details.&lt;/p&gt;\n    ","\n&lt;p&gt;(The following was mainly an integration of @&lt;a href=&quot;https://stackoverflow.com/a/39029912&quot;&gt;Maciej Bukowski&lt;/a&gt;, @&lt;a href=&quot;https://stackoverflow.com/a/728694&quot;&gt;A. Levy&lt;/a&gt;, @&lt;a href=&quot;https://stackoverflow.com/a/9023088&quot;&gt;Jan Turoň&lt;/a&gt;, @&lt;a href=&quot;https://stackoverflow.com/a/37503916&quot;&gt;Redu&lt;/a&gt;&apos;s answers, and @&lt;a href=&quot;https://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object/53737490#comment96229185_53737490&quot;&gt;LeviRoberts&lt;/a&gt;, @&lt;a href=&quot;https://stackoverflow.com/q/728360#comment42972840_9023088&quot;&gt;RobG&lt;/a&gt;&apos;s comments, many thanks to them!!!)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Deep copy&lt;/strong&gt;?  YES! (mostly);&lt;br&gt;\n&lt;strong&gt;Shallow copy&lt;/strong&gt;?  NO! (except &lt;code&gt;Proxy&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;I sincerely welcome everyone to test &lt;code&gt;clone()&lt;/code&gt;.&lt;br&gt;\nIn addition, &lt;code&gt;defineProp()&lt;/code&gt; is designed to easily and quickly &lt;em&gt;(re)define or copy&lt;/em&gt; any type of descriptor.&lt;/p&gt;\n&lt;h1&gt;Function&lt;/h1&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;/*\n    Deep copy objects by value rather than by reference,\n    exception: `Proxy`\n  */&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; seen = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;WeakMap&lt;/span&gt;()\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(object)\n\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (object !== &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(object)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; object &lt;span class=&quot;hljs-comment&quot;&gt;/*\n     Check if the object belongs to a primitive data type */&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (object &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Node&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; object.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneNode&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;/*\n     Clone DOM trees */&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; _object &lt;span class=&quot;hljs-comment&quot;&gt;// The clone of object&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (object.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;:\n        _object = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(object)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;:\n        _object = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(+object)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;:\n        _object = &lt;span class=&quot;hljs-title function_&quot;&gt;copyFn&lt;/span&gt;(object)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;:\n        _object = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(object)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n      &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(object.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;)) {\n          &lt;span class=&quot;hljs-comment&quot;&gt;//                                  // Stem from:&lt;/span&gt;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Function]&quot;&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (object[&lt;span class=&quot;hljs-title class_&quot;&gt;Symbol&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toStringTag&lt;/span&gt;]) {\n              &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;undefined&lt;/span&gt;:\n                _object = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(object) &lt;span class=&quot;hljs-comment&quot;&gt;// `class`&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n              &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;AsyncFunction&quot;&lt;/span&gt;:\n              &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;GeneratorFunction&quot;&lt;/span&gt;:\n              &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;AsyncGeneratorFunction&quot;&lt;/span&gt;:\n                _object = &lt;span class=&quot;hljs-title function_&quot;&gt;copyFn&lt;/span&gt;(object)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n              &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;:\n                _object = object\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Undefined]&quot;&lt;/span&gt;:          &lt;span class=&quot;hljs-comment&quot;&gt;// `Object.create(null)`&lt;/span&gt;\n            _object = &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(object)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\n          &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;:\n            _object = object                  &lt;span class=&quot;hljs-comment&quot;&gt;// `Proxy`&lt;/span&gt;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _object\n  }\n\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cloneObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (seen.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(object)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; seen.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(object) &lt;span class=&quot;hljs-comment&quot;&gt;/*\n     Handle recursive references (circular structures) */&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; _object = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(object)\n      ? []\n      : &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(object)) &lt;span class=&quot;hljs-comment&quot;&gt;/*\n         Assign [[Prototype]] for inheritance */&lt;/span&gt;\n\n    seen.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(object, _object) &lt;span class=&quot;hljs-comment&quot;&gt;/*\n     Make `_object` the associative mirror of `object` */&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ownKeys&lt;/span&gt;(object).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-title function_&quot;&gt;defineProp&lt;/span&gt;(_object, key, { &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(object[key]) }, object)\n    )\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _object\n  }\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copyPropDescs&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target, source&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperties&lt;/span&gt;(target,\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptors&lt;/span&gt;(source)\n  )\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;convertFnToStr&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; fnStr = &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(fn)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fn.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;startsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;// isSymbolKey&lt;/span&gt;\n    fnStr = fnStr.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\[Symbol\\..+?\\]/&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n  fnStr = &lt;span class=&quot;hljs-regexp&quot;&gt;/^(?!(async )?(function\\b|[^{]+?=&amp;gt;))[^(]+?\\(/&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(fnStr)\n    ? fnStr.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/^(async )?(\\*)?/&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;$1function$2 &quot;&lt;/span&gt;) : fnStr\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fnStr\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copyFn&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newFn = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`return &lt;span class=&quot;hljs-subst&quot;&gt;${convertFnToStr(fn)}&lt;/span&gt;`&lt;/span&gt;)()\n  &lt;span class=&quot;hljs-title function_&quot;&gt;copyPropDescs&lt;/span&gt;(newFn, fn)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newFn\n}\n\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;defineProp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object, key, descriptor = {}, copyFrom = {}&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { &lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: _configurable, &lt;span class=&quot;hljs-attr&quot;&gt;writable&lt;/span&gt;: _writable }\n    = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;(object, key)\n    || { &lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;writable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; test = _configurable &lt;span class=&quot;hljs-comment&quot;&gt;// Can redefine property&lt;/span&gt;\n    &amp;amp;&amp;amp; (_writable === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; || _writable) &lt;span class=&quot;hljs-comment&quot;&gt;// Can assign to property&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!test || &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; test\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; basisDesc = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;(copyFrom, key)\n    || { &lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;writable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; } &lt;span class=&quot;hljs-comment&quot;&gt;// Custom&lt;/span&gt;\n    || {}; &lt;span class=&quot;hljs-comment&quot;&gt;// or left to native default settings&lt;/span&gt;\n\n  [&lt;span class=&quot;hljs-string&quot;&gt;&quot;get&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;set&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;writable&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;enumerable&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;configurable&quot;&lt;/span&gt;]\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;attr&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n      descriptor[attr] === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp;\n      (descriptor[attr] = basisDesc[attr])\n    )\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { get, set, value, writable, enumerable, configurable }\n    = descriptor\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(object, key, {\n    enumerable, configurable, ...get || set\n      ? { get, set } &lt;span class=&quot;hljs-comment&quot;&gt;// Accessor descriptor&lt;/span&gt;\n      : { value, writable } &lt;span class=&quot;hljs-comment&quot;&gt;// Data descriptor&lt;/span&gt;\n  })\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;// Tests&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj0 = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;u&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;nul&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;t&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;str&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;sym&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;symbol&quot;&lt;/span&gt;),\n  [&lt;span class=&quot;hljs-title class_&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;)]: &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;E&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;arr&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]],\n  &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(),\n  &lt;span class=&quot;hljs-attr&quot;&gt;re&lt;/span&gt;: &lt;span class=&quot;hljs-regexp&quot;&gt;/f/g&lt;/span&gt;,\n  &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;() { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; },\n  &lt;span class=&quot;hljs-attr&quot;&gt;o&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;n&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;o&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) { } }\n  },\n  &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getAccessorStr&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; []\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(...\n          &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwnPropertyDescriptors&lt;/span&gt;(object))\n            .&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;desc&lt;/span&gt; =&amp;gt;&lt;/span&gt; desc.&lt;span class=&quot;hljs-property&quot;&gt;writable&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;)\n            .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;desc&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;(desc))\n        )\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;prop&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; prop === &lt;span class=&quot;hljs-string&quot;&gt;&quot;function&quot;&lt;/span&gt;)\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;)\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;f0&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f0&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { },\n    &lt;span class=&quot;hljs-attr&quot;&gt;f1&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { },\n    &lt;span class=&quot;hljs-attr&quot;&gt;f2&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; a / (a + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),\n    &lt;span class=&quot;hljs-attr&quot;&gt;f3&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n    &lt;span class=&quot;hljs-title function_&quot;&gt;f4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;params&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;param&lt;/span&gt; =&amp;gt;&lt;/span&gt; param + params },\n    &lt;span class=&quot;hljs-attr&quot;&gt;f5&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; } = {}&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a + b + c\n  }\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;defineProp&lt;/span&gt;(obj0, &lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;, { &lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;_s&lt;/span&gt; = v } })\n&lt;span class=&quot;hljs-title function_&quot;&gt;defineProp&lt;/span&gt;(obj0.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;tint&quot;&lt;/span&gt;, { &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;is&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;non-enumerable&quot;&lt;/span&gt; } })\nobj0.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;nested array&quot;&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj1 = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj0)\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;o&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;n&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;o&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;o&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;g&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, b = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b }\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;d&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setTime&lt;/span&gt;(+obj0.&lt;span class=&quot;hljs-property&quot;&gt;d&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;tint&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;is&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;enumerable? no&quot;&lt;/span&gt;\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a nested arr&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;defineProp&lt;/span&gt;(obj1, &lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;, { &lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;_s&lt;/span&gt; = v + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; } })\n&lt;span class=&quot;hljs-title function_&quot;&gt;defineProp&lt;/span&gt;(obj1.&lt;span class=&quot;hljs-property&quot;&gt;re&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;multiline&quot;&lt;/span&gt;, { &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; })\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n\\n&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;repeat&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ** &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;))\n\n\n\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;:&amp;gt;: Test - Routinely&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obj0:\\n &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj0))\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obj1:\\n &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj1))\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;()\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obj0:\\n &quot;&lt;/span&gt;, obj0)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obj1:\\n &quot;&lt;/span&gt;, obj1)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;()\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obj0\\n &quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;.arr.tint:&quot;&lt;/span&gt;, obj0.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;tint&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n &quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;.arr[0].name:&quot;&lt;/span&gt;, obj0.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;\n)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obj1\\n &quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;.arr.tint:&quot;&lt;/span&gt;, obj1.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;tint&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n &quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;.arr[0].name:&quot;&lt;/span&gt;, obj1.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;\n)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;()\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Accessor-type descriptor\\n &quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;of obj0:&quot;&lt;/span&gt;, obj0.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getAccessorStr&lt;/span&gt;(obj0), &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n &quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;of obj1:&quot;&lt;/span&gt;, obj1.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getAccessorStr&lt;/span&gt;(obj1), &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n &quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;set (obj0 &amp;amp; obj1) .s :&quot;&lt;/span&gt;, obj0.&lt;span class=&quot;hljs-property&quot;&gt;s&lt;/span&gt; = obj1.&lt;span class=&quot;hljs-property&quot;&gt;s&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n &quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;   (obj0 , obj1) ._s:&quot;&lt;/span&gt;, obj0.&lt;span class=&quot;hljs-property&quot;&gt;_s&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;, obj1.&lt;span class=&quot;hljs-property&quot;&gt;_s&lt;/span&gt;\n)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot; obj0 has not been interfered.&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n\\n&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;repeat&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ** &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;))\n\n\n\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;:&amp;gt;: Test - More kinds of functions&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fnsForTest = {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _ },\n  &lt;span class=&quot;hljs-attr&quot;&gt;func&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;_&lt;/span&gt; =&amp;gt;&lt;/span&gt; _,\n  &lt;span class=&quot;hljs-attr&quot;&gt;aFunc&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; _ =&amp;gt; _,\n  &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { },\n  &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asyncFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { },\n  &lt;span class=&quot;hljs-attr&quot;&gt;aFn&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { },\n  *&lt;span class=&quot;hljs-title function_&quot;&gt;gen&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { },\n  &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; *&lt;span class=&quot;hljs-title function_&quot;&gt;asyncGen&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { },\n  &lt;span class=&quot;hljs-attr&quot;&gt;aG1&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;* () { },\n  &lt;span class=&quot;hljs-attr&quot;&gt;aG2&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;hljs-title function_&quot;&gt;gen&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { },\n  *[&lt;span class=&quot;hljs-title class_&quot;&gt;Symbol&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;iterator&lt;/span&gt;]() { &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt;* &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) }\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ownKeys&lt;/span&gt;(fnsForTest).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;k&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;(k)}&lt;/span&gt;:\n  &lt;span class=&quot;hljs-subst&quot;&gt;${fnsForTest[k].name}&lt;/span&gt;--&amp;gt;\n    &lt;span class=&quot;hljs-subst&quot;&gt;${&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;(fnsForTest[k])}&lt;/span&gt;`&lt;/span&gt;\n).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; normedFnsStr = &lt;span class=&quot;hljs-string&quot;&gt;`{\n  f: function f(_) { return _ },\n  func: _ =&amp;gt; _,\n  aFunc: async _ =&amp;gt; _,\n  function: async function() { },\n  asyncFunc: async function asyncFunc() { },\n  aFn: async function () { },\n  gen: function* gen() { },\n  asyncGen: async function* asyncGen() { },\n  aG1: async function* () { },\n  aG2: async function* gen() { },\n  [Symbol.iterator]: function* () { yield* Object.keys(this) }\n}`&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; copiedFnsForTest = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(fnsForTest)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fnsForTest:&quot;&lt;/span&gt;, fnsForTest)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fnsForTest (copied):&quot;&lt;/span&gt;, copiedFnsForTest)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fnsForTest (normed str):&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`(&lt;span class=&quot;hljs-subst&quot;&gt;${normedFnsStr}&lt;/span&gt;)`&lt;/span&gt;))\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Comparison of fnsForTest and its clone:&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Reflect&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ownKeys&lt;/span&gt;(fnsForTest).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;k&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n    [k, fnsForTest[k] === copiedFnsForTest[k]]\n  )\n)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n\\n&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;repeat&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ** &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;))\n\n\n\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;:&amp;gt;: Test - Circular structures&quot;&lt;/span&gt;)\n\nobj0.&lt;span class=&quot;hljs-property&quot;&gt;o&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;r&lt;/span&gt; = {}\nobj0.&lt;span class=&quot;hljs-property&quot;&gt;o&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;r&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;recursion&lt;/span&gt; = obj0.&lt;span class=&quot;hljs-property&quot;&gt;o&lt;/span&gt;\nobj0.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = obj0.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;\n\nobj1 = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj0)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obj0:\\n &quot;&lt;/span&gt;, obj0)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obj1:\\n &quot;&lt;/span&gt;, obj1)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Clear obj0&apos;s recursion:&quot;&lt;/span&gt;,\n  obj0.&lt;span class=&quot;hljs-property&quot;&gt;o&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;r&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;recursion&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, obj0.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;obj0\\n &quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;.o.r:&quot;&lt;/span&gt;, obj0.&lt;span class=&quot;hljs-property&quot;&gt;o&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;r&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n &quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;.arr:&quot;&lt;/span&gt;, obj0.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;\n)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;obj1\\n &quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;.o.r:&quot;&lt;/span&gt;, obj1.&lt;span class=&quot;hljs-property&quot;&gt;o&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;r&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n &quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;.arr:&quot;&lt;/span&gt;, obj1.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;\n)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot; obj1 has not been interfered.&quot;&lt;/span&gt;)\n\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n\\n&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;repeat&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ** &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;))\n\n\n\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;:&amp;gt;: Test - Classes&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Boy&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Person&lt;/span&gt; { }\n&lt;span class=&quot;hljs-title class_&quot;&gt;Boy&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sex&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;M&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; boy0 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Boy&lt;/span&gt;\nboy0.&lt;span class=&quot;hljs-property&quot;&gt;hobby&lt;/span&gt; = { &lt;span class=&quot;hljs-attr&quot;&gt;sport&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;spaceflight&quot;&lt;/span&gt; }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; boy1 = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(boy0)\nboy1.&lt;span class=&quot;hljs-property&quot;&gt;hobby&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sport&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;superluminal flight&quot;&lt;/span&gt;\n\nboy0.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;\nboy1.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;neo&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;boy0:\\n &quot;&lt;/span&gt;, boy0)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;boy1:\\n &quot;&lt;/span&gt;, boy1)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;boy1&apos;s prototype === boy0&apos;s:&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(boy1) === &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPrototypeOf&lt;/span&gt;(boy0)\n)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;References&lt;/h1&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://mdn.io/Object/create&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Object.create()&lt;/code&gt; | MDN&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://mdn.io/Object/defineProperties&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Object.defineProperties()&lt;/code&gt; | MDN&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties#Detection_Table&quot; rel=&quot;nofollow noreferrer&quot;&gt;Enumerability and ownership of properties | MDN&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://mdn.io/Errors/Cyclic_object_value&quot; rel=&quot;nofollow noreferrer&quot;&gt;TypeError: cyclic object value | MDN&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h1&gt;Language tricks used&lt;/h1&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/40560953&quot;&gt;Conditionally add prop to object&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://lodash.com/docs/4.17.15#cloneDeep&quot; rel=&quot;noreferrer&quot;&gt;Use lodash _.cloneDeep().&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Shallow Copy: lodash _.clone()&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;A shallow copy can be made by simply copying the reference.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj1 = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;e&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n        }\n    }\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj3 = _.&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(obj1);\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj1));\n&lt;span class=&quot;hljs-comment&quot;&gt;//{&quot;a&quot;:4,&quot;b&quot;:{&quot;c&quot;:4,&quot;e&quot;:{&quot;f&quot;:100}}}&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj3));\n&lt;span class=&quot;hljs-comment&quot;&gt;//{&quot;a&quot;:0,&quot;b&quot;:{&quot;c&quot;:4,&quot;e&quot;:{&quot;f&quot;:100}}}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/vmysI.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/vmysI.png&quot; alt=&quot;Shallow Copy: lodash _.clone()&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Deep Copy: lodash _.cloneDeep()&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;fields are dereferenced: rather than references to objects being copied&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj1 = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;e&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n        }\n    }\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj3 = _.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneDeep&lt;/span&gt;(obj1);\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\nobj1.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj1));\n{&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:{&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;:{&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;}}}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj3));\n{&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:{&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;:{&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}}}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/z0M6n.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/z0M6n.png&quot; alt=&quot;Deep Copy: lodash _.cloneDeep()&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See this question: &lt;a href=&quot;http://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-clone-a-javascript-object&quot; title=&quot;what is the most efficient way to clone a javascript object&quot;&gt;stackoverflow.com/questions/122102/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/184/niyaz&quot; title=&quot;52,095 reputation&quot; class=&quot;comment-user&quot;&gt;Niyaz&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7536129_728360&quot;&gt;&lt;span title=&quot;2011-06-21 10:13:57Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 21, 2011 at 10:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For JSON, I use &lt;code&gt;mObj=JSON.parse(JSON.stringify(jsonObject));&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/482176/lord-loh&quot; title=&quot;2,397 reputation&quot; class=&quot;comment-user&quot;&gt;Lord Loh.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment20489215_728360&quot;&gt;&lt;span title=&quot;2013-02-02 10:09:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 2, 2013 at 10:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I really don&apos;t get why no one suggests &lt;code&gt;Object.create(o)&lt;/code&gt;, it does everything the author asks?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/791750/froginvasion&quot; title=&quot;833 reputation&quot; class=&quot;comment-user&quot;&gt;froginvasion&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39257156_728360&quot;&gt;&lt;span title=&quot;2014-08-08 15:23:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 8, 2014 at 15:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;var x = { deep: { key: 1 } }; var y = Object.create(x); x.deep.key = 2;&lt;/code&gt;  After doing this, &lt;code&gt;y.deep.key&lt;/code&gt; will also be 2, hence Object.create CAN NOT BE USED for cloning...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1390892/ruben-stolk&quot; title=&quot;10,768 reputation&quot; class=&quot;comment-user&quot;&gt;Ruben Stolk&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50443996_728360&quot;&gt;&lt;span title=&quot;2015-07-04 15:04:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 4, 2015 at 15:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@r3wt that will not work... Please post only after doing basic test of  the solution..&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user3275211&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment58579456_728360&quot;&gt;&lt;span title=&quot;2016-02-16 18:54:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 16, 2016 at 18:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is missing symbol keys and symbol values. Nowadays, using &lt;code&gt;Object.getOwnPropertyDescriptors&lt;/code&gt; is better.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4642212/sebastian-simon&quot; title=&quot;16,704 reputation&quot; class=&quot;comment-user&quot;&gt;Sebastian Simon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120761208_728694&quot;&gt;&lt;span title=&quot;2021-07-10 15:33:53Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 10, 2021 at 15:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;b&gt;structuredClone&lt;/b&gt; is &lt;a href=&quot;https://caniuse.com/?search=structuredClone&quot; rel=&quot;nofollow noreferrer&quot;&gt;only 75% compatible globally&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/580606/joshuadavid&quot; title=&quot;8,061 reputation&quot; class=&quot;comment-user&quot;&gt;JoshuaDavid&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127698643_728694&quot;&gt;&lt;span title=&quot;2022-05-17 21:27:04Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 17 at 21:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In Nodejs, &lt;code&gt;structuredClone(object)&lt;/code&gt; works for node v17.0.0 and later.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7929984/nikhil-sinha&quot; title=&quot;181 reputation&quot; class=&quot;comment-user&quot;&gt;Nikhil Sinha&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128214075_728694&quot;&gt;&lt;span title=&quot;2022-06-11 07:08:42Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 11 at 7:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Update on @JoshuaDavid, currently supported in 82.57% of all browsers.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11787139/kay-angevare&quot; title=&quot;169 reputation&quot; class=&quot;comment-user&quot;&gt;Kay Angevare&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128301073_728694&quot;&gt;&lt;span title=&quot;2022-06-15 14:23:48Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 15 at 14:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;sometimes the best answers are the simplest. genius.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2298108/dewd&quot; title=&quot;4,349 reputation&quot; class=&quot;comment-user&quot;&gt;dewd&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment123890008_10869248&quot;&gt;&lt;span title=&quot;2021-11-23 16:30:31Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 23, 2021 at 16:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Helpful, but when comparing objects which contains other objects, I ran through unexpected behaviour when two exactly equal objects where not taken as equals. used JSON.stringify(x) == JSON.stringify(JSON.parse(JSON.stringify(a))) to fix it. For some reason, comparing as strings works perfectly as expected when comparing, could not match otherwise.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12182508/agustin-l-lacuara&quot; title=&quot;94 reputation&quot; class=&quot;comment-user&quot;&gt;Agustin L. Lacuara&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127299581_10869248&quot;&gt;&lt;span title=&quot;2022-04-28 13:36:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 28 at 13:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AgustinL.Lacuara You cannot compare complex datatypes in JS.  &lt;code&gt;a={};b={}; a==b&lt;/code&gt;  is &lt;code&gt;false&lt;/code&gt;. But after &lt;code&gt;a=b&lt;/code&gt; it becomes &lt;code&gt;true&lt;/code&gt;, because it is not only identical but it is the same object.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1031916/heinob&quot; title=&quot;18,665 reputation&quot; class=&quot;comment-user&quot;&gt;heinob&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127306843_10869248&quot;&gt;&lt;span title=&quot;2022-04-28 18:47:32Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 28 at 18:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;does the job, but, this is goes against any good programming practice.  In brazil, we call that a &apos;Gambiarra&apos;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/688689/diego-favero&quot; title=&quot;1,793 reputation&quot; class=&quot;comment-user&quot;&gt;Diego Favero&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128715377_10869248&quot;&gt;&lt;span title=&quot;2022-07-05 19:03:39Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 5 at 19:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is prototypal inheritance, not cloning. These are completely different things. The new object doesn&apos;t have any of it&apos;s own properties, it just points to the prototype&apos;s properties. The point of cloning is to create a fresh new object that doesn&apos;t reference any properties in another object.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1282216/d13&quot; title=&quot;9,307 reputation&quot; class=&quot;comment-user&quot;&gt;d13&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31863725_9772788&quot;&gt;&lt;span title=&quot;2014-01-16 16:18:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 16, 2014 at 16:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;this will only perform a shallow &quot;cloning&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/274677/marcus-junius-brutus&quot; title=&quot;24,694 reputation&quot; class=&quot;comment-user&quot;&gt;Marcus Junius Brutus&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment64527755_34294740&quot;&gt;&lt;span title=&quot;2016-07-25 13:27:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 25, 2016 at 13:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I learned the hard way that &lt;code&gt;objA = objB;&lt;/code&gt; causes all kinds of headaches. This seems to have solved the problem, at least for now...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6929343/wineunuuchs2unix&quot; title=&quot;1,532 reputation&quot; class=&quot;comment-user&quot;&gt;WinEunuuchs2Unix&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127063536_34294740&quot;&gt;&lt;span title=&quot;2022-04-17 23:38:08Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 17 at 23:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;so the conlcusion is to avoid that problem :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/952480/mikus&quot; title=&quot;2,697 reputation&quot; class=&quot;comment-user&quot;&gt;mikus&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41681363_24648941&quot;&gt;&lt;span title=&quot;2014-10-23 11:39:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 23, 2014 at 11:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@mikus until there&apos;s a &lt;i&gt;real&lt;/i&gt; specification which covers more than just the basic use cases, yes.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/377369/fabio-poloni&quot; title=&quot;7,951 reputation&quot; class=&quot;comment-user&quot;&gt;Fabio Poloni&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41687714_24648941&quot;&gt;&lt;span title=&quot;2014-10-23 14:41:32Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 23, 2014 at 14:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;An okay analysis of the solutions provided above but the conclusion drawn by the author indicates that there is no solution to this question.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2146701/amir-mog&quot; title=&quot;321 reputation&quot; class=&quot;comment-user&quot;&gt;Amir Mog&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65313568_24648941&quot;&gt;&lt;span title=&quot;2016-08-16 16:53:51Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 16, 2016 at 16:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is shame that JS not includes native clone function.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1398264/l00k&quot; title=&quot;1,475 reputation&quot; class=&quot;comment-user&quot;&gt;l00k&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment68418547_24648941&quot;&gt;&lt;span title=&quot;2016-11-14 14:53:48Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 14, 2016 at 14:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Among all the top answers, I feel this is close to the correct one.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/527376/ktu&quot; title=&quot;425 reputation&quot; class=&quot;comment-user&quot;&gt;KTU&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment74972830_24648941&quot;&gt;&lt;span title=&quot;2017-05-15 04:24:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 15, 2017 at 4:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks. Using this technique on a Meteor server.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3582957/turbo&quot; title=&quot;392 reputation&quot; class=&quot;comment-user&quot;&gt;Turbo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46944704_11024936&quot;&gt;&lt;span title=&quot;2015-04-01 04:30:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 1, 2015 at 4:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;To get started quickly with lodash, I&apos;d recommend learning npm, Browserify, as well as lodash. I got clone to work with  &apos;npm i --save lodash.clone&apos; and then &apos;var clone = require(&apos;lodash.clone&apos;);&apos; To get require to work, you need something like browserify. Once you install it and learn how it works, youll use &apos;browserify yourfile.js &amp;gt; bundle.js;start chrome index.html&apos; every time you run your code (instead of going into Chrome directly). This gathers your file and all the files you required from the npm module into bundle.js. You can probably save time and automate this step with Gulp though.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user11104582&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment97896474_11024936&quot;&gt;&lt;span title=&quot;2019-04-09 19:43:49Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 9, 2019 at 19:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Can you please give example of what &lt;code&gt;big chunk of data&lt;/code&gt; would equate to?  100kb? 100MB? Thanks!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1063287/user1063287&quot; title=&quot;9,573 reputation&quot; class=&quot;comment-user&quot;&gt;user1063287&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91607986_44950864&quot;&gt;&lt;span title=&quot;2018-09-14 11:04:47Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 14, 2018 at 11:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yes, @user1063287, that basically the bigger data, the performnce worse... so it really depends, not a kb, mb or gb, it&apos;s more about how many times you wanna do that also... Also it won&apos;t work for functions and other stuffs...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5423108/alireza&quot; title=&quot;94,015 reputation&quot; class=&quot;comment-user&quot;&gt;Alireza&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment97058245_44950864&quot;&gt;&lt;span title=&quot;2019-03-14 09:58:57Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 14, 2019 at 9:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;Object.assign&lt;/code&gt; makes a shallow copy (just as the spread, @Alizera)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/543763/bogdan-d&quot; title=&quot;4,961 reputation&quot; class=&quot;comment-user&quot;&gt;Bogdan D&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment99327391_44950864&quot;&gt;&lt;span title=&quot;2019-05-29 13:42:54Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 29, 2019 at 13:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You can&apos;t use let in es5 :^) @Alireza&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6030385/womble&quot; title=&quot;306 reputation&quot; class=&quot;comment-user&quot;&gt;Womble&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment108866958_44950864&quot;&gt;&lt;span title=&quot;2020-05-01 14:56:45Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 1, 2020 at 14:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;And this adds what new/unique information to this question?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/402037/andreas&quot; title=&quot;20,864 reputation&quot; class=&quot;comment-user&quot;&gt;Andreas&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment110970186_62750627&quot;&gt;&lt;span title=&quot;2020-07-06 08:24:45Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 6, 2020 at 8:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The &lt;code&gt;JSON&lt;/code&gt; approach would remove any methods of the object&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/402037/andreas&quot; title=&quot;20,864 reputation&quot; class=&quot;comment-user&quot;&gt;Andreas&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment110970209_62750627&quot;&gt;&lt;span title=&quot;2020-07-06 08:25:18Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 6, 2020 at 8:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;To create a string from an object and then parsing that string into another object just to copy the object is a kind of Monty Python&apos;s style of programming :-D&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1355959/jarom%c3%adr-adamec&quot; title=&quot;571 reputation&quot; class=&quot;comment-user&quot;&gt;Jaromír Adamec&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment116079593_62750627&quot;&gt;&lt;span title=&quot;2021-01-10 14:24:11Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 10, 2021 at 14:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This only works for object literals and objects that can be represented as such, but &lt;i&gt;not&lt;/i&gt; for generic &quot;objects&quot; like you encounter in OO languages. This seems to be what the OP asked for thus that&apos;s OK, but it&apos; not a universal solution for every kind of object.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/19966/bart&quot; title=&quot;7,454 reputation&quot; class=&quot;comment-user&quot;&gt;bart&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment116654262_62750627&quot;&gt;&lt;span title=&quot;2021-01-31 12:34:17Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 31, 2021 at 12:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The spread operator and Object.assign fail for objects with a hierarchy, ie. nested objects. JSON.parse/stringify works, but as mentioned does not copy methods.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1617161/icode&quot; title=&quot;1,152 reputation&quot; class=&quot;comment-user&quot;&gt;iCode&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118244028_62750627&quot;&gt;&lt;span title=&quot;2021-03-31 17:40:15Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 31, 2021 at 17:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why don&apos;t functions belong to JSON? I&apos;ve seen them transfered as JSON more then once...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/85140/the-drow&quot; title=&quot;17,905 reputation&quot; class=&quot;comment-user&quot;&gt;the_drow&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1516898_1646301&quot;&gt;&lt;span title=&quot;2009-10-29 20:37:17Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 29, 2009 at 20:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Functions are not part of the JSON spec becuase they are not a secure (or smart) way to transfer data, which is what JSON was made for.  I know the native JSON encoder in Firefox simply ignores functions passed to it, but I&apos;m not sure about the behavior of others.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/165116/kris-walker&quot; title=&quot;897 reputation&quot; class=&quot;comment-user&quot;&gt;Kris Walker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1519738_1646301&quot;&gt;&lt;span title=&quot;2009-10-30 10:27:00Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 30, 2009 at 10:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@mark: &lt;code&gt;{ &apos;foo&apos;: function() { return 1; } }&lt;/code&gt; is a literal-constructed object.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/908494/abarnert&quot; title=&quot;336,699 reputation&quot; class=&quot;comment-user&quot;&gt;abarnert&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15913326_1646301&quot;&gt;&lt;span title=&quot;2012-08-14 01:58:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 14, 2012 at 1:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@abarnert functions are not data. &quot;Function literals&quot; is a misnomer - since functions can contain arbitrary code, including assignments and all sort of &quot;non-serializable&quot; things.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/569050/deprecated&quot; title=&quot;5,052 reputation&quot; class=&quot;comment-user&quot;&gt;deprecated&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment23330684_1646301&quot;&gt;&lt;span title=&quot;2013-04-30 10:38:32Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 30, 2013 at 10:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This not working... it would work probably when x will be an array for instance x= [ &apos;ab&apos;,&apos;cd&apos;,...]&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/860099/kamil-kie%c5%82czewski&quot; title=&quot;72,493 reputation&quot; class=&quot;comment-user&quot;&gt;Kamil Kiełczewski&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment60831406_36603421&quot;&gt;&lt;span title=&quot;2016-04-14 08:23:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 14, 2016 at 8:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This works, but bear in mind this is a SHALLOW copy, therefore any deep references to others objects remain references!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1881978/bugs-bunny&quot; title=&quot;2,359 reputation&quot; class=&quot;comment-user&quot;&gt;Bugs Bunny&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment62079232_36603421&quot;&gt;&lt;span title=&quot;2016-05-17 13:01:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 17, 2016 at 13:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;A partial clone can also happen in this way: &lt;code&gt;const first = {a: &apos;foo&apos;, b: &apos;bar&apos;}; const second = {...{a} = first}&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1850851/cristian-tra%c3%acna&quot; title=&quot;8,436 reputation&quot; class=&quot;comment-user&quot;&gt;Cristian Traìna&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90609850_36603421&quot;&gt;&lt;span title=&quot;2018-08-13 17:37:39Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 13, 2018 at 17:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks for the hint that nested objects are still copied as a reference! I almost got crazy when debugging my code because I modified nested properties on the &quot;clone&quot; but the original got modified.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/451634/benny-neugebauer&quot; title=&quot;46,749 reputation&quot; class=&quot;comment-user&quot;&gt;Benny Neugebauer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94866221_51676288&quot;&gt;&lt;span title=&quot;2019-01-02 23:32:29Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 2, 2019 at 23:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is ES2016, not 2018, and this answer was given &lt;a href=&quot;https://stackoverflow.com/a/41183504/1269037&quot;&gt;two years earlier&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1269037/dan-dascalescu&quot; title=&quot;128,657 reputation&quot; class=&quot;comment-user&quot;&gt;Dan Dascalescu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment99757048_51676288&quot;&gt;&lt;span title=&quot;2019-06-13 23:37:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 13, 2019 at 23:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;so what if i want copy of nested property  as well&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2172547/sunil-garg&quot; title=&quot;12,816 reputation&quot; class=&quot;comment-user&quot;&gt;Sunil Garg&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102001912_51676288&quot;&gt;&lt;span title=&quot;2019-09-04 08:12:03Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 4, 2019 at 8:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@SunilGarg To copy nested property as well you can use   &lt;code&gt;const objDeepClone = JSON.parse(JSON.stringify(obj));&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2560946/pavan-garre&quot; title=&quot;2,501 reputation&quot; class=&quot;comment-user&quot;&gt;Pavan Garre&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102076617_51676288&quot;&gt;&lt;span title=&quot;2019-09-06 13:45:31Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 6, 2019 at 13:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is close, but doesn&apos;t work for any object. Try cloning a Date object with this. Not all properties are enumerable, so they will not all show up in the for/in loop.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/35881/a-levy&quot; title=&quot;27,106 reputation&quot; class=&quot;comment-user&quot;&gt;A. Levy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment540012_728395&quot;&gt;&lt;span title=&quot;2009-04-08 04:17:18Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 8, 2009 at 4:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Adding to the object prototype like this broke jQuery for me.  Even when I renamed to clone2.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/527464/ipaddeveloper2011&quot; title=&quot;4,432 reputation&quot; class=&quot;comment-user&quot;&gt;iPadDeveloper2011&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment16257646_728395&quot;&gt;&lt;span title=&quot;2012-08-27 23:19:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 27, 2012 at 23:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@iPadDeveloper2011 The code above had a bug in it where it created a global variable called &apos;i&apos; &apos;(for i in this)&apos;, rather than &apos;(for var i in this)&apos;. I have enough karma to edit and it and fix it so I did.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/123671/mikemaccana&quot; title=&quot;95,966 reputation&quot; class=&quot;comment-user&quot;&gt;mikemaccana&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment16898562_728395&quot;&gt;&lt;span title=&quot;2012-09-22 22:09:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 22, 2012 at 22:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Calvin: this should be created an a non-enumerable property, otherwise &apos;clone&apos; will appear in &apos;for&apos; loops.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/123671/mikemaccana&quot; title=&quot;95,966 reputation&quot; class=&quot;comment-user&quot;&gt;mikemaccana&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17099637_728395&quot;&gt;&lt;span title=&quot;2012-10-01 10:54:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 1, 2012 at 10:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;why isn&apos;t &lt;code&gt;var copiedObj = Object.create(obj);&lt;/code&gt; a great way as well?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1950768/dan-p&quot; title=&quot;1,649 reputation&quot; class=&quot;comment-user&quot;&gt;Dan P.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment35193032_728395&quot;&gt;&lt;span title=&quot;2014-04-12 20:16:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 12, 2014 at 20:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is a deep copy FYI.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1481489/zamnuts&quot; title=&quot;9,303 reputation&quot; class=&quot;comment-user&quot;&gt;zamnuts&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment40595171_25651922&quot;&gt;&lt;span title=&quot;2014-09-19 10:27:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 19, 2014 at 10:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer is pretty close, but not quite correct. If you try cloning a Date object, you will not get the same date because the call to the Date constructor function initializes the new Date with the current date/time. That value isn&apos;t enumerable and won&apos;t be copied by the for/in loop.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/35881/a-levy&quot; title=&quot;27,106 reputation&quot; class=&quot;comment-user&quot;&gt;A. Levy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment540022_728400&quot;&gt;&lt;span title=&quot;2009-04-08 04:21:44Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 8, 2009 at 4:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Not perfect, but nice for those basic cases. E.g. allowing simple cloning of an argument that can be a basic Object, Array or String.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/230571/james-womack&quot; title=&quot;9,760 reputation&quot; class=&quot;comment-user&quot;&gt;james_womack&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29322176_728400&quot;&gt;&lt;span title=&quot;2013-11-01 20:36:32Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 1, 2013 at 20:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Upvoted for correctly calling the constructor using &lt;code&gt;new&lt;/code&gt;. The accepted answer does not.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/25700/getfree&quot; title=&quot;37,174 reputation&quot; class=&quot;comment-user&quot;&gt;GetFree&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49698811_728400&quot;&gt;&lt;span title=&quot;2015-06-14 06:29:22Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 14, 2015 at 6:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;works on node everything else ! still left reference links&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/979474/user956584&quot; title=&quot;4,923 reputation&quot; class=&quot;comment-user&quot;&gt;user956584&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77217441_728400&quot;&gt;&lt;span title=&quot;2017-07-15 22:38:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 15, 2017 at 22:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The recursive thought is great.But If the value is array,it will work?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7628578/q10viking&quot; title=&quot;806 reputation&quot; class=&quot;comment-user&quot;&gt;Q10Viking&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105229759_728400&quot;&gt;&lt;span title=&quot;2019-12-30 11:32:18Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 30, 2019 at 11:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;Date.prototype.clone = function() {return new Date(+this)};&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/257182/robg&quot; title=&quot;135,390 reputation&quot; class=&quot;comment-user&quot;&gt;RobG&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42972840_9023088&quot;&gt;&lt;span title=&quot;2014-12-02 12:20:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2014 at 12:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;OMG it would be insane to reinvent cloning. This is the only sane answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/410023/dan-ross&quot; title=&quot;3,506 reputation&quot; class=&quot;comment-user&quot;&gt;Dan Ross&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27612769_13850856&quot;&gt;&lt;span title=&quot;2013-09-11 08:48:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 11, 2013 at 8:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I prefer &lt;code&gt;_.cloneDeep(x)&lt;/code&gt; as it essentially is the same thing as above, but reads better.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2989891/garbanzio&quot; title=&quot;826 reputation&quot; class=&quot;comment-user&quot;&gt;garbanzio&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment43535071_13850856&quot;&gt;&lt;span title=&quot;2014-12-18 19:40:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 18, 2014 at 19:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It does not deep clone the object.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5716739/august&quot; title=&quot;1,600 reputation&quot; class=&quot;comment-user&quot;&gt;August&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment75603763_43401028&quot;&gt;&lt;span title=&quot;2017-06-01 05:31:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 1, 2017 at 5:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;That&apos;s an assignment, not a copy.  clone.Title = &quot;just a clone&quot; means that obj.Title = &quot;just a clone&quot;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2430549/holdoffhunger&quot; title=&quot;15,848 reputation&quot; class=&quot;comment-user&quot;&gt;HoldOffHunger&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment78394752_43401028&quot;&gt;&lt;span title=&quot;2017-08-16 16:05:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 16, 2017 at 16:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@HoldOffHunger You are mistaken. Check it in your browser&apos;s JS console ( &lt;code&gt;let obj = {person: &apos;Thor Odinson&apos;}; let clone = Object.assign({}, obj); clone.title = &quot;Whazzup&quot;;&lt;/code&gt;)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/588916/collapsar&quot; title=&quot;16,481 reputation&quot; class=&quot;comment-user&quot;&gt;collapsar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment78957565_43401028&quot;&gt;&lt;span title=&quot;2017-09-01 11:00:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 1, 2017 at 11:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@collapsar: That is precisely what I checked, then console.log(person) will be &quot;Whazzup&quot;, not &quot;Thor Odinson&quot;.  See August&apos;s comment.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2430549/holdoffhunger&quot; title=&quot;15,848 reputation&quot; class=&quot;comment-user&quot;&gt;HoldOffHunger&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment78958987_43401028&quot;&gt;&lt;span title=&quot;2017-09-01 11:40:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 1, 2017 at 11:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@HoldOffHunger Does not happen in Chrome 60.0.3112.113 nor in Edge 14.14393; August&apos;s comment does not apply as the values of primitive types of &lt;code&gt;obj&lt;/code&gt;&apos;s properties are indeed cloned. Property values that are Objects themselves will not be cloned.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/588916/collapsar&quot; title=&quot;16,481 reputation&quot; class=&quot;comment-user&quot;&gt;collapsar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment78961607_43401028&quot;&gt;&lt;span title=&quot;2017-09-01 12:50:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 1, 2017 at 12:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Very nice - simple.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1001866/matt-h&quot; title=&quot;6,340 reputation&quot; class=&quot;comment-user&quot;&gt;Matt H&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment99209128_32245385&quot;&gt;&lt;span title=&quot;2019-05-24 19:16:47Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 24, 2019 at 19:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MattH: this answer was already given &lt;a href=&quot;https://stackoverflow.com/a/10869248/1269037&quot;&gt;in 2012&lt;/a&gt;. did you see it? Mohammed, did you check for existing answers before duplicating one of them?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1269037/dan-dascalescu&quot; title=&quot;128,657 reputation&quot; class=&quot;comment-user&quot;&gt;Dan Dascalescu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment99757073_32245385&quot;&gt;&lt;span title=&quot;2019-06-13 23:40:03Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 13, 2019 at 23:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;well thats one   way. ty never thought of that&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/334927/1-14x0r&quot; title=&quot;1,677 reputation&quot; class=&quot;comment-user&quot;&gt;1-14x0r&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment108112384_32245385&quot;&gt;&lt;span title=&quot;2020-04-08 21:53:12Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 8, 2020 at 21:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1 &lt;code&gt;Object.create(...)&lt;/code&gt; seems definitely the way to go.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/180275/ren%c3%a9-nyffenegger&quot; title=&quot;38,043 reputation&quot; class=&quot;comment-user&quot;&gt;René Nyffenegger&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment37915230_10766780&quot;&gt;&lt;span title=&quot;2014-06-30 14:49:24Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 30, 2014 at 14:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Perfect answer. Maybe you could add an explanation for &lt;code&gt;Object.hasOwnProperty&lt;/code&gt;? That way people know how to prevent searching the prototype link.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/791750/froginvasion&quot; title=&quot;833 reputation&quot; class=&quot;comment-user&quot;&gt;froginvasion&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39279307_10766780&quot;&gt;&lt;span title=&quot;2014-08-09 12:30:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 9, 2014 at 12:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Works well but what browsers does the polyfill work in?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1037953/ian-lunn&quot; title=&quot;1,313 reputation&quot; class=&quot;comment-user&quot;&gt;Ian Lunn&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41231117_10766780&quot;&gt;&lt;span title=&quot;2014-10-09 13:25:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 9, 2014 at 13:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is creating obj2 with a obj1 as it&apos;s prototype.  It only works because you are shadowing the &lt;code&gt;text&lt;/code&gt; member in obj2.  You are not making a copy, just deferring to the prototype chain when a member is not found on obj2.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1027966/nick-desaulniers&quot; title=&quot;1,965 reputation&quot; class=&quot;comment-user&quot;&gt;Nick Desaulniers&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41965771_10766780&quot;&gt;&lt;span title=&quot;2014-10-31 21:25:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 31, 2014 at 21:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This does NOT create it &quot;without references&quot;, it just moves the reference to the prototype. It&apos;s still a reference. If a property changes in the original so will the prototype property in the &quot;clone&quot;. It&apos;s not a clone at all.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1293622/jimbo-jonny&quot; title=&quot;3,411 reputation&quot; class=&quot;comment-user&quot;&gt;Jimbo Jonny&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment61754295_10766780&quot;&gt;&lt;span title=&quot;2016-05-09 00:01:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 9, 2016 at 0:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How this is different from &lt;code&gt;let cloned = Object.assign({}, obj)&lt;/code&gt; ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/213871/ceztko&quot; title=&quot;14,183 reputation&quot; class=&quot;comment-user&quot;&gt;ceztko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment99093103_43935938&quot;&gt;&lt;span title=&quot;2019-05-21 11:25:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 21, 2019 at 11:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ceztko When &lt;code&gt;obj&lt;/code&gt; is a class instance, &lt;code&gt;Object.assign()&lt;/code&gt; does not clone e.g. class methods (because they are not enumerable).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/793476/flori&quot; title=&quot;12,390 reputation&quot; class=&quot;comment-user&quot;&gt;flori&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115880258_43935938&quot;&gt;&lt;span title=&quot;2021-01-02 19:58:14Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 2, 2021 at 19:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;it doesn&apos;t work when you have functions defined on objects&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1380304/petr-marek&quot; title=&quot;1,351 reputation&quot; class=&quot;comment-user&quot;&gt;Petr Marek&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment71288378_41183504&quot;&gt;&lt;span title=&quot;2017-02-05 22:06:54Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 5, 2017 at 22:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;as far as I see spread operator only works with iterables -   &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot; rel=&quot;nofollow noreferrer&quot;&gt;developer.mozilla.org&lt;/a&gt; says:   &lt;code&gt;var obj = {&apos;key1&apos;: &apos;value1&apos;};&lt;/code&gt;   &lt;code&gt;var array = [...obj]; // TypeError: obj is not iterable&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3479480/oleh&quot; title=&quot;322 reputation&quot; class=&quot;comment-user&quot;&gt;Oleh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment73475135_41183504&quot;&gt;&lt;span title=&quot;2017-04-04 08:12:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 4, 2017 at 8:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 8 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Oleh  so use  `  {... obj} instead of  [...obj];`&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2837359/manikant-gautam&quot; title=&quot;3,323 reputation&quot; class=&quot;comment-user&quot;&gt;manikant gautam&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment82252758_41183504&quot;&gt;&lt;span title=&quot;2017-12-05 06:17:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 5, 2017 at 6:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@manikantgautam I was using Object.assign() before, but now indeed object spread syntax is supported in latest Chrome, Firefox (still not in Edge and Safari). Its ECMAScript proposal... but Babel does support it as far as I can see, so probably its safe to use.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3479480/oleh&quot; title=&quot;322 reputation&quot; class=&quot;comment-user&quot;&gt;Oleh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment82314015_41183504&quot;&gt;&lt;span title=&quot;2017-12-06 15:11:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 6, 2017 at 15:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Although if I am permitted to import lodash, I prefer using lodash &lt;code&gt;cloneDeep&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3632857/conductedclever&quot; title=&quot;3,945 reputation&quot; class=&quot;comment-user&quot;&gt;ConductedClever&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95162518_54157459&quot;&gt;&lt;span title=&quot;2019-01-13 06:01:47Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 13, 2019 at 6:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;m using JSON.parse(JSON.stringify(source)). Always working.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/611206/misha&quot; title=&quot;5,090 reputation&quot; class=&quot;comment-user&quot;&gt;Misha&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment96436204_54157459&quot;&gt;&lt;span title=&quot;2019-02-22 15:50:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 22, 2019 at 15:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Misha, this way you will miss the functions. The term &apos;works&apos; has many meanings.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3632857/conductedclever&quot; title=&quot;3,945 reputation&quot; class=&quot;comment-user&quot;&gt;ConductedClever&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment96451224_54157459&quot;&gt;&lt;span title=&quot;2019-02-23 05:26:59Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 23, 2019 at 5:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;And keep in mind that, the way I have mentioned, only the functions of the first layer will be copied. So If we have some objects inside each other, then the only way is to copy field by field recursively.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3632857/conductedclever&quot; title=&quot;3,945 reputation&quot; class=&quot;comment-user&quot;&gt;ConductedClever&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment96451245_54157459&quot;&gt;&lt;span title=&quot;2019-02-23 05:29:43Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 23, 2019 at 5:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;pretty clever... any downsides to this approach?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7696250/aleks&quot; title=&quot;679 reputation&quot; class=&quot;comment-user&quot;&gt;Aleks &lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment100775968_56217093&quot;&gt;&lt;span title=&quot;2019-07-21 01:56:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 21, 2019 at 1:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1 for giving an idea in what form it might become builtin, eventuallyeven if unusable right now.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/239657/beni-cherniavsky-paskin&quot; title=&quot;8,946 reputation&quot; class=&quot;comment-user&quot;&gt;Beni Cherniavsky-Paskin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31755160_18167052&quot;&gt;&lt;span title=&quot;2014-01-14 06:14:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 14, 2014 at 6:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Since &lt;code&gt;Symbol(&quot;a&quot;) === Symbol(&quot;a&quot;)&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, shouldnt &lt;code&gt;clone(Symbol(&quot;a&quot;))&lt;/code&gt; use &lt;code&gt;Symbol(object.description)&lt;/code&gt; to create a new symbol? Or would this have too weird of an impact on well-known symbols?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4642212/sebastian-simon&quot; title=&quot;16,704 reputation&quot; class=&quot;comment-user&quot;&gt;Sebastian Simon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120761286_53737490&quot;&gt;&lt;span title=&quot;2021-07-10 15:39:57Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 10, 2021 at 15:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@SebastianSimon  Your consideration is very comprehensive! And your last sentence is &lt;b&gt;&lt;i&gt;more&lt;/i&gt; correct&lt;/b&gt;, e.g. &lt;code&gt;(new Map)[Symbol.iterator]&lt;/code&gt; vs &lt;code&gt;(new Map)[Symbol(Symbol.iterator.description)]&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4501837/ooo&quot; title=&quot;261 reputation&quot; class=&quot;comment-user&quot;&gt;ooo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127999257_53737490&quot;&gt;&lt;span title=&quot;2022-06-01 05:31:16Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 1 at 5:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":223,"title":"How do I correctly clone a JavaScript object?","content":"\n                \n&lt;p&gt;I have an object &lt;code&gt;x&lt;/code&gt;. I&apos;d like to copy it as object &lt;code&gt;y&lt;/code&gt;, such that changes to &lt;code&gt;y&lt;/code&gt; do not modify &lt;code&gt;x&lt;/code&gt;. I realized that copying objects derived from built-in JavaScript objects will result in extra, unwanted properties. This isn&apos;t a problem, since I&apos;m copying one of my own literal-constructed objects.&lt;/p&gt;\n\n&lt;p&gt;How do I correctly clone a JavaScript object?&lt;/p&gt;\n    ","slug":"how-do-i-correctly-clone-a-javascript-object-1657387325850","postType":"QUESTION","createdAt":"2022-07-09T17:22:05.000Z","updatedAt":"2022-07-09T17:22:05.000Z","tags":[{"id":1521,"name":"javascript-objects","slug":"javascript-objects","createdAt":"2022-07-09T17:22:05.000Z","updatedAt":"2022-07-09T17:22:05.000Z","Questions_Tags":{"questionId":223,"tagId":1521}}]}},"__N_SSG":true}