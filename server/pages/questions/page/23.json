{"pageProps":{"data":{"count":610,"rows":[{"id":500,"title":"What do 'lazy' and 'greedy' mean in the context of regular expressions?","slug":"what-do-'lazy'-and-'greedy'-mean-in-the-context-of-regular-expressions-1657388200552","postType":"QUESTION","createdAt":"2022-07-09T17:36:40.000Z","updatedAt":"2022-07-09T17:36:40.000Z","tags":[{"id":2495,"name":"regex-greedy","slug":"regex-greedy","createdAt":"2022-07-09T17:36:40.000Z","updatedAt":"2022-07-09T17:36:40.000Z","Questions_Tags":{"questionId":500,"tagId":2495}},{"id":2497,"name":"non-greedy","slug":"non-greedy","createdAt":"2022-07-09T17:36:40.000Z","updatedAt":"2022-07-09T17:36:40.000Z","Questions_Tags":{"questionId":500,"tagId":2497}}]},{"id":499,"title":"Difference between sh and Bash","slug":"difference-between-sh-and-bash-1657388197713","postType":"QUESTION","createdAt":"2022-07-09T17:36:37.000Z","updatedAt":"2022-07-09T17:36:37.000Z","tags":[]},{"id":498,"title":"Safely turning a JSON string into an object","slug":"safely-turning-a-json-string-into-an-object-1657388194824","postType":"QUESTION","createdAt":"2022-07-09T17:36:34.000Z","updatedAt":"2022-07-09T17:36:34.000Z","tags":[]},{"id":497,"title":"addEventListener vs onclick","slug":"addeventlistener-vs-onclick-1657388191429","postType":"QUESTION","createdAt":"2022-07-09T17:36:31.000Z","updatedAt":"2022-07-09T17:36:31.000Z","tags":[{"id":2486,"name":"onclick","slug":"onclick","createdAt":"2022-07-09T17:36:31.000Z","updatedAt":"2022-07-09T17:36:31.000Z","Questions_Tags":{"questionId":497,"tagId":2486}},{"id":2487,"name":"addeventlistener","slug":"addeventlistener","createdAt":"2022-07-09T17:36:31.000Z","updatedAt":"2022-07-09T17:36:31.000Z","Questions_Tags":{"questionId":497,"tagId":2487}}]},{"id":496,"title":"How do I give text or an image a transparent background using CSS?","slug":"how-do-i-give-text-or-an-image-a-transparent-background-using-css-1657388188508","postType":"QUESTION","createdAt":"2022-07-09T17:36:28.000Z","updatedAt":"2022-07-09T17:36:28.000Z","tags":[{"id":2484,"name":"opacity","slug":"opacity","createdAt":"2022-07-09T17:36:28.000Z","updatedAt":"2022-07-09T17:36:28.000Z","Questions_Tags":{"questionId":496,"tagId":2484}}]}]},"answers":{"496":["\n&lt;p&gt;Either use a semi-transparent &lt;a href=&quot;http://en.wikipedia.org/wiki/Portable_Network_Graphics&quot; rel=&quot;noreferrer&quot;&gt;PNG&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&quot; rel=&quot;noreferrer&quot;&gt;SVG&lt;/a&gt; image or use CSS:&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here&apos;s an article from css3.info, &lt;em&gt;&lt;a href=&quot;http://www.css3.info/opacity_rgba_and_compromise&quot; rel=&quot;noreferrer&quot;&gt;Opacity, RGBA and compromise&lt;/a&gt;&lt;/em&gt; (2007-06-03).&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;background-color: rgba(255, 0, 0, 0.5);&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, World!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In Firefox 3 and Safari 3, you can use RGBA like &lt;a href=&quot;https://stackoverflow.com/questions/806000/css-semi-transparent-background-but-not-text/806189#806189&quot;&gt;Georg Sch√∂lly mentioned&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;A little known trick is that you can use it in Internet&amp;nbsp;Explorer as well using the gradient filter.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;);\n&lt;span class=&quot;hljs-attribute&quot;&gt;filter&lt;/span&gt;: progid:DXImageTransform.Microsoft.&lt;span class=&quot;hljs-built_in&quot;&gt;Gradient&lt;/span&gt;(GradientType=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, StartColorStr=&lt;span class=&quot;hljs-string&quot;&gt;&apos;#7F00FF00&apos;&lt;/span&gt;, EndColorStr=&lt;span class=&quot;hljs-string&quot;&gt;&apos;#7F00FF00&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The first hex number defines the alpha value of the color.&lt;/p&gt;\n\n&lt;p&gt;Full solution all browsers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.alpha60&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* Fallback for web browsers that doesn&apos;t support RGBa */&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgb&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) transparent;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* RGBa with 0.6 opacity */&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.6&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* For IE 5.5 - 7*/&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;filter&lt;/span&gt;:progid:DXImageTransform.Microsoft.&lt;span class=&quot;hljs-built_in&quot;&gt;gradient&lt;/span&gt;(startColorstr=&lt;span class=&quot;hljs-number&quot;&gt;#99000000&lt;/span&gt;, endColorstr=&lt;span class=&quot;hljs-number&quot;&gt;#99000000&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* For IE 8*/&lt;/span&gt;\n    -ms-&lt;span class=&quot;hljs-attribute&quot;&gt;filter&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is from &lt;em&gt;&lt;a href=&quot;http://robertnyman.com/2010/01/11/css-background-transparency-without-affecting-child-elements-through-rgba-and-filters/&quot; rel=&quot;noreferrer&quot;&gt;CSS background transparency without affecting child elements, through RGBa and filters&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Screenshots proof of results:&lt;/h2&gt;\n\n&lt;p&gt;This is when using the following code:\n     \n     &lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;IE=edge&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;An XHTML 1.0 Strict standard template&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html;charset=utf-8&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;all&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-css&quot;&gt;\n         &lt;span class=&quot;hljs-selector-class&quot;&gt;.transparent-background-with-text-and-images-on-top&lt;/span&gt; {\n             &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgb&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) transparent;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Fallback for web browsers that doesn&apos;t support RGBa */&lt;/span&gt;\n            &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.6&lt;/span&gt;);   &lt;span class=&quot;hljs-comment&quot;&gt;/* RGBa with 0.6 opacity */&lt;/span&gt;\n             &lt;span class=&quot;hljs-attribute&quot;&gt;filter&lt;/span&gt;:progid:DXImageTransform.Microsoft.&lt;span class=&quot;hljs-built_in&quot;&gt;gradient&lt;/span&gt;(startColorstr=&lt;span class=&quot;hljs-number&quot;&gt;#99000000&lt;/span&gt;, endColorstr=&lt;span class=&quot;hljs-number&quot;&gt;#99000000&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;/* For IE 5.5 - 7*/&lt;/span&gt;\n            -ms-&lt;span class=&quot;hljs-attribute&quot;&gt;filter&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)&quot;&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;/* For IE 8*/&lt;/span&gt;\n         }\n     &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;transparent-background-with-text-and-images-on-top&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n         &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Here some content (text AND images) &quot;on top of the transparent background&quot;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://i.imgur.com/LnnghmF.gif&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/BgkgK.png&quot; alt=&quot;Chrome-33&quot;&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/KsGgH.png&quot; alt=&quot;IE11&quot;&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/6Zscy.png&quot; alt=&quot;IE9&quot;&gt;\n&lt;img src=&quot;https://i.imgur.com/EyiPD0M.png&quot; alt=&quot;IE8&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is the best solution I could come up with, NOT using CSS 3. And it works great on Firefox, Chrome, and Internet Explorer as far as I can see.&lt;/p&gt;\n\n&lt;p&gt;Put a container &lt;code&gt;div&lt;/code&gt; and two children &lt;code&gt;div&lt;/code&gt;s at the same level, one for content, one for the background.\nAnd using CSS, auto-size the background to fit the content and put the background actually in the back using z-index.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.content&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: White;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.background&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: Black;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-comment&quot;&gt;/* These three lines are for transparency in all browsers. */&lt;/span&gt;\n  -ms-&lt;span class=&quot;hljs-attribute&quot;&gt;filter&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=50)&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;filter&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;alpha&lt;/span&gt;(opacity=&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;opacity&lt;/span&gt;: .&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    Here is the content.\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;Background should grow to fit.\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;background&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For a simple semi-transparent background color, the above solutions (CSS3 or bg images) are the best options. However, if you want to do something fancier (e.g. animation, multiple backgrounds, etc.), or if you don&apos;t want to rely on CSS3, you can try the pane technique:&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.pane&lt;/span&gt;, &lt;span class=&quot;hljs-selector-class&quot;&gt;.pane&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.back&lt;/span&gt;, &lt;span class=&quot;hljs-selector-class&quot;&gt;.pane&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.cont&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block; }\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.pane&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.pane&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.back&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: auto; &lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;: auto; &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: auto; &lt;span class=&quot;hljs-attribute&quot;&gt;right&lt;/span&gt;: auto;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.pane&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.cont&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;pane&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;back&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;background-color: green; opacity: 0.6;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cont&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;color: white;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello world&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The technique works by using two layers inside of the outer pane element:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;one (the back) that fits the size of the pane element without affecting the flow of content,&lt;/li&gt;\n&lt;li&gt;and one (the cont) that contains the content and helps determine the size of the pane.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The &lt;code&gt;position: relative&lt;/code&gt; on pane is important; it tells back layer to fit to the pane&apos;s size. (If you need the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag to be absolute, change the pane from a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; to a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; and wrap all that in a absolutely-position &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag.)&lt;/p&gt;\n&lt;p&gt;The main advantage this technique has over similar ones listed above is that the pane doesn&apos;t have to be a specified size; as coded above, it will fit full-width (normal block-element layout) and only as high as the content. The outer pane element can be sized any way you please, as long as it&apos;s rectangular (i.e. inline-block will work; plain-old inline will not).&lt;/p&gt;\n&lt;p&gt;Also, it gives you a lot of freedom for the background; you&apos;re free to put really anything in the back element and have it not affect the flow of content (if you want multiple full-size sub-layers, just make sure they also have position: absolute, width/height: 100%, and top/bottom/left/right: auto).&lt;/p&gt;\n&lt;p&gt;One variation to allow background inset adjustment (via top/bottom/left/right) and/or background pinning (via removing one of the left/right or top/bottom pairs) is to use the following CSS instead:&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.pane&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.back&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: auto; &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: auto;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;right&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0px&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As written, this works in Firefox, Safari, Chrome, IE8+, and Opera, although IE7 and IE6 require extra CSS and expressions, IIRC, and last time I checked, the second CSS variation does not work in Opera.&lt;/p&gt;\n&lt;p&gt;Things to watch out for:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Floating elements inside of the cont layer will not be contained. You&apos;ll need to make sure they are cleared or otherwise contained, or they&apos;ll slip out of the bottom.&lt;/li&gt;\n&lt;li&gt;Margins go on the pane element and padding goes on the cont element. Don&apos;t do use the opposite (margins on the cont or padding on the pane) or you&apos;ll discover oddities such as the page always being slightly wider than the browser window.&lt;/li&gt;\n&lt;li&gt;As mentioned, the whole thing needs to be block or inline-block. Feel free to use &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s instead of &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s to simplify your CSS.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;A fuller demo, showing off the flexibility of this technique by using it in tandem with &lt;code&gt;display: inline-block&lt;/code&gt;, and with both &lt;code&gt;auto&lt;/code&gt; &amp;amp; specific &lt;code&gt;width&lt;/code&gt;s/&lt;code&gt;min-height&lt;/code&gt;s:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.pane&lt;/span&gt;, &lt;span class=&quot;hljs-selector-class&quot;&gt;.pane&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.back&lt;/span&gt;, &lt;span class=&quot;hljs-selector-class&quot;&gt;.pane&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.cont&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block; }\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.pane&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;175px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8px&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.pane&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.back&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute; &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: auto; &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: auto;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;right&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8px&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.pane&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.cont&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative; &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.debug_red&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;); &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.75&lt;/span&gt;); }\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.debug_green&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;); &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.75&lt;/span&gt;); }\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.debug_blue&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;); &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.75&lt;/span&gt;); }&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;pane debug_blue&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;float: left;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;back debug_green&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cont debug_red&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        Pane content.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n        Pane content.\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;pane debug_blue&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;float: left;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;back debug_green&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cont debug_red&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        Pane content.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n        Pane content.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n        Pane content.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n        Pane content.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n        Pane content.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n        Pane content.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n        Pane content.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n        Pane content.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n        Pane content.\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;pane debug_blue&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;float: left; display: inline-block; width: auto;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;back debug_green&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cont debug_red&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        Pane content.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n        Pane content.\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;pane debug_blue&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;float: left; display: inline-block; width: auto; min-height: auto;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;back debug_green&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cont debug_red&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        Pane content.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n        Pane content.\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;And here&apos;s a &lt;a href=&quot;http://christmas-card-2009.slippyd.com/?f=s&amp;amp;n=RXhhbXBsZSBmb3IgdGhlIFN0YWNrIE92ZXJmbG93IENvbW11bml0eQ%3D%3D%0A&amp;amp;sn=T3ZlcmZsb3dpYW5z%0A&quot; rel=&quot;nofollow noreferrer&quot;&gt;live demo&lt;/a&gt; of the technique being used extensively:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://christmas-card-2009.slippyd.com/?f=s&amp;amp;n=RXhhbXBsZSBmb3IgdGhlIFN0YWNrIE92ZXJmbG93IENvbW11bml0eQ%3D%3D%0A&amp;amp;sn=T3ZlcmZsb3dpYW5z%0A&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/BoDSo.png&quot; alt=&quot;christmas-card-2009.slippyd.com screenshot&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;There is a trick to minimize the markup: Use a &lt;strong&gt;pseudo element&lt;/strong&gt; as the background and you can set the opacity to it without affecting the main element and its children:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://jsfiddle.net/webtiki/7uw3sa7s/&quot; rel=&quot;noreferrer&quot;&gt;DEMO&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/8lK67.jpg&quot; alt=&quot;Background opacity with a pseudo element&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Relevant code:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#fff&lt;/span&gt;;\n  -ms-&lt;span class=&quot;hljs-attribute&quot;&gt;filter&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=50)&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;opacity&lt;/span&gt;: .&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;/*** The following is just for demo styles  ***/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://i.imgur.com/k8BtMvj.jpg&apos;&lt;/span&gt;) no-repeat;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-size&lt;/span&gt;: cover;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1em&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10%&lt;/span&gt; auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-family&lt;/span&gt;: arial, serif;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#000&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;img&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;max-width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;90%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: .&lt;span class=&quot;hljs-number&quot;&gt;6em&lt;/span&gt; auto;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed a ligula ut nunc dignissim molestie.\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://i.imgur.com/hPLqUtN.jpg&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Browser support is &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_8&quot; rel=&quot;noreferrer&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;8&lt;/a&gt; and later.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://caniuse.com/#feat=css-gencontent&quot; rel=&quot;noreferrer&quot;&gt;pseudo elements&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://caniuse.com/#feat=css-opacity&quot; rel=&quot;noreferrer&quot;&gt;opacity&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;It&apos;s better to use a semi-transparent &lt;code&gt;.png&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Just open &lt;a href=&quot;http://en.wikipedia.org/wiki/Adobe_Photoshop&quot; rel=&quot;noreferrer&quot;&gt;Photoshop&lt;/a&gt;, create a &lt;code&gt;2x2&lt;/code&gt; pixel image (&lt;a href=&quot;https://stackoverflow.com/questions/7764751/ie8-shows-gradient-instead-of-background-image/7765128#7765128&quot;&gt;picking &lt;code&gt;1x1&lt;/code&gt; can cause an Internet&amp;nbsp;Explorer bug!&lt;/a&gt;), fill it with a green color and set the opacity in &quot;Layers tab&quot; to 60%. Then save it and make it a background image:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;background: url(green.png);&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;any text&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It works cool, of course, except in lovely &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_6&quot; rel=&quot;noreferrer&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;6&lt;/a&gt;. There are better fixes available, but here&apos;s a quick hack:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt; {\n    _filter: &lt;span class=&quot;hljs-built_in&quot;&gt;expression&lt;/span&gt;((runtimeStyle.backgroundImage != &lt;span class=&quot;hljs-string&quot;&gt;&apos;none&apos;&lt;/span&gt;) ? runtimeStyle.filter = &lt;span class=&quot;hljs-string&quot;&gt;&apos;progid:DXImageTransform.Microsoft.AlphaImageLoader(src=&apos;&lt;/span&gt;+currentStyle.backgroundImage.&lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&quot;&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]+&lt;span class=&quot;hljs-string&quot;&gt;&apos;, sizingMethod=scale)&apos;&lt;/span&gt; : runtimeStyle.filter,runtimeStyle.backgroundImage = &lt;span class=&quot;hljs-string&quot;&gt;&apos;none&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This method allows you to have an image in the background and not only a solid color, and can be used to have transparency on other attributes such as borders. No transparent PNG images are required.&lt;/p&gt;\n\n&lt;p&gt;Use &lt;code&gt;:before&lt;/code&gt; (or &lt;code&gt;:after&lt;/code&gt;) in CSS and give them the opacity value to leave the element at its original opacity. Thus you can use :before to make a faux element and give it the transparent background (or borders) you want and move it behind the content you want to keep opaque with &lt;code&gt;z-index&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;An example (&lt;a href=&quot;http://jsfiddle.net/frozenkoi/6bTEX/&quot; rel=&quot;noreferrer&quot;&gt;fiddle&lt;/a&gt;) (note that the &lt;code&gt;DIV&lt;/code&gt; with class &lt;code&gt;dad&lt;/code&gt; is just to provide some context and contrast to the colors, this extra element is actually not needed, and the red rectangle is moved a bit down and to the right to leave visible the background behind the &lt;code&gt;fancyBg&lt;/code&gt; element):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dad&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;fancyBg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        Test text that should have solid text color lets see if we can manage it without extra elements\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;with this CSS:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.dad&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: lime; &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; double black; &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1ex&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2ex&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.5ex&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative; -k-&lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.fancyBg&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; dashed black; &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative; &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: white; &lt;span class=&quot;hljs-attribute&quot;&gt;font-weight&lt;/span&gt;: bold;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/*background: black;*/&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.fancyBg&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute; &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: red; &lt;span class=&quot;hljs-attribute&quot;&gt;opacity&lt;/span&gt;: .&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2ex&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;right&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;2ex&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;2ex&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2ex&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/*top: 0; right: 0; bottom: 0; left: 0;*/&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case &lt;code&gt;.fancyBg:before&lt;/code&gt; has the CSS properties you want to have with transparency (red background in this example, but can be an image or borders). It&apos;s positioned as absolute to move it behind &lt;code&gt;.fancyBg&lt;/code&gt; (use values of zero or whatever is more appropriate for your needs).&lt;/p&gt;\n    ","\n&lt;p&gt;The easiest method would be to use a semi-transparent background &lt;strong&gt;PNG image&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;p&gt;You can use JavaScript to make it work in &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_6&quot; rel=&quot;nofollow noreferrer&quot;&gt;Internet Explorer 6&lt;/a&gt; if you need to.&lt;/p&gt;\n\n&lt;p&gt;I use the method outlined in &lt;em&gt;&lt;a href=&quot;http://24ways.org/2007/supersleight-transparent-png-in-ie6&quot; rel=&quot;nofollow noreferrer&quot;&gt;Transparent PNGs in Internet Explorer 6&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Other than that, you could fake it using &lt;em&gt;two side-by-side sibling elements&lt;/em&gt; - make &lt;strong&gt;one semi-transparent&lt;/strong&gt;, then &lt;em&gt;absolutely position the other over the top&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Almost all these answers assume the designer wants a solid color background. If the designer actually wants a photo as the background the only real solution at the moment is JavaScript like the jQuery Transify plugin &lt;a href=&quot;https://stackoverflow.com/questions/806000/css-semi-transparent-background-but-not-text/4015240#4015240&quot;&gt;mentioned elsewhere&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;What we need to do is join the CSS working group discussion and make them give us a background-opacity attribute! It should work hand in hand with the multiple-backgrounds feature.&lt;/p&gt;\n    ","\n&lt;p&gt;The problem is, that the text actually &lt;em&gt;has&lt;/em&gt; full opacity in your example. It has full opacity inside the &lt;code&gt;p&lt;/code&gt; tag, but the &lt;code&gt;p&lt;/code&gt; tag is just semi-transparent.&lt;/p&gt;\n\n&lt;p&gt;You could add an semi-transparent PNG background image instead of realizing it in CSS, or separate text and div into two elements and move the text over the box (for example, negative margin).&lt;/p&gt;\n\n&lt;p&gt;Otherwise it won&apos;t be possible.&lt;/p&gt;\n\n&lt;p&gt;Just like Chris mentioned: if you use a PNG file with transparency, you have to use a JavaScript workaround to make it work in the pesky Internet Explorer...&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s how I do this (it might not be optimal, but it works):&lt;/p&gt;\n\n&lt;p&gt;Create the &lt;code&gt;div&lt;/code&gt; that you want to be semi-transparent. Give it a class/id. Leave it &lt;em&gt;empty&lt;/em&gt;, and close it. Give it a set height and width (say, 300 pixels by 300 pixels). Give it an opacity of 0.5 or whatever you like, and a background color.&lt;/p&gt;\n\n&lt;p&gt;Then, &lt;em&gt;directly below&lt;/em&gt; that div, create another div with a different class/id. Create a paragraph inside it, where you&apos;ll place your text. Give the &lt;code&gt;div&lt;/code&gt; position: relative, and top: &lt;code&gt;-295px&lt;/code&gt; (that&apos;s &lt;em&gt;negative&lt;/em&gt; 295 pixels). Give it a z-index of 2 for good measure, and make sure its opacity is 1. Style your paragraph as you like, but make sure the dimensions are less than that of the first &lt;code&gt;div&lt;/code&gt; so it doesn&apos;t overflow.&lt;/p&gt;\n\n&lt;p&gt;That&apos;s it. Here&apos;s the code:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.trans&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: orange;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.trans2&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;295px&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.trans2&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;295px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: black;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-weight&lt;/span&gt;: bold;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;trans&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;trans2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      text text text\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;This works in Safari 2.x, but I don&apos;t know about Internet&amp;nbsp;Explorer.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are a &lt;a href=&quot;http://en.wikipedia.org/wiki/Adobe_Photoshop&quot; rel=&quot;noreferrer&quot;&gt;Photoshop&lt;/a&gt; guy, you can also use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt; #some-element {\n  background-color: hsla(170, 50%, 45%, 0.9); // **0.9 is the opacity range from 0 - 1**\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Or:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;#some-element {\n  background-color: rgba(170, 190, 45, 0.9); // **0.9 is the opacity range from 0 - 1**\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a jQuery plugin that will handle everything for you, Transify (&lt;em&gt;&lt;a href=&quot;http://jorenrapini.com/blog/css/transify-a-jquery-plugin-to-easily-apply-transparency-opacity-to-an-elements-background&quot; rel=&quot;nofollow noreferrer&quot;&gt;Transify - a jQuery plugin to easily apply transparency / opacity to an elements background&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;\n\n&lt;p&gt;I was running into this problem every now and then, so I decided to write something that would make life a lot easier. The script is less than 2&amp;nbsp;KB and it only requires one line of code to get it to work, and it will also handle animating the opacity of the background if you like.&lt;/p&gt;\n    ","\n&lt;p&gt;A while back, I wrote about this in &lt;a href=&quot;http://www.unintentionallyblank.co.uk/2007/05/07/cross-browser-background-transparency-with-css/&quot; rel=&quot;noreferrer&quot;&gt;Cross Browser Background Transparency With CSS&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;Bizarrely Internet Explorer 6 will allow you to make the background transparent and keep the text on top fully opaque. For the other browsers I then suggest using a transparent PNG file.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/637921/opacity-of-background-not-text&quot;&gt;Opacity of background, but not the text&lt;/a&gt;&lt;/em&gt; has some ideas. Either use a semi-transparent image, or overlay an additional element.&lt;/p&gt;\n    ","\n&lt;p&gt;CSS&amp;nbsp;3 has an easy solution of your problem. Use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;background-color:rgba(0, 255, 0, 0.5);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here, &lt;code&gt;rgba&lt;/code&gt; stands for red, green, blue, and alpha value. The green value is obtained because of 255 and half transparency is obtained by a 0.5 alpha value.&lt;/p&gt;\n    ","\n&lt;p&gt;In order to make the background of an element semi-transparent, but have the content (text &amp;amp; images) of the element opaque, you need to write CSS code for that image, and you have to add one attribute called &lt;code&gt;opacity&lt;/code&gt; with minimum value.&lt;/p&gt;\n\n&lt;p&gt;For example,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.image {\n   position: relative;\n   background-color: cyan;\n   opacity: 0.7;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;// The smaller the value, the more it will be transparent, ore the value less will be transparency.&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re using &lt;a href=&quot;https://en.wikipedia.org/wiki/Less_%28stylesheet_language%29&quot; rel=&quot;noreferrer&quot;&gt;Less&lt;/a&gt;, you can use &lt;code&gt;fade(color, 30%)&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;background-color: rgba(255, 0, 0, 0.5);&lt;/strong&gt; as mentioned above is the best answer simply put. To say use CSS&amp;nbsp;3, even in 2013, is not simple because the level of support from various browsers changes with every iteration.&lt;/p&gt;\n&lt;p&gt;While &lt;code&gt;background-color&lt;/code&gt; is supported by all major browsers (not new to CSS&amp;nbsp;3) [1] the alpha transparency can be tricky, especially with Internet Explorer prior to version 9 and with border color on Safari prior to version 5.1. [2]&lt;/p&gt;\n&lt;p&gt;Using something like &lt;a href=&quot;http://compass-style.org&quot; rel=&quot;noreferrer&quot;&gt;Compass&lt;/a&gt; or &lt;a href=&quot;http://sass-lang.com&quot; rel=&quot;noreferrer&quot;&gt;SASS&lt;/a&gt; can really help production and cross platform compatibility.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;[1] &lt;a href=&quot;http://www.w3schools.com/cssref/pr_background-color.asp&quot; rel=&quot;noreferrer&quot;&gt;W3Schools: CSS background-color Property&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;[2] &lt;a href=&quot;http://www.normansblog.de/demos/browser-support-checklist-css3/&quot; rel=&quot;noreferrer&quot;&gt;Norman&apos;s Blog: Browser Support Checklist CSS3 (October 2012)&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can solve this for &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_8&quot; rel=&quot;nofollow&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;8&lt;/a&gt; by (ab)using the gradient syntax. The color format is ARGB. If you are using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Sass_%28stylesheet_language%29&quot; rel=&quot;nofollow&quot;&gt;Sass&lt;/a&gt; preprocessor you can convert colors using the built-in function &quot;ie-hex-str()&quot;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;background: rgba(0,0,0, 0.5);\n-ms-filter: &quot;progid:DXImageTransform.Microsoft.gradient(startColorstr=&apos;#80000000&apos;, endColorstr=&apos;#80000000&apos;)&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;align&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;center&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;width:100%;height:100%;background:white;opacity:0.5;position:absolute;z-index:1001&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;search_img&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;margin-top:20%;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;../resources/images/loading_small.gif&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/x2ukko7u/&quot; rel=&quot;nofollow&quot;&gt;http://jsfiddle.net/x2ukko7u/&lt;/a&gt;?&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s an easier solution to put an overlay over an image on the same div. It&apos;s not the right use of this tool. But works like a charm to make that overlay using CSS.&lt;/p&gt;\n\n&lt;p&gt;Use an inset shadow like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;box-shadow: inset 0 0 0 1000px rgba(255, 255, 255, 0.9);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s all :)&lt;/p&gt;\n    ","\n&lt;p&gt;You can use the opacity value appended to the hexadecimal value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;background-color: #11ffeeaa;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;In this example &lt;code&gt;aa&lt;/code&gt; is the opacity. An opacity of &lt;code&gt;00&lt;/code&gt; means transparent and &lt;code&gt;ff&lt;/code&gt; means solid color.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The opacity is optional, so you can use the hexadecimal value as always:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;background-color: #11ffee;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also use the old way with &lt;code&gt;rgba()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;background-color: rgba(117, 190, 218, 0.5);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the &lt;code&gt;background&lt;/code&gt; shorthand if you want to make sure that the background has no other styles, like images or gradients:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;background: #11ffeeaa;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;From the Mozilla&apos;s specification (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/background-color&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/background-color&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;/* Keyword values */\nbackground-color: red;\nbackground-color: indigo;\n\n/* Hexadecimal value */\nbackground-color: #bbff00;    /* Fully opaque */\nbackground-color: #bf0;       /* Fully opaque shorthand */\nbackground-color: #11ffee00;  /* Fully transparent */\nbackground-color: #1fe0;      /* Fully transparent shorthand  */\nbackground-color: #11ffeeff;  /* Fully opaque */\nbackground-color: #1fef;      /* Fully opaque shorthand  */\n\n/* RGB value */\nbackground-color: rgb(255, 255, 128);        /* Fully opaque */\nbackground-color: rgba(117, 190, 218, 0.5);  /* 50% transparent */\n\n/* HSL value */\nbackground-color: hsl(50, 33%, 25%);         /* Fully opaque */\nbackground-color: hsla(50, 33%, 25%, 0.75);  /* 75% transparent */\n\n/* Special keyword values */\nbackground-color: currentcolor;\nbackground-color: transparent;\n\n/* Global values */\nbackground-color: inherit;\nbackground-color: initial;\nbackground-color: unset;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I normally use this class for my work. It&apos;s pretty good.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.transparent&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;filter&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;alpha&lt;/span&gt;(opacity=&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* Internet Explorer */&lt;/span&gt;\n  -khtml-&lt;span class=&quot;hljs-attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;;       &lt;span class=&quot;hljs-comment&quot;&gt;/* KHTML and old Safari */&lt;/span&gt;\n  -moz-&lt;span class=&quot;hljs-attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;;         &lt;span class=&quot;hljs-comment&quot;&gt;/* Firefox and Netscape */&lt;/span&gt;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;;              &lt;span class=&quot;hljs-comment&quot;&gt;/* Firefox, Safari, and Opera */&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It worked for me when using the format &lt;code&gt;#AARRGGBB&lt;/code&gt; so the one working for me was &lt;code&gt;#1C00ff00&lt;/code&gt;. Give it a try, because I have seen it working for some and not working for someone else. I am using it in CSS.&lt;/p&gt;\n    ","\n&lt;p&gt;Since a lot of people will arrive here wanting to know how to &lt;strong&gt;adjust the opacity of &lt;em&gt;any&lt;/em&gt; element&lt;/strong&gt; (not just backgrounds), it&apos;s as simple as adding &lt;code&gt;opacity: 0.2&lt;/code&gt; (or whatever number between 0 and 1 you desire) to that element&apos;s CSS.&lt;/p&gt;\n&lt;h3&gt;Example&lt;/h3&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.myclass&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#eb4746&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This can be used in backgrounds &lt;em&gt;&lt;strong&gt;and&lt;/strong&gt;&lt;/em&gt; in headers, paragraphs etc.&lt;/p&gt;\n    ","\n&lt;p&gt;I agree with all above answers and rgba is the way to go. In my case, I was provided with a hex background programmatically, so I will have to generate my own rgba based on the hex code. I created a modified version of &lt;a href=&quot;https://stackoverflow.com/a/5624139/227353&quot;&gt;Mr. Down&apos;s answer&lt;/a&gt; to convert hex to rgba&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;function hexToRgba(hex,alpha) {\n    // Expand shorthand form (e.g. &quot;03F&quot;) to full form (e.g. &quot;0033FF&quot;)\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function(m, r, g, b) {\n      return r + r + g + g + b + b;\n    });\n\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    if(result!=null){\n      const r = parseInt(result[1], 16);\n      const g = parseInt(result[2], 16);\n      const b = parseInt(result[3], 16);\n      //\n      return `rgba(${r},${g},${b},${alpha})`;\n\n    }\n    return null;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think this gives you desired output:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;div {\n  width: 200px;\n  height: 200px;\n  display: block;\n  position: relative;\n}\n\ndiv::after {\n  content: &quot;&quot;;\n  background: url(image.jpg);\n  opacity: 0.5;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  position: absolute;\n  z-index: -1;   \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This gives the desired result -&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;body {\n    background-image: url(&quot;\\images\\dark-cloud.jpg&quot;);\n    background-size: 100% 100%;\n    background-attachment: fixed;\n    opacity: .8;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Setting the opacity of the background.&lt;/p&gt;\n    "],"497":["\n&lt;p&gt;Both are correct, but none of them are &quot;best&quot; per se, and there may be a reason the developer chose to use both approaches.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Event Listeners (addEventListener and IE&apos;s attachEvent)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Earlier versions of Internet Explorer implement javascript differently from pretty much every other browser.  With versions less than 9, you use the &lt;code&gt;attachEvent&lt;/code&gt;[&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ie/ms536343%28v=vs.85%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;]  method, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;element.&lt;span class=&quot;hljs-title function_&quot;&gt;attachEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;onclick&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* do stuff here*/&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In most other browsers (including IE 9 and above), you use &lt;code&gt;addEventListener&lt;/code&gt;[&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;], like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;element.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* do stuff here*/&lt;/span&gt; }, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using this approach (&lt;a href=&quot;http://www.w3.org/wiki/Handling_events_with_JavaScript#The_evolution_of_events&quot; rel=&quot;noreferrer&quot;&gt;DOM Level 2 events&lt;/a&gt;), you can attach a theoretically unlimited number of events to any single element. The only practical limitation is client-side memory and other performance concerns, which are different for each browser.&lt;/p&gt;\n\n&lt;p&gt;The examples above represent using an anonymous function[&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;]. You can also add an event listener using a function reference[&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;] or a closure[&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;]:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myFunctionReference = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* do stuff here*/&lt;/span&gt; }\n\nelement.&lt;span class=&quot;hljs-title function_&quot;&gt;attachEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;onclick&apos;&lt;/span&gt;, myFunctionReference);\nelement.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, myFunctionReference , &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another important feature of &lt;code&gt;addEventListener&lt;/code&gt; is the final parameter, which controls how the listener reacts to bubbling events[&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-3-Events/#event-flow&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;]. I&apos;ve been passing false in the examples, which is standard for probably 95% of use cases. There is no equivalent argument for &lt;code&gt;attachEvent&lt;/code&gt;, or when using inline events.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Inline events (HTML onclick=&quot;&quot; property and element.onclick)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In all browsers that support javascript, you can put an event listener inline, meaning right in the HTML code.  You&apos;ve probably seen this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;a id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;testing&quot;&lt;/span&gt; href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt; onclick=&lt;span class=&quot;hljs-string&quot;&gt;&quot;alert(&apos;did stuff inline&apos;);&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Click&lt;/span&gt; me&amp;lt;/a&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Most experienced developers shun this method, but it does get the job done; it is simple and direct. You may not use closures or anonymous functions here (though the handler itself is an anonymous function of sorts), and your control of scope is limited.&lt;/p&gt;\n\n&lt;p&gt;The other method you mention:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;element.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/*do stuff here */&lt;/span&gt; };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... is the equivalent of inline javascript except that you have more control of the scope (since you&apos;re writing a script rather than HTML) and can use anonymous functions, function references, and/or closures.&lt;/p&gt;\n\n&lt;p&gt;The significant drawback with inline events is that unlike event listeners described above, you may only have one inline event assigned. Inline events are stored as an attribute/property of the element[&lt;a href=&quot;http://www.w3.org/wiki/HTML/Attributes/_Global#Event-handler_Attributes&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;], meaning that it can be overwritten.&lt;/p&gt;\n\n&lt;p&gt;Using the example &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; from the HTML above:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;testing&apos;&lt;/span&gt;);\nelement.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;did stuff #1&apos;&lt;/span&gt;); };\nelement.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;did stuff #2&apos;&lt;/span&gt;); };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... when you clicked the element, you&apos;d &lt;strong&gt;only&lt;/strong&gt; see &quot;Did stuff #2&quot; - you overwrote the first assigned of the &lt;code&gt;onclick&lt;/code&gt; property with the second value, and you overwrote the original inline HTML &lt;code&gt;onclick&lt;/code&gt; property too. Check it out here: &lt;a href=&quot;http://jsfiddle.net/jpgah/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/jpgah/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Broadly speaking, &lt;strong&gt;do not use inline events&lt;/strong&gt;. There may be specific use cases for it, but if you are not 100% sure you have that use case, then you do not and should not use inline events.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Modern Javascript (Angular and the like)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Since this answer was originally posted, javascript frameworks like Angular have become far more popular. You will see code like this in an Angular template:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;button (click)=&lt;span class=&quot;hljs-string&quot;&gt;&quot;doSomething()&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Something&lt;/span&gt;&amp;lt;/button&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This looks like an inline event, but it isn&apos;t. This type of template will be transpiled into more complex code which uses event listeners behind the scenes. Everything I&apos;ve written about events here still applies, but you are removed from the nitty gritty by at least one layer. You should understand the nuts and bolts, but if your modern JS framework best practices involve writing this kind of code in a template, don&apos;t feel like you&apos;re using an inline event -- you aren&apos;t.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Which is Best?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The question is a matter of browser compatibility and necessity. Do you need to attach more than one event to an element? Will you in the future? Odds are, you will. attachEvent and addEventListener are necessary. If not, an inline event may seem like they&apos;d do the trick, but you&apos;re much better served preparing for a future that, though it may seem unlikely, is predictable at least. There is a chance you&apos;ll have to move to JS-based event listeners, so you may as well just start there. Don&apos;t use inline events.&lt;/p&gt;\n\n&lt;p&gt;jQuery and other javascript frameworks encapsulate the different browser implementations of DOM level 2 events in generic models so you can write cross-browser compliant code without having to worry about IE&apos;s history as a rebel.  Same code with jQuery, all cross-browser and ready to rock:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(element).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* do stuff */&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Don&apos;t run out and get a framework just for this one thing, though. You can easily roll your own little utility to take care of the older browsers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addEvent&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element, evnt, funct&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (element.&lt;span class=&quot;hljs-property&quot;&gt;attachEvent&lt;/span&gt;)\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; element.&lt;span class=&quot;hljs-title function_&quot;&gt;attachEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;on&apos;&lt;/span&gt;+evnt, funct);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; element.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(evnt, funct, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// example&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;addEvent&lt;/span&gt;(\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myElement&apos;&lt;/span&gt;),\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hi!&apos;&lt;/span&gt;); }\n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Try it: &lt;a href=&quot;http://jsfiddle.net/bmArj/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/bmArj/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Taking all of that into consideration, unless the script you&apos;re looking at took the browser differences into account some other way (in code not shown in your question), the part using &lt;code&gt;addEventListener&lt;/code&gt; would not work in IE versions less than 9.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Documentation and Related Reading&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/wiki/HTML/Attributes/_Global#Event-handler_Attributes&quot; rel=&quot;noreferrer&quot;&gt;W3 HTML specification, element Event Handler Attributes&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener&quot; rel=&quot;noreferrer&quot;&gt;element.addEventListener on MDN&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ie/ms536343%28v=vs.85%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;element.attachEvent on MSDN&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://api.jquery.com/on/&quot; rel=&quot;noreferrer&quot;&gt;Jquery.on&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.quirksmode.org/js/introevents.html&quot; rel=&quot;noreferrer&quot;&gt;quirksmode blog &quot;Introduction to Events&quot;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/libraries/&quot; rel=&quot;noreferrer&quot;&gt;CDN-hosted javascript libraries at Google&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The difference you could see if you had another couple of functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; h = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;);\nh.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = doThing_1;\nh.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = doThing_2;\n\nh.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, doThing_3);\nh.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, doThing_4);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Functions 2, 3 and 4 work, but 1 does not.  This is because &lt;code&gt;addEventListener&lt;/code&gt; does not overwrite existing event handlers, whereas &lt;code&gt;onclick&lt;/code&gt; overrides any existing &lt;code&gt;onclick = fn&lt;/code&gt; event handlers.&lt;/p&gt;\n\n&lt;p&gt;The other significant difference, of course, is that &lt;code&gt;onclick&lt;/code&gt; will always work, whereas &lt;code&gt;addEventListener&lt;/code&gt; does not work in Internet Explorer before version 9. You can use the analogous &lt;code&gt;attachEvent&lt;/code&gt; (which has &lt;em&gt;slightly&lt;/em&gt; different syntax) in IE &amp;lt;9.&lt;/p&gt;\n    ","\n&lt;p&gt;In this answer I will describe the three methods of defining DOM event handlers.&lt;/p&gt;\n\n&lt;h1&gt;&lt;code&gt;element.addEventListener()&lt;/code&gt;&lt;/h1&gt;\n\n&lt;p&gt;Code example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;);\nelement.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt; =&amp;gt;&lt;/span&gt; event.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;(), &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//google.com&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Try clicking this link.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;element.addEventListener()&lt;/code&gt; has multiple advantages:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Allows you to register &lt;strong&gt;unlimited&lt;/strong&gt; events handlers and remove them with &lt;code&gt;element.removeEventListener()&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Has &lt;code&gt;useCapture&lt;/code&gt; parameter, which indicates whether you&apos;d like to handle event in its &lt;strong&gt;capturing or bubbling phase&lt;/strong&gt;. See: &lt;a href=&quot;https://stackoverflow.com/questions/7398290/unable-to-understand-usecapture-attribute-in-addeventlistener&quot;&gt;Unable to understand useCapture attribute in addEventListener&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Cares about &lt;strong&gt;semantics&lt;/strong&gt;. Basically, it makes registering event handlers more explicit. For a beginner, a function call makes it obvious that &lt;em&gt;something happens&lt;/em&gt;, whereas assigning event to some property of DOM element is at least not intuitive.&lt;/li&gt;\n&lt;li&gt;Allows you to &lt;strong&gt;separate document structure (HTML) and logic (JavaScript)&lt;/strong&gt;. In tiny web applications it may not seem to matter, but it &lt;em&gt;does&lt;/em&gt; matter with any bigger project. It&apos;s way much easier to maintain a project which separates structure and logic than a project which doesn&apos;t.&lt;/li&gt;\n&lt;li&gt;Eliminates confusion with correct event names. Due to using inline event listeners or assigning event listeners to &lt;code&gt;.onevent&lt;/code&gt; properties of DOM elements, lots of inexperienced JavaScript programmers thinks that the event name is for example &lt;code&gt;onclick&lt;/code&gt; or &lt;code&gt;onload&lt;/code&gt;. &lt;strong&gt;&lt;code&gt;on&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a part of event name&lt;/strong&gt;. Correct event names are &lt;code&gt;click&lt;/code&gt; and &lt;code&gt;load&lt;/code&gt;, and that&apos;s how event names are passed to &lt;code&gt;.addEventListener()&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Works in &lt;a href=&quot;http://caniuse.com/#feat=addeventlistener&quot; rel=&quot;noreferrer&quot;&gt;almost all browser&lt;/a&gt;. If you still have to support IE &amp;lt;= 8, you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Compatibility&quot; rel=&quot;noreferrer&quot;&gt;a polyfill from MDN&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;&lt;code&gt;element.onevent = function() {}&lt;/code&gt; (e.g. &lt;code&gt;onclick&lt;/code&gt;, &lt;code&gt;onload&lt;/code&gt;)&lt;/h1&gt;\n\n&lt;p&gt;Code example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;);\nelement.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt; =&amp;gt;&lt;/span&gt; event.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//google.com&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Try clicking this link.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;This was a way to register event handlers in DOM 0. It&apos;s now discouraged, because it:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Allows you to register &lt;strong&gt;only one&lt;/strong&gt; event handler. Also removing the assigned handler is not intuitive, because to remove event handler assigned using this method, you have to revert &lt;code&gt;onevent&lt;/code&gt; property back to its initial state (i.e. &lt;code&gt;null&lt;/code&gt;).&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t &lt;strong&gt;respond to errors&lt;/strong&gt; appropriately. For example, if you by mistake assign a string to &lt;code&gt;window.onload&lt;/code&gt;, for example: &lt;code&gt;window.onload = &quot;test&quot;;&lt;/code&gt;, it won&apos;t throw any errors. Your code wouldn&apos;t work and it would be really hard to find out why. &lt;code&gt;.addEventListener()&lt;/code&gt; however, would throw error (at least in Firefox): &lt;em&gt;TypeError: Argument 2 of EventTarget.addEventListener is not an object&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t provide a way to choose if you want to handle event in its capturing or bubbling phase.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Inline event handlers (&lt;code&gt;onevent&lt;/code&gt; HTML attribute)&lt;/h1&gt;\n\n&lt;p&gt;Code example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//google.com&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;event.preventDefault();&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Try clicking this link.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Similarly to &lt;code&gt;element.onevent&lt;/code&gt;, it&apos;s now discouraged. Besides the issues that &lt;code&gt;element.onevent&lt;/code&gt; has, it:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Is a &lt;strong&gt;potential security issue&lt;/strong&gt;, because it makes XSS much more harmful. Nowadays websites should send proper &lt;code&gt;Content-Security-Policy&lt;/code&gt; HTTP header to block inline scripts and allow external scripts only from trusted domains. See &lt;a href=&quot;https://stackoverflow.com/questions/30280370/how-does-content-security-policy-work&quot;&gt;How does Content Security Policy work?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t &lt;strong&gt;separate document structure and logic&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;If you generate your page with a server-side script, and for example you generate a hundred links, each with the same inline event handler, your code would be much longer than if the event handler was defined only once. That means the client would have to download more content, and in result your website would be slower.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;See also&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;EventTarget.addEventListener()&lt;/code&gt; documentation&lt;/a&gt; (MDN)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;EventTarget.removeEventListener()&lt;/code&gt; documentation&lt;/a&gt; (MDN)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.simonewebdesign.it/onclick-vs-addeventlistener/&quot; rel=&quot;noreferrer&quot;&gt;onclick vs addEventListener&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/questions/tagged/dom-events&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;dom-events&apos;&quot; rel=&quot;tag&quot;&gt;dom-events&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/tags/dom-events/info&quot;&gt;tag wiki&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;While &lt;code&gt;onclick&lt;/code&gt; works in all browsers, &lt;code&gt;addEventListener&lt;/code&gt; does not work in older versions of Internet Explorer, which uses &lt;code&gt;attachEvent&lt;/code&gt; instead.&lt;/p&gt;\n\n&lt;p&gt;The downside of &lt;code&gt;onclick&lt;/code&gt; is that there can only be one event handler, while the other two will fire all registered callbacks.&lt;/p&gt;\n    ","\n&lt;h2&gt;Summary:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;addEventListener&lt;/code&gt; can add multiple events, whereas with &lt;code&gt;onclick&lt;/code&gt; this cannot be done.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;onclick&lt;/code&gt; can be added as an &lt;code&gt;HTML&lt;/code&gt; attribute, whereas an &lt;code&gt;addEventListener&lt;/code&gt; can only be added within &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;addEventListener&lt;/code&gt; can take a third argument which can stop the event propagation.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Both can be used to handle events. However, &lt;code&gt;addEventListener&lt;/code&gt; should be the preferred choice since it can do everything &lt;code&gt;onclick&lt;/code&gt;  does and more. Don&apos;t use inline &lt;code&gt;onclick&lt;/code&gt; as HTML attributes as this mixes up the javascript and the HTML which is a bad practice. It makes the code less maintainable.&lt;/p&gt;\n    ","\n&lt;p&gt;As far as I know, the DOM &quot;load&quot; event still does only work very limited. That means it&apos;ll only fire for the &lt;code&gt;window object&lt;/code&gt;, &lt;code&gt;images&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements for instance. The same goes for the direct &lt;code&gt;onload&lt;/code&gt; assignment. There is no technical difference between those two. Probably &lt;code&gt;.onload =&lt;/code&gt; has a better cross-browser availabilty.&lt;/p&gt;\n\n&lt;p&gt;However, you cannot assign a &lt;code&gt;load event&lt;/code&gt; to a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element or whatnot.&lt;/p&gt;\n    ","\n&lt;p&gt;An element can have only &lt;strong&gt;one event handler&lt;/strong&gt; attached per event type, but can have &lt;strong&gt;multiple event listeners&lt;/strong&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;So, how does it look in action?&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Only the last event handler assigned gets run:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; button = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.btn&quot;&lt;/span&gt;)\nbutton.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);\n};\nbutton.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;How are you?&quot;&lt;/span&gt;);\n};\nbutton.&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;How are you?&quot; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;All event listeners will be triggered:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; button = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.btn&quot;&lt;/span&gt;)\nbutton.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);\n})\nbutton.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;How are you?&quot;&lt;/span&gt;);\n})\nbutton.&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;() \n&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Hello World&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;How are you?&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;IE Note: &lt;code&gt;attachEvent&lt;/code&gt; is no longer supported. Starting with IE 11, use &lt;code&gt;addEventListener&lt;/code&gt;: &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa741345(v=vs.85)&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;One detail hasn&apos;t been noted yet: modern desktop browsers consider different button presses to be &quot;clicks&quot; for &lt;code&gt;AddEventListener(&apos;click&apos;&lt;/code&gt; and &lt;code&gt;onclick&lt;/code&gt; by default.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;On Chrome 42 and IE11, both &lt;code&gt;onclick&lt;/code&gt; and &lt;code&gt;AddEventListener&lt;/code&gt; click fire on left and middle click.&lt;/li&gt;\n&lt;li&gt;On Firefox 38, &lt;code&gt;onclick&lt;/code&gt; fires &lt;em&gt;only&lt;/em&gt; on left click, but &lt;code&gt;AddEventListener&lt;/code&gt; click fires on left, middle &lt;em&gt;and&lt;/em&gt; right clicks.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Also, middle-click behavior is &lt;em&gt;very&lt;/em&gt; inconsistent across browsers when scroll cursors are involved:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;On Firefox, middle-click events always fire.&lt;/li&gt;\n&lt;li&gt;On Chrome, they won&apos;t fire if the middleclick opens or closes a scroll cursor.&lt;/li&gt;\n&lt;li&gt;On IE, they fire when scroll cursor closes, but not when it opens.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It is also worth noting that &quot;click&quot; events for any keyboard-selectable HTML element such as &lt;code&gt;input&lt;/code&gt; also fire on space or enter when the element is selected.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;element.onclick = function() { /* do stuff */ }&lt;/p&gt;\n&lt;p&gt;element.addEventListener(&apos;click&apos;, function(){ /* do stuff */ },false);&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;They apparently do the same thing: listen for the click event and execute a callback function. Nevertheless, theyre not equivalent. If you ever need to choose between the two, this could help you to figure out which one is the best for you.&lt;/p&gt;\n&lt;p&gt;The main difference is that &lt;strong&gt;onclick is just a property&lt;/strong&gt;, and like all object properties, if you write on more than once, it will be &lt;strong&gt;overwritten&lt;/strong&gt;. With &lt;strong&gt;addEventListener()&lt;/strong&gt; instead, we can simply &lt;strong&gt;bind an event handler&lt;/strong&gt; to the element, and we can call it each time we need it without being worried of any overwritten properties.\nExample is shown here,&lt;/p&gt;\n&lt;p&gt;Try it:  &lt;a href=&quot;https://jsfiddle.net/fjets5z4/5/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://jsfiddle.net/fjets5z4/5/&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;In first place I was tempted to keep using onclick, because its shorter and looks simpler and in fact it is. But I dont recommend using it anymore. Its just like using inline JavaScript. Using something like   thats inline JavaScript  is highly discouraged nowadays (inline CSS is discouraged too, but thats another topic).&lt;/p&gt;\n&lt;p&gt;However, the addEventListener() function, despite its the standard, just doesnt work in old browsers (Internet Explorer below version 9), and this is another big difference. If you need to support these ancient browsers, you should follow the onclick way. But you could also use jQuery (or one of its alternatives): it basically simplifies your work and reduces the differences between browsers, therefore can save you a lot of time.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clickEvent = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementByID&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;onclick-eg&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EventListener&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementByID&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;addEventListener-eg&quot;&lt;/span&gt;);\n\nclickEvent.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 is not called&quot;&lt;/span&gt;)\n}\nclickEvent.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 is not called, 2 is called&quot;&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;EventListener&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 is called&quot;&lt;/span&gt;)\n})\n&lt;span class=&quot;hljs-title class_&quot;&gt;EventListener&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2 is also called&quot;&lt;/span&gt;)\n})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Javascript tends to blend everything into objects and that can make it confusing. All into one is the JavaScript way.&lt;/p&gt;\n\n&lt;p&gt;Essentially onclick is a HTML attribute. Conversely addEventListener is a method on the DOM object representing a HTML element.&lt;/p&gt;\n\n&lt;p&gt;In JavaScript objects, a method is merely a property that has a function as a value and that works against the object it is attached to (using this for example).&lt;/p&gt;\n\n&lt;p&gt;In JavaScript as HTML element represented by DOM will have it&apos;s attributes mapped onto its properties.&lt;/p&gt;\n\n&lt;p&gt;This is where people get confused because JavaScript melds everything into a single container or namespace with no layer of indirection.&lt;/p&gt;\n\n&lt;p&gt;In a normal OO layout (which does at least merge the namespace of properties/methods) you would might have something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;domElement.&lt;span class=&quot;hljs-property&quot;&gt;addEventListener&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Object(Method)&lt;/span&gt;\ndomElement.&lt;span class=&quot;hljs-property&quot;&gt;attributes&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Object(Property(Object(Property(String))))&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are variations like it could use a getter/setter for onload or HashMap for attributes but ultimately that&apos;s how it would look. JavaScript eliminated that layer of indirection at the expect of knowing what&apos;s what among other things. It merged domElement and attributes together.&lt;/p&gt;\n\n&lt;p&gt;Barring compatibility you should as a best practice use addEventListener. As other answers talk about the differences in that regard rather than the fundamental programmatic differences I will forgo it. Essentially, in an ideal world you&apos;re really only meant to use on* from HTML but in an even more ideal world you shouldn&apos;t be doing anything like that from HTML.&lt;/p&gt;\n\n&lt;p&gt;Why is it dominant today? It&apos;s quicker to write, easier to learn and tends to just work.&lt;/p&gt;\n\n&lt;p&gt;The whole point of onload in HTML is to give access to the addEventListener method or functionality in the first place. By using it in JS you&apos;re going through HTML when you could be applying it directly.&lt;/p&gt;\n\n&lt;p&gt;Hypothetically you can make your own attributes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[myclick]&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i, v&lt;/span&gt;) {\n     v.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n         &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(v.&lt;span class=&quot;hljs-property&quot;&gt;myclick&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// eval($(v).attr(&apos;myclick&apos;));&lt;/span&gt;\n     });\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What JS does with is a bit different to that.&lt;/p&gt;\n\n&lt;p&gt;You can equate it to something like (for every element created):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;element.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; element.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(element.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt;);&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;:element.&lt;span class=&quot;hljs-title function_&quot;&gt;onclick&lt;/span&gt;();&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n     }\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The actual implementation details will likely differ with a range of subtle variations making the two slightly different in some cases but that&apos;s the gist of it.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s arguably a compatibility hack that you can pin a function to an on attribute since by default attributes are all strings.&lt;/p&gt;\n    ","\n&lt;p&gt;According to &lt;strong&gt;MDN&lt;/strong&gt;, the difference is as below: &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;addEventListener:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The EventTarget.addEventListener() method adds the specified\n  EventListener-compatible object to the list of event listeners for the\n  specified event type on the EventTarget on which it&apos;s called. The\n  event target may be an Element in a document, the Document itself, a\n  Window, or any other object that supports events (such as\n  XMLHttpRequest).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;onclick:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The onclick property returns the click event handler code on the\n  current element. When using the click event to trigger an action, also\n  consider adding this same action to the keydown event, to allow the\n  use of that same action by people who don&apos;t use a mouse or a touch\n  screen. Syntax element.onclick = functionRef; where functionRef is a\n  function - often a name of a function declared elsewhere or a function\n  expression. See &quot;JavaScript Guide:Functions&quot; for details.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;There is also a syntax difference in use as you see in the below codes:&lt;br&gt;&lt;br&gt;\n&lt;strong&gt;addEventListener:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Function to change the content of t2&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;modifyText&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t2 = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;t2&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (t2.&lt;span class=&quot;hljs-property&quot;&gt;firstChild&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;nodeValue&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;three&quot;&lt;/span&gt;) {\n    t2.&lt;span class=&quot;hljs-property&quot;&gt;firstChild&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;nodeValue&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;two&quot;&lt;/span&gt;;\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    t2.&lt;span class=&quot;hljs-property&quot;&gt;firstChild&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;nodeValue&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;three&quot;&lt;/span&gt;;\n  }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// add event listener to table&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; el = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;outside&quot;&lt;/span&gt;);\nel.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, modifyText, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;onclick:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;initElement&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;span class=&quot;hljs-doctag&quot;&gt;NOTE:&lt;/span&gt; showAlert(); or showAlert(param); will NOT work here.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Must be a reference to a function name, not a function call.&lt;/span&gt;\n    p.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = showAlert;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;showAlert&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;onclick Event detected!&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You should also consider EventDelegation for that!\nFor that reason I prefer the addEventListener and foremost using it carefully and consciously!&lt;/p&gt;\n&lt;p&gt;FACTS:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;EventListeners are heavy .... (memory allocation at the client side)&lt;/li&gt;\n&lt;li&gt;The Events propagate IN and then OUT again in relation to the DOM\ntree. Also known as trickling-in and bubbling-out , give it a read\nin case you don&apos;t know.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;So imagine an easy example:\na simple button INSIDE a div INSIDE body ...\nif you click on the button, an Event will ANYWAY\ntrickle in to BUTTON and then OUT again, like this:&lt;/p&gt;\n&lt;p&gt;window-document-div-button-div-document-window&lt;/p&gt;\n&lt;p&gt;In the browser background (lets say the software periphery of the JS engine) the browser can ONLY possibly react to a click, if it checks for each click done where it was targeted.&lt;/p&gt;\n&lt;p&gt;And to make sure that each possible event listener on the way is triggered, it kinda has to send the &quot;click event signal&quot; all the way from document level down into the element ... and back out again.\nThis behavior can then made use of by attaching EventListeners using e.g.:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;exampleID&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {doThis}, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;/&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Just note for reference that the true/false as the last argument of the addEventListener method controls the behavior in terms of when is the event recognized - when trickling in or when bubbling out.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;TRUE means, the event is recognized while trickling-in\nFALSE means, the event is recognized on its way bubbling out&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Implementing the following 2 helpful concepts also turns out much more intuitive using the above stated approach to handle:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;You can also use &lt;code&gt;event.stopPropagation()&lt;/code&gt; within the function\n(example ref. &quot;doThis&quot;) to prevents further propagation of the\ncurrent event in the capturing and bubbling phases. It does not,\nhowever, prevent any default behaviors from occurring; for instance,\nclicks on links are still processed.&lt;/li&gt;\n&lt;li&gt;If you want to stop those behaviors, you could use\n&lt;code&gt;event.preventDefault()&lt;/code&gt; within the function (example ref.\n&quot;doThis&quot;). With that you could for example tell the Browser that if\nthe event does not get explicitly handled, its default action should\nnot be taken as it normally would be.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;em&gt;Also just note here for reference again: the last argument of the addEventListener method (true/false) also controls at which phase (trickling-in TRUE or bubbling out FALSE) the eventual effect of &quot;.stopPropagation()&quot; kicks in.\nSo ... in case you apply an EventListener with flag TRUE to an element, and combine that with the .stopPropagation() method, the event would not even get through to potential inner children of the element&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;To wrap it up:\nIf you use the onClick variant in HTML ... there are 2 downsides for me:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;With addEventListener, you can attach multiple onClick-events to the same, respectively one single element, but thats not possible using onClick (at least thats what I strongly believe up to now, correct me if I am wrong).&lt;/li&gt;\n&lt;li&gt;Also the following aspect is truly remarkable here ... especially the code maintenance part (didn&apos;t elaborate on this so far):&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In regards to event delegation, it really boils down to this. If some\nother JavaScript code needs to respond to a click event, using\naddEventListener ensures you both can respond to it. If you both try\nusing onclick, then one stomps on the other. You both can&apos;t respond if\nyou want an onclick on the same element. &lt;code&gt;Furthermore, you want to keep your behavior as separate as you can from the HTML in case you need to change it later. It would suck to have 50 HTML files to update instead of one JavaScript file.&lt;/code&gt;\n(credit to Greg Burghardt, &lt;a href=&quot;https://stackoverflow.com/questions/30035205&quot;&gt;addEventListener vs onclick with regards to event delegation&lt;/a&gt; )&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ul&gt;\n&lt;li&gt;This is also known by the term &quot;Unobtrusive JavaScript&quot; ... give it a read!&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I guess Chris Baker pretty much summed it up in an excellent answer but I would like to add to that with addEventListener() you can also use options parameter which gives you more control over your events. For example - If you just want to run your event once then you can use { once: true } as an option parameter when adding your event to only call it once.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;greet&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n    }   \n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, greet, { &lt;span class=&quot;hljs-attr&quot;&gt;once&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; })\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The above function will only print &quot;Hello&quot; once.\nAlso, if you want to cleanup your events then there is also the option to removeEventListener(). Although there are advantages of using addEventListener() but you should still be careful if your targeting audience is using Internet Explorer then this method might not work in all situation. You can also read about addEventListener on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#why_use_addeventlistener&quot; rel=&quot;nofollow noreferrer&quot;&gt;MDN&lt;/a&gt;, they gave quite a good explanation on how to use them.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are not too worried about browser support, there is a way to rebind the &apos;this&apos; reference in the function called by the event. It will normally point to the element that generated the event when the function is executed, which is not always what you want. The tricky part is to at the same time be able to remove the very same event listener, as shown in this example: &lt;a href=&quot;http://jsfiddle.net/roenbaeck/vBYu3/&quot; rel=&quot;nofollow&quot;&gt;http://jsfiddle.net/roenbaeck/vBYu3/&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n    Testing that the function returned from bind is rereferenceable, \n    such that it can be added and removed as an event listener.\n*/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyImportantCalloutToYou&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;message, otherMessage&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the following is necessary as calling bind again does &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// not return the same function, so instead we replace the &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// original function with the one bound to this instance&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;swap&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;swap&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); \n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;div&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;swap&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-title class_&quot;&gt;MyImportantCalloutToYou&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;element&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;swap&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// now this function can be properly removed &lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;removeEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;swap&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);           \n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The code above works well in Chrome, and there&apos;s probably some shim around making &quot;bind&quot; compatible with other browsers.&lt;/p&gt;\n    ","\n&lt;p&gt;Using inline handlers is incompatible with &lt;a href=&quot;https://developer.chrome.com/extensions/contentSecurityPolicy&quot; rel=&quot;nofollow&quot;&gt;Content Security Policy&lt;/a&gt; so the &lt;code&gt;addEventListener&lt;/code&gt; approach is more secure from that point of view. Of course you can enable the inline handlers with &lt;code&gt;unsafe-inline&lt;/code&gt; but, as the name suggests, it&apos;s not safe as it brings back the whole hordes of JavaScript exploits that CSP prevents.&lt;/p&gt;\n    ","\n&lt;p&gt;It should also be possible to either extend the listener by prototyping it (if we have a reference to it and its not an anonymous function) -or make the &lt;code&gt;onclick&lt;/code&gt; call a call to a function library (a function calling other functions).&lt;/p&gt;\n&lt;p&gt;Like:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;elm.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = myFunctionList;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myFunctionList&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-title function_&quot;&gt;myFunc1&lt;/span&gt;();\n    &lt;span class=&quot;hljs-title function_&quot;&gt;myFunc2&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This means we never have to change the &lt;code&gt;onclick&lt;/code&gt; call just alter the function &lt;code&gt;myFunctionList()&lt;/code&gt; to do whatever we want, but this leaves us without control of bubbling/catching phases so should be avoided for newer browsers.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;addEventListener&lt;/code&gt; lets you set multiple handlers, but isn&apos;t supported in IE8 or lower.&lt;/p&gt;\n\n&lt;p&gt;IE does have &lt;code&gt;attachEvent&lt;/code&gt;, but it&apos;s not exactly the same.&lt;/p&gt;\n    ","\n&lt;p&gt;The context referenced by &lt;code&gt;&apos;this&apos;&lt;/code&gt; keyword in JavasSript is different.&lt;/p&gt;\n\n&lt;p&gt;look at the following code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;!&lt;span class=&quot;hljs-variable constant_&quot;&gt;DOCTYPE&lt;/span&gt; html&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;btnSubmit&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Submit&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;disable&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;disabled&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; btnSubmit = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;btnSubmit&apos;&lt;/span&gt;);\n        btnSubmit.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-title function_&quot;&gt;disable&lt;/span&gt;();\n        &lt;span class=&quot;hljs-comment&quot;&gt;//btnSubmit.addEventListener(&apos;click&apos;, disable, false);&lt;/span&gt;\n    &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What it does is really simple. when you click the button, the button will be disabled automatically.&lt;/p&gt;\n\n&lt;p&gt;First when you try to hook up the events in this way &lt;code&gt;button.onclick = function(),&lt;/code&gt;\nonclick event will be triggered by clicking the button, however, the button will not be disabled because there&apos;s no explicit binding between button.onclick and onclick event handler. If you debug see the &lt;code&gt;&apos;this&apos;&lt;/code&gt; object, you can see it refers to &lt;code&gt;&apos;window&apos;&lt;/code&gt; object.&lt;/p&gt;\n\n&lt;p&gt;Secondly, if you comment &lt;code&gt;btnSubmit.onclick = disable();&lt;/code&gt; and uncomment \n&lt;code&gt;//btnSubmit.addEventListener(&apos;click&apos;, disable, false);&lt;/code&gt; you can see that the button is disabled because with this way there&apos;s explicit binding between button.onclick event and onclick event handler. If you debug into disable function, you can see &lt;code&gt;&apos;this&apos;&lt;/code&gt; refers to the &lt;code&gt;button control&lt;/code&gt; rather than the &lt;code&gt;window&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This is something I don&apos;t like about JavaScript which is inconsistency.\nBtw, if you are using jQuery(&lt;code&gt;$(&apos;#btnSubmit&apos;).on(&apos;click&apos;, disable);&lt;/code&gt;), it uses explicit binding. &lt;/p&gt;\n    ","\n&lt;p&gt;onclick is basically an addEventListener that specifically performs a function when the element is clicked. So, useful when you have a button that does simple operations, like a calculator button. addEventlistener can be used for a multitude of things like performing an operation when DOM or all content is loaded, akin to window.onload but with more control. &lt;/p&gt;\n\n&lt;p&gt;Note, You can actually use more than one event with inline, or at least by using onclick by seperating each function with a semi-colon, like this.... &lt;/p&gt;\n\n&lt;p&gt;I wouldn&apos;t write a function with inline, as you could potentially have problems later and it would be messy imo. Just use it to call functions already done in your script file.&lt;/p&gt;\n\n&lt;p&gt;Which one you use I suppose would depend on what you want. addEventListener for complex operations and onclick for simple. I&apos;ve seen some projects not attach a specific one to elements and would instead implement a more global eventlistener that would determine if a tap was on a button and perform certain tasks depending on what was pressed. Imo that could potentially lead to problems I&apos;d think, and albeit small, probably, a resource waste if that eventlistener had to handle each and every click&lt;/p&gt;\n    ","\n&lt;p&gt;in my Visual Studio Code, addEventListener has &lt;strong&gt;Real Intellisense&lt;/strong&gt; on event&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/yAl6o.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/yAl6o.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;but onclick does not, only &lt;strong&gt;fake ones&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/YX47b.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/YX47b.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;queryselector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id or classname&apos;&lt;/span&gt;); \nelement.&lt;span class=&quot;hljs-title function_&quot;&gt;addeventlistiner&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; work\n})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;button onclick=&lt;span class=&quot;hljs-string&quot;&gt;&quot;click()&quot;&lt;/span&gt;&amp;gt;click&amp;lt;/click&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;`\nfunction click(){\n  do work\n};\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    "],"498":["\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;JSON.parse(jsonString)&lt;/code&gt;&lt;/a&gt; is a pure JavaScript approach so long as you can guarantee a reasonably modern browser.&lt;/p&gt;\n    ","\n&lt;p&gt;The jQuery method is now deprecated. Use this method instead:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; jsonObject = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(jsonString);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;em&gt;Original answer using deprecated jQuery functionality&lt;/em&gt;:&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re using jQuery just use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;jQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;parseJSON&lt;/span&gt;( jsonString );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s exactly what you&apos;re looking for (see the jQuery &lt;a href=&quot;http://api.jquery.com/jQuery.parseJSON/&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;This answer is for IE &amp;lt; 7, for modern browsers check Jonathan&apos;s answer above.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;This answer is outdated and &lt;a href=&quot;https://stackoverflow.com/a/5686237/542251&quot;&gt;Jonathan&apos;s answer above&lt;/a&gt; (&lt;code&gt;JSON.parse(jsonString)&lt;/code&gt;) is now the best answer&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://json.org/&quot; rel=&quot;noreferrer&quot;&gt;JSON.org&lt;/a&gt; has JSON parsers for many languages including four different ones for JavaScript.  I believe most people would consider &lt;a href=&quot;http://www.json.org/js.html&quot; rel=&quot;noreferrer&quot;&gt;json2.js&lt;/a&gt; their goto implementation.&lt;/p&gt;\n    ","\n&lt;p&gt;Use the simple code example in &quot;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ie/cc836466%28v=vs.94%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;JSON.parse()&lt;/a&gt;&quot;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsontext = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{&quot;firstname&quot;:&quot;Jesper&quot;,&quot;surname&quot;:&quot;Aaberg&quot;,&quot;phone&quot;:[&quot;555-0100&quot;,&quot;555-0120&quot;]}&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; contact = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(jsontext);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and reversing it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(arr);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This seems to be the issue:&lt;/p&gt;\n\n&lt;p&gt;An input that is received via Ajax websocket etc, and it will be in String format,  but you need to know if it is &lt;code&gt;JSON.parsable&lt;/code&gt;. The touble is, if you always run it through &lt;code&gt;JSON.parse&lt;/code&gt;, the program MAY continue &quot;successfully&quot; but you&apos;ll still see an error thrown in the console with the dreaded &lt;code&gt;&quot;Error: unexpected token &apos;x&apos;&quot;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  data = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(jqxhr.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (_error) {}\n\ndata || (data = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Server error, please retry&apos;&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m not sure about other ways to do it but here&apos;s how you do it in &lt;a href=&quot;http://www.prototypejs.org/learn/json&quot; rel=&quot;nofollow noreferrer&quot;&gt;Prototype (JSON tutorial)&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Ajax&lt;/span&gt;.&lt;span class=&quot;hljs-title class_&quot;&gt;Request&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/some_url&apos;&lt;/span&gt;, {\n  &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;get&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;requestHeaders&lt;/span&gt;: {&lt;span class=&quot;hljs-title class_&quot;&gt;Accept&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;application/json&apos;&lt;/span&gt;},\n  &lt;span class=&quot;hljs-attr&quot;&gt;onSuccess&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;transport&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; json = transport.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;.evalJSON(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n  }\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Calling &lt;code&gt;evalJSON()&lt;/code&gt; with true as the argument sanitizes the incoming string.&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re using &lt;a href=&quot;https://jquery.com/&quot; rel=&quot;noreferrer&quot;&gt;jQuery&lt;/a&gt;, you can also use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;getJSON&lt;/span&gt;(url, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) { });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you can do things like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;data.&lt;span class=&quot;hljs-property&quot;&gt;key1&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;something&lt;/span&gt;\ndata.&lt;span class=&quot;hljs-property&quot;&gt;key1&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;something_else&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;etc.&lt;/p&gt;\n    ","\n&lt;p&gt;Just for fun, here is a way using a function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; jsonObject = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;return &apos;&lt;/span&gt; + jsonFormatData))()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: url,\n  &lt;span class=&quot;hljs-attr&quot;&gt;dataType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;json&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: data,\n  &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: callback\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The callback is passed the returned data, which will be a JavaScript object or array as defined by the JSON structure and parsed using the &lt;code&gt;$.parseJSON()&lt;/code&gt; method.&lt;/p&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;JSON.parse&lt;/code&gt; is probably the best way.&lt;/p&gt;\n&lt;p&gt;Here&apos;s an example&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonRes = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{ &quot;students&quot; : [&apos;&lt;/span&gt; +\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;{ &quot;firstName&quot;:&quot;Michel&quot; , &quot;lastName&quot;:&quot;John&quot; ,&quot;age&quot;:18},&apos;&lt;/span&gt; +\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;{ &quot;firstName&quot;:&quot;Richard&quot; , &quot;lastName&quot;:&quot;Joe&quot;,&quot;age&quot;:20 },&apos;&lt;/span&gt; +\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;{ &quot;firstName&quot;:&quot;James&quot; , &quot;lastName&quot;:&quot;Henry&quot;,&quot;age&quot;:15 } ]}&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; studentObject = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(jsonRes);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try using the method with this Data object.  ex:&lt;code&gt;Data=&apos;{result:true,count:1}&lt;/code&gt;&apos;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;var obj=&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(e.&lt;span class=&quot;hljs-property&quot;&gt;message&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This method really helps in Nodejs when &lt;strong&gt;you are working with serial port programming&lt;/strong&gt; &lt;/p&gt;\n    ","\n&lt;p&gt;The easiest way using &lt;code&gt;parse()&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; response = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{&quot;result&quot;:true,&quot;count&quot;:1}&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JsonObject&lt;/span&gt;= &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(response);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you can get the values of the JSON elements, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myResponseResult = &lt;span class=&quot;hljs-title class_&quot;&gt;JsonObject&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;result&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myResponseCount = &lt;span class=&quot;hljs-title class_&quot;&gt;JsonObject&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using &lt;a href=&quot;http://jquery.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery&lt;/a&gt; as described in the &lt;a href=&quot;http://api.jquery.com/jQuery.parseJSON/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;jQuery.parseJSON()&lt;/code&gt;&lt;/a&gt; documentation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(jsonString);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I found a &quot;better&quot; way:&lt;/p&gt;\n\n&lt;p&gt;In CoffeeScript:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; data = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(jqxhr.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;)\ndata ||= { &lt;span class=&quot;hljs-attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Server error, please retry&apos;&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Javascript:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  data = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(jqxhr.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (_error) {}\n\ndata || (data = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Server error, please retry&apos;&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;JSON parsing is always a pain. If the input is not as expected it throws an error and crashes what you are doing. &lt;/p&gt;\n\n&lt;p&gt;You can use the following tiny function to safely parse your input. It always turns an object even if the input is not valid or is already an object which is better for most cases:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;safeParse&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;input, def&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Convert null to empty object&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!input) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; def || {};\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(input) === &lt;span class=&quot;hljs-string&quot;&gt;&apos;[object Object]&apos;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; input;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(input);\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; def || {};\n  }\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Parse the JSON string with &lt;code&gt;JSON.parse()&lt;/code&gt;, and the data becomes a JavaScript object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(jsonString)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here, JSON represents to process JSON dataset.&lt;/p&gt;\n\n&lt;p&gt;Imagine we received this text from a web server:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;{ &quot;name&quot;:&quot;John&quot;, &quot;age&quot;:30, &quot;city&quot;:&quot;New York&quot;}&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To parse into a JSON object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;{ &quot;name&quot;:&quot;John&quot;, &quot;age&quot;:30, &quot;city&quot;:&quot;New York&quot;}&apos;&lt;/span&gt;); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here &lt;code&gt;obj&lt;/code&gt; is the respective JSON object which looks like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{ &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;New York&quot;&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To fetch a value use the &lt;code&gt;.&lt;/code&gt; operator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// John&lt;/span&gt;\nobj.&lt;span class=&quot;hljs-property&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//30&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Convert a JavaScript object into a string with &lt;code&gt;JSON.stringify()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(jsonString);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;json.parse will change into object.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;JSON.parse()&lt;/code&gt; converts any JSON string passed into the function into a JSON object.&lt;/p&gt;\n\n&lt;p&gt;To understand it better, press &lt;kbd&gt;F12&lt;/kbd&gt; to open &quot;Inspect Element&quot; in your browser and go to the console to write the following commands:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; response = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{&quot;result&quot;:true,&quot;count&quot;:1}&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//sample json object(string form)&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(response); &lt;span class=&quot;hljs-comment&quot;&gt;//converts passed string to JSON Object.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now run the command:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(response));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You&apos;ll get output as an Object &lt;code&gt;{result: true, count: 1}&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In order to use that Object, you can assign it to the variable, maybe &lt;code&gt;obj&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(response);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By using &lt;code&gt;obj&lt;/code&gt; and the dot (&lt;code&gt;.&lt;/code&gt;) operator you can access properties of the JSON object.&lt;/p&gt;\n\n&lt;p&gt;Try to run the command:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj.&lt;span class=&quot;hljs-property&quot;&gt;result&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Official documentation&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;JSON.parse()&lt;/code&gt; method parses a JSON string, constructing the JavaScript value or object described by the string. An optional &lt;code&gt;reviver&lt;/code&gt; function can be provided to perform a transformation on the resulting object before it is returned.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(text[, reviver])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;text&lt;/code&gt;\n: The string to parse as JSON. See the JSON object for a description of JSON syntax.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;reviver (optional)&lt;/code&gt;\n: If a function, this prescribes how the value originally produced by parsing is transformed, before being returned.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Return value&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The Object corresponding to the given JSON text.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Exceptions&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Throws a SyntaxError exception if the string to parse is not valid JSON.&lt;/p&gt;\n    ","\n&lt;p&gt;Converting the object to JSON, and then parsing it, works for me, like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(object))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If we have a string like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;{\\&quot;status\\&quot;:1,\\&quot;token\\&quot;:\\&quot;65b4352b2dfc4957a09add0ce5714059\\&quot;}&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then we can simply use &lt;code&gt;JSON.parse&lt;/code&gt; twice to convert this string to a JSON object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sampleString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;{\\&quot;status\\&quot;:1,\\&quot;token\\&quot;:\\&quot;65b4352b2dfc4957a09add0ce5714059\\&quot;}&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonString= &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(sampleString)\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonObject= &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(jsonString)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And we can extract values from the JSON object using:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// instead of last JSON.parse:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; { status, token } = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(jsonString);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The result will be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;status = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; and token = 65b4352b2dfc4957a09add0ce5714059\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Performance&lt;/h1&gt;\n&lt;p&gt;There are already good answer for this question, but I was curious about performance and today 2020.09.21 I conduct tests on MacOs HighSierra 10.13.6 on Chrome v85, Safari v13.1.2 and Firefox v80 for chosen solutions.&lt;/p&gt;\n&lt;h2&gt;Results&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;eval/Function&lt;/code&gt; (A,B,C) approach is fast on Chrome (but for big-deep object N=1000 they crash: &quot;maximum stack call exceed)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;eval&lt;/code&gt; (A) is fast/medium fast on all browsers&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;JSON.parse&lt;/code&gt; (D,E) are fastest on Safari and Firefox&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Wzn1w.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Wzn1w.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;h2&gt;Details&lt;/h2&gt;\n&lt;p&gt;I perform 4 tests cases:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;for small shallow object &lt;a href=&quot;https://jsbench.me/ipkf9kvabu/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;HERE&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;for small deep object &lt;a href=&quot;https://jsbench.me/57kf9ldcel/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;HERE&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;for big shallow object &lt;a href=&quot;https://jsbench.me/5lkf9l9slg/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;HERE&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;for big deep object &lt;a href=&quot;https://jsbench.me/s6kf9lghxa/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;HERE&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Object used in above tests came from &lt;a href=&quot;https://stackoverflow.com/a/61523278/860099&quot;&gt;HERE&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj_ShallowSmall = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;field0&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;field1&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;field2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;field3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;field4&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;field5&lt;/span&gt;: [],\n  &lt;span class=&quot;hljs-attr&quot;&gt;field6&lt;/span&gt;: {},\n  &lt;span class=&quot;hljs-attr&quot;&gt;field7&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;text7&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;field8&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;text8&quot;&lt;/span&gt;,\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj_DeepSmall = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;level0&lt;/span&gt;: {\n   &lt;span class=&quot;hljs-attr&quot;&gt;level1&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;level2&lt;/span&gt;: {\n     &lt;span class=&quot;hljs-attr&quot;&gt;level3&lt;/span&gt;: {\n      &lt;span class=&quot;hljs-attr&quot;&gt;level4&lt;/span&gt;: {\n       &lt;span class=&quot;hljs-attr&quot;&gt;level5&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;level6&lt;/span&gt;: {\n         &lt;span class=&quot;hljs-attr&quot;&gt;level7&lt;/span&gt;: {\n          &lt;span class=&quot;hljs-attr&quot;&gt;level8&lt;/span&gt;: {\n           &lt;span class=&quot;hljs-attr&quot;&gt;level9&lt;/span&gt;: [[[[[[[[[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;]]]]]]]]]],\n  }}}}}}}}},\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj_ShallowBig = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,c,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (a[&lt;span class=&quot;hljs-string&quot;&gt;&apos;field&apos;&lt;/span&gt;+i]=&lt;span class=&quot;hljs-title function_&quot;&gt;getField&lt;/span&gt;(i),a) ,{});\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj_DeepBig = &lt;span class=&quot;hljs-title function_&quot;&gt;genDeepObject&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Show objects&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;obj_ShallowSmall:&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj_ShallowSmall));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;obj_DeepSmall:&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj_DeepSmall));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;obj_ShallowBig:&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj_ShallowBig));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;obj_DeepBig:&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj_DeepBig));\n\n\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// HELPERS&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ------------------&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getField&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;k&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i=k%&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; k;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {};  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i&amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt;+k;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;genDeepObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;N&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// generate: {level0:{level1:{...levelN: {end:[[[...N-times...[&apos;abc&apos;]...]]] }}}...}}}&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj={};\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; o=obj;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a=arr;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;N; i++) {\n    o[&lt;span class=&quot;hljs-string&quot;&gt;&apos;level&apos;&lt;/span&gt;+i]={};\n    o=o[&lt;span class=&quot;hljs-string&quot;&gt;&apos;level&apos;&lt;/span&gt;+i];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; aa=[];\n    a.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(aa);\n    a=aa;\n  }\n\n  a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]=&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;;\n  o[&lt;span class=&quot;hljs-string&quot;&gt;&apos;end&apos;&lt;/span&gt;]=arr;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Below snippet presents chosen solutions&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// src: https://stackoverflow.com/q/45015/860099&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;json&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(&quot;&lt;/span&gt; + json + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// https://stackoverflow.com/a/26377600/860099&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;B&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;json&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;return (&apos;&lt;/span&gt;+json+&lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;))()\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// improved https://stackoverflow.com/a/26377600/860099&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;C&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;json&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;return (&apos;&lt;/span&gt;+json+&lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;)()\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// src: https://stackoverflow.com/a/5686237/860099&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;D&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;json&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(json);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// src: https://stackoverflow.com/a/233630/860099&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;E&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;json&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; $.&lt;span class=&quot;hljs-title function_&quot;&gt;parseJSON&lt;/span&gt;(json)\n}\n\n\n\n \n&lt;span class=&quot;hljs-comment&quot;&gt;// --------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// TEST&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// --------------------&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; json = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{&quot;a&quot;:&quot;abc&quot;,&quot;b&quot;:&quot;123&quot;,&quot;d&quot;:[1,2,3],&quot;e&quot;:{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}}&apos;&lt;/span&gt;;\n\n[A,B,C,D,E].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;=&amp;gt;&lt;/span&gt; {  \n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(\n    f.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(json))\n  )})&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\nThis shippet only presents functions used in performance tests - it not perform tests itself!&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;And here are example results for chrome&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/mzfaY.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/mzfaY.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Older question, I know, however nobody notice this solution by using &lt;code&gt;new Function()&lt;/code&gt;, an anonymous function that returns the data. &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Just an example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; oData = &lt;span class=&quot;hljs-string&quot;&gt;&apos;test1:&quot;This is my object&quot;,test2:&quot;This is my object&quot;&apos;&lt;/span&gt;;\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; oData !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; )\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n   oData = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;return {&apos;&lt;/span&gt;+oData+&lt;span class=&quot;hljs-string&quot;&gt;&apos;};&apos;&lt;/span&gt;))();\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) { oData=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; }\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; oData !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; )\n  { &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&apos;Error in code&apos;&lt;/span&gt; ); }\n &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;( oData.&lt;span class=&quot;hljs-property&quot;&gt;test1&lt;/span&gt; );\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;( oData.&lt;span class=&quot;hljs-property&quot;&gt;test2&lt;/span&gt; );\n      }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;This is a little more safe because it executes inside a function and do not compile in your code directly. So if there is a function declaration inside it, it will not be bound to the default window object. &lt;/p&gt;\n\n&lt;p&gt;I use this to &apos;compile&apos; configuration settings of DOM elements (for example the data attribute) simple and fast.  &lt;/p&gt;\n    ","\n&lt;h2&gt;Summary:&lt;/h2&gt;\n\n&lt;p&gt;Javascript (both browser and NodeJS) have a built in &lt;code&gt;JSON&lt;/code&gt; object. On this Object are 2 convenient methods for dealing with &lt;code&gt;JSON&lt;/code&gt;. They are the following:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;JSON.parse()&lt;/code&gt;      Takes &lt;code&gt;JSON&lt;/code&gt; as argument, returns JS object&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;  Takes JS object as argument returns &lt;code&gt;JSON&lt;/code&gt; object&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Other applications:&lt;/h2&gt;\n\n&lt;p&gt;Besides for very conveniently dealing with &lt;code&gt;JSON&lt;/code&gt; they have can be used for other means.  The combination of both &lt;code&gt;JSON&lt;/code&gt; methods allows us to make very easy make deep clones of arrays or objects. For example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; ,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]];\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newArr = arr1.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;();\n\narr1[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;changed&apos;&lt;/span&gt;; \n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newArr); &lt;span class=&quot;hljs-comment&quot;&gt;// not a deep clone&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr2 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; ,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]];\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newArrDeepclone = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(arr2));\n\narr2[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;changed&apos;&lt;/span&gt;; \n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newArrDeepclone); &lt;span class=&quot;hljs-comment&quot;&gt;// A deep clone, values unchanged&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You also can use &lt;code&gt;reviver&lt;/code&gt; function to filter.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(jsonString, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reviver&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key, value&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;//your code here to filter&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more information read &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;JSON.parse&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Just to the cover parse for different input types&lt;/p&gt;\n\n&lt;p&gt;Parse the data with JSON.parse(), and the data becomes a JavaScript object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;{ &quot;name&quot;:&quot;John&quot;, &quot;age&quot;:30, &quot;city&quot;:&quot;New York&quot;}&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When using the JSON.parse() on a JSON derived from an array, the method will return a JavaScript array, instead of a JavaScript object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myArr = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myArr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Date objects are not allowed in JSON.\nFor Dates do somthing like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; text = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{ &quot;name&quot;:&quot;John&quot;, &quot;birth&quot;:&quot;1986-12-14&quot;, &quot;city&quot;:&quot;New York&quot;}&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(text);\nobj.&lt;span class=&quot;hljs-property&quot;&gt;birth&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(obj.&lt;span class=&quot;hljs-property&quot;&gt;birth&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Functions are not allowed in JSON.\nIf you need to include a function, write it as a string.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; text = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{ &quot;name&quot;:&quot;John&quot;, &quot;age&quot;:&quot;function () {return 30;}&quot;, &quot;city&quot;:&quot;New York&quot;}&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(text);\nobj.&lt;span class=&quot;hljs-property&quot;&gt;age&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(&quot;&lt;/span&gt; + obj.&lt;span class=&quot;hljs-property&quot;&gt;age&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Safely turning a JSON string into an object\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;} &lt;span class=&quot;hljs-variable&quot;&gt;str&lt;/span&gt; - JSON String\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@returns&lt;/span&gt; deserialized object, false if error\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;jsonParse&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    data = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(str);\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (err) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try this. This one is written in typescript.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;safeJsonParse&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str: string&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(str);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"499":["\n&lt;h1&gt;What is sh?&lt;/h1&gt;\n&lt;p&gt;&lt;code&gt;sh&lt;/code&gt; (or the Shell Command Language) is a programming language described by the &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html&quot; rel=&quot;noreferrer&quot;&gt;POSIX standard&lt;/a&gt;. It has many implementations (&lt;code&gt;ksh88&lt;/code&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Almquist_shell#dash:_Ubuntu,_Debian_and_POSIX_compliance_of_Linux_distributions&quot; rel=&quot;noreferrer&quot;&gt;Dash&lt;/a&gt;, ...). Bash can also be considered an implementation of &lt;code&gt;sh&lt;/code&gt; (see below).&lt;/p&gt;\n&lt;p&gt;Because &lt;code&gt;sh&lt;/code&gt; is a specification, not an implementation, &lt;code&gt;/bin/sh&lt;/code&gt; is a symlink (or a hard link) to an actual implementation on most POSIX systems.&lt;/p&gt;\n&lt;h1&gt;What is Bash?&lt;/h1&gt;\n&lt;p&gt;Bash started as an &lt;code&gt;sh&lt;/code&gt;-compatible implementation (although it predates the POSIX standard by a few years), but as time passed it has acquired many extensions. Many of these extensions may change the behavior of valid POSIX shell scripts, so by itself Bash is not a valid POSIX shell. Rather, it is a dialect of the POSIX shell language.&lt;/p&gt;\n&lt;p&gt;Bash supports a &lt;code&gt;--posix&lt;/code&gt; switch, which makes it more POSIX-compliant. It also tries to mimic POSIX if invoked as &lt;code&gt;sh&lt;/code&gt;.&lt;/p&gt;\n&lt;h1&gt;sh = bash?&lt;/h1&gt;\n&lt;p&gt;For a long time, &lt;code&gt;/bin/sh&lt;/code&gt; used to point to &lt;code&gt;/bin/bash&lt;/code&gt; on most GNU/Linux systems. As a result, it had almost become safe to ignore the difference between the two. But that started to change recently.&lt;/p&gt;\n&lt;p&gt;Some popular examples of systems where &lt;code&gt;/bin/sh&lt;/code&gt; does not point to &lt;code&gt;/bin/bash&lt;/code&gt; (and on some of which &lt;code&gt;/bin/bash&lt;/code&gt; may not even exist) are:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Modern Debian and Ubuntu systems, which symlink &lt;code&gt;sh&lt;/code&gt; to &lt;code&gt;dash&lt;/code&gt; by default;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/BusyBox&quot; rel=&quot;noreferrer&quot;&gt;Busybox&lt;/a&gt;, which is usually run during the Linux system boot time as part of &lt;code&gt;initramfs&lt;/code&gt;. It uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Almquist_shell&quot; rel=&quot;noreferrer&quot;&gt;ash&lt;/a&gt; shell implementation.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Berkeley_Software_Distribution&quot; rel=&quot;noreferrer&quot;&gt;BSD&lt;/a&gt; systems, and in general any non-Linux systems. &lt;a href=&quot;https://en.wikipedia.org/wiki/OpenBSD&quot; rel=&quot;noreferrer&quot;&gt;OpenBSD&lt;/a&gt; uses &lt;code&gt;pdksh&lt;/code&gt;, a descendant of the &lt;a href=&quot;https://en.wikipedia.org/wiki/KornShell&quot; rel=&quot;noreferrer&quot;&gt;KornShell&lt;/a&gt;. FreeBSD&apos;s &lt;code&gt;sh&lt;/code&gt; is a descendant of the original Unix Bourne shell.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Solaris_%28operating_system%29&quot; rel=&quot;noreferrer&quot;&gt;Solaris&lt;/a&gt; has its own &lt;code&gt;sh&lt;/code&gt; which for a long time was not POSIX-compliant; a free implementation is available from the &lt;a href=&quot;http://heirloom.sourceforge.net/sh.html&quot; rel=&quot;noreferrer&quot;&gt;Heirloom project&lt;/a&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;How can you find out what &lt;code&gt;/bin/sh&lt;/code&gt; points to on your system?&lt;/p&gt;\n&lt;p&gt;The complication is that &lt;code&gt;/bin/sh&lt;/code&gt; could be a symbolic link or a hard link. If it&apos;s a symbolic link, a &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/file.html&quot; rel=&quot;noreferrer&quot;&gt;portable&lt;/a&gt; way to resolve it is:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;% file -h /bin/sh\n/bin/sh: symbolic &lt;span class=&quot;hljs-built_in&quot;&gt;link&lt;/span&gt; to bash\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If it&apos;s a hard link, try&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;% find -L /bin -samefile /bin/sh\n/bin/sh\n/bin/bash\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In fact, the &lt;code&gt;-L&lt;/code&gt; flag covers both symlinks and hardlinks,\nbut the disadvantage of this method is that it is not portable \nPOSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/find.html&quot; rel=&quot;noreferrer&quot;&gt;does not require&lt;/a&gt; &lt;code&gt;find&lt;/code&gt; to support the &lt;code&gt;-samefile&lt;/code&gt; option, although both &lt;a href=&quot;https://www.gnu.org/software/findutils/manual/html_mono/find.html#Hard-Links&quot; rel=&quot;noreferrer&quot;&gt;GNU find&lt;/a&gt; and &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?find(1)&quot; rel=&quot;noreferrer&quot;&gt;FreeBSD find&lt;/a&gt; support it.&lt;/p&gt;\n&lt;h1&gt;Shebang line&lt;/h1&gt;\n&lt;p&gt;Ultimately, it&apos;s up to you to decide which one to use, by writing the ¬´shebang¬ª line as the very first line of the script.&lt;/p&gt;\n&lt;p&gt;E.g.&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/bin/sh&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;will use &lt;code&gt;sh&lt;/code&gt; (and whatever that happens to point to),&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/bin/bash&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;will use &lt;code&gt;/bin/bash&lt;/code&gt; if it&apos;s available (and fail with an error message if it&apos;s not). Of course, you can also specify another implementation, e.g.&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/bin/dash&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Which one to use&lt;/h1&gt;\n&lt;p&gt;For my own scripts, I prefer &lt;code&gt;sh&lt;/code&gt; for the following reasons:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;it is standardized&lt;/li&gt;\n&lt;li&gt;it is much simpler and easier to learn&lt;/li&gt;\n&lt;li&gt;it is portable across POSIX systems  even if they happen not to have &lt;code&gt;bash&lt;/code&gt;, they are required to have &lt;code&gt;sh&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;There are advantages to using &lt;code&gt;bash&lt;/code&gt; as well. Its features make programming more convenient and similar to programming in other modern programming languages. These include things like scoped local variables and arrays. Plain &lt;code&gt;sh&lt;/code&gt; is a very minimalistic programming language.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;sh&lt;/code&gt;: &lt;a href=&quot;http://man.cx/sh&quot; rel=&quot;noreferrer&quot;&gt;http://man.cx/sh&lt;/a&gt; &lt;br&gt;\nBash: &lt;a href=&quot;http://man.cx/bash&quot; rel=&quot;noreferrer&quot;&gt;http://man.cx/bash&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: Bash is a superset of &lt;code&gt;sh&lt;/code&gt; with a more elegant syntax and more functionality. It is safe to use a Bash &lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix)&quot; rel=&quot;noreferrer&quot;&gt;shebang&lt;/a&gt; line in almost all cases as it&apos;s quite ubiquitous on modern platforms.&lt;/p&gt;\n&lt;p&gt;NB: in some environments, &lt;code&gt;sh&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; Bash. Check &lt;code&gt;sh --version&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This question has frequently been nominated as a canonical for people who try to use &lt;code&gt;sh&lt;/code&gt; and are surprised that it&apos;s not behaving the same as &lt;code&gt;bash&lt;/code&gt;.  Here&apos;s a quick rundown of common misunderstandings and pitfalls.&lt;/p&gt;\n&lt;p&gt;First off, you should understand what to expect.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you run your script with &lt;code&gt;sh scriptname&lt;/code&gt;, or run it with &lt;code&gt;scriptname&lt;/code&gt; and have &lt;code&gt;#!/bin/sh&lt;/code&gt; in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix)&quot; rel=&quot;nofollow noreferrer&quot;&gt;shebang&lt;/a&gt; line, you should expect POSIX &lt;code&gt;sh&lt;/code&gt; behavior.&lt;/li&gt;\n&lt;li&gt;If you run your script with &lt;code&gt;bash scriptname&lt;/code&gt;, or run it with &lt;code&gt;scriptname&lt;/code&gt; and have &lt;code&gt;#!/bin/bash&lt;/code&gt; (or the local equivalent) in the shebang line, you should expect Bash behavior.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Having a correct shebang and running the script by typing just the script name (possibly with a &lt;a href=&quot;/questions/31435921/difference-between-and/55342466#55342466&quot;&gt;relative or full path&lt;/a&gt;) is generally the preferred solution.  In addition to a correct shebang, this requires the script file to have execute permission (&lt;code&gt;chmod a+x scriptname&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;So, how do they actually differ?&lt;/p&gt;\n&lt;p&gt;Bash aims to be backwards-compatible with the Bourne shell and POSIX, but has many additional features. The Bash Reference manual has a &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Major-Differences-From-The-Bourne-Shell.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;section which attempts to enumerate the differences&lt;/a&gt; but some common sources of confusion include&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;[[&lt;/code&gt; is not available in &lt;code&gt;sh&lt;/code&gt; (only &lt;code&gt;[&lt;/code&gt; which is more clunky and limited). See also &lt;a href=&quot;https://stackoverflow.com/questions/13542832/difference-between-single-and-double-square-brackets-in-bash&quot;&gt;Difference between single and double square brackets in Bash&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;sh&lt;/code&gt; does not have arrays.&lt;/li&gt;\n&lt;li&gt;Some Bash keywords like &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;shopt&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;declare&lt;/code&gt;, and &lt;code&gt;select&lt;/code&gt; are not portable to &lt;code&gt;sh&lt;/code&gt;. (Some &lt;code&gt;sh&lt;/code&gt; implementations support e.g. &lt;code&gt;local&lt;/code&gt;.)&lt;/li&gt;\n&lt;li&gt;Bash has many C-style syntax extensions like the three-argument &lt;code&gt;for((i=0;i&amp;lt;=3;i++))&lt;/code&gt; loop, &lt;code&gt;+=&lt;/code&gt; increment assignment, etc. The &lt;code&gt;$&apos;string\\nwith\\tC\\aescapes&apos;&lt;/code&gt; feature is tentatively &lt;a href=&quot;http://austingroupbugs.net/view.php?id=249&quot; rel=&quot;nofollow noreferrer&quot;&gt;accepted for POSIX&lt;/a&gt; (meaning it works in Bash now, but will not yet be supported by &lt;code&gt;sh&lt;/code&gt; on systems which only adhere to the current POSIX specification, and likely will not for some time to come).&lt;/li&gt;\n&lt;li&gt;Bash supports &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&apos;here strings&apos;&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Bash has &lt;code&gt;*.{png,jpg}&lt;/code&gt; and &lt;code&gt;{0..12}&lt;/code&gt; brace expansion.&lt;/li&gt;\n&lt;li&gt;Bash has extended globbing facilities like &lt;code&gt;**&lt;/code&gt; (&lt;code&gt;globstar&lt;/code&gt;) for recursing subdirectories, and &lt;code&gt;extglob&lt;/code&gt; for using a different, &lt;a href=&quot;https://www.gnu.org/software/bash/manual/bash.html#Pattern-Matching&quot; rel=&quot;nofollow noreferrer&quot;&gt;more versatile wildcard syntax.&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;del&gt;&lt;code&gt;~&lt;/code&gt; refers to &lt;code&gt;$HOME&lt;/code&gt; only in Bash (and more generally &lt;code&gt;~username&lt;/code&gt; to the home directory of &lt;code&gt;username&lt;/code&gt;).&lt;/del&gt;This is in POSIX, but may be missing from some pre-POSIX &lt;code&gt;/bin/sh&lt;/code&gt; implementations.&lt;/li&gt;\n&lt;li&gt;Bash has process substitution with &lt;code&gt;&amp;lt;(cmd)&lt;/code&gt; and &lt;code&gt;&amp;gt;(cmd)&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Bash has Csh-style convenience redirection aliases like &lt;code&gt;&amp;amp;|&lt;/code&gt; for &lt;code&gt;2&amp;gt;&amp;amp;1 |&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; for &lt;code&gt;&amp;gt; ... 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Bash supports coprocesses with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; redirection.&lt;/li&gt;\n&lt;li&gt;Bash features a rich set of expanded non-standard parameter expansions such as &lt;code&gt;${substring:1:2}&lt;/code&gt;, &lt;code&gt;${variable/pattern/replacement}&lt;/code&gt;, case conversion, etc.&lt;/li&gt;\n&lt;li&gt;Bash has significantly extended facilities for shell arithmetic (though still no floating-point support). There is an obsolescent legacy &lt;code&gt;$[expression]&lt;/code&gt; syntax which however should be replaced with POSIX arithmetic &lt;code&gt;$((expression))&lt;/code&gt; syntax. (Some legacy pre-POSIX &lt;code&gt;sh&lt;/code&gt; implementations may not support that, though.)&lt;/li&gt;\n&lt;li&gt;Several built-in commands have options which are not portable, like &lt;code&gt;type -a&lt;/code&gt;, &lt;code&gt;printf -v&lt;/code&gt;, and the perennial &lt;code&gt;echo -e&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Magic variables like &lt;code&gt;$RANDOM&lt;/code&gt;, &lt;code&gt;$SECONDS&lt;/code&gt;, &lt;code&gt;$PIPESTATUS[@]&lt;/code&gt; and &lt;code&gt;$FUNCNAME&lt;/code&gt; are Bash extensions.&lt;/li&gt;\n&lt;li&gt;Bash exposes some system facilities as file handles, like &lt;code&gt;/dev/stdin&lt;/code&gt;, &lt;code&gt;/dev/fd/&amp;lt;number&amp;gt;&lt;/code&gt;, &lt;code&gt;/dev/tcp/&amp;lt;network address&amp;gt;&lt;/code&gt;, etc&lt;/li&gt;\n&lt;li&gt;Syntactic differences like &lt;del&gt;&lt;code&gt;export variable=value&lt;/code&gt; and&lt;/del&gt; &lt;code&gt;[ &quot;x&quot; == &quot;y&quot; ]&lt;/code&gt; which are not portable (&lt;del&gt;&lt;code&gt;export variable&lt;/code&gt; should be separate from variable assignment, and&lt;/del&gt; portable string comparison in &lt;code&gt;[ ... ]&lt;/code&gt; uses a single equals sign).&lt;/li&gt;\n&lt;li&gt;Many, many Bash-only extensions to enable or disable optional behavior and expose internal state of the shell.&lt;/li&gt;\n&lt;li&gt;Many, many convenience features for interactive use which however do not affect script behavior.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Remember, this is an abridged listing.  Refer to the reference manual for the full scoop, and &lt;a href=&quot;http://mywiki.wooledge.org/Bashism&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://mywiki.wooledge.org/Bashism&lt;/a&gt; for many good workarounds; and/or try &lt;a href=&quot;http://shellcheck.net/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://shellcheck.net/&lt;/a&gt; which warns for many Bash-only features.&lt;/p&gt;\n&lt;p&gt;A common error is to have a &lt;code&gt;#!/bin/bash&lt;/code&gt; shebang line, but then nevertheless using &lt;code&gt;sh scriptname&lt;/code&gt; to actually run the script. This basically disables any Bash-only functionality, so you get syntax errors e.g. for trying to use arrays. (The shebang line is syntactically a comment, so it is simply ignored in this scenario.)&lt;/p&gt;\n&lt;p&gt;Unfortunately, Bash will not warn when you try to use these constructs when it is invoked as &lt;code&gt;sh&lt;/code&gt;. It doesn&apos;t completely disable &lt;em&gt;all&lt;/em&gt; Bash-only functionality, either, so running Bash by invoking it as &lt;code&gt;sh&lt;/code&gt; is not a good way to check if your script is properly portable to &lt;a href=&quot;https://en.wikipedia.org/wiki/Almquist_shell&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;ash&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/Almquist_shell#dash:_Ubuntu,_Debian_and_POSIX_compliance_of_Linux_distributions&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/a&gt;/POSIX &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/utilities/sh.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;sh&lt;/code&gt;&lt;/a&gt; or variants like &lt;a href=&quot;http://heirloom.sourceforge.net/sh.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Heirloom &lt;code&gt;sh&lt;/code&gt;&lt;/a&gt;.\nIf you want to check for strict POSIX compliance, try &lt;a href=&quot;https://manpages.debian.org/unstable/posh/posh.1.en.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;posh&lt;/code&gt;&lt;/a&gt;\nin its designated POSIX mode\n(which however does not seem to be properly documented).&lt;/p&gt;\n&lt;p&gt;As an aside, the &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/&quot; rel=&quot;nofollow noreferrer&quot;&gt;POSIX&lt;/a&gt; standardization effort is intended to specify the behavior of various U*x-like platform behaviors, including the &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799//idx/shell.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;shell&lt;/a&gt; (&lt;code&gt;sh&lt;/code&gt;).\nHowever, this is an evolving document, and so, some implementations adhere to an earlier version of the POSIX specification; furthermore, there are some legacy implementations which didn&apos;t even try to adhere to POSIX.\nThe original Bourne shell had some quirks  which were later straightened out by the POSIX spec, which in large parts is based on &lt;code&gt;ksh88&lt;/code&gt;. (Many of the Bash extensions are also innovations from &lt;code&gt;ksh&lt;/code&gt;.)&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Shell&lt;/strong&gt; is an interface between a user and OS to access to an operating system&apos;s services. It can be either GUI or CLI (Command Line interface).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;sh&lt;/strong&gt; (Bourne &lt;strong&gt;sh&lt;/strong&gt;ell) is a shell command-line interpreter, for Unix/Unix-like operating systems. It provides some built-in commands. In scripting language we denote interpreter as &lt;code&gt;#!/bin/sh&lt;/code&gt;. It was one most widely supported by other shells like bash (free/open), kash (not free).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; (&lt;strong&gt;B&lt;/strong&gt;ourne &lt;strong&gt;a&lt;/strong&gt;gain &lt;strong&gt;s&lt;/strong&gt;hell) is a shell replacement for the Bourne shell. Bash is superset of sh. Bash supports sh. POSIX is a set of standards defining how POSIX-compliant systems should work.  Bash is not actually a POSIX compliant shell. In a scripting language we denote the interpreter as &lt;code&gt;#!/bin/bash&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Analogy:&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Shell is like an interface or specifications or API.  &lt;/li&gt;\n&lt;li&gt;sh is a class which implements the Shell interface.  &lt;/li&gt;\n&lt;li&gt;Bash is a subclass of the sh. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/8Xvox.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/8Xvox.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Post from &lt;a href=&quot;http://www.unix.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;UNIX.COM&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Shell features&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This table below lists most features that I think would make you choose one shell over another. It is not intended to be a definitive list and does not include every single possible feature for every single possible shell. A feature is only considered to be in a shell if in the version that comes with the operating system, or if it is available as compiled directly from the standard distribution. In particular the C shell specified below is that available on SUNOS 4.*, a considerable number of vendors now ship either tcsh or their own enhanced C shell instead (they don&apos;t always make it obvious that they are shipping tcsh.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;                                     sh   csh  ksh  bash tcsh zsh  rc   es\nJob control                          N    Y    Y    Y    Y    Y    N    N\nAliases                              N    Y    Y    Y    Y    Y    N    N\nShell functions                      Y(1) N    Y    Y    N    Y    Y    Y\n&quot;Sensible&quot; Input/Output redirection  Y    N    Y    Y    N    Y    Y    Y\nDirectory stack                      N    Y    Y    Y    Y    Y    F    F\nCommand history                      N    Y    Y    Y    Y    Y    L    L\nCommand line editing                 N    N    Y    Y    Y    Y    L    L\nVi Command line editing              N    N    Y    Y    Y(3) Y    L    L\nEmacs Command line editing           N    N    Y    Y    Y    Y    L    L\nRebindable Command line editing      N    N    N    Y    Y    Y    L    L\nUser name look up                    N    Y    Y    Y    Y    Y    L    L\nLogin/Logout watching                N    N    N    N    Y    Y    F    F\nFilename completion                  N    Y(1) Y    Y    Y    Y    L    L\nUsername completion                  N    Y(2) Y    Y    Y    Y    L    L\nHostname completion                  N    Y(2) Y    Y    Y    Y    L    L\nHistory completion                   N    N    N    Y    Y    Y    L    L\nFully programmable Completion        N    N    N    N    Y    Y    N    N\nMh Mailbox completion                N    N    N    N(4) N(6) N(6) N    N\nCo Processes                         N    N    Y    N    N    Y    N    N\nBuiltin artithmetic evaluation       N    Y    Y    Y    Y    Y    N    N\nCan follow symbolic links invisibly  N    N    Y    Y    Y    Y    N    N\nPeriodic command execution           N    N    N    N    Y    Y    N    N\nCustom Prompt (easily)               N    N    Y    Y    Y    Y    Y    Y\nSun Keyboard Hack                    N    N    N    N    N    Y    N    N\nSpelling Correction                  N    N    N    N    Y    Y    N    N\nProcess Substitution                 N    N    N    Y(2) N    Y    Y    Y\nUnderlying Syntax                    sh   csh  sh   sh   csh  sh   rc   rc\nFreely Available                     N    N    N(5) Y    Y    Y    Y    Y\nChecks Mailbox                       N    Y    Y    Y    Y    Y    F    F\nTty Sanity Checking                  N    N    N    N    Y    Y    N    N\nCan cope with large argument lists   Y    N    Y    Y    Y    Y    Y    Y\nHas non-interactive startup file     N    Y    Y(7) Y(7) Y    Y    N    N\nHas non-login startup file           N    Y    Y(7) Y    Y    Y    N    N\nCan avoid user startup files         N    Y    N    Y    N    Y    Y    Y\nCan specify startup file             N    N    Y    Y    N    N    N    N\nLow level command redefinition       N    N    N    N    N    N    N    Y\nHas anonymous functions              N    N    N    N    N    N    Y    Y\nList Variables                       N    Y    Y    N    Y    Y    Y    Y\nFull signal trap handling            Y    N    Y    Y    N    Y    Y    Y\nFile no clobber ability              N    Y    Y    Y    Y    Y    N    F\nLocal variables                      N    N    Y    Y    N    Y    Y    Y\nLexically scoped variables           N    N    N    N    N    N    N    Y\nExceptions                           N    N    N    N    N    N    N    Y\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Key to the table above.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Y      Feature can be done using this shell.&lt;/p&gt;\n&lt;p&gt;N      Feature is not present in the shell.&lt;/p&gt;\n&lt;p&gt;F      Feature can only be done by using the shells function\nmechanism.&lt;/p&gt;\n&lt;p&gt;L      The readline library must be linked into the shell to enable\nthis Feature.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Notes to the table above&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;This feature was not in the original version, but has since become\nalmost standard.&lt;/li&gt;\n&lt;li&gt;This feature is fairly new and so is often not found on many\nversions of the shell, it is gradually making its way into\nstandard distribution.&lt;/li&gt;\n&lt;li&gt;The Vi emulation of this shell is thought by many to be\nincomplete.&lt;/li&gt;\n&lt;li&gt;This feature is not standard but unofficial patches exist to\nperform this.&lt;/li&gt;\n&lt;li&gt;A version called &apos;pdksh&apos; is freely available, but does not have\nthe full functionality of the AT&amp;amp;T version.&lt;/li&gt;\n&lt;li&gt;This can be done via the shells programmable completion mechanism.&lt;/li&gt;\n&lt;li&gt;Only by specifying a file via the ENV environment variable.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;TERMINAL&lt;/strong&gt; &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;program(s) that put a window up&lt;/li&gt;\n&lt;li&gt;xterm, rxvt, konsole, kvt, gnome-terminal, nxterm, and eterm.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;SHELL&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Is a program that runs in the terminal&lt;/li&gt;\n&lt;li&gt;Shell is both a command interpreter and a programming language&lt;/li&gt;\n&lt;li&gt;Shell is simply a macro processor that executes commands. &lt;/li&gt;\n&lt;li&gt;Macro processor means functionality where text and symbols are expanded to create larger expressions. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;SH Vs. BASH&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;SH&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;(SHell)&lt;/li&gt;\n&lt;li&gt;Is a specific shell&lt;/li&gt;\n&lt;li&gt;a command interpreter and a programming language&lt;/li&gt;\n&lt;li&gt;Predecessor of BASH&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;BASH&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;(Bourne-Again SHell)&lt;/li&gt;\n&lt;li&gt;Is a specific shell&lt;/li&gt;\n&lt;li&gt;a command interpreter and a programming language&lt;/li&gt;\n&lt;li&gt;Has sh functionality and more&lt;/li&gt;\n&lt;li&gt;Successor of SH&lt;/li&gt;\n&lt;li&gt;BASH is the default SHELL&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;REFERENCE MATERIAL:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;SHELL&lt;/strong&gt;\n&lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/What-is-a-shell_003f.html#What-is-a-shell_003f&quot;&gt;gnu.org:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;At its base, a &lt;strong&gt;shell is simply a macro processor&lt;/strong&gt; that executes\n  commands. The term &lt;strong&gt;macro processor means functionality where text and\n  symbols are expanded to create larger expressions.&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;p&gt;A Unix &lt;strong&gt;shell is both a command interpreter and a programming language.&lt;/strong&gt;\n  As a command interpreter, the shell provides the user interface to the\n  rich set of GNU utilities. The programming language features allow\n  these utilities to be combined. Files containing commands can be\n  created, and become commands themselves. These new commands have the\n  same status as system commands in directories such as /bin, allowing\n  users or groups to establish custom environments to automate their\n  common tasks.&lt;/p&gt;\n  \n  &lt;p&gt;Shells may be used interactively or non-interactively. In interactive\n  mode, they accept input typed from the keyboard. When executing\n  non-interactively, shells execute commands read from a file.&lt;/p&gt;\n  \n  &lt;p&gt;A shell allows execution of GNU commands, both synchronously and\n  asynchronously. The shell waits for synchronous commands to complete\n  before accepting more input; asynchronous commands continue to execute\n  in parallel with the shell while it reads and executes additional\n  commands. The redirection constructs permit fine-grained control of\n  the input and output of those commands. Moreover, the shell allows\n  control over the contents of commands environments.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;Shells also provide a small set of built-in commands (builtins)\n  implementing functionality impossible or inconvenient to obtain via\n  separate utilities&lt;/strong&gt;. &lt;strong&gt;For example, cd, break, continue, and exec cannot\n  be implemented outside of the shell&lt;/strong&gt; because they directly manipulate\n  the shell itself. The history, getopts, kill, or pwd builtins, among\n  others, could be implemented in separate utilities, but they are more\n  convenient to use as builtin commands. All of the shell builtins are\n  described in subsequent sections.&lt;/p&gt;\n  \n  &lt;p&gt;While executing commands is essential, &lt;strong&gt;most of the power (and\n  complexity) of shells is due to their embedded programming languages.&lt;/strong&gt;\n  Like any high-level language, the shell provides variables, flow\n  control constructs, quoting, and functions.&lt;/p&gt;\n  \n  &lt;p&gt;Shells offer features geared specifically for interactive use rather\n  than to augment the programming language. These interactive features\n  include job control, command line editing, command history and\n  aliases. Each of these features is described in this manual.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;BASH&lt;/strong&gt; &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/What-is-Bash_003f.html#What-is-Bash_003f&quot;&gt;gnu.org:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Bash is the shell, or command language interpreter, for the GNU\n  operating system. The name is an acronym for the Bourne-Again SHell,\n  a pun on Stephen Bourne, the author of the direct ancestor of the\n  current Unix shell sh, which appeared in the Seventh Edition Bell Labs\n  Research version of Unix.&lt;/p&gt;\n  \n  &lt;p&gt;Bash is largely compatible with sh and incorporates useful features\n  from the Korn shell ksh and the C shell csh. It is intended to be a\n  conformant implementation of the IEEE POSIX Shell and Tools portion of\n  the IEEE POSIX specification (IEEE Standard 1003.1). It offers\n  functional improvements over sh for both interactive and programming\n  use.&lt;/p&gt;\n  \n  &lt;p&gt;While the GNU operating system provides other shells, including a\n  version of csh, &lt;strong&gt;Bash is the default shell&lt;/strong&gt;. Like other GNU software,\n  Bash is quite portable. It currently runs on nearly every version of\n  Unix and a few other operating systems - independently-supported ports\n  exist for MS-DOS, OS/2, and Windows platforms.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Other answers generally pointed out the difference between Bash and a POSIX shell standard. However, when writing portable shell scripts and being used to Bash syntax, a list of typical bashisms and corresponding pure POSIX solutions is very handy. Such list has been compiled when Ubuntu switched from Bash to Dash as default system shell and can be found here:\n&lt;a href=&quot;https://wiki.ubuntu.com/DashAsBinSh&quot;&gt;https://wiki.ubuntu.com/DashAsBinSh&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Moreover, there is a great tool called &lt;a href=&quot;http://manpages.ubuntu.com/manpages/saucy/man1/checkbashisms.1.html&quot;&gt;checkbashisms&lt;/a&gt; that checks for bashisms in your script and comes handy when you want to make sure that your script is portable.&lt;/p&gt;\n    ","\n&lt;p&gt;bash and sh are two different shells. Basically bash is sh, with more features and better syntax. Most commands work the same, but they are different.Bash (bash) is one of many available (yet the most commonly used) Unix shells. Bash stands for &quot;Bourne Again SHell&quot;,and is a replacement/improvement of the original Bourne shell (sh).&lt;/p&gt;\n\n&lt;p&gt;Shell scripting is scripting in any shell, whereas Bash scripting is scripting specifically for Bash. In practice, however, &quot;shell script&quot; and &quot;bash script&quot; are often used interchangeably, unless the shell in question is not Bash.&lt;/p&gt;\n\n&lt;p&gt;Having said that, you should realize /bin/sh on most systems will be a symbolic link and will not invoke sh. In Ubuntu /bin/sh used to link to bash, typical behavior on Linux distributions, but now has changed to linking to another shell called dash. I would use bash, as that is pretty much the standard (or at least most common, from my experience). In fact, problems arise when a bash script will use #!/bin/sh because the script-maker assumes the link is to bash when it doesn&apos;t have to be.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;They&apos;re nearly identical but &lt;code&gt;bash&lt;/code&gt; has more features&lt;/strong&gt;  &lt;code&gt;sh&lt;/code&gt; is (more or less) an older subset of &lt;code&gt;bash&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;sh&lt;/code&gt; often means the original &lt;code&gt;Bourne shell&lt;/code&gt;, which predates &lt;code&gt;bash&lt;/code&gt; (&lt;code&gt;Bourne *again* shell&lt;/code&gt;), and was created in 1977.  But, in practice, it may be better to think of it as a highly-cross-compatible shell compliant with the POSIX standard from 1992.&lt;/p&gt;\n&lt;p&gt;Scripts that start with &lt;code&gt;#!/bin/sh&lt;/code&gt; or use the &lt;code&gt;sh&lt;/code&gt; shell usually do so for backwards compatibility.  Any unix/linux OS will have an &lt;code&gt;sh&lt;/code&gt; shell.  On Ubuntu &lt;code&gt;sh&lt;/code&gt; often invokes &lt;code&gt;dash&lt;/code&gt; and on MacOS it&apos;s a special POSIX version of &lt;code&gt;bash&lt;/code&gt;.  These shells may be preferred for standard-compliant behavior, speed or backwards compatibility.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;bash&lt;/code&gt; is newer than the original &lt;code&gt;sh&lt;/code&gt;, adds more features, and seeks to be backwards compatible with &lt;code&gt;sh&lt;/code&gt;.  &lt;code&gt;sh&lt;/code&gt; programs will usually run just fine in &lt;code&gt;bash&lt;/code&gt;.  &lt;code&gt;bash&lt;/code&gt; is available on nearly all linux/unix machines and usually used by default  with the notable exception of MacOS defaulting to &lt;code&gt;zsh&lt;/code&gt; as of Catalina (10.15). FreeBSD, by default, does not come with &lt;code&gt;bash&lt;/code&gt; installed.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;/bin/sh&lt;/code&gt; may or may not invoke the same program as &lt;code&gt;/bin/bash&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;sh&lt;/code&gt; supports &lt;em&gt;at least&lt;/em&gt; the features &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/sh.html&quot; rel=&quot;noreferrer&quot;&gt;required by POSIX&lt;/a&gt; (assuming a correct implementation). It may support extensions as well.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;bash&lt;/code&gt;, the &quot;Bourne Again Shell&quot;, implements the features required for sh plus bash-specific extensions. The full set of extensions is too long to describe here, and it varies with new releases. The differences are documented in the bash manual. Type &lt;code&gt;info bash&lt;/code&gt; and read the &quot;Bash Features&quot; section (section 6 in the current version), or read the &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Bash-Features.html&quot; rel=&quot;noreferrer&quot;&gt;current documentation online&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;The differences explained in the easiest way possible:&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;After having a basic understanding, the other answers will be easier to understand.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Shell&lt;/strong&gt; - &quot;Shell&quot; is a program, which facilitates the interaction between the user and the operating system (kernel). There are many shell implementations available, like sh, &lt;a href=&quot;https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bash&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C_shell&quot; rel=&quot;nofollow noreferrer&quot;&gt;C shell&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot; rel=&quot;nofollow noreferrer&quot;&gt;Z shell&lt;/a&gt;, etc.&lt;/p&gt;\n&lt;p&gt;Using any of the shell programs, we will be able to execute commands that are supported by that shell program.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; - It derived from &lt;strong&gt;B&lt;/strong&gt;ourne-&lt;strong&gt;a&lt;/strong&gt;gain &lt;strong&gt;Sh&lt;/strong&gt;ell. Using this program, we will be able to execute all the commands specified by the shell. Also, we will be able to execute some commands that are specifically added to this program. Bash has backward compatibility with sh.&lt;/p&gt;\n&lt;p&gt;Sh - It derived from Bourne &lt;strong&gt;Sh&lt;/strong&gt;ell. &quot;sh&quot; supports all the commands specified in the shell. It means, using this program, we will be able to execute all the commands specified by Shell.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;For more information, see:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://man.cx/sh&quot; rel=&quot;nofollow noreferrer&quot;&gt;dash&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://man.cx/bash&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bash&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The Linux operating system offers different types of shell. Though shells have many commands in common, each type has unique features.\nLets study different kind of mostly used shells.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Sh shell:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Sh shell is also known as Bourne shell. Sh shell is the first shell developed for Unix computers by Stephen Bourne at AT&amp;amp;T&apos;s Bell Labs in 1977. It includes many scripting tools.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Bash shell:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Bash shell stands for Bourne Again Shell. Bash shell is the default shell in most Linux distributions and substitute for the Sh shell (the Sh shell will also run in the Bash shell). The Bash shell can execute the vast majority of Sh shell scripts without modification and provide commands line editing feature also.&lt;/p&gt;\n    "],"500":["\n&lt;p&gt;Greedy will consume as much as possible. From &lt;a href=&quot;http://www.regular-expressions.info/repeat.html&quot; rel=&quot;noreferrer&quot;&gt;http://www.regular-expressions.info/repeat.html&lt;/a&gt; we see the example of trying to match HTML tags with &lt;code&gt;&amp;lt;.+&amp;gt;&lt;/code&gt;. Suppose you have the following:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;em&lt;/span&gt;&amp;gt;Hello World&amp;lt;/&lt;span class=&quot;hljs-selector-tag&quot;&gt;em&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may think that &lt;code&gt;&amp;lt;.+&amp;gt;&lt;/code&gt; (&lt;code&gt;.&lt;/code&gt; means &lt;em&gt;any non newline character&lt;/em&gt; and &lt;code&gt;+&lt;/code&gt; means &lt;em&gt;one or more&lt;/em&gt;) would only match the &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; and the &lt;code&gt;&amp;lt;/em&amp;gt;&lt;/code&gt;, when in reality it will be very greedy, and go from the first &lt;code&gt;&amp;lt;&lt;/code&gt; to the last &lt;code&gt;&amp;gt;&lt;/code&gt;. This means it will match &lt;code&gt;&amp;lt;em&amp;gt;Hello World&amp;lt;/em&amp;gt;&lt;/code&gt; instead of what you wanted.&lt;/p&gt;\n\n&lt;p&gt;Making it lazy (&lt;code&gt;&amp;lt;.+?&amp;gt;&lt;/code&gt;) will prevent this. By adding the &lt;code&gt;?&lt;/code&gt; after the &lt;code&gt;+&lt;/code&gt;, we tell it to repeat &lt;em&gt;as few times as possible&lt;/em&gt;, so the first &lt;code&gt;&amp;gt;&lt;/code&gt; it comes across, is where we want to stop the matching.&lt;/p&gt;\n\n&lt;p&gt;I&apos;d encourage you to download &lt;a href=&quot;http://www.gskinner.com/RegExr/&quot; rel=&quot;noreferrer&quot;&gt;RegExr&lt;/a&gt;, a great tool that will help you explore Regular Expressions - I use it all the time.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&apos;Greedy&apos;&lt;/strong&gt; means match longest possible string.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&apos;Lazy&apos;&lt;/strong&gt; means match shortest possible string.&lt;/p&gt;\n\n&lt;p&gt;For example, the greedy &lt;code&gt;h.+l&lt;/code&gt; matches &lt;code&gt;&apos;hell&apos;&lt;/code&gt; in &lt;code&gt;&apos;hello&apos;&lt;/code&gt; but the lazy &lt;code&gt;h.+?l&lt;/code&gt; matches &lt;code&gt;&apos;hel&apos;&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Greedy quantifier&lt;/th&gt;\n&lt;th&gt;Lazy quantifier&lt;/th&gt;\n&lt;th&gt;Description&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;*?&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Star Quantifier: 0 or more&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;+?&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Plus Quantifier: 1 or more&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;??&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Optional Quantifier: 0 or 1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;{n}&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;{n}?&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Quantifier: exactly n&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;{n,}&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;{n,}?&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Quantifier: n or more&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;code&gt;{n,m}&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;{n,m}?&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;Quantifier: between n and m&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Add a ? to a quantifier to make it ungreedy i.e lazy.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;\ntest string : &lt;em&gt;stackoverflow&lt;/em&gt;&lt;br&gt;\n&lt;em&gt;greedy reg expression&lt;/em&gt; : &lt;a href=&quot;http://regexr.com/3glo4&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;s.*o&lt;/code&gt;&lt;/a&gt; output: &lt;strong&gt;stackoverflo&lt;/strong&gt;w&lt;br&gt;\n&lt;em&gt;lazy reg expression&lt;/em&gt; : &lt;a href=&quot;http://regexr.com/3glo7&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;s.*?o&lt;/code&gt;&lt;/a&gt; output: &lt;strong&gt;stacko&lt;/strong&gt;verflow&lt;/p&gt;\n    ","\n&lt;p&gt;Greedy means your expression will match as large a group as possible, lazy means it will match the smallest group possible.  For this string:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-undefined&quot;&gt;abcdefghijklmc\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and this expression:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;.*c\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A greedy match will match the whole string, and a lazy match will match just the first &lt;code&gt;abc&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;As far as I know, most regex engine is greedy by default. Add a question mark at the end of quantifier will enable lazy match.&lt;/p&gt;\n&lt;p&gt;As @Andre S mentioned in comment.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Greedy: Keep searching until condition is not satisfied.&lt;/li&gt;\n&lt;li&gt;Lazy: Stop searching once condition is satisfied.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Refer to the example below for what is greedy and what is lazy.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.regex.Matcher;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.regex.Pattern;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String args[])&lt;/span&gt;{\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;money&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;100000000999&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;greedyRegex&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;100(0*)&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Pattern.compile(greedyRegex);\n        &lt;span class=&quot;hljs-type&quot;&gt;Matcher&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;matcher&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; pattern.matcher(money);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(matcher.find()){\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;m greedy and I want &quot;&lt;/span&gt; + matcher.group() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; dollars. This is the most I can get.&quot;&lt;/span&gt;);\n        }\n        \n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lazyRegex&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;100(0*?)&quot;&lt;/span&gt;;\n        pattern = Pattern.compile(lazyRegex);\n        matcher = pattern.matcher(money);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(matcher.find()){\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;m too lazy to get so much money, only &quot;&lt;/span&gt; + matcher.group() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; dollars is enough for me&quot;&lt;/span&gt;);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\nThe result is:\n```\nI&apos;m greedy and I want 100000000 dollars. This is the most I can get.\n&lt;p&gt;I&apos;m too lazy to get so much money, only 100 dollars is enough for me&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-undefined&quot;&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Taken From &lt;a href=&quot;http://www.regular-expressions.info/possessive.html&quot; rel=&quot;noreferrer&quot;&gt;www.regular-expressions.info&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Greediness&lt;/strong&gt;: Greedy quantifiers first tries to repeat the token as many times\nas possible, and gradually gives up matches as the engine backtracks to find \nan overall match.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Laziness&lt;/strong&gt;: Lazy quantifier first repeats the token as few times as required, and\ngradually expands the match as the engine backtracks through the regex to\nfind an overall match.&lt;/p&gt;\n    ","\n&lt;p&gt;From &lt;a href=&quot;http://en.wikipedia.org/wiki/Regular_expression&quot; rel=&quot;noreferrer&quot;&gt;Regular expression&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The standard quantifiers in regular\n  expressions are greedy, meaning they\n  match as much as they can, only giving\n  back as necessary to match the\n  remainder of the regex. &lt;/p&gt;\n  \n  &lt;p&gt;By using a lazy quantifier, the\n  expression tries the minimal match\n  first.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;h2&gt;Greedy Quantifiers are like the IRS&lt;/h2&gt;\n&lt;p&gt;Theyll take as much as they can. e.g. matches with this regex: &lt;code&gt;.*&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;$50,000&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Bye-bye bank balance.&lt;/p&gt;\n&lt;p&gt;See here for an example: &lt;a href=&quot;https://regexr.com/4t27f&quot; rel=&quot;nofollow noreferrer&quot;&gt;Greedy-example&lt;/a&gt;&lt;/p&gt;\n&lt;h2&gt;Non-greedy quantifiers - they take as little as they can&lt;/h2&gt;\n&lt;p&gt;Ask for a tax refund: the IRS sudden becomes non-greedy - and return as little as possible: i.e. they use this quantifier:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;(.{2,5}?)([0-9]*)&lt;/code&gt; against this input: &lt;code&gt;$50,000&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;The first group is non-needy and only matches &lt;code&gt;$5&lt;/code&gt;  so I get a &lt;code&gt;$5&lt;/code&gt; refund against the $50,000 input.&lt;/p&gt;\n&lt;p&gt;See here: &lt;a href=&quot;https://regexr.com/59qrk&quot; rel=&quot;nofollow noreferrer&quot;&gt;Non-greedy-example&lt;/a&gt;.&lt;/p&gt;\n&lt;h2&gt;Why do we need greedy vs non-greedy?&lt;/h2&gt;\n&lt;p&gt;It becomes important if you are trying to match certain parts of an expression. Sometimes you don&apos;t want to match everything - as little as possible. Sometimes you want to match as much as possible. Nothing more to it.&lt;/p&gt;\n&lt;p&gt;You can play around with the examples in the links posted above.&lt;/p&gt;\n&lt;p&gt;(Analogy used to help you remember).&lt;/p&gt;\n    ","\n&lt;p&gt;Best shown by example. String. &lt;code&gt;192.168.1.1&lt;/code&gt; and a greedy regex &lt;code&gt;\\b.+\\b&lt;/code&gt;\nYou might think this would give you the 1st octet but is actually matches against the whole string. Why? Because the.+ is greedy and a greedy match matches every character in &lt;code&gt;192.168.1.1&lt;/code&gt; until it reaches the end of the string. This is the important bit! Now it starts to backtrack one character at a time until it finds a match for the 3rd token (&lt;code&gt;\\b&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;If the string a 4GB text file and 192.168.1.1 was at the start you could easily see how this backtracking would cause an issue.&lt;/p&gt;\n\n&lt;p&gt;To make a regex non greedy (lazy) put a question mark after your greedy search e.g&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ruby&quot;&gt;*?\n&lt;span class=&quot;hljs-string&quot;&gt;??&lt;/span&gt;\n+?\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What happens now is token 2 (&lt;code&gt;+?&lt;/code&gt;) finds a match, regex moves along a character and then tries the next token (&lt;code&gt;\\b&lt;/code&gt;) rather than token 2 (&lt;code&gt;+?&lt;/code&gt;). So it creeps along gingerly.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Greedy matching.&lt;/strong&gt; The default behavior of regular expressions is to be greedy. That means it tries to extract as much as possible until it conforms to a pattern even when a smaller part would have been syntactically sufficient.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\ntext = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;body&amp;gt;Regex Greedy Matching Example &amp;lt;/body&amp;gt;&quot;&lt;/span&gt;\nre.findall(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;.*&amp;gt;&apos;&lt;/span&gt;, text)\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;gt; [&apos;&amp;lt;body&amp;gt;Regex Greedy Matching Example &amp;lt;/body&amp;gt;&apos;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Instead of matching till the first occurrence of &amp;gt;, it extracted the whole string. This is the default greedy or take it all behavior of regex.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Lazy matching&lt;/strong&gt;, on the other hand, takes as little as possible. This can be effected by adding a &lt;code&gt;?&lt;/code&gt; at the end of the pattern.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-less&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.findall&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;.*?&amp;gt;&apos;&lt;/span&gt;, text)\n#&amp;gt; &lt;span class=&quot;hljs-selector-attr&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;body&amp;gt;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/body&amp;gt;&apos;&lt;/span&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want only the first match to be retrieved, use the search method instead.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;re.search(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;.*?&amp;gt;&apos;&lt;/span&gt;, text).&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt;()\n&lt;span class=&quot;hljs-meta&quot;&gt;#&amp;gt; &apos;&amp;lt;body&amp;gt;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;https://www.machinelearningplus.com/python-regex-tutorial-examples/#greedy_matching_in_regex&quot; rel=&quot;nofollow noreferrer&quot;&gt;Python Regex Examples&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Greedy means it will consume your pattern until there are none of them left and it can look no further.&lt;/p&gt;\n\n&lt;p&gt;Lazy will stop as soon as it will encounter the first pattern you requested.&lt;/p&gt;\n\n&lt;p&gt;One common example that I often encounter is &lt;code&gt;\\s*-\\s*?&lt;/code&gt; of a regex &lt;code&gt;([0-9]{2}\\s*-\\s*?[0-9]{7})&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The first &lt;code&gt;\\s*&lt;/code&gt; is classified as greedy because of &lt;code&gt;*&lt;/code&gt; and will look as many white spaces as possible after the digits are encountered and then look for a dash character &quot;-&quot;. Where as the second &lt;code&gt;\\s*?&lt;/code&gt; is lazy because of the present of &lt;code&gt;*?&lt;/code&gt; which means that it will look the first white space character and stop right there.&lt;/p&gt;\n    ","\n&lt;p&gt;try to understand the following behavior:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-dart&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0014.2&quot;&lt;/span&gt;;\n\nRegex r1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Regex(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\d+.{0,1}\\\\d+&quot;&lt;/span&gt;);\nRegex r2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Regex(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\d*.{0,1}\\\\d*&quot;&lt;/span&gt;);\n\nConsole.WriteLine(r1.&lt;span class=&quot;hljs-built_in&quot;&gt;Match&lt;/span&gt;(input).Value); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;0014.2&quot;&lt;/span&gt;\nConsole.WriteLine(r2.&lt;span class=&quot;hljs-built_in&quot;&gt;Match&lt;/span&gt;(input).Value); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;0014.2&quot;&lt;/span&gt;\n\ninput = &lt;span class=&quot;hljs-string&quot;&gt;&quot; 0014.2&quot;&lt;/span&gt;;\n\nConsole.WriteLine(r1.&lt;span class=&quot;hljs-built_in&quot;&gt;Match&lt;/span&gt;(input).Value); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;0014.2&quot;&lt;/span&gt;\nConsole.WriteLine(r2.&lt;span class=&quot;hljs-built_in&quot;&gt;Match&lt;/span&gt;(input).Value); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot; 0014&quot;&lt;/span&gt;\n\ninput = &lt;span class=&quot;hljs-string&quot;&gt;&quot;  0014.2&quot;&lt;/span&gt;;\n\nConsole.WriteLine(r1.&lt;span class=&quot;hljs-built_in&quot;&gt;Match&lt;/span&gt;(input).Value); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;0014.2&quot;&lt;/span&gt;\nConsole.WriteLine(r2.&lt;span class=&quot;hljs-built_in&quot;&gt;Match&lt;/span&gt;(input).Value); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"23","randomQuestions":[{"title":"Is JavaScript a pass-by-reference or pass-by-value language?","slug":"is-javascript-a-pass-by-reference-or-pass-by-value-language-1657384675679"},{"title":"Importing files from different folder","slug":"importing-files-from-different-folder-1657388203798"},{"title":"How to fix java.lang.UnsupportedClassVersionError: Unsupported major.minor version","slug":"how-to-fix-java.lang.unsupportedclassversionerror:-unsupported-major.minor-version-1657384863422"},{"title":"When does SQLiteOpenHelper onCreate() / onUpgrade() run?","slug":"when-does-sqliteopenhelper-oncreate()-onupgrade()-run-1657384883864"},{"title":"How to serve static files in Flask","slug":"how-to-serve-static-files-in-flask-1657387862496"},{"title":"How to remove all duplicates from an array of objects?","slug":"how-to-remove-all-duplicates-from-an-array-of-objects-1657388256190"},{"title":"Using LIMIT within GROUP BY to get N results per group?","slug":"using-limit-within-group-by-to-get-n-results-per-group-1657388324167"},{"title":"Add a property to a JavaScript object using a variable as the name?","slug":"add-a-property-to-a-javascript-object-using-a-variable-as-the-name-1657388425650"},{"title":"What methods of ‚Äòclearfix‚Äô can I use?","slug":"what-methods-of-'clearfix'-can-i-use-1657387672727"},{"title":"Is Java \"pass-by-reference\" or \"pass-by-value\"?","slug":"is-java-\"pass-by-reference\"-or-\"pass-by-value\"-1657384319828"},{"title":"Why does the order in which libraries are linked sometimes cause errors in GCC?","slug":"why-does-the-order-in-which-libraries-are-linked-sometimes-cause-errors-in-gcc-1657387609554"},{"title":"Where and why do I have to put the \"template\" and \"typename\" keywords?","slug":"where-and-why-do-i-have-to-put-the-\"template\"-and-\"typename\"-keywords-1657384467606"},{"title":"Can a local variable's memory be accessed outside its scope?","slug":"can-a-local-variable's-memory-be-accessed-outside-its-scope-1657384460386"},{"title":"Percentage Height HTML 5/CSS","slug":"percentage-height-html-5css-1657387471048"},{"title":"Reference: mod_rewrite, URL rewriting and \"pretty links\" explained","slug":"reference:-mod_rewrite-url-rewriting-and-\"pretty-links\"-explained-1657384905504"},{"title":"Dynamically select data frame columns using $ and a character value","slug":"dynamically-select-data-frame-columns-using-dollar-and-a-character-value-1657387836662"},{"title":"Example images for code and mark-up Q&As [closed]","slug":"example-images-for-code-and-mark-up-qandas-closed-1657387690222"},{"title":"What is the difference between public, protected, package-private and private in Java?","slug":"what-is-the-difference-between-public-protected-package-private-and-private-in-java-1657387376262"},{"title":"How can I avoid Java code in JSP files, using JSP 2?","slug":"how-can-i-avoid-java-code-in-jsp-files-using-jsp-2-1657384618866"},{"title":"How to remove \"noise\" from GCC/clang assembly output?","slug":"how-to-remove-\"noise\"-from-gccclang-assembly-output-1657387612391"}]},"__N_SSG":true}