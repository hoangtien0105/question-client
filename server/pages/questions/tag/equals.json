{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;Why reinvent the wheel? Give &lt;a href=&quot;http://lodash.com/docs#isEqual&quot; rel=&quot;noreferrer&quot;&gt;Lodash&lt;/a&gt; a try. It has a number of must-have functions such as &lt;a href=&quot;http://lodash.com/docs#isEqual&quot; rel=&quot;noreferrer&quot;&gt;isEqual()&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.&lt;span class=&quot;hljs-title function_&quot;&gt;isEqual&lt;/span&gt;(object, other);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will brute force check each key value - just like the other examples on this page - using &lt;a href=&quot;http://en.wikipedia.org/wiki/ECMAScript#Versions&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript&amp;nbsp;5&lt;/a&gt; and native optimizations if they&apos;re available in the browser.&lt;/p&gt;\n\n&lt;p&gt;Note: Previously this answer recommended &lt;a href=&quot;http://underscorejs.org/&quot; rel=&quot;noreferrer&quot;&gt;Underscore.js&lt;/a&gt;, but &lt;a href=&quot;http://lodash.com&quot; rel=&quot;noreferrer&quot;&gt;lodash&lt;/a&gt; has done a better job of getting bugs fixed and addressing issues with consistency.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;The short answer&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The simple answer is: No, there is no generic means to determine that an object is equal to another in the sense you mean. The exception is when you are strictly thinking of an object being typeless.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The long answer&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The concept is that of an Equals method that compares two different instances of an object to indicate whether they are equal at a value level. However, it is up to the specific type to define how an &lt;code&gt;Equals&lt;/code&gt; method should be implemented. An iterative comparison of attributes that have primitive values may not be enough: an object may contain attributes which are not relevant to equality. For example,&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;)\n {\n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c;\n     &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getCLazy&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n         &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) c = a * b &lt;span class=&quot;hljs-comment&quot;&gt;// imagine * is really expensive&lt;/span&gt;\n         &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c;\n     }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In this above case, &lt;code&gt;c&lt;/code&gt; is not really important to determine whether any two instances of MyClass are equal, only &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are important. In some cases &lt;code&gt;c&lt;/code&gt; might vary between instances and yet not be significant during comparison.&lt;/p&gt;\n&lt;p&gt;Note this issue applies when members may themselves also be instances of a type and these each would all be required to have a means of determining equality.&lt;/p&gt;\n&lt;p&gt;Further complicating things is that in JavaScript the distinction between data and method is blurred.&lt;/p&gt;\n&lt;p&gt;An object may reference a method that is to be called as an event handler, and this would likely not be considered part of its &apos;value state&apos;. Whereas another object may well be assigned a function that performs an important calculation and thereby makes this instance different from others simply because it references a different function.&lt;/p&gt;\n&lt;p&gt;What about an object that has one of its existing prototype methods overridden by another function? Could it still be considered equal to another instance that it otherwise identical? That question can only be answered in each specific case for each type.&lt;/p&gt;\n&lt;p&gt;As stated earlier, the exception would be a strictly typeless object. In which case the only sensible choice is an iterative and recursive comparison of each member. Even then one has to ask what is the &apos;value&apos; of a function?&lt;/p&gt;\n    ","\n&lt;p&gt;The default equality operator in JavaScript for Objects yields true when they refer to the same location in memory.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; z = x;\n\nx === y; &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; false&lt;/span&gt;\nx === z; &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you require a different equality operator you&apos;ll need to add an &lt;code&gt;equals(other)&lt;/code&gt; method, or something like it to your classes and the specifics of your problem domain will determine what exactly that means.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a playing card example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Card&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;rank, suit&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;rank&lt;/span&gt; = rank;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;suit&lt;/span&gt; = suit;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;equals&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;other&lt;/span&gt;) {\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; other.&lt;span class=&quot;hljs-property&quot;&gt;rank&lt;/span&gt; == &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;rank&lt;/span&gt; &amp;amp;&amp;amp; other.&lt;span class=&quot;hljs-property&quot;&gt;suit&lt;/span&gt; == &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;suit&lt;/span&gt;;\n  };\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; queenOfClubs = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Card&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; kingOfSpades = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Card&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;S&quot;&lt;/span&gt;);\n\nqueenOfClubs.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(kingOfSpades); &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; false&lt;/span&gt;\nkingOfSpades.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Card&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;S&quot;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you are working in &lt;a href=&quot;http://docs.angularjs.org&quot; rel=&quot;noreferrer&quot;&gt;AngularJS&lt;/a&gt;, the &lt;code&gt;angular.equals&lt;/code&gt; function will determine if two objects are equal. In &lt;a href=&quot;http://emberjs.com/api/&quot; rel=&quot;noreferrer&quot;&gt;Ember.js&lt;/a&gt; use &lt;code&gt;isEqual&lt;/code&gt;.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;angular.equals&lt;/code&gt; - See the &lt;a href=&quot;http://docs.angularjs.org/api/angular.equals&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt; or &lt;a href=&quot;https://github.com/angular/angular.js/blob/6c59e770084912d2345e7f83f983092a2d305ae3/src/Angular.js#L670&quot; rel=&quot;noreferrer&quot;&gt;source&lt;/a&gt; for more on this method. It does a deep compare on arrays too.&lt;/li&gt;\n&lt;li&gt;Ember.js &lt;code&gt;isEqual&lt;/code&gt; - See the &lt;a href=&quot;http://emberjs.com/api/#method_isEqual&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt; or &lt;a href=&quot;https://github.com/emberjs/ember.js/blob/dfbdbea00bb94f3c1620bd09145540a8bbb8e224/packages/ember-runtime/lib/is-equal.js&quot; rel=&quot;noreferrer&quot;&gt;source&lt;/a&gt; for more on this method. It does not do a deep compare on arrays.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; purple = [{&lt;span class=&quot;hljs-string&quot;&gt;&quot;purple&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;drank&quot;&lt;/span&gt;}];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; drank = [{&lt;span class=&quot;hljs-string&quot;&gt;&quot;purple&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;drank&quot;&lt;/span&gt;}];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(angular.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(purple, drank)) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;got dat&apos;&lt;/span&gt;);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is my version. It is using new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/keys&quot; rel=&quot;noreferrer&quot;&gt;Object.keys&lt;/a&gt; feature that is introduced in ES5 and ideas/tests from &lt;a href=&quot;https://stackoverflow.com/a/3849480/1414809&quot;&gt;+&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/6713782/1414809&quot;&gt;+&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/5522917/1414809&quot;&gt;+&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;use strict&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || x === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; || y === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || y === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x === y; }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// after this just checking type of one would be enough&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; !== y.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// if they are functions, they should exactly refer to same one (because of closures)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x === y; }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// if they are regexps, they should exactly refer to same one (it is hard to better equality check on current ES)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x === y; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x === y || x.&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;() === y.&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;()) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(x) &amp;amp;&amp;amp; x.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; !== y.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// if they are dates, they must had equal valueOf&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// if they are strictly equal, they both need to be object at least&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(x &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;)) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(y &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;)) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// recursive object equality check&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(x);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(y).&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; p.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(i) !== -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; }) &amp;amp;&amp;amp;\n        p.&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(x[i], y[i]); });\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/// The borrowed tests, run them by clicking &quot;Run code snippet&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; printResult = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x) { &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;div style=&quot;color: green;&quot;&amp;gt;Passed&amp;lt;/div&amp;gt;&apos;&lt;/span&gt;); }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;div style=&quot;color: red;&quot;&amp;gt;Failed&amp;lt;/div&amp;gt;&apos;&lt;/span&gt;); }\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; assert = { &lt;span class=&quot;hljs-attr&quot;&gt;isTrue&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;printResult&lt;/span&gt;(x); }, &lt;span class=&quot;hljs-attr&quot;&gt;isFalse&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;printResult&lt;/span&gt;(!x); } }\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/&lt;/span&gt;, &lt;span class=&quot;hljs-regexp&quot;&gt;/abc/&lt;/span&gt;));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/abc/&lt;/span&gt;, &lt;span class=&quot;hljs-regexp&quot;&gt;/123/&lt;/span&gt;));\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = &lt;span class=&quot;hljs-regexp&quot;&gt;/abc/&lt;/span&gt;;\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(r, r));\n\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;));\n\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;([],[]));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]));\n\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({},{}));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}));\n\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;mhc&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;arb&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;}},{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;mhc&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;arb&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;}}));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;mhc&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;arb&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;}},{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;mhc&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;arb&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;}}));\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;equals&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, obj); };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; assertFalse = assert.&lt;span class=&quot;hljs-property&quot;&gt;isFalse&lt;/span&gt;,\n    assertTrue = assert.&lt;span class=&quot;hljs-property&quot;&gt;isTrue&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;({}.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;({}.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;([].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;([]));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-03-31&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-03-31&quot;&lt;/span&gt;)));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-03-31&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1970-01-01&quot;&lt;/span&gt;)));\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;({}.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({}));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}));\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;({&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;mhc&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;arb&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;}}.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;mhc&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;arb&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;}}));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;({&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;mhc&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;arb&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;}}.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;mhc&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;arb&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;}}));\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; e = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n    }\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n    }\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; l = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(a.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(b));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;(a.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(c));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;(c.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(d));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;(a.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(e));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertTrue&lt;/span&gt;(i.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(j));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;(d.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(k));\n&lt;span class=&quot;hljs-title function_&quot;&gt;assertFalse&lt;/span&gt;(k.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(l));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// from comments on stackoverflow post&lt;/span&gt;\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], { &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; }));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1234&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;1234&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// no two different function is equal really, they capture their context variables&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// so even if they have same toString(), they won&apos;t have same functionality&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; func = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; func2 = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; };\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(func, func));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(func, func2));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: func } }, { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: func } }));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: func } }, { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: func2 } }));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Short functional &lt;code&gt;deepEqual&lt;/code&gt; implementation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepEqual&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (x &amp;amp;&amp;amp; y &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; x === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; y === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) ?\n    (&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(x).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(y).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) &amp;amp;&amp;amp;\n      &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(x).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;isEqual, key&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; isEqual &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_&quot;&gt;deepEqual&lt;/span&gt;(x[key], y[key]);\n      }, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) : (x === y);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: version 2, using jib&apos;s suggestion and ES6 arrow functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepEqual&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ok = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;keys&lt;/span&gt;, tx = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; x, ty = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; y;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x &amp;amp;&amp;amp; y &amp;amp;&amp;amp; tx === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; &amp;amp;&amp;amp; tx === ty ? (\n    &lt;span class=&quot;hljs-title function_&quot;&gt;ok&lt;/span&gt;(x).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;hljs-title function_&quot;&gt;ok&lt;/span&gt;(y).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;amp;&amp;amp;\n      &lt;span class=&quot;hljs-title function_&quot;&gt;ok&lt;/span&gt;(x).&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepEqual&lt;/span&gt;(x[key], y[key]))\n  ) : (x === y);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you are using a JSON library, you can encode each object as JSON, then compare the resulting strings for equality.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj1={&lt;span class=&quot;hljs-attr&quot;&gt;test&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj2={&lt;span class=&quot;hljs-attr&quot;&gt;test&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;value2&quot;&lt;/span&gt;};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;encode&lt;/span&gt;(obj1)===&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;encode&lt;/span&gt;(obj2));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;NOTE: While this answer will work in many cases, as several people have pointed out in the comments it&apos;s problematic for a variety of reasons. In pretty much all cases you&apos;ll want to find a more robust solution.&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In Node.js, you can use its native &lt;code&gt;require(&quot;assert&quot;).deepStrictEqual&lt;/code&gt;. More info: \n&lt;a href=&quot;http://nodejs.org/api/assert.html&quot; rel=&quot;noreferrer&quot;&gt;http://nodejs.org/api/assert.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; assert = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;assert&quot;&lt;/span&gt;);\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;deepStrictEqual&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}); &lt;span class=&quot;hljs-comment&quot;&gt;// will throw AssertionError&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another example that returns &lt;code&gt;true&lt;/code&gt; / &lt;code&gt;false&lt;/code&gt; instead of returning errors:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; assert = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;assert&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepEqual&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n      assert.&lt;span class=&quot;hljs-title function_&quot;&gt;deepEqual&lt;/span&gt;(a, b);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (error.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&quot;AssertionError&quot;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; error;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Are you trying to test if two objects are the equal? ie: their properties are equal?&lt;/p&gt;\n\n&lt;p&gt;If this is the case, you&apos;ll probably have noticed this situation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = { foo : &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = { foo : &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt; };\nalert (a == b ? &lt;span class=&quot;hljs-string&quot;&gt;&quot;Equal&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;Not equal&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Not equal&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you might have to do something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj1, obj2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj1) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj1.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(i)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!obj2.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(i)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj1[i] != obj2[i]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj2) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj2.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(i)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!obj1.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(i)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj1[i] != obj2[i]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Obviously that function could do with quite a bit of optimisation, and the ability to do deep checking (to handle nested objects: &lt;code&gt;var a = { foo : { fu : &quot;bar&quot; } }&lt;/code&gt;) but you get the idea.&lt;/p&gt;\n\n&lt;p&gt;As FOR pointed out, you might have to adapt this for your own purposes, eg: different classes may have different definitions of &quot;equal&quot;. If you&apos;re just working with plain objects, the above may suffice, otherwise a custom &lt;code&gt;MyClass.equals()&lt;/code&gt; function may be the way to go.&lt;/p&gt;\n    ","\n&lt;p&gt;For those of you using Node, there is a convenient method called &lt;code&gt;isDeepStrictEqual&lt;/code&gt; on the native&lt;code&gt;util&lt;/code&gt; library that can achieve this.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; util = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;util&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj1 = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;baz&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj2 = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;baz&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n};\n\n\nobj1 == obj2 &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\nutil.&lt;span class=&quot;hljs-title function_&quot;&gt;isDeepStrictEqual&lt;/span&gt;(obj1, obj2) &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://nodejs.org/api/util.html#util_util_isdeepstrictequal_val1_val2&quot; rel=&quot;noreferrer&quot;&gt;https://nodejs.org/api/util.html#util_util_isdeepstrictequal_val1_val2&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you have a deep copy function handy, you can use the following trick to &lt;em&gt;still&lt;/em&gt; use &lt;code&gt;JSON.stringify&lt;/code&gt; while matching the order of properties:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj1, obj2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_equals&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj1, obj2&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj1)\n            === &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;($.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, {}, obj1, obj2));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_equals&lt;/span&gt;(obj1, obj2) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_&quot;&gt;_equals&lt;/span&gt;(obj2, obj1);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Demo: &lt;a href=&quot;http://jsfiddle.net/CU3vb/3/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/CU3vb/3/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Rationale:&lt;/p&gt;\n\n&lt;p&gt;Since the properties of &lt;code&gt;obj1&lt;/code&gt; are copied to the clone one by one, their order in the clone will be preserved. And when the properties of &lt;code&gt;obj2&lt;/code&gt; are copied to the clone, since properties already existing in &lt;code&gt;obj1&lt;/code&gt; will simply be overwritten, their orders in the clone will be preserved.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Simplest&lt;/strong&gt; and &lt;strong&gt;logical&lt;/strong&gt; solutions for comparing everything Like &lt;strong&gt;Object, Array, String, Int...&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;JSON.stringify({a: val1}) === JSON.stringify({a: val2})&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Note: &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;you need to replace &lt;code&gt;val1&lt;/code&gt;and &lt;code&gt;val2&lt;/code&gt; with your Object&lt;/li&gt;\n&lt;li&gt;for the object, you have to sort(by key) recursively for both side objects&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;This question has more than 30 answers already.  I am going to summarize and explain them (with a &quot;my father&quot; analogy) and add my suggested solution.&lt;/p&gt;\n&lt;p&gt;You have &lt;strong&gt;4+1 classes of solutions&lt;/strong&gt;:&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;1) Use a hacky incomplete quick one-liner&lt;/h1&gt;\n&lt;p&gt;&lt;strong&gt;Good if you are in a rush and 99% correctness works.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Examples of this is, &lt;code&gt;JSON.stringify()&lt;/code&gt; suggested &lt;a href=&quot;https://stackoverflow.com/a/46645497/2321594&quot;&gt;by Pratik Bhalodiya&lt;/a&gt;, or &lt;code&gt;JSON.encode&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.com/a/201305/2321594&quot;&gt;by Joel Anair&lt;/a&gt;, or &lt;code&gt;.toString()&lt;/code&gt;, or other methods that transform your objects into a String and then compare the two Strings using &lt;code&gt;===&lt;/code&gt; character by character.&lt;/p&gt;\n&lt;p&gt;The drawback, however, is that there is no globally standard unique representation of an Object in String.  e.g. &lt;code&gt;{ a: 5, b: 8}&lt;/code&gt; and &lt;code&gt;{b: 8 and a: 5 }&lt;/code&gt; are equal.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Fast, quick.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Cons:&lt;/strong&gt; &lt;em&gt;Hopefully&lt;/em&gt; works!  &lt;strong&gt;It will not work if the environment/browser/engine memorizes the ordering for objects (e.g. Chrome/V8) and the order of the keys are different&lt;/strong&gt; (Thanks to &lt;a href=&quot;https://stackoverflow.com/users/1712332/eksapsy&quot;&gt;Eksapsy&lt;/a&gt;.) So, not guaranteed at all.  Performance wouldn&apos;t be great either in large objects.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;My Father Analogy&lt;/h3&gt;\n&lt;p&gt;When I am talking about my father, &quot;&lt;strong&gt;my tall handsome father&lt;/strong&gt;&quot; and &quot;&lt;strong&gt;my handsome tall father&lt;/strong&gt;&quot; are the same person!  But the two strings are not the same.&lt;/p&gt;\n&lt;p&gt;Note that there is actually a &lt;strong&gt;correct (standard way) order&lt;/strong&gt; of adjectives in English grammar, which &lt;a href=&quot;https://preply.com/en/blog/2014/02/18/the-correct-order-of-adjectives-in-english-rules-and-examples/#scroll-to-heading-1&quot; rel=&quot;noreferrer&quot;&gt;says&lt;/a&gt; it should be a &quot;handsome tall man,&quot; but you are risking your competency if you blindly assume Javascript engine of iOS 8 Safari is also abiding the same grammar, blindly! #WelcomeToJavascriptNonStandards&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;2) Write your own DIY recursive function&lt;/h1&gt;\n&lt;p&gt;&lt;strong&gt;Good if you are learning.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Examples are &lt;a href=&quot;https://stackoverflow.com/a/32922084/2321594&quot;&gt;atmin&apos;s solution&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The biggest disadvantage is you will definitely miss some edge cases.  Have you considered a &lt;a href=&quot;https://stackoverflow.com/a/2787309/2321594&quot;&gt;self-reference&lt;/a&gt; in object values?  Have you considered &lt;code&gt;NaN&lt;/code&gt;? Have you considered two objects that have the same &lt;code&gt;ownProperties&lt;/code&gt; but different prototypical parents?&lt;/p&gt;\n&lt;p&gt;I would only encourage people to do this if they are practicing and the code is not going to go in production.  That&apos;s the only case that &lt;em&gt;reinventing the wheel&lt;/em&gt; has justifications.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Learning opportunity.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Not reliable.  Takes time and concerns.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;My Father Analogy&lt;/h3&gt;\n&lt;p&gt;It&apos;s like assuming if my dad&apos;s name is &quot;John Smith&quot; and his birthday is &quot;1/1/1970&quot;, then anyone whose name is &quot;John Smith&quot; and is born on &quot;1/1/1970&quot; is my father.&lt;/p&gt;\n&lt;p&gt;That&apos;s usually the case, but what if there are two &quot;John Smith&quot;s born on that day?  If you think you will consider their height, then that&apos;s increasing the accuracy but still not a perfect comparison.&lt;/p&gt;\n&lt;h2&gt;2.1 You limited scope DIY comparator&lt;/h2&gt;\n&lt;p&gt;Rather than going on a wild chase of checking all the properties recursively, one might consider checking only &quot;a limited&quot; number of properties.  For instance, if the objects are &lt;code&gt;User&lt;/code&gt;s, you can compare their &lt;code&gt;emailAddress&lt;/code&gt; field.&lt;/p&gt;\n&lt;p&gt;It&apos;s still not a perfect one, but the benefits over solution #2 are:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;It&apos;s predictable, and it&apos;s less likely to crash.&lt;/li&gt;\n&lt;li&gt;You are driving the &quot;definition&quot; of equality, rather than relying on a wild form and shape of the Object and its prototype and nested properties.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;hr&gt;\n&lt;h1&gt;3) Use a library version of &lt;code&gt;equal&lt;/code&gt; function&lt;/h1&gt;\n&lt;p&gt;&lt;strong&gt;Good if you need a production-level quality, and you cannot change the design of the system.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Examples are &lt;code&gt;_.equal&lt;/code&gt; &lt;a href=&quot;https://lodash.com/docs/4.17.15#isEqual&quot; rel=&quot;noreferrer&quot;&gt;of lodash&lt;/a&gt;, already in &lt;a href=&quot;https://stackoverflow.com/a/3198202/2321594&quot;&gt;coolaj86&apos;s answer&lt;/a&gt; or Angular&apos;s or Ember&apos;s as mentioned in &lt;a href=&quot;https://stackoverflow.com/a/19055489/2321594&quot;&gt;Tony Harvey&apos;s answer&lt;/a&gt; or Node&apos;s &lt;a href=&quot;https://stackoverflow.com/a/26016880/2321594&quot;&gt;by Rafael Xavier&lt;/a&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Pros:&lt;/strong&gt; It&apos;s what everyone else does.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Cons:&lt;/strong&gt; External dependency, which can cost you extra memory/CPU/Security concerns, even a little bit.  Also, can still miss some edge cases (e.g. whether two objects having same &lt;code&gt;ownProperties&lt;/code&gt; but different prototypical parents should be considered the same or not.) Finally, &lt;strong&gt;you &lt;em&gt;might&lt;/em&gt; be unintentionally band-aiding an underlying design problem with this; just saying!&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;My Father Analogy&lt;/h3&gt;\n&lt;p&gt;It&apos;s like paying an agency to find my biological father, based on his phone, name, address, etc.&lt;/p&gt;\n&lt;p&gt;It&apos;s gonna cost more, and it&apos;s probably more accurate than myself running the background check, but doesn&apos;t cover edge cases like when my father is immigrant/asylum and his birthday is unknown!&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;4) Use an IDentifier in the Object&lt;/h1&gt;\n&lt;p&gt;&lt;strong&gt;Good if you [still] can change the design of the system (objects you are dealing with) and you want your code to last long.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;It&apos;s not applicable in all cases, and might not be very performant.  However, it&apos;s a very reliable solution, if you can make it.&lt;/p&gt;\n&lt;p&gt;The solution is, every &lt;code&gt;object&lt;/code&gt; in the system will have a &lt;strong&gt;unique&lt;/strong&gt; identifier along with all the other properties.  The &lt;em&gt;uniqueness&lt;/em&gt; of the identifier will be guaranteed at the time of generation.  And you will use this ID (also known as UUID/GUID -- &lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier&quot; rel=&quot;noreferrer&quot;&gt;Globally/Universally Unique Identifier&lt;/a&gt;) when it comes to comparing two objects.  i.e. They are equal if and only if these IDs are equal.&lt;/p&gt;\n&lt;p&gt;The IDs can be simple &lt;code&gt;auto_incremental&lt;/code&gt; numbers, or a string generated via &lt;a href=&quot;https://www.npmjs.com/package/uuid&quot; rel=&quot;noreferrer&quot;&gt;a library&lt;/a&gt; (advised) or &lt;a href=&quot;https://stackoverflow.com/questions/105034/how-to-create-guid-uuid&quot;&gt;a piece of code&lt;/a&gt;.  All you need to do is make sure it&apos;s always unique, which in case of &lt;code&gt;auto_incremental&lt;/code&gt; it can be built-in, or in case of UUID, can be checked will all existing values (e.g. MySQL&apos;s &lt;code&gt;UNIQUE&lt;/code&gt; column attribute) or simply (if coming from a library) be relied upon giving the extremely low likelihood of a collision.&lt;/p&gt;\n&lt;p&gt;Note that you also need to store the ID with the object at all times (to guarantee its uniqueness), and computing it in real-time might not be the best approach.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Reliable, efficient, not dirty, modern.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Needs extra space.  Might need a redesign of the system.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;My Father Analogy&lt;/h3&gt;\n&lt;p&gt;It&apos;s like known my father&apos;s Social Security Number is 911-345-9283, so anyone who has this SSN is my father, and anyone who claims to be my father must have this SSN.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;Conclusion&lt;/h1&gt;\n&lt;p&gt;I personally prefer solution #4 (ID) over them all for accuracy and reliability.  If it&apos;s not possible I&apos;d go with #2.1 for predictability, and then #3.  If neither is possible, #2 and finally #1.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object1 = {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;humza&quot;&lt;/span&gt; , gender : &lt;span class=&quot;hljs-string&quot;&gt;&quot;male&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object2 = {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;humza&quot;&lt;/span&gt; , gender : &lt;span class=&quot;hljs-string&quot;&gt;&quot;male&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(object1).&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt;) =&amp;gt;&lt;/span&gt;  object1[key] === object2[key])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Result will be &lt;strong&gt;true&lt;/strong&gt; if object1 has same values on object2.&lt;/p&gt;\n    ","\n&lt;p&gt;I use this &lt;code&gt;comparable&lt;/code&gt; function to produce copies of my objects that are JSON comparable:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;comparable&lt;/span&gt; = o =&amp;gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; o != &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; || !o)? o :\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(o).&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;c, key&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (c[key] = &lt;span class=&quot;hljs-title function_&quot;&gt;comparable&lt;/span&gt;(o[key]), c), {});\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Demo:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;e&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;5&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; } };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = { &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;e&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;5&apos;&lt;/span&gt; }, &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;comparable&lt;/span&gt;(a)));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;comparable&lt;/span&gt;(b)));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;comparable&lt;/span&gt;(a)) == &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;comparable&lt;/span&gt;(b)));&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Comes in handy in tests (most test frameworks have an &lt;code&gt;is&lt;/code&gt; function). E.g.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;is&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;comparable&lt;/span&gt;(x)), &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;comparable&lt;/span&gt;(y)), &lt;span class=&quot;hljs-string&quot;&gt;&apos;x must match y&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If a difference is caught, strings get logged, making differences spottable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;x must match y\ngot      {&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:{&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;},&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;:{&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;}},\nexpected {&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:{&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;},&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;:{&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;}}.\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Heres&apos;s a solution in ES6/ES2015 using a functional-style approach:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;typeOf&lt;/span&gt; = x =&amp;gt; \n  ({}).&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;\n      .&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(x)\n      .&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\[object (\\w+)\\]/&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;areSimilar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;everyKey&lt;/span&gt; = f =&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(a).&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(f)\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;typeOf&lt;/span&gt;(a)) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Array&apos;&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === b.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;amp;&amp;amp;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;everyKey&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;k&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;areSimilar&lt;/span&gt;(a.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;()[k], b.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;()[k]));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Object&apos;&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(a).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(b).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;amp;&amp;amp;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;everyKey&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;k&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;areSimilar&lt;/span&gt;(a[k], b[k]));\n    &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a === b;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsbin.com/yowasucube/edit?js,console&quot; rel=&quot;noreferrer&quot;&gt;demo available here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I don&apos;t know if anyone&apos;s posted anything similar to this, but here&apos;s a function I made to check for object equalities.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectsAreEqual&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; prop &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(prop)) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (b.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(prop)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; a[prop] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_&quot;&gt;objectsAreEqual&lt;/span&gt;(a[prop], b[prop])) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a[prop] !== b[prop]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n      }\n    }\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, it&apos;s recursive, so it can also check for deep equality, if that&apos;s what you call it.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;ES6:&lt;/strong&gt; The minimum code I could get it done, is this. It do deep comparison recursively by stringifying all key value array sorted representing the object, the only limitation is no methods or symbols are compare.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareObjects&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt; { \n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;s&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;entries&lt;/span&gt;(o).&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; { \n     &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;) i[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-title function_&quot;&gt;s&lt;/span&gt;(i[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i \n  }) \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;s&lt;/span&gt;(a)) === &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;s&lt;/span&gt;(b))\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;compareObjects&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}}, {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;},&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; This function is doing a JSON.stringfy in an &lt;strong&gt;ARRAY&lt;/strong&gt; with the keys sorted and &lt;strong&gt;NOT&lt;/strong&gt; in the object it self:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;[&quot;a&quot;, [&quot;b&quot;, 1]]&lt;/li&gt;\n&lt;li&gt;[&quot;b&quot;, 4]&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Just wanted to contribute my version of objects comparison utilizing some es6 features. It doesn&apos;t take an order into account. After converting all if/else&apos;s to ternary I&apos;ve came with following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;areEqual&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj1, obj2&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(obj1).&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj2.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(key) ?\n                &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj1[key] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; ?\n                    &lt;span class=&quot;hljs-title function_&quot;&gt;areEqual&lt;/span&gt;(obj1[key], obj2[key]) :\n                obj1[key] === obj2[key] :\n                &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n        }\n    )\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;you can use &lt;code&gt;_.isEqual(obj1, obj2)&lt;/code&gt; from the underscore.js library.&lt;/p&gt;\n\n&lt;p&gt;Here is an example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; stooge = {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;moe&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;luckyNumbers&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;]};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clone  = {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;moe&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;luckyNumbers&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;]};\nstooge == clone;\n=&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;isEqual&lt;/span&gt;(stooge, clone);\n=&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See the official documentation from here: &lt;a href=&quot;http://underscorejs.org/#isEqual&quot; rel=&quot;noreferrer&quot;&gt;http://underscorejs.org/#isEqual&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Below is a short implementation which uses &lt;code&gt;JSON.stringify&lt;/code&gt; but sorts the keys as @Jor suggested &lt;a href=&quot;https://stackoverflow.com/a/53593328/2604492&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Some tests were taken from the answer of @EbrahimByagowi &lt;a href=&quot;https://stackoverflow.com/a/16788517/2604492&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Of course, by using &lt;code&gt;JSON.stringify&lt;/code&gt;, the solution is limited to JSON-serializable types (a string, a number, a JSON object, an array, a boolean, null). Objects like &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, etc. are not supported.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj1, obj2&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;JSONstringifyOrder&lt;/span&gt; = obj =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; keys = {};\n    &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key, value&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n      keys[key] = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj, &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(keys).&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;());\n  };\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;stringifyOrder(obj1) === &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;stringifyOrder(obj2);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/// The borrowed tests, run them by clicking &quot;Run code snippet&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; printResult = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x) { &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;div style=&quot;color: green;&quot;&amp;gt;Passed&amp;lt;/div&amp;gt;&apos;&lt;/span&gt;); }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;div style=&quot;color: red;&quot;&amp;gt;Failed&amp;lt;/div&amp;gt;&apos;&lt;/span&gt;); }\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; assert = { &lt;span class=&quot;hljs-attr&quot;&gt;isTrue&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;printResult&lt;/span&gt;(x); }, &lt;span class=&quot;hljs-attr&quot;&gt;isFalse&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;printResult&lt;/span&gt;(!x); } }\n\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;));\n\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;([],[]));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]));\n\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({},{}));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}));\n\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isTrue&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;mhc&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;arb&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;}},{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;mhc&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;arb&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;}}));\nassert.&lt;span class=&quot;hljs-title function_&quot;&gt;isFalse&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objectEquals&lt;/span&gt;({&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;mhc&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;arb&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;}},{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;mhc&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;arb&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;}}));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;EDIT: This method is quite flawed, and is rife with its own issues. I don&apos;t recommend it, and would appreciate some down-votes! It is problematic because 1) Some things can not be compared (i.e. functions) because they can not be serialized, 2) It isn&apos;t a very fast method of comparing, 3) It has ordering issues, 4) It can have collision issues/false positives if not properly implemented, 5) It can&apos;t check for &quot;exactness&quot; (&lt;code&gt;===&lt;/code&gt;), and instead is based of value equality, which is oftentimes not what is desired in a comparison method.&lt;/p&gt;\n&lt;p&gt;A simple solution to this issue that many people don&apos;t realize is to sort the JSON strings (per character). This is also usually faster than the other solutions mentioned here:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;areEqual&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj1, obj2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj1), b = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj2);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!a) a = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!b) b = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (a.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) == b.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Another useful thing about this method is you can filter comparisons by passing a &quot;replacer&quot; function to the JSON.stringify functions (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Example_of_using_replacer_parameter&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Example_of_using_replacer_parameter&lt;/a&gt;). The following will only compare all objects keys that are named &quot;derp&quot;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;areEqual&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj1, obj2, filter&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj1, filter), b = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj2, filter);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!a) a = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!b) b = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (a.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) == b.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;));\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; equal = &lt;span class=&quot;hljs-title function_&quot;&gt;areEqual&lt;/span&gt;(obj1, obj2, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key, value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (key === &lt;span class=&quot;hljs-string&quot;&gt;&apos;derp&apos;&lt;/span&gt;) ? value : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Assuming that the order of the properties in the object is not changed.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.w3schools.com/js/js_json_stringify.asp&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSON.stringify()&lt;/a&gt; works for deep and non-deep both types of objects, not very sure of performance aspects:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object1 = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object2 = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object3 = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;no value&quot;&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;object1 and object2 are equal: &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(object1) === &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(object2));\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;object2 and object3 are equal: &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(object2) === &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(object3));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Needing a more generic object comparison function than had been posted, I cooked up the following. Critique appreciated...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;equals&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iObj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt; !== iObj.&lt;span class=&quot;hljs-property&quot;&gt;constructor&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; aMemberCount = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(a))\n      &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[a] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; iObj[a] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; ? !&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[a].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(iObj[a]) : &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[a] !== iObj[a])\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    ++aMemberCount;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; iObj)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (iObj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(a))\n      --aMemberCount;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; aMemberCount ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you are comparing JSON objects you can use &lt;a href=&quot;https://github.com/mirek/node-rus-diff&quot; rel=&quot;nofollow&quot;&gt;https://github.com/mirek/node-rus-diff&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;npm install rus-diff\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = {&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}}\nb = {&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}}\nc = {&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rusDiff = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;rus-diff&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;rusDiff&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;rusDiff&lt;/span&gt;(a, b)) &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; false, meaning a and b are equal&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;rusDiff&lt;/span&gt;(a, c)) &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; { &apos;$set&apos;: { &apos;foo.bar&apos;: 2 } }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If two objects are different, a MongoDB compatible &lt;code&gt;{$rename:{...}, $unset:{...}, $set:{...}}&lt;/code&gt; like object is returned.&lt;/p&gt;\n    ","\n&lt;p&gt;I faced the same problem and deccided to write my own solution. But because I want to also compare Arrays with Objects and vice-versa, I crafted a generic solution. I decided to add the functions to the prototype, but one can easily rewrite them to standalone functions. Here is the code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;equals&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;equals&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ar = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(b));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; err = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(key)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; found = ar.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[key]);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(found &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(ar) === &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Object]&quot;&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; ar[&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(ar)[found]];\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                    ar.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(found, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n                }\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                err = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            }\n        }\n    };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(ar).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || err) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;find&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;find&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(i)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i]) === &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Array]&quot;&lt;/span&gt; || &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i]) === &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Object]&quot;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i].&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(v)) {\n                    f = (&lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(i) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;number&quot;&lt;/span&gt;) ? i : &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(i);\n                }\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] === v) {\n                f = (&lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(i) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;number&quot;&lt;/span&gt;) ? i : &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(i);\n            }\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This Algorithm is split into two parts; The equals function itself and a function to find the numeric index of a property in an array / object. The find function is only needed because indexof only finds numbers and strings and no objects .&lt;/p&gt;\n\n&lt;p&gt;One can call it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;h&quot;&lt;/span&gt;}).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;h&quot;&lt;/span&gt;});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function either returns true or false, in this case true.\nThe algorithm als allows comparison between very complex objects:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&quot;w&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;o&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;l&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;answer1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;should be&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;answer2&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}]}).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&quot;w&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;o&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;answer1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;should be&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;answer2&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}, &lt;span class=&quot;hljs-string&quot;&gt;&quot;l&quot;&lt;/span&gt;]})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The upper example will return true, even tho the properties have a different ordering. One small detail to look out for: This code also checks for the same type of two variables, so &quot;3&quot; is not the same as 3.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; std1 = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Abhijeet&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;roll&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; std2 = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Siddharth&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;roll&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(std1) === &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(std2))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;d advise against hashing or serialization (as the JSON solution suggest).  If you need to test if two objects are equal, then you need to define what equals means.  It could be that all data members in both objects match, or it could be that must the memory locations match (meaning both variables reference the same object in memory), or may be that only one data member in each object must match.&lt;/p&gt;\n\n&lt;p&gt;Recently I developed an object whose constructor creates a new id (starting from 1 and incrementing by 1) each time an instance is created.  This object has an isEqual function that compares that id value with the id value of another object and returns true if they match.&lt;/p&gt;\n\n&lt;p&gt;In that case I defined &quot;equal&quot; as meaning the the id values match.  Given that each instance has a unique id this could be used to enforce the idea that matching objects also occupy the same memory location.  Although that is not necessary.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s useful to consider two objects equal if they have all the same values for all properties and recursively for all nested objects and arrays.  I also consider the following two objects equal:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = {&lt;span class=&quot;hljs-attr&quot;&gt;p1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = {&lt;span class=&quot;hljs-attr&quot;&gt;p1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;p2&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Similarly, arrays can have &quot;missing&quot; elements and undefined elements.  I would treat those the same as well:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A function that implements this definition of equality:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isEqual&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a === b) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;generalType&lt;/span&gt;(a) != &lt;span class=&quot;hljs-title function_&quot;&gt;generalType&lt;/span&gt;(b)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a == b) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; a != &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// null != {}&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; != b &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt; || b &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt; != b &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt; ||\n            a.&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;() != b.&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; allKeys = [].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(a), &lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(b));\n    &lt;span class=&quot;hljs-title function_&quot;&gt;uniqueArray&lt;/span&gt;(allKeys);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; allKeys.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; prop = allKeys[i];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_&quot;&gt;isEqual&lt;/span&gt;(a[prop], b[prop])) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/pageforest/source/browse/appengine/static/src/js/base.js&quot; rel=&quot;nofollow noreferrer&quot;&gt;Source code&lt;/a&gt; (including the helper functions, generalType and uniqueArray):\n&lt;a href=&quot;http://code.google.com/p/pageforest/source/browse/appengine/static/src/js/tests/test-base.js&quot; rel=&quot;nofollow noreferrer&quot;&gt;Unit Test&lt;/a&gt; and &lt;a href=&quot;http://pageforest.googlecode.com/hg/appengine/static/src/js/tests/test-runner.html#base&quot; rel=&quot;nofollow noreferrer&quot;&gt;Test Runner here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m making the following assumptions with this function:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;You control the objects you are comparing and you only have primitive values (ie. not nested objects, functions, etc.).&lt;/li&gt;\n&lt;li&gt;Your browser has support for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot; rel=&quot;nofollow&quot;&gt;Object.keys&lt;/a&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This should be treated as a demonstration of a simple strategy.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Checks the equality of two objects that contain primitive values. (ie. no nested objects, functions, etc.)\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt;} &lt;span class=&quot;hljs-variable&quot;&gt;object1&lt;/span&gt;\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt;} &lt;span class=&quot;hljs-variable&quot;&gt;object2&lt;/span&gt;\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;Boolean&lt;/span&gt;} [order_matters] Affects the return value of unordered objects. (ex. {a:1, b:2} and {b:2, a:1}).\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@returns&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;Boolean&lt;/span&gt;}\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isEqual&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; object1, object2, order_matters &lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; keys1 = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(object1),\n        keys2 = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(object2),\n        i, key;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Test 1: Same number of elements&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( keys1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; != keys2.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; ) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If order doesn&apos;t matter isEqual({a:2, b:1}, {b:1, a:2}) should return true.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// keys1 = Object.keys({a:2, b:1}) = [&quot;a&quot;,&quot;b&quot;];&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// keys2 = Object.keys({b:1, a:2}) = [&quot;b&quot;,&quot;a&quot;];&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This is why we are sorting keys1 and keys2.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( !order_matters ) {\n        keys1.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;();\n        keys2.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Test 2: Same keys&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; keys1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++ ) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( keys1[i] != keys2[i] ) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Test 3: Values&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; keys1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++ ) {\n        key = keys1[i];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( object1[key] != object2[key] ) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also look into this question &lt;a href=&quot;http://stackoverflow.com/q/1068834/1671639&quot;&gt;stackoverflow.com/q/1068834/1671639&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1671639/praveen&quot; title=&quot;53,229 reputation&quot; class=&quot;comment-user&quot;&gt;Praveen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment36022084_201183&quot;&gt;&lt;span title=&quot;2014-05-06 09:48:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 6, 2014 at 9:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that, even in Java, &lt;code&gt;a.hashCode() == b.hashCode()&lt;/code&gt; does &lt;i&gt;not&lt;/i&gt; imply that &lt;code&gt;a&lt;/code&gt; is equal to &lt;code&gt;b&lt;/code&gt;. It&apos;s a necessary condition, not a sufficient one.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/87698/heinzi&quot; title=&quot;160,059 reputation&quot; class=&quot;comment-user&quot;&gt;Heinzi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment40750904_201183&quot;&gt;&lt;span title=&quot;2014-09-24 13:34:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 24, 2014 at 13:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 4 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you HAVE to compare objects in your code than you are probably writing your code wrong. The better question might be: &quot;How can I write this code so I don&apos;t have to compare objects?&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2379136/th317erd&quot; title=&quot;306 reputation&quot; class=&quot;comment-user&quot;&gt;th317erd&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment72033850_201183&quot;&gt;&lt;span title=&quot;2017-02-24 17:50:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 24, 2017 at 17:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@th317erd can you please explain yourself?...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2632991/el-mac&quot; title=&quot;2,987 reputation&quot; class=&quot;comment-user&quot;&gt;El Mac&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment87677240_201183&quot;&gt;&lt;span title=&quot;2018-05-14 12:44:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 14, 2018 at 12:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ElMac I can&apos;t speak directly for the person but I do agree with the statement and my thought process is that very often JS objects are fairly big. You rarely have something with very few properties like &lt;code&gt;person = { name: &quot;fred&quot;, age: 42 }&lt;/code&gt;. If you do and you have to search them by exact equality, it seems like a waste. Most often your plain objects will still have a lot of properties - and one either one is uinique or you want one to be unique, e.g., ID of some sort. You can then search by that and you don&apos;t need to check if every single thing matches.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3689450/vlaz&quot; title=&quot;23,302 reputation&quot; class=&quot;comment-user&quot;&gt;VLAZ&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment87694166_201183&quot;&gt;&lt;span title=&quot;2018-05-14 21:01:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 14, 2018 at 21:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Underscore&apos;s isEqual function is very nice (but you do have to pull in their library to use it - about 3K gzipped).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/178521/mckoss&quot; title=&quot;6,474 reputation&quot; class=&quot;comment-user&quot;&gt;mckoss&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3765914_3198202&quot;&gt;&lt;span title=&quot;2010-08-28 01:16:06Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Aug 28, 2010 at 1:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Even if you can&apos;t afford to have underscore as a dependency, pull the isEqual function out, satisfy the license requirements and move on. It&apos;s by far the most comprehensive equality test mentioned on stackoverflow.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/327581/dale-anderson&quot; title=&quot;1,631 reputation&quot; class=&quot;comment-user&quot;&gt;Dale Anderson&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment16527011_3198202&quot;&gt;&lt;span title=&quot;2012-09-07 10:15:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 7, 2012 at 10:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;There&apos;s a fork of Underscore called &lt;a href=&quot;http://lodash.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;LoDash&lt;/a&gt; and that author is very concerned with consistency issues such as that. Test with LoDash and see what you get.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/151312/coolaj86&quot; title=&quot;69,898 reputation&quot; class=&quot;comment-user&quot;&gt;coolaj86&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment20794141_3198202&quot;&gt;&lt;span title=&quot;2013-02-12 18:32:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 12, 2013 at 18:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@mckoss you can use the standalone module if you don&apos;t want the entire library &lt;a href=&quot;https://www.npmjs.com/package/lodash.isequal&quot; rel=&quot;nofollow noreferrer&quot;&gt;npmjs.com/package/lodash.isequal&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/562465/rob-fox&quot; title=&quot;5,165 reputation&quot; class=&quot;comment-user&quot;&gt;Rob Fox&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49207819_3198202&quot;&gt;&lt;span title=&quot;2015-06-01 08:20:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 1, 2015 at 8:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How is saying &quot;oh, just use X package!&quot; helpful? You&apos;re telling the person to abstract and bulk their code with no real explanation of how to actually get to a solution themselves. I&apos;m not saying don&apos;t use packages or suggest them but the JavaScript ecosystem is fickle, you should promote an actual understanding of a solution, not just a way to temporarily get around it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3700849/zfrisch&quot; title=&quot;8,158 reputation&quot; class=&quot;comment-user&quot;&gt;zfrisch&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment83802397_3198202&quot;&gt;&lt;span title=&quot;2018-01-23 16:44:21Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 23, 2018 at 16:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you&apos;re using underscore, you can just do &lt;code&gt;_.isEqual(obj1, obj2);&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/33522/chovy&quot; title=&quot;66,457 reputation&quot; class=&quot;comment-user&quot;&gt;chovy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment26970154_201471&quot;&gt;&lt;span title=&quot;2013-08-21 21:38:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 21, 2013 at 21:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Harsh, the answer failed to give any solution because there is none. Even in Java, there is no silver bullet to object equality comparison and to correctly implement the &lt;code&gt;.equals&lt;/code&gt; method is not trivial, which is why there is such a topic dedicated in &lt;i&gt;Effective Java&lt;/i&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2073130/lcn&quot; title=&quot;2,129 reputation&quot; class=&quot;comment-user&quot;&gt;lcn&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment28088816_201471&quot;&gt;&lt;span title=&quot;2013-09-25 17:44:24Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 25, 2013 at 17:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Kumar Harsh, What makes two objects equal is very application specific; not every property of an object should necessarily be taken into consideration, so brute-forcing every property of an object is not a concrete solution either.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/867620/sethro&quot; title=&quot;2,037 reputation&quot; class=&quot;comment-user&quot;&gt;sethro&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31918181_201471&quot;&gt;&lt;span title=&quot;2014-01-17 22:05:41Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 17, 2014 at 22:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;googled &lt;code&gt;javascript equality object&lt;/code&gt;, got tl;dr reply, took one-liner from @chovy comment. thank you&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/335268/andrea&quot; title=&quot;436 reputation&quot; class=&quot;comment-user&quot;&gt;Andrea&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment35572246_201471&quot;&gt;&lt;span title=&quot;2014-04-23 14:54:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 23, 2014 at 14:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What is underscore? Is it a library? What is the minimum size code snippet for checking object equality?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4441547/aaron-franke&quot; title=&quot;2,548 reputation&quot; class=&quot;comment-user&quot;&gt;Aaron Franke&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115534917_201471&quot;&gt;&lt;span title=&quot;2020-12-18 02:14:09Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 18, 2020 at 2:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If the object(s) can be converted to a JSON string, then it makes an equals() function simple.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/69079/scotts&quot; title=&quot;3,950 reputation&quot; class=&quot;comment-user&quot;&gt;scotts&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18280230_886053&quot;&gt;&lt;span title=&quot;2012-11-14 18:28:54Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 14, 2012 at 18:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@scotts Not always. Converting objects to JSON and comparing strings can become computationally intensive for complex objects in tight loops. For simple objects it probably doesn&apos;t matter much, but in reality it truly depends on your specific situation. A correct solution may be as simple as comparing object IDs or checking each property, but its correctness is dictated entirely by the problem domain.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/68210/daniel-x-moore&quot; title=&quot;14,090 reputation&quot; class=&quot;comment-user&quot;&gt;Daniel X Moore&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18282085_886053&quot;&gt;&lt;span title=&quot;2012-11-14 19:32:21Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 14, 2012 at 19:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Shouldn&apos;t we compare the data type as well?!        return other.rank === this.rank &amp;amp;&amp;amp; other.suit === this.suit;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/330732/devsathish&quot; title=&quot;2,279 reputation&quot; class=&quot;comment-user&quot;&gt;devsathish&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29156947_886053&quot;&gt;&lt;span title=&quot;2013-10-28 14:59:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 28, 2013 at 14:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@devsathish probably not. In JavaScript types are pretty fast and loose, but if in your domain types are important then you may want to check types as well.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/68210/daniel-x-moore&quot; title=&quot;14,090 reputation&quot; class=&quot;comment-user&quot;&gt;Daniel X Moore&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29172588_886053&quot;&gt;&lt;span title=&quot;2013-10-28 23:27:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 28, 2013 at 23:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@scotts Other problem with converting to JSON is that the order of the properties in the string becomes significant. &lt;code&gt;{x:1, y:2}&lt;/code&gt; !== &lt;code&gt;{y:2, x:1}&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/286685/stijn-de-witt&quot; title=&quot;36,616 reputation&quot; class=&quot;comment-user&quot;&gt;Stijn de Witt&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59142930_886053&quot;&gt;&lt;span title=&quot;2016-03-01 21:51:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 1, 2016 at 21:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;objectEquals([1,2,undefined],[1,2])&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/163227/roy-tinker&quot; title=&quot;10,016 reputation&quot; class=&quot;comment-user&quot;&gt;Roy Tinker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41851905_16788517&quot;&gt;&lt;span title=&quot;2014-10-29 00:00:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 29, 2014 at 0:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;objectEquals([1,2,3],{0:1,1:2,2:3})&lt;/code&gt; also returns &lt;code&gt;true&lt;/code&gt; -- e.g. there is no type checking, only key/value checking.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/163227/roy-tinker&quot; title=&quot;10,016 reputation&quot; class=&quot;comment-user&quot;&gt;Roy Tinker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41852031_16788517&quot;&gt;&lt;span title=&quot;2014-10-29 00:07:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 29, 2014 at 0:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;objectEquals(new Date(1234),1234)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/163227/roy-tinker&quot; title=&quot;10,016 reputation&quot; class=&quot;comment-user&quot;&gt;Roy Tinker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41852401_16788517&quot;&gt;&lt;span title=&quot;2014-10-29 00:32:41Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 29, 2014 at 0:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;if (x.constructor !== y.constructor) { return false; }  This would break when comparing two &apos;new String(&apos;a&apos;)&apos; in different windows.  For value equality, you&apos;d have to check whether String.isString on both objects, then use a loose equality check &apos;a == b&apos;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/88409/triynko&quot; title=&quot;18,146 reputation&quot; class=&quot;comment-user&quot;&gt;Triynko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment68224258_16788517&quot;&gt;&lt;span title=&quot;2016-11-08 15:06:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 8, 2016 at 15:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;There&apos;s a huge difference between &quot;value&quot; equality and &quot;strict&quot; equality and they shouldn&apos;t be implemented the same way.  Value equality shouldn&apos;t care about types, aside from the basic structure, which is one of these 4: &apos;object&apos; (i.e. a collection of key/value pairs), &apos;number&apos;, &apos;string&apos;, or &apos;array&apos;.  That&apos;s it.  Anything that&apos;s not a number, string, or array, should be compared as a set of key/value pairs, regardless of what the constructor is (cross-window-safe).  When comparing objects, equate the value of literal numbers and instances of Number, but don&apos;t coerce strings to numbers.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/88409/triynko&quot; title=&quot;18,146 reputation&quot; class=&quot;comment-user&quot;&gt;Triynko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment68224928_16788517&quot;&gt;&lt;span title=&quot;2016-11-08 15:23:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 8, 2016 at 15:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You could replace &lt;code&gt;reduce&lt;/code&gt; with &lt;code&gt;every&lt;/code&gt; to simplify.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/918910/jib&quot; title=&quot;37,793 reputation&quot; class=&quot;comment-user&quot;&gt;jib&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59310155_32922084&quot;&gt;&lt;span title=&quot;2016-03-06 00:05:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 6, 2016 at 0:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@nonkertompf sure he could: &lt;code&gt;Object.keys(x).every(key =&amp;gt; deepEqual(x[key], y[key]))&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/918910/jib&quot; title=&quot;37,793 reputation&quot; class=&quot;comment-user&quot;&gt;jib&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment61085660_32922084&quot;&gt;&lt;span title=&quot;2016-04-20 18:54:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 20, 2016 at 18:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This fails when you are comparing two dates&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1229360/greg&quot; title=&quot;726 reputation&quot; class=&quot;comment-user&quot;&gt;Greg&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86244176_32922084&quot;&gt;&lt;span title=&quot;2018-04-02 20:48:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 2, 2018 at 20:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;deepEqual({}, []) returns true&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/755692/alexmorley-finch&quot; title=&quot;6,577 reputation&quot; class=&quot;comment-user&quot;&gt;AlexMorley-Finch&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment89333709_32922084&quot;&gt;&lt;span title=&quot;2018-07-04 14:01:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 4, 2018 at 14:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;yes, if you care for such corner case, ugly solution is to replace &lt;code&gt;: (x === y)&lt;/code&gt; with &lt;code&gt;: (x === y &amp;amp;&amp;amp; (x != null &amp;amp;&amp;amp; y != null  || x.constructor === y.constructor))&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2713676/atmin&quot; title=&quot;861 reputation&quot; class=&quot;comment-user&quot;&gt;atmin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment89685788_32922084&quot;&gt;&lt;span title=&quot;2018-07-16 07:42:14Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 16, 2018 at 7:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Interesting, but a little tricky in my opinion.  For example, can you 100% guarantee that the object properties will be generated always in the same order ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12388/guido&quot; title=&quot;44,903 reputation&quot; class=&quot;comment-user&quot;&gt;Guido&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment76574_201305&quot;&gt;&lt;span title=&quot;2008-10-14 15:00:35Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 14, 2008 at 15:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;That&apos;s a good question, and raises another, as to whether two objects with the same properties in different orders are really equal or not. Depends upon what you mean by equal, I guess.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7441/joel-anair&quot; title=&quot;13,606 reputation&quot; class=&quot;comment-user&quot;&gt;Joel Anair&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77107_201305&quot;&gt;&lt;span title=&quot;2008-10-14 18:47:52Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 14, 2008 at 18:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that most encoders and stringifiers ignore functions and convert nonfinite numbers, like NaN, to null.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/46981/stephen-belanger&quot; title=&quot;5,971 reputation&quot; class=&quot;comment-user&quot;&gt;Stephen Belanger&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6378438_201305&quot;&gt;&lt;span title=&quot;2011-04-08 23:20:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 8, 2011 at 23:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I agree with Guido, order of properties are important and it cannot be guaranteed. @JoelAnair, I think  two objects with the same properties in different orders should be considered equal if the value of the properties are equal.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/911963/juzer-ali&quot; title=&quot;4,003 reputation&quot; class=&quot;comment-user&quot;&gt;Juzer Ali&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment12582967_201305&quot;&gt;&lt;span title=&quot;2012-03-26 07:34:22Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 26, 2012 at 7:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This &lt;i&gt;could&lt;/i&gt; work with an alternate JSON stringifier, one that sorts object keys consistently.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/163227/roy-tinker&quot; title=&quot;10,016 reputation&quot; class=&quot;comment-user&quot;&gt;Roy Tinker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41851764_201305&quot;&gt;&lt;span title=&quot;2014-10-28 23:51:21Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 28, 2014 at 23:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;Chai&lt;/code&gt; has this feature too. In its case, you&apos;ll use: &lt;code&gt;var foo = { a: 1 };    var bar = { a: 1 };     expect(foo).to.deep.equal(bar); // true;&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4660514/folusho-oladipo&quot; title=&quot;192 reputation&quot; class=&quot;comment-user&quot;&gt;Folusho Oladipo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment75637545_26016880&quot;&gt;&lt;span title=&quot;2017-06-01 19:51:24Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 1, 2017 at 19:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Some versions of Node.js set &lt;code&gt;error.name&lt;/code&gt; to &lt;code&gt;&quot;AssertionError [ERR_ASSERTION]&quot;&lt;/code&gt;. In this case, I&apos;d replace the if statement with &lt;code&gt;if (error.code === &apos;ERR_ASSERTION&apos;) {&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/195123/knute-knudsen&quot; title=&quot;909 reputation&quot; class=&quot;comment-user&quot;&gt;Knute Knudsen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment85427888_26016880&quot;&gt;&lt;span title=&quot;2018-03-10 17:05:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 10, 2018 at 17:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I had no idea &lt;code&gt;deepStrictEqual&lt;/code&gt; was the way to go. I&apos;d been wracking my brain trying to figure out why &lt;code&gt;strictEqual&lt;/code&gt; wasn&apos;t working. Fantastic.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1167646/netoperator-wibby&quot; title=&quot;1,278 reputation&quot; class=&quot;comment-user&quot;&gt;NetOperator Wibby&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106746369_26016880&quot;&gt;&lt;span title=&quot;2020-02-21 18:23:12Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 21, 2020 at 18:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is a long method but it completely tests the objects without making any assumptions on the order of the properties in each object.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7617428/briancollins081&quot; title=&quot;668 reputation&quot; class=&quot;comment-user&quot;&gt;briancollins081&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107153208_201265&quot;&gt;&lt;span title=&quot;2020-03-06 15:48:57Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 6, 2020 at 15:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;does not work if a property is an array of other objects&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1673614/daydr3amer&quot; title=&quot;313 reputation&quot; class=&quot;comment-user&quot;&gt;daydr3amer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126490170_201265&quot;&gt;&lt;span title=&quot;2022-03-22 08:15:52Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 22 at 8:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;its performance is suppose to be good. No worries. Even i use this in complex scenarios as well. As when we use this we don&apos;t have to worry if property of object is bearing Object or array. Json.Stringify makes it string anyway and  comparison of strings in javascript is not a big deal&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11502061/trickortreat&quot; title=&quot;653 reputation&quot; class=&quot;comment-user&quot;&gt;TrickOrTreat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105873962_54313588&quot;&gt;&lt;span title=&quot;2020-01-23 04:25:49Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 23, 2020 at 4:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thank you for this answer! It&apos;s added in Node v9&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8305127/viet&quot; title=&quot;5,469 reputation&quot; class=&quot;comment-user&quot;&gt;Viet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113480306_54313588&quot;&gt;&lt;span title=&quot;2020-10-02 14:46:50Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 2, 2020 at 14:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I don&apos;t think order preservation is guaranteed across browsers/engines.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/525872/jo-liss&quot; title=&quot;27,629 reputation&quot; class=&quot;comment-user&quot;&gt;Jo Liss&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment21555095_11039915&quot;&gt;&lt;span title=&quot;2013-03-07 17:46:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 7, 2013 at 17:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JoLiss Citations needed ;) I recall testing this in multiple browsers, getting consistent results. But of course, no one can guarantee the behaviour remaining the same in future browsers/engines. This is a trick (as already called out in the answer) at best, and I didn&apos;t mean it to be a surefire way to compare objects.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/23501/ates-goral&quot; title=&quot;133,322 reputation&quot; class=&quot;comment-user&quot;&gt;Ates Goral&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment21559599_11039915&quot;&gt;&lt;span title=&quot;2013-03-07 19:58:48Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 7, 2013 at 19:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Sure, here&apos;s some pointers: &lt;a href=&quot;http://bclary.com/2004/11/07/#a-8.6&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMAScript spec says object is &quot;unordered&quot;&lt;/a&gt;; and &lt;a href=&quot;http://stackoverflow.com/a/280861/525872&quot;&gt;this answer&lt;/a&gt; for actual diverging behavior on current browsers.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/525872/jo-liss&quot; title=&quot;27,629 reputation&quot; class=&quot;comment-user&quot;&gt;Jo Liss&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment21566043_11039915&quot;&gt;&lt;span title=&quot;2013-03-07 23:43:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 7, 2013 at 23:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JoLiss Thanks for that! But please note I was never claiming the preservation of order between code and compiled object. I was claiming preservation of order of properties whose values get replaced in-place. That was the key with my solution: to use a mixin to just overwrite property values. Assuming implementations generally opt to use some sort of hashmap, replacing just values should preserve the order of keys. It is in fact exactly this that I had tested in different browsers.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/23501/ates-goral&quot; title=&quot;133,322 reputation&quot; class=&quot;comment-user&quot;&gt;Ates Goral&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment21566627_11039915&quot;&gt;&lt;span title=&quot;2013-03-08 00:13:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 8, 2013 at 0:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AtesGoral: is it possible to make this constraint a bit more &lt;i&gt;explicit&lt;/i&gt; (boldface,...). Most people simply do &lt;i&gt;copy-paste&lt;/i&gt; without reading the text around it...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/67579/willem-van-onsem&quot; title=&quot;402,110 reputation&quot; class=&quot;comment-user&quot;&gt;Willem Van Onsem&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48744985_11039915&quot;&gt;&lt;span title=&quot;2015-05-19 12:13:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 19, 2015 at 12:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I am assuming that this won&apos;t work in many cases because the order of keys in objects doesn&apos;t matter - unless &lt;code&gt;JSON.stringify&lt;/code&gt; does an alphabetical reordering? (Which I cannot find &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot; rel=&quot;nofollow noreferrer&quot;&gt;documented&lt;/a&gt;.)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1150683/bram-vanroy&quot; title=&quot;25,192 reputation&quot; class=&quot;comment-user&quot;&gt;Bram Vanroy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment82819893_46645497&quot;&gt;&lt;span title=&quot;2017-12-21 13:32:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 21, 2017 at 13:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;yup you are right ... for the object, you have to sort recursively for both side objects&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4419353/pratik-bhalodiya&quot; title=&quot;666 reputation&quot; class=&quot;comment-user&quot;&gt;Pratik Bhalodiya&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment83005245_46645497&quot;&gt;&lt;span title=&quot;2017-12-29 06:02:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 29, 2017 at 6:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This does not work for objects with circular references&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2451856/nate-bit-int&quot; title=&quot;165 reputation&quot; class=&quot;comment-user&quot;&gt;Nate-Bit Int&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment88051218_46645497&quot;&gt;&lt;span title=&quot;2018-05-24 23:05:08Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 24, 2018 at 23:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The first &quot;hacky&quot; solution also doesn&apos;t work at all when the order of the objects is different. eg. &lt;code&gt;o1 = { a: &apos;1&apos;, b: &apos;2&apos; }&lt;/code&gt; - &lt;code&gt;o2 = { b: &apos;2&apos;, a: &apos;1&apos; }&lt;/code&gt; compare &lt;code&gt;JSON.stringify(o1) === JSON.stringify(o2) = false&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1712332/eksapsy&quot; title=&quot;1,170 reputation&quot; class=&quot;comment-user&quot;&gt;Eksapsy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114084194_63496057&quot;&gt;&lt;span title=&quot;2020-10-25 00:24:28Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 25, 2020 at 0:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Your preferred method assumes that the object has a specific use, such as being a dataset for a unique object, as opposed to another use, such as being a set of items with repetition where the key/property is the item and the value is the number of times the item is in the set (which would require every property and value to be checked).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5765336/dave-f&quot; title=&quot;1,517 reputation&quot; class=&quot;comment-user&quot;&gt;Dave F&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124523848_63496057&quot;&gt;&lt;span title=&quot;2021-12-22 03:30:57Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 22, 2021 at 3:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@DaveF in that case, perhaps &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot; rel=&quot;nofollow noreferrer&quot;&gt;Map&lt;/a&gt; would be more appropriate than a wild object, semantically.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2321594/aidin&quot; title=&quot;16,216 reputation&quot; class=&quot;comment-user&quot;&gt;Aidin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124546700_63496057&quot;&gt;&lt;span title=&quot;2021-12-23 01:24:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 23, 2021 at 1:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Aidin My point was that sometimes all properties and values need to be checked. The example is not important.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5765336/dave-f&quot; title=&quot;1,517 reputation&quot; class=&quot;comment-user&quot;&gt;Dave F&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124547322_63496057&quot;&gt;&lt;span title=&quot;2021-12-23 02:37:00Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 23, 2021 at 2:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This won&apos;t work if object2 has additional keys which object1 doesn&apos;t include.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1952485/ram-kumar&quot; title=&quot;778 reputation&quot; class=&quot;comment-user&quot;&gt;Ram Kumar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment110103269_61142767&quot;&gt;&lt;span title=&quot;2020-06-08 04:44:34Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 8, 2020 at 4:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;as @Ram Kumar mentioned this will work only if you loop both objects, not very efficient but for small objects I think it will be faster the stringifying the objects - not 100% sure though&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5674583/blue-bot&quot; title=&quot;2,058 reputation&quot; class=&quot;comment-user&quot;&gt;Blue Bot&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120609505_61142767&quot;&gt;&lt;span title=&quot;2021-07-04 07:40:35Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 4, 2021 at 7:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@RamKumar just add in the condition var result = Object.keys(object1).every((key) =&amp;gt;(object1[key] === object2[key] &amp;amp;&amp;amp; object1.hasOwnProperty(key) &amp;amp;&amp;amp; object2.hasOwnProperty(key))&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1058605/adrian-p&quot; title=&quot;4,868 reputation&quot; class=&quot;comment-user&quot;&gt;Adrian P.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment123941554_61142767&quot;&gt;&lt;span title=&quot;2021-11-25 15:31:31Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 25, 2021 at 15:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;good idea (in my case the objects to be compared a just key/value-pairs, no Special things)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4232410/mech&quot; title=&quot;543 reputation&quot; class=&quot;comment-user&quot;&gt;mech&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment64514686_35821859&quot;&gt;&lt;span title=&quot;2016-07-25 07:36:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 25, 2016 at 7:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Does not work if the order of the object keys has changed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1991020/isaac-pak&quot; title=&quot;3,687 reputation&quot; class=&quot;comment-user&quot;&gt;Isaac Pak&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105501253_32195981&quot;&gt;&lt;span title=&quot;2020-01-09 19:56:58Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 9, 2020 at 19:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;small correction : before going through each props in a and b add this check   if(Object.getOwnPropertyNames(a).length !== Object.getOwnPropertyNames(b).length ) return false&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2406424/hith&quot; title=&quot;301 reputation&quot; class=&quot;comment-user&quot;&gt;Hith&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90980966_42611416&quot;&gt;&lt;span title=&quot;2018-08-25 08:22:58Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 25, 2018 at 8:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;it is obvious that proper equality checker must be recursive. I think one of such recursive answers should be the correct answer. The accepted answer does not give code and it does not help&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3209523/canbax&quot; title=&quot;2,850 reputation&quot; class=&quot;comment-user&quot;&gt;canbax&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95284415_42611416&quot;&gt;&lt;span title=&quot;2019-01-17 05:42:16Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 17, 2019 at 5:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is a fully functional answer,  thanks @Adriano Spadoni.  Do you know how can I get the key/attribute that was modified?  Thanks,&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1869094/digitai&quot; title=&quot;1,802 reputation&quot; class=&quot;comment-user&quot;&gt;digitai&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107875915_58084885&quot;&gt;&lt;span title=&quot;2020-04-01 15:47:05Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 1, 2020 at 15:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;hi @digital, if you need which keys are different, this is not the ideal function. Check the other answer and use one with a loop through the objects.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1955088/adriano-spadoni&quot; title=&quot;4,107 reputation&quot; class=&quot;comment-user&quot;&gt;Adriano Spadoni&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107906987_58084885&quot;&gt;&lt;span title=&quot;2020-04-02 13:43:41Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 2, 2020 at 13:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Do not ever use JSON.stringify to compare json objects. Order of the keys is not expected to be the same.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1712332/eksapsy&quot; title=&quot;1,170 reputation&quot; class=&quot;comment-user&quot;&gt;Eksapsy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114470351_58084885&quot;&gt;&lt;span title=&quot;2020-11-08 19:22:47Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 8, 2020 at 19:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Hi @Eksapsy, that is why there is a &quot;sort()&quot; function, do you see the s(a) s(b)? this function is fine due to the sort. The example has keys in different other on purpose to prove it works.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1955088/adriano-spadoni&quot; title=&quot;4,107 reputation&quot; class=&quot;comment-user&quot;&gt;Adriano Spadoni&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114570321_58084885&quot;&gt;&lt;span title=&quot;2020-11-12 08:27:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 12, 2020 at 8:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@digital, to get the difference would need a RegExp instead of the &quot;===&quot;, it is doable.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1955088/adriano-spadoni&quot; title=&quot;4,107 reputation&quot; class=&quot;comment-user&quot;&gt;Adriano Spadoni&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114570473_58084885&quot;&gt;&lt;span title=&quot;2020-11-12 08:33:19Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 12, 2020 at 8:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Oh, I also forgot, but the function can be sped up by first testing object equaling and bailing early if they are the same object:  if (obj1 === obj2) return true;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2379136/th317erd&quot; title=&quot;306 reputation&quot; class=&quot;comment-user&quot;&gt;th317erd&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45208616_28439261&quot;&gt;&lt;span title=&quot;2015-02-10 18:51:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 10, 2015 at 18:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;areEqual({a: &apos;b&apos;}, {b: &apos;a&apos;})&lt;/code&gt; gets &lt;code&gt;true&lt;/code&gt; then?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/165603/okm&quot; title=&quot;23,055 reputation&quot; class=&quot;comment-user&quot;&gt;okm&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50744327_28439261&quot;&gt;&lt;span title=&quot;2015-07-13 12:36:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 13, 2015 at 12:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yea, I realized after posting that this &quot;solution&quot; has issues. It needs a bit more work in the sorting algorithm to actually work properly.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2379136/th317erd&quot; title=&quot;306 reputation&quot; class=&quot;comment-user&quot;&gt;th317erd&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50804992_28439261&quot;&gt;&lt;span title=&quot;2015-07-14 19:59:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 14, 2015 at 19:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@th317erd it&apos;s possible to &lt;a href=&quot;https://stackoverflow.com/posts/28439261/edit&quot;&gt;edit&lt;/a&gt; your post if you want to improve it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6243352/ggorlen&quot; title=&quot;34,352 reputation&quot; class=&quot;comment-user&quot;&gt;ggorlen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126637100_28439261&quot;&gt;&lt;span title=&quot;2022-03-28 22:51:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 28 at 22:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This does not do what OP wants, as it will only match if both objects have all the same keys, which they state they will not. It would also require the keys to be in the same order, which is also not really reasonable.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5471957/speedofround&quot; title=&quot;1,083 reputation&quot; class=&quot;comment-user&quot;&gt;SpeedOfRound&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93775040_50385769&quot;&gt;&lt;span title=&quot;2018-11-23 18:09:57Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 23, 2018 at 18:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What is the properties are in different order ??? Nope not a good method&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1746772/vishal-sakaria&quot; title=&quot;1,287 reputation&quot; class=&quot;comment-user&quot;&gt;Vishal Sakaria&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment96807319_50385769&quot;&gt;&lt;span title=&quot;2019-03-06 16:01:59Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 6, 2019 at 16:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Be very careful about modifying &lt;code&gt;Object.prototype&lt;/code&gt; -- in the vast majority of cases it is not advised (additions appear in all for..in loops, for example). Perhaps consider &lt;code&gt;Object.equals = function(aObj, bObj) {...}&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/163227/roy-tinker&quot; title=&quot;10,016 reputation&quot; class=&quot;comment-user&quot;&gt;Roy Tinker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41852474_2920854&quot;&gt;&lt;span title=&quot;2014-10-29 00:37:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 29, 2014 at 0:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":324,"title":"How to determine equality for two JavaScript objects?","content":"\n                \n&lt;p&gt;A strict equality operator will tell you if two object &lt;strong&gt;types&lt;/strong&gt; are equal. However, is there a way to tell if two objects are equal, &lt;strong&gt;much like the hash code&lt;/strong&gt; value in Java?&lt;/p&gt;\n\n&lt;p&gt;Stack Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/194846&quot;&gt;Is there any kind of hashCode function in JavaScript?&lt;/a&gt;&lt;/em&gt; is similar to this question, but requires a more academic answer. The scenario above demonstrates why it would be necessary to have one, and I&apos;m wondering if there is any &lt;strong&gt;equivalent solution&lt;/strong&gt;.&lt;/p&gt;\n    ","slug":"how-to-determine-equality-for-two-javascript-objects-1657387638650","postType":"QUESTION","createdAt":"2022-07-09T17:27:18.000Z","updatedAt":"2022-07-09T17:27:18.000Z","tags":[{"id":1880,"name":"equals","slug":"equals","createdAt":"2022-07-09T17:27:18.000Z","updatedAt":"2022-07-09T17:27:18.000Z","Questions_Tags":{"questionId":324,"tagId":1880}}]}]}},"__N_SSG":true}