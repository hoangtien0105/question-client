{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Iterator.html#remove--&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Iterator.remove()&lt;/code&gt;&lt;/a&gt; is safe, you can use it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// This is a clever way to create the iterator and call iterator.hasNext() like&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// you would do in a while-loop. It would be the same as doing:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     Iterator&amp;lt;String&amp;gt; iterator = list.iterator();&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     while (iterator.hasNext()) {&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;String&amp;gt; iterator = list.iterator(); iterator.hasNext();) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iterator.next();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (string.isEmpty()) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Remove the current element from the iterator and the list.&lt;/span&gt;\n        iterator.remove();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Iterator.html#remove--&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Iterator.remove()&lt;/code&gt;&lt;/a&gt; is the only safe way to modify a collection during iteration; the behavior is unspecified if the underlying collection is modified &lt;strong&gt;in any other way&lt;/strong&gt; while the iteration is in progress.&lt;/p&gt;\n\n&lt;p&gt;Source:&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html&quot; rel=&quot;noreferrer&quot;&gt; docs.oracle &amp;gt; The Collection Interface&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;And similarly, if you have a &lt;code&gt;ListIterator&lt;/code&gt; and want to &lt;em&gt;add&lt;/em&gt; items, you can use &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html#add-E-&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ListIterator#add&lt;/code&gt;&lt;/a&gt;, for the same reason you can use &lt;code&gt;Iterator#remove&lt;/code&gt;&amp;nbsp; it&apos;s designed to allow it.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;In your case you tried to remove from a list, but the same restriction applies if trying to &lt;code&gt;put&lt;/code&gt; into a &lt;code&gt;Map&lt;/code&gt; while iterating its content. &lt;/p&gt;\n    ","\n&lt;p&gt;This works:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;Integer&amp;gt; iter = l.iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (iter.next() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n        iter.remove();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I assumed that since a foreach loop is syntactic sugar for iterating, using an iterator wouldn&apos;t help... but it gives you this &lt;code&gt;.remove()&lt;/code&gt; functionality.&lt;/p&gt;\n    ","\n&lt;p&gt;With Java 8 you can use &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#removeIf-java.util.function.Predicate-&quot; rel=&quot;noreferrer&quot;&gt;the new &lt;code&gt;removeIf&lt;/code&gt; method&lt;/a&gt;. Applied to your example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Collection&amp;lt;Integer&amp;gt; coll = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;//populate&lt;/span&gt;\n\ncoll.removeIf(i -&amp;gt; i == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Since the question has been already answered i.e. the best way is to use the remove method of the iterator object, I would go into the specifics of the place where the error &lt;code&gt;&quot;java.util.ConcurrentModificationException&quot;&lt;/code&gt; is thrown.&lt;/p&gt;\n\n&lt;p&gt;Every collection class has a private class which implements the Iterator interface and provides methods like &lt;code&gt;next()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt; and &lt;code&gt;hasNext()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The code for next looks something like this...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    checkForComodification();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; get(cursor);\n        lastRet = cursor++;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; next;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(IndexOutOfBoundsException e) {\n        checkForComodification();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NoSuchElementException&lt;/span&gt;();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here the method &lt;code&gt;checkForComodification&lt;/code&gt; is implemented as &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkForComodification&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (modCount != expectedModCount)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ConcurrentModificationException&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, as you can see, if you explicitly try to remove an element from the collection. It results in &lt;code&gt;modCount&lt;/code&gt; getting different from &lt;code&gt;expectedModCount&lt;/code&gt;, resulting in the exception &lt;code&gt;ConcurrentModificationException&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You can either use the iterator directly like you mentioned, or else keep a second collection and add each item you want to remove to the new collection, then removeAll at the end. This allows you to keep using the type-safety of the for-each loop at the cost of increased memory use and cpu time (shouldn&apos;t be a huge problem unless you have really, really big lists or a really old computer)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;\n{\n    Collection&amp;lt;Integer&amp;gt; l = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\n    Collection&amp;lt;Integer&amp;gt; itemsToRemove = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; i++) {\n        l.add(Integer.of(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n        l.add(Integer.of(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n        l.add(Integer.of(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Integer i : l)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i.intValue() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n            itemsToRemove.add(i);\n        }\n    }\n\n    l.removeAll(itemsToRemove);\n    System.out.println(l);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In such cases a common trick is (was?) to go backwards:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; l.size() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i --) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (l.get(i) == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n    l.remove(i);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That said, I&apos;m more than happy that you have better ways in Java 8, e.g. &lt;code&gt;removeIf&lt;/code&gt; or &lt;code&gt;filter&lt;/code&gt; on streams.&lt;/p&gt;\n    ","\n&lt;p&gt;Same answer as &lt;a href=&quot;https://stackoverflow.com/a/223927/1433392&quot;&gt;Claudius&lt;/a&gt; with a for loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;Object&amp;gt; it = objects.iterator(); it.hasNext();) {\n    &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; it.next();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (test) {\n        it.remove();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With &lt;a href=&quot;https://www.eclipse.org/collections/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Eclipse Collections&lt;/a&gt;, the method &lt;code&gt;removeIf&lt;/code&gt; defined on &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/collection/MutableCollection.java#L236&quot; rel=&quot;nofollow noreferrer&quot;&gt;MutableCollection&lt;/a&gt; will work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;MutableList&amp;lt;Integer&amp;gt; list = Lists.mutable.of(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\nlist.removeIf(Predicates.lessThan(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;));\nAssert.assertEquals(Lists.mutable.of(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), list);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With Java 8 Lambda syntax this can be written as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;MutableList&amp;lt;Integer&amp;gt; list = Lists.mutable.of(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\nlist.removeIf(Predicates.cast(integer -&amp;gt; integer &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;));\nAssert.assertEquals(Lists.mutable.of(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), list);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The call to &lt;code&gt;Predicates.cast()&lt;/code&gt; is necessary here because a default &lt;code&gt;removeIf&lt;/code&gt; method was added on the &lt;code&gt;java.util.Collection&lt;/code&gt; interface in Java 8. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I am a committer for &lt;a href=&quot;https://www.eclipse.org/collections/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Make a copy of existing list and iterate over new copy.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String str : &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;(listOfStr))     \n{\n    listOfStr.remove(&lt;span class=&quot;hljs-comment&quot;&gt;/* object reference or index */&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;People are asserting one &lt;strong&gt;can&apos;t&lt;/strong&gt; remove from a Collection being iterated by a foreach loop. I just wanted to point out that is &lt;em&gt;technically&lt;/em&gt; incorrect and describe exactly (I know the OP&apos;s question is so advanced as to obviate knowing this) the code behind that assumption:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (TouchableObj obj : untouchedSet) {  &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;--- This is where ConcurrentModificationException strikes&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.isTouched()) {\n        untouchedSet.remove(obj);\n        touchedSt.add(obj);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// this is key to avoiding returning to the foreach&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It isn&apos;t that you can&apos;t remove from the iterated &lt;code&gt;Colletion&lt;/code&gt; rather that you can&apos;t then continue iteration once you do. Hence the &lt;code&gt;break&lt;/code&gt; in the code above.&lt;/p&gt;\n\n&lt;p&gt;Apologies if this answer is a somewhat specialist use-case and more suited to the original &lt;a href=&quot;https://stackoverflow.com/questions/1110404/remove-elements-from-a-hashset-while-iterating&quot;&gt;thread&lt;/a&gt; I arrived here from, that one is marked as a duplicate (despite this thread appearing more nuanced) of this and locked.&lt;/p&gt;\n    ","\n&lt;p&gt;With a traditional for loop&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;ArrayList&amp;lt;String&amp;gt; myArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; myArray.size(); ) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; myArray.get(i);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (someCondition(text))\n        myArray.remove(i);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        i++;   \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html&quot; rel=&quot;nofollow&quot;&gt;ConcurrentHashMap&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html&quot; rel=&quot;nofollow&quot;&gt;ConcurrentLinkedQueue&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentSkipListMap.html&quot; rel=&quot;nofollow&quot;&gt;ConcurrentSkipListMap&lt;/a&gt; may be another option, because they will never throw any ConcurrentModificationException, even if you remove or add item.&lt;/p&gt;\n    ","\n&lt;p&gt;Another way is to use a copy of your arrayList just for iteration:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Object&amp;gt; l = ...\n    \nList&amp;lt;Object&amp;gt; iterationList = ImmutableList.copyOf(l);\n    \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Object curr : iterationList) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (condition(curr)) {\n        l.remove(curr);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A &lt;code&gt;ListIterator&lt;/code&gt; allows you to add or remove items in the list.  Suppose you have a list of &lt;code&gt;Car&lt;/code&gt; objects:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Car&amp;gt; cars = ArrayList&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// add cars here...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (ListIterator&amp;lt;Car&amp;gt; carIterator = cars.listIterator();  carIterator.hasNext(); )\n{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&amp;lt;some-condition&amp;gt;)\n   { \n      carIterator().remove()\n   }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&amp;lt;some-other-condition&amp;gt;)\n   { \n      carIterator().add(aNewCar);\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I know this question is too old to be about Java 8, but for those using Java 8 you can easily use removeIf():&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Collection&amp;lt;Integer&amp;gt; l = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i) {\n    l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n    l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n    l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;));\n}\n\nl.removeIf(i -&amp;gt; i.intValue() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Now, You can remove with the following code&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;l.removeIf(current -&amp;gt; current == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Java Concurrent Modification Exception&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Single thread&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;String&amp;gt; iterator = list.iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iterator.hasNext()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iter.next()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value == &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;) {\n        list.remove(it.next()); &lt;span class=&quot;hljs-comment&quot;&gt;//throws ConcurrentModificationException&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Solution: iterator &lt;code&gt;remove()&lt;/code&gt; method&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;String&amp;gt; iterator = list.iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iterator.hasNext()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iter.next()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value == &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;) {\n        it.remove()\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Multi thread&lt;/li&gt;\n&lt;/ol&gt;\n&lt;ul&gt;\n&lt;li&gt;copy/convert and iterate over another one collection. For small collections&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;synchronize&lt;/code&gt;&lt;a href=&quot;https://stackoverflow.com/a/59500618/4770877&quot;&gt;&lt;sup&gt;[About]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;thread safe collection&lt;a href=&quot;https://stackoverflow.com/a/65410514/4770877&quot;&gt;&lt;sup&gt;[About]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I have a suggestion for the problem above. No need of secondary list or any extra time. Please find an example which would do the same stuff but in a different way.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//&quot;list&quot; is ArrayList&amp;lt;Object&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//&quot;state&quot; is some boolean variable, which when set to true, Object will be removed from the list&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(index &amp;lt; list.size()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; list.get(index);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( state ) {\n        list.remove(index);\n        index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n    }\n    index += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;\nThis would avoid the Concurrency Exception.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Integer i : l)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i.intValue() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;){\n            itemsToRemove.add(i);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The catch is the after removing the element from the list if you skip the internal iterator.next() call. it still works! Though I dont propose to write code like this it helps to understand the concept behind it :-)&lt;/p&gt;\n\n&lt;p&gt;Cheers!&lt;/p&gt;\n    ","\n&lt;p&gt;Example of thread safe collection modification:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Example&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;String&amp;gt; queue = Collections.synchronizedList(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;());\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeFromQueue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;synchronized&lt;/span&gt; (queue) {\n            Iterator&amp;lt;String&amp;gt; iterator = queue.iterator();\n            &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iterator.next();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (string.isEmpty()) {\n                iterator.remove();\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One solution could be to rotate the list and remove the first element to avoid the ConcurrentModificationException or IndexOutOfBoundsException&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; list.size();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;j&amp;lt;n;j++){\n    &lt;span class=&quot;hljs-comment&quot;&gt;//you can also put a condition before remove&lt;/span&gt;\n    list.remove(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    Collections.rotate(list, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n}\nCollections.rotate(list, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try this one (removes all elements in the list that equal &lt;code&gt;i&lt;/code&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Object i : l) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (condition(i)) {\n        l = (l.stream().filter((a) -&amp;gt; a != i)).collect(Collectors.toList());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use a while loop.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;Map.Entry&amp;lt;String, String&amp;gt;&amp;gt; iterator = map.entrySet().iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(iterator.hasNext()){\n    Map.Entry&amp;lt;String, String&amp;gt; entry = iterator.next();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(entry.getKey().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;)) {\n        iterator.remove();\n    } \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I ended up with this &lt;code&gt;ConcurrentModificationException&lt;/code&gt;, while iterating the list using &lt;code&gt;stream().map()&lt;/code&gt; method. However the &lt;code&gt;for(:)&lt;/code&gt; did not throw the exception while iterating and modifying the the list.&lt;/p&gt;\n&lt;p&gt;Here is code snippet , if its of help to anyone:\nhere I&apos;m iterating on a &lt;code&gt;ArrayList&amp;lt;BuildEntity&amp;gt;&lt;/code&gt; , and modifying it using the list.remove(obj)&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(BuildEntity build : uniqueBuildEntities){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(build!=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(isBuildCrashedWithErrors(build)){\n                    log.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The following build crashed with errors ,  will not be persisted -&amp;gt; \\n{}&quot;&lt;/span&gt;\n                            ,build.getBuildUrl());\n                    uniqueBuildEntities.remove(build);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (uniqueBuildEntities.isEmpty()) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  EMPTY_LIST;\n                }\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(uniqueBuildEntities.size()&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            dbEntries.addAll(uniqueBuildEntities);\n        }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If using HashMap, in newer versions of Java (8+) you can select each of 3 options:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserProfileEntity&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String Code;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String mobileNumber;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; LocalDateTime inputDT;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// getters and setters here&lt;/span&gt;\n}\nHashMap&amp;lt;String, UserProfileEntity&amp;gt; upMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// remove by value&lt;/span&gt;\nupMap.values().removeIf(value -&amp;gt; !value.getCode().contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0005&quot;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// remove by key&lt;/span&gt;\nupMap.keySet().removeIf(key -&amp;gt; key.contentEquals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;testUser&quot;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// remove by entry / key + value&lt;/span&gt;\nupMap.entrySet().removeIf(entry -&amp;gt; (entry.getKey().endsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;admin&quot;&lt;/span&gt;) || entry.getValue().getInputDT().isBefore(LocalDateTime.now().minusMinutes(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The best way (recommended) is use of &lt;code&gt;java.util.concurrent&lt;/code&gt; package. By\nusing this package you can easily avoid this exception. Refer\nModified Code:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    Collection&amp;lt;Integer&amp;gt; l = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CopyOnWriteArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i) {\n        l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n        l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n        l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;));\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Integer i : l) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i.intValue() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n            l.remove(i);\n        }\n    }\n    \n    System.out.println(l);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In case &lt;strong&gt;ArrayList:remove(int index)&lt;/strong&gt;- if(index is last element&apos;s position) it avoids without &lt;code&gt;System.arraycopy()&lt;/code&gt; and takes not time for this.&lt;/p&gt;\n\n&lt;p&gt;arraycopy time increases if(index decreases), by the way elements of list also decreases!&lt;/p&gt;\n\n&lt;p&gt;the best effective remove way is- removing its elements in descending order:\n&lt;code&gt;while(list.size()&amp;gt;0)list.remove(list.size()-1);&lt;/code&gt;//takes O(1)\n&lt;code&gt;while(list.size()&amp;gt;0)list.remove(0);&lt;/code&gt;//takes O(factorial(n))&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//region prepare data&lt;/span&gt;\nArrayList&amp;lt;Integer&amp;gt; ints = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\nArrayList&amp;lt;Integer&amp;gt; toRemove = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rdm&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; millis;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; rdm.nextInt();\n    ints.add(integer);\n}\nArrayList&amp;lt;Integer&amp;gt; intsForIndex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;(ints);\nArrayList&amp;lt;Integer&amp;gt; intsDescIndex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;(ints);\nArrayList&amp;lt;Integer&amp;gt; intsIterator = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;(ints);\n&lt;span class=&quot;hljs-comment&quot;&gt;//endregion&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// region for index&lt;/span&gt;\nmillis = System.currentTimeMillis();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; intsForIndex.size(); i++) \n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (intsForIndex.get(i) % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) intsForIndex.remove(i--);\nSystem.out.println(System.currentTimeMillis() - millis);\n&lt;span class=&quot;hljs-comment&quot;&gt;// endregion&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// region for index desc&lt;/span&gt;\nmillis = System.currentTimeMillis();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intsDescIndex.size() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i--) \n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (intsDescIndex.get(i) % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) intsDescIndex.remove(i);\nSystem.out.println(System.currentTimeMillis() - millis);\n&lt;span class=&quot;hljs-comment&quot;&gt;//endregion&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// region iterator&lt;/span&gt;\nmillis = System.currentTimeMillis();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;Integer&amp;gt; iterator = intsIterator.iterator(); iterator.hasNext(); )\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (iterator.next() % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) iterator.remove();\nSystem.out.println(System.currentTimeMillis() - millis);\n&lt;span class=&quot;hljs-comment&quot;&gt;//endregion&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;for index loop: 1090 msec&lt;/li&gt;\n&lt;li&gt;for desc index: &lt;strong&gt;519&lt;/strong&gt; msec---the best&lt;/li&gt;\n&lt;li&gt;for iterator: 1043 msec&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I know this question assumes just a &lt;code&gt;Collection&lt;/code&gt;, and not more specifically any &lt;code&gt;List&lt;/code&gt;.  But &lt;strong&gt;for those reading this question who are indeed working with a &lt;code&gt;List&lt;/code&gt; reference, you can avoid &lt;code&gt;ConcurrentModificationException&lt;/code&gt; with a &lt;code&gt;while&lt;/code&gt;-loop (while modifying within it) instead if you want to avoid &lt;code&gt;Iterator&lt;/code&gt;&lt;/strong&gt; (either if you want to avoid it in general, or avoid it specifically to achieve a looping order different from start-to-end stopping at each element [which I believe is the only order &lt;code&gt;Iterator&lt;/code&gt; itself can do]):&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;*Update: See comments below that clarify the analogous is also achievable with the &lt;em&gt;traditional&lt;/em&gt;-for-loop.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Integer&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i){\n    list.add(i);\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i &amp;lt; list.size()){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(list.get(i) % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){\n        list.remove(i++);\n\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        i += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;No ConcurrentModificationException from that code.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;There we see looping not start at the beginning, and not stop at &lt;em&gt;every&lt;/em&gt; element (which I believe &lt;code&gt;Iterator&lt;/code&gt; itself can&apos;t do).&lt;/p&gt;\n\n&lt;p&gt;FWIW we also see &lt;code&gt;get&lt;/code&gt; being called on &lt;code&gt;list&lt;/code&gt;, which could not be done if its reference was just &lt;code&gt;Collection&lt;/code&gt; (instead of the more specific &lt;code&gt;List&lt;/code&gt;-type of &lt;code&gt;Collection&lt;/code&gt;) - &lt;code&gt;List&lt;/code&gt; interface includes &lt;code&gt;get&lt;/code&gt;, but &lt;code&gt;Collection&lt;/code&gt; interface does not.  If not for that difference, then the &lt;code&gt;list&lt;/code&gt; reference could instead be a &lt;code&gt;Collection&lt;/code&gt; [and therefore technically this Answer would then be a direct Answer, instead of a tangential Answer].&lt;/p&gt;\n\n&lt;p&gt;FWIWW same code still works after modified to start at beginning at stop at every element (just like &lt;code&gt;Iterator&lt;/code&gt; order):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Integer&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i){\n    list.add(i);\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i &amp;lt; list.size()){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(list.get(i) % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){\n        list.remove(i);\n\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        ++i;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;you can also use &lt;strong&gt;Recursion&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Recursion in java is a process in which a method calls itself continuously. A method in java that calls itself is called recursive method.&lt;/p&gt;\n    ","\n&lt;p&gt;this might not be the best way, but for most of the small cases this should acceptable:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;em&gt;&quot;create a second empty-array and add only the ones you want to keep&quot;&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;sub&gt;I don&apos;t remeber where I read this from... for justiness I will make this wiki in hope someone finds it or just to don&apos;t earn rep I don&apos;t deserve.&lt;/sub&gt;&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note to readers: do have a read of &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs.oracle.com/javase/tutorial/collections/interfaces/&lt;/a&gt;, it may have an easier way to achieve what you want to do.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/798223/gkfx&quot; title=&quot;1,376 reputation&quot; class=&quot;comment-user&quot;&gt;GKFX&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment74640207_223918&quot;&gt;&lt;span title=&quot;2017-05-05 08:38:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 5, 2017 at 8:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What if you want to remove an element other than the element returned in the current iteration?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1908482/eugen&quot; title=&quot;2,192 reputation&quot; class=&quot;comment-user&quot;&gt;Eugen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment23064661_223929&quot;&gt;&lt;span title=&quot;2013-04-22 09:51:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 22, 2013 at 9:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You have to use the .remove in the iterator and that is only able to remove the current element, so no :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12943/bill-k&quot; title=&quot;61,238 reputation&quot; class=&quot;comment-user&quot;&gt;Bill K&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment23081682_223929&quot;&gt;&lt;span title=&quot;2013-04-22 18:00:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 22, 2013 at 18:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Be aware that this is slower compared to using ConcurrentLinkedDeque or CopyOnWriteArrayList (at least in my case)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1413756/dan&quot; title=&quot;903 reputation&quot; class=&quot;comment-user&quot;&gt;Dan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41705409_223929&quot;&gt;&lt;span title=&quot;2014-10-24 01:43:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 24, 2014 at 1:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Is it not possible to put the &lt;code&gt;iterator.next()&lt;/code&gt; call in the for-loop? If not, can someone explain why?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1669576/blake&quot; title=&quot;593 reputation&quot; class=&quot;comment-user&quot;&gt;Blake&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment60747953_223929&quot;&gt;&lt;span title=&quot;2016-04-12 13:22:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 12, 2016 at 13:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@GonenI It&apos;s implemented for all iterators from collections which aren&apos;t immutable. &lt;code&gt;List.add&lt;/code&gt; is &quot;optional&quot; in that same sense too, but you wouldn&apos;t say it&apos;s &quot;unsafe&quot; to add to a list.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2891664/radiodef&quot; title=&quot;36,387 reputation&quot; class=&quot;comment-user&quot;&gt;Radiodef&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90474122_223929&quot;&gt;&lt;span title=&quot;2018-08-09 00:33:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 9, 2018 at 0:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;foreach loop &lt;i&gt;is&lt;/i&gt; syntactic sugar for iterating. However as you pointed out, you need to call remove on the iterator - which foreach doesn&apos;t give you access to. Hence the reason why you can&apos;t remove in a foreach loop (even though you &lt;i&gt;are&lt;/i&gt; actually using an iterator under the hood)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14160/madlep&quot; title=&quot;44,632 reputation&quot; class=&quot;comment-user&quot;&gt;madlep&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91631_223927&quot;&gt;&lt;span title=&quot;2008-10-21 23:30:41Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 21, 2008 at 23:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1 for example code to use iter.remove() in context, which Bill K&apos;s answer does not [directly] have.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/88821/eddified&quot; title=&quot;2,955 reputation&quot; class=&quot;comment-user&quot;&gt;Eddified&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17166432_223927&quot;&gt;&lt;span title=&quot;2012-10-03 17:01:24Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 3, 2012 at 17:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Ooooo! I was hoping something in Java 8 or 9 might help. This still seems rather verbose to me, but I still like it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/146698/james-t-snell&quot; title=&quot;1,478 reputation&quot; class=&quot;comment-user&quot;&gt;James T Snell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment53334368_23908758&quot;&gt;&lt;span title=&quot;2015-09-23 18:25:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2015 at 18:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Is implementing equals() recommended in this case too?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4389984/anmol-gupta&quot; title=&quot;2,589 reputation&quot; class=&quot;comment-user&quot;&gt;Anmol Gupta&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment56183223_23908758&quot;&gt;&lt;span title=&quot;2015-12-11 08:57:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 11, 2015 at 8:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;by the way &lt;code&gt;removeIf&lt;/code&gt; uses &lt;code&gt;Iterator&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; loop. You can see it at java 8 &lt;code&gt;java.util.Collection.java&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1829921/omerhakanbilici&quot; title=&quot;804 reputation&quot; class=&quot;comment-user&quot;&gt;omerhakanbilici&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment67941861_23908758&quot;&gt;&lt;span title=&quot;2016-10-31 14:10:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 31, 2016 at 14:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@omerhakanbilici Some implementations like &lt;code&gt;ArrayList&lt;/code&gt; override it for performance reasons. The one you are referring to is only the default implementation.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/525036/didier-l&quot; title=&quot;16,398 reputation&quot; class=&quot;comment-user&quot;&gt;Didier L&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment73349441_23908758&quot;&gt;&lt;span title=&quot;2017-03-31 08:33:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 31, 2017 at 8:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AnmolGupta: No, &lt;code&gt;equals&lt;/code&gt; is not used at all here, so it doesn&apos;t have to be implemented. (But of course, if you use &lt;code&gt;equals&lt;/code&gt; in your test then it has to be implemented the way you want it.)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/452775/lii&quot; title=&quot;10,847 reputation&quot; class=&quot;comment-user&quot;&gt;Lii&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94876933_23908758&quot;&gt;&lt;span title=&quot;2019-01-03 10:31:28Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 3, 2019 at 10:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Very interesting. Thank you! I often don&apos;t call remove() myself, I instead favour clearing the collection after iterating through it. Not to say that&apos;s a good pattern, just what I&apos;ve been doing lately.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/146698/james-t-snell&quot; title=&quot;1,478 reputation&quot; class=&quot;comment-user&quot;&gt;James T Snell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment53334445_2841570&quot;&gt;&lt;span title=&quot;2015-09-23 18:27:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2015 at 18:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;this is what i normally do, but the explicit iterator is a more elgant solution i feel.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15055/claudiu&quot; title=&quot;216,607 reputation&quot; class=&quot;comment-user owner&quot;&gt;Claudiu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91656_223942&quot;&gt;&lt;span title=&quot;2008-10-21 23:51:25Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 21, 2008 at 23:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Fair enough, as long as you aren&apos;t doing anything else with the iterator - having it exposed makes it easier to do things like call .next() twice per loop etc. Not a huge problem, but can cause issues if you are doing anything more complicated than just running through a list to delete entries.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/943/rodeoclown&quot; title=&quot;12,890 reputation&quot; class=&quot;comment-user&quot;&gt;RodeoClown&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91667_223942&quot;&gt;&lt;span title=&quot;2008-10-21 23:58:25Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 21, 2008 at 23:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@RodeoClown: in the original question, Claudiu is removing from the Collection, not the iterator.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4249/matt-b&quot; title=&quot;135,686 reputation&quot; class=&quot;comment-user&quot;&gt;matt b&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93093_223942&quot;&gt;&lt;span title=&quot;2008-10-22 14:29:29Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 22, 2008 at 14:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Removing from the iterator removes from the underlying collection... but what I was saying in the last comment is that if you are doing anything more complicated than just looking for deletes in the loop (like processing correct data) using the iterator can make some errors easier to make.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/943/rodeoclown&quot; title=&quot;12,890 reputation&quot; class=&quot;comment-user&quot;&gt;RodeoClown&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93920_223942&quot;&gt;&lt;span title=&quot;2008-10-22 18:35:47Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 22, 2008 at 18:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If it is a simple delete values that aren&apos;t needed and the loop is only doing that one thing, using the iterator directly and calling .remove() is absolutely fine.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/943/rodeoclown&quot; title=&quot;12,890 reputation&quot; class=&quot;comment-user&quot;&gt;RodeoClown&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93923_223942&quot;&gt;&lt;span title=&quot;2008-10-22 18:36:37Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 22, 2008 at 18:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is a good trick. But it wouldn&apos;t work on non-indexed collections like sets, and it&apos;d be really slow on say linked lists.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15055/claudiu&quot; title=&quot;216,607 reputation&quot; class=&quot;comment-user owner&quot;&gt;Claudiu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39937544_25565900&quot;&gt;&lt;span title=&quot;2014-08-29 16:12:49Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 29, 2014 at 16:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Claudiu Yes, this is definitely just for &lt;code&gt;ArrayList&lt;/code&gt;s or similar collections.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/375232/landei&quot; title=&quot;53,444 reputation&quot; class=&quot;comment-user&quot;&gt;Landei&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39959455_25565900&quot;&gt;&lt;span title=&quot;2014-08-30 15:47:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 30, 2014 at 15:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;m using an ArrayList, this worked perfectly, thanks.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6909498/starsweeper&quot; title=&quot;365 reputation&quot; class=&quot;comment-user&quot;&gt;StarSweeper&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84804160_25565900&quot;&gt;&lt;span title=&quot;2018-02-21 06:30:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 21, 2018 at 6:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;indexes are great. If it&apos;s so common why don&apos;t you use &lt;code&gt;for(int i = l.size(); i--&amp;gt;0;) {&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/866333/john&quot; title=&quot;6,155 reputation&quot; class=&quot;comment-user&quot;&gt;John&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment87155966_25565900&quot;&gt;&lt;span title=&quot;2018-04-27 20:20:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 27, 2018 at 20:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Making a copy sounds like a waste of resources.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1485230/antzi&quot; title=&quot;12,393 reputation&quot; class=&quot;comment-user&quot;&gt;Antzi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment26950463_11201224&quot;&gt;&lt;span title=&quot;2013-08-21 12:35:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 21, 2013 at 12:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Antzi That depends on the size of the list and the density of the objects within. Still a valuable and valid solution.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/584862/mre&quot; title=&quot;42,368 reputation&quot; class=&quot;comment-user&quot;&gt;mre&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment61610703_11201224&quot;&gt;&lt;span title=&quot;2016-05-04 14:14:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 4, 2016 at 14:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I have been using this method. It takes a bit more resource, but much more flexible and clear.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4268839/tao-zhang&quot; title=&quot;171 reputation&quot; class=&quot;comment-user&quot;&gt;Tao Zhang&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95964873_11201224&quot;&gt;&lt;span title=&quot;2019-02-07 23:34:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 7, 2019 at 23:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is a good solution when you are not intending to remove objects inside the loop itself, but they are rather &quot;randomly&quot; removed from other threads (e.g. network operations updating data). If you find yourself doing these copies a lot there is even a java implementation doing exactly this: &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs.oracle.com/javase/8/docs/api/java/util/concurrent/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1469472/a1m&quot; title=&quot;2,267 reputation&quot; class=&quot;comment-user&quot;&gt;A1m&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103453448_11201224&quot;&gt;&lt;span title=&quot;2019-10-26 03:15:01Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 26, 2019 at 3:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Making a copy of the list is what they are typically doing with listeners on Android. It&apos;s a valid solution for small lists.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3969362/slion&quot; title=&quot;1,963 reputation&quot; class=&quot;comment-user&quot;&gt;Slion&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment116874796_11201224&quot;&gt;&lt;span title=&quot;2021-02-08 16:50:18Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 8, 2021 at 16:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Ah, so its really just the &lt;i&gt;enhanced&lt;/i&gt;-for-loop that throws the Exception.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1357094/cellepo&quot; title=&quot;3,453 reputation&quot; class=&quot;comment-user&quot;&gt;cellepo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94569722_43441822&quot;&gt;&lt;span title=&quot;2018-12-20 00:11:16Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 20, 2018 at 0:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;FWIW - same code would still work after modified to increment &lt;code&gt;i++&lt;/code&gt; in the loop guard rather than within loop body.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1357094/cellepo&quot; title=&quot;3,453 reputation&quot; class=&quot;comment-user&quot;&gt;cellepo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94569729_43441822&quot;&gt;&lt;span title=&quot;2018-12-20 00:11:56Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 20, 2018 at 0:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Correction ^:  That is if the &lt;code&gt;i++&lt;/code&gt; incrementing were not conditional - I see now that&apos;s why you do it in the body :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1357094/cellepo&quot; title=&quot;3,453 reputation&quot; class=&quot;comment-user&quot;&gt;cellepo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94569866_43441822&quot;&gt;&lt;span title=&quot;2018-12-20 00:23:00Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 20, 2018 at 0:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yep, and note that those are all in &lt;code&gt;java.util.concurrent&lt;/code&gt; package.  Some other similar/common-use-case classes from that package are &lt;code&gt;CopyOnWriteArrayList &lt;/code&gt; &amp;amp; &lt;code&gt;CopyOnWriteArraySet &lt;/code&gt; [but not limited to those].&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1357094/cellepo&quot; title=&quot;3,453 reputation&quot; class=&quot;comment-user&quot;&gt;cellepo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93612662_37990142&quot;&gt;&lt;span title=&quot;2018-11-19 03:52:18Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 19, 2018 at 3:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Actually, I just learned that although those data structure Objects &lt;i&gt;avoid&lt;/i&gt; &lt;code&gt;ConcurrentModificationException&lt;/code&gt;, using them in an &lt;i&gt;enhanced&lt;/i&gt;-for-loop can still cause indexing problems (i.e: still skipping elements, or &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt;...)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1357094/cellepo&quot; title=&quot;3,453 reputation&quot; class=&quot;comment-user&quot;&gt;cellepo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94570480_37990142&quot;&gt;&lt;span title=&quot;2018-12-20 01:13:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 20, 2018 at 1:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note: &lt;code&gt;i&lt;/code&gt; isn&apos;t a &lt;code&gt;index&lt;/code&gt; but instead the object. Maybe calling it &lt;code&gt;obj&lt;/code&gt; would be more fitting.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3423324/luckydonald&quot; title=&quot;5,258 reputation&quot; class=&quot;comment-user&quot;&gt;luckydonald&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment97553005_55161143&quot;&gt;&lt;span title=&quot;2019-03-29 12:05:37Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 29, 2019 at 12:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Was already suggested above back in 2012:&lt;a href=&quot;https://stackoverflow.com/a/11201224/3969362&quot;&gt;stackoverflow.com/a/11201224/3969362&lt;/a&gt; Making a copy of the list is what they are typically doing with listeners on Android. It&apos;s a valid solution for small lists.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3969362/slion&quot; title=&quot;1,963 reputation&quot; class=&quot;comment-user&quot;&gt;Slion&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment116874720_55161143&quot;&gt;&lt;span title=&quot;2021-02-08 16:47:31Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 8, 2021 at 16:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The additional methods in the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;ListIterator&lt;/a&gt; interface (extension of Iterator) are interesting - particularly its &lt;code&gt;previous&lt;/code&gt; method.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1357094/cellepo&quot; title=&quot;3,453 reputation&quot; class=&quot;comment-user&quot;&gt;cellepo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94569541_46733073&quot;&gt;&lt;span title=&quot;2018-12-19 23:58:03Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 19, 2018 at 23:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;A condensed but more comprehensive answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/17793299/runemage&quot; title=&quot;61 reputation&quot; class=&quot;comment-user&quot;&gt;RuneMage&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125566287_66889350&quot;&gt;&lt;span title=&quot;2022-02-08 09:09:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 8 at 9:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Your first example is not equivalent to your second, or to the OP&apos;s code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/207421/user207421&quot; title=&quot;298,824 reputation&quot; class=&quot;comment-user&quot;&gt;user207421&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126718959_66889350&quot;&gt;&lt;span title=&quot;2022-04-01 06:16:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 1 at 6:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The question explicitly states, that the OP is not necessary using &lt;code&gt;ArrayList&lt;/code&gt; and thus cannot rely on &lt;code&gt;get()&lt;/code&gt;. Otherwise probably a good approach, though.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/337120/kaskelotti&quot; title=&quot;4,398 reputation&quot; class=&quot;comment-user&quot;&gt;kaskelotti&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment35204056_20067507&quot;&gt;&lt;span title=&quot;2014-04-13 11:09:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 13, 2014 at 11:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;(Clarification ^) OP is using an arbitrary&lt;code&gt;Collection&lt;/code&gt; - &lt;code&gt;Collection&lt;/code&gt; interface does not include &lt;code&gt;get&lt;/code&gt;.  (Although FWIW &lt;code&gt;List&lt;/code&gt; interface does include &apos;get&apos;).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1357094/cellepo&quot; title=&quot;3,453 reputation&quot; class=&quot;comment-user&quot;&gt;cellepo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94568098_20067507&quot;&gt;&lt;span title=&quot;2018-12-19 22:31:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 19, 2018 at 22:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I just added a separate, more detailed Answer here also for &lt;code&gt;while&lt;/code&gt;-looping a &lt;code&gt;List&lt;/code&gt;.  But +1 for this Answer because it came first.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1357094/cellepo&quot; title=&quot;3,453 reputation&quot; class=&quot;comment-user&quot;&gt;cellepo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94569358_20067507&quot;&gt;&lt;span title=&quot;2018-12-19 23:44:28Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 19, 2018 at 23:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The point here is not the &lt;code&gt;while&lt;/code&gt; loop but removing via the &lt;code&gt;Iterator.&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/207421/user207421&quot; title=&quot;298,824 reputation&quot; class=&quot;comment-user&quot;&gt;user207421&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126718990_65476338&quot;&gt;&lt;span title=&quot;2022-04-01 06:18:48Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 1 at 6:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Did you take into account the performance hit? Each time you &quot;write&quot; to this structure, it&apos;s contents will be copied to a new object. All this is bad for performance.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6601614/shankha057&quot; title=&quot;1,204 reputation&quot; class=&quot;comment-user&quot;&gt;Shankha057&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment111675758_50161275&quot;&gt;&lt;span title=&quot;2020-07-29 12:16:36Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 29, 2020 at 12:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It isn&apos;t the best way and it isn&apos;t recommended. Don&apos;t use quote formatting for text that isn&apos;t quoted. If it is quoted, provide a citation.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/207421/user207421&quot; title=&quot;298,824 reputation&quot; class=&quot;comment-user&quot;&gt;user207421&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126718983_50161275&quot;&gt;&lt;span title=&quot;2022-04-01 06:18:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 1 at 6:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This still requires very careful calculation of indicies to remove, however.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2308683/onecricketeer&quot; title=&quot;153,507 reputation&quot; class=&quot;comment-user&quot;&gt;OneCricketeer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94569515_53860666&quot;&gt;&lt;span title=&quot;2018-12-19 23:56:08Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 19, 2018 at 23:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also, this is just a more detailed explanation of this answer &lt;a href=&quot;https://stackoverflow.com/a/43441822/2308683&quot;&gt;stackoverflow.com/a/43441822/2308683&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2308683/onecricketeer&quot; title=&quot;153,507 reputation&quot; class=&quot;comment-user&quot;&gt;OneCricketeer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94569538_53860666&quot;&gt;&lt;span title=&quot;2018-12-19 23:57:56Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 19, 2018 at 23:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Good to know - thanks! That other Answer helped me understand that it&apos;s the &lt;i&gt;enhanced&lt;/i&gt;-for-loop that would throw &lt;code&gt;ConcurrentModificationException&lt;/code&gt;, but &lt;i&gt;not&lt;/i&gt; the &lt;i&gt;traditional&lt;/i&gt;-for-loop (which the other Answer uses) - not realizing that before is why I was motivated to write this Answer (I erroneously thought then that it was &lt;i&gt;all&lt;/i&gt; for-loops that would throw the Exception).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1357094/cellepo&quot; title=&quot;3,453 reputation&quot; class=&quot;comment-user&quot;&gt;cellepo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94569950_53860666&quot;&gt;&lt;span title=&quot;2018-12-20 00:29:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 20, 2018 at 0:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":219,"title":"Iterating through a Collection, avoiding ConcurrentModificationException when removing objects in a loop","content":"\n                \n&lt;p&gt;We all know you can&apos;t do the following because of &lt;code&gt;ConcurrentModificationException&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Object i : l) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (condition(i)) {\n        l.remove(i);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But this apparently works sometimes, but not always. Here&apos;s some specific code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    Collection&amp;lt;Integer&amp;gt; l = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i) {\n        l.add(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);\n        l.add(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n        l.add(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i : l) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n            l.remove(i);\n        }\n    }\n\n    System.out.println(l);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This, of course, results in:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Exception in thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.util.ConcurrentModificationException\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Even though multiple threads aren&apos;t doing it. Anyway.&lt;/p&gt;\n\n&lt;p&gt;What&apos;s the best solution to this problem? How can I remove an item from the collection in a loop without throwing this exception?&lt;/p&gt;\n\n&lt;p&gt;I&apos;m also using an arbitrary &lt;code&gt;Collection&lt;/code&gt; here, not necessarily an &lt;code&gt;ArrayList&lt;/code&gt;, so you can&apos;t rely on &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;\n    ","slug":"iterating-through-a-collection-avoiding-concurrentmodificationexception-when-removing-objects-in-a-loop-1657387311824","postType":"QUESTION","createdAt":"2022-07-09T17:21:51.000Z","updatedAt":"2022-07-09T17:21:51.000Z","tags":[{"id":1505,"name":"collections","slug":"collections","createdAt":"2022-07-09T17:21:51.000Z","updatedAt":"2022-07-09T17:21:51.000Z","Questions_Tags":{"questionId":219,"tagId":1505}}]}]}},"__N_SSG":true}