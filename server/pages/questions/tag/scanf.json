{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;The &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/scanf.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;scanf()&lt;/code&gt;&lt;/a&gt; function skips leading whitespace automatically before trying to parse conversions other than characters.  The character formats (primarily &lt;code&gt;%c&lt;/code&gt;; also scan sets &lt;code&gt;%[]&lt;/code&gt;  and &lt;code&gt;%n&lt;/code&gt;) are the exception; they don&apos;t skip whitespace.&lt;/p&gt;\n\n&lt;p&gt;Use &lt;code&gt;&quot; %c&quot;&lt;/code&gt; with a leading blank to skip optional white space.  Do not use a trailing blank in a &lt;code&gt;scanf()&lt;/code&gt; format string.&lt;/p&gt;\n\n&lt;p&gt;Note that this still doesn&apos;t consume any trailing whitespace left in the input stream, not even to the end of a line, so beware of that if also using &lt;a href=&quot;http://en.cppreference.com/w/c/io/getchar&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getchar()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://en.cppreference.com/w/c/io/fgets&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;fgets()&lt;/code&gt;&lt;/a&gt; on the same input stream.  We&apos;re just getting scanf to skip over whitespace &lt;em&gt;before&lt;/em&gt; conversions, like it does for &lt;code&gt;%d&lt;/code&gt; and other non-character conversions.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Note that non-whitespace &quot;directives&quot; (to use &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/scanf.html&quot; rel=&quot;noreferrer&quot;&gt;POSIX scanf terminology&lt;/a&gt;) other than conversions, like the literal text in &lt;code&gt;scanf(&quot;order = %d&quot;, &amp;amp;order);&lt;/code&gt; doesn&apos;t skip whitespace either.  The literal &lt;code&gt;order&lt;/code&gt; has to match the next character to be read.&lt;/p&gt;\n\n&lt;p&gt;So you probably want &lt;code&gt;&quot; order = %d&quot;&lt;/code&gt; there if you want to skip a newline from the previous line but still require a literal match on a fixed string, &lt;a href=&quot;https://stackoverflow.com/questions/49923312/scanf-run-twice-instead-of-one-time-at-assembly-x86-64&quot;&gt;like this question&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;scanf(&quot; %c&quot;, &amp;amp;c2);&lt;/code&gt;. This will solve your problem.&lt;/p&gt;\n    ","\n&lt;p&gt;Another option (that I got from &lt;a href=&quot;https://faq.cprogramming.com/cgi-bin/smartfaq.cgi?answer=1352443831&amp;amp;id=1043284392&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;) is to read and discard the newline by using the &lt;em&gt;assignment-supression option&lt;/em&gt;. To do that, we just put a format to read a character with an asterisk between &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d%*c&quot;&lt;/span&gt;,&amp;amp;a); &lt;span class=&quot;hljs-comment&quot;&gt;// line 1&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c%*c&quot;&lt;/span&gt;,&amp;amp;c1); &lt;span class=&quot;hljs-comment&quot;&gt;// line 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;scanf&lt;/code&gt; will then read the next char (that is, the newline) but not assign it to any pointer.&lt;/p&gt;\n\n&lt;p&gt;In the end, however, I would second &lt;a href=&quot;https://faq.cprogramming.com/cgi-bin/smartfaq.cgi?answer=1352443831&amp;amp;id=1043284392&quot; rel=&quot;noreferrer&quot;&gt;the FAQ&apos;s last option&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Or, depending on your requirements, you could also forget about scanf()/getchar(), use fgets() to get a line of text from the user and parse it yourself. &lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;getchar()&lt;/code&gt; before calling second &lt;code&gt;scanf()&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;, &amp;amp;c1);\ngetchar();  &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;== remove newline&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;, &amp;amp;c2);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To echo what I have posted in &lt;a href=&quot;https://stackoverflow.com/a/52720064/6372809&quot;&gt;another answer about C++&lt;/a&gt;: I suggest to toss &lt;code&gt;scanf()&lt;/code&gt; away, to never use it, and to instead use &lt;code&gt;fgets()&lt;/code&gt; and &lt;code&gt;sscanf()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The reason for this is, that at least in Unix-like systems by default, the terminal your CLI program runs on does some processing of the user input before your program sees it. It buffers input until a newline is entered, and allows for some rudimentary line editing, like making backspace work.&lt;/p&gt;\n&lt;p&gt;So, you can never get a single character at a time, or a few single characters, just a full line. But that&apos;s not what e.g. &lt;code&gt;scanf(&quot;%d&quot;)&lt;/code&gt; processes, instead it processes just the digits, &lt;em&gt;and stops there&lt;/em&gt;, leaving the rest buffered in the C library, for a future &lt;code&gt;stdio&lt;/code&gt; function to use. If your program has e.g.&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;a);\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a word: &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, word);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and you enter the line &lt;code&gt;123 abcd&lt;/code&gt;, it completes &lt;em&gt;both&lt;/em&gt; &lt;code&gt;scanf()&lt;/code&gt;s at once, but only after a newline is given. The first &lt;code&gt;scanf()&lt;/code&gt; doesn&apos;t return when a user has hit space, even though that&apos;s where the number ends (because at that point the line is still in the terminal&apos;s line buffer); and the second &lt;code&gt;scanf()&lt;/code&gt; doesn&apos;t wait for you to enter another line (because the input buffer already contains enough to fill the &lt;code&gt;%s&lt;/code&gt; conversion).&lt;/p&gt;\n&lt;p&gt;This isn&apos;t what users usually expect!&lt;/p&gt;\n&lt;p&gt;Instead, they expect that hitting enter completes the input, and if you hit enter, you either get a default value, or an error, with possibly a suggestion to please really just give the answer.&lt;/p&gt;\n&lt;p&gt;You can&apos;t really do that with &lt;code&gt;scanf(&quot;%d&quot;)&lt;/code&gt;. If the user just hits enter, nothing happens. Because &lt;code&gt;scanf()&lt;/code&gt; is still waiting for the number. The terminal sends the line onward, but your program doesn&apos;t see it, because &lt;code&gt;scanf()&lt;/code&gt; eats it. You don&apos;t get a chance to react to the user&apos;s mistake.&lt;/p&gt;\n&lt;p&gt;That&apos;s also not very useful.&lt;/p&gt;\n&lt;p&gt;Hence, I suggest using &lt;code&gt;fgets()&lt;/code&gt; or &lt;code&gt;getline()&lt;/code&gt; to read a full line of input at a time. This exactly matches what the terminal gives, and always gives your program control after the user has entered a line. What you do with the input line is up to you, if you want a number, you can use &lt;code&gt;atoi()&lt;/code&gt;, &lt;code&gt;strtol()&lt;/code&gt;, or even &lt;code&gt;sscanf(buf, &quot;%d&quot;, &amp;amp;a)&lt;/code&gt; to parse the number. &lt;code&gt;sscanf()&lt;/code&gt; doesn&apos;t have the same mismatch as &lt;code&gt;scanf()&lt;/code&gt;, because the buffer it reads from is limited in size, and when it ends, it ends -- the function can&apos;t wait for more.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;(&lt;code&gt;fscanf()&lt;/code&gt; on a regular file can also be fine if the file format is one that supports how it skims over newlines like any whitespace. For line-oriented data, I&apos;d still use &lt;code&gt;fgets()&lt;/code&gt; and &lt;code&gt;sscanf()&lt;/code&gt;.)&lt;/sup&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;So, instead of what I had above, use something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;);\n\nfgets(buf, bufsize, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;sscanf&lt;/span&gt;(buf, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;a);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or, actually, check the return value of &lt;code&gt;sscanf()&lt;/code&gt; too, so you can detect empty lines and otherwise invalid data:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; bufsize = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; buf[bufsize];\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ret;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; word[bufsize];\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;);\n    fgets(buf, bufsize, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n\n    ret = &lt;span class=&quot;hljs-built_in&quot;&gt;sscanf&lt;/span&gt;(buf, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;a);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ret != &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ok, you don&apos;t have to.\\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a word: &quot;&lt;/span&gt;);\n    fgets(buf, bufsize, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n\n    ret = &lt;span class=&quot;hljs-built_in&quot;&gt;sscanf&lt;/span&gt;(buf, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, word);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ret != &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;You make me sad.\\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You entered %d and %s\\n&quot;&lt;/span&gt;, a, word);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Of course, if you want the program to insist, you can create a simple function to loop over the &lt;code&gt;fgets()&lt;/code&gt; and &lt;code&gt;sscanf()&lt;/code&gt; until the user deigns to do what they&apos;re told; or to just exit with an error immediately. Depends on what you think your program should do if the user doesn&apos;t want to play ball.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;You could do something similar e.g. by looping over &lt;code&gt;getchar()&lt;/code&gt; to read characters until a newline after &lt;code&gt;scanf(&quot;%d&quot;)&lt;/code&gt; returned, thus clearing up any garbage left in the buffer, but that doesn&apos;t do anything about the case where the user just hits enter on an empty line. Anyway, &lt;code&gt;fgets()&lt;/code&gt; would read until a newline, so you don&apos;t have to do it yourself.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*Take char input using scanf after int input using scanf just use fflush(stdin) function  after int input */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;conio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x;\n  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; y;\n  clrscr();\n  &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot; enter an int &quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;x);\n  fflush(&lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n  &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n Now enter a char&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;,&amp;amp;y);\n  &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n X=%d and Y=%c&quot;&lt;/span&gt;,x,y);\n  getch();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is sometimes suggested that &lt;code&gt;fflush(stdin)&lt;/code&gt; can be used before the call to &lt;code&gt;scanf()&lt;/code&gt; for a single character.  Please read &lt;a href=&quot;https://stackoverflow.com/questions/2979209/&quot;&gt;Using &lt;code&gt;fflush(stdin)&lt;/code&gt;&lt;/a&gt; for a discussion of the pros and cons and alternatives to that method (which works, more or less, on Windows, and does not work most other places).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15168/jonathan-leffler&quot; title=&quot;700,786 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Leffler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94018116_5240789&quot;&gt;&lt;span title=&quot;2018-12-02 03:09:15Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2018 at 3:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Could you please let us know which book you are referring to .?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5676941/surya-kiran&quot; title=&quot;429 reputation&quot; class=&quot;comment-user&quot;&gt;surya kiran&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107851474_5240789&quot;&gt;&lt;span title=&quot;2020-03-31 22:17:10Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 31, 2020 at 22:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JonathanLeffler Using &lt;code&gt;fflush(stdin)&lt;/code&gt; is plain &lt;b&gt;undefined behaviour.&lt;/b&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/16835308/zakk&quot; title=&quot;1,457 reputation&quot; class=&quot;comment-user&quot;&gt;Zakk&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127791270_5240789&quot;&gt;&lt;span title=&quot;2022-05-22 08:32:58Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 22 at 8:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;%c&lt;/code&gt;, &lt;code&gt;%n&lt;/code&gt;, &lt;code&gt;%[]&lt;/code&gt; are the 3 specified expectations that do not consume leading whitespace.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,312 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment56214982_5240807&quot;&gt;&lt;span title=&quot;2015-12-12 03:12:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 12, 2015 at 3:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@chux So Does in Other Cases, The scanf clears all the whitespaces before in the buffer or ignores them for they input but they are still there?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5473170/suraj-jain&quot; title=&quot;4,267 reputation&quot; class=&quot;comment-user&quot;&gt;Suraj Jain&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment71802691_5240807&quot;&gt;&lt;span title=&quot;2017-02-19 07:40:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 19, 2017 at 7:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@SurajJain Yes,&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,312 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment71823596_5240807&quot;&gt;&lt;span title=&quot;2017-02-20 02:27:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 20, 2017 at 2:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See &lt;a href=&quot;http://stackoverflow.com/questions/19499060/what-is-difference-between-scanfd-and-scanfd&quot;&gt;Trailing blank in &lt;code&gt;scanf()&lt;/code&gt; format string&lt;/a&gt; and &lt;a href=&quot;http://stackoverflow.com/questions/15740024/scanf-asking-twice-for-input-while-i-expect-it-to-ask-only-one/15740124#15740124&quot;&gt;&lt;code&gt;scanf()&lt;/code&gt; asking twice for input while I expect it to ask only once&lt;/a&gt; for a discussion of trailing blanks in format strings.  They&apos;re a bad idea  astoundingly bad if you expect human interaction and bad for program interaction.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15168/jonathan-leffler&quot; title=&quot;700,786 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Leffler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment80512369_5240807&quot;&gt;&lt;span title=&quot;2017-10-17 05:28:29Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 17, 2017 at 5:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer does a very good job of explaining that &lt;code&gt;scanf()&lt;/code&gt; reads and then formats, and not just read according to the format.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14068232/priyanshul-govil&quot; title=&quot;468 reputation&quot; class=&quot;comment-user&quot;&gt;Priyanshul Govil&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118534824_5240807&quot;&gt;&lt;span title=&quot;2021-04-12 14:24:36Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 12, 2021 at 14:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The trouble with this technique is that if the user types &lt;code&gt;a&lt;/code&gt; then space then newline, the suppressed character conversion reads the space and still leaves the newline.  If the user types &lt;code&gt;supercalifragilisticexpialidocious&lt;/code&gt; when you expect &lt;code&gt;a&lt;/code&gt;, you&apos;ve got a lot of extra characters to deal with.  You can never tell whether a trailing suppressed conversion succeeds, either  they&apos;re not counted in the return from &lt;code&gt;scanf()&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15168/jonathan-leffler&quot; title=&quot;700,786 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Leffler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105563387_54393811&quot;&gt;&lt;span title=&quot;2020-01-12 15:53:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 12, 2020 at 15:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This only discards &lt;i&gt;one&lt;/i&gt; character. Placing a space before &lt;code&gt;%&lt;/code&gt; will discard &lt;i&gt;any amount&lt;/i&gt; of leading whitespace (including none).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4142924/weather-vane&quot; title=&quot;32,211 reputation&quot; class=&quot;comment-user&quot;&gt;Weather Vane&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125242743_54393811&quot;&gt;&lt;span title=&quot;2022-01-25 07:58:40Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 25 at 7:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This works provided that the user didn&apos;t type anything else  trailing blanks, for example.  But it isn&apos;t as good as a loop that scans to the next newline: &lt;code&gt;int c; while ((c = getchar()) != EOF &amp;amp;&amp;amp; c != &apos;\\n&apos;) ;&lt;/code&gt; (written over three lines when not in a comment).  It is often sufficient; it is not foolproof (and you have to remember that fools are very clever about crashing things).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15168/jonathan-leffler&quot; title=&quot;700,786 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Leffler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94018082_51674188&quot;&gt;&lt;span title=&quot;2018-12-02 03:05:22Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2018 at 3:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JonathanLeffler  do you mean written over two lines? &lt;code&gt;int c; while ((c = getchar()) != EOF &amp;amp;&amp;amp; c != &apos;\\n&apos;) ;&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4983231/john&quot; title=&quot;113 reputation&quot; class=&quot;comment-user&quot;&gt;john&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117040253_51674188&quot;&gt;&lt;span title=&quot;2021-02-14 23:37:33Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 14, 2021 at 23:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@john: It can be one, two, three lines or more  the compiler doesn&apos;t care.  Left to my own devices, it would be three lines: the declaration, the loop control and the loop body.   The semicolon denoting the empty loop body would be on a line on its own to emphasize that it is intentional (as recommended by K&amp;amp;R).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15168/jonathan-leffler&quot; title=&quot;700,786 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Leffler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117042494_51674188&quot;&gt;&lt;span title=&quot;2021-02-15 03:48:55Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 15, 2021 at 3:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;fgets()&lt;/code&gt;/&lt;code&gt;getline()&lt;/code&gt; and then &lt;code&gt;sscanf()&lt;/code&gt; or &lt;code&gt;strtol()&lt;/code&gt;, etc., also has another huge advantage over using &lt;code&gt;scanf()&lt;/code&gt; directly.  &lt;b&gt;&lt;i&gt;When&lt;/i&gt;&lt;/b&gt; the program encounters unexpected input, the input stream isn&apos;t left in an unknown state where recovery without losing data can be impossible.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4756299/andrew-henle&quot; title=&quot;29,612 reputation&quot; class=&quot;comment-user&quot;&gt;Andrew Henle&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117152203_66264109&quot;&gt;&lt;span title=&quot;2021-02-18 16:45:36Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 18, 2021 at 16:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note the caveats about &lt;a href=&quot;https://stackoverflow.com/q/2979209/15168&quot;&gt;Using &lt;code&gt;fflush(stdin)&lt;/code&gt;&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15168/jonathan-leffler&quot; title=&quot;700,786 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Leffler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126960982_70185028&quot;&gt;&lt;span title=&quot;2022-04-12 16:31:53Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 12 at 16:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;conio.h&lt;/code&gt; is not part of ISO C, but is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Computing_platform&quot; rel=&quot;nofollow noreferrer&quot;&gt;platform&lt;/a&gt;-specific header. The functions &lt;code&gt;clrscr&lt;/code&gt; and &lt;code&gt;getch&lt;/code&gt; are also platform-specific. Note that the question is not tagged with any particular platform, so that the question does not apply to any particular platform. Therefore, if you decide to provide a platform-specific answer, you should at least clearly mark it as such and specify to which platform your answer applies.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12149471/andreas-wenzel&quot; title=&quot;13,574 reputation&quot; class=&quot;comment-user&quot;&gt;Andreas Wenzel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128089630_70185028&quot;&gt;&lt;span title=&quot;2022-06-05 18:37:49Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 5 at 18:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":126,"title":"scanf() leaves the newline character in the buffer","content":"\n                \n&lt;p&gt;I have the following program:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, b;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c1, c2;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter something: &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;a); &lt;span class=&quot;hljs-comment&quot;&gt;// line 1&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter other something: &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;b); &lt;span class=&quot;hljs-comment&quot;&gt;// line 2&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a char: &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;, &amp;amp;c1); &lt;span class=&quot;hljs-comment&quot;&gt;// line 3&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter another char: &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;, &amp;amp;c2); &lt;span class=&quot;hljs-comment&quot;&gt;// line 4&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Done&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// line 5&lt;/span&gt;\n\n    system(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PAUSE&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As I read in the C book, the author says that &lt;code&gt;scanf()&lt;/code&gt; left a newline character in the buffer, therefore, the program does not stop at line 4 for user to enter the data, rather it stores the new line character in &lt;code&gt;c2&lt;/code&gt; and moves to line 5.&lt;/p&gt;\n&lt;p&gt;Is that right?&lt;/p&gt;\n&lt;p&gt;However, does this only happen with &lt;code&gt;char&lt;/code&gt; data types? Because I did not see this problem with &lt;code&gt;int&lt;/code&gt; data types as in line 1, 2, 3. Is it right?&lt;/p&gt;\n    ","slug":"scanf()-leaves-the-newline-character-in-the-buffer-1657384699202","postType":"QUESTION","createdAt":"2022-07-09T16:38:19.000Z","updatedAt":"2022-07-09T16:38:19.000Z","tags":[{"id":459,"name":"scanf","slug":"scanf","createdAt":"2022-07-09T16:38:19.000Z","updatedAt":"2022-07-09T16:38:19.000Z","Questions_Tags":{"questionId":126,"tagId":459}}]}]}},"__N_SSG":true}