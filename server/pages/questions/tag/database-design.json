{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;In addition to violating &lt;a href=&quot;http://en.wikipedia.org/wiki/1NF&quot; rel=&quot;nofollow noreferrer&quot;&gt;First Normal Form&lt;/a&gt; because of the repeating group of values stored in a single column, comma-separated lists have a lot of other more practical problems:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Cant ensure that each value is the right data type: no way to prevent &lt;em&gt;1,2,3,banana,5&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;Cant use foreign key constraints to link values to a lookup table; no way to enforce referential integrity.&lt;/li&gt;\n&lt;li&gt;Cant enforce uniqueness: no way to prevent &lt;em&gt;1,2,3,3,3,5&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;Cant delete a value from the list without fetching the whole list.&lt;/li&gt;\n&lt;li&gt;Can&apos;t store a list longer than what fits in the string column.&lt;/li&gt;\n&lt;li&gt;Hard to search for all entities with a given value in the list; you have to use an inefficient table-scan. May have to resort to regular expressions, for example in MySQL:&lt;br&gt;\n&lt;code&gt;idlist REGEXP &apos;[[:&amp;lt;:]]2[[:&amp;gt;:]]&apos;&lt;/code&gt; or in MySQL 8.0: &lt;code&gt;idlist REGEXP &apos;\\\\b2\\\\b&apos;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Hard to count elements in the list, or do other aggregate queries.&lt;/li&gt;\n&lt;li&gt;Hard to join the values to the lookup table they reference.&lt;/li&gt;\n&lt;li&gt;Hard to fetch the list in sorted order.&lt;/li&gt;\n&lt;li&gt;Hard to choose a separator that is guaranteed not to appear in the values&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;To solve these problems, you have to write tons of application code, reinventing functionality that the RDBMS &lt;em&gt;already provides much more efficiently&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Comma-separated lists are wrong enough that I made this the first chapter in my book: &lt;a href=&quot;https://pragprog.com/titles/bksap1/&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL Antipatterns, Volume 1: Avoiding the Pitfalls of Database Programming&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;There are times when you need to employ denormalization, but as &lt;a href=&quot;https://stackoverflow.com/a/3653507/578288&quot;&gt;@OMG Ponies mentions&lt;/a&gt;, these are exception cases.  Any non-relational optimization benefits one type of query at the expense of other uses of the data, so be sure you know which of your queries need to be treated so specially that they deserve denormalization.&lt;/p&gt;\n    ","\n&lt;p&gt;&quot;One reason was laziness&quot;.&lt;/p&gt;\n\n&lt;p&gt;This rings alarm bells. The only reason you should do something like this is that you know how to do it &quot;the right way&quot; but you have come to the conclusion that there is a tangible reason not to do it that way.&lt;/p&gt;\n\n&lt;p&gt;Having said this: if the data you are choosing to store this way is data that you will never need to query by, then there may be a case for storing it in the way you have chosen.&lt;/p&gt;\n\n&lt;p&gt;(Some users would dispute the statement in my previous paragraph, saying that &quot;you can never know what requirements will be added in the future&quot;. These users are either misguided or stating a religious conviction. Sometimes it is advantageous to work to the requirements you have before you.)&lt;/p&gt;\n    ","\n&lt;p&gt;There are numerous questions on SO asking:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;how to get a count of specific values from the comma separated list&lt;/li&gt;\n&lt;li&gt;how to get records that have only the same 2/3/etc specific value from that comma separated list&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Another problem with the comma separated list is ensuring the values are consistent - storing text means the possibility of typos...&lt;/p&gt;\n\n&lt;p&gt;These are all symptoms of denormalized data, and highlight why you should always model for normalized data.  Denormalization &lt;em&gt;can&lt;/em&gt; be a query optimization, &lt;strong&gt;&lt;em&gt;to be applied when the need actually presents itself&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In general anything can be defensible if it meets the requirements of your project.  This doesn&apos;t mean that people will agree with or want to defend your decision...&lt;/p&gt;\n\n&lt;p&gt;In general, storing data in this way is suboptimal (e.g. harder to do efficient queries) and may cause maintenance issues if you modify the items in your form.  Perhaps you could have found a middle ground and used an integer representing a set of bit flags instead?&lt;/p&gt;\n    ","\n&lt;p&gt;Yes, I would say that it really is that bad.  It&apos;s a defensible choice, but that doesn&apos;t make it correct or good.&lt;/p&gt;\n\n&lt;p&gt;It breaks first normal form.&lt;/p&gt;\n\n&lt;p&gt;A second criticism is that putting raw input results directly into a database, without any validation or binding at all, leaves you open to SQL injection attacks.&lt;/p&gt;\n\n&lt;p&gt;What you&apos;re calling laziness and lack of SQL knowledge is the stuff that neophytes are made of.  I&apos;d recommend taking the time to do it properly and view it as an opportunity to learn.&lt;/p&gt;\n\n&lt;p&gt;Or leave it as it is and learn the painful lesson of a SQL injection attack.&lt;/p&gt;\n    ","\n&lt;p&gt;I needed a multi-value column, it could be implemented as an xml field&lt;/p&gt;\n\n&lt;p&gt;It could be converted to a comma delimited as necessary&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/6097849/querying-an-xml-list-in-sql-server-using-xquery&quot;&gt;querying an XML list in sql server using Xquery&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;By being an xml field, some of the concerns can be addressed.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Can&apos;t ensure that each value is the right data type: no way to prevent 1,2,3,banana,5&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; values in a tag can be forced to be the correct type&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Can&apos;t use foreign key constraints to link values to a lookup table; no way to enforce referential integrity.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; still an issue&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Can&apos;t enforce uniqueness: no way to prevent 1,2,3,3,3,5&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; still an issue&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Can&apos;t delete a value from the list without fetching the whole list.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; single items can be removed&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Hard to search for all entities with a given value in the list; you have to use an inefficient table-scan.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; xml field can be indexed&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Hard to count elements in the list, or do other aggregate queries.**&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; not particularly hard &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Hard to join the values to the lookup table they reference.**&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; not particularly hard &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Hard to fetch the list in sorted order.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; not particularly hard &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Storing integers as strings takes about twice as much space as storing binary integers.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; storage is even worse than a csv &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Plus a lot of comma characters.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; tags are used instead of commas&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;In short, using XML gets around some of the issues with delimited list AND can be converted to a delimited list as needed&lt;/p&gt;\n    ","\n&lt;p&gt;Yes, it &lt;em&gt;is&lt;/em&gt; that bad.  My view is that if you don&apos;t like using relational databases then look for an alternative that suits you better, there are lots of interesting &quot;NOSQL&quot; projects out there with some really advanced features.&lt;/p&gt;\n    ","\n&lt;p&gt;Well I&apos;ve been using a key/value pair tab separated list in a NTEXT column in SQL Server for more than 4 years now and it works. You do lose the flexibility of making queries but on the other hand, if you have a library that persists/derpersists the key value pair then it&apos;s not a that bad idea.&lt;/p&gt;\n    ","\n&lt;p&gt;I would probably take the middle ground: make each field in the CSV into a separate column in the database, but not worry much about normalization (at least for now). At some point, normalization &lt;em&gt;might&lt;/em&gt; become interesting, but with all the data shoved into a single column you&apos;re gaining virtually no benefit from using a database at all. You need to separate the data into logical fields/columns/whatever you want to call them before you can manipulate it meaningfully at all.&lt;/p&gt;\n    ","\n&lt;p&gt;If you have a fixed number of boolean fields, you could use a &lt;code&gt;INT(1) NOT NULL&lt;/code&gt; (or &lt;code&gt;BIT NOT NULL&lt;/code&gt; if it exists) or &lt;code&gt;CHAR (0)&lt;/code&gt; (nullable) for each. You could also use a &lt;code&gt;SET&lt;/code&gt; (I forget the exact syntax).&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;in that case, why bothering database?, saving in a file will do.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/323000/thavan&quot; title=&quot;2,333 reputation&quot; class=&quot;comment-user&quot;&gt;thavan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment20776832_3653462&quot;&gt;&lt;span title=&quot;2013-02-12 09:31:33Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 12, 2013 at 9:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Agreed with @thavan. Why even save the data for a proof of concept? Once you have the proof complete, then add a database correctly. Your fine doing lightweight for proof of concept, just don&apos;t make things you have to unmake later.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9249/jeff-davis&quot; title=&quot;4,666 reputation&quot; class=&quot;comment-user&quot;&gt;Jeff Davis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment26581397_3653462&quot;&gt;&lt;span title=&quot;2013-08-09 14:10:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 9, 2013 at 14:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In Postgres, an array column should be preferred over a comma separated list. That at least ensures the proper data type, has no problems with distinguishing the delimiter from the actual data and it can be efficiently indexed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/330315/a-horse-with-no-name&quot; title=&quot;502,896 reputation&quot; class=&quot;comment-user&quot;&gt;a_horse_with_no_name&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment101883927_3653462&quot;&gt;&lt;span title=&quot;2019-08-30 06:32:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 30, 2019 at 6:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;An ARRAY (of any datatype) can fix the exception, just check PostgreSQL: &lt;a href=&quot;http://www.postgresql.org/docs/current/static/arrays.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;postgresql.org/docs/current/static/arrays.html&lt;/a&gt; (@Bill: Great book, a must read for any developer or dba)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/271959/frank-heikens&quot; title=&quot;107,569 reputation&quot; class=&quot;comment-user&quot;&gt;Frank Heikens&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10169372_3653574&quot;&gt;&lt;span title=&quot;2011-11-24 21:18:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 24, 2011 at 21:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For PostgreSQL-specific discussion see &lt;a href=&quot;http://dba.stackexchange.com/q/55871/7788&quot;&gt;dba.stackexchange.com/q/55871/7788&lt;/a&gt; . Comma-separated is just as awful, but an array field can be an acceptable performance optimisation under some circumstances if applied carefully and with consideration of the consequences.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/398670/craig-ringer&quot; title=&quot;285,644 reputation&quot; class=&quot;comment-user&quot;&gt;Craig Ringer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31284143_3653574&quot;&gt;&lt;span title=&quot;2013-12-31 08:54:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 31, 2013 at 8:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@CraigRinger, yes, it&apos;s a type of denormalization. When used carefully, denormalization can be just the right thing to do for a certain query you are trying to optimize, but it must be done with full understanding that it harms other queries. If those other queries aren&apos;t important to your application, then the pain is less.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/20860/bill-karwin&quot; title=&quot;503,252 reputation&quot; class=&quot;comment-user&quot;&gt;Bill Karwin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment40774695_3653574&quot;&gt;&lt;span title=&quot;2014-09-25 05:32:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 25, 2014 at 5:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I know its not recommended, but playing devils advocate: most of these can be taken off if there is a ui that handles uniqueness and data types (otherwise would error or misbehave), ui drops and creates it anyway, there is a driver table where the values come from to make them unique, field like &apos;%P%&apos; can be used, values being P, R, S, T, counting doesn&apos;t matter, and sorting doesn&apos;t matter.  Depending on ui, values can be split[] e.g. to check checkboxes in a list from driver table in least common scenario without having to go to another table to get them.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3512018/jmcclure&quot; title=&quot;122 reputation&quot; class=&quot;comment-user&quot;&gt;jmcclure&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment53300904_3653574&quot;&gt;&lt;span title=&quot;2015-09-23 01:09:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2015 at 1:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@PrabhuNandanKumar, I would store 174 &lt;i&gt;rows&lt;/i&gt; in a second table that references your first table. Do not store 174 columns with similar data.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/20860/bill-karwin&quot; title=&quot;503,252 reputation&quot; class=&quot;comment-user&quot;&gt;Bill Karwin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment85073386_3653574&quot;&gt;&lt;span title=&quot;2018-02-28 16:33:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 28, 2018 at 16:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I always hear some people saying that &quot;my design is more flexible than yours&quot; when I confront them about things like not setting up foreign key constraints, or storing lists in a single field. To me, flexibility (in such cases) == no discipline == laziness.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1124270/foresightyj&quot; title=&quot;1,916 reputation&quot; class=&quot;comment-user&quot;&gt;foresightyj&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment44820462_3653541&quot;&gt;&lt;span title=&quot;2015-01-30 03:28:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 30, 2015 at 3:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I don&apos;t see anything in this question that suggests he is vulnerable to SQL injection. SQL injection and database normalisation are orthogonal topics, and your digression on injection is irrelevant to the question.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/340819/hammerite&quot; title=&quot;20,831 reputation&quot; class=&quot;comment-user&quot;&gt;Hammerite&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3842442_3653497&quot;&gt;&lt;span title=&quot;2010-09-06 18:24:49Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 6, 2010 at 18:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The input is escaped, and anybody who has access to this application already has easier ways of wreaking havoc. I&apos;m using Drupal db_query to access the database, seperately supplying the parameters.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/347857/mad-scientist&quot; title=&quot;17,375 reputation&quot; class=&quot;comment-user owner&quot;&gt;Mad Scientist&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3842448_3653497&quot;&gt;&lt;span title=&quot;2010-09-06 18:25:45Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 6, 2010 at 18:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Hammerite, even if this particular bit of laziness and unwillingness to learn doesn&apos;t lead to an SQL injection, other examples of the same attitude will.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3333/paul-tomblin&quot; title=&quot;174,020 reputation&quot; class=&quot;comment-user&quot;&gt;Paul Tomblin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3842453_3653497&quot;&gt;&lt;span title=&quot;2010-09-06 18:26:33Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 6, 2010 at 18:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Hammerite, there&apos;s nothing to exclude the possibility, either.  I thought it was worth bringing up in case the OP&apos;s ignorance extended to SQL injection as well.  I agree that normalization and SQL injection can be orthogonal, but without other information it seemed to me that it should be mentioned.  It&apos;s hardly irrelevant.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/37213/duffymo&quot; title=&quot;300,335 reputation&quot; class=&quot;comment-user&quot;&gt;duffymo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3842468_3653497&quot;&gt;&lt;span title=&quot;2010-09-06 18:28:45Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 6, 2010 at 18:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Paul: And maybe the same attitude will lead to him being hit by a bus when he fails to look both ways before crossing the street, but you haven&apos;t warned him about that. Edit: I had thought you were the poster of this answer, my mistake.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/340819/hammerite&quot; title=&quot;20,831 reputation&quot; class=&quot;comment-user&quot;&gt;Hammerite&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3842480_3653497&quot;&gt;&lt;span title=&quot;2010-09-06 18:29:46Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 6, 2010 at 18:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;No, it&apos;s a horrible idea.  You&apos;ve managed to get away with it, but the cost of your few minutes of development time has cost you lousy query performance, flexibility, and maintainability of your code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3333/paul-tomblin&quot; title=&quot;174,020 reputation&quot; class=&quot;comment-user&quot;&gt;Paul Tomblin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3842467_3653500&quot;&gt;&lt;span title=&quot;2010-09-06 18:28:40Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 6, 2010 at 18:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Paul, I agree. But as I said I used if for a specific purpose, and that is for a data entry operation where you have many kinds of forms. I am revising the design now that I have learnt NHibernate but back then I needed the flexibity to design the form in ASP.NET and use the textbox ids as key in the key/value pair.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/125214/raj&quot; title=&quot;1,726 reputation&quot; class=&quot;comment-user&quot;&gt;Raj&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3845947_3653500&quot;&gt;&lt;span title=&quot;2010-09-07 06:58:20Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 7, 2010 at 6:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Telling someone who has maintained the app for 4 years about maintenance concerns is a bit presumptuous. There&apos;s very few &quot;horrible&quot; ideas in sw development - mostly they&apos;re just ideas with very limited applicability. It&apos;s reasonable to warn folks on the limitations, but chastising those who have done it and lived through it strikes me as a holier-than-thou attitude I can do without.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2199/mark-brackett&quot; title=&quot;83,376 reputation&quot; class=&quot;comment-user&quot;&gt;Mark Brackett&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25545189_3653500&quot;&gt;&lt;span title=&quot;2013-07-09 22:55:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 9, 2013 at 22:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;INT(1)&lt;/code&gt; takes 4 bytes; the &lt;code&gt;(1)&lt;/code&gt; is meaningless.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1766831/rick-james&quot; title=&quot;124,178 reputation&quot; class=&quot;comment-user&quot;&gt;Rick James&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109621745_53566631&quot;&gt;&lt;span title=&quot;2020-05-23 23:54:29Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 23, 2020 at 23:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How many bytes an INT(1) takes is product specific, and also what INT(1) means. Can be one digit, one byte, one word, or perhaps something else?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3706016/jarlh&quot; title=&quot;40,140 reputation&quot; class=&quot;comment-user&quot;&gt;jarlh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122537795_53566631&quot;&gt;&lt;span title=&quot;2021-09-25 19:09:05Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 25, 2021 at 19:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":68,"title":"Is storing a delimited list in a database column really that bad?","content":"\n                \n&lt;p&gt;Imagine a web form with a set of check boxes (any or all of them can be selected). I chose to save them in a comma separated list of values stored in one column of the database table.&lt;/p&gt;\n\n&lt;p&gt;Now, I know that the correct solution would be to create a second table and properly normalize the database. It was quicker to implement the easy solution, and I wanted to have a proof-of-concept of that application quickly and without having to spend too much time on it.&lt;/p&gt;\n\n&lt;p&gt;I thought the saved time and simpler code was worth it in my situation, is this a defensible design choice, or should I have normalized it from the start?&lt;/p&gt;\n\n&lt;p&gt;Some more context, this is a small internal application that essentially replaces an Excel file that was stored on a shared folder. I&apos;m also asking because I&apos;m thinking about cleaning up the program and make it more maintainable. There are some things in there I&apos;m not entirely happy with, one of them is the topic of this question.&lt;/p&gt;\n    ","slug":"is-storing-a-delimited-list-in-a-database-column-really-that-bad-1657384474773","postType":"QUESTION","createdAt":"2022-07-09T16:34:34.000Z","updatedAt":"2022-07-09T16:34:34.000Z","tags":[{"id":250,"name":"database-design","slug":"database-design","createdAt":"2022-07-09T16:34:34.000Z","updatedAt":"2022-07-09T16:34:34.000Z","Questions_Tags":{"questionId":68,"tagId":250}}]}]}},"__N_SSG":true}