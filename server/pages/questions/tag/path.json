{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;I just made this based on some similar code I already had, it appears to work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;byString&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o, s&lt;/span&gt;) {\n    s = s.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\[(\\w+)\\]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.$1&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// convert indexes to properties&lt;/span&gt;\n    s = s.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/^\\./&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);           &lt;span class=&quot;hljs-comment&quot;&gt;// strip a leading dot&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = s.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, n = a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; n; ++i) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k = a[i];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; o) {\n            o = o[k];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage::&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;byString&lt;/span&gt;(someObj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;part3[0].name&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See a working demo at &lt;a href=&quot;http://jsfiddle.net/alnitak/hEsys/&quot;&gt;http://jsfiddle.net/alnitak/hEsys/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; some have noticed that this code will throw an error if passed a string where the left-most indexes don&apos;t correspond to a correctly  nested entry within the object.  This is a valid concern, but IMHO best addressed with a &lt;code&gt;try / catch&lt;/code&gt; block when calling, rather than having this function silently return &lt;code&gt;undefined&lt;/code&gt; for an invalid index.&lt;/p&gt;\n    ","\n&lt;p&gt;This is now supported by lodash using &lt;code&gt;_.get(obj, property)&lt;/code&gt;. See &lt;a href=&quot;https://lodash.com/docs#get&quot;&gt;https://lodash.com/docs#get&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Example from the docs:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object = { &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: [{ &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: { &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; } }] };\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(object, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a[0].b.c&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//  3&lt;/span&gt;\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(object, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-comment&quot;&gt;//  3&lt;/span&gt;\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(object, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b.c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;default&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;default&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is the solution I use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, obj=self, separator=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; properties = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(path) ? path : path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(separator)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; properties.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;prev, curr&lt;/span&gt;) =&amp;gt;&lt;/span&gt; prev &amp;amp;&amp;amp; prev[curr], obj)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// accessing property path on global scope&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;document.body.style.width&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;// or&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;style.width&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// accessing array indexes&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (someObject has been defined in the question)&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;part3.0.size&quot;&lt;/span&gt;, someObject) &lt;span class=&quot;hljs-comment&quot;&gt;// returns &apos;10&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// accessing non-existent properties&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// returns undefined when intermediate properties are not defined:&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;properties.that.do.not.exist&apos;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;hello&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;})\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// accessing properties with unusual keys by changing the separator&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { &lt;span class=&quot;hljs-attr&quot;&gt;object&lt;/span&gt;: { &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.property.name.with.periods&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt; } }\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;object-&amp;gt;a.property.name.with.periods&apos;&lt;/span&gt;, obj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&amp;gt;&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// returns 42&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// accessing properties with unusual keys by passing a property name array&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.property.name.with.periods&apos;&lt;/span&gt;], obj) &lt;span class=&quot;hljs-comment&quot;&gt;// returns 42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Limitations:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Can&apos;t use brackets (&lt;code&gt;[]&lt;/code&gt;) for array indicesthough specifying array indices between the separator token (e.g., &lt;code&gt;.&lt;/code&gt;) works fine as shown above. &lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;ES6&lt;/strong&gt;: Only one line in Vanila JS (it return null if don&apos;t find instead of giving error):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;path.string&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;)=&amp;gt;&lt;/span&gt;p&amp;amp;&amp;amp;p[c]||&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;MyOBJ&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b.c&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;)=&amp;gt;&lt;/span&gt;p&amp;amp;&amp;amp;p[c]||&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}}})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;With Optional chaining operator&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b.c&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;)=&amp;gt;&lt;/span&gt;p?.[c], {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}}})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For a ready to use function that also recognizes false, 0 and negative number and accept default values as parameter:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;object, path, defaultValue&lt;/span&gt;) =&amp;gt; path\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o, p&lt;/span&gt;) =&amp;gt;&lt;/span&gt; o ? o[p] : defaultValue, object)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example to use:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;document.body&apos;&lt;/span&gt;) =&amp;gt; &amp;lt;body&amp;gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;document.body.xyz&apos;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;document.body.xyz&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;document.body.xyz&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Bonus&lt;/em&gt;:&lt;/p&gt;\n&lt;p&gt;To &lt;strong&gt;set&lt;/strong&gt; a path (Requested by @rob-gordon) you can use:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setPath&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;object, path, value&lt;/span&gt;) =&amp;gt; path\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o,p,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; o[p] = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === ++i ? value : o[p] || {}, object)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; myVar = {}\n&lt;span class=&quot;hljs-title function_&quot;&gt;setPath&lt;/span&gt;(myVar, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b.c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myVar) =&amp;gt; {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;}}}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Access array with []&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;object, path, defaultValue&lt;/span&gt;) =&amp;gt; path\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[\\.\\[\\]\\&apos;\\&quot;]/&lt;/span&gt;)\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;p&lt;/span&gt; =&amp;gt;&lt;/span&gt; p)\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o, p&lt;/span&gt;) =&amp;gt;&lt;/span&gt; o ? o[p] : defaultValue, object)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myVar = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:[{&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}]}}\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt;(myVar,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b[0].c&apos;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt;(myVar,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a[&quot;b&quot;][\\&apos;0\\&apos;].c&apos;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You&apos;d have to parse the string yourself:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getProperty&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, prop&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parts = prop.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(parts)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; last = parts.&lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;(),\n        l = parts.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;,\n        i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n        current = parts[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((obj = obj[current]) &amp;amp;&amp;amp; i &amp;lt; l) {\n            current = parts[i];\n            i++;\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(obj) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj[last];\n        }\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;parts is not valid array&apos;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This required that you also define array indexes with dot notation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part3name1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;part3.0.name&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It makes the parsing easier.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/fkling/WmYEX/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;DEMO&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Works for arrays / arrays inside the object also.\nDefensive against invalid values.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Retrieve nested item from object/array\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;Object|Array&lt;/span&gt;} &lt;span class=&quot;hljs-variable&quot;&gt;obj&lt;/span&gt;\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;} path dot separated\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;*&lt;/span&gt;} def default value ( if result undefined )\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@returns&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;*&lt;/span&gt;}\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;path&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path, def&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i, len;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,path = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;), len = path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; len; i++){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!obj || &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; def;\n        obj = obj[path[i]];\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(obj === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; def;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//////////////////////////&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//         TEST         //&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//////////////////////////&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;sp ace&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;sp ace&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;arr&lt;/span&gt;: arr,\n  &lt;span class=&quot;hljs-attr&quot;&gt;nested&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;dotted.str.ing&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;},\n  &lt;span class=&quot;hljs-attr&quot;&gt;arr3&lt;/span&gt;: arr\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;shouldThrow&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`path(obj, &quot;arr.0&quot;)`&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;shouldBeDefined&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`path(obj, &quot;arr[0]&quot;)`&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;shouldBeEqualToNumber&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`path(obj, &quot;arr.length&quot;)`&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;shouldBeTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`path(obj, &quot;sp ace&quot;)`&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;shouldBeEqualToString&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`path(obj, &quot;none.existed.prop&quot;, &quot;fallback&quot;)`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;fallback&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;shouldBeTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`path(obj, &quot;nested[&apos;dotted.str.ing&apos;])`&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://cdn.rawgit.com/coderek/e7b30bac7634a50ad8fd/raw/174b6634c8f57aa8aac0716c5b7b2a7098e03584/js-test.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;using eval:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part1name = &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;someObject.part1.name&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;wrap to return undefined on error&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;path&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obj.&quot;&lt;/span&gt; + path);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/shanimal/b3xTw/&quot;&gt;http://jsfiddle.net/shanimal/b3xTw/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Please use common sense and caution when wielding the power of eval. It&apos;s a bit like a light saber, if you turn it on there&apos;s a 90% chance you&apos;ll sever a limb. Its not for everybody.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This will probably never see the light of day... but here it is anyway.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Replace &lt;code&gt;[]&lt;/code&gt; bracket syntax with &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Split on &lt;code&gt;.&lt;/code&gt; character&lt;/li&gt;\n&lt;li&gt;Remove blank strings&lt;/li&gt;\n&lt;li&gt;Find the path (otherwise &lt;code&gt;undefined&lt;/code&gt;)&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;(For finding a path to an object, use this &lt;a href=&quot;https://stackoverflow.com/a/64696750/782034&quot;&gt;&lt;code&gt;pathTo&lt;/code&gt;&lt;/a&gt; solution.)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;one liner&quot; (ES6)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deep_value&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) =&amp;gt; \npath\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\[|\\]\\.?/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt; =&amp;gt;&lt;/span&gt; s)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;acc, val&lt;/span&gt;) =&amp;gt;&lt;/span&gt; acc &amp;amp;&amp;amp; acc[val], obj);\n    \n&lt;span class=&quot;hljs-comment&quot;&gt;// ... and that&apos;s it.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someObject = {\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;part1&apos;&lt;/span&gt; : {\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Part 1&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;20&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;50&apos;&lt;/span&gt;\n    },\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;part2&apos;&lt;/span&gt; : {\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Part 2&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;15&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;60&apos;&lt;/span&gt;\n    },\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;part3&apos;&lt;/span&gt; : [\n        {\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Part 3A&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;20&apos;&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    ],\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;pa[rt3&apos;&lt;/span&gt; : [\n        {\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Part 3A&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;20&apos;&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    ]\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;deep_value&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&quot;part1.name&quot;&lt;/span&gt;));               &lt;span class=&quot;hljs-comment&quot;&gt;// Part 1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;deep_value&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&quot;part2.qty&quot;&lt;/span&gt;));                &lt;span class=&quot;hljs-comment&quot;&gt;// 60&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;deep_value&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&quot;part3[0].name&quot;&lt;/span&gt;));            &lt;span class=&quot;hljs-comment&quot;&gt;// Part 3A&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;deep_value&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&quot;part3[0].....name&quot;&lt;/span&gt;));        &lt;span class=&quot;hljs-comment&quot;&gt;// Part 3A - invalid blank paths removed&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;deep_value&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pa[rt3[0].name&quot;&lt;/span&gt;));           &lt;span class=&quot;hljs-comment&quot;&gt;// undefined - name does not support square brackets&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can manage to obtain the value of a deep object member with dot notation without any external JavaScript library with the following simple trick:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectGet&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;return _.&apos;&lt;/span&gt; + path)(obj); };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In your case to obtain value of &lt;code&gt;part1.name&lt;/code&gt; from &lt;code&gt;someObject&lt;/code&gt; just do:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;objectGet&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&apos;part1.name&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here is a simple fiddle demo: &lt;a href=&quot;https://jsfiddle.net/harishanchu/oq5esowf/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://jsfiddle.net/harishanchu/oq5esowf/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s a one liner with lodash.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; deep = { &lt;span class=&quot;hljs-attr&quot;&gt;l1&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;l2&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;l3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt; } } };\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; prop = &lt;span class=&quot;hljs-string&quot;&gt;&quot;l1.l2.l3&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; val = _.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(prop.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result, value&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result ? result[value] : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;; }, deep);\n&lt;span class=&quot;hljs-comment&quot;&gt;// val === &quot;Hello&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or even better...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; val = _.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(deep, prop);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or ES6 version w/ reduce...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; val = prop.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;r, val&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r ? r[val] : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;; }, deep);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://plnkr.co/edit/NKb6SE&quot; rel=&quot;noreferrer&quot; title=&quot;Plunkr&quot;&gt;Plunkr&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I think you are asking for this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part1name = someObject.&lt;span class=&quot;hljs-property&quot;&gt;part1&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part2quantity = someObject.&lt;span class=&quot;hljs-property&quot;&gt;part2&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;qty&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part3name1 =  someObject.&lt;span class=&quot;hljs-property&quot;&gt;part3&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You could be asking for this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part1name = someObject[&lt;span class=&quot;hljs-string&quot;&gt;&quot;part1&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part2quantity = someObject[&lt;span class=&quot;hljs-string&quot;&gt;&quot;part2&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;qty&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part3name1 =  someObject[&lt;span class=&quot;hljs-string&quot;&gt;&quot;part3&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both of which will work&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Or maybe you are asking for this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; partName = &lt;span class=&quot;hljs-string&quot;&gt;&quot;part1&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nameStr = &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part1name = someObject[partName][nameStr];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Finally you could be asking for this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; partName = &lt;span class=&quot;hljs-string&quot;&gt;&quot;part1.name&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; partBits = partName.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part1name = someObject[partBits[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]][partBits[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just in case, anyone&apos;s visiting this question in 2017 or later and looking for an &lt;strong&gt;easy-to-remember&lt;/strong&gt; way, here&apos;s an elaborate blog post on &lt;a href=&quot;https://dev.to/flexdinesh/accessing-nested-objects-in-javascript--9m4&quot; rel=&quot;noreferrer&quot;&gt;Accessing Nested Objects in JavaScript&lt;/a&gt; without being bamboozled by &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Cannot read property &apos;foo&apos; of undefined&lt;/em&gt; error&lt;/p&gt;\n\n&lt;h2&gt;Access Nested Objects Using Array Reduce&lt;/h2&gt;\n\n&lt;p&gt;Let&apos;s take this example structure&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; user = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;email&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;jack@dev.com&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;personalInfo&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;address&lt;/span&gt;: [{\n            &lt;span class=&quot;hljs-attr&quot;&gt;line1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;westwish st&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;line2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;washmasher&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;city&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;wallas&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;state&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;WX&apos;&lt;/span&gt;\n        }]\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To be able to access nested arrays, you can write your own array reduce util.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getNestedObject&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;nestedObj, pathArr&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pathArr.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, key&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n        (obj &amp;amp;&amp;amp; obj[key] !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;undefined&apos;&lt;/span&gt;) ? obj[key] : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;, nestedObj);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// pass in your object structure as array elements&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; name = &lt;span class=&quot;hljs-title function_&quot;&gt;getNestedObject&lt;/span&gt;(user, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;personalInfo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// to access nested array, just pass in array index as an element the path array.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; city = &lt;span class=&quot;hljs-title function_&quot;&gt;getNestedObject&lt;/span&gt;(user, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;personalInfo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;address&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;city&apos;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-comment&quot;&gt;// this will return the city from the first address item.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is also an excellent type handling minimal library &lt;a href=&quot;https://www.npmjs.com/package/typy&quot; rel=&quot;noreferrer&quot;&gt;typy&lt;/a&gt; that does all this for you.&lt;/p&gt;\n\n&lt;p&gt;With typy, your code will look like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; city = &lt;span class=&quot;hljs-title function_&quot;&gt;t&lt;/span&gt;(user, &lt;span class=&quot;hljs-string&quot;&gt;&apos;personalInfo.address[0].city&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;safeObject&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Disclaimer: I am the author of this package.&lt;/p&gt;\n    ","\n&lt;p&gt;Here I offer more ways, which seem faster in many respects:&lt;/p&gt;\n\n&lt;p&gt;Option 1: Split string on . or [ or ] or &apos; or &quot;, reverse it, skip empty items.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, origin&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (origin === &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || origin === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) origin = self ? self : &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; path !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;) path = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; + path;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parts = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\[|\\]|\\.|&apos;|&quot;/g&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reverse&lt;/span&gt;(), name; &lt;span class=&quot;hljs-comment&quot;&gt;// (why reverse? because it&apos;s usually faster to pop off the end of an array)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (parts.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) { name=parts.&lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;(); &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (name) origin=origin[name]; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; origin;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Option 2 (fastest of all, except &lt;code&gt;eval&lt;/code&gt;): Low level character scan (no regex/split/etc, just a quick char scan).\n&lt;em&gt;Note:  This one does not support quotes for indexes.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, origin&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (origin === &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || origin === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) origin = self ? self : &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; path !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;) path = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; + path;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, pc, i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, n = path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (n) &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i&amp;lt;=n) ((c = path[i++]) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) ? (name?(origin = origin[name], name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;):(pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;||pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;||pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;&amp;amp;&amp;amp;c==&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;?i=n+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;),pc=c) : name += c;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i==n+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid path: &quot;&lt;/span&gt;+path;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; origin;\n} &lt;span class=&quot;hljs-comment&quot;&gt;// (around 1,000,000+/- ops/sec)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Option 3: &lt;em&gt;(&lt;strong&gt;new&lt;/strong&gt;: option 2 expanded to support quotes - a bit slower, but still fast)&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, origin&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (origin === &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || origin === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) origin = self ? self : &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; path !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;) path = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; + path;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c, pc, i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, n = path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, q;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i&amp;lt;=n)\n        ((c = path[i++]) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) ? (c==q&amp;amp;&amp;amp;path[i]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;?q=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;:q?name+=&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:name?(origin?origin=origin[name]:i=n+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,name=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) : (pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;&amp;amp;&amp;amp;(c==&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;||c==&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;)?q=&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;||pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;||pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;&amp;amp;&amp;amp;c==&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;||pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;||pc==&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;?i=n+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), pc=c) : name += c;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i==n+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; || name) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid path: &quot;&lt;/span&gt;+path;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; origin;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;JSPerf: &lt;a href=&quot;http://jsperf.com/ways-to-dereference-a-delimited-property-string/3&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://jsperf.com/ways-to-dereference-a-delimited-property-string/3&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&quot;eval(...)&quot; is still king though (performance wise that is).  If you have property paths directly under your control, there shouldn&apos;t be any issues with using &apos;eval&apos; (especially if speed is desired).  If pulling property paths &quot;over the wire&quot; (&lt;a href=&quot;https://www.youtube.com/watch?v=CewJ-ihIqaM&quot; rel=&quot;nofollow noreferrer&quot;&gt;on the line&lt;/a&gt;!? lol :P), then yes, use something else to be safe.  Only an idiot would say to never use &quot;eval&quot; at all, as there &lt;a href=&quot;https://stackoverflow.com/questions/1594023/what-is-the-intended-purpose-of-eval-in-javascript?lq=1&quot;&gt;ARE good reasons&lt;/a&gt; when to use it.  Also, &quot;It is used in &lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/json2.js&quot; rel=&quot;nofollow noreferrer&quot;&gt;Doug Crockford&apos;s JSON parser&lt;/a&gt;.&quot; If the input is safe, then no problems at all.  Use the right tool for the right job, that&apos;s it.&lt;/p&gt;\n    ","\n&lt;p&gt;Instead of trying to emulate JS syntax which you will have to spend a bunch of compute parsing, or just get wrong/forget things like a bunch of these answers (keys with &lt;code&gt;.&lt;/code&gt;s in, anyone?), just use an array of keys.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part1name     = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(someObject, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;part1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part2quantity = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(someObject, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;part2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part3name1    = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(someObject, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;part3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/fIYeT.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/fIYeT.png&quot; alt=&quot;answer&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;If you need to use a single string instead, simply JSONify it.&lt;br&gt;\nAnother improvement in this method is that you can delete/set the root level object.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; root = obj = [obj];\n    path = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, ...path];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        obj = obj[path.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;()];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [obj, path[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], root];\n}\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;get&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; [parent, key] = &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(obj, path);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; parent[key];\n};\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;del&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; [parent, key, root] = &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(obj, path);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; parent[key];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; root[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n};\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;set&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path, value&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; [parent, key, root] = &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(obj, path);\n    parent[key] = value;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; root[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Demo of other features:&lt;br&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/jClRZ.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/jClRZ.png&quot; alt=&quot;demonstration&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;bob = &lt;/code&gt; for &lt;code&gt;.set(&lt;/code&gt;/&lt;code&gt;.del(&lt;/code&gt; isn&apos;t necessary unless your path might be empty (manipulating the root object).&lt;br&gt;\nI prove that I don&apos;t clone the object by using &lt;code&gt;steve&lt;/code&gt; to keep a reference to the original and checking &lt;code&gt;bob == steve //true&lt;/code&gt; after that first &lt;code&gt;.set(&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;AngularJS&lt;/h2&gt;\n&lt;p&gt;Speigg&apos;s approach is very neat and clean, though I found this reply while searching for the solution of accessing AngularJS $scope properties by string path and with a little modification it does the job:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$scope.&lt;span class=&quot;hljs-property&quot;&gt;resolve&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; path, obj &lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; prev, curr &lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; prev[curr];\n    }, obj || &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; );\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Just place this function in your root controller and use it any child scope like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$scope.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&apos;path.to.any.object.in.scope&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Access a deep value inside a object \n * Works by passing a path like &quot;foo.bar&quot;, also works with nested arrays like &quot;foo[0][1].baz&quot;\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@author&lt;/span&gt; Victor B. https://gist.github.com/victornpb/4c7882c1b9d36292308e\n * Unit tests: http://jsfiddle.net/Victornpb/0u1qygrh/\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj === &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt; || obj === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    path = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[\\.\\[\\]\\&quot;\\&apos;]{1,2}/&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, l = path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; l; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (path[i] === &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n        obj = obj[path[i]];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj === &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt; || obj === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Works with&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo.bar&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo.1.bar&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo[0].baz&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo[1][2]&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo[&apos;bar&apos;].baz&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo[&apos;bar&apos;][&apos;baz&apos;]&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo.bar.0.baz[1][&apos;2&apos;][&apos;w&apos;].aaa[\\&quot;f\\&quot;].bb&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want a solution that can properly detect and report details of any issue with the path parsing, I wrote my own solution to this - library &lt;a href=&quot;https://github.com/vitaly-t/path-value&quot; rel=&quot;nofollow noreferrer&quot;&gt;path-value&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; {resolveValue} = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;path-value&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolveValue&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&apos;part1.name&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; Part 1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolveValue&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&apos;part2.qty&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; 50&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolveValue&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&apos;part3.0.name&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; Part 3A&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that for indexes we use &lt;code&gt;.0&lt;/code&gt;, and not &lt;code&gt;[0]&lt;/code&gt;, because parsing the latter adds a performance penalty, while &lt;code&gt;.0&lt;/code&gt; works directly in JavaScript, and is thus very fast.&lt;/p&gt;\n&lt;p&gt;However, full ES5 JavaScript syntax is also supported, it just needs to be tokenized first:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; {resolveValue, tokenizePath} = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;path-value&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;hljs-title function_&quot;&gt;tokenizePath&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;part3[0].name&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; [&apos;part3&apos;, &apos;0&apos;, &apos;name&apos;]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolveValue&lt;/span&gt;(someObject, path); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; Part 3A&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I haven&apos;t yet found a package to do all of the operations with a string path, so I ended up writing my own quick little package which supports insert(), get() (with default return), set() and remove() operations.&lt;/p&gt;\n\n&lt;p&gt;You can use dot notation, brackets, number indices, string number properties, and keys with non-word characters. Simple usage below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsocrud = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;jsocrud&apos;&lt;/span&gt;);\n\n...\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Get (Read) ---&lt;/span&gt;\n&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n&amp;gt;     &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: [\n&amp;gt;         {\n&amp;gt;             &lt;span class=&quot;hljs-string&quot;&gt;&apos;key w/ non-word chars&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n&amp;gt;         }\n&amp;gt;     ]\n&amp;gt; };\n&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n\n&amp;gt; jsocrud.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(obj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.foo[0][&quot;key w/ non-word chars&quot;]&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/jsocrud&quot; rel=&quot;nofollow&quot;&gt;https://www.npmjs.com/package/jsocrud&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/vertical-knowledge/jsocrud&quot; rel=&quot;nofollow&quot;&gt;https://github.com/vertical-knowledge/jsocrud&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Simple function, allowing for either a string or array path.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; path === &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;) path = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(obj[path[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]], path.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;}}};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(obj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b.c&apos;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//foo&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;OR&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(obj, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;])); &lt;span class=&quot;hljs-comment&quot;&gt;//foo&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is an &lt;code&gt;npm&lt;/code&gt; module now for doing this: &lt;a href=&quot;https://github.com/erictrinh/safe-access&quot; rel=&quot;nofollow&quot;&gt;https://github.com/erictrinh/safe-access&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Example usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; access = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;safe-access&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;access&lt;/span&gt;(very, &lt;span class=&quot;hljs-string&quot;&gt;&apos;nested.property.and.array[0]&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;While reduce is good, I am surprised no one used forEach:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;valueForKeyPath&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; keys = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n        keys.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt;)=&amp;gt;&lt;/span&gt; obj = obj[key]);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/#src=%0Avar%20test%3A%20object%20%3D%20%7B%0A%20%20%20%20a%3A%20%7Bb%3A%7Bc%3A%22d%22%7D%7D%0A%7D%0A%0Afunction%20valueForKeyPath(obj%3A%20object%2C%20path%3A%20string)%3Aany%20%7B%0A%20%20%20%20%20%20%20%20const%20keys%20%3D%20path.split(&apos;.&apos;)%3B%0A%20%20%20%20%20%20%20%20keys.forEach((key)%3D%3E%20obj%20%3D%20obj%5Bkey%5D)%3B%0A%20%20%20%20%20%20%20%20return%20obj%3B%0A%20%20%20%20%7D%3B%0A%0Aalert(valueForKeyPath(test%2C%20&apos;a.b.c&apos;))&quot; rel=&quot;nofollow noreferrer&quot;&gt;Test&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m developing online-shop with React. I tried to change values in copied state object to update original state with it on submit. \nExamples above haven&apos;t worked for me, because most of them mutate structure of copied object. I found working example of the function for accessing and changing values of the deep nested object properties: &lt;a href=&quot;https://lowrey.me/create-an-object-by-path-in-javascript-2/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://lowrey.me/create-an-object-by-path-in-javascript-2/&lt;/a&gt; Here it is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createPath&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;obj, path, value = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) =&amp;gt; {\n  path = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; path === &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt; ? path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) : path;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; current = obj;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [head, ...tail] = path;\n    path = tail;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (current[head] === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) {\n      current[head] = {};\n    }\n    current = current[head];\n  }\n  current[path[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]] = value;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just had the same question recently and successfully used &lt;a href=&quot;https://npmjs.org/package/tea-properties&quot; rel=&quot;nofollow&quot;&gt;https://npmjs.org/package/tea-properties&lt;/a&gt; which also &lt;code&gt;set&lt;/code&gt; nested object/arrays :&lt;/p&gt;\n\n&lt;p&gt;get:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;prop&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;arr&lt;/span&gt;: [\n      {&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;}\n    ]\n  }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; properties = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;tea-properties&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value = properties.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(o, &lt;span class=&quot;hljs-string&quot;&gt;&apos;prop.arr[0].foo&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(value, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;set:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; properties = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;tea-properties&apos;&lt;/span&gt;);\nproperties.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(o, &lt;span class=&quot;hljs-string&quot;&gt;&apos;prop.arr[0].foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(o.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Based on a previous answer, I have created a function that can also handle brackets. But no dots inside them due to the split.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\.|\\[/g&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;crumb&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; crumb.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\]$/&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/^([&quot;&apos;])((?:(?!\\1)[^\\\\]|\\\\.)*?)\\1$/&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;match, quote, str&lt;/span&gt;) =&amp;gt;&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\\\(\\\\)?/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;$1&quot;&lt;/span&gt;));\n  }).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, prop&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj ? obj[prop] : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n  }, obj);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// (IE9+) Two steps&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pathString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;[0][&apos;property&apos;].others[3].next[&apos;final&apos;]&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = [{\n  &lt;span class=&quot;hljs-attr&quot;&gt;property&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;others&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, {\n      &lt;span class=&quot;hljs-attr&quot;&gt;next&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;final&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;SUCCESS&quot;&lt;/span&gt;\n      }\n    }]\n  }\n}];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Turn string to path array&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pathArray = pathString\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\[[&quot;&apos;]?([\\w]+)[&quot;&apos;]?\\]/g&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;.$1&quot;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Add object prototype method&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;path&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(path).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;f, l&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f[l];\n    });\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(e);\n  }\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// usage&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;path&lt;/span&gt;(pathArray));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;path&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;doesNotExist&quot;&lt;/span&gt;]));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Inspired by @webjay&apos;s answer:\n&lt;a href=&quot;https://stackoverflow.com/a/46008856/4110122&quot;&gt;https://stackoverflow.com/a/46008856/4110122&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I made this function which can you use it to &lt;strong&gt;Get/ Set/ Unset&lt;/strong&gt; any value in object&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Object_Manager&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, Path, value, Action&lt;/span&gt;) \n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt; = [&lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;];\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; level = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Return&lt;/span&gt;_Value;\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n            level++;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (level === &lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Action&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;)\n                {\n                    a[b] = value;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Action&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;Get&apos;&lt;/span&gt;)\n                {\n                    &lt;span class=&quot;hljs-title class_&quot;&gt;Return&lt;/span&gt;_Value = a[b];\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Action&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;Unset&apos;&lt;/span&gt;)\n                {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; a[b];\n                }\n            } \n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; \n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a[b];\n            }\n        }, obj);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Return&lt;/span&gt;_Value;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(err)\n    {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To use it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Set&lt;/span&gt;\n &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;_Manager(&lt;span class=&quot;hljs-title class_&quot;&gt;Obj&lt;/span&gt;,[&lt;span class=&quot;hljs-title class_&quot;&gt;Level1&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;Level2&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;Level3&lt;/span&gt;],&lt;span class=&quot;hljs-title class_&quot;&gt;New&lt;/span&gt;_Value, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;);\n\n &lt;span class=&quot;hljs-comment&quot;&gt;// Get&lt;/span&gt;\n &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;_Manager(&lt;span class=&quot;hljs-title class_&quot;&gt;Obj&lt;/span&gt;,[&lt;span class=&quot;hljs-title class_&quot;&gt;Level1&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;Level2&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;Level3&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Get&apos;&lt;/span&gt;);\n\n &lt;span class=&quot;hljs-comment&quot;&gt;// Unset&lt;/span&gt;\n &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;_Manager(&lt;span class=&quot;hljs-title class_&quot;&gt;Obj&lt;/span&gt;,[&lt;span class=&quot;hljs-title class_&quot;&gt;Level1&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;Level2&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;Level3&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Unset&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Extension of Mohamad Hamouday&apos; Answer will fill in missing keys&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Object_Manager&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, Path, value, Action, strict&lt;/span&gt;) \n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt; = [&lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;];\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; level = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Return&lt;/span&gt;_Value;\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(level,&lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;,a, &lt;span class=&quot;hljs-string&quot;&gt;&apos;|||&apos;&lt;/span&gt;,b)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!strict){\n              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a)) a[b] = {}\n            }\n\n\n            level++;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (level === &lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Action&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;)\n                {\n                    a[b] = value;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Action&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;Get&apos;&lt;/span&gt;)\n                {\n                    &lt;span class=&quot;hljs-title class_&quot;&gt;Return&lt;/span&gt;_Value = a[b];\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Action&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;Unset&apos;&lt;/span&gt;)\n                {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; a[b];\n                }\n            } \n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; \n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a[b];\n            }\n        }, obj);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Return&lt;/span&gt;_Value;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(err)\n    {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;\nobja = {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;nom&quot;&lt;/span&gt;\n  }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Set&lt;/span&gt;\npath = &lt;span class=&quot;hljs-string&quot;&gt;&quot;c.b&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Path does not exist&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;_Manager(obja,path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;test_new_val&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Expected Output: Object { a: Object { b: &quot;nom&quot; }, c: Object { b: &quot;test_new_value&quot; } }&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;code&gt;ramda&lt;/code&gt; library. &lt;/p&gt;\n\n&lt;p&gt;Learning &lt;code&gt;ramda&lt;/code&gt; also helps you to work with immutable objects easily.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:{\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {\n      &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,{\n        &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n      }]\n    }\n  }\n};\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lens = R.&lt;span class=&quot;hljs-title function_&quot;&gt;lensPath&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b.c.2.d&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = R.&lt;span class=&quot;hljs-title function_&quot;&gt;view&lt;/span&gt;(lens, obj);\n\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://codepen.io/ghominejad/pen/BayJZOQ&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://codepen.io/ghominejad/pen/BayJZOQ&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Based on Alnitak&apos;s &lt;a href=&quot;https://stackoverflow.com/a/6491621/1762224&quot;&gt;answer&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I wrapped the polyfill in a check, and reduced the function to a single chained reduction.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;byPath&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;byPath&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) =&amp;gt;&lt;/span&gt; path\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\[(\\w+)\\]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.$1&apos;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/^\\./&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\./g&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ref, key&lt;/span&gt;) =&amp;gt;&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ref ? ref[key] : ref, obj)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: [{\n      &lt;span class=&quot;hljs-attr&quot;&gt;baz&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    }]\n  }\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;byPath&lt;/span&gt;(data, &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo.bar[0].baz&apos;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This can be simplified by splitting the logic into three separate functions:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isVal&lt;/span&gt; = a =&amp;gt; a != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// everything except undefined + null&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt; = prop =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;isVal&lt;/span&gt;(obj)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = obj[prop];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;isVal&lt;/span&gt;(value)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;path&lt;/span&gt; = paths =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; pathList = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; paths === &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt; ? paths.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) : paths;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pathList.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, key&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(key)(value), obj);\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//usage:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myObject = { &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;baz&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;taco&apos;&lt;/span&gt; } } };\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = &lt;span class=&quot;hljs-title function_&quot;&gt;path&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo.bar&apos;&lt;/span&gt;)(myObject);\n&lt;span class=&quot;hljs-comment&quot;&gt;//results =&amp;gt; { baz: &apos;taco&apos; }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This variation supports:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;passing an array or string argument&lt;/li&gt;\n&lt;li&gt;dealing with &lt;code&gt;undefined&lt;/code&gt; values during invocation and execution&lt;/li&gt;\n&lt;li&gt;testing each function independently&lt;/li&gt;\n&lt;li&gt;using each function independently&lt;/li&gt;\n&lt;/ul&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Not sure what you are asking here? You want to be able to query part1.name and have the text &quot;part1.name&quot; returned? Or you want a means to get the value stored within part1.name?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/571117/bonyt&quot; title=&quot;10,500 reputation&quot; class=&quot;comment-user&quot;&gt;BonyT&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7633061_6491463&quot;&gt;&lt;span title=&quot;2011-06-27 10:27:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 27, 2011 at 10:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;have you tried doing like &lt;code&gt;var part1name = someObject.part1name;&lt;/code&gt; `&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/413670/rafay&quot; title=&quot;30,734 reputation&quot; class=&quot;comment-user&quot;&gt;Rafay&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7633101_6491463&quot;&gt;&lt;span title=&quot;2011-06-27 10:29:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 27, 2011 at 10:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@BonyT : I want to query someObject.part1.name and return the value of it (&quot;Part 1&quot;). However, I want the query (I called it &quot;the key&quot;) to be stored in a variable &apos;part1name&apos;. Thanks for your reply.  @3nigma : I have certainly do. But that is not my intention. Thanks for the reply.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/684115/komaruloh&quot; title=&quot;6,141 reputation&quot; class=&quot;comment-user owner&quot;&gt;Komaruloh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7633267_6491463&quot;&gt;&lt;span title=&quot;2011-06-27 10:42:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 27, 2011 at 10:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;in the duplicate answer, i love fyr&apos;s answer &lt;a href=&quot;http://stackoverflow.com/questions/8817394/javascript-get-deep-value-from-object-by-passing-path-to-it-as-string&quot; title=&quot;javascript get deep value from object by passing path to it as string&quot;&gt;stackoverflow.com/questions/8817394/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1337662/steve-black&quot; title=&quot;599 reputation&quot; class=&quot;comment-user&quot;&gt;Steve Black&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment21971348_6491463&quot;&gt;&lt;span title=&quot;2013-03-20 02:09:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 20, 2013 at 2:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See also &lt;a href=&quot;http://stackoverflow.com/q/6393943/1048572&quot;&gt;Convert JavaScript string in dot notation into an object reference&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1048572/bergi&quot; title=&quot;577,643 reputation&quot; class=&quot;comment-user&quot;&gt;Bergi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment56320614_6491463&quot;&gt;&lt;span title=&quot;2015-12-15 12:45:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 15, 2015 at 12:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This works beautifully. Please contribute this to the internet by wrapping it as a node package.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2175572/t3dodson&quot; title=&quot;3,744 reputation&quot; class=&quot;comment-user&quot;&gt;t3dodson&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment44263244_6491621&quot;&gt;&lt;span title=&quot;2015-01-13 22:38:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 13, 2015 at 22:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@t3dodson I just did: &lt;a href=&quot;https://github.com/capaj/object-resolve-path&quot; rel=&quot;nofollow noreferrer&quot;&gt;github.com/capaj/object-resolve-path&lt;/a&gt; just be aware that this doesn&apos;t play nice when your property name contains &apos;[]&apos; in itself. Regex will replace it with &apos;.&apos; and it doesn&apos;t work as expected&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/671457/capaj&quot; title=&quot;3,667 reputation&quot; class=&quot;comment-user&quot;&gt;Capaj&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment51404902_6491621&quot;&gt;&lt;span title=&quot;2015-07-30 21:57:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 30, 2015 at 21:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;great stuff; using the lodash library, one can also do: &lt;code&gt;_.get(object, nestedPropertyString);&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3889068/ian&quot; title=&quot;675 reputation&quot; class=&quot;comment-user&quot;&gt;ian&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment51881760_6491621&quot;&gt;&lt;span title=&quot;2015-08-13 12:49:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 13, 2015 at 12:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This will probably get lost in the sea of comments, however it errors if you try and address a property that doesn&apos;t exist. So &lt;code&gt;&apos;part3[0].name.iDontExist&apos;&lt;/code&gt;. Adding a check to see if &lt;code&gt;o&lt;/code&gt; is an object in the &lt;code&gt;if in&lt;/code&gt; fixes the issue. (How you go about that is up-to you). See updated fiddle: &lt;a href=&quot;http://jsfiddle.net/hEsys/418/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jsfiddle.net/hEsys/418&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3212848/ste2425&quot; title=&quot;4,453 reputation&quot; class=&quot;comment-user&quot;&gt;ste2425&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55278413_6491621&quot;&gt;&lt;span title=&quot;2015-11-17 11:12:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 17, 2015 at 11:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ThatGuyRob introducing a third party library is not always &quot;better&quot;, and in any event that method didn&apos;t even exist when I wrote this answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6782/alnitak&quot; title=&quot;326,570 reputation&quot; class=&quot;comment-user&quot;&gt;Alnitak&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103311573_6491621&quot;&gt;&lt;span title=&quot;2019-10-21 16:44:54Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 21, 2019 at 16:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This should be the only accepted answer, because this is the only one working for both dot and bracket syntax and It doesn&apos;t fail, when we have &apos;[]&apos; in the string of a key in the path.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/671457/capaj&quot; title=&quot;3,667 reputation&quot; class=&quot;comment-user&quot;&gt;Capaj&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment51526375_31303609&quot;&gt;&lt;span title=&quot;2015-08-04 02:12:37Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 4, 2015 at 2:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This. Plus, it supports &lt;code&gt;_.set(...)&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/918608/josh-c&quot; title=&quot;4,183 reputation&quot; class=&quot;comment-user&quot;&gt;Josh C.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment78577915_31303609&quot;&gt;&lt;span title=&quot;2017-08-22 06:23:54Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 22, 2017 at 6:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;what happes if the objet is not found?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8055073/ddave&quot; title=&quot;1,260 reputation&quot; class=&quot;comment-user&quot;&gt;DDave&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment81028092_31303609&quot;&gt;&lt;span title=&quot;2017-10-31 16:58:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 31, 2017 at 16:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@DDave if the value passed as the object is undefined or not an object, &lt;code&gt;_.get&lt;/code&gt; will show the same behavior as when no key is found in the provided object. eg &lt;code&gt;_.get(null, &quot;foo&quot;) -&amp;gt; undefined&lt;/code&gt;, &lt;code&gt;_.get(null, &quot;foo&quot;, &quot;bar&quot;) -&amp;gt; &quot;bar&quot;&lt;/code&gt;. However this behavior is not defined in the docs so subject to change.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2225310/ian-walker-sperber&quot; title=&quot;3,251 reputation&quot; class=&quot;comment-user&quot;&gt;Ian Walker-Sperber&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment81079875_31303609&quot;&gt;&lt;span title=&quot;2017-11-02 00:40:33Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 2, 2017 at 0:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Capaj you kiddin&apos;? And who doesn&apos;t want/can&apos;t use lodash?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/986862/andre-figueiredo&quot; title=&quot;12,114 reputation&quot; class=&quot;comment-user&quot;&gt;Andre Figueiredo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84752558_31303609&quot;&gt;&lt;span title=&quot;2018-02-19 21:21:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 19, 2018 at 21:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;using reduce is an excellent solution (one can also use &lt;code&gt;_.reduce()&lt;/code&gt; from the underscore or lodash library)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/675065/alp&quot; title=&quot;28,420 reputation&quot; class=&quot;comment-user&quot;&gt;Alp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment36627390_22129960&quot;&gt;&lt;span title=&quot;2014-05-22 14:51:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 22, 2014 at 14:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I think &lt;code&gt;self&lt;/code&gt; is probably undefined here. Do you mean &lt;code&gt;this&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/129655/platinum-azure&quot; title=&quot;43,694 reputation&quot; class=&quot;comment-user&quot;&gt;Platinum Azure&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment37467974_22129960&quot;&gt;&lt;span title=&quot;2014-06-17 03:37:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 17, 2014 at 3:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Here&apos;s my complement to set values by path: &lt;a href=&quot;http://pastebin.com/jDp5sKT9&quot; rel=&quot;nofollow noreferrer&quot;&gt;pastebin.com/jDp5sKT9&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/642978/mroach&quot; title=&quot;2,307 reputation&quot; class=&quot;comment-user&quot;&gt;mroach&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment70052583_22129960&quot;&gt;&lt;span title=&quot;2017-01-02 08:42:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 2, 2017 at 8:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@SC1000 good idea. This answer was written before default parameters were available in most browsers. I&apos;ll update it to &quot;function resolve(path, obj=self)&quot;, since referencing the global object as a default is intentional.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1862234/speigg&quot; title=&quot;2,430 reputation&quot; class=&quot;comment-user&quot;&gt;speigg&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90655782_22129960&quot;&gt;&lt;span title=&quot;2018-08-15 00:29:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 15, 2018 at 0:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AdamPlocher I know this is old now, but I converted this to typescript as follows: &lt;code&gt;export function resolvePath(path: string | string[], obj: any, separator = &apos;.&apos;) { const properties = Array.isArray(path) ? path : path.split(separator); return properties.reduce((prev, curr) =&amp;gt; prev &amp;amp;&amp;amp; prev[curr], obj); }&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1195273/crush&quot; title=&quot;16,457 reputation&quot; class=&quot;comment-user&quot;&gt;crush&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment108236765_22129960&quot;&gt;&lt;span title=&quot;2020-04-13 07:12:40Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 13, 2020 at 7:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I love this technique. This is really messy but I wanted to use this technique for assignment. &lt;code&gt;let o = {a:{b:{c:1}}}; let str = &apos;a.b.c&apos;; str.split(&apos;.&apos;).splice(0, str.split(&apos;.&apos;).length - 1).reduce((p,c)=&amp;gt;p&amp;amp;&amp;amp;p[c]||null, o)[str.split(&apos;.&apos;).slice(-1)] = &quot;some new value&quot;;&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/903980/rob-gordon&quot; title=&quot;1,219 reputation&quot; class=&quot;comment-user&quot;&gt;rob-gordon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment76597797_43849204&quot;&gt;&lt;span title=&quot;2017-06-28 17:15:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2017 at 17:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I like the idea of using reduce but your logic seems off for &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; values.  &lt;code&gt;{a:{b:{c:0}}}&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt; instead of &lt;code&gt;0&lt;/code&gt;.  Perhaps explicitly checking for null or undefined will clear up these issues.  &lt;code&gt;(p,c)=&amp;gt;p === undefined || p === null ? undefined : p[c]&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2001841/smujmaiku&quot; title=&quot;426 reputation&quot; class=&quot;comment-user&quot;&gt;SmujMaiku&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment80461076_43849204&quot;&gt;&lt;span title=&quot;2017-10-15 17:31:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 15, 2017 at 17:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Hi @SmujMaiku, the &quot;ready to use&quot; function return correctly for &apos;0&apos;, &apos;undefined&apos; and &apos;null&apos;, I just tested on the console: resolvePath({a:{b:{c:0}}},&apos;a.b.c&apos;,null) =&amp;gt; 0; It check if the key exists instead of the value itself which avoid more than one check&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1955088/adriano-spadoni&quot; title=&quot;4,107 reputation&quot; class=&quot;comment-user&quot;&gt;Adriano Spadoni&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment80478868_43849204&quot;&gt;&lt;span title=&quot;2017-10-16 09:18:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 16, 2017 at 9:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;here defaultValue did not work, using &lt;code&gt;Reflect.has(o, k) ? ...&lt;/code&gt; (ES6 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reflect.has&lt;/a&gt;) worked though&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/986862/andre-figueiredo&quot; title=&quot;12,114 reputation&quot; class=&quot;comment-user&quot;&gt;Andre Figueiredo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84902112_43849204&quot;&gt;&lt;span title=&quot;2018-02-23 12:31:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 23, 2018 at 12:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note the versions with &lt;code&gt;defaultValue&lt;/code&gt; will still return &lt;code&gt;undefined&lt;/code&gt; in some circumstancese.g. &lt;code&gt;resolvePath({profile: {name: &apos;Bob&apos;}}, &apos;profile.email&apos;, &apos;not set&apos;)&lt;/code&gt;. To fix this, the final line should be &lt;code&gt;.reduce((o, p) =&amp;gt; o?.[p] ?? defaultValue, object)&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1454454/dsl101&quot; title=&quot;1,637 reputation&quot; class=&quot;comment-user&quot;&gt;dsl101&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121141642_43849204&quot;&gt;&lt;span title=&quot;2021-07-27 14:19:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 27, 2021 at 14:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Felix Kling : Your solution does provide me with what I need. And I thank you alot for that. But Alnitak also provide different ways and seem to work either. Since I can only choose one answer, I will choose Alnitak answer. Not that his solution is better than you or something like that.   Anyway, I really appreciate your solution and effort you gave.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/684115/komaruloh&quot; title=&quot;6,141 reputation&quot; class=&quot;comment-user owner&quot;&gt;Komaruloh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7633910_6491615&quot;&gt;&lt;span title=&quot;2011-06-27 11:25:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 27, 2011 at 11:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Felix FWIW - converting from &lt;code&gt;[]&lt;/code&gt; syntax to property syntax is pretty trivial.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6782/alnitak&quot; title=&quot;326,570 reputation&quot; class=&quot;comment-user&quot;&gt;Alnitak&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7639289_6491615&quot;&gt;&lt;span title=&quot;2011-06-27 16:19:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 27, 2011 at 16:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I like this answer because I can give my users a simpler format for the paths - using dot notation for indexes instead of brackets.  Thanks!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1222167/hikaru&quot; title=&quot;2,186 reputation&quot; class=&quot;comment-user&quot;&gt;hikaru&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment35873622_6491615&quot;&gt;&lt;span title=&quot;2014-05-01 16:02:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 1, 2014 at 16:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you change the while loop to &lt;code&gt;while (l &amp;gt; 0 &amp;amp;&amp;amp; (obj = obj[current]) &amp;amp;&amp;amp; i &amp;lt; l)&lt;/code&gt; then this code works for strings without dots as well.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/365416/snea&quot; title=&quot;1,737 reputation&quot; class=&quot;comment-user&quot;&gt;Snea&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39517821_6491615&quot;&gt;&lt;span title=&quot;2014-08-17 06:18:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 17, 2014 at 6:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Honestly, this is the better answer because you can actually change the value of obj[last] but you can&apos;t change the value if you did it another way.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/434512/cuddlebunny&quot; title=&quot;1,871 reputation&quot; class=&quot;comment-user&quot;&gt;CuddleBunny&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49226616_6491615&quot;&gt;&lt;span title=&quot;2015-06-01 16:12:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 1, 2015 at 16:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks this is the best and most performant answer - &lt;a href=&quot;http://jsfiddle.net/Jw8XB/1/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jsfiddle.net/Jw8XB/1&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/414062/dominic&quot; title=&quot;56,752 reputation&quot; class=&quot;comment-user&quot;&gt;Dominic&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment26290147_16190716&quot;&gt;&lt;span title=&quot;2013-07-31 23:00:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 31, 2013 at 23:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Endless, I&apos;d like to emphasize the path should separate the items with dots. Braces won&apos;t work. I.e. to access first item in array use &quot;0.sp ace&quot;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/499809/thezver&quot; title=&quot;1,453 reputation&quot; class=&quot;comment-user&quot;&gt;TheZver&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment60123347_16190716&quot;&gt;&lt;span title=&quot;2016-03-27 11:32:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 27, 2016 at 11:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Whether or not eval is a good idea depends on where the property string data is coming from. I doubt you have any reason to be concerned for hackers breaking in via a static &quot;var p=&apos;a.b.c&apos;;eval(p);&quot; type call.  It&apos;s a perfectly fine idea for that.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1236397/james-wilkins&quot; title=&quot;6,223 reputation&quot; class=&quot;comment-user&quot;&gt;James Wilkins&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39686228_13974041&quot;&gt;&lt;span title=&quot;2014-08-21 22:39:48Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 21, 2014 at 22:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that this will swallow a lot of invalid paths silently, like &lt;code&gt;...one...two...&lt;/code&gt;. If one is to do smart processing, you cannot just replace &lt;code&gt;[]&lt;/code&gt; with &lt;code&gt;.&lt;/code&gt;, you have to remove every &lt;code&gt;]&lt;/code&gt;, then replace every &lt;code&gt;[&lt;/code&gt; that&apos;s not at the start with &lt;code&gt;.&lt;/code&gt;, and then remove all &lt;code&gt;[&lt;/code&gt; left.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1102051/vitaly-t&quot; title=&quot;22,534 reputation&quot; class=&quot;comment-user&quot;&gt;vitaly-t&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115708690_51049199&quot;&gt;&lt;span title=&quot;2020-12-25 11:52:47Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 25, 2020 at 11:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@vitaly-t - correct. See &lt;code&gt;#3 - remove blank strings&lt;/code&gt; - the solution treats blank paths as invalid. And also correct, there is no path validation or support for square brackets in fields names. For a more robust solution, please consider using a library e.g. &lt;a href=&quot;https://www.npmjs.com/package/jsonpath-plus&quot; rel=&quot;nofollow noreferrer&quot;&gt;npmjs.com/package/jsonpath-plus&lt;/a&gt; or &lt;a href=&quot;https://stedolan.github.io/jq/&quot; rel=&quot;nofollow noreferrer&quot;&gt;stedolan.github.io/jq&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/782034/nick-grealy&quot; title=&quot;21,739 reputation&quot; class=&quot;comment-user&quot;&gt;Nick Grealy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115717162_51049199&quot;&gt;&lt;span title=&quot;2020-12-25 23:40:02Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 25, 2020 at 23:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yes, there are plenty of libraries out there today that do verbose syntax parsing. Unfortunately, it comes at a cost, being many times slower than the simple index approach of &lt;code&gt;a.0.b.1&lt;/code&gt;, which is natural for JavaScript, and significantly faster. A simple split suffices.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1102051/vitaly-t&quot; title=&quot;22,534 reputation&quot; class=&quot;comment-user&quot;&gt;vitaly-t&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115722149_51049199&quot;&gt;&lt;span title=&quot;2020-12-26 10:36:34Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 26, 2020 at 10:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Absolutely right. It&apos;s a trade off. If you can control the inputs (e.g. control use of square brackets) all the better - you&apos;ll save yourself loading bloated libraries.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/782034/nick-grealy&quot; title=&quot;21,739 reputation&quot; class=&quot;comment-user&quot;&gt;Nick Grealy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115778131_51049199&quot;&gt;&lt;span title=&quot;2020-12-29 03:20:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 29, 2020 at 3:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@NickeManarin - you&apos;re using Typescript, not Javascript. This issue is unrelated, however I believe it&apos;s complaining because you haven&apos;t assigned types. e.g. &lt;code&gt;(obj: any, path: string) =&amp;gt; etc&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/782034/nick-grealy&quot; title=&quot;21,739 reputation&quot; class=&quot;comment-user&quot;&gt;Nick Grealy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment123535301_51049199&quot;&gt;&lt;span title=&quot;2021-11-08 15:02:20Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 8, 2021 at 15:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;function deep_value ( obj, path ) { \treturn new Function( &apos;o&apos;, &apos;return o.&apos; + path )( obj ); }&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3411401/arcangelzith&quot; title=&quot;101 reputation&quot; class=&quot;comment-user&quot;&gt;ArcangelZith&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment64683544_29576764&quot;&gt;&lt;span title=&quot;2016-07-29 04:59:32Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 29, 2016 at 4:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Looked promising, but it seems to be using &lt;code&gt;eval&lt;/code&gt; under the hood, and is rejected if you have CSP unsafe-eval protected. &lt;code&gt;Refused to evaluate a string as JavaScript because &apos;unsafe-eval&apos; is not an allowed source of script&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/209288/scipilot&quot; title=&quot;6,055 reputation&quot; class=&quot;comment-user&quot;&gt;scipilot&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122508882_29576764&quot;&gt;&lt;span title=&quot;2021-09-24 10:04:50Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 24, 2021 at 10:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I think OP&apos;s asking for the last solution. However, strings don&apos;t have &lt;code&gt;Split&lt;/code&gt; method, but rather &lt;code&gt;split&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/605142/duri&quot; title=&quot;14,573 reputation&quot; class=&quot;comment-user&quot;&gt;duri&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7633194_6491509&quot;&gt;&lt;span title=&quot;2011-06-27 10:37:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 27, 2011 at 10:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Actualy I was asking the last one. The partName variable is filled with string indicating the key-structure to value. Your solution seems makes sense. However I may need to modify for extended depth in the data, like 4-5 level and more. And I am wondering if I can treat the array and object uniformly with this?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/684115/komaruloh&quot; title=&quot;6,141 reputation&quot; class=&quot;comment-user owner&quot;&gt;Komaruloh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7633216_6491509&quot;&gt;&lt;span title=&quot;2011-06-27 10:38:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 27, 2011 at 10:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Get the following error &lt;code&gt;path is not iterable&lt;/code&gt; with &lt;code&gt;Object.get&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2253323/nikk&quot; title=&quot;6,631 reputation&quot; class=&quot;comment-user&quot;&gt;Nikk&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122740643_67603951&quot;&gt;&lt;span title=&quot;2021-10-04 21:12:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 4, 2021 at 21:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In my case, I got the error that Object.get() is not a function.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11937286/huntzinger92&quot; title=&quot;121 reputation&quot; class=&quot;comment-user&quot;&gt;huntzinger92&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125975609_67603951&quot;&gt;&lt;span title=&quot;2022-02-25 16:25:14Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 25 at 16:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See &lt;a href=&quot;https://stackoverflow.com/a/60553207/5535245&quot;&gt;AngularJS has &lt;code&gt;$scope.$eval&lt;/code&gt;&lt;/a&gt; for another way to do it with AngularJS.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5535245/georgeawg&quot; title=&quot;48,065 reputation&quot; class=&quot;comment-user&quot;&gt;georgeawg&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107127283_28742365&quot;&gt;&lt;span title=&quot;2020-03-05 20:16:47Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 5, 2020 at 20:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you&apos;re going to post code as an answer, please explain &lt;i&gt;why&lt;/i&gt; the code answers the question.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/534109/tieson-t&quot; title=&quot;20,708 reputation&quot; class=&quot;comment-user&quot;&gt;Tieson T.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment69857354_41326547&quot;&gt;&lt;span title=&quot;2016-12-26 05:44:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 26, 2016 at 5:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You are not even checking if obj[key] actually exists. It&apos;s unreliable.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2495341/neithan-max&quot; title=&quot;9,475 reputation&quot; class=&quot;comment-user&quot;&gt;Neithan Max&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment89892990_47833807&quot;&gt;&lt;span title=&quot;2018-07-22 04:08:37Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 22, 2018 at 4:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@CarlesAlcolea by default js will neither check if the key of an object exists: &lt;code&gt;a.b.c&lt;/code&gt; will raise an exception if there is no property &lt;code&gt;b&lt;/code&gt; in your object. If you need something silently dismissing the wrong keypath (which I do not recommend), you can still replace the forEach with this one &lt;code&gt;keys.forEach((key)=&amp;gt; obj = (obj||{})[key]);&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/532695/flavien-volken&quot; title=&quot;16,328 reputation&quot; class=&quot;comment-user&quot;&gt;Flavien Volken&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment89916230_47833807&quot;&gt;&lt;span title=&quot;2018-07-23 07:57:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 23, 2018 at 7:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I run through it an object that was missing a curly brace, my bad :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2495341/neithan-max&quot; title=&quot;9,475 reputation&quot; class=&quot;comment-user&quot;&gt;Neithan Max&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90117919_47833807&quot;&gt;&lt;span title=&quot;2018-07-28 23:59:32Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 28, 2018 at 23:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;This module has been discontinued. Use chaijs/pathval.&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/161182/patrick-fisher&quot; title=&quot;7,739 reputation&quot; class=&quot;comment-user&quot;&gt;Patrick Fisher&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34176463_19598040&quot;&gt;&lt;span title=&quot;2014-03-18 00:09:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 18, 2014 at 0:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":222,"title":"Accessing nested JavaScript objects and arrays by string path","content":"\n                \n&lt;p&gt;I have a data structure like this :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someObject = {\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;part1&apos;&lt;/span&gt; : {\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Part 1&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;20&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;50&apos;&lt;/span&gt;\n    },\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;part2&apos;&lt;/span&gt; : {\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Part 2&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;15&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;60&apos;&lt;/span&gt;\n    },\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;part3&apos;&lt;/span&gt; : [\n        {\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Part 3A&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;20&apos;&lt;/span&gt;\n        }, {\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Part 3B&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;5&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;20&apos;&lt;/span&gt;\n        }, {\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Part 3C&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;7.5&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;20&apos;&lt;/span&gt;\n        }\n    ]\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And I would like to access the data using these variable :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part1name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;part1.name&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part2quantity = &lt;span class=&quot;hljs-string&quot;&gt;&quot;part2.qty&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part3name1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;part3[0].name&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;part1name should be filled with &lt;code&gt;someObject.part1.name&lt;/code&gt; &apos;s value, which is &quot;Part 1&quot;. Same thing with part2quantity which filled with 60.&lt;/p&gt;\n\n&lt;p&gt;Is there anyway to achieve this with either pure javascript or JQuery?&lt;/p&gt;\n    ","slug":"accessing-nested-javascript-objects-and-arrays-by-string-path-1657387321754","postType":"QUESTION","createdAt":"2022-07-09T17:22:01.000Z","updatedAt":"2022-07-09T17:22:01.000Z","tags":[{"id":1517,"name":"path","slug":"path","createdAt":"2022-07-09T17:22:01.000Z","updatedAt":"2022-07-09T17:22:01.000Z","Questions_Tags":{"questionId":222,"tagId":1517}}]}]}},"__N_SSG":true}