{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;Tips about writing micro benchmarks &lt;a href=&quot;https://wiki.openjdk.java.net/display/HotSpot/Main&quot; rel=&quot;noreferrer&quot;&gt;from the creators of Java HotSpot&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Rule 0:&lt;/strong&gt; Read a reputable paper on JVMs and micro-benchmarking. A good one is &lt;a href=&quot;http://www.ibm.com/developerworks/java/library/j-jtp02225&quot; rel=&quot;noreferrer&quot;&gt;Brian Goetz, 2005&lt;/a&gt;. Do not expect too much from micro-benchmarks; they measure only a limited range of JVM performance characteristics.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Rule 1:&lt;/strong&gt; Always include a warmup phase which runs your test kernel all the way through, enough to trigger all initializations and compilations before timing phase(s). (Fewer iterations is OK on the warmup phase. The rule of thumb is several tens of thousands of inner loop iterations.)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Rule 2:&lt;/strong&gt; Always run with &lt;code&gt;-XX:+PrintCompilation&lt;/code&gt;, &lt;code&gt;-verbose:gc&lt;/code&gt;, etc., so you can verify that the compiler and other parts of the JVM are not doing unexpected work during your timing phase.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Rule 2.1:&lt;/strong&gt; Print messages at the beginning and end of timing and warmup phases, so you can verify that there is no output from Rule 2 during the timing phase.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Rule 3:&lt;/strong&gt; Be aware of the difference between &lt;code&gt;-client&lt;/code&gt; and &lt;code&gt;-server&lt;/code&gt;, and OSR and regular compilations. The &lt;code&gt;-XX:+PrintCompilation&lt;/code&gt; flag reports OSR compilations with an at-sign to denote the non-initial entry point, for example: &lt;code&gt;Trouble$1::run @ 2 (41 bytes)&lt;/code&gt;. Prefer server to client, and regular to OSR, if you are after best performance.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Rule 4:&lt;/strong&gt; Be aware of initialization effects. Do not print for the first time during your timing phase, since printing loads and initializes classes. Do not load new classes outside of the warmup phase (or final reporting phase), unless you are testing class loading specifically (and in that case load only the test classes). Rule 2 is your first line of defense against such effects.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Rule 5:&lt;/strong&gt; Be aware of deoptimization and recompilation effects. Do not take any code path for the first time in the timing phase, because the compiler may junk and recompile the code, based on an earlier optimistic assumption that the path was not going to be used at all. Rule 2 is your first line of defense against such effects.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Rule 6:&lt;/strong&gt; Use appropriate tools to read the compiler&apos;s mind, and expect to be surprised by the code it produces. Inspect the code yourself before forming theories about what makes something faster or slower.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Rule 7:&lt;/strong&gt; Reduce noise in your measurements. Run your benchmark on a quiet machine, and run it several times, discarding outliers. Use &lt;code&gt;-Xbatch&lt;/code&gt; to serialize the compiler with the application, and consider setting &lt;code&gt;-XX:CICompilerCount=1&lt;/code&gt; to prevent the compiler from running in parallel with itself. Try your best to reduce GC overhead, set &lt;code&gt;Xmx&lt;/code&gt;(large enough) equals &lt;code&gt;Xms&lt;/code&gt; and use &lt;a href=&quot;http://openjdk.java.net/jeps/318&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;UseEpsilonGC&lt;/code&gt;&lt;/a&gt; if it is available.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Rule 8:&lt;/strong&gt; Use a library for your benchmark as it is probably more efficient and was already debugged for this sole purpose. Such as &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot; rel=&quot;noreferrer&quot;&gt;JMH&lt;/a&gt;, &lt;a href=&quot;https://github.com/google/caliper&quot; rel=&quot;noreferrer&quot;&gt;Caliper&lt;/a&gt; or &lt;a href=&quot;http://cseweb.ucsd.edu/users/wgg/JavaProf/javaprof.html&quot; rel=&quot;noreferrer&quot;&gt;Bill and Paul&apos;s Excellent UCSD Benchmarks for Java&lt;/a&gt;.  &lt;/p&gt;\n    ","\n&lt;p&gt;I know this question has been marked as answered but I wanted to mention two libraries that help us to write micro benchmarks&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/google/caliper&quot; rel=&quot;noreferrer&quot;&gt;Caliper from Google&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Getting started tutorials&lt;/em&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;http://codingjunkie.net/micro-benchmarking-with-caliper/&quot; rel=&quot;noreferrer&quot;&gt;http://codingjunkie.net/micro-benchmarking-with-caliper/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://vertexlabs.co.uk/blog/caliper&quot; rel=&quot;noreferrer&quot;&gt;http://vertexlabs.co.uk/blog/caliper&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot; rel=&quot;noreferrer&quot;&gt;JMH from OpenJDK&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Getting started tutorials&lt;/em&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/architect-benchmarking-2266277.html&quot; rel=&quot;noreferrer&quot;&gt;Avoiding Benchmarking Pitfalls on the JVM&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://nitschinger.at/Using-JMH-for-Java-Microbenchmarking&quot; rel=&quot;noreferrer&quot;&gt;Using JMH for Java Microbenchmarking&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20181018130828/http://java-performance.info:80/jmh&quot; rel=&quot;noreferrer&quot;&gt;Introduction to JMH&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Important things for Java benchmarks are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Warm up the JIT first by running the code several times &lt;strong&gt;before timing&lt;/strong&gt; it&lt;/li&gt;\n&lt;li&gt;Make sure you run it for long enough to be able to measure the results in seconds or (better) tens of seconds&lt;/li&gt;\n&lt;li&gt;While you can&apos;t call &lt;code&gt;System.gc()&lt;/code&gt; between iterations, it&apos;s a good idea to run it between tests, so that each test will hopefully get a &quot;clean&quot; memory space to work with. (Yes, &lt;code&gt;gc()&lt;/code&gt; is more of a hint than a guarantee, but it&apos;s very &lt;em&gt;likely&lt;/em&gt; that it really will garbage collect in my experience.)&lt;/li&gt;\n&lt;li&gt;I like to display iterations and time, and a score of time/iteration which can be scaled such that the &quot;best&quot; algorithm gets a score of 1.0 and others are scored in a relative fashion. This means you can run &lt;em&gt;all&lt;/em&gt; algorithms for a longish time, varying both number of iterations and time, but still getting comparable results.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I&apos;m just in the process of blogging about the design of a benchmarking framework in .NET. I&apos;ve got a &lt;a href=&quot;http://msmvps.com/blogs/jon_skeet/archive/2009/01/26/benchmarking-made-easy.aspx&quot; rel=&quot;noreferrer&quot;&gt;couple&lt;/a&gt; of &lt;a href=&quot;http://msmvps.com/blogs/jon_skeet/archive/2009/01/29/for-vs-foreach-on-arrays-and-lists.aspx&quot; rel=&quot;noreferrer&quot;&gt;earlier posts&lt;/a&gt; which may be able to give you some ideas - not everything will be appropriate, of course, but some of it may be.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jmh&lt;/a&gt; is a recent addition to OpenJDK and has been written by some performance engineers from Oracle. Certainly worth a look.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The jmh is a Java harness for building, running, and analysing nano/micro/macro benchmarks written in Java and other languages targetting the JVM.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Very interesting pieces of information buried in &lt;a href=&quot;http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/&quot; rel=&quot;nofollow noreferrer&quot;&gt;the sample tests comments&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;See also:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/architect-benchmarking-2266277.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Avoiding Benchmarking Pitfalls on the JVM&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/#!msg/mechanical-sympathy/m4opvy4xq3U/7lY8x8SvHgwJ&quot; rel=&quot;nofollow noreferrer&quot;&gt;Discussion on the main strengths of jmh&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;Should the benchmark measure time/iteration or iterations/time, and why?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It depends on &lt;strong&gt;what&lt;/strong&gt; you are trying to test.  &lt;/p&gt;\n\n&lt;p&gt;If you are interested in &lt;strong&gt;latency&lt;/strong&gt;, use time/iteration and if you are interested in &lt;strong&gt;throughput&lt;/strong&gt;, use iterations/time.&lt;/p&gt;\n    ","\n&lt;p&gt;Make sure you somehow use results which are computed in benchmarked code. Otherwise your code can be optimized away.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are trying to compare two algorithms, do at least two benchmarks for each, alternating the order.  i.e.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;.n)\n  alg1();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;.n)\n  alg2();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;.n)\n  alg2();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;.n)\n  alg1();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I have found some noticeable differences (5-10% sometimes) in the runtime of the same algorithm in different passes..&lt;/p&gt;\n\n&lt;p&gt;Also, make sure that &lt;em&gt;n&lt;/em&gt; is very large, so that the runtime of each loop is at the very least 10 seconds or so.  The more iterations, the more significant figures in your benchmark time and the more reliable that data is.&lt;/p&gt;\n    ","\n&lt;p&gt;There are many possible pitfalls for writing micro-benchmarks in Java.&lt;/p&gt;\n\n&lt;p&gt;First: You have to calculate with all sorts of events that take time more or less random: Garbage collection, caching effects (of OS for files and of CPU for memory), IO etc.&lt;/p&gt;\n\n&lt;p&gt;Second: You cannot trust the accuracy of the measured times for very short intervals.&lt;/p&gt;\n\n&lt;p&gt;Third: The JVM optimizes your code while executing. So different runs in the same JVM-instance will become faster and faster.&lt;/p&gt;\n\n&lt;p&gt;My recommendations: Make your benchmark run some seconds, that is more reliable than a runtime over milliseconds. Warm up the JVM (means running the benchmark at least once without measuring, that the JVM can run optimizations). And run your benchmark multiple times (maybe 5 times) and take the median-value. Run every micro-benchmark in a new JVM-instance (call for every benchmark new Java) otherwise optimization effects of the JVM can influence later running tests. Don&apos;t execute things, that aren&apos;t executed in the warmup-phase (as this could trigger class-load and recompilation).&lt;/p&gt;\n    ","\n&lt;p&gt;It should also be noted that it might also be important to analyze the results of the micro benchmark when comparing different implementations. Therefore a &lt;a href=&quot;http://en.wikipedia.org/wiki/Significance_testing&quot; rel=&quot;noreferrer&quot;&gt;significance test&lt;/a&gt; should be made.&lt;/p&gt;\n\n&lt;p&gt;This is because implementation &lt;code&gt;A&lt;/code&gt; might be faster during most of the runs of the benchmark than implementation &lt;code&gt;B&lt;/code&gt;. But &lt;code&gt;A&lt;/code&gt; might also have a higher spread, so the measured performance benefit of &lt;code&gt;A&lt;/code&gt; won&apos;t be of any significance when compared with &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;So it is also important to write and run a micro benchmark correctly, but also to analyze it correctly.&lt;/p&gt;\n    ","\n&lt;p&gt;To add to the other excellent advice, I&apos;d also be mindful of the following:&lt;/p&gt;\n\n&lt;p&gt;For some CPUs (e.g. Intel Core i5 range with TurboBoost), the temperature (and number of cores currently being used, as well as thier utilisation percent) affects the clock speed. Since CPUs are dynamically clocked, this can affect your results. For example, if you have a single-threaded application, the maximum clock speed (with TurboBoost) is higher than for an application using all cores. This can therefore interfere with comparisons of single and multi-threaded performance on some systems. Bear in mind that the temperature and volatages also affect how long Turbo frequency is maintained.&lt;/p&gt;\n\n&lt;p&gt;Perhaps a more fundamentally important aspect that you have direct control over: make sure you&apos;re measuring the right thing! For example, if you&apos;re using &lt;code&gt;System.nanoTime()&lt;/code&gt; to benchmark a particular bit of code, put the calls to the assignment in places that make sense to avoid measuring things which you aren&apos;t interested in. For example, don&apos;t do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;startTime&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; System.nanoTime();\n&lt;span class=&quot;hljs-comment&quot;&gt;//code here...&lt;/span&gt;\nSystem.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Code took &quot;&lt;/span&gt;+(System.nanoTime()-startTime)+&lt;span class=&quot;hljs-string&quot;&gt;&quot;nano seconds&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Problem is you&apos;re not immediately getting the end time when the code has finished. Instead, try the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; endTime, startTime = System.nanoTime();\n&lt;span class=&quot;hljs-comment&quot;&gt;//code here...&lt;/span&gt;\nendTime = System.nanoTime();\nSystem.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Code took &quot;&lt;/span&gt;+(endTime-startTime)+&lt;span class=&quot;hljs-string&quot;&gt;&quot;nano seconds&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://opt.sourceforge.net/&quot; rel=&quot;noreferrer&quot;&gt;http://opt.sourceforge.net/&lt;/a&gt; Java Micro Benchmark - control tasks required to determine the comparative performance characteristics of the computer system on different platforms. Can be used to guide optimization decisions and to compare different Java implementations.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See [this question][1] from a few minutes ago for some related info.    edit: sorry, this is not supposed to be a answer. I should&apos;ve posted as a comment.      [1]: &lt;a href=&quot;http://stackoverflow.com/questions/503877/how-can-i-measure-time-with-microsecond-precision-in-java&quot; title=&quot;how can i measure time with microsecond precision in java&quot;&gt;stackoverflow.com/questions/503877/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/55283/tiago&quot; title=&quot;8,999 reputation&quot; class=&quot;comment-user&quot;&gt;Tiago&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment5404785_504103&quot;&gt;&lt;span title=&quot;2011-02-01 14:07:10Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 1, 2011 at 14:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Java 9 might provide some features for micro-benchmarking: &lt;a href=&quot;http://openjdk.java.net/jeps/230&quot; rel=&quot;nofollow noreferrer&quot;&gt;openjdk.java.net/jeps/230&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/545127/raedwald&quot; title=&quot;43,888 reputation&quot; class=&quot;comment-user&quot;&gt;Raedwald&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48526263_504103&quot;&gt;&lt;span title=&quot;2015-05-13 09:33:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 13, 2015 at 9:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Raedwald I think that that JEP aims to add some micro benchmark to the JDK code, but I don&apos;t think that jmh will be included in the JDK...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/829571/assylias&quot; title=&quot;311,273 reputation&quot; class=&quot;comment-user&quot;&gt;assylias&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55805039_504103&quot;&gt;&lt;span title=&quot;2015-12-01 16:11:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 1, 2015 at 16:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Raedwald Hello from the future. &lt;a href=&quot;http://openjdk.java.net/projects/jdk9/&quot; rel=&quot;nofollow noreferrer&quot;&gt;It didn&apos;t make the cut&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1898563/michael&quot; title=&quot;38,248 reputation&quot; class=&quot;comment-user&quot;&gt;Michael&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79367155_504103&quot;&gt;&lt;span title=&quot;2017-09-13 16:03:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 13, 2017 at 16:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See: &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;i&gt;JMH, a Java harness for building, running, and analysing nano/micro/milli/macro benchmarks&lt;/i&gt;&lt;/a&gt; and &lt;a href=&quot;http://openjdk.java.net/jeps/230&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;i&gt;JEP 230: Microbenchmark Suite&lt;/i&gt;&lt;/a&gt; and duplicate Question &lt;a href=&quot;https://stackoverflow.com/q/37067929/642706&quot;&gt;&lt;i&gt;Best approach for dealing with time measures?&lt;/i&gt;&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/642706/basil-bourque&quot; title=&quot;266,257 reputation&quot; class=&quot;comment-user&quot;&gt;Basil Bourque&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment83303481_504103&quot;&gt;&lt;span title=&quot;2018-01-09 05:43:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 9, 2018 at 5:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This was also an interesting article: &lt;a href=&quot;http://www.ibm.com/developerworks/java/library/j-jtp12214/&quot; rel=&quot;nofollow noreferrer&quot;&gt;ibm.com/developerworks/java/library/j-jtp12214&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/24243/john-nilsson&quot; title=&quot;16,671 reputation&quot; class=&quot;comment-user owner&quot;&gt;John Nilsson&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3323001_513259&quot;&gt;&lt;span title=&quot;2010-07-10 22:29:41Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 10, 2010 at 22:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also, never use System.currentTimeMillis() unless you are OK with + or - 15 ms accuracy, which is typical on most OS + JVM combinations.  Use System.nanoTime() instead.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/589907/scott-carey&quot; title=&quot;1,533 reputation&quot; class=&quot;comment-user&quot;&gt;Scott Carey&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6593773_513259&quot;&gt;&lt;span title=&quot;2011-04-22 18:43:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 22, 2011 at 18:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Some paper from javaOne: &lt;a href=&quot;http://www.azulsystems.com/events/javaone_2009/session/2009_J1_Benchmark.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;azulsystems.com/events/javaone_2009/session/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/554431/bestsss&quot; title=&quot;11,384 reputation&quot; class=&quot;comment-user&quot;&gt;bestsss&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7277852_513259&quot;&gt;&lt;span title=&quot;2011-06-05 12:29:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 5, 2011 at 12:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It should be noted that &lt;code&gt;System.nanoTime()&lt;/code&gt; is not &lt;i&gt;guaranteed&lt;/i&gt; to be more accurate than &lt;code&gt;System.currentTimeMillis()&lt;/code&gt;.  It is only guaranteed to be at least as accurate.  It usually is substantially more accurate, however.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/847333/gravity&quot; title=&quot;2,638 reputation&quot; class=&quot;comment-user&quot;&gt;Gravity&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8131770_513259&quot;&gt;&lt;span title=&quot;2011-07-27 08:00:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 27, 2011 at 8:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The main reason why one must use &lt;code&gt;System.nanoTime()&lt;/code&gt; instead of &lt;code&gt;System.currentTimeMillis()&lt;/code&gt; is that the former is guaranteed to be monotonically increasing. Subtracting the values returned two &lt;code&gt;currentTimeMillis&lt;/code&gt; invocations can actually give negative results, possibly because the system time was adjusted by some NTP daemon.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/450811/waldheinz&quot; title=&quot;10,328 reputation&quot; class=&quot;comment-user&quot;&gt;Waldheinz&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46383615_513259&quot;&gt;&lt;span title=&quot;2015-03-16 10:51:48Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 16, 2015 at 10:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1 it could have been added as Rule 8 of the accepted answer: Rule 8: because so many things can go wrong, you should probably use an existing library rather than trying to do it yourself!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/829571/assylias&quot; title=&quot;311,273 reputation&quot; class=&quot;comment-user&quot;&gt;assylias&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18904622_4480774&quot;&gt;&lt;span title=&quot;2012-12-06 23:58:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 6, 2012 at 23:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Pangea jmh is probably superior to Caliper nowadays, See also: &lt;a href=&quot;https://groups.google.com/forum/#!msg/mechanical-sympathy/m4opvy4xq3U/7lY8x8SvHgwJ&quot; rel=&quot;nofollow noreferrer&quot;&gt;groups.google.com/forum/#!msg/mechanical-sympathy/m4opvy4xq3U/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/829571/assylias&quot; title=&quot;311,273 reputation&quot; class=&quot;comment-user&quot;&gt;assylias&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55878483_4480774&quot;&gt;&lt;span title=&quot;2015-12-03 09:49:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 3, 2015 at 9:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Minor nitpick: IMO &quot;so that each test gets&quot; should be &quot;so that each test might get&quot; since the former gives the impression that calling &lt;code&gt;gc&lt;/code&gt; &lt;i&gt;always&lt;/i&gt; frees up unused memory.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/193906/sanjay-t-sharma&quot; title=&quot;22,331 reputation&quot; class=&quot;comment-user&quot;&gt;Sanjay T. Sharma&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment23019378_504119&quot;&gt;&lt;span title=&quot;2013-04-20 06:52:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 20, 2013 at 6:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@SanjayT.Sharma: Well, the &lt;i&gt;intention&lt;/i&gt; is that it actually does. While it&apos;s not strictly guaranteed, it&apos;s actually a pretty strong hint. Will edit to be clearer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/22656/jon-skeet&quot; title=&quot;1,342,492 reputation&quot; class=&quot;comment-user&quot;&gt;Jon Skeet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment23020256_504119&quot;&gt;&lt;span title=&quot;2013-04-20 08:02:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 20, 2013 at 8:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I don&apos;t agree with calling System.gc(). It is a hint, that&apos;s all. Not even &quot;it will hopefully do something&quot;. You should never ever call it. This is programming, not art.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/972932/gyorgyabraham&quot; title=&quot;2,462 reputation&quot; class=&quot;comment-user&quot;&gt;gyorgyabraham&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment24748322_504119&quot;&gt;&lt;span title=&quot;2013-06-14 10:38:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 14, 2013 at 10:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@gyabraham: Yes, it&apos;s a hint - but it&apos;s one which I&apos;ve observed to usually be taken. So if you don&apos;t like using &lt;code&gt;System.gc()&lt;/code&gt;, how do you propose to minimize garbage collection in one test due to objects created in previous tests? I&apos;m pragmatic, not dogmatic.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/22656/jon-skeet&quot; title=&quot;1,342,492 reputation&quot; class=&quot;comment-user&quot;&gt;Jon Skeet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment24748899_504119&quot;&gt;&lt;span title=&quot;2013-06-14 10:58:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 14, 2013 at 10:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@gyabraham: I don&apos;t know what you mean by &quot;great fallback&quot;. Can you elaborate, and again - do you have a proposal to give better results? I did explicitly say that it&apos;s not a guarantee...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/22656/jon-skeet&quot; title=&quot;1,342,492 reputation&quot; class=&quot;comment-user&quot;&gt;Jon Skeet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment24762323_504119&quot;&gt;&lt;span title=&quot;2013-06-14 17:44:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 14, 2013 at 17:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See also this blog post: &lt;a href=&quot;http://psy-lob-saw.blogspot.com/2013/04/writing-java-micro-benchmarks-with-jmh.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;psy-lob-saw.blogspot.com/2013/04/&lt;/a&gt; for details on getting started with JMH.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1047667/nitsan-wakart&quot; title=&quot;2,713 reputation&quot; class=&quot;comment-user&quot;&gt;Nitsan Wakart&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment23408537_15787478&quot;&gt;&lt;span title=&quot;2013-05-02 15:41:49Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 2, 2013 at 15:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;FYI, &lt;a href=&quot;http://openjdk.java.net/jeps/230&quot; rel=&quot;nofollow noreferrer&quot;&gt;JEP 230: Microbenchmark Suite&lt;/a&gt; is an &lt;a href=&quot;http://openjdk.java.net/&quot; rel=&quot;nofollow noreferrer&quot;&gt;OpenJDK&lt;/a&gt; proposal based on this &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java Microbenchmark Harness (JMH)&lt;/a&gt; project. &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/jdk9-dev/2016-March/003894.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Did not make the cut for Java 9&lt;/a&gt; but may be added later.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/642706/basil-bourque&quot; title=&quot;266,257 reputation&quot; class=&quot;comment-user&quot;&gt;Basil Bourque&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63738984_15787478&quot;&gt;&lt;span title=&quot;2016-07-01 23:03:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 1, 2016 at 23:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Naturally changing the order influences the runtime. JVM-optimizations and caching-effects are going to work here. Better is to &apos;warm up&apos; the JVM-optimization, mak multiple runs and benchmark every test in a different JVM.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/21005/mnementh&quot; title=&quot;48,915 reputation&quot; class=&quot;comment-user&quot;&gt;Mnementh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment318932_504162&quot;&gt;&lt;span title=&quot;2009-02-02 18:04:23Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 2, 2009 at 18:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Actually I&apos;d say that for most benchmarking you want the warmed-up version, I&apos;d suggest that if you are running for 10 seconds (as per above recommendation), you only count the last 5 seconds--throw out the first 5.  Remember that java compiles code at some point.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12943/bill-k&quot; title=&quot;61,238 reputation&quot; class=&quot;comment-user&quot;&gt;Bill K&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126737080_504162&quot;&gt;&lt;span title=&quot;2022-04-01 21:56:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 1 at 21:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yes it&apos;s important to not do unrelated work inside the timed region, but your first example is still fine.  There&apos;s only one call to &lt;code&gt;println&lt;/code&gt;, not a separate header line or something, and &lt;code&gt;System.nanoTime()&lt;/code&gt; has to be evaluated as the &lt;i&gt;first&lt;/i&gt; step in constructing the string arg for that call.  There&apos;s nothing a compiler can do with the first that they can&apos;t do with the second, and neither one is even encouraging them to do extra work before recording a stop time.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/224132/peter-cordes&quot; title=&quot;289,881 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Cordes&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment97351238_42891083&quot;&gt;&lt;span title=&quot;2019-03-23 08:44:10Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 23, 2019 at 8:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Seems to just benchmark the JVM + hardware, not an arbitrary piece of Java code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/218139/stefan-l&quot; title=&quot;1,499 reputation&quot; class=&quot;comment-user&quot;&gt;Stefan L&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment12040121_4480713&quot;&gt;&lt;span title=&quot;2012-02-29 22:05:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 29, 2012 at 22:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":73,"title":"How do I write a correct micro-benchmark in Java?","content":"\n                \n&lt;p&gt;How do you write (and run) a correct micro-benchmark in Java?&lt;/p&gt;\n\n&lt;p&gt;I&apos;m looking for some code samples and comments illustrating various things to think about.&lt;/p&gt;\n\n&lt;p&gt;Example: Should the benchmark measure time/iteration or iterations/time, and why?&lt;/p&gt;\n\n&lt;p&gt;Related: &lt;a href=&quot;https://stackoverflow.com/questions/410437/is-stopwatch-benchmarking-acceptable&quot;&gt;Is stopwatch benchmarking acceptable?&lt;/a&gt;&lt;/p&gt;\n    ","slug":"how-do-i-write-a-correct-micro-benchmark-in-java-1657384488725","postType":"QUESTION","createdAt":"2022-07-09T16:34:48.000Z","updatedAt":"2022-07-09T16:34:48.000Z","tags":[{"id":265,"name":"jvm","slug":"jvm","createdAt":"2022-07-09T16:34:48.000Z","updatedAt":"2022-07-09T16:34:48.000Z","Questions_Tags":{"questionId":73,"tagId":265}}]}]}},"__N_SSG":true}