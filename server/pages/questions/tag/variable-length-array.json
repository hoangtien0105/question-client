{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;(Background: I have some experience implementing C and C++ compilers.)&lt;/p&gt;\n\n&lt;p&gt;Variable-length arrays in C99 were basically a misstep. In order to support VLAs, C99 had to make the following concessions to common sense:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;sizeof x&lt;/code&gt; is no longer always a compile-time constant; the compiler must sometimes generate code to evaluate a &lt;code&gt;sizeof&lt;/code&gt;-expression at runtime.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Allowing two-dimensional VLAs (&lt;code&gt;int A[x][y]&lt;/code&gt;) required a new syntax for declaring functions that take 2D VLAs as parameters: &lt;code&gt;void foo(int n, int A[][*])&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Less importantly in the C++ world, but extremely important for C&apos;s target audience of embedded-systems programmers, declaring a VLA means chomping an &lt;em&gt;arbitrarily large&lt;/em&gt; chunk of your stack. This is a &lt;em&gt;guaranteed&lt;/em&gt; stack-overflow and crash. (Anytime you declare &lt;code&gt;int A[n]&lt;/code&gt;, you&apos;re implicitly asserting that you have 2GB of stack to spare. After all, if you know &quot;&lt;code&gt;n&lt;/code&gt; is definitely less than 1000 here&quot;, then you would just declare &lt;code&gt;int A[1000]&lt;/code&gt;. Substituting the 32-bit integer &lt;code&gt;n&lt;/code&gt; for &lt;code&gt;1000&lt;/code&gt; is an admission that you have no idea what the behavior of your program ought to be.)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Okay, so let&apos;s move to talking about C++ now. In C++, we have the same strong distinction between &quot;type system&quot; and &quot;value system&quot; that C89 does but we&apos;ve really started to rely on it in ways that C has not. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;S&lt;/span&gt; { ... };\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; A[n];\nS&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(A)&amp;gt; s;  &lt;span class=&quot;hljs-comment&quot;&gt;// equivalently, S&amp;lt;int[n]&amp;gt; s;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If &lt;code&gt;n&lt;/code&gt; weren&apos;t a compile-time constant (i.e., if &lt;code&gt;A&lt;/code&gt; were of variably modified type), then what on earth would be the type of &lt;code&gt;S&lt;/code&gt;? Would &lt;code&gt;S&lt;/code&gt;&apos;s type &lt;em&gt;also&lt;/em&gt; be determined only at runtime?&lt;/p&gt;\n\n&lt;p&gt;What about this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T&amp;amp; t1, T&amp;amp; t2)&lt;/span&gt; &lt;/span&gt;{ ... };\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; A1[n1], A2[n2];\n&lt;span class=&quot;hljs-built_in&quot;&gt;myfunc&lt;/span&gt;(A1, A2);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The compiler must generate code for some instantiation of &lt;code&gt;myfunc&lt;/code&gt;. What should that code look like? How can we statically generate that code, if we don&apos;t know the type of &lt;code&gt;A1&lt;/code&gt; at compile time?&lt;/p&gt;\n\n&lt;p&gt;Worse, what if it turns out at runtime that &lt;code&gt;n1 != n2&lt;/code&gt;, so that &lt;code&gt;!std::is_same&amp;lt;decltype(A1), decltype(A2)&amp;gt;()&lt;/code&gt;? In that case, the call to &lt;code&gt;myfunc&lt;/code&gt; &lt;strong&gt;shouldn&apos;t even compile&lt;/strong&gt;, because template type deduction should fail! How could we possibly emulate that behavior at runtime?&lt;/p&gt;\n\n&lt;p&gt;Basically, C++ is moving in the direction of pushing more and more decisions into &lt;em&gt;compile-time&lt;/em&gt;: template code generation, &lt;code&gt;constexpr&lt;/code&gt; function evaluation, and so on. Meanwhile, C99 was busy pushing traditionally &lt;em&gt;compile-time&lt;/em&gt; decisions (e.g. &lt;code&gt;sizeof&lt;/code&gt;) into the &lt;em&gt;runtime&lt;/em&gt;. With this in mind, does it really even make sense to expend any effort &lt;em&gt;trying&lt;/em&gt; to integrate C99-style VLAs into C++?&lt;/p&gt;\n\n&lt;p&gt;As every other answerer has already pointed out, C++ provides lots of heap-allocation mechanisms (&lt;code&gt;std::unique_ptr&amp;lt;int[]&amp;gt; A = new int[n];&lt;/code&gt; or &lt;code&gt;std::vector&amp;lt;int&amp;gt; A(n);&lt;/code&gt; being the obvious ones) when you really want to convey the idea &quot;I have no idea how much RAM I might need.&quot; And C++ provides a nifty exception-handling model for dealing with the inevitable situation that the amount of RAM you need is greater than the amount of RAM you have. But hopefully &lt;em&gt;this&lt;/em&gt; answer gives you a good idea of why C99-style VLAs were &lt;strong&gt;not&lt;/strong&gt; a good fit for C++  and not really even a good fit for C99. ;)&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;For more on the topic, see &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3810.pdf&quot; rel=&quot;noreferrer&quot;&gt;N3810 &quot;Alternatives for Array Extensions&quot;&lt;/a&gt;, Bjarne Stroustrup&apos;s October 2013 paper on VLAs. Bjarne&apos;s POV is very different from mine; N3810 focuses more on finding a good C++ish &lt;em&gt;syntax&lt;/em&gt; for the things, and on discouraging the use of raw arrays in C++, whereas I focused more on the implications for metaprogramming and the typesystem. I don&apos;t know if he considers the metaprogramming/typesystem implications solved, solvable, or merely uninteresting.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;A good blog post that hits many of these same points is &lt;a href=&quot;https://nullprogram.com/blog/2019/10/27/&quot; rel=&quot;noreferrer&quot;&gt;&quot;Legitimate Use of Variable Length Arrays&quot;&lt;/a&gt; (Chris Wellons, 2019-10-27).&lt;/p&gt;\n    ","\n&lt;p&gt;There recently was a discussion about this kicked off in usenet: &lt;a href=&quot;http://groups.google.com/group/comp.std.c++/browse_thread/thread/2bfe25800d4961e8/9545494bbb336dfa&quot; rel=&quot;noreferrer&quot;&gt;Why no VLAs in C++0x&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;I agree with those people that seem to agree that having to create a potential large array on the stack, which usually has only little space available, isn&apos;t good. The argument is, if you know the size beforehand, you can use a static array. And if you don&apos;t know the size beforehand, you will write unsafe code. &lt;/p&gt;\n\n&lt;p&gt;C99 VLAs could provide a small benefit of being able to create small arrays without wasting space or calling constructors for unused elements, but they will introduce rather large changes to the type system (you need to be able to specify types depending on runtime values - this does not yet exist in current C++, except for &lt;code&gt;new&lt;/code&gt; operator type-specifiers, but they are treated specially, so that the runtime-ness doesn&apos;t escape the scope of the &lt;code&gt;new&lt;/code&gt; operator).&lt;/p&gt;\n\n&lt;p&gt;You can use &lt;code&gt;std::vector&lt;/code&gt;, but it is not quite the same, as it uses dynamic memory, and making it use one&apos;s own stack-allocator isn&apos;t exactly easy (alignment is an issue, too). It also doesn&apos;t solve the same problem, because a vector is a resizable container, whereas VLAs are fixed-size. The &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2648.html&quot; rel=&quot;noreferrer&quot;&gt;C++ Dynamic Array&lt;/a&gt; proposal is intended to introduce a library based solution, as alternative to a language based VLA. However, it&apos;s not going to be part of C++0x, as far as I know.&lt;/p&gt;\n    ","\n&lt;p&gt;You could always use alloca() to allocate memory on the stack at runtime, if you wished:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *values = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *)&lt;span class=&quot;hljs-built_in&quot;&gt;alloca&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) * n);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Being allocated on the stack implies that it will automatically be freed when the stack unwinds.&lt;/p&gt;\n\n&lt;p&gt;Quick note: As mentioned in the Mac OS X man page for alloca(3), &quot;The alloca() function is machine and compiler dependent; its use is dis-couraged.&quot;  Just so you know.&lt;/p&gt;\n    ","\n&lt;p&gt;In my own work, I&apos;ve realized that every time I&apos;ve wanted something like variable-length automatic arrays or alloca(), I didn&apos;t really care that the memory was physically located on the cpu stack, just that it came from some stack allocator that didn&apos;t incur slow trips to the general heap.  So I have a per-thread object that owns some memory from which it can push/pop variable sized buffers.  On some platforms I allow this to grow via mmu.  Other platforms have a fixed size (usually accompanied by a fixed size cpu stack as well because no mmu).  One platform I work with (a handheld game console) has precious little cpu stack anyway because it resides in scarce, fast memory.&lt;/p&gt;\n\n&lt;p&gt;I&apos;m not saying that pushing variable-sized buffers onto the cpu stack is never needed.  Honestly I was surprised back when I discovered this wasn&apos;t standard, as it certainly seems like the concept fits into the language well enough.  For me though, the requirements &quot;variable size&quot; and &quot;must be physically located on the cpu stack&quot; have never come up together.  It&apos;s been about speed, so I made my own sort of &quot;parallel stack for data buffers&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;There are situations where allocating heap memory is very expensive compared to the operations performed. An example is matrix math. If you work with smallish matrices say 5 to 10 elements  and do a lot of arithmetics the malloc overhead will be really significant. At the same time making the size a compile time constant does seem very wasteful and inflexible.&lt;/p&gt;\n\n&lt;p&gt;I think that C++ is so unsafe in itself that the argument to &quot;try to not add more unsafe features&quot; is not very strong. On the other hand, as C++ is arguably the most runtime efficient programming language features which makes it more so are always useful: People who write performance critical programs will to a large extent use C++, and they need as much performance as possible. Moving stuff from heap to stack is one such possibility. Reducing the number of heap blocks is another. Allowing VLAs as object members would one way to achieve this. I&apos;m working on such a suggestion. It is a bit complicated to implement, admittedly, but it seems quite doable.&lt;/p&gt;\n    ","\n&lt;p&gt;Seems it will be available in C++14:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/C++14#Runtime-sized_one_dimensional_arrays&quot; rel=&quot;noreferrer&quot;&gt;https://en.wikipedia.org/wiki/C%2B%2B14#Runtime-sized_one_dimensional_arrays&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Update: It did not make it into C++14.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This was considered for inclusion in C++/1x, &lt;a href=&quot;http://www.stroustrup.com/C++11FAQ.html#C99&quot; rel=&quot;noreferrer&quot;&gt;but was dropped&lt;/a&gt; (this is a correction to what I said earlier).&lt;/p&gt;\n\n&lt;p&gt;It would be less useful in C++ anyway since we already have &lt;code&gt;std::vector&lt;/code&gt; to fill this role.&lt;/p&gt;\n    ","\n&lt;p&gt;Arrays like this are part of C99, but not part of standard C++. as others have said, a vector is always a much better solution, which is probably why variable sized arrays are not in the C++ standatrd (or in the proposed C++0x standard).&lt;/p&gt;\n\n&lt;p&gt;BTW, for questions on  &quot;why&quot; the C++ standard is the way it is, the moderated Usenet newsgroup &lt;a href=&quot;http://groups.google.com/group/comp.std.c++/topics?lnk=rgh&quot; rel=&quot;nofollow noreferrer&quot;&gt;comp.std.c++&lt;/a&gt; is the place to go to.&lt;/p&gt;\n    ","\n&lt;p&gt;Use std::vector for this. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; values;\nvalues.&lt;span class=&quot;hljs-built_in&quot;&gt;resize&lt;/span&gt;(n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The memory will be allocated on the heap, but this holds only a small performance drawback. Furthermore, it is wise not to allocate large datablocks on the stack, as it is rather limited in size.&lt;/p&gt;\n    ","\n&lt;p&gt;C99 allows VLA. And it puts some restrictions on how to declare VLA. For details, refer to 6.7.5.2 of the standard. C++ disallows VLA. But g++ allows it.&lt;/p&gt;\n    ","\n&lt;p&gt;VLAs are a part of a larger family of Variably Modified types.\nThis family of types is very special because they have &lt;em&gt;runtime&lt;/em&gt; components.&lt;/p&gt;\n&lt;p&gt;The code:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; A[n];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Is seen by compiler as:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; T[n];\nT A;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that the runtime size of array is not bound to the variable &lt;code&gt;A&lt;/code&gt; but to the &lt;strong&gt;type&lt;/strong&gt; of the variable.&lt;/p&gt;\n&lt;p&gt;Nothing prevents one from making new variables of this type:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;T B,C,D;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or the pointers or arrays&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;T *p, Z[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Moreover, pointers allow one to create VLAs with dynamic storage.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;T *p = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(T));\n...\n&lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(p);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What dispels a &lt;strong&gt;popular myth&lt;/strong&gt; that VLAs can only be allocated on stack.&lt;/p&gt;\n&lt;p&gt;Back to the question.&lt;/p&gt;\n&lt;p&gt;This runtime component does not work well with type deduction which is one of the bases with C++ typing system. It would not possible to use templates, deduction and  overloading.&lt;/p&gt;\n&lt;p&gt;C++ typing system is static, all types must be fully defined or deduced during &lt;em&gt;compilation&lt;/em&gt;.\nVM types are completed only during program &lt;em&gt;execution&lt;/em&gt;.\nAdditional complexity introducing VM types to already hellishly complex C++ was simply considered unjustified. Mainly because their main practical application\nare automatic VLAs (&lt;code&gt;int A[n];&lt;/code&gt;) which have an alternative in form of &lt;code&gt;std::vector&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;It a bit sad because VM types provides very elegant and efficient solutions to programs handling multidimensional arrays.&lt;/p&gt;\n&lt;p&gt;In C one can simply write:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; A[n][n][n])&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; ++i)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; n; ++j)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; k &amp;lt; n; ++k)\n        A[i][j][k] = i * j * k;\n}\n\n...\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; A[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;], B[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n&lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, A);\n&lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, B);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now try to provide as efficient and elegant solution in C++.&lt;/p&gt;\n    ","\n&lt;p&gt;If you know the value at compile time you can do the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; X&amp;gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; values[X];\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit: You can create an a vector that uses a stack allocator (alloca), since the allocator is a template parameter.&lt;/p&gt;\n    ","\n&lt;p&gt;I have a solution that actually worked for me.  I did not want to allocate memory because of fragmentation on a routine that needed to run many times.  The answer is extremely dangerous, so use it at your own risk, but it takes advantage of assembly to reserve space on the stack.  My example below uses a character array (obviously other sized variable would require more memory).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;varTest&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; iSz)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *varArray;\n    __asm {\n        sub esp, iSz       &lt;span class=&quot;hljs-comment&quot;&gt;// Create space on the stack for the variable array here&lt;/span&gt;\n        mov varArray, esp  &lt;span class=&quot;hljs-comment&quot;&gt;// save the end of it to our pointer&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Use the array called varArray here...  &lt;/span&gt;\n\n    __asm {\n        add esp, iSz       &lt;span class=&quot;hljs-comment&quot;&gt;// Variable array is no longer accessible after this point&lt;/span&gt;\n    } \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The dangers here are many but I&apos;ll explain a few:\n1. Changing the variable size half way through would kill the stack position\n2. Overstepping the array bounds would destroy other variables and possible code\n3. This does not work in a 64 bit build... need different assembly for that one (but a macro might solve that problem).\n4. Compiler specific (may have trouble moving between compilers).  I haven&apos;t tried so I really don&apos;t know.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Just out of curiosity, why does it need to be allocated on the stack? Are you that affraid of heap allocation performance issues?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/74612/dimitri-c&quot; title=&quot;21,240 reputation&quot; class=&quot;comment-user&quot;&gt;Dimitri C.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1787685_1887097&quot;&gt;&lt;span title=&quot;2009-12-11 10:32:07Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 11, 2009 at 10:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Dimitri Not really, but there&apos;s no denying that stack allocation will be faster than heap allocation. And in some cases this may matter.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/125672/andreas-brinck&quot; title=&quot;49,524 reputation&quot; class=&quot;comment-user owner&quot;&gt;Andreas Brinck&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1787713_1887097&quot;&gt;&lt;span title=&quot;2009-12-11 10:37:03Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 11, 2009 at 10:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The main advantage of variable length arrays that all data is close together so when you iterate through this array you read and write bytes next to each other. Your data is fetched into the cache and cpu can work on it without fetching and sending the bytes to/from the memory.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/58805/calmarius&quot; title=&quot;17,549 reputation&quot; class=&quot;comment-user&quot;&gt;Calmarius&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment4295973_1887097&quot;&gt;&lt;span title=&quot;2010-10-24 16:04:44Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 24, 2010 at 16:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Variable length arrays are also may be used to replace preprocessor constants with static const variables. Also in C you don&apos;t have another options for VLA, and it is sometimes needed to write portable C/C++ code (compatible with both compilers).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/685653/yury&quot; title=&quot;2,792 reputation&quot; class=&quot;comment-user&quot;&gt;Yury&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment19300414_1887097&quot;&gt;&lt;span title=&quot;2012-12-21 06:45:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 21, 2012 at 6:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;as an aside, it appears clang++ allows VLAs.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3426763/user3426763&quot; title=&quot;1 reputation&quot; class=&quot;comment-user&quot;&gt;user3426763&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34132475_1887097&quot;&gt;&lt;span title=&quot;2014-03-16 20:42:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 16, 2014 at 20:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I agree VLAs were just wrong.  The much more widely implemented, and far more useful, &lt;code&gt;alloca()&lt;/code&gt; should have been standardized in C99 instead.  VLAs are what happens when a standards committee jumps out ahead of implementations, instead of the other way around.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/939557/madscientist&quot; title=&quot;82,898 reputation&quot; class=&quot;comment-user&quot;&gt;MadScientist&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34467712_21519062&quot;&gt;&lt;span title=&quot;2014-03-25 11:21:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 25, 2014 at 11:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The variably-modified type system is a great addition IMO, and none of your bullet points violate common sense.  (1) the C standard does not distinguish between &quot;compile-time&quot; and &quot;run-time&quot; so this is a non-issue; (2) The &lt;code&gt;*&lt;/code&gt; is optional, you can (and should) write &lt;code&gt;int A[][n]&lt;/code&gt;; (3) You can use the type system without actually declaring any VLAs. For example a function can accept array of variably modified type, and it can be called with non-VLA 2-D arrays of differing dimensions.   However you make valid points in the latter part of your post.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1505939/m-m&quot; title=&quot;135,063 reputation&quot; class=&quot;comment-user&quot;&gt;M.M&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46415072_21519062&quot;&gt;&lt;span title=&quot;2015-03-17 04:52:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 17, 2015 at 4:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;declaring a VLA means chomping an arbitrarily large chunk of your stack. This is a guaranteed stack-overflow and crash. (Anytime you declare int A[n], you&apos;re implicitly asserting that you have 2GB of stack to spare&quot; is empirically false.  I just ran a VLA program with a stack far less than 2GB without any stack overflow.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2189128/jeff-hammond&quot; title=&quot;4,975 reputation&quot; class=&quot;comment-user&quot;&gt;Jeff Hammond&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment62599689_21519062&quot;&gt;&lt;span title=&quot;2016-05-31 20:54:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 31, 2016 at 20:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&apos;&lt;i&gt;After all, if you know &quot;n is definitely less than 1000 here&quot;, then you would just declare int A[1000].&lt;/i&gt;&apos; is just nonsense. If, say, the VLA length is &lt;code&gt;10&lt;/code&gt; on 99.99% of function invocations and only hits its upper bound of &lt;code&gt;1000&lt;/code&gt; on 0.01% of invocations, you&apos;ve just basically wasted 1000 bytes that will never be freed as long as the frame remains on the stack -- which could be almost all the time if the function is high up your control flow hierarchy. You may think 1000 bytes is not much, but then factor in all your cache misses every time  your CPU has to move in and out of that function!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/765294/will&quot; title=&quot;1,967 reputation&quot; class=&quot;comment-user&quot;&gt;Will&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98190075_21519062&quot;&gt;&lt;span title=&quot;2019-04-19 06:01:14Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 19, 2019 at 6:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;As for embedded, I work almost exclusively with embedded systems and I use pointers to VLA all the time. Allocating VLA objects is however banned by my coding standard. But I don&apos;t recall ever seeing a stack overflow caused by VLA in any embedded system. The &quot;anti-VLA movement&quot; rather seems to be coming from the PC people with Microsoft in front. Because if VLA are allowed, MS would have to update their so called &quot;2019&quot; compiler from 1989 to fall in line with the 1999 version of the language.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/584518/lundin&quot; title=&quot;175,730 reputation&quot; class=&quot;comment-user&quot;&gt;Lundin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117924203_21519062&quot;&gt;&lt;span title=&quot;2021-03-19 14:25:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 19, 2021 at 14:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1 and accepted. One comment though, I think the safety argument is a little bit weak since there are so many other ways to cause stack overflows. The safety argument could be used to support the position that you should never use recursion and that you should allocate &lt;i&gt;all&lt;/i&gt; objects from the heap.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/125672/andreas-brinck&quot; title=&quot;49,524 reputation&quot; class=&quot;comment-user owner&quot;&gt;Andreas Brinck&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1787758_1887178&quot;&gt;&lt;span title=&quot;2009-12-11 10:46:31Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 11, 2009 at 10:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;So you&apos;re saying that because there are other ways to cause stack overflows, we might as well encourage more of them?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/33213/jalf&quot; title=&quot;236,976 reputation&quot; class=&quot;comment-user&quot;&gt;jalf&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1787812_1887178&quot;&gt;&lt;span title=&quot;2009-12-11 10:57:52Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 11, 2009 at 10:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Andreas, agreed about the weakness. But for recursion, it takes a huge number of calls until stack is eaten up, and if that can be the case, people would use iteration. As some people on the usenet thread say, though, this is not an argument against VLAs in all cases, since sometimes you definitely may know an upper bound. But in those cases, from what i see a static array can equally be sufficient, since it would not waste much space anyway (if it &lt;i&gt;would&lt;/i&gt;, then you would actually have to ask whether the stack area is large enough again).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/34509/johannes-schaub-litb&quot; title=&quot;482,727 reputation&quot; class=&quot;comment-user&quot;&gt;Johannes Schaub - litb&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1787828_1887178&quot;&gt;&lt;span title=&quot;2009-12-11 11:00:14Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 11, 2009 at 11:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also look at Matt Austern&apos;s answer in that thread: The language specification of VLAs would probably considerably more complex for C++, because of the stricter type matches in C++ (example: C allows assigning a &lt;code&gt;T(*)[]&lt;/code&gt; to a &lt;code&gt;T(*)[N]&lt;/code&gt; - in C++ this is not allowed, since C++ does not know about &quot;type compatibility&quot; - it requires exact matches), type parameters, exceptions, con- and destructors and stuffs. I&apos;m not sure whether the benefits of VLAs would really pay off all that work. But then, i have never used VLAs in real life, so i probably don&apos;t know good use cases for them.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/34509/johannes-schaub-litb&quot; title=&quot;482,727 reputation&quot; class=&quot;comment-user&quot;&gt;Johannes Schaub - litb&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1787848_1887178&quot;&gt;&lt;span title=&quot;2009-12-11 11:03:43Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 11, 2009 at 11:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AHelps: Perhaps what would be best for that would be a type that behaves somewhat like &lt;code&gt;vector&lt;/code&gt; but requires a fixed LIFO usage pattern and maintains one or more per-thread statically-allocated buffers which are generally sized according to the largest total allocation the thread has ever used, but which could be explicitly trimmed.  A normal &quot;allocation&quot; would in the common case require nothing more than a pointer copy, pointer-from-pointer subtraction, integer comparison, and pointer addition; de-allocation would simply require a pointer copy.  Not much slower than a VLA.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/363751/supercat&quot; title=&quot;73,697 reputation&quot; class=&quot;comment-user&quot;&gt;supercat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49316886_1887178&quot;&gt;&lt;span title=&quot;2015-06-03 16:15:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 3, 2015 at 16:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also, the scope for alloca() is the entire function, not just the block of code containing the variable. So using it inside of a loop it will continuously increase the stack. A VLA does not have this problem.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/492336/sashoalm&quot; title=&quot;69,607 reputation&quot; class=&quot;comment-user&quot;&gt;sashoalm&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63718888_1887192&quot;&gt;&lt;span title=&quot;2016-07-01 11:49:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 1, 2016 at 11:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;However, VLAs having the scope of the enclosing block means they are significantly less useful than alloca() with the scope of the entire function.  Consider: &lt;code&gt;if (!p) { p = alloca(strlen(foo)+1); strcpy(p, foo); }&lt;/code&gt;  This cannot be done with VLAs, precisely because of their block scope.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/939557/madscientist&quot; title=&quot;82,898 reputation&quot; class=&quot;comment-user&quot;&gt;MadScientist&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment70438209_1887192&quot;&gt;&lt;span title=&quot;2017-01-12 16:35:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 12, 2017 at 16:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;That does not answer OP&apos;s &lt;i&gt;why&lt;/i&gt; question. Moreover, this is a &lt;code&gt;C&lt;/code&gt;-like solution, and not really &lt;code&gt;C++&lt;/code&gt;-ish.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2311167/adrian-w&quot; title=&quot;4,078 reputation&quot; class=&quot;comment-user&quot;&gt;Adrian W&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment89046720_1887192&quot;&gt;&lt;span title=&quot;2018-06-25 15:37:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 25, 2018 at 15:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;not equivalent. alloca has dirty syntax.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/208397/codinglab&quot; title=&quot;1,433 reputation&quot; class=&quot;comment-user&quot;&gt;CodingLab&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124618208_1887192&quot;&gt;&lt;span title=&quot;2021-12-27 15:50:37Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 27, 2021 at 15:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This has the downside of having to manage that stack manually, but it&apos;s generally a very good approach.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8063904/smiley1000&quot; title=&quot;55 reputation&quot; class=&quot;comment-user&quot;&gt;Smiley1000&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121372840_15553765&quot;&gt;&lt;span title=&quot;2021-08-06 08:55:12Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 6, 2021 at 8:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;ve thought about this too... are you saying that you effectively have a &lt;code&gt;thread_local std::pmr::unsynchronized_pool_resource;&lt;/code&gt; that you can get at from anywhere when you want thread-local scratch space?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874660/ben&quot; title=&quot;7,913 reputation&quot; class=&quot;comment-user&quot;&gt;Ben&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125451822_15553765&quot;&gt;&lt;span title=&quot;2022-02-03 00:56:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 3 at 0:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;interesting. Herb Sutter discusses it here under &lt;b&gt;Dynamic Arrays&lt;/b&gt;: &lt;a href=&quot;http://isocpp.org/blog/2013/04/trip-report-iso-c-spring-2013-meeting&quot; rel=&quot;nofollow noreferrer&quot;&gt;isocpp.org/blog/2013/04/trip-report-iso-c-spring-2013-meeting&lt;/a&gt; (this is the reference for the wikipedia information)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/238902/default&quot; title=&quot;11,015 reputation&quot; class=&quot;comment-user&quot;&gt;default&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment26685660_18206942&quot;&gt;&lt;span title=&quot;2013-08-13 11:12:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 13, 2013 at 11:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;Run-time sized arrays and dynarray have been moved to the Array Extensions technical specification&quot; wrote 78.86.152.103 on Wikipedia on 18 January 2014: &lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=C%2B%2B14&amp;amp;diff=591269892&amp;amp;oldid=589637208&quot; rel=&quot;nofollow noreferrer&quot;&gt;en.wikipedia.org/w/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/39992/strager&quot; title=&quot;86,906 reputation&quot; class=&quot;comment-user&quot;&gt;strager&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment33305082_18206942&quot;&gt;&lt;span title=&quot;2014-02-24 03:26:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 24, 2014 at 3:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Wikipedia isn&apos;t a normative reference :)  This proposal did not make it into C++14.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1505939/m-m&quot; title=&quot;135,063 reputation&quot; class=&quot;comment-user&quot;&gt;M.M&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42042498_18206942&quot;&gt;&lt;span title=&quot;2014-11-04 02:37:29Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 4, 2014 at 2:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ViktorSehr: What&apos;s the status of this w.r.t. C++17?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1593077/einpoklum&quot; title=&quot;103,988 reputation&quot; class=&quot;comment-user&quot;&gt;einpoklum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment61839178_18206942&quot;&gt;&lt;span title=&quot;2016-05-10 23:37:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 10, 2016 at 23:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@einpoklum No idea, use boost::container::static_vector&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/100724/viktor-sehr&quot; title=&quot;12,560 reputation&quot; class=&quot;comment-user&quot;&gt;Viktor Sehr&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment72253812_18206942&quot;&gt;&lt;span title=&quot;2017-03-02 15:44:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 2, 2017 at 15:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;No, we don&apos;t, std::vector doesn&apos;t allocate data on the stack. :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/399317/kos&quot; title=&quot;68,155 reputation&quot; class=&quot;comment-user&quot;&gt;Kos&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8376145_1887171&quot;&gt;&lt;span title=&quot;2011-08-10 16:34:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 10, 2011 at 16:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@M.M: Fair enough, but in practice we still can&apos;t use &lt;code&gt;std::vector&lt;/code&gt; instead of, say, &lt;code&gt;alloca()&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1593077/einpoklum&quot; title=&quot;103,988 reputation&quot; class=&quot;comment-user&quot;&gt;einpoklum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment61839162_1887171&quot;&gt;&lt;span title=&quot;2016-05-10 23:36:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 10, 2016 at 23:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@einpoklum in terms of getting correct output for your program , you can. Performance is a quality-of-implementation issue&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1505939/m-m&quot; title=&quot;135,063 reputation&quot; class=&quot;comment-user&quot;&gt;M.M&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment61839405_1887171&quot;&gt;&lt;span title=&quot;2016-05-10 23:50:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 10, 2016 at 23:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@M.M quality-of-implementation is not portable. and if you don&apos;t need performance, you don&apos;t use c++ in the first place&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2088034/pal&quot; title=&quot;620 reputation&quot; class=&quot;comment-user&quot;&gt;pal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment101340991_1887171&quot;&gt;&lt;span title=&quot;2019-08-09 13:49:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 9, 2019 at 13:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How do you handle multidimensions with vectors without tedious multiplications. C++ only gives excuses to exclude useful tools while they lie about &quot;we need to allow people to write things we don&apos;t imagine&quot;. If this was useless why all these languages support it: &lt;a href=&quot;https://en.wikipedia.org/wiki/Variable-length_array&quot; rel=&quot;nofollow noreferrer&quot;&gt;en.wikipedia.org/wiki/Variable-length_array&lt;/a&gt;   even C# added it and yes it is called stackalloc....&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2187015/abdurrahim&quot; title=&quot;1,959 reputation&quot; class=&quot;comment-user&quot;&gt;Abdurrahim&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122699507_1887171&quot;&gt;&lt;span title=&quot;2021-10-02 20:30:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 2, 2021 at 20:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;-1 Vector is not always better.  Often, yes.  Always, no.  If you only need a small array, are on a platform where heap space is slow, and your library&apos;s implementation of vector uses heap space, then this feature might very well be better if it existed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1035398/patrick-m&quot; title=&quot;1,006 reputation&quot; class=&quot;comment-user&quot;&gt;Patrick M&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25586894_1887165&quot;&gt;&lt;span title=&quot;2013-07-11 01:14:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 11, 2013 at 1:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;A major application for variable length arrays is evaluation of arbitrary degree polynomials. In that case, your &quot;small performance drawback&quot; means &quot;the code runs five times slower in typical cases.&quot; That&apos;s not small.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/78006/ahelps&quot; title=&quot;1,772 reputation&quot; class=&quot;comment-user&quot;&gt;AHelps&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment47286043_1887145&quot;&gt;&lt;span title=&quot;2015-04-10 18:26:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 10, 2015 at 18:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why don&apos;t you simply use &lt;code&gt;std::vector&amp;lt;int&amp;gt; values(n);&lt;/code&gt;?  By using &lt;code&gt;resize&lt;/code&gt; after construction you are prohibiting non-moveable types.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9716597/l-f&quot; title=&quot;18,153 reputation&quot; class=&quot;comment-user&quot;&gt;L. F.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102884626_1887145&quot;&gt;&lt;span title=&quot;2019-10-06 13:57:40Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 6, 2019 at 13:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;not equivalent. dirty syntax.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/208397/codinglab&quot; title=&quot;1,433 reputation&quot; class=&quot;comment-user&quot;&gt;CodingLab&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124618264_1887145&quot;&gt;&lt;span title=&quot;2021-12-27 15:53:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 27, 2021 at 15:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Can you provide a link to the standard paragraph that you are pointing ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4558911/vincent&quot; title=&quot;3,616 reputation&quot; class=&quot;comment-user&quot;&gt;Vincent&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment75412823_11734003&quot;&gt;&lt;span title=&quot;2017-05-26 11:10:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 26, 2017 at 11:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you know the value at compile time, you don&apos;t need a template at all. Just use X directly in your non-template function.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/33732/rob-kennedy&quot; title=&quot;159,435 reputation&quot; class=&quot;comment-user&quot;&gt;Rob Kennedy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1789536_1887172&quot;&gt;&lt;span title=&quot;2009-12-11 15:43:26Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 11, 2009 at 15:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Sometimes the caller knows at compile-time and the callee does not, that&apos;s what templates are good for. Of course, in the general case, no one knows X until run-time.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/22820/qwertie&quot; title=&quot;15,216 reputation&quot; class=&quot;comment-user&quot;&gt;Qwertie&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15308764_1887172&quot;&gt;&lt;span title=&quot;2012-07-20 00:50:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 20, 2012 at 0:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 4 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You can&apos;t use alloca in a STL allocator - allocated memory from alloca will be freed when the stack frame is destroyed - that&apos;s when the method who should allocate memory returns.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/209610/oliver&quot; title=&quot;775 reputation&quot; class=&quot;comment-user&quot;&gt;Oliver&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17497481_1887172&quot;&gt;&lt;span title=&quot;2012-10-16 12:58:47Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 16, 2012 at 12:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;... and if you want to roll this yourself, maybe use a RAII class?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1593077/einpoklum&quot; title=&quot;103,988 reputation&quot; class=&quot;comment-user&quot;&gt;einpoklum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment61839226_21132597&quot;&gt;&lt;span title=&quot;2016-05-10 23:39:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 10, 2016 at 23:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You could simply use boost::container::static_vector thou.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/100724/viktor-sehr&quot; title=&quot;12,560 reputation&quot; class=&quot;comment-user&quot;&gt;Viktor Sehr&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment61849092_21132597&quot;&gt;&lt;span title=&quot;2016-05-11 07:51:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 11, 2016 at 7:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This doesn&apos;t have equivalents for other compilers which have more raw assembly than MSVC. VC will likely understand that &lt;code&gt;esp&lt;/code&gt; changed and will adjust its accesses to stack, but in e.g. GCC you&apos;ll just break it completely  at least if you use optimizations and &lt;code&gt;-fomit-frame-pointer&lt;/code&gt; in particular.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/673852/ruslan&quot; title=&quot;16,742 reputation&quot; class=&quot;comment-user&quot;&gt;Ruslan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63384889_21132597&quot;&gt;&lt;span title=&quot;2016-06-22 13:29:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 22, 2016 at 13:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":130,"title":"Why aren't variable-length arrays part of the C++ standard?","content":"\n                \n&lt;p&gt;I haven&apos;t used C very much in the last few years. When I read &lt;a href=&quot;https://stackoverflow.com/questions/1886504/coding-problem-using-a-2-d-array-of-structs-inside-another-struct-in-c&quot;&gt;this question&lt;/a&gt; today I came across some C syntax which I wasn&apos;t familiar with.&lt;/p&gt;\n\n&lt;p&gt;Apparently in &lt;a href=&quot;https://en.wikipedia.org/wiki/C99&quot; rel=&quot;noreferrer&quot;&gt;C99&lt;/a&gt; the following syntax is valid:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; values[n]; &lt;span class=&quot;hljs-comment&quot;&gt;//Declare a variable length array&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This seems like a pretty useful feature. Was there ever a discussion about adding it to the C++ standard, and if so, why it was omitted?&lt;/p&gt;\n\n&lt;p&gt;Some potential reasons:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Hairy for compiler vendors to implement&lt;/li&gt;\n&lt;li&gt;Incompatible with some other part of the standard&lt;/li&gt;\n&lt;li&gt;Functionality can be emulated with other C++ constructs&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The C++ standard states that array size must be a constant expression (8.3.4.1).&lt;/p&gt;\n\n&lt;p&gt;Yes, of course I realize that in the toy example one could use &lt;code&gt;std::vector&amp;lt;int&amp;gt; values(m);&lt;/code&gt;, but this allocates memory from the heap and not the stack. And if I want a multidimensional array like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; z)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; values[x][y][z]; &lt;span class=&quot;hljs-comment&quot;&gt;// Declare a variable length array&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the &lt;code&gt;vector&lt;/code&gt; version becomes pretty clumsy:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; z)&lt;/span&gt; &lt;/span&gt;{\n    vector&amp;lt; vector&amp;lt; vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;gt; &amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;values&lt;/span&gt;( &lt;span class=&quot;hljs-comment&quot;&gt;/* Really painful expression here. */&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The slices, rows and columns will also potentially be spread all over memory.&lt;/p&gt;\n\n&lt;p&gt;Looking at the discussion at &lt;code&gt;comp.std.c++&lt;/code&gt; it&apos;s clear that this question is pretty controversial with some very heavyweight names on both sides of the argument. It&apos;s certainly not obvious that a &lt;code&gt;std::vector&lt;/code&gt; is always a better solution.&lt;/p&gt;\n    ","slug":"why-aren't-variable-length-arrays-part-of-the-c++-standard-1657384712975","postType":"QUESTION","createdAt":"2022-07-09T16:38:32.000Z","updatedAt":"2022-07-09T16:38:32.000Z","tags":[{"id":475,"name":"variable-length-array","slug":"variable-length-array","createdAt":"2022-07-09T16:38:33.000Z","updatedAt":"2022-07-09T16:38:33.000Z","Questions_Tags":{"questionId":130,"tagId":475}}]}]}},"__N_SSG":true}