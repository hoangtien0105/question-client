{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;You can use &lt;a href=&quot;https://docs.python.org/tutorial/datastructures.html#dictionaries&quot; rel=&quot;nofollow noreferrer&quot;&gt;dictionaries&lt;/a&gt; to accomplish this. Dictionaries are stores of keys and values.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dct = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dct\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dct[&lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can use variable key names to achieve the effect of variable variables without the security risk.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&quot;spam&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;z = {x: &lt;span class=&quot;hljs-string&quot;&gt;&quot;eggs&quot;&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;z[&lt;span class=&quot;hljs-string&quot;&gt;&quot;spam&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;eggs&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For cases where you&apos;re thinking of doing something like&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;var1 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\nvar2 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\nvar3 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;\n...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;a &lt;a href=&quot;https://docs.python.org/tutorial/introduction.html#lists&quot; rel=&quot;nofollow noreferrer&quot;&gt;list&lt;/a&gt; may be more appropriate than a dict. A list represents an ordered sequence of objects, with integer indices:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lst = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(lst[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])           &lt;span class=&quot;hljs-comment&quot;&gt;# prints bar, because indices start at 0&lt;/span&gt;\nlst.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;potatoes&apos;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# lst is now [&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;, &apos;potatoes&apos;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For ordered sequences, lists are more convenient than dicts with integer keys, because lists support iteration in index order, &lt;a href=&quot;https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation&quot;&gt;slicing&lt;/a&gt;, &lt;code&gt;append&lt;/code&gt;, and other operations that would require awkward key management with a dict.&lt;/p&gt;\n    ","\n&lt;p&gt;Use the built-in &lt;a href=&quot;http://docs.python.org/library/functions.html#getattr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getattr&lt;/code&gt;&lt;/a&gt; function to get an attribute on an object by name.  Modify the name as needed.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;obj.spam = &lt;span class=&quot;hljs-string&quot;&gt;&apos;eggs&apos;&lt;/span&gt;\nname = &lt;span class=&quot;hljs-string&quot;&gt;&apos;spam&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(obj, name)  &lt;span class=&quot;hljs-comment&quot;&gt;# returns &apos;eggs&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s not a good idea. If you are accessing a global variable you can use &lt;a href=&quot;http://docs.python.org/library/functions.html#globals&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;globals()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to access a variable in the local scope you can use &lt;a href=&quot;http://docs.python.org/library/functions.html#locals&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt;, but you cannot assign values to the returned dict.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;A better solution&lt;/strong&gt; is to use &lt;code&gt;getattr&lt;/code&gt; or store your variables in a dictionary and then access them by name.&lt;/p&gt;\n    ","\n&lt;p&gt;New coders sometimes write code like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_calculator.button_0 = tkinter.Button(root, text=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\nmy_calculator.button_1 = tkinter.Button(root, text=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\nmy_calculator.button_2 = tkinter.Button(root, text=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The coder is then left with a pile of named variables, with a coding effort of O(&lt;em&gt;m&lt;/em&gt; * &lt;em&gt;n&lt;/em&gt;), where &lt;em&gt;m&lt;/em&gt; is the number of named variables and &lt;em&gt;n&lt;/em&gt; is the number of times that group of variables needs to be accessed (including creation). The more astute beginner observes that the only difference in each of those lines is a number that changes based on a rule, and decides to use a loop. However, they get stuck on how to dynamically create those variable names, and may try something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    my_calculator.(&lt;span class=&quot;hljs-string&quot;&gt;&apos;button_%d&apos;&lt;/span&gt; % i) = tkinter.Button(root, text=i)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;They soon find that this does not work.&lt;/p&gt;\n\n&lt;p&gt;If the program requires arbitrary variable &quot;names,&quot; a dictionary is the best choice, as explained in other answers. However, if you&apos;re simply trying to create many variables and you don&apos;t mind referring to them with a sequence of integers, you&apos;re probably looking for a &lt;code&gt;list&lt;/code&gt;. This is particularly true if your data are homogeneous, such as daily temperature readings, weekly quiz scores, or a grid of graphical widgets.&lt;/p&gt;\n\n&lt;p&gt;This can be assembled as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_calculator.buttons = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    my_calculator.buttons.append(tkinter.Button(root, text=i))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This &lt;code&gt;list&lt;/code&gt; can also be created in one line with a comprehension:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_calculator.buttons = [tkinter.Button(root, text=i) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The result in either case is a populated &lt;code&gt;list&lt;/code&gt;, with the first element accessed with &lt;code&gt;my_calculator.buttons[0]&lt;/code&gt;, the next with &lt;code&gt;my_calculator.buttons[1]&lt;/code&gt;, and so on. The &quot;base&quot; variable name becomes the name of the &lt;code&gt;list&lt;/code&gt; and the varying identifier is used to access it.&lt;/p&gt;\n\n&lt;p&gt;Finally, don&apos;t forget other data structures, such as the &lt;code&gt;set&lt;/code&gt; - this is similar to a dictionary, except that each &quot;name&quot; doesn&apos;t have a value attached to it. If you simply need a &quot;bag&quot; of objects, this can be a great choice. Instead of something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;keyword_1 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;\nkeyword_2 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; query == keyword_1 &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; query == keyword_2:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Match.&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You will have this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;keywords = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; query &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; keywords:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Match.&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use a &lt;code&gt;list&lt;/code&gt; for a sequence of similar objects, a &lt;code&gt;set&lt;/code&gt; for an arbitrarily-ordered bag of objects, or a &lt;code&gt;dict&lt;/code&gt; for a bag of names with associated values.&lt;/p&gt;\n    ","\n&lt;p&gt;Whenever you want to use variable variables, it&apos;s probably better to use a dictionary. So instead of writing&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$foo = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;\n$$foo = &lt;span class=&quot;hljs-string&quot;&gt;&quot;baz&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you write &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mydict = {}\nfoo = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;\nmydict[foo] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;baz&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way you won&apos;t accidentally overwrite previously existing variables (which is the security aspect) and you can have different &quot;namespaces&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;globals()&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;You can actually assign variables to global scope dynamically, for instance, if you want 10 variables that can be accessed on a global scope &lt;code&gt;i_1&lt;/code&gt;, &lt;code&gt;i_2&lt;/code&gt; ... &lt;code&gt;i_10&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;i_{}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(i)] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will assign &apos;a&apos; to all of these 10 variables, of course you can change the value dynamically as well. All of these variables can be accessed now like other globally declared variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;i_5\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Instead of a dictionary you can also use &lt;a href=&quot;https://docs.python.org/library/collections.html#collections.namedtuple&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;namedtuple&lt;/code&gt;&lt;/a&gt; from the collections module, which makes access easier.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# using dictionary&lt;/span&gt;\nvariables = {}\nvariables[&lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;\nvariables[&lt;span class=&quot;hljs-string&quot;&gt;&quot;second&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(variables[&lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;], variables[&lt;span class=&quot;hljs-string&quot;&gt;&quot;second&quot;&lt;/span&gt;])\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# using namedtuple&lt;/span&gt;\nVariables = namedtuple(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Variables&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;first&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;])\n&lt;span class=&quot;hljs-built_in&quot;&gt;vars&lt;/span&gt; = Variables(&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;vars&lt;/span&gt;.first, &lt;span class=&quot;hljs-built_in&quot;&gt;vars&lt;/span&gt;.second)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;https://docs.python.org/library/types.html#types.SimpleNamespace&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;SimpleNamespace&lt;/code&gt;&lt;/a&gt; class could be used to create new attributes with &lt;code&gt;setattr&lt;/code&gt;, or subclass &lt;code&gt;SimpleNamespace&lt;/code&gt; and create your own function to add new attribute names (variables). &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; types &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; SimpleNamespace\n\nvariables = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;}\na = SimpleNamespace(**variables)\n&lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(a,&lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;G&quot;&lt;/span&gt;)\na.g = &lt;span class=&quot;hljs-string&quot;&gt;&quot;G+&quot;&lt;/span&gt;\nsomething = a.a\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you don&apos;t want to use any object, you can still use &lt;code&gt;setattr()&lt;/code&gt; inside your current module:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\ncurrent_module = module = sys.modules[__name__]  &lt;span class=&quot;hljs-comment&quot;&gt;# i.e the &quot;file&quot; where your code is written&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(current_module, &lt;span class=&quot;hljs-string&quot;&gt;&apos;variable_name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# 15 is the value you assign to the var&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(variable_name)  &lt;span class=&quot;hljs-comment&quot;&gt;# &amp;gt;&amp;gt;&amp;gt; 15, created from a string&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You have to use &lt;a href=&quot;https://docs.python.org/2/library/functions.html#globals&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;globals()&lt;/code&gt; built in method&lt;/a&gt;  to achieve that behaviour:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_of_var&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;k, v&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[k] = v\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; variable_name &lt;span class=&quot;hljs-comment&quot;&gt;# NameError: name &apos;variable_name&apos; is not defined&lt;/span&gt;\nsome_name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;variable_name&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[some_name] = &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(variable_name) &lt;span class=&quot;hljs-comment&quot;&gt;# 123&lt;/span&gt;\n\nsome_name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;variable_name2&apos;&lt;/span&gt;\nvar_of_var(some_name, &lt;span class=&quot;hljs-number&quot;&gt;456&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(variable_name2) &lt;span class=&quot;hljs-comment&quot;&gt;# 456&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m am answering the question: &lt;a href=&quot;https://stackoverflow.com/questions/9437726/how-to-get-the-value-of-a-variable-given-its-name-in-a-string&quot;&gt;How to get the value of a variable given its name in a string?&lt;/a&gt;\nwhich is closed as a duplicate with a link to this question. &lt;/p&gt;\n\n&lt;p&gt;If the variables in question are part of an object (part of a class for example) then some useful functions to achieve exactly that are &lt;code&gt;hasattr&lt;/code&gt;, &lt;code&gt;getattr&lt;/code&gt;, and &lt;code&gt;setattr&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;So for example you can have:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Variables&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.foo = &lt;span class=&quot;hljs-string&quot;&gt;&quot;initial_variable&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;create_new_var&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self,name,value&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(self,name,value)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_var&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self,name&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;hasattr&lt;/span&gt;(self,name):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(self,name)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Class does not have a variable named: &quot;&lt;/span&gt;+name)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you can do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;v = Variables()\nv.get_var(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;initial_variable&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;v.create_new_var(v.foo,&lt;span class=&quot;hljs-string&quot;&gt;&quot;is actually not initial&quot;&lt;/span&gt;)\nv.initial_variable\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;is actually not initial&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Python 3.8.2 (default, Feb 26 2020, 02:56:10)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Variable variables in Python&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n&amp;lt;?php\n$a = &apos;hello&apos;;\n$e = &apos;wow&apos;\n?&amp;gt;\n&amp;lt;?php\n$$a = &apos;world&apos;;\n?&amp;gt;\n&amp;lt;?php\necho &quot;$a ${$a}\\n&quot;;\necho &quot;$a ${$a[1]}\\n&quot;;\n?&amp;gt;\n&amp;lt;?php\necho &quot;$a $hello&quot;;\n?&amp;gt;\n&quot;&quot;&quot;&lt;/span&gt;\n\na = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;?php $a = &apos;hello&apos;; ?&amp;gt;&lt;/span&gt;\ne = &lt;span class=&quot;hljs-string&quot;&gt;&apos;wow&apos;&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;?php $e = &apos;wow&apos;; ?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;vars&lt;/span&gt;()[a] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;?php $$a = &apos;world&apos;; ?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a, &lt;span class=&quot;hljs-built_in&quot;&gt;vars&lt;/span&gt;()[a]) &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;?php echo &quot;$a ${$a}\\n&quot;; ?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a, &lt;span class=&quot;hljs-built_in&quot;&gt;vars&lt;/span&gt;()[&lt;span class=&quot;hljs-built_in&quot;&gt;vars&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]]) &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;?php echo &quot;$a ${$a[1]}\\n&quot;; ?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a, hello) &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;?php echo &quot;$a $hello&quot;; ?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;hello world\nhello wow\nhello world\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h3&gt;Using globals(), locals(), or vars() will produce the same results&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Python 3.8.2 (default, Feb 26 2020, 02:56:10)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;?php $a = &apos;hello&apos;; ?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;?php $e = &apos;wow&apos;; ?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;?php $$a = &apos;world&apos;; ?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;?php echo &quot;$a ${$a}\\n&quot;; ?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;?php echo &quot;$a ${$a[1]}\\n&quot;; ?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;?php echo &quot;$a $hello&quot;; ?&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;locals():\\n&apos;&lt;/span&gt;)\na = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;\ne = &lt;span class=&quot;hljs-string&quot;&gt;&apos;wow&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;()[a] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a, &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;()[a])\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a, &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;()[&lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]])\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a, hello)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n\\nglobals():\\n&apos;&lt;/span&gt;)\na = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;\ne = &lt;span class=&quot;hljs-string&quot;&gt;&apos;wow&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[a] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a, &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[a])\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a, &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]])\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a, hello)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;():\n\nhello world\nhello wow\nhello world\n\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;():\n\nhello world\nhello wow\nhello world\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;Bonus (creating variables from strings)&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Python 2.7.16 (default, Jul 13 2019, 16:01:51)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# [GCC 8.3.0] on linux2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Creating variables and unpacking tuple:&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;g = &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()\nlistB = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    g[&lt;span class=&quot;hljs-string&quot;&gt;&quot;num%s&quot;&lt;/span&gt; % i] = i ** &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n    listB.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;num{0}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(i))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printNum&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Printing num0 to num9:&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;num%s = &quot;&lt;/span&gt; % i, \n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; g[&lt;span class=&quot;hljs-string&quot;&gt;&quot;num%s&quot;&lt;/span&gt; % i]\n\nprintNum()\n\nlistA = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    listA.append(i)\n\nlistA = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(listA)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; listA, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;Tuple to unpack&quot;&apos;&lt;/span&gt;\n\nlistB = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(listB).strip(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[]&quot;&lt;/span&gt;).replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; = listA&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; listB\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt; listB\n\nprintNum()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Printing num0 to num9:\nnum0 =  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nnum1 =  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nnum2 =  &lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;\nnum3 =  &lt;span class=&quot;hljs-number&quot;&gt;59049&lt;/span&gt;\nnum4 =  &lt;span class=&quot;hljs-number&quot;&gt;1048576&lt;/span&gt;\nnum5 =  &lt;span class=&quot;hljs-number&quot;&gt;9765625&lt;/span&gt;\nnum6 =  &lt;span class=&quot;hljs-number&quot;&gt;60466176&lt;/span&gt;\nnum7 =  &lt;span class=&quot;hljs-number&quot;&gt;282475249&lt;/span&gt;\nnum8 =  &lt;span class=&quot;hljs-number&quot;&gt;1073741824&lt;/span&gt;\nnum9 =  &lt;span class=&quot;hljs-number&quot;&gt;3486784401&lt;/span&gt;\n(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;Tuple to unpack&quot;&lt;/span&gt;\nnum0, num1, num2, num3, num4, num5, num6, num7, num8, num9 = listA\nPrinting num0 to num9:\nnum0 =  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nnum1 =  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nnum2 =  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nnum3 =  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nnum4 =  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\nnum5 =  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\nnum6 =  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\nnum7 =  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\nnum8 =  &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\nnum9 =  &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I have tried both in python 3.7.3, you can use either globals() or vars()&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;food &lt;span class=&quot;hljs-comment&quot;&gt;#Error&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;milkshake &lt;span class=&quot;hljs-comment&quot;&gt;#Error&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;food=&lt;span class=&quot;hljs-string&quot;&gt;&quot;bread&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;drink=&lt;span class=&quot;hljs-string&quot;&gt;&quot;milkshake&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[food] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;strawberry flavor&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;vars&lt;/span&gt;()[drink] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;chocolate flavor&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;bread\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;strawberry flavor&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;milkshake\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;chocolate flavor&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[drink]\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;chocolate flavor&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;vars&lt;/span&gt;()[food]\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;strawberry flavor&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;Reference:&lt;br&gt;\n&lt;a href=&quot;https://www.daniweb.com/programming/software-development/threads/111526/setting-a-string-as-a-variable-name#post548936&quot; rel=&quot;noreferrer&quot;&gt;https://www.daniweb.com/programming/software-development/threads/111526/setting-a-string-as-a-variable-name#post548936&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The consensus is to use a dictionary for this - see the other answers. This is a good idea for most cases, however, there are many aspects arising from this:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;you&apos;ll yourself be responsible for this dictionary, including garbage collection (of in-dict variables) etc.&lt;/li&gt;\n&lt;li&gt;there&apos;s either no locality or globality for variable variables, it depends on the globality of the dictionary&lt;/li&gt;\n&lt;li&gt;if you want to rename a variable name, you&apos;ll have to do it manually&lt;/li&gt;\n&lt;li&gt;however, you are much more flexible, e.g. \n\n&lt;ul&gt;\n&lt;li&gt;you can decide to overwrite existing variables or  ...&lt;/li&gt;\n&lt;li&gt;... choose to implement const variables&lt;/li&gt;\n&lt;li&gt;to raise an exception on overwriting for different types&lt;/li&gt;\n&lt;li&gt;etc.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;That said, I&apos;ve implemented a &lt;a href=&quot;https://sourceforge.net/projects/python-vvm/&quot; rel=&quot;nofollow&quot;&gt;variable variables manager&lt;/a&gt;-class which provides some of the above ideas. It works for python 2 and 3.&lt;/p&gt;\n\n&lt;p&gt;You&apos;d use &lt;a href=&quot;https://sourceforge.net/p/python-vvm/code/ci/master/tree/variableVariablesManager.py&quot; rel=&quot;nofollow&quot;&gt;the class&lt;/a&gt; like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; variableVariablesManager &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; VariableVariablesManager\n\nmyVars = VariableVariablesManager()\nmyVars[&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(myVars[&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;])\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# define a const variable&lt;/span&gt;\nmyVars.defineConstVariable(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myconst&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n    myVars[&lt;span class=&quot;hljs-string&quot;&gt;&apos;myconst&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# &amp;lt;- this raises an error, since &apos;myconst&apos; must not be changed&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;not allowed&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; AttributeError &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; e:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# rename a variable&lt;/span&gt;\nmyVars.renameVariable(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myconst&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;myconstOther&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# preserve locality&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testLocalVar&lt;/span&gt;():\n    myVars = VariableVariablesManager()\n    myVars[&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;inside function myVars[&apos;test&apos;]:&quot;&lt;/span&gt;, myVars[&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;])\ntestLocalVar()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;outside function myVars[&apos;test&apos;]:&quot;&lt;/span&gt;, myVars[&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;])\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# define a global variable&lt;/span&gt;\nmyVars.defineGlobalVariable(&lt;span class=&quot;hljs-string&quot;&gt;&apos;globalVar&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testGlobalVar&lt;/span&gt;():\n    myVars = VariableVariablesManager()\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;inside function myVars[&apos;globalVar&apos;]:&quot;&lt;/span&gt;, myVars[&lt;span class=&quot;hljs-string&quot;&gt;&apos;globalVar&apos;&lt;/span&gt;])\n    myVars[&lt;span class=&quot;hljs-string&quot;&gt;&apos;globalVar&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;inside function myVars[&apos;globalVar&apos;] (having been changed):&quot;&lt;/span&gt;, myVars[&lt;span class=&quot;hljs-string&quot;&gt;&apos;globalVar&apos;&lt;/span&gt;])\ntestGlobalVar()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;outside function myVars[&apos;globalVar&apos;]:&quot;&lt;/span&gt;, myVars[&lt;span class=&quot;hljs-string&quot;&gt;&apos;globalVar&apos;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you wish to allow overwriting of variables with the same type only:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;myVars = VariableVariablesManager(enforceSameTypeOnOverride = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\nmyVars[&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;\nmyVars[&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cat&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# &amp;lt;- raises Exception (different type on overwriting)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Any set of variables can also be wrapped up in a class. \n&quot;Variable&quot; variables may be added to the class instance during runtime by directly accessing the built-in dictionary through __dict__ attribute. &lt;/p&gt;\n\n&lt;p&gt;The following code defines Variables class, which adds variables (in this case attributes) to its instance during the construction. Variable names are taken from a specified list (which, for example, could have been generated by program code):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# some list of variable names&lt;/span&gt;\nL = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Variables&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, L&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L:\n            self.__dict__[item] = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\n\nv = Variables(L)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(v.a, v.b, v.c)\n&lt;span class=&quot;hljs-comment&quot;&gt;#will produce 100 100 100&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It should be extremely risky...\nbut you can use exec():&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b=5&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt;(a)\nc = b*&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (c)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Result:\n10&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;strong&gt;setattr()&lt;/strong&gt; method sets the value of the specified attribute of the specified object.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Syntax goes like this &lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;, name, value)\nExample \n\n&lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(self,&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which is equivalent to &lt;code&gt;self.id = 123&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;As you might have observed, setattr() expects an object to be passed along with the value to generate/modify a new attribute.&lt;/p&gt;\n&lt;p&gt;We can use setattr() with a workaround to be able to use within modules. Here how &lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nx = &lt;span class=&quot;hljs-string&quot;&gt;&quot;pikachu&quot;&lt;/span&gt;\nvalue = &lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;\nthismodule = sys.modules[__name__]\n&lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(thismodule, x, value)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(pikachu)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;it&apos;s the maintainance and debugging aspects that cause the horror. Imagine trying to find out where variable &apos;foo&apos; changed when there&apos;s no place in your code where you actually change &apos;foo&apos;. Imagine further that it&apos;s someone else&apos;s code that you have to maintain... OK, you can go to your happy place now.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7552/glenn-jackman&quot; title=&quot;225,259 reputation&quot; class=&quot;comment-user&quot;&gt;glenn jackman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1212436_1373164&quot;&gt;&lt;span title=&quot;2009-09-03 14:28:55Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 3, 2009 at 14:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;A further pitfall that hasn&apos;t been mentioned so far is if such a dynamically-created variable has the same name as a variable used in your logic. You essentially open up your software as a hostage to the input it is given.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/146073/holdenweb&quot; title=&quot;28,332 reputation&quot; class=&quot;comment-user&quot;&gt;holdenweb&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment43554197_1373164&quot;&gt;&lt;span title=&quot;2014-12-19 10:50:29Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 19, 2014 at 10:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You can modify your global and local variables by accessing the underlying dictionaries for them; it&apos;s a horrible idea from a maintenance perspective ... but it can be done via &lt;b&gt;&lt;i&gt;globals().update()&lt;/i&gt;&lt;/b&gt; and &lt;b&gt;&lt;i&gt;locals().update()&lt;/i&gt;&lt;/b&gt; (or by saving the dict reference from either of those and using it like any other dictionary).  &lt;b&gt;NOT RECOMMENDED&lt;/b&gt; ... but you should know that it&apos;s possible.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/149076/jim-dennis&quot; title=&quot;16,444 reputation&quot; class=&quot;comment-user&quot;&gt;Jim Dennis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107490205_1373164&quot;&gt;&lt;span title=&quot;2020-03-19 09:13:59Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 19, 2020 at 9:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JimDennis actually, no it can&apos;t. Modifications to the dict returned by &lt;code&gt;locals&lt;/code&gt; &lt;b&gt;will not affect local namespaces in CPython&lt;/b&gt;. Which is another reason not to do it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5014455/juanpa-arrivillaga&quot; title=&quot;77,984 reputation&quot; class=&quot;comment-user&quot;&gt;juanpa.arrivillaga&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109448744_1373164&quot;&gt;&lt;span title=&quot;2020-05-18 22:27:27Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 18, 2020 at 22:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@juanpa.arrivillaga: I had tried testing this in an IPython shell, but did so at the top level (where locals() behaves like globsls()).  Redoing that test within a nested code (within the definition of a function) does show that I can&apos;t modify locals() from within that.  As you say, the help for locals (3.7.6) does warn: &lt;b&gt;&quot;NOTE: Whether or not updates to this dictionary will affect name lookups in the local scope and vice-versa is &lt;i&gt;implementation dependent&lt;/i&gt; and not covered by any backwards compatibility guarantees.&quot;&lt;/b&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/149076/jim-dennis&quot; title=&quot;16,444 reputation&quot; class=&quot;comment-user&quot;&gt;Jim Dennis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109570795_1373164&quot;&gt;&lt;span title=&quot;2020-05-22 08:22:01Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 22, 2020 at 8:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;b&gt;&lt;i&gt;locals().update({&apos;new_local_var&apos;:&apos;some local value&apos;})&lt;/i&gt;&lt;/b&gt; works just fine for me in Python 3.7.6; so I&apos;m not sure what you mean when you say you cannot assign values through it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/149076/jim-dennis&quot; title=&quot;16,444 reputation&quot; class=&quot;comment-user&quot;&gt;Jim Dennis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107489989_1373201&quot;&gt;&lt;span title=&quot;2020-03-19 09:04:55Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 19, 2020 at 9:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Given &lt;code&gt;x = &quot;foo&quot;&lt;/code&gt; and &lt;code&gt;locals()[&quot;x&quot;] = &quot;bar&quot;&lt;/code&gt; using &lt;code&gt;print x&lt;/code&gt; gives the output &lt;code&gt;bar&lt;/code&gt; for Jython 2.5.2. This was tested with an On Demand Automation Script in &lt;a href=&quot;https://stackoverflow.com/questions/tagged/maximo&quot;&gt;maximo&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5368626/preacher&quot; title=&quot;2,012 reputation&quot; class=&quot;comment-user&quot;&gt;Preacher&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107816343_1373201&quot;&gt;&lt;span title=&quot;2020-03-30 22:52:39Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 30, 2020 at 22:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The documentation of &lt;a href=&quot;https://docs.python.org/3/library/functions.html#locals&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt; specifically says: &quot;The contents of this dictionary should &lt;b&gt;not&lt;/b&gt; be modified.&quot; (emphasis mine)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/355230/martineau&quot; title=&quot;113,814 reputation&quot; class=&quot;comment-user&quot;&gt;martineau&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120374898_1373201&quot;&gt;&lt;span title=&quot;2021-06-23 21:14:16Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 23, 2021 at 21:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JimDennis`locals()`` provides a dictionary &lt;i&gt;created to represent&lt;/i&gt; local variables. Updating it does not guarantee to update the &lt;i&gt;actual&lt;/i&gt; local variables. In modern Python implementations it&apos;s more like a picture (showing the content) in a nice frame (a high-level &lt;code&gt;dict&lt;/code&gt;)  drawing on the picture won&apos;t actually change the real thing.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5349916/mistermiyagi&quot; title=&quot;37,666 reputation&quot; class=&quot;comment-user&quot;&gt;MisterMiyagi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment123583256_1373201&quot;&gt;&lt;span title=&quot;2021-11-10 11:16:34Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 10, 2021 at 11:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The reason it doesn&apos;t work, at least on CPython, is that CPython allocates a fixed size array for locals, and the size of said array is determined when the function is defined, not when its run, and can&apos;t be changed (access to true locals doesn&apos;t even use the name; the name is replaced with the index into the array at function compile time). &lt;code&gt;locals()&lt;/code&gt; returns a true &lt;code&gt;dict&lt;/code&gt;; within a function, that &lt;code&gt;dict&lt;/code&gt; is made by loading names and associated values in the array when you call &lt;code&gt;locals()&lt;/code&gt;, it won&apos;t see future changes. If it changes, you&apos;re at global or class scope (which use &lt;code&gt;dict&lt;/code&gt; scopes).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/364696/shadowranger&quot; title=&quot;127,504 reputation&quot; class=&quot;comment-user&quot;&gt;ShadowRanger&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124099678_1373201&quot;&gt;&lt;span title=&quot;2021-12-02 16:02:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2021 at 16:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Keep in mind &lt;code&gt;namedtuple&lt;/code&gt;s are immutable so they&apos;re a bit different than simply dicts with dot notation. Having said that, both options promote good design principles and don&apos;t abuse the global namespace like half the answers in this thread do.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6243352/ggorlen&quot; title=&quot;34,352 reputation&quot; class=&quot;comment-user&quot;&gt;ggorlen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113874390_37971967&quot;&gt;&lt;span title=&quot;2020-10-17 02:23:49Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 17, 2020 at 2:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This does not work with &lt;code&gt;__dict__&lt;/code&gt; variable however. I wonder if there is a general mechanism to create &lt;i&gt;any&lt;/i&gt; global variable dynamically.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/898649/alexey&quot; title=&quot;3,543 reputation&quot; class=&quot;comment-user&quot;&gt;Alexey&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84051166_46897025&quot;&gt;&lt;span title=&quot;2018-01-30 18:25:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 30, 2018 at 18:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;globals()&lt;/code&gt; can do this&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5823489/guillaume-lebreton&quot; title=&quot;2,129 reputation&quot; class=&quot;comment-user&quot;&gt;Guillaume Lebreton&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84068764_46897025&quot;&gt;&lt;span title=&quot;2018-01-31 07:42:21Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 31, 2018 at 7:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This won&apos;t work inside a function. It&apos;s essentially equivalent to the safer &lt;code&gt;locals()[&apos;b&apos;] = 5&lt;/code&gt; (which also won&apos;t work in a function).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5670773/benrg&quot; title=&quot;1,124 reputation&quot; class=&quot;comment-user&quot;&gt;benrg&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122682749_65963716&quot;&gt;&lt;span title=&quot;2021-10-01 18:24:32Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 1, 2021 at 18:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@benrg Do you know how to get around Rubens failed suggestion because I&apos;m stuck with the same situation? I have a file containing a long list of variable assignments as a collective string. I need to turn them into python assignments but eval() and exec() both fails.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15548230/bjonas88&quot; title=&quot;183 reputation&quot; class=&quot;comment-user&quot;&gt;BJonas88&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127047992_65963716&quot;&gt;&lt;span title=&quot;2022-04-16 20:23:57Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 16 at 20:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":45,"title":"How do I create variable variables?","content":"\n                \n&lt;p&gt;How do I create &lt;a href=&quot;http://us3.php.net/manual/en/language.variables.variable.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;variable variable names&lt;/em&gt;&lt;/a&gt; in Python?&lt;/p&gt;\n&lt;p&gt;I hear this is a bad idea in general though, and it is a security hole in PHP. Is that true?&lt;/p&gt;\n    ","slug":"how-do-i-create-variable-variables-1657384387679","postType":"QUESTION","createdAt":"2022-07-09T16:33:07.000Z","updatedAt":"2022-07-09T16:33:07.000Z","tags":[{"id":160,"name":"variable-variables","slug":"variable-variables","createdAt":"2022-07-09T16:33:07.000Z","updatedAt":"2022-07-09T16:33:07.000Z","Questions_Tags":{"questionId":45,"tagId":160}}]}]}},"__N_SSG":true}