{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;You can&apos;t (usefully) compare strings using &lt;code&gt;!=&lt;/code&gt; or &lt;code&gt;==&lt;/code&gt;, you need to use &lt;code&gt;strcmp&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check,input) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The reason for this is because &lt;code&gt;!=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; will only compare the base addresses of those strings. Not the contents of the strings themselves.&lt;/p&gt;\n    ","\n&lt;p&gt;Ok a few things: &lt;a href=&quot;https://stackoverflow.com/q/1694036/15168&quot;&gt;&lt;code&gt;gets&lt;/code&gt; is unsafe&lt;/a&gt; and should be replaced with &lt;code&gt;fgets(input, sizeof(input), stdin)&lt;/code&gt; so that you don&apos;t get a buffer overflow.&lt;/p&gt;\n\n&lt;p&gt;Next, to compare strings, you must use &lt;code&gt;strcmp&lt;/code&gt;, where a return value of 0 indicates that the two strings match. Using the equality operators (ie. &lt;code&gt;!=&lt;/code&gt;) compares the address of the two strings, as opposed to the individual &lt;code&gt;char&lt;/code&gt;s inside them.&lt;/p&gt;\n\n&lt;p&gt;And also note that, while in this example it won&apos;t cause a problem, &lt;code&gt;fgets&lt;/code&gt; stores the newline character, &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; in the buffers also; &lt;code&gt;gets()&lt;/code&gt; does not. If you compared the user input from &lt;code&gt;fgets()&lt;/code&gt; to a string literal such as &lt;code&gt;&quot;abc&quot;&lt;/code&gt; it would never match (unless the buffer was too small so that the &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; wouldn&apos;t fit in it).&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;http://www.tutorialspoint.com/c_standard_library/c_function_strcmp.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;strcmp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;This is in &lt;code&gt;string.h&lt;/code&gt; library, and is very popular. &lt;code&gt;strcmp&lt;/code&gt; return 0 if the strings are equal. See &lt;a href=&quot;https://stackoverflow.com/questions/34824838/what-does-strcmp-exactly-returns-in-c/34825545#34825545&quot;&gt;this&lt;/a&gt; for an better explanation of what &lt;code&gt;strcmp&lt;/code&gt; returns.&lt;/p&gt;\n\n&lt;p&gt;Basically, you have to do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check,input) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check,input))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check,input))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can check &lt;a href=&quot;http://www.programiz.com/c-programming/library-function/string.h/strcmp&quot; rel=&quot;noreferrer&quot;&gt;this&lt;/a&gt;, a tutorial on &lt;code&gt;strcmp&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You can&apos;t compare arrays directly like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;array1==array2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You should compare them char-by-char; for this you can use a function and return a boolean (True:1, False:0) value. Then you can use it in the test condition of the while loop.&lt;/p&gt;\n\n&lt;p&gt;Try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checker&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[],&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[])&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello!\\nPlease enter a word or character:\\n&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,input);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I will now repeat this until you type it back to me.\\n&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,check);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!checker(input,check))\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s\\n&quot;&lt;/span&gt;, input);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,check);\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Good bye!&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checker&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[],&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[])&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i,result=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; input[i]!=&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt; || check[i]!=&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(input[i] != check[i]) {\n            result=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Whenever you are trying to compare the strings, compare them with respect to each character. For this you can use built in string function called strcmp(input1,input2); and you should use the header file called &lt;code&gt;#include&amp;lt;string.h&amp;gt;&lt;/code&gt;  &lt;/p&gt;\n\n&lt;p&gt;Try this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt; &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt; &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;  &lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; \n{ \n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; s[]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;STACKOVERFLOW&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; s1[&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter the string to be checked\\n&quot;&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//enter the input string&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,s1);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(s,s1)==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;//compare both the strings  &lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Both the Strings match\\n&quot;&lt;/span&gt;); \n    } \n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Entered String does not match\\n&quot;&lt;/span&gt;);  \n    } \n    system(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pause&quot;&lt;/span&gt;);  \n} \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Welcome to the concept of the &lt;em&gt;pointer.&lt;/em&gt; Generations of beginning programmers have found the concept elusive, but if you wish to grow into a competent programmer, you must eventually master this concept  and moreover, you are already asking the right question. That&apos;s good.&lt;/p&gt;\n\n&lt;p&gt;Is it clear to you what an address is? See this diagram:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;----------     ----------\n| &lt;span class=&quot;hljs-number&quot;&gt;0x4000&lt;/span&gt; |     | &lt;span class=&quot;hljs-number&quot;&gt;0x4004&lt;/span&gt; |\n|    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |     |    &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   |\n----------     ----------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the diagram, the integer 1 is stored in memory at &lt;em&gt;address&lt;/em&gt; 0x4000. Why at an address? Because memory is large and can store many integers, just as a city is large and can house many families. Each integer is stored at a memory location, as each family resides in a house. Each memory location is identified by an &lt;em&gt;address&lt;/em&gt;, as each house is identified by an address.&lt;/p&gt;\n\n&lt;p&gt;The two boxes in the diagram represent two distinct memory locations. You can think of them as if they were houses. The integer 1 resides in the memory location at address 0x4000 (think, &quot;4000 Elm St.&quot;). The integer 7 resides in the memory location at address 0x4004 (think, &quot;4004 Elm St.&quot;).&lt;/p&gt;\n\n&lt;p&gt;You thought that your program was comparing the 1 to the 7, but it wasn&apos;t. It was comparing the 0x4000 to the 0x4004. So what happens when you have this situation?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;----------     ----------\n| &lt;span class=&quot;hljs-number&quot;&gt;0x4000&lt;/span&gt; |     | &lt;span class=&quot;hljs-number&quot;&gt;0x4004&lt;/span&gt; |\n|    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |     |    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |\n----------     ----------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The two integers are the same but the addresses differ. Your program compares the addresses.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;How do I properly compare strings?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(input, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// input assigned somehow&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(check, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// check assigned somehow&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// insufficient&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (check != input)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// good&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;// or &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Let us dig deeper to see &lt;strong&gt;why &lt;code&gt;check != input&lt;/code&gt; is not sufficient&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;In C, &lt;em&gt;string&lt;/em&gt; is a standard library specification.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A &lt;em&gt;string&lt;/em&gt; is a contiguous sequence of characters terminated by and including the first null character.&lt;br&gt;\n  C11 §7.1.1 1&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;code&gt;input&lt;/code&gt; above is not a &lt;em&gt;string&lt;/em&gt;.  &lt;code&gt;input&lt;/code&gt; is &lt;a href=&quot;https://cdecl.org/?q=char+input%5B40%5D&quot; rel=&quot;nofollow noreferrer&quot;&gt;array 40 of char&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The contents of &lt;code&gt;input&lt;/code&gt; can become a &lt;em&gt;string&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;In most cases, when an array is used in an expression, it is converted to the address of its 1st element.  &lt;/p&gt;\n\n&lt;p&gt;The below converts &lt;code&gt;check&lt;/code&gt; and &lt;code&gt;input&lt;/code&gt; to their respective addresses of the first element, then those addresses are compared.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;check != input   &lt;span class=&quot;hljs-comment&quot;&gt;// Compare addresses, not the contents of what addresses reference&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To compare &lt;em&gt;strings&lt;/em&gt;, we need to use those addresses and then look at the data they point to.&lt;br&gt;\n&lt;strong&gt;&lt;code&gt;strcmp()&lt;/code&gt; does the job&lt;/strong&gt;.  §7.23.4.2&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;int strcmp(const char *s1, const char *s2);&lt;/code&gt;&lt;/p&gt;\n  \n  &lt;p&gt;The &lt;code&gt;strcmp&lt;/code&gt; function compares the string pointed to by &lt;code&gt;s1&lt;/code&gt; to the string pointed to by &lt;code&gt;s2&lt;/code&gt;.&lt;/p&gt;\n  \n  &lt;p&gt;The &lt;code&gt;strcmp&lt;/code&gt; function returns an integer greater than, equal to, or less than zero,\n  accordingly as the string pointed to by &lt;code&gt;s1&lt;/code&gt; is greater than, equal to, or less than the string pointed to by &lt;code&gt;s2&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Not only can code find if the strings are of the same data, but which one is greater/less when they differ.  &lt;/p&gt;\n\n&lt;p&gt;The below is true when the string differ.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;For insight, see &lt;a href=&quot;https://stackoverflow.com/a/54136499/2410359&quot;&gt;Creating my own &lt;code&gt;strcmp()&lt;/code&gt; function&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You need to use &lt;code&gt;strcmp()&lt;/code&gt; and you need to &lt;code&gt;#include &amp;lt;string.h&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;!=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; operators only compare the base addresses of those strings. Not the contents of the strings&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example code:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;end\\n&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//dont forget to check for \\n&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( &lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input) ) &lt;span class=&quot;hljs-comment&quot;&gt;//strcmp returns 0 if equal&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter a name: \\n&quot;&lt;/span&gt;);\n        fgets(input, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(input), &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My name is: %s\\n&quot;&lt;/span&gt;, input);\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Good bye!&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note1: &lt;code&gt;gets()&lt;/code&gt; is unsafe. Use &lt;code&gt;fgets()&lt;/code&gt; instead&lt;/p&gt;\n&lt;p&gt;Note2: When using &lt;code&gt;fgets()&lt;/code&gt; you need to check for &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; new line charecter too&lt;/p&gt;\n    ","\n&lt;p&gt;You can:&lt;/p&gt;\n&lt;p&gt;Use &lt;code&gt;strcmp()&lt;/code&gt; from &lt;code&gt;string.h&lt;/code&gt;, which is the easier version&lt;/p&gt;\n&lt;p&gt;Or if you want to roll your own, you can use something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *s1, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *s2)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(s1[i] != &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt; &amp;amp;&amp;amp; s2[i] != &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(s1[i] != s2[i])\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n        i++;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I&apos;d use &lt;code&gt;strcmp()&lt;/code&gt; in a way like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input))\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// code here&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; s1[&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;],s2[&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;];\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter the character of strings: &quot;&lt;/span&gt;);\n        gets(s1);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nEnter different character of string to repeat: \\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(s1,s2))\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s\\n&quot;&lt;/span&gt;,s1);\n            gets(s2);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is very simple solution in which you will get your output as you want.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;gets( )&lt;/code&gt; was removed from the standard. Use &lt;code&gt;fgets( )&lt;/code&gt; instead.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2469027/edward-karak&quot; title=&quot;10,708 reputation&quot; class=&quot;comment-user&quot;&gt;Edward Karak&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment44777679_8004237&quot;&gt;&lt;span title=&quot;2015-01-29 02:31:38Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 29, 2015 at 2:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that this &lt;a href=&quot;http://stackoverflow.com/a/595673/15168&quot;&gt;answer&lt;/a&gt; to &lt;a href=&quot;http://stackoverflow.com/questions/595450/why-does-strcmp-return-0-when-its-inputs-are-equal&quot;&gt;Why does &lt;code&gt;strcmp()&lt;/code&gt; return zero when its inputs are equal&lt;/a&gt; explains how to compare strings for equality, inequality, less than, greater than, less than or equal, and greater than or equal.  Not all string comparisons are for equality.  Case sensitive comparisons are different again; other special comparisons (dictionary order, for example) require more specialized comparators, and there are regexes for still more complex comparisons.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15168/jonathan-leffler&quot; title=&quot;700,786 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Leffler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment68732119_8004237&quot;&gt;&lt;span title=&quot;2016-11-22 22:44:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 22, 2016 at 22:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note too that there is an essentially duplicate question &lt;a href=&quot;https://stackoverflow.com/questions/1598425/how-do-i-check-if-a-value-matches-a-string/&quot;&gt;How do I check if a value matches a string&lt;/a&gt; that was asked years before this.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15168/jonathan-leffler&quot; title=&quot;700,786 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Leffler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment71470284_8004237&quot;&gt;&lt;span title=&quot;2017-02-10 05:24:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 10, 2017 at 5:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Does this answer your question? &lt;a href=&quot;https://stackoverflow.com/questions/1598425/how-do-i-check-if-a-value-matches-a-string&quot;&gt;How do I check if a value matches a string&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4502035/andreas&quot; title=&quot;2,365 reputation&quot; class=&quot;comment-user&quot;&gt;Andreas&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105670368_8004237&quot;&gt;&lt;span title=&quot;2020-01-16 03:37:35Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 16, 2020 at 3:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This question is good, but the use of &lt;code&gt;gets()&lt;/code&gt; is a no-go. It has also been removed from the standard since C11 -&amp;gt; Please read &lt;a href=&quot;https://stackoverflow.com/questions/1694036/why-is-the-gets-function-so-dangerous-that-it-should-not-be-used&quot;&gt;Why is the gets function so dangerous that it should not be used?&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12139179/roberts-supports-monica-cellio&quot; title=&quot;13,801 reputation&quot; class=&quot;comment-user&quot;&gt;RobertS supports Monica Cellio&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109833834_8004237&quot;&gt;&lt;span title=&quot;2020-05-30 09:50:42Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 30, 2020 at 9:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;the same in java,which may just compare with the address.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3127387/telerik&quot; title=&quot;167 reputation&quot; class=&quot;comment-user&quot;&gt;Telerik&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment40174764_8004250&quot;&gt;&lt;span title=&quot;2014-09-06 16:29:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 6, 2014 at 16:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Writing &lt;code&gt;while (strcmp(check, input))&lt;/code&gt; is sufficient and is considered good practice.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2243767/shravan&quot; title=&quot;2,667 reputation&quot; class=&quot;comment-user&quot;&gt;Shravan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50218573_8004250&quot;&gt;&lt;span title=&quot;2015-06-28 15:53:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2015 at 15:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;know more...&lt;a href=&quot;http://codificare.in/codes/c/c-program-example-to-calculate-string-length/&quot; rel=&quot;nofollow noreferrer&quot;&gt;codificare.in/codes/c/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5561801/chanu-panwar&quot; title=&quot;986 reputation&quot; class=&quot;comment-user&quot;&gt;chanu panwar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63494764_8004250&quot;&gt;&lt;span title=&quot;2016-06-25 09:55:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 25, 2016 at 9:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is safer to use strncmp! Don&apos;t want a buffer overflow!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4808528/floam&quot; title=&quot;674 reputation&quot; class=&quot;comment-user&quot;&gt;Floam&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment81408721_8004250&quot;&gt;&lt;span title=&quot;2017-11-10 18:36:03Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 10, 2017 at 18:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@craigB Sorry to burst your bubble, but &lt;code&gt;strcmp()&lt;/code&gt; says &lt;code&gt;&quot;abcde&quot;&lt;/code&gt; is bigger than &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, not equal to it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3204551/deduplicator&quot; title=&quot;43,371 reputation&quot; class=&quot;comment-user&quot;&gt;Deduplicator&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment112906282_8004250&quot;&gt;&lt;span title=&quot;2020-09-11 14:22:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 11, 2020 at 14:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Can you please clarify the relationship/problem of &quot;\\n&quot; and string literal? I am getting not equal result in comparing of strings (line) of a file with other whole file.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4843379/incompetent&quot; title=&quot;1,635 reputation&quot; class=&quot;comment-user&quot;&gt;incompetent&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment100684029_8004271&quot;&gt;&lt;span title=&quot;2019-07-17 16:32:15Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 17, 2019 at 16:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@incompetent  if you read a line from a file with &lt;code&gt;fgets()&lt;/code&gt;, then the string might be &lt;code&gt;&quot;abc\\n&quot;&lt;/code&gt; because &lt;code&gt;fgets()&lt;/code&gt; keeps the newline.  If you compare that with &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, you will get &apos;not equal&apos; because of the difference between a null byte terminating &lt;code&gt;&quot;abc&quot;&lt;/code&gt; and the newline in the read data.  So, you have to zap the newline. The reliable one-line way to do that is &lt;code&gt;buffer[strcspn(buffer, &quot;\\n&quot;)] = &apos;\\0&apos;;&lt;/code&gt; which has the merit of working correctly regardless of whether there is any data in the buffer, or whether that data ends with a newline or not. Other ways of zapping the newline easily crash.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15168/jonathan-leffler&quot; title=&quot;700,786 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Leffler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105670388_8004271&quot;&gt;&lt;span title=&quot;2020-01-16 03:39:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 16, 2020 at 3:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer addresses the issues of the code accurately, while the most upvoted and accepted answer covers only to answer the question´s title. Especially to mention the last paragraph is super. +1&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12139179/roberts-supports-monica-cellio&quot; title=&quot;13,801 reputation&quot; class=&quot;comment-user&quot;&gt;RobertS supports Monica Cellio&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109833797_8004271&quot;&gt;&lt;span title=&quot;2020-05-30 09:49:05Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 30, 2020 at 9:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Could you please add more details about your solution?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4579155/abarisone&quot; title=&quot;3,619 reputation&quot; class=&quot;comment-user&quot;&gt;abarisone&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment47099623_29468820&quot;&gt;&lt;span title=&quot;2015-04-06 09:48:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 6, 2015 at 9:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;yes this is replacement for strcmp function and solition without using string.h header @Jongware&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3800682/mugetsu&quot; title=&quot;168 reputation&quot; class=&quot;comment-user&quot;&gt;mugetsu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment47099969_29468820&quot;&gt;&lt;span title=&quot;2015-04-06 10:02:21Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 6, 2015 at 10:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This does not work. When &lt;code&gt;checker&lt;/code&gt; finds &lt;code&gt;&apos;\\0&apos;&lt;/code&gt; in one of the strings, it does not check the another string for &lt;code&gt;&apos;\\0&apos;&lt;/code&gt;. The function returns &lt;code&gt;1&lt;/code&gt; (&quot;equal&quot;) even if one string is only prefix of the other one (for example, &lt;code&gt;&quot;foo&quot;&lt;/code&gt; and &lt;code&gt;&quot;foobar&quot;&lt;/code&gt;).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3490702/lukasrozs&quot; title=&quot;123 reputation&quot; class=&quot;comment-user&quot;&gt;lukasrozs&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment80167407_29468820&quot;&gt;&lt;span title=&quot;2017-10-06 14:16:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 6, 2017 at 14:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I would use &lt;code&gt;||&lt;/code&gt; instead of &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3490702/lukasrozs&quot; title=&quot;123 reputation&quot; class=&quot;comment-user&quot;&gt;lukasrozs&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment80167920_29468820&quot;&gt;&lt;span title=&quot;2017-10-06 14:28:51Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 6, 2017 at 14:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You probably meant to put a &lt;code&gt;return 0;&lt;/code&gt; at the end of the strcmp function&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1390536/harrison&quot; title=&quot;830 reputation&quot; class=&quot;comment-user&quot;&gt;Harrison&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120968470_68431256&quot;&gt;&lt;span title=&quot;2021-07-19 22:50:20Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 19, 2021 at 22:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s not needed, but yeah, it&apos;s a good practice&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12613647/anic17&quot; title=&quot;675 reputation&quot; class=&quot;comment-user&quot;&gt;Anic17&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120985595_68431256&quot;&gt;&lt;span title=&quot;2021-07-20 15:19:59Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 20, 2021 at 15:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;gets();&lt;/code&gt; not part of standard C since C11.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95094458_49444425&quot;&gt;&lt;span title=&quot;2019-01-10 15:11:56Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 10, 2019 at 15:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;strcmp(s1,s2)&lt;/code&gt; is UB as &lt;code&gt;s2&lt;/code&gt; contents are not specified at first.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95094502_49444425&quot;&gt;&lt;span title=&quot;2019-01-10 15:12:53Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 10, 2019 at 15:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It would be great if you could also provide the output of this snippet, in some form or another.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1147688/not2qubit&quot; title=&quot;12,170 reputation&quot; class=&quot;comment-user&quot;&gt;not2qubit&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment100477191_49444425&quot;&gt;&lt;span title=&quot;2019-07-10 12:05:32Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 10, 2019 at 12:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":269,"title":"How do I properly compare strings in C?","content":"\n                \n&lt;p&gt;I am trying to get a program to let a user enter a word or character, store it, and then print it until the user types it again, exiting the program. My code looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello!\\nPlease enter a word or character:\\n&quot;&lt;/span&gt;);\n    gets(input);   &lt;span class=&quot;hljs-comment&quot;&gt;/* obsolete function: do not use!! */&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I will now repeat this until you type it back to me.\\n&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (check != input)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s\\n&quot;&lt;/span&gt;, input);\n        gets(check);   &lt;span class=&quot;hljs-comment&quot;&gt;/* obsolete function: do not use!! */&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Good bye!&quot;&lt;/span&gt;);\n    \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The problem is that I keep getting the printing of the input string, even when the input by the user (check) matches the original (input). Am I comparing the two incorrectly?&lt;/p&gt;\n    ","slug":"how-do-i-properly-compare-strings-in-c-1657387467202","postType":"QUESTION","createdAt":"2022-07-09T17:24:27.000Z","updatedAt":"2022-07-09T17:24:27.000Z","tags":[{"id":1694,"name":"strcmp","slug":"strcmp","createdAt":"2022-07-09T17:24:27.000Z","updatedAt":"2022-07-09T17:24:27.000Z","Questions_Tags":{"questionId":269,"tagId":1694}}]}]}},"__N_SSG":true}