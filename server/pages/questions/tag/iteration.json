{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;You can use a list comprehension to create a new list containing only the elements you don&apos;t want to remove:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelist = [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; determine(x)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or, by assigning to the slice &lt;code&gt;somelist[:]&lt;/code&gt;, you can mutate the existing list to contain only the items you want:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelist[:] = [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; determine(x)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This approach could be useful if there are other references to &lt;code&gt;somelist&lt;/code&gt; that need to reflect the changes.&lt;/p&gt;\n&lt;p&gt;Instead of a comprehension, you could also use &lt;code&gt;itertools&lt;/code&gt;. In Python 2:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ifilterfalse\nsomelist[:] = ifilterfalse(determine, somelist)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or in Python 3:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; filterfalse\nsomelist[:] = filterfalse(determine, somelist)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The answers suggesting list comprehensions are ALMOST correct -- except that they build a completely new list and then give it the same name the old list as, they do NOT modify the old list in place. That&apos;s different from what you&apos;d be doing by selective removal, as in &lt;a href=&quot;https://stackoverflow.com/a/1207427/3064538&quot;&gt;@Lennart&apos;s suggestion&lt;/a&gt; -- it&apos;s faster, but if your list is accessed via multiple references the fact that you&apos;re just reseating one of the references and NOT altering the list object itself can lead to subtle, disastrous bugs.&lt;/p&gt;\n\n&lt;p&gt;Fortunately, it&apos;s extremely easy to get both the speed of list comprehensions AND the required semantics of in-place alteration -- just code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelist[:] = [tup &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(tup)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note the subtle difference with other answers: this one is NOT assigning to a barename - it&apos;s assigning to a list slice that just happens to be the entire list, thereby replacing the list &lt;em&gt;contents&lt;/em&gt; &lt;strong&gt;within the same Python list object&lt;/strong&gt;, rather than just reseating one reference (from previous list object to new list object) like the other answers.&lt;/p&gt;\n    ","\n&lt;p&gt;You need to take a copy of the list and iterate over it first, or the iteration will fail with what may be unexpected results.&lt;/p&gt;\n\n&lt;p&gt;For example (depends on what type of list):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist[:]:\n    etc....\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;An example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;somelist = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    somelist.remove(x)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;somelist\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;somelist = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist[:]:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    somelist.remove(x)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;somelist\n[]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(somelist) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; some_condition(somelist, i):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; somelist[i]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You need to go backwards otherwise it&apos;s a bit like sawing off the tree-branch that you are sitting on :-)&lt;/p&gt;\n\n&lt;p&gt;Python 2 users: replace &lt;code&gt;range&lt;/code&gt; by &lt;code&gt;xrange&lt;/code&gt; to avoid creating a hardcoded list&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Overview of workarounds&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Either:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;use a linked list implementation/roll your own.&lt;/p&gt;\n&lt;p&gt;A linked list is the proper data structure to support efficient item removal, and does not force you to make space/time tradeoffs.&lt;/p&gt;\n&lt;p&gt;A CPython &lt;code&gt;list&lt;/code&gt; is implemented with &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_array&quot; rel=&quot;noreferrer&quot;&gt;dynamic arrays&lt;/a&gt; as &lt;a href=&quot;https://stackoverflow.com/questions/3917574/how-is-pythons-list-implemented&quot;&gt;mentioned here&lt;/a&gt;, which is not a good data type to support removals.&lt;/p&gt;\n&lt;p&gt;There doesn&apos;t seem to be a linked list in the standard library however:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/19752134/is-there-a-linked-list-predefined-library-in-python&quot;&gt;Is there a linked list predefined library in Python?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/ajakubek/python-llist&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/ajakubek/python-llist&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;start a new &lt;code&gt;list()&lt;/code&gt; from scratch, and &lt;code&gt;.append()&lt;/code&gt; back at the end as mentioned at: &lt;a href=&quot;https://stackoverflow.com/a/1207460/895245&quot;&gt;https://stackoverflow.com/a/1207460/895245&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This time efficient, but less space efficient because it keeps an extra copy of the array around during iteration.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;use &lt;code&gt;del&lt;/code&gt; with an index as mentioned at: &lt;a href=&quot;https://stackoverflow.com/a/1207485/895245&quot;&gt;https://stackoverflow.com/a/1207485/895245&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This is more space efficient since it dispenses the array copy, but it is less time efficient, because removal from dynamic arrays requires shifting all following items back by one, which is O(N).&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Generally, if you are doing it quick and dirty and don&apos;t want to add a custom &lt;code&gt;LinkedList&lt;/code&gt; class, you just want to go for the faster &lt;code&gt;.append()&lt;/code&gt; option by default unless memory is a big concern.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Official Python 2 tutorial 4.2. &quot;for Statements&quot;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/tutorial/controlflow.html#for-statements&quot; rel=&quot;noreferrer&quot;&gt;https://docs.python.org/2/tutorial/controlflow.html#for-statements&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This part of the docs makes it clear that:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;you need to make a copy of the iterated list to modify it&lt;/li&gt;\n&lt;li&gt;one way to do it is with the slice notation &lt;code&gt;[:]&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;blockquote&gt;\n&lt;p&gt;If you need to modify the sequence you are iterating over while inside the loop (for example to duplicate selected items), it is recommended that you first make a copy. Iterating over a sequence does not implicitly make a copy. The slice notation makes this especially convenient:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;words = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;window&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;defenestrate&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; w &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; words[:]:  &lt;span class=&quot;hljs-comment&quot;&gt;# Loop over a slice copy of the entire list.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(w) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        words.insert(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, w)\n...\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;words\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;defenestrate&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;window&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;defenestrate&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Python 2 documentation 7.3. &quot;The for statement&quot;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/reference/compound_stmts.html#for&quot; rel=&quot;noreferrer&quot;&gt;https://docs.python.org/2/reference/compound_stmts.html#for&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This part of the docs says once again that you have to make a copy, and gives an actual removal example:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Note: There is a subtlety when the sequence is being modified by the loop (this can only occur for mutable sequences, i.e. lists). An internal counter is used to keep track of which item is used next, and this is incremented on each iteration. When this counter has reached the length of the sequence the loop terminates. This means that if the suite deletes the current (or a previous) item from the sequence, the next item will be skipped (since it gets the index of the current item which has already been treated). Likewise, if the suite inserts an item in the sequence before the current item, the current item will be treated again the next time through the loop. This can lead to nasty bugs that can be avoided by making a temporary copy using a slice of the whole sequence, e.g.,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a[:]:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: a.remove(x)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, I disagree with this implementation, since &lt;code&gt;.remove()&lt;/code&gt; has to iterate the &lt;em&gt;entire list&lt;/em&gt; to find the value.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Could Python do this better?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;It seems like this particular Python API could be improved. Compare it, for instance, with:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Java &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/ListIterator.html&quot; rel=&quot;noreferrer&quot;&gt;ListIterator::remove&lt;/a&gt; which documents &quot;This call can only be made once per call to next or previous&quot;&lt;/li&gt;\n&lt;li&gt;C++ &lt;a href=&quot;https://en.cppreference.com/w/cpp/container/vector/erase&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::vector::erase&lt;/code&gt;&lt;/a&gt; which returns a valid interator to the element after the one removed&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;both of which make it crystal clear that you cannot modify a list being iterated except with the iterator itself, and gives you efficient ways to do so without copying the list.&lt;/p&gt;\n&lt;p&gt;Perhaps the underlying rationale is that Python lists are assumed to be dynamic array backed, and therefore any type of removal will be time inefficient anyways, while Java has a nicer interface hierarchy with both &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ArrayList&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt; implementations of &lt;code&gt;ListIterator&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;There doesn&apos;t seem to be an explicit linked list type in the Python stdlib either: &lt;a href=&quot;https://stackoverflow.com/questions/280243/python-linked-list/280286&quot;&gt;Python Linked List&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Your best approach for such an example would be a &lt;a href=&quot;http://docs.python.org/tutorial/datastructures.html#list-comprehensions&quot; rel=&quot;noreferrer&quot;&gt;list comprehension&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelist = [tup &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(tup)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In cases where you&apos;re doing something more complex than calling a &lt;code&gt;determine&lt;/code&gt; function, I prefer constructing a new list and simply appending to it as I go.  For example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;newlist = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# lots of code here, possibly setting things up for calling determine&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(tup):\n        newlist.append(tup)\nsomelist = newlist\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Copying the list using &lt;code&gt;remove&lt;/code&gt; might make your code look a little cleaner, as described in one of the answers below.  You should definitely not do this for extremely large lists, since this involves first copying the entire list, and also performing an &lt;code&gt;O(n)&lt;/code&gt; &lt;code&gt;remove&lt;/code&gt; operation for each element being removed, making this an &lt;code&gt;O(n^2)&lt;/code&gt; algorithm.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist[:]:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# lots of code here, possibly setting things up for calling determine&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(tup):\n        newlist.append(tup)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For those that like functional programming:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelist[:] = &lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; tup: &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; determine(tup), somelist)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ifilterfalse\nsomelist[:] = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(ifilterfalse(determine, somelist))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I needed to do this with a huge list, and duplicating the list seemed expensive, especially since in my case the number of deletions would be few compared to the items that remain. I took this low-level approach.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;array = [lots of stuff]\narraySize = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array)\ni = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; i &amp;lt; arraySize:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; someTest(array[i]):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; array[i]\n        arraySize -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What I don&apos;t know is how efficient a couple of deletes are compared to copying a large list. Please comment if you have any insight.&lt;/p&gt;\n    ","\n&lt;p&gt;Most of the answers here want you to create a copy of the list. I had a use case where the list was quite long (110K items) and it was smarter to keep reducing the list instead.&lt;/p&gt;\n\n&lt;p&gt;First of all you&apos;ll need to &lt;strong&gt;replace foreach loop with while loop&lt;/strong&gt;,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(somelist):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(somelist[i]):\n         &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; somelist[i]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The value of &lt;code&gt;i&lt;/code&gt; is not changed in the if block because you&apos;ll want to get value of the new item FROM THE SAME INDEX, once the old item is deleted.&lt;/p&gt;\n    ","\n&lt;p&gt;It might be smart to also just create a new list if the current list item meets the desired criteria. &lt;/p&gt;\n\n&lt;p&gt;so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; originalList:\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (item != badValue):\n        newList.append(item)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and to avoid having to re-code the entire project with the new lists name:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;originalList[:] = newList\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;note, from Python documentation: &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;copy.copy(x) \n  Return a shallow copy of x.&lt;/p&gt;\n  \n  &lt;p&gt;copy.deepcopy(x) \n  Return a deep copy of x.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;This answer was originally written in response to a question which has since been marked as duplicate:\n&lt;a href=&quot;https://stackoverflow.com/questions/40175149/removing-coordinates-from-list-on-python&quot;&gt;Removing coordinates from list on python&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;There are two problems in your code:&lt;/p&gt;\n\n&lt;p&gt;1) When using remove(), you attempt to remove integers whereas you need to remove a tuple.&lt;/p&gt;\n\n&lt;p&gt;2) The for loop will skip items in your list.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s run through what happens when we execute your code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L1 = [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (a,b) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L1:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; b &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    L1.remove(a,b)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nTypeError: remove() takes exactly one argument (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; given)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The first problem is that you are passing both &apos;a&apos; and &apos;b&apos; to remove(), but remove() only accepts a single argument. So how can we get remove() to work properly with your list? We need to figure out what each element of your list is. In this case, each one is a tuple. To see this, let&apos;s access one element of the list (indexing starts at 0):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L1[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(L1[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;tuple&apos;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Aha! Each element of L1 is actually a tuple. So that&apos;s what we need to be passing to remove(). Tuples in python are very easy, they&apos;re simply made by enclosing values in parentheses. &quot;a, b&quot; is not a tuple, but &quot;(a, b)&quot; is a tuple. So we modify your code and run it again:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# The remove line now includes an extra &quot;()&quot; to make a tuple out of &quot;a,b&quot;&lt;/span&gt;\nL1.remove((a,b))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This code runs without any error, but let&apos;s look at the list it outputs: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;L1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; now: [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Why is (1,-2) still in your list? It turns out modifying the list while using a loop to iterate over it is a very bad idea without special care. The reason that (1, -2) remains in the list is that the locations of each item within the list changed between iterations of the for loop. Let&apos;s look at what happens if we feed the above code a longer list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;L1 = [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;span class=&quot;hljs-comment&quot;&gt;### Outputs:&lt;/span&gt;\nL1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; now: [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can infer from that result, every time that the conditional statement evaluates to true and a list item is removed, the next iteration of the loop will skip evaluation of the next item in the list because its values are now located at different indices.&lt;/p&gt;\n\n&lt;p&gt;The most intuitive solution is to copy the list, then iterate over the original list and only modify the copy. You can try doing so like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;L2 = L1\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (a,b) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L1:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; b &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; :\n        L2.remove((a,b))\n&lt;span class=&quot;hljs-comment&quot;&gt;# Now, remove the original copy of L1 and replace with L2&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; L2 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; L1\n&lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; L1\nL1 = L2; &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; L2\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;L1 is now: &quot;&lt;/span&gt;, L1)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, the output will be identical to before:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;L1 is now: &apos;&lt;/span&gt;, [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is because when we created L2, python did not actually create a new object. Instead, it merely referenced L2 to the same object as L1. We can verify this with &apos;is&apos; which is different from merely &quot;equals&quot; (==).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L2=L1\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; L2\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can make a true copy using copy.copy(). Then everything works as expected:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\nL1 = [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\nL2 = copy.copy(L1)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (a,b) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L1:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; b &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; :\n        L2.remove((a,b))\n&lt;span class=&quot;hljs-comment&quot;&gt;# Now, remove the original copy of L1 and replace with L2&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; L1\nL1 = L2; &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; L2\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; now: [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Finally, there is one cleaner solution than having to make an entirely new copy of L1. The reversed() function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;L1 = [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),(-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (a,b) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;reversed&lt;/span&gt;(L1):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; b &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; :\n        L1.remove((a,b))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;L1 is now: &quot;&lt;/span&gt;, L1)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; now: [(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Unfortunately, I cannot adequately describe how reversed() works. It returns a &apos;listreverseiterator&apos; object when a list is passed to it. For practical purposes, you can think of it as creating a reversed copy of its argument. This is the solution I recommend.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to delete elements from a list while iterating, use a while-loop so you can alter the current index and end index after each deletion.&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nlength = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(list1)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; i &amp;lt; length:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; condition:\n        list1.remove(list1[i])\n        i -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        length -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to do anything else during the iteration, it may be nice to get both the index (which guarantees you being able to reference it, for example if you have a list of dicts) and the actual list item contents.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;inlist = [{&lt;span class=&quot;hljs-string&quot;&gt;&apos;field1&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;field2&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;field1&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;field2&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;}]    \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; idx, i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(inlist):\n    do some stuff &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; i[&lt;span class=&quot;hljs-string&quot;&gt;&apos;field1&apos;&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; somecondition:\n        xlist.append(idx)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;reversed&lt;/span&gt;(xlist): &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; inlist[i]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;enumerate&lt;/code&gt; gives you access to the item and the index at once. &lt;code&gt;reversed&lt;/code&gt; is so that the indices that you&apos;re going to later delete don&apos;t change on you. &lt;/p&gt;\n    ","\n&lt;p&gt;One possible solution, useful if you want not only remove some things, but also do something with all elements in a single loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;alist = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;good&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bad&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;good&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bad&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;good&apos;&lt;/span&gt;]\ni = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; alist[:]:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;bad&apos;&lt;/span&gt;:\n        alist.pop(i)\n        i -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# do something cool with x or just print x&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x)\n    i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;for loop will be iterate through index..&lt;/p&gt;\n\n&lt;p&gt;consider you have a list,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you have using list variable called &lt;code&gt;lis&lt;/code&gt;. and you using same to remove..&lt;/p&gt;\n\n&lt;p&gt;your variable &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lis = [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;]\n       &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;during 5th iteration,&lt;/p&gt;\n\n&lt;p&gt;your &lt;strong&gt;number 35&lt;/strong&gt; was not a prime so you removed it from a list.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lis.remove(y)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then &lt;strong&gt;next value (65)&lt;/strong&gt; move on to previous index.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lis = [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;]\n       &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;so 4th iteration done pointer moved onto 5th.. &lt;/p&gt;\n\n&lt;p&gt;thats why your loop doesnt cover 65 since its moved into previous index.&lt;/p&gt;\n\n&lt;p&gt;so you shouldn&apos;t reference list into another variable which still reference original instead of copy.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;ite = lis &lt;span class=&quot;hljs-comment&quot;&gt;#dont do it will reference instead copy&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;so do copy of list using &lt;code&gt;list[::]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;now you it will give,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Problem is you removed a value from a list during iteration then your list index will collapse.&lt;/p&gt;\n\n&lt;p&gt;so you can try comprehension instead.&lt;/p&gt;\n\n&lt;p&gt;which supports all the iterable like, list, tuple, dict, string etc &lt;/p&gt;\n    ","\n&lt;p&gt;The other answers are correct that it is usually a bad idea to delete from a list that you&apos;re iterating. Reverse iterating avoids some of the pitfalls, but it is much more difficult to follow code that does that, so usually you&apos;re better off using a list comprehension or &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;There is, however, one case where it is safe to remove elements from a sequence that you are iterating: if you&apos;re only removing one item while you&apos;re iterating. This can be ensured using a &lt;code&gt;return&lt;/code&gt; or a &lt;code&gt;break&lt;/code&gt;. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(lst):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; item % &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        foo(item)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; lst[i]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is often easier to understand than a list comprehension when you&apos;re doing some operations with side effects on the first item in a list that meets some condition and then removing that item from the list immediately after.&lt;/p&gt;\n    ","\n&lt;p&gt;You can try for-looping in reverse so for some_list you&apos;ll do something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;list_len = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(some_list)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(list_len):\n    reverse_i = list_len - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - i\n    cur = some_list[reverse_i]\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# some logic with cur element&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; some_condition:\n        some_list.pop(reverse_i)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way the index is aligned and doesn&apos;t suffer from the list updates (regardless whether you pop cur element or not).&lt;/p&gt;\n    ","\n&lt;p&gt;You might want to use &lt;code&gt;filter()&lt;/code&gt; available as the built-in.&lt;/p&gt;\n\n&lt;p&gt;For more details &lt;a href=&quot;http://docs.python.org/library/functions.html#filter&quot; rel=&quot;nofollow noreferrer&quot;&gt;check here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The most effective method is list comprehension, many people show their case, of course, it is also a good way to get an &lt;code&gt;iterator&lt;/code&gt; through &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;Filter&lt;/code&gt; receives a function and a sequence. &lt;code&gt;Filter&lt;/code&gt; applies the passed function to each element in turn, and then decides whether to retain or discard the element depending on whether the function return value is &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;There is an example  (get the odds in the tuple):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x:x%&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;)))  \n&lt;span class=&quot;hljs-comment&quot;&gt;# result: [1, 5, 9, 15]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Caution: You can also not handle iterators. Iterators are sometimes better than sequences.&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I needed to do something similar and in my case the problem was memory - I needed to merge multiple dataset objects within a list, after doing some stuff with them, as a new object, and needed to get rid of each entry I was merging to avoid duplicating all of them and blowing up memory. In my case having the objects in a dictionary instead of a list worked fine:&lt;/p&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;k = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\nv = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;]\nd = {key:val &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key,val &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(k, v)}\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; d\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; d[i]\n    d.pop(i)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; d\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n    ","\n&lt;p&gt;TLDR:&lt;/p&gt;\n\n&lt;p&gt;I wrote a library that allows you to do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; fluidIter &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; FluidIterable\nfSomeList = FluidIterable(someList)  \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fSomeList:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(tup):\n        &lt;span class=&quot;hljs-comment&quot;&gt;# remove &apos;tup&apos; without &quot;breaking&quot; the iteration&lt;/span&gt;\n        fSomeList.remove(tup)\n        &lt;span class=&quot;hljs-comment&quot;&gt;# tup has also been removed from &apos;someList&apos;&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# as well as &apos;fSomeList&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s best to use another method if possible that doesn&apos;t require modifying your iterable while iterating over it, but for some algorithms it might not be that straight forward. And so if you are sure that you really do want the code pattern described in the original question, it is possible.&lt;/p&gt;\n\n&lt;p&gt;Should work on all mutable sequences not just lists.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Full answer:&lt;/p&gt;\n\n&lt;p&gt;Edit: The last code example in this answer gives a use case for &lt;strong&gt;&lt;em&gt;why&lt;/em&gt;&lt;/strong&gt; you might sometimes want to modify a list in place rather than use a list comprehension. The first part of the answers serves as tutorial of &lt;strong&gt;&lt;em&gt;how&lt;/em&gt;&lt;/strong&gt; an array can be modified in place.&lt;/p&gt;\n\n&lt;p&gt;The solution follows on from &lt;a href=&quot;https://stackoverflow.com/a/6260097/4451578&quot;&gt;this&lt;/a&gt; answer (for a related question) from senderle. Which explains how the the array index is updated while iterating through a list that has been modified. The solution below is designed to correctly track the array index even if the list is modified.&lt;/p&gt;\n\n&lt;p&gt;Download &lt;code&gt;fluidIter.py&lt;/code&gt; from &lt;a href=&quot;https://github.com/alanbacon/FluidIterator&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; &lt;code&gt;https://github.com/alanbacon/FluidIterator&lt;/code&gt;, it is just a single file so no need to install git. There is no installer so you will need to make sure that the file is in the python path your self. The code has been written for python 3 and is untested on python 2.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; fluidIter &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; FluidIterable\nl = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]  \nfluidL = FluidIterable(l)                       \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fluidL:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;initial state of list on this iteration: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(fluidL)) \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;current iteration value: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(i))\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;popped value: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(fluidL.pop(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)))\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Final List Value: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(l))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will produce the following output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;initial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n\ninitial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n\ninitial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n\ninitial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n\ninitial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n\ninitial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n\ninitial state of &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; on this iteration: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\ncurrent iteration value: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\npopped value: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n\nFinal &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; Value: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Above we have used the &lt;code&gt;pop&lt;/code&gt; method on the fluid list object. Other common iterable methods are also implemented such as &lt;code&gt;del fluidL[i]&lt;/code&gt;, &lt;code&gt;.remove&lt;/code&gt;, &lt;code&gt;.insert&lt;/code&gt;, &lt;code&gt;.append&lt;/code&gt;, &lt;code&gt;.extend&lt;/code&gt;. The list can also be modified using slices (&lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;reverse&lt;/code&gt; methods are not implemented).&lt;/p&gt;\n\n&lt;p&gt;The only condition is that you must only modify the list in place, if at any point &lt;code&gt;fluidL&lt;/code&gt; or &lt;code&gt;l&lt;/code&gt; were reassigned to a different list object the code would not work. The original &lt;code&gt;fluidL&lt;/code&gt; object would still be used by the for loop but would become out of scope for us to modify.&lt;/p&gt;\n\n&lt;p&gt;i.e.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;fluidL[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;# is OK&lt;/span&gt;\nfluidL = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# is not OK&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If we want to access the current index value of the list we cannot use enumerate, as this only counts how many times the for loop has run. Instead we will use the iterator object directly.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;fluidArr = FluidIterable([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n&lt;span class=&quot;hljs-comment&quot;&gt;# get iterator first so can query the current index&lt;/span&gt;\nfluidArrIter = fluidArr.__iter__()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(fluidArrIter):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;enum: &apos;&lt;/span&gt;, i)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;current val: &apos;&lt;/span&gt;, v)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;current ind: &apos;&lt;/span&gt;, fluidArrIter.currentIndex)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(fluidArr)\n    fluidArr.insert(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Final List Value: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(fluidArr))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will output the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;enum:  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ncurrent val:  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ncurrent ind:  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\nenum:  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ncurrent val:  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ncurrent ind:  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\nenum:  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\ncurrent val:  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\ncurrent ind:  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\nenum:  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\ncurrent val:  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\ncurrent ind:  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\nFinal &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; Value: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;FluidIterable&lt;/code&gt; class just provides a wrapper for the original list object. The original object can be accessed as a property of the fluid object like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;originalList = fluidArr.fixedIterable\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More examples / tests can be found in the &lt;code&gt;if __name__ is &quot;__main__&quot;:&lt;/code&gt; section at the bottom of &lt;code&gt;fluidIter.py&lt;/code&gt;. These are worth looking at because they explain what happens in various situations. Such as: Replacing a large sections of the list using a slice. Or using (and modifying) the same iterable in nested for loops.&lt;/p&gt;\n\n&lt;p&gt;As I stated to start with: this is a complicated solution that will hurt the readability of your code and make it more difficult to debug. Therefore other solutions such as the list comprehensions mentioned in David Raznick&apos;s &lt;a href=&quot;https://stackoverflow.com/a/1207461/4451578&quot;&gt;answer&lt;/a&gt; should be considered first. That being said, I have found times where this class has been useful to me and has been easier to use than keeping track of the indices of elements that need deleting.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Edit: As mentioned in the comments, this answer does not really present a problem for which this approach provides a solution. I will try to address that here:&lt;/p&gt;\n\n&lt;p&gt;List comprehensions provide a way to generate a new list but these approaches tend to look at each element in isolation rather than the current state of the list as a whole.&lt;/p&gt;\n\n&lt;p&gt;i.e.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;newList = [i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; oldList &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; testFunc(i)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But what if the result of the &lt;code&gt;testFunc&lt;/code&gt; depends on the elements that have been added to &lt;code&gt;newList&lt;/code&gt; already? Or the elements still in &lt;code&gt;oldList&lt;/code&gt; that might be added next? There might still be a way to use a list comprehension but it will begin to lose it&apos;s elegance, and for me it feels easier to modify a list in place.&lt;/p&gt;\n\n&lt;p&gt;The code below is one example of an algorithm that suffers from the above problem. The algorithm will reduce a list so that no element is a multiple of any other element.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;randInts = [&lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;61&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\nfRandInts = FluidIterable(randInts)\nfRandIntsIter = fRandInts.__iter__()\n&lt;span class=&quot;hljs-comment&quot;&gt;# for each value in the list (outer loop)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# test against every other value in the list (inner loop)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fRandIntsIter:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;outer val: &apos;&lt;/span&gt;, i)\n    innerIntsIter = fRandInts.__iter__()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; innerIntsIter:\n        innerIndex = innerIntsIter.currentIndex\n        &lt;span class=&quot;hljs-comment&quot;&gt;# skip the element that the outloop is currently on&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# because we don&apos;t want to test a value against itself&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; innerIndex == fRandIntsIter.currentIndex:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# if the test element, j, is a multiple &lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;# of the reference element, i, then remove &apos;j&apos;&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; j%i == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;remove val: &apos;&lt;/span&gt;, j)\n                &lt;span class=&quot;hljs-comment&quot;&gt;# remove element in place, without breaking the&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;# iteration of either loop&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; fRandInts[innerIndex]\n            &lt;span class=&quot;hljs-comment&quot;&gt;# end if multiple, then remove&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# end if not the same value as outer loop&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# end inner loop&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# end outerloop&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;final list: &apos;&lt;/span&gt;, randInts)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output and the final reduced list are shown below&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;outer val:  &lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\nremove val:  &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;61&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;\nremove val:  &lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;\nremove val:  &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\nremove val:  &lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;\n\nouter val:  &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\nremove val:  &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;\n\nfinal &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:  [&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;61&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In some situations, where you&apos;re doing more than simply filtering a list one item at time, you want your iteration to change while iterating.&lt;/p&gt;\n\n&lt;p&gt;Here is an example where copying the list beforehand is incorrect, reverse iteration is impossible and a list comprehension is also not an option.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot; Sieve of Eratosthenes &quot;&quot;&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;generate_primes&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot; Generates all primes less than n. &quot;&quot;&quot;&lt;/span&gt;\n    primes = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,n))\n    idx = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; idx &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(primes):\n        p = primes[idx]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; multiple &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(p+p, n, p):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n                primes.remove(multiple)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ValueError:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;#EAFP&lt;/span&gt;\n        idx += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; p\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I can think of three approaches to solve your problem. As an example, I will create a random list of tuples &lt;code&gt;somelist = [(1,2,3), (4,5,6), (3,6,6), (7,8,9), (15,0,0), (10,11,12)]&lt;/code&gt;. The condition that I choose is &lt;code&gt;sum of elements of a tuple = 15&lt;/code&gt;. In the final list we will only have those tuples whose sum is not equal to 15. &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;What I have chosen is a randomly chosen example. &lt;strong&gt;Feel free to change&lt;/strong&gt; the &lt;strong&gt;list of tuples&lt;/strong&gt; and the &lt;strong&gt;condition&lt;/strong&gt; that I have chosen.&lt;/em&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Method 1.&amp;gt;&lt;/strong&gt; Use the framework that you had suggested (where one fills in a code inside a for loop). I use a small code with &lt;code&gt;del&lt;/code&gt; to delete a tuple that meets the said condition. However, this method will miss a tuple (which satisfies the said condition) if two consecutively placed tuples meet the given condition. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(tup)==&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; ): \n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; somelist[somelist.index(tup)]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; somelist\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Method 2.&amp;gt;&lt;/strong&gt; Construct a new list which contains elements (tuples) where the given condition is not met (this is the same thing as removing elements of list where the given condition is met). Following is the code for that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;newlist1 = [somelist[tup] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(somelist)) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(somelist[tup])!=&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; newlist1\n&amp;gt;&amp;gt;&amp;gt;[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Method 3.&amp;gt;&lt;/strong&gt; Find indices where the given condition is met, and then use remove elements (tuples) corresponding to those indices. Following is the code for that.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;indices = [i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(somelist)) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(somelist[i])==&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;)]\nnewlist2 = [tup &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j, tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(somelist) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; indices]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; newlist2\n&amp;gt;&amp;gt;&amp;gt;[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Method 1 and method 2 are faster than method 3&lt;/strong&gt;. Method2 and method3 are more efficient than method1. I &lt;strong&gt;prefer method2&lt;/strong&gt;. For the aforementioned example, &lt;code&gt;time(method1) : time(method2) : time(method3) = 1 : 1 : 1.7&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you will use the new list later, you can simply set the elem to None, and then judge it in the later loop, like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; li:\n    i = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; elem &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; li:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; elem &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this way, you dont&apos;t need copy the list and it&apos;s easier to understand. &lt;/p&gt;\n    ","\n&lt;p&gt;For anything that has the potential to be really big, I use the following. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\norig_list = np.array([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;])\n\nremove_me = [&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n\ncleaned = np.delete(orig_list, remove_me)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(cleaned)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That should be significantly faster than anything else. &lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Most answers on this page don&apos;t really explain why removing elements while iterating over a list produces strange results, but the &lt;a href=&quot;https://stackoverflow.com/questions/6260089/strange-result-when-removing-item-from-a-list&quot;&gt;accepted answer in this question does&lt;/a&gt;, and is probably a better dupe for beginners who encounter this issue for the first time.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6243352/ggorlen&quot; title=&quot;34,352 reputation&quot; class=&quot;comment-user&quot;&gt;ggorlen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment104658488_1207406&quot;&gt;&lt;span title=&quot;2019-12-06 23:34:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 6, 2019 at 23:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Can you make it faster if you know only a few will be deleted, i.e., only delete those and leave the others in-place rather than re-writing them?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/429850/highbandwidth&quot; title=&quot;16,043 reputation&quot; class=&quot;comment-user&quot;&gt;highBandWidth&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6561137_1207461&quot;&gt;&lt;span title=&quot;2011-04-20 19:25:57Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 20, 2011 at 19:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What if my list is huge and can&apos;t afford making a copy?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3145221/jpcgt&quot; title=&quot;2,066 reputation&quot; class=&quot;comment-user&quot;&gt;jpcgt&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42444805_1207461&quot;&gt;&lt;span title=&quot;2014-11-15 23:43:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 15, 2014 at 23:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@jpcgt You should use &lt;code&gt;somelist[:] = (x for x in somelist if determine(x))&lt;/code&gt; this will create generator that may not create any unnecessary copies.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1736304/rostislav-kondratenko&quot; title=&quot;493 reputation&quot; class=&quot;comment-user&quot;&gt;Rostislav Kondratenko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48015591_1207461&quot;&gt;&lt;span title=&quot;2015-04-29 14:54:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 29, 2015 at 14:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@RostislavKondratenko: &lt;code&gt;list_ass_slice()&lt;/code&gt; function that implements &lt;code&gt;somelist[:]=&lt;/code&gt; calls &lt;a href=&quot;https://docs.python.org/3/c-api/sequence.html#c.PySequence_Fast&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;PySequence_Fast()&lt;/code&gt;&lt;/a&gt; internally. This function always returns a list i.e., &lt;a href=&quot;http://stackoverflow.com/a/1208792/4279&quot;&gt;@Alex Martelli&apos;s solution that already uses a list instead of a generator is most probably more efficient&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4279/jfs&quot; title=&quot;376,440 reputation&quot; class=&quot;comment-user&quot;&gt;jfs&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48333544_1207461&quot;&gt;&lt;span title=&quot;2015-05-07 20:48:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 7, 2015 at 20:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Would you care to explain what the differences are between assigning the list comprehension to the list and list clone please? Wouldn&apos;t the original list &lt;code&gt;somelist&lt;/code&gt; be mutated in both methods?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5336013/bowen-liu&quot; title=&quot;961 reputation&quot; class=&quot;comment-user&quot;&gt;Bowen Liu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91913010_1207461&quot;&gt;&lt;span title=&quot;2018-09-24 19:06:14Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 24, 2018 at 19:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How do I do the same sliced assignment with a dict? In Python 2.6?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/165216/paulmcg&quot; title=&quot;59,959 reputation&quot; class=&quot;comment-user&quot;&gt;PaulMcG&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6156944_1208792&quot;&gt;&lt;span title=&quot;2011-03-25 19:29:37Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Mar 25, 2011 at 19:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Paul: Since dicts are unordered, slices are meaningless for dicts.  If your want to replace the contents of dict &lt;code&gt;a&lt;/code&gt; by the contents of dict &lt;code&gt;b&lt;/code&gt;, use &lt;code&gt;a.clear(); a.update(b)&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/279627/sven-marnach&quot; title=&quot;534,572 reputation&quot; class=&quot;comment-user&quot;&gt;Sven Marnach&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6269193_1208792&quot;&gt;&lt;span title=&quot;2011-04-01 23:51:47Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 1, 2011 at 23:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why can &apos;reseating&apos; one of the references by replacing what the variable refers to cause bugs?  It seems like that would only be a potential problem in multi-threaded applications, not single-threaded.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/86024/derek-dahmer&quot; title=&quot;14,005 reputation&quot; class=&quot;comment-user&quot;&gt;Derek Dahmer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8322580_1208792&quot;&gt;&lt;span title=&quot;2011-08-07 22:59:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 7, 2011 at 22:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Derek &lt;code&gt;x = [&apos;foo&apos;,&apos;bar&apos;,&apos;baz&apos;]; y = x; x = [item for item in x if determine(item)];&lt;/code&gt; This reassigns &lt;code&gt;x&lt;/code&gt; to the result of the list comprehension, but &lt;code&gt;y&lt;/code&gt; still refers to the &lt;i&gt;original&lt;/i&gt; list &lt;code&gt;[&apos;foo&apos;,&apos;bar&apos;,&apos;baz&apos;]&lt;/code&gt;. If you expected &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to refer to the same list, you may have introduced bugs. You prevent this by assigning to a slice of the entire list, as Alex shows, and I show here: &lt;code&gt;x = [&quot;foo&quot;,&quot;bar&quot;,&quot;baz&quot;]; y = x; x[:] = [item for item in x if determine(item)];&lt;/code&gt;. The list is modified in place. ensuring that all references to the list (both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; here) refer to the new list.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/182642/steven-t-snyder&quot; title=&quot;5,478 reputation&quot; class=&quot;comment-user&quot;&gt;Steven T. Snyder&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment9992070_1208792&quot;&gt;&lt;span title=&quot;2011-11-15 19:38:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 15, 2011 at 19:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;in fact, using &lt;code&gt;filter&lt;/code&gt; function too creates a new list, does not modify elements in place... only &lt;code&gt;olist[:] = [i for i in olist if not dislike(i)]&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5337834/john-strood&quot; title=&quot;1,669 reputation&quot; class=&quot;comment-user&quot;&gt;John Strood&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment64106747_1208792&quot;&gt;&lt;span title=&quot;2016-07-13 08:48:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 13, 2016 at 8:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Zen Because the second one iterates over a copy of the list. So when you modify the original list, you do not modify the copy that you iterate over.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/126214/lennart-regebro&quot; title=&quot;159,499 reputation&quot; class=&quot;comment-user&quot;&gt;Lennart Regebro&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment37528195_1207427&quot;&gt;&lt;span title=&quot;2014-06-18 13:47:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 18, 2014 at 13:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What&apos;s better in doing somelist[:] compared to list(somelist) ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/342473/mariusz-jamro&quot; title=&quot;29,255 reputation&quot; class=&quot;comment-user&quot;&gt;Mariusz Jamro&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment44985743_1207427&quot;&gt;&lt;span title=&quot;2015-02-04 10:01:22Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 4, 2015 at 10:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;list(somelist)&lt;/code&gt; will convert an iterable into a list. &lt;code&gt;somelist[:]&lt;/code&gt; makes a copy of an object that supports slicing. So they don&apos;t necessarily do the same thing. In this case I want to make a copy of the &lt;code&gt;somelist&lt;/code&gt;object, so I use &lt;code&gt;[:]&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/126214/lennart-regebro&quot; title=&quot;159,499 reputation&quot; class=&quot;comment-user&quot;&gt;Lennart Regebro&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45032005_1207427&quot;&gt;&lt;span title=&quot;2015-02-05 12:21:22Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 5, 2015 at 12:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note to anyone reading this, this is VERY slow for lists. &lt;code&gt;remove()&lt;/code&gt; has to go over the WHOLE list for every iteration, so it will take forever.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1036670/vitiral&quot; title=&quot;7,407 reputation&quot; class=&quot;comment-user&quot;&gt;vitiral&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45258605_1207427&quot;&gt;&lt;span title=&quot;2015-02-11 23:22:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 11, 2015 at 23:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Big O time doesn&apos;t matter when dealing with lists of only a dozen items.  Often clear and simple for future programmers to understand is far more valuable than performance.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5415924/steve&quot; title=&quot;209 reputation&quot; class=&quot;comment-user&quot;&gt;Steve&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment64982024_1207427&quot;&gt;&lt;span title=&quot;2016-08-06 17:21:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 6, 2016 at 17:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In recent versions of Python, you can do this even more cleanly by using the &lt;code&gt;reversed()&lt;/code&gt; builtin&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/597742/ncoghlan&quot; title=&quot;38,074 reputation&quot; class=&quot;comment-user&quot;&gt;ncoghlan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6110404_1207485&quot;&gt;&lt;span title=&quot;2011-03-23 07:08:43Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Mar 23, 2011 at 7:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;reversed() does not create a new list, it creates a reverse iterator over the supplied sequence. Like enumerate(), you have to wrap it in list() to actually get a list out of it.  You may be thinking of sorted(), which &lt;i&gt;does&lt;/i&gt; create a new list every time (it has to, so it can sort it).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/597742/ncoghlan&quot; title=&quot;38,074 reputation&quot; class=&quot;comment-user&quot;&gt;ncoghlan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45266349_1207485&quot;&gt;&lt;span title=&quot;2015-02-12 06:44:12Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 12, 2015 at 6:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Mauris because &lt;a href=&quot;https://docs.python.org/2/library/functions.html#enumerate&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;enumerate&lt;/code&gt;&lt;/a&gt; returns an iterator and &lt;a href=&quot;https://docs.python.org/2/library/functions.html#reversed&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;reversed&lt;/code&gt;&lt;/a&gt; expects a sequence. I guess you could do &lt;code&gt;reversed(list(enumerate(somelist)))&lt;/code&gt; if you don&apos;t mind creating an extra list in memory.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/420867/drevicko&quot; title=&quot;13,812 reputation&quot; class=&quot;comment-user&quot;&gt;drevicko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment51485366_1207485&quot;&gt;&lt;span title=&quot;2015-08-02 23:27:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 2, 2015 at 23:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is O(N*M) for arrays, it is very slow if you remove many items from a large list.  So not recommended.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/218294/sam-watkins&quot; title=&quot;7,342 reputation&quot; class=&quot;comment-user&quot;&gt;Sam Watkins&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment53032679_1207485&quot;&gt;&lt;span title=&quot;2015-09-15 15:04:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 15, 2015 at 15:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@SamWatkins Yeah, this answer is for when you&apos;re removing a couple of elements from a very large array. Less memory usage, but it can be &lt;code&gt;m&lt;/code&gt; times slower.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/703382/navin&quot; title=&quot;3,329 reputation&quot; class=&quot;comment-user&quot;&gt;Navin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment58231194_1207485&quot;&gt;&lt;span title=&quot;2016-02-07 21:36:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 7, 2016 at 21:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Finally someone pointed out the actual documentation. I couldn&apos;t understand any answers before this one.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7246352/lukali&quot; title=&quot;343 reputation&quot; class=&quot;comment-user&quot;&gt;Lukali&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120740698_34238688&quot;&gt;&lt;span title=&quot;2021-07-09 13:18:20Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 9, 2021 at 13:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;1. List comprehension and generator expressions are borrowed from Haskell, a pure functional language; they&apos;re exactly as functional as &lt;code&gt;filter&lt;/code&gt;, and more Pythonic. 2. If you need a &lt;code&gt;lambda&lt;/code&gt; to use &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;filter&lt;/code&gt;, the list comp or genexpr is &lt;i&gt;always&lt;/i&gt; the better option; &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; can be slightly faster when the transform/predicate function is a Python built-in implemented in C and the iterable is not trivially small, but they&apos;re always slower when you need a &lt;code&gt;lambda&lt;/code&gt; that the listcomp/genexpr could avoid.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/364696/shadowranger&quot; title=&quot;127,504 reputation&quot; class=&quot;comment-user&quot;&gt;ShadowRanger&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment67641698_1207500&quot;&gt;&lt;span title=&quot;2016-10-22 00:22:22Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 22, 2016 at 0:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In my case I need to move those &apos;unwanted&apos; elements into another list. Do you have any new comment about this solution? I also think that it is better to use some deletions instead of duplicate the list.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1826714/gustavovelascoh&quot; title=&quot;1,098 reputation&quot; class=&quot;comment-user&quot;&gt;gustavovelascoh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment74631480_42773232&quot;&gt;&lt;span title=&quot;2017-05-05 02:13:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 5, 2017 at 2:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is the right answer if performance is an issue (although same as @Alexey). That said, the choice of &lt;code&gt;list&lt;/code&gt; as a data structure in the first place should be carefully considered since removal from the middle of a list takes linear time in the length of the list. If you don&apos;t really need random access to k-th sequential item, maybe consider &lt;code&gt;OrderedDict&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/336527/max&quot; title=&quot;45,491 reputation&quot; class=&quot;comment-user&quot;&gt;max&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment74646602_42773232&quot;&gt;&lt;span title=&quot;2017-05-05 11:29:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 5, 2017 at 11:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 5 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@GVelascoh why not create &lt;code&gt;newlist = []&lt;/code&gt;, and then &lt;code&gt;newlist.append(array[i])&lt;/code&gt; just before &lt;code&gt;del array[i]&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/336527/max&quot; title=&quot;45,491 reputation&quot; class=&quot;comment-user&quot;&gt;max&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment74646698_42773232&quot;&gt;&lt;span title=&quot;2017-05-05 11:31:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 5, 2017 at 11:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that this is likely time inefficient: if &lt;code&gt;list()&lt;/code&gt; is a linked list, the random access is expensive, if &lt;code&gt;list()&lt;/code&gt; is an array, the deletes are expensive because they require to move all following elements forward. A decent iterator could make things good for the linked list implementation. This could however be space efficient.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/895245/ciro-santilli-%d0%9f%d1%83%d1%82%d0%bb%d0%b5%d1%80-%d0%9a%d0%b0%d0%bf%d1%83%d1%82-%e5%85%ad%e5%9b%9b%e4%ba%8b&quot; title=&quot;306,035 reputation&quot; class=&quot;comment-user&quot;&gt;Ciro Santilli Путлер Капут &lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment75747098_42773232&quot;&gt;&lt;span title=&quot;2017-06-05 16:08:37Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 5, 2017 at 16:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@CiroSantilli : The pop(i) operation is still O(n). I&apos;ll take storage efficiency over incremental improvements in O(n), but I can see why someone might do this differently.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/325452/ingyhere&quot; title=&quot;10,627 reputation&quot; class=&quot;comment-user&quot;&gt;ingyhere&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115963470_42773232&quot;&gt;&lt;span title=&quot;2021-01-06 01:08:38Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 6, 2021 at 1:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I don&apos;t want to like this but I do :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5032941/anon01&quot; title=&quot;9,642 reputation&quot; class=&quot;comment-user&quot;&gt;anon01&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124290302_52947607&quot;&gt;&lt;span title=&quot;2021-12-10 22:25:09Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 10, 2021 at 22:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I think this is very creative! I would like to see more community input on this algorithm. It&apos;s easy to understand and appears to be overlooked by the contributors!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1426861/tonysepia&quot; title=&quot;3,006 reputation&quot; class=&quot;comment-user&quot;&gt;tonysepia&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126884873_52947607&quot;&gt;&lt;span title=&quot;2022-04-08 17:52:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 8 at 17:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@tonysepia glad to see this solution is still helpful :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4008392/mujeeb&quot; title=&quot;785 reputation&quot; class=&quot;comment-user&quot;&gt;Mujeeb&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126900456_52947607&quot;&gt;&lt;span title=&quot;2022-04-09 18:08:02Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 9 at 18:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Mujeeb oh Yes, you can see me using it in my algo here: &lt;a href=&quot;https://stackoverflow.com/questions/71810348/fastest-way-to-convert-two-dimensional-list-to-a-nested-dictionary&quot; title=&quot;fastest way to convert two dimensional list to a nested dictionary&quot;&gt;stackoverflow.com/questions/71810348/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1426861/tonysepia&quot; title=&quot;3,006 reputation&quot; class=&quot;comment-user&quot;&gt;tonysepia&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126900474_52947607&quot;&gt;&lt;span title=&quot;2022-04-09 18:09:27Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 9 at 18:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This adds no new information that wasn&apos;t in the accepted answer years earlier.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1709587/mark-amery&quot; title=&quot;128,457 reputation&quot; class=&quot;comment-user&quot;&gt;Mark Amery&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63359622_36096883&quot;&gt;&lt;span title=&quot;2016-06-21 22:36:22Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 21, 2016 at 22:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s simple and just another way to look at a problem @MarkAmery. It&apos;s less condensed for those people that don&apos;t like compressed coding syntax.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5425664/ntk4&quot; title=&quot;1,179 reputation&quot; class=&quot;comment-user&quot;&gt;ntk4&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63408517_36096883&quot;&gt;&lt;span title=&quot;2016-06-23 03:08:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 23, 2016 at 3:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why is getting the index any more relevant in the case where you have a list of dicts than in the case of any other kind of list? This doesn&apos;t make sense as far as I can tell.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1709587/mark-amery&quot; title=&quot;128,457 reputation&quot; class=&quot;comment-user&quot;&gt;Mark Amery&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63359580_25363359&quot;&gt;&lt;span title=&quot;2016-06-21 22:33:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 21, 2016 at 22:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You should really just use comprehensions. They&apos;re much easier to understand.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5079779/beefster&quot; title=&quot;675 reputation&quot; class=&quot;comment-user&quot;&gt;Beefster&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment85623994_39293411&quot;&gt;&lt;span title=&quot;2018-03-15 23:46:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 15, 2018 at 23:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What if I want to remove &lt;code&gt;bad&lt;/code&gt; things, do something with it and also do something with &lt;code&gt;good&lt;/code&gt; things in one loop?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3572950/alexey&quot; title=&quot;1,276 reputation&quot; class=&quot;comment-user&quot;&gt;Alexey&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment85632089_39293411&quot;&gt;&lt;span title=&quot;2018-03-16 07:38:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 16, 2018 at 7:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Actually, I realized there&apos;s some cleverness here in that you make a copy of the list with an open slice (&lt;code&gt;alist[:]&lt;/code&gt;) And since you might be doing something fancy, it actually has a use case. Good revision is good. Take my upvote.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5079779/beefster&quot; title=&quot;675 reputation&quot; class=&quot;comment-user&quot;&gt;Beefster&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86135096_39293411&quot;&gt;&lt;span title=&quot;2018-03-29 19:14:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 29, 2018 at 19:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;To put in a simpler way: do &lt;i&gt;not&lt;/i&gt; iterate on the list you&apos;re trying to change. Iterate, instead, on the list with the items that have the criteria to be removed: &lt;code&gt;lis = [5, 7, 13, 29, 35, 65, 91]&lt;/code&gt; &lt;code&gt;not_primes = [35,65]&lt;/code&gt; &lt;code&gt;for item in not_primes: if item in lis: lis.remove(item)&lt;/code&gt;  I ran into this myself, and it was discussed here: &lt;a href=&quot;https://stackoverflow.com/q/72478091/1973308&quot;&gt;stackoverflow.com/q/72478091/1973308&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1973308/hank-lenzi&quot; title=&quot;61 reputation&quot; class=&quot;comment-user&quot;&gt;Hank Lenzi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128054348_55915047&quot;&gt;&lt;span title=&quot;2022-06-03 12:26:38Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 3 at 12:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Looping over &lt;code&gt;reversed(list(enumerate(some_list)))&lt;/code&gt; would be simpler than computing indexes yourself.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1709587/mark-amery&quot; title=&quot;128,457 reputation&quot; class=&quot;comment-user&quot;&gt;Mark Amery&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63359845_31350162&quot;&gt;&lt;span title=&quot;2016-06-21 22:49:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 21, 2016 at 22:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MarkAmery don&apos;t think you can alter the list this way.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/975975/queequeg&quot; title=&quot;939 reputation&quot; class=&quot;comment-user&quot;&gt;Queequeg&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63603723_31350162&quot;&gt;&lt;span title=&quot;2016-06-28 18:29:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2016 at 18:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I probably think this is the most idiomatic way of removing the items from list. This behaviour will also be thread safe since your application is not mutating the variable.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/759298/supreet-sethi&quot; title=&quot;1,726 reputation&quot; class=&quot;comment-user&quot;&gt;Supreet Sethi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121449764_53236774&quot;&gt;&lt;span title=&quot;2021-08-10 05:24:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 10, 2021 at 5:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s hard to tell whether this is over-engineered because it&apos;s unclear what problem it&apos;s trying to solve; what does removing elements using this approach achieve that &lt;code&gt;some_list[:] = [x for x in some_list if not some_condition(x)]&lt;/code&gt; doesn&apos;t achieve? Without an answer to that, why should anyone believe that downloading and using your 600-line library complete with typos and commented-out code is a better solution to their problem than the one-liner? -1.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1709587/mark-amery&quot; title=&quot;128,457 reputation&quot; class=&quot;comment-user&quot;&gt;Mark Amery&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63359804_37277264&quot;&gt;&lt;span title=&quot;2016-06-21 22:47:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 21, 2016 at 22:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MarkAmery. The main use case for when this is when trying to determine if an item should be removed (or added or moved) based not on just the item itself, but on the state of another item in the list or the state of the list as a whole. For example, it is not possible with list comprehensions to write something like &lt;code&gt;some_list[:] = [x for x in some_list if not some_condition(y)]&lt;/code&gt; where &lt;code&gt;y&lt;/code&gt; is a different list element from &lt;code&gt;x&lt;/code&gt;. Nor would it be possible to write &lt;code&gt;some_list[:] = [x for x in some_list if not some_condition(intermediateStateOf_some_list)]&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4451578/resonance&quot; title=&quot;2,999 reputation&quot; class=&quot;comment-user&quot;&gt;Resonance&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63591681_37277264&quot;&gt;&lt;span title=&quot;2016-06-28 13:27:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2016 at 13:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;From what I measured, NumPy starts to be faster for lists of more than 20 elements, and reaches &amp;gt;12x faster filtering for big lists of 1000 elements and more.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7851470/georgy&quot; title=&quot;10,260 reputation&quot; class=&quot;comment-user&quot;&gt;Georgy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98893393_51976515&quot;&gt;&lt;span title=&quot;2019-05-14 13:06:00Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 14, 2019 at 13:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":75,"title":"How to remove items from a list while iterating?","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                    &lt;div class=&quot;flex--item mr8&quot;&gt;\n                        &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLock&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M16 9a2 2 0 0 0-2-2V6A5 5 0 0 0 4 6v1a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V9Zm-7 5a2 2 0 1 1 0-4 2 2 0 0 1 0 4Zm3.1-7H5.9V6a3.1 3.1 0 0 1 6.2 0v1Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;This question&apos;s answers are a &lt;a href=&quot;/help/privileges/edit-community-wiki&quot;&gt;community effort&lt;/a&gt;&lt;/b&gt;. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;I&apos;m iterating over a list of tuples in Python, and am attempting to remove them if they meet certain criteria. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelist:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; determine(tup):\n         code_to_remove_tup\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What should I use in place of &lt;code&gt;code_to_remove_tup&lt;/code&gt;? I can&apos;t figure out how to remove the item in this fashion.&lt;/p&gt;\n    ","slug":"how-to-remove-items-from-a-list-while-iterating-1657384496375","postType":"QUESTION","createdAt":"2022-07-09T16:34:56.000Z","updatedAt":"2022-07-09T16:34:56.000Z","tags":[{"id":273,"name":"iteration","slug":"iteration","createdAt":"2022-07-09T16:34:56.000Z","updatedAt":"2022-07-09T16:34:56.000Z","Questions_Tags":{"questionId":75,"tagId":273}}]}]}},"__N_SSG":true}