{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;Arrow functions are not designed to be used in every situation merely as a shorter version of old-fashioned functions. They are not intended to replace function syntax using the &lt;code&gt;function&lt;/code&gt; keyword. The most common use case for arrow functions is as short &quot;lambdas&quot; which do not redefine &lt;code&gt;this&lt;/code&gt;, often used when passing a function as a callback to some function.&lt;/p&gt;\n\n&lt;p&gt;Arrow functions cannot be used to write object methods because, as you have found, since arrow functions close over the &lt;code&gt;this&lt;/code&gt; of the lexically enclosing context, the &lt;code&gt;this&lt;/code&gt; within the arrow is the one that was current where you defined the object. Which is to say:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Whatever `this` is here...&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;// ...is what `this` is here.&lt;/span&gt;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In your case, wanting to write a method on an object, you should simply use traditional &lt;code&gt;function&lt;/code&gt; syntax, or the method syntax introduced in ES6:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// or&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(There are small differences between them, but they&apos;re only important if you use &lt;code&gt;super&lt;/code&gt; in &lt;code&gt;getOwner&lt;/code&gt;, which you aren&apos;t, or if you copy &lt;code&gt;getOwner&lt;/code&gt; to another object.)&lt;/p&gt;\n\n&lt;p&gt;There was some debate on the es6 mailing list about a twist on arrow functions which have similar syntax but with their own &lt;code&gt;this&lt;/code&gt;. However, this proposal was poorly received because that is mere syntax sugar, allowing people to save typing a few characters, and provides no new functionality over existing function syntax. See the topic &lt;a href=&quot;https://esdiscuss.org/topic/unbound-arrow-functions&quot; rel=&quot;noreferrer&quot;&gt;unbound arrow functions&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In this line &lt;code&gt;getOwner: () =&amp;gt; this.owner&lt;/code&gt; should be:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;\n}; &lt;span class=&quot;hljs-comment&quot;&gt;//here `this` refers to `window` object.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chopper.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;You would have to declare &lt;code&gt;this&lt;/code&gt; into a function:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt; }\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chopper.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Or:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopperFn = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;setOwner&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt; = name;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;,{\n        &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jhon&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;,\n    })\n\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chopperFn&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chopper.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;());\nchopper.&lt;span class=&quot;hljs-title function_&quot;&gt;setOwner&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Spiderman&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(chopper.&lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you have to use arrow function, you can change &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;chopper&lt;/code&gt;,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; chopper.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although this is not best practice, when you change the object name, you have to change this arrow function. &lt;/p&gt;\n    ","\n&lt;p&gt;A quick tip that I follow to use arrow functions.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Use non-arrow functions for methods that will be using &lt;code&gt;object.method()&lt;/code&gt; syntax. (Those are functions that will receive meaningful &lt;code&gt;this&lt;/code&gt; value from their caller.)&lt;/li&gt;\n&lt;li&gt;Use arrow function for almost everything else.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Another tip, in strict mode, &lt;code&gt;this&lt;/code&gt; still refers to Window instead of undefined.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  (&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// window&lt;/span&gt;\n  })();\n\n  (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;\n  })();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This inside arrow function doesn&apos;t reflect context of the object. Instead it gives the context where the object method is called.&lt;/p&gt;\n\n&lt;p&gt;Check this, This gives some insight about when to use arrow and when not.\n&lt;a href=&quot;https://dmitripavlutin.com/when-not-to-use-arrow-functions-in-javascript/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://dmitripavlutin.com/when-not-to-use-arrow-functions-in-javascript/&lt;/a&gt;&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;While using the fat arrow syntax? Only if you alter the &lt;code&gt;this&lt;/code&gt; value by first creating the &lt;code&gt;chopper&lt;/code&gt; object, then doing the assignment in a function that has &lt;code&gt;this&lt;/code&gt; pointing to that object. This can be accomplished pretty cleanly with a constructor function.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user1106925&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50207797_31095710&quot;&gt;&lt;span title=&quot;2015-06-28 03:09:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2015 at 3:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This demo will run in Firefox. Chrome doesn&apos;t have it yet. &lt;a href=&quot;http://jsfiddle.net/bfyarxfe/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jsfiddle.net/bfyarxfe&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user1106925&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50207837_31095710&quot;&gt;&lt;span title=&quot;2015-06-28 03:12:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2015 at 3:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@fox, you must use &apos;use strict&apos; on that jsfiddle.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1074519/walter-chapilliquen-wzvang&quot; title=&quot;11,306 reputation&quot; class=&quot;comment-user&quot;&gt;Walter Chapilliquen - wZVanG&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50208021_31095710&quot;&gt;&lt;span title=&quot;2015-06-28 03:32:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2015 at 3:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@fox: It works fine in a supported environment. Firefox doesn&apos;t yet have complete support. Try it in &lt;a href=&quot;http://benvie.github.io/continuum/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Continuum&lt;/a&gt; and &lt;code&gt;console.log()&lt;/code&gt; the result of the method call. It works.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user1106925&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50208077_31095710&quot;&gt;&lt;span title=&quot;2015-06-28 03:39:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2015 at 3:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Mozilla docs says  &lt;b&gt;Does not have its own bindings to this or super, and should not be used as methods&lt;/b&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mozilla Arrow function documentation&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3355622/mohamed-yaseen&quot; title=&quot;81 reputation&quot; class=&quot;comment-user&quot;&gt;Mohamed Yaseen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113313355_31095710&quot;&gt;&lt;span title=&quot;2020-09-26 15:20:50Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 26, 2020 at 15:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If I&apos;m reading this correctly, it seems to suggest that the mailing list deprioritizes syntactic sugar, even if it would lead to greater uniformity/readability of code. As it stands, it&apos;s much more challenging to use the fat-arrow functions in an OOP context under ES6 than, say, under coffeescript.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/972253/fox&quot; title=&quot;13,618 reputation&quot; class=&quot;comment-user owner&quot;&gt;fox&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50208496_31095976&quot;&gt;&lt;span title=&quot;2015-06-28 04:25:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2015 at 4:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;As I understand it, syntactic sugar &lt;b&gt;is&lt;/b&gt; considered a valid reason for considering language extensions, but as you say with a lower priority--in other words, the bar is higher for such proposals.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user663031&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50208873_31095976&quot;&gt;&lt;span title=&quot;2015-06-28 05:07:29Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2015 at 5:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;A bit confused. From what I understand for the function keyword notation, this points to the context of execution, where it is called, not where it is defined. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot; rel=&quot;nofollow noreferrer&quot;&gt;developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/&lt;/a&gt; . In the example above, can you really relay on on &lt;code&gt;this.owner&lt;/code&gt; the be equal to the value that is defined on the chopper object?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7224430/ben-carp&quot; title=&quot;20,007 reputation&quot; class=&quot;comment-user&quot;&gt;Ben Carp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment116361896_31095976&quot;&gt;&lt;span title=&quot;2021-01-20 15:48:28Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 20, 2021 at 15:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;m getting an error here: &lt;code&gt;&quot;TypeError: Cannot read property &apos;owner&apos; of undefined\\n    at Object.chopper.getOwner&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/972253/fox&quot; title=&quot;13,618 reputation&quot; class=&quot;comment-user owner&quot;&gt;fox&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50207756_31095730&quot;&gt;&lt;span title=&quot;2015-06-28 03:04:41Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2015 at 3:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I see, it is the correct use, however the method esta always returns window Object. You would have to declare &lt;code&gt;this&lt;/code&gt; within a function.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1074519/walter-chapilliquen-wzvang&quot; title=&quot;11,306 reputation&quot; class=&quot;comment-user&quot;&gt;Walter Chapilliquen - wZVanG&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50207807_31095730&quot;&gt;&lt;span title=&quot;2015-06-28 03:10:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2015 at 3:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;this&lt;/code&gt; doesn&apos;t necessarily refer to &lt;code&gt;window&lt;/code&gt;. It refers to whatever the current value of &lt;code&gt;this&lt;/code&gt; is in the enclosing environment, which may or may not be &lt;code&gt;window&lt;/code&gt;. Maybe that&apos;s what you meant. Just want to make sure he understands it isn&apos;t some default value.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user1106925&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50207902_31095730&quot;&gt;&lt;span title=&quot;2015-06-28 03:18:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2015 at 3:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@torazaburo That is fine for me, I tried it, &lt;code&gt;this&lt;/code&gt; now refers to class&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1074519/walter-chapilliquen-wzvang&quot; title=&quot;11,306 reputation&quot; class=&quot;comment-user&quot;&gt;Walter Chapilliquen - wZVanG&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50208085_31095730&quot;&gt;&lt;span title=&quot;2015-06-28 03:39:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2015 at 3:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What you have written is equivalent to, but more verbose than, simply writing &lt;code&gt;var chopperFn = function() { this.owner = &apos;Jhon&apos;; this.getOwner = () =&amp;gt; this.owner; }&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user663031&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50208107_31095730&quot;&gt;&lt;span title=&quot;2015-06-28 03:42:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2015 at 3:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;No, &lt;code&gt;this&lt;/code&gt; inside an arrow function inside an object literal refers to the scope where the object literal is, not where it is called.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4642212/sebastian-simon&quot; title=&quot;16,704 reputation&quot; class=&quot;comment-user&quot;&gt;Sebastian Simon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122818058_46418421&quot;&gt;&lt;span title=&quot;2021-10-07 18:29:17Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 7, 2021 at 18:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":515,"title":"Methods in ES6 objects: using arrow functions","content":"\n                \n&lt;p&gt;In ES6, both of these are legal:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;; }\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and, as shorthand:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zed&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getOwner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Is it possible to use the new arrow functions as well? In trying something like&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;; }\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chopper = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;owner&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;getOwner&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;owner&lt;/span&gt;)\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I get an error message suggesting that the method does not have access to &lt;code&gt;this&lt;/code&gt;. Is this just a syntax issue, or can you not use fat-arrow methods inside of ES6 objects?&lt;/p&gt;\n    ","slug":"methods-in-es6-objects:-using-arrow-functions-1657388249058","postType":"QUESTION","createdAt":"2022-07-09T17:37:29.000Z","updatedAt":"2022-07-09T17:37:29.000Z","tags":[{"id":2553,"name":"ecmascript-harmony","slug":"ecmascript-harmony","createdAt":"2022-07-09T17:37:29.000Z","updatedAt":"2022-07-09T17:37:29.000Z","Questions_Tags":{"questionId":515,"tagId":2553}}]}]}},"__N_SSG":true}