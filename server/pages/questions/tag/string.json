{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; tests for reference equality (whether they are the same object).&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;.equals()&lt;/code&gt; tests for value equality (whether they are logically &quot;equal&quot;).&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html#equals(java.lang.Object,%20java.lang.Object)&quot; rel=&quot;noreferrer&quot;&gt;Objects.equals()&lt;/a&gt; checks for &lt;code&gt;null&lt;/code&gt; before calling &lt;code&gt;.equals()&lt;/code&gt; so you don&apos;t have to (available as of JDK7, also available in &lt;a href=&quot;https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained#equals&quot; rel=&quot;noreferrer&quot;&gt;Guava&lt;/a&gt;).&lt;/p&gt;\n&lt;p&gt;Consequently, if you want to test whether two strings have the same value you will probably want to use &lt;code&gt;Objects.equals()&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// These two have the same value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;).equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// --&amp;gt; true &lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... but they are not the same object&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// --&amp;gt; false &lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... neither are these&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// --&amp;gt; false &lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... but these are because literals are interned by &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// the compiler and thus refer to the same object&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// --&amp;gt; true &lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... string literals are concatenated by the compiler&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// and the results are interned.&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;te&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;st&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// --&amp;gt; true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... but you should really just call Objects.equals()&lt;/span&gt;\nObjects.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;// --&amp;gt; true&lt;/span&gt;\nObjects.equals(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// --&amp;gt; false&lt;/span&gt;\nObjects.equals(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// --&amp;gt; true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You almost &lt;strong&gt;always&lt;/strong&gt; want to use &lt;code&gt;Objects.equals()&lt;/code&gt;. In the &lt;strong&gt;rare&lt;/strong&gt; situation where you &lt;strong&gt;know&lt;/strong&gt; you&apos;re dealing with &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#intern--&quot; rel=&quot;noreferrer&quot;&gt;interned&lt;/a&gt; strings, you &lt;em&gt;can&lt;/em&gt; use &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;From &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.5&quot; rel=&quot;noreferrer&quot;&gt;JLS 3.10.5. &lt;em&gt;String Literals&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Moreover, a string literal always refers to the &lt;em&gt;same&lt;/em&gt; instance of class &lt;code&gt;String&lt;/code&gt;. This is because string literals - or, more generally, strings that are the values of constant expressions (&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.28&quot; rel=&quot;noreferrer&quot;&gt;ยง15.28&lt;/a&gt;) - are &quot;interned&quot; so as to share unique instances, using the method &lt;code&gt;String.intern&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Similar examples can also be found in &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#d5e1634&quot; rel=&quot;noreferrer&quot;&gt;JLS 3.10.5-1&lt;/a&gt;.&lt;/p&gt;\n&lt;h3&gt;Other Methods To Consider&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equalsIgnoreCase-java.lang.String-&quot; rel=&quot;noreferrer&quot;&gt;String.equalsIgnoreCase()&lt;/a&gt; value equality that ignores case. Beware, however, that this method can have unexpected results in various locale-related cases, see &lt;a href=&quot;https://stackoverflow.com/questions/44238749/equalsignorecase-not-working-as-intended&quot;&gt;this question&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#contentEquals-java.lang.CharSequence-&quot; rel=&quot;noreferrer&quot;&gt;String.contentEquals()&lt;/a&gt; compares the content of the &lt;code&gt;String&lt;/code&gt; with the content of any &lt;code&gt;CharSequence&lt;/code&gt; (available since Java 1.5). Saves you from having to turn your StringBuffer, etc into a String before doing the equality comparison, but leaves the null checking to you.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; tests object references, &lt;code&gt;.equals()&lt;/code&gt; tests the string values.  &lt;/p&gt;\n\n&lt;p&gt;Sometimes it looks as if &lt;code&gt;==&lt;/code&gt; compares values, because Java does some behind-the-scenes stuff to make sure identical in-line strings are actually the same object.&lt;/p&gt;\n\n&lt;p&gt;For example:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fooString1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fooString2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Evaluates to false&lt;/span&gt;\nfooString1 == fooString2;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Evaluates to true&lt;/span&gt;\nfooString1.equals(fooString2);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Evaluates to true, because Java uses the same object&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;But beware of nulls!&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; handles &lt;code&gt;null&lt;/code&gt; strings fine, but calling &lt;code&gt;.equals()&lt;/code&gt; from a null string will cause an exception:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;nullString1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;nullString2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Evaluates to true&lt;/span&gt;\nSystem.out.print(nullString1 == nullString2);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Throws a NullPointerException&lt;/span&gt;\nSystem.out.print(nullString1.equals(nullString2));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So if you know that &lt;code&gt;fooString1&lt;/code&gt; may be null, tell the reader that by writing&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.print(fooString1 != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; fooString1.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following are shorter, but its less obvious that it checks for null:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;.equals(fooString1));  &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;bar&quot; is never null&lt;/span&gt;\nSystem.out.print(Objects.equals(fooString1, &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;));  &lt;span class=&quot;hljs-comment&quot;&gt;// Java 7 required&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; compares Object references.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;.equals()&lt;/code&gt; compares String values.&lt;/p&gt;\n\n&lt;p&gt;Sometimes &lt;code&gt;==&lt;/code&gt; gives illusions of comparing String values, as in following cases:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String a=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Test&quot;&lt;/span&gt;;\nString b=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Test&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a==b) ===&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is because when you create any String literal, the JVM first searches for that literal in the String pool, and if it finds a match, that same reference will be given to the new String. Because of this, we get:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;(a==b) ===&amp;gt; true&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;                       String Pool\n     b -----------------&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; &amp;lt;-----------------a\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, &lt;code&gt;==&lt;/code&gt; fails in the following case:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String a=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;;\nString b=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a==b) ===&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case for &lt;code&gt;new String(&quot;test&quot;)&lt;/code&gt; the statement new String will be created on the heap, and that reference will be given to &lt;code&gt;b&lt;/code&gt;, so &lt;code&gt;b&lt;/code&gt; will be given a reference on the heap, not in String pool.&lt;/p&gt;\n\n&lt;p&gt;Now &lt;code&gt;a&lt;/code&gt; is pointing to a String in the String pool while &lt;code&gt;b&lt;/code&gt; is pointing to a String on the heap. Because of that we get:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;if(a==b) ===&amp;gt; false.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;                String Pool\n     &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; &amp;lt;-------------------- a\n\n                   Heap\n     &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; &amp;lt;-------------------- b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While &lt;code&gt;.equals()&lt;/code&gt; always compares a value of String so it gives true in both cases:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String a=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Test&quot;&lt;/span&gt;;\nString b=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Test&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a.equals(b)) ===&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n\nString a=&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;;\nString b=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a.equals(b)) ===&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So using &lt;code&gt;.equals()&lt;/code&gt; is always better.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;==&lt;/code&gt; operator checks to see if the two strings are exactly the same object.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;.equals()&lt;/code&gt; method will check if the two strings have the same value.&lt;/p&gt;\n    ","\n&lt;p&gt;Strings in Java are immutable. That means whenever you try to change/modify the string you get a new instance. You cannot change the original string. This has been done so that these string instances can be cached. A typical program contains a lot of string references and caching these instances can decrease the memory footprint and increase the performance of the program.&lt;/p&gt;\n\n&lt;p&gt;When using == operator for string comparison you are not comparing the contents of the string, but are actually comparing the memory address. If they are both equal it will return true and false otherwise. Whereas equals in string compares the string contents.&lt;/p&gt;\n\n&lt;p&gt;So the question is if all the strings are cached in the system, how come &lt;code&gt;==&lt;/code&gt; returns false whereas equals return true? Well, this is possible. If you make a new string like &lt;code&gt;String str = new String(&quot;Testing&quot;)&lt;/code&gt; you end up creating a new string in the cache even if the cache already contains a string having the same content. In short &lt;code&gt;&quot;MyString&quot; == new String(&quot;MyString&quot;)&lt;/code&gt; will always return false.&lt;/p&gt;\n\n&lt;p&gt;Java also talks about the function intern() that can be used on a string to make it part of the cache so &lt;code&gt;&quot;MyString&quot; == new String(&quot;MyString&quot;).intern()&lt;/code&gt; will return true.&lt;/p&gt;\n\n&lt;p&gt;Note: == operator is much faster than equals just because you are comparing two memory addresses, but you need to be sure that the code isn&apos;t creating new String instances in the code. Otherwise you will encounter bugs.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);\nSystem.out.println(a == b); &lt;span class=&quot;hljs-comment&quot;&gt;// prints false&lt;/span&gt;\nSystem.out.println(a.equals(b)); &lt;span class=&quot;hljs-comment&quot;&gt;// prints true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Make sure you understand why.  It&apos;s because the &lt;code&gt;==&lt;/code&gt; comparison only compares references; the &lt;code&gt;equals()&lt;/code&gt; method does a character-by-character comparison of the contents.&lt;/p&gt;\n\n&lt;p&gt;When you call new for &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, each one gets a new reference that points to the &lt;code&gt;&quot;foo&quot;&lt;/code&gt; in the string table.  The references are different, but the content is the same.&lt;/p&gt;\n    ","\n&lt;p&gt;Yea, it&apos;s bad...&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; means that your two string references are exactly the same object. You may have heard that this is the case because Java keeps sort of a literal table (which it does), but that is not always the case. Some strings are loaded in different ways, constructed from other strings, etc., so you must never assume that two identical strings are stored in the same location.&lt;/p&gt;\n\n&lt;p&gt;Equals does the real comparison for you. &lt;/p&gt;\n    ","\n&lt;p&gt;Yes, &lt;code&gt;==&lt;/code&gt; is bad for comparing Strings (any objects really, unless you know they&apos;re canonical).  &lt;code&gt;==&lt;/code&gt; just compares object references.  &lt;code&gt;.equals()&lt;/code&gt; tests for equality. For Strings, often they&apos;ll be the same but as you&apos;ve discovered, that&apos;s not guaranteed always.&lt;/p&gt;\n    ","\n&lt;p&gt;Java have a String pool under which Java manages the memory allocation for the String objects. See &lt;a href=&quot;https://stackoverflow.com/questions/3801343/what-is-string-pool-in-java&quot;&gt;&lt;strong&gt;String Pools in Java&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;When you check (compare) two objects using the &lt;code&gt;==&lt;/code&gt; operator it compares the address equality into the string-pool. If the two String objects have the same address references then it returns &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;. But if you want to compare the contents of two String objects then you must override the &lt;code&gt;equals&lt;/code&gt; method.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;equals&lt;/code&gt; is actually the method of the Object class, but it is Overridden into the String class and a new definition is given which compares the contents of object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Example:\n    stringObjectOne.equals(stringObjectTwo);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But mind it respects the case of String. If you want case insensitive compare then you must go for the equalsIgnoreCase method of the String class. &lt;/p&gt;\n\n&lt;p&gt;Let&apos;s See:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;one&lt;/span&gt;   &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;; \n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;two&lt;/span&gt;   &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;; \n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;three&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;); \n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;four&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;; \n\none == two;   &lt;span class=&quot;hljs-comment&quot;&gt;// TRUE&lt;/span&gt;\none == three; &lt;span class=&quot;hljs-comment&quot;&gt;// FALSE&lt;/span&gt;\none == four;  &lt;span class=&quot;hljs-comment&quot;&gt;// FALSE&lt;/span&gt;\n\none.equals(two);            &lt;span class=&quot;hljs-comment&quot;&gt;// TRUE&lt;/span&gt;\none.equals(three);          &lt;span class=&quot;hljs-comment&quot;&gt;// TRUE&lt;/span&gt;\none.equals(four);           &lt;span class=&quot;hljs-comment&quot;&gt;// FALSE&lt;/span&gt;\none.equalsIgnoreCase(four); &lt;span class=&quot;hljs-comment&quot;&gt;// TRUE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I agree with the answer from zacherates.&lt;/p&gt;\n\n&lt;p&gt;But what you can do is to call &lt;code&gt;intern()&lt;/code&gt; on your non-literal strings.&lt;/p&gt;\n\n&lt;p&gt;From zacherates example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// ... but they are not the same object&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; ==&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you intern the non-literal String equality is &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;).intern() == &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; ==&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;==&lt;/code&gt; compares object references in Java&lt;/strong&gt;, and that is no exception for &lt;code&gt;String&lt;/code&gt; objects.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;For comparing the actual contents of objects (including &lt;code&gt;String&lt;/code&gt;), one must use the &lt;code&gt;equals&lt;/code&gt; method&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;If a comparison of two &lt;code&gt;String&lt;/code&gt; objects using &lt;code&gt;==&lt;/code&gt; turns out to be &lt;code&gt;true&lt;/code&gt;, that is because the &lt;code&gt;String&lt;/code&gt; objects were interned, and the Java Virtual Machine is having multiple references point to the same instance of &lt;code&gt;String&lt;/code&gt;. One should not expect that comparing one &lt;code&gt;String&lt;/code&gt; object containing the same contents as another &lt;code&gt;String&lt;/code&gt; object using &lt;code&gt;==&lt;/code&gt; to evaluate as &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;.equals()&lt;/code&gt; compares the data in a class (assuming the function is implemented).\n&lt;code&gt;==&lt;/code&gt; compares pointer locations (location of the object in memory).&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; returns true if both objects (NOT TALKING ABOUT PRIMITIVES) point to the SAME object instance.\n&lt;code&gt;.equals()&lt;/code&gt; returns true if the two objects contain the same data &lt;a href=&quot;http://www.java-samples.com/showtutorial.php?tutorialid=221&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;equals()&lt;/code&gt; Versus &lt;code&gt;==&lt;/code&gt; in Java&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;That may help you.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; performs a &lt;strong&gt;reference&lt;/strong&gt; equality check, whether the 2 objects (strings in this case) refer to the same object in the memory.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;equals()&lt;/code&gt; method will check whether the &lt;strong&gt;contents&lt;/strong&gt; or the &lt;strong&gt;states&lt;/strong&gt; of 2 objects are the same.&lt;/p&gt;\n&lt;p&gt;Obviously &lt;code&gt;==&lt;/code&gt; is faster, but will (might) give false results in many cases if you just want to tell if 2 &lt;code&gt;String&lt;/code&gt;s hold the same text.&lt;/p&gt;\n&lt;p&gt;Definitely the use of the &lt;code&gt;equals()&lt;/code&gt; method is recommended.&lt;/p&gt;\n&lt;p&gt;Don&apos;t worry about the performance. Some things to encourage using &lt;code&gt;String.equals()&lt;/code&gt;:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Implementation of &lt;code&gt;String.equals()&lt;/code&gt; first checks for reference equality (using &lt;code&gt;==&lt;/code&gt;), and if the 2 strings are the same by reference, no further calculation is performed!&lt;/li&gt;\n&lt;li&gt;If the 2 string references are not the same, &lt;code&gt;String.equals()&lt;/code&gt; will next check the lengths of the strings. This is also a fast operation because the &lt;code&gt;String&lt;/code&gt; class stores the length of the string, no need to count the characters or code points. If the lengths differ, no further check is performed, we know they cannot be equal.&lt;/li&gt;\n&lt;li&gt;Only if we got this far will the contents of the 2 strings be actually compared, and this will be a short-hand comparison: not all the characters will be compared, if we find a mismatching character (at the same position in the 2 strings), no further characters will be checked.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;When all is said and done, even if we have a guarantee that the strings are interns, using the &lt;code&gt;equals()&lt;/code&gt; method is still not that overhead that one might think, definitely the recommended way. If you want an efficient reference check, then use enums where it is guaranteed by the language specification and implementation that the same enum value will be the same object (by reference).&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re like me, when I first started using Java, I wanted to use the &quot;==&quot; operator to test whether two String instances were equal, but for better or worse, that&apos;s not the correct way to do it in Java.&lt;/p&gt;\n\n&lt;p&gt;In this tutorial I&apos;ll demonstrate several different ways to correctly compare Java strings, starting with the approach I use most of the time. At the end of this Java String comparison tutorial I&apos;ll also discuss why the &quot;==&quot; operator doesn&apos;t work when comparing Java strings.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Option 1: Java String comparison with the equals method&lt;/strong&gt;\nMost of the time (maybe 95% of the time) I compare strings with the equals method of the Java String class, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (string1.equals(string2))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This String equals method looks at the two Java strings, and if they contain the exact same string of characters, they are considered equal.&lt;/p&gt;\n\n&lt;p&gt;Taking a look at a quick String comparison example with the equals method, if the following test were run, the two strings would not be considered equal because the characters are not the exactly the same (the case of the characters is different):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;FOO&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (string1.equals(string2))\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this line will not print because the&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// java string equals method returns false:&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The two strings are the same.&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But, when the two strings contain the exact same string of characters, the equals method will return true, as in this example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// test for equality with the java string equals method&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (string1.equals(string2))\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this line WILL print&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The two strings are the same.&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Option 2: String comparison with the equalsIgnoreCase method&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In some string comparison tests you&apos;ll want to ignore whether the strings are uppercase or lowercase. When you want to test your strings for equality in this case-insensitive manner, use the equalsIgnoreCase method of the String class, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;FOO&quot;&lt;/span&gt;;\n\n &lt;span class=&quot;hljs-comment&quot;&gt;// java string compare while ignoring case&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (string1.equalsIgnoreCase(string2))\n {\n     &lt;span class=&quot;hljs-comment&quot;&gt;// this line WILL print&lt;/span&gt;\n     System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ignoring case, the two strings are the same.&quot;&lt;/span&gt;)\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Option 3: Java String comparison with the compareTo method&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;There is also a third, less common way to compare Java strings, and that&apos;s with the String class compareTo method. If the two strings are exactly the same, the compareTo method will return a value of 0 (zero). Here&apos;s a quick example of what this String comparison approach looks like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo bar&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo bar&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// java string compare example&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (string1.compareTo(string2) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this line WILL print&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The two strings are the same.&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While I&apos;m writing about this concept of equality in Java, it&apos;s important to note that the Java language includes an equals method in the base Java Object class. Whenever you&apos;re creating your own objects and you want to provide a means to see if two instances of your object are &quot;equal&quot;, you should override (and implement) this equals method in your class (in the same way the Java language provides this equality/comparison behavior in the String equals method).&lt;/p&gt;\n\n&lt;p&gt;You may want to have a look at this &lt;a href=&quot;http://www.ensta-paristech.fr/~diam/java/online/notes-java/data/expressions/22compareobjects.html&quot;&gt;==, .equals(), compareTo(), and compare()&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;simpleSimilarity&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String u, String v)&lt;/span&gt; {\n    String[] a = u.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n    String[] b = v.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;correct&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;minLen&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Math.min(a.length, b.length);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; minLen; i++) {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;aa&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; a[i];\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bb&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b[i];\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;minWordLength&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Math.min(aa.length(), bb.length());\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; minWordLength; j++) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (aa.charAt(j) == bb.charAt(j)) {\n                correct++;\n            }\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;) (((&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;) correct) / Math.max(u.length(), v.length()));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is the first string.&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;this is not 1st string!&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// for exact string comparison, use .equals&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;exact&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; a.equals(b);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// For similarity check, there are libraries for this&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Here I&apos;ll try a simple example I wrote&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;similarity&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; simple_similarity(a,b);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;==&lt;/code&gt; operator check if the two references point to the same object or not. &lt;code&gt;.equals()&lt;/code&gt; check for the actual string content (value).&lt;/p&gt;\n\n&lt;p&gt;Note that the &lt;code&gt;.equals()&lt;/code&gt; method belongs to class &lt;code&gt;Object&lt;/code&gt; (super class of all classes). You need to override it as per you class requirement, but for String it is already implemented, and it checks whether two strings have the same value or not.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Case 1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Stack Overflow&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Stack Overflow&quot;&lt;/span&gt;;\ns1 == s2;      &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\ns1.equals(s2); &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Reason: String literals created without null are stored in the String pool in the permgen area of heap. So both s1 and s2 point to same object in the pool.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Case 2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Stack Overflow&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Stack Overflow&quot;&lt;/span&gt;);\ns1 == s2;      &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\ns1.equals(s2); &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Reason: If you create a String object using the &lt;code&gt;new&lt;/code&gt; keyword a separate space is allocated to it on the heap.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; compares the reference value of objects whereas the &lt;code&gt;equals()&lt;/code&gt; method present in the &lt;code&gt;java.lang.String&lt;/code&gt; class compares the contents of the &lt;code&gt;String&lt;/code&gt; object (to another object).&lt;/p&gt;\n    ","\n&lt;p&gt;I think that when you define a &lt;code&gt;String&lt;/code&gt; you define an object. So you need to use &lt;code&gt;.equals()&lt;/code&gt;. When you use primitive data types you use &lt;code&gt;==&lt;/code&gt; but with &lt;code&gt;String&lt;/code&gt; (and any object) you must use &lt;code&gt;.equals()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If the &lt;code&gt;equals()&lt;/code&gt; method is present in the &lt;code&gt;java.lang.Object&lt;/code&gt; class, and it is expected to check for the equivalence of the state of objects! That means, the contents of the objects. Whereas the &lt;code&gt;==&lt;/code&gt; operator is expected to check the actual object instances are same or not.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Consider two different reference variables, &lt;code&gt;str1&lt;/code&gt; and &lt;code&gt;str2&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;str1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);\nstr2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you use the &lt;code&gt;equals()&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println((str1.equals(str2))?&lt;span class=&quot;hljs-string&quot;&gt;&quot;TRUE&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;FALSE&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You will get the output as &lt;code&gt;TRUE&lt;/code&gt; if you use &lt;code&gt;==&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println((str1==str2) ? &lt;span class=&quot;hljs-string&quot;&gt;&quot;TRUE&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;FALSE&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you will get the &lt;code&gt;FALSE&lt;/code&gt; as output, because both &lt;code&gt;str1&lt;/code&gt; and &lt;code&gt;str2&lt;/code&gt; are pointing to two different objects even though both of them share the same string content. It is because of &lt;code&gt;new String()&lt;/code&gt; a new object is created every time.&lt;/p&gt;\n    ","\n&lt;p&gt;Operator &lt;em&gt;==&lt;/em&gt; is always meant for &lt;strong&gt;object reference comparison&lt;/strong&gt;, whereas the String class &lt;em&gt;.equals()&lt;/em&gt; method is overridden for &lt;strong&gt;content comparison&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);\nSystem.out.println(s1 == s2); &lt;span class=&quot;hljs-comment&quot;&gt;// It prints false (reference comparison)&lt;/span&gt;\nSystem.out.println(s1.equals(s2)); &lt;span class=&quot;hljs-comment&quot;&gt;// It prints true (content comparison)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;All objects are guaranteed to have a &lt;code&gt;.equals()&lt;/code&gt; method since Object contains a method, &lt;code&gt;.equals()&lt;/code&gt;, that returns a boolean. It is the subclass&apos; job to override this method if a further defining definition is required. Without it (i.e. using &lt;code&gt;==&lt;/code&gt;) only memory addresses are checked between two objects for equality. String overrides this &lt;code&gt;.equals()&lt;/code&gt; method and instead of using the memory address it returns the comparison of strings at the character level for equality. &lt;/p&gt;\n\n&lt;p&gt;A key note is that strings are stored in one lump pool so once a string is created it is forever stored in a program at the same address. Strings do not change, they are immutable. This is why it is a bad idea to use regular string concatenation if you have a serious of amount of string processing to do. Instead you would use the &lt;code&gt;StringBuilder&lt;/code&gt; classes provided. Remember the pointers to this string can change and if you were interested to see if two pointers were the same &lt;code&gt;==&lt;/code&gt; would be a fine way to go. Strings themselves do not.&lt;/p&gt;\n    ","\n&lt;p&gt;You can also use the &lt;code&gt;compareTo()&lt;/code&gt; method to compare two Strings. If the compareTo result is 0, then the two strings are equal, otherwise the strings being compared are not equal. &lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;==&lt;/code&gt; compares the references and does not compare the actual strings. If you did create every string using &lt;code&gt;new String(somestring).intern()&lt;/code&gt; then you can use the &lt;code&gt;==&lt;/code&gt; operator to compare two strings, otherwise equals() or compareTo methods can only be used.&lt;/p&gt;\n    ","\n&lt;p&gt;In Java, when the &lt;code&gt;==&lt;/code&gt; operator is used to compare 2 objects, it checks to see if the objects refer to the same place in memory. In other words, it checks to see if the 2 object names are basically references to the same memory location.&lt;/p&gt;\n&lt;p&gt;The Java &lt;code&gt;String&lt;/code&gt; class actually overrides the default &lt;code&gt;equals()&lt;/code&gt; implementation in the &lt;code&gt;Object&lt;/code&gt; class  and it overrides the method so that it checks only the values of the strings, not their locations in memory.\nThis means that if you call the &lt;code&gt;equals()&lt;/code&gt; method to compare 2 &lt;code&gt;String&lt;/code&gt; objects, then as long as the actual sequence of characters is equal, both objects are considered equal.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The &lt;code&gt;==&lt;/code&gt; operator checks if the two strings are exactly the same object.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The &lt;code&gt;.equals()&lt;/code&gt; method  check if the two strings have the same value.&lt;/p&gt;\n&lt;/blockquote&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also its good to know that, if you are overridding .equals () method, make sure you are overridding .hashcode () method, otherwise you will end up with violating equivalence relation b/w equals and hashcode. For more info refer java doc.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/588747/nageswaran&quot; title=&quot;7,003 reputation&quot; class=&quot;comment-user&quot;&gt;Nageswaran&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29455790_513832&quot;&gt;&lt;span title=&quot;2013-11-06 12:44:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 6, 2013 at 12:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Leaving a link to my explanation on why &lt;code&gt;==&lt;/code&gt; works the way it does on Objects: &lt;a href=&quot;http://stackoverflow.com/a/19966154/2284641&quot;&gt;stackoverflow.com/a/19966154/2284641&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2284641/johannes-h&quot; title=&quot;5,795 reputation&quot; class=&quot;comment-user&quot;&gt;Johannes H.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29723884_513832&quot;&gt;&lt;span title=&quot;2013-11-14 02:00:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 14, 2013 at 2:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;==&lt;/code&gt; will work some of the time, as java has a String pool, where it tries to reuse memory references of commonly used strings. But &lt;code&gt;==&lt;/code&gt; compares that objects are equal, not the values... so &lt;code&gt;.equals()&lt;/code&gt; is the proper use you want to use.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1190934/james-oravec&quot; title=&quot;18,341 reputation&quot; class=&quot;comment-user&quot;&gt;James Oravec&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29762356_513832&quot;&gt;&lt;span title=&quot;2013-11-14 23:17:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 14, 2013 at 23:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Never use == to test whether Strings are the same, unless you enjoy  tracking down subtle errors and studying the intricacies of the Java String interning process. &lt;code&gt;&quot;12&quot;==&quot;1&quot;+2&lt;/code&gt; is false (probably)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2744663/flight-odyssey&quot; title=&quot;2,257 reputation&quot; class=&quot;comment-user&quot;&gt;Flight Odyssey&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31072763_513832&quot;&gt;&lt;span title=&quot;2013-12-23 06:04:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 23, 2013 at 6:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If == checks for reference equality why does n==5 make sense? 5 is not a variable&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11056419/not-euler&quot; title=&quot;115 reputation&quot; class=&quot;comment-user&quot;&gt;Not Euler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105969230_513839&quot;&gt;&lt;span title=&quot;2020-01-26 21:44:36Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 26, 2020 at 21:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@HritRoy Because &lt;code&gt;==&lt;/code&gt; checks the &lt;i&gt;value&lt;/i&gt; of a variable. When you have an object, the variable that references the object has the object&apos;s reference as &lt;i&gt;value&lt;/i&gt;. Thus, you compare the &lt;i&gt;references&lt;/i&gt; when comparing two variables with &lt;code&gt;==&lt;/code&gt;. When comparing a primitive data type such as &lt;code&gt;int&lt;/code&gt;, it&apos;s still the same case. A variable of type &lt;code&gt;int&lt;/code&gt; has the integer as value. Thus, you compare the values of two &lt;code&gt;int&lt;/code&gt;s using &lt;code&gt;==&lt;/code&gt;. If the &lt;code&gt;int&lt;/code&gt; is the value of a variable or a magic number doesn&apos;t matter. &lt;i&gt;In addition:&lt;/i&gt; A &lt;i&gt;reference&lt;/i&gt; is nothing but a number that refers to the memory.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12323248/akuzminykh&quot; title=&quot;4,252 reputation&quot; class=&quot;comment-user&quot;&gt;akuzminykh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107545921_513839&quot;&gt;&lt;span title=&quot;2020-03-21 08:54:48Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 21, 2020 at 8:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 4 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I would add that even when you know your strings are interned, you &lt;i&gt;should&lt;/i&gt; use &lt;code&gt;equals&lt;/code&gt; because it&apos;s more obviously correct. Or, you should use an enum instead of strings.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12299000/kaya3&quot; title=&quot;41,394 reputation&quot; class=&quot;comment-user&quot;&gt;kaya3&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment119235252_513839&quot;&gt;&lt;span title=&quot;2021-05-09 15:13:22Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 9, 2021 at 15:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Given that the class name is plural (&lt;code&gt;Objects&lt;/code&gt;) and the names are taken from English, I find it jarring that they kept the name &lt;code&gt;.equals&lt;/code&gt; for the method rather than changing it to &lt;code&gt;.equal&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/523612/karl-knechtel&quot; title=&quot;57,128 reputation&quot; class=&quot;comment-user&quot;&gt;Karl Knechtel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121685713_513839&quot;&gt;&lt;span title=&quot;2021-08-19 20:40:36Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 19, 2021 at 20:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;i&gt;Sometimes it looks as if &quot;==&quot; compares values,&lt;/i&gt; -- &lt;code&gt;==&lt;/code&gt; &lt;i&gt;do&lt;/i&gt; always compare values! (It&apos;s just that certain values are references!)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/276052/aioobe&quot; title=&quot;400,714 reputation&quot; class=&quot;comment-user&quot;&gt;aioobe&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15404047_513935&quot;&gt;&lt;span title=&quot;2012-07-24 12:44:24Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 24, 2012 at 12:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Alas, there is no static method for isNullOrEmpty(), and no custom overloading of operators, which makes this part of Java clunkier than in C# or Python. And since Java doesn&apos;t have extension methods, you can&apos;t write your own utility to extend java.lang.String. Right? Any thoughts on subclassing String, adding that static utility method, and then always using MyString instead? A static method with two parameters for doing null-safe comparisons would be nice to have in that subclass too.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1593924/jon-coombs&quot; title=&quot;1,924 reputation&quot; class=&quot;comment-user&quot;&gt;Jon Coombs&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment37587768_513935&quot;&gt;&lt;span title=&quot;2014-06-20 01:00:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 20, 2014 at 1:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Groovy makes this a little easier with the &lt;b&gt;safe navigation operator&lt;/b&gt; (&lt;a href=&quot;http://groovy.codehaus.org/Operators#Operators-SafeNavigationOperator(?.)&quot; rel=&quot;nofollow noreferrer&quot;&gt;groovy.codehaus.org/&lt;/a&gt;), &lt;code&gt;?.&lt;/code&gt;.  That would convert &lt;code&gt;nullString1?.equals(nullString2);&lt;/code&gt; into an entirely null statement.  However, it doesn&apos;t help if you have &lt;code&gt;validString?.equals(nullString);&lt;/code&gt; -- that still throws an exception.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1110820/charles-wood&quot; title=&quot;814 reputation&quot; class=&quot;comment-user&quot;&gt;Charles Wood&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment37768459_513935&quot;&gt;&lt;span title=&quot;2014-06-25 16:28:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 25, 2014 at 16:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Short methods to compare nullable strings in java: &lt;a href=&quot;http://stackoverflow.com/questions/11271554/compare-two-strings-in-java-with-possible-null-values&quot; title=&quot;compare two strings in java with possible null values&quot;&gt;stackoverflow.com/questions/11271554/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/603516/vadzim&quot; title=&quot;23,195 reputation&quot; class=&quot;comment-user&quot;&gt;Vadzim&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46276948_513935&quot;&gt;&lt;span title=&quot;2015-03-12 17:19:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 12, 2015 at 17:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JonCoombs Java supports the subclassing and creating own  method. However few classes are marked final due to certain reasons, String is one of them so we cannot extend. We can create other class and make utility class there which take two string as arguments and implement our logic there. Also for null check some other libraries like spring and apache he good collections of methods, one can use that.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3617127/panther&quot; title=&quot;3,234 reputation&quot; class=&quot;comment-user&quot;&gt;Panther&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment47320289_513935&quot;&gt;&lt;span title=&quot;2015-04-12 05:05:47Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 12, 2015 at 5:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;.equals() compares the two instances however equals is implemented to compare them.  That might or might not be comparing the output of toString.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/287156/jacob&quot; title=&quot;168 reputation&quot; class=&quot;comment-user&quot;&gt;Jacob&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59795767_14123474&quot;&gt;&lt;span title=&quot;2016-03-18 02:14:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 18, 2016 at 2:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Jacob Object class &lt;code&gt;.equals()&lt;/code&gt; method compares the instances(references/Address) where as String class &lt;code&gt;.equals()&lt;/code&gt; methods is overridden to compare content(chars)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1800583/kittu&quot; title=&quot;6,190 reputation&quot; class=&quot;comment-user&quot;&gt;kittu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment61719279_14123474&quot;&gt;&lt;span title=&quot;2016-05-07 10:54:24Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 7, 2016 at 10:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Good pointing out String pool versus Java heap differences as they are certainly &lt;b&gt;not&lt;/b&gt; the same. In the string pool Java tries to &quot;cache&quot; &lt;code&gt;String&lt;/code&gt; objects to save memory footprint as &lt;code&gt;String&lt;/code&gt; is known for being immutable (I hope, I say it correctly here). Also check &lt;a href=&quot;https://stackoverflow.com/questions/3052442/what-is-the-difference-between-text-and-new-stringtext&quot; title=&quot;what is the difference between text and new stringtext&quot;&gt;stackoverflow.com/questions/3052442/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8401926/roland&quot; title=&quot;167 reputation&quot; class=&quot;comment-user&quot;&gt;Roland&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment81397685_14123474&quot;&gt;&lt;span title=&quot;2017-11-10 13:34:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 10, 2017 at 13:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Generally I strongly recommend apache commons library: &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/StringUtils.html#equals(java.lang.String&quot; rel=&quot;nofollow noreferrer&quot;&gt;commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/&lt;/a&gt;, java.lang.String)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/995199/marcin-erbel&quot; title=&quot;1,507 reputation&quot; class=&quot;comment-user&quot;&gt;Marcin Erbel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41453709_513855&quot;&gt;&lt;span title=&quot;2014-10-16 10:32:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 16, 2014 at 10:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I see that this is a late answer to big question. May I ask what it provides that isn&apos;t already mentioned in the existing answers?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/922184/mysticial&quot; title=&quot;454,026 reputation&quot; class=&quot;comment-user&quot;&gt;Mysticial&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment22399495_15760319&quot;&gt;&lt;span title=&quot;2013-04-02 09:19:49Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 2, 2013 at 9:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Mysticial he has added &lt;code&gt;equalsIgnoreCase&lt;/code&gt; which might be informative for the fresher.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1115584/amitg&quot; title=&quot;10,039 reputation&quot; class=&quot;comment-user&quot;&gt;AmitG&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment22479383_15760319&quot;&gt;&lt;span title=&quot;2013-04-04 08:48:41Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 4, 2013 at 8:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is generally not a good idea.  Interning is relatively expensive and can (paradoxically) &amp;gt;&amp;gt;increase&amp;lt;&amp;lt; your JVMs memory footprint and increase GC costs.  In most cases, these outweigh the performance benefits from using &lt;code&gt;==&lt;/code&gt; for string comparison.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/139985/stephen-c&quot; title=&quot;672,235 reputation&quot; class=&quot;comment-user&quot;&gt;Stephen C&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment53422601_515000&quot;&gt;&lt;span title=&quot;2015-09-25 23:16:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 25, 2015 at 23:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;Obviously == is faster&lt;/code&gt; -- actually the implementation of &lt;code&gt;.equals(String)&lt;/code&gt; first checks &lt;code&gt;==&lt;/code&gt; before anything else so I would say the speed is about identical.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2359945/razzle-shazl&quot; title=&quot;1,251 reputation&quot; class=&quot;comment-user&quot;&gt;Razzle Shazl&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment88959248_15681710&quot;&gt;&lt;span title=&quot;2018-06-22 06:38:58Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 22, 2018 at 6:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;public boolean equals(Object anObject) {         if (this == anObject) {         return true;     } ...&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2359945/razzle-shazl&quot; title=&quot;1,251 reputation&quot; class=&quot;comment-user&quot;&gt;Razzle Shazl&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment88959564_15681710&quot;&gt;&lt;span title=&quot;2018-06-22 06:51:12Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 22, 2018 at 6:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;for string literals Like String string1 = &quot;foo bar&quot;; String string2 = &quot;foo bar&quot;; you can directly use == operator to test content equality&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2204672/java&quot; title=&quot;506 reputation&quot; class=&quot;comment-user&quot;&gt;JAVA&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27507817_17040504&quot;&gt;&lt;span title=&quot;2013-09-07 18:11:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 7, 2013 at 18:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In google apps script &quot;compareTo&quot; is not possibe. I tried instaed &quot;equals&quot; This was the only solution that works....&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3887038/rob&quot; title=&quot;147 reputation&quot; class=&quot;comment-user&quot;&gt;Rob&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment87019913_17040504&quot;&gt;&lt;span title=&quot;2018-04-24 12:40:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 24, 2018 at 12:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Links shared in the end are no longer available, you may want change it?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/163585/spats&quot; title=&quot;775 reputation&quot; class=&quot;comment-user&quot;&gt;spats&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125694742_17040504&quot;&gt;&lt;span title=&quot;2022-02-14 00:19:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 14 at 0:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How does this differ from other answers? and why do it the way you suggest&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/151019/mmmmmm&quot; title=&quot;31,474 reputation&quot; class=&quot;comment-user&quot;&gt;mmmmmm&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment52863057_15599387&quot;&gt;&lt;span title=&quot;2015-09-10 12:27:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 10, 2015 at 12:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Mark The question on difference between &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;equals&lt;/code&gt; was already answered by other solutions, I just offered a different way to compare strings in a loose way&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2128327/khaled-k&quot; title=&quot;5,708 reputation&quot; class=&quot;comment-user&quot;&gt;Khaled.K&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment52881656_15599387&quot;&gt;&lt;span title=&quot;2015-09-10 20:45:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 10, 2015 at 20:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;not to be nit picky, but the &lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/lang/String.java#String.equals%28java.lang.Object%29&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;equals()&lt;/code&gt;&lt;/a&gt; method for &lt;code&gt;String&lt;/code&gt; is actually in the &lt;code&gt;String&lt;/code&gt; class, not in &lt;code&gt;Object&lt;/code&gt;. The default &lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/lang/Object.java#Object.equals%28java.lang.Object%29&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;equals()&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;Object&lt;/code&gt; would not compare that the contents are the same, and in fact just returns true when the reference is the same.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3340/jacob-schoen&quot; title=&quot;13,724 reputation&quot; class=&quot;comment-user&quot;&gt;Jacob Schoen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18439716_10117865&quot;&gt;&lt;span title=&quot;2012-11-20 17:04:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 20, 2012 at 17:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JacobSchoen : The above link does not work anymore as GrepCode is down. Here is the alternative for equals Implementation : [Inline Link] (&lt;a href=&quot;https://zgrepcode.com/java/openjdk/10.0.2/java.base/java/lang/string.java#L-1000&quot; rel=&quot;nofollow noreferrer&quot;&gt;zgrepcode.com/java/openjdk/10.0.2/java.base/java/lang/&lt;/a&gt;)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/771226/amandeep-singh&quot; title=&quot;3,526 reputation&quot; class=&quot;comment-user&quot;&gt;Amandeep Singh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95583588_10117865&quot;&gt;&lt;span title=&quot;2019-01-27 06:16:12Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 27, 2019 at 6:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;char[]&quot; isn&apos;t a primitive data type! It&apos;s an array of &quot;char&quot;. And arrays aren&apos;t primitive data types theirselves.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/112670/christian&quot; title=&quot;6,734 reputation&quot; class=&quot;comment-user&quot;&gt;Christian&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46491019_14208295&quot;&gt;&lt;span title=&quot;2015-03-18 21:02:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 18, 2015 at 21:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;i&gt;&quot;once a string is created it is forever stored in a program at the same address&quot;&lt;/i&gt; - This is flat-out wrong. Only compile-time constant string expressions (possibly involving &lt;code&gt;final String&lt;/code&gt; variables) and strings that your program explicitly interns are stored in what you call a &quot;lump pool&quot;. All other &lt;code&gt;String&lt;/code&gt; objects are subject to garbage collection once there are no more live references to them, just like any other type of object. Also, while immutability is required for the whole interning mechanism to work, it&apos;s otherwise irrelevant to this.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/535871/ted-hopp&quot; title=&quot;227,907 reputation&quot; class=&quot;comment-user&quot;&gt;Ted Hopp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment35120561_12242166&quot;&gt;&lt;span title=&quot;2014-04-10 18:13:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 10, 2014 at 18:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;String comparison is done either through equals or equalsIgnoreCase method which actually compares the contents of the string. But == sign just check the reference values. For string literals from string pool will work fine for this case. String s1 = new String(&quot;a&quot;); String s2 = new String(&quot;a&quot;); in this case s1==s2 is false, but s1.equals(s2) is true.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2550410/shailendra-singh&quot; title=&quot;455 reputation&quot; class=&quot;comment-user&quot;&gt;Shailendra Singh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63960261_12242166&quot;&gt;&lt;span title=&quot;2016-07-08 15:31:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 8, 2016 at 15:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;unless one of them is null, since s.equals(s2) will crash if s is null, causing the comparison to fail. Of course, this doesn&apos;t really contradict the answer; it&apos;s just a caveat.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1593924/jon-coombs&quot; title=&quot;1,924 reputation&quot; class=&quot;comment-user&quot;&gt;Jon Coombs&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment37587845_21112002&quot;&gt;&lt;span title=&quot;2014-06-20 01:05:22Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 20, 2014 at 1:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;No, it won&apos;t crash, it will throw a NullPointerException, causing the comparison to not take place.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/729513/bludzee&quot; title=&quot;2,614 reputation&quot; class=&quot;comment-user&quot;&gt;Bludzee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59255510_21112002&quot;&gt;&lt;span title=&quot;2016-03-04 09:51:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 4, 2016 at 9:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":8,"title":"How do I compare strings in Java?","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                    &lt;div class=&quot;flex--item mr8&quot;&gt;\n                        &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLock&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M16 9a2 2 0 0 0-2-2V6A5 5 0 0 0 4 6v1a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V9Zm-7 5a2 2 0 1 1 0-4 2 2 0 0 1 0 4Zm3.1-7H5.9V6a3.1 3.1 0 0 1 6.2 0v1Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;This question&apos;s answers are a &lt;a href=&quot;/help/privileges/edit-community-wiki&quot;&gt;community effort&lt;/a&gt;&lt;/b&gt;. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;I&apos;ve been using the &lt;code&gt;==&lt;/code&gt; operator in my program to compare all my strings so far.\nHowever, I ran into a bug, changed one of them into &lt;code&gt;.equals()&lt;/code&gt; instead, and it fixed the bug.&lt;/p&gt;\n\n&lt;p&gt;Is &lt;code&gt;==&lt;/code&gt; bad? When should it and should it not be used? What&apos;s the difference?&lt;/p&gt;\n    ","slug":"how-do-i-compare-strings-in-java-1657384243187","postType":"QUESTION","createdAt":"2022-07-09T16:30:43.000Z","updatedAt":"2022-07-09T16:30:43.000Z","tags":[{"id":26,"name":"string","slug":"string","createdAt":"2022-07-09T16:30:43.000Z","updatedAt":"2022-07-09T16:30:43.000Z","Questions_Tags":{"questionId":8,"tagId":26}}]}]}},"__N_SSG":true}