{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;The field annotated &lt;code&gt;@Autowired&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; because Spring doesn&apos;t know about the copy of &lt;code&gt;MileageFeeCalculator&lt;/code&gt; that you created with &lt;code&gt;new&lt;/code&gt; and didn&apos;t know to autowire it.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html&quot;&gt;The Spring Inversion of Control (IoC) container&lt;/a&gt; has three main logical components: a registry (called the &lt;code&gt;ApplicationContext&lt;/code&gt;) of components (beans) that are available to be used by the application, a configurer system that injects objects&apos; dependencies into them by matching up the dependencies with beans in the context, and a dependency solver that can look at a configuration of many different beans and determine how to instantiate and configure them in the necessary order.&lt;/p&gt;\n\n&lt;p&gt;The IoC container isn&apos;t magic, and it has no way of knowing about Java objects unless you somehow inform it of them. When you call &lt;code&gt;new&lt;/code&gt;, the JVM instantiates a copy of the new object and hands it straight to you--it never goes through the configuration process. There are three ways that you can get your beans configured.&lt;/p&gt;\n\n&lt;p&gt;I have posted all of this code, using Spring Boot to launch, at &lt;a href=&quot;https://github.com/chrylis/spring_autowired_npe_example&quot;&gt;this GitHub project&lt;/a&gt;; you can look at a full running project for each approach to see everything you need to make it work. &lt;strong&gt;Tag with the &lt;code&gt;NullPointerException&lt;/code&gt;: &lt;a href=&quot;https://github.com/chrylis/spring_autowired_npe_example/tree/nonworking&quot;&gt;&lt;code&gt;nonworking&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;h2&gt;Inject your beans&lt;/h2&gt;\n\n&lt;p&gt;The most preferable option is to let Spring autowire all of your beans; this requires the least amount of code and is the most maintainable. To make the autowiring work like you wanted, also autowire the &lt;code&gt;MileageFeeCalculator&lt;/code&gt; like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Controller&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MileageFeeController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; MileageFeeCalculator calc;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(&quot;/mileage/{miles}&quot;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@ResponseBody&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mileageFee&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; miles)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; calc.mileageCharge(miles);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you need to create a new instance of your service object for different requests, you can still use injection by using &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-scopes&quot;&gt;the Spring bean scopes&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Tag that works by injecting the &lt;code&gt;@MileageFeeCalculator&lt;/code&gt; service object: &lt;a href=&quot;https://github.com/chrylis/spring_autowired_npe_example/tree/working-inject-bean&quot;&gt;&lt;code&gt;working-inject-bean&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;h2&gt;Use @Configurable&lt;/h2&gt;\n\n&lt;p&gt;If you really need objects created with &lt;code&gt;new&lt;/code&gt; to be autowired, you can &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-atconfigurable&quot;&gt;use the Spring &lt;code&gt;@Configurable&lt;/code&gt; annotation along with AspectJ compile-time weaving&lt;/a&gt; to inject your objects. This approach inserts code into your object&apos;s constructor that alerts Spring that it&apos;s being created so that Spring can configure the new instance. This requires a bit of configuration in your build (such as compiling with &lt;code&gt;ajc&lt;/code&gt;) and turning on Spring&apos;s runtime configuration handlers (&lt;code&gt;@EnableSpringConfigured&lt;/code&gt; with the JavaConfig syntax). This approach is used by the Roo Active Record system to allow &lt;code&gt;new&lt;/code&gt; instances of your entities to get the necessary persistence information injected.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Service&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@Configurable&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MileageFeeCalculator&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; MileageRateService rateService;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mileageCharge&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; miles)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (miles * rateService.ratePerMile());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Tag that works by using &lt;code&gt;@Configurable&lt;/code&gt; on the service object: &lt;a href=&quot;https://github.com/chrylis/spring_autowired_npe_example/tree/working-configurable&quot;&gt;&lt;code&gt;working-configurable&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;h2&gt;Manual bean lookup: not recommended&lt;/h2&gt;\n\n&lt;p&gt;This approach is suitable only for interfacing with legacy code in special situations. It is nearly always preferable to create a singleton adapter class that Spring can autowire and the legacy code can call, but it is possible to directly ask the Spring application context for a bean.&lt;/p&gt;\n\n&lt;p&gt;To do this, you need a class to which Spring can give a reference to the &lt;code&gt;ApplicationContext&lt;/code&gt; object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ApplicationContextHolder&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ApplicationContextAware&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; ApplicationContext context;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setApplicationContext&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ApplicationContext applicationContext)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; BeansException {\n        context = applicationContext;   \n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; ApplicationContext &lt;span class=&quot;hljs-title function_&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; context;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then your legacy code can call &lt;code&gt;getContext()&lt;/code&gt; and retrieve the beans it needs:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Controller&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MileageFeeController&lt;/span&gt; {    \n    &lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(&quot;/mileage/{miles}&quot;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@ResponseBody&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mileageFee&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; miles)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;MileageFeeCalculator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;calc&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ApplicationContextHolder.getContext().getBean(MileageFeeCalculator.class);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; calc.mileageCharge(miles);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Tag that works by manually looking up the service object in the Spring context: &lt;a href=&quot;https://github.com/chrylis/spring_autowired_npe_example/tree/working-manual-lookup&quot;&gt;&lt;code&gt;working-manual-lookup&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you are not coding a web application, make sure your class in which @Autowiring is done is a spring bean. Typically, spring container won&apos;t be aware of the class which we might think of as a spring bean. We have to tell the Spring container about our spring classes.&lt;/p&gt;\n\n&lt;p&gt;This can be achieved by configuring in appln-contxt or &lt;strong&gt;the better way&lt;/strong&gt; is to annotate class as &lt;strong&gt;@Component&lt;/strong&gt; and please do not create the annotated class using new operator.\nMake sure you get it from Appln-context as below.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyDemo&lt;/span&gt; {\n\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; MyService  myService; \n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; args\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;);\n            ApplicationContext ctx=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ClassPathXmlApplicationContext&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;spring.xml&quot;&lt;/span&gt;);\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ctx&amp;gt;&amp;gt;&quot;&lt;/span&gt;+ctx);\n\n            Customer c1=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n            MyDemo myDemo=ctx.getBean(MyDemo.class);\n            System.out.println(myDemo);\n            myDemo.callService(ctx);\n\n\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callService&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ApplicationContext ctx)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;---callService---&quot;&lt;/span&gt;);\n        System.out.println(myService);\n        myService.callMydao();\n\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Actually, you should use either JVM managed Objects or Spring-managed Object to invoke methods.\nfrom your above code in your controller class, you are creating a new object to call your service class which has an auto-wired object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;MileageFeeCalculator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;calc&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MileageFeeCalculator&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;so it won&apos;t work that way. &lt;/p&gt;\n\n&lt;p&gt;The solution makes this MileageFeeCalculator as an auto-wired object in the Controller itself.&lt;/p&gt;\n\n&lt;p&gt;Change your Controller class like below.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Controller&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MileageFeeController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;\n    MileageFeeCalculator calc;  \n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(&quot;/mileage/{miles}&quot;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@ResponseBody&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mileageFee&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; miles)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; calc.mileageCharge(miles);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I once encountered the same issue when I was &lt;em&gt;not quite used to the life in the IoC world&lt;/em&gt;. The &lt;code&gt;@Autowired&lt;/code&gt; field of one of my beans is null at runtime.&lt;/p&gt;\n&lt;p&gt;The root cause is, instead of using the auto-created bean maintained by the Spring IoC container (whose &lt;code&gt;@Autowired&lt;/code&gt; field is indeed properly injected), I am &lt;code&gt;new&lt;/code&gt;ing my own instance of that bean type and using it. Of course this one&apos;s &lt;code&gt;@Autowired&lt;/code&gt; field is null because Spring has no chance to inject it.&lt;/p&gt;\n    ","\n&lt;p&gt;Your problem is new (object creation in java style)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;MileageFeeCalculator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;calc&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MileageFeeCalculator&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With annotation &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Configuration&lt;/code&gt; beans are created in the&lt;br&gt;\n    application context of Spring when server is started. But when we create objects \n    using new operator the object is not registered in  application context which  is already created. For Example Employee.java class i have used.&lt;/p&gt;\n\n&lt;p&gt;Check this out:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ConfiguredTenantScopedBeanProcessor&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BeanFactoryPostProcessor&lt;/span&gt; {\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;postProcessBeanFactory&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ConfigurableListableBeanFactory beanFactory)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; BeansException {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;tenant&quot;&lt;/span&gt;;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bean factory post processor is initialized&quot;&lt;/span&gt;); \n    beanFactory.registerScope(&lt;span class=&quot;hljs-string&quot;&gt;&quot;employee&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;());\n\n    Assert.state(beanFactory &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; BeanDefinitionRegistry,\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;BeanFactory was not a BeanDefinitionRegistry, so CustomScope cannot be used.&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;BeanDefinitionRegistry&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;registry&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (BeanDefinitionRegistry) beanFactory;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String beanName : beanFactory.getBeanDefinitionNames()) {\n        &lt;span class=&quot;hljs-type&quot;&gt;BeanDefinition&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;definition&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; beanFactory.getBeanDefinition(beanName);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (name.equals(definition.getScope())) {\n            &lt;span class=&quot;hljs-type&quot;&gt;BeanDefinitionHolder&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;proxyHolder&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ScopedProxyUtils.createScopedProxy(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BeanDefinitionHolder&lt;/span&gt;(definition, beanName), registry, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n            registry.registerBeanDefinition(beanName, proxyHolder.getBeanDefinition());\n        }\n    }\n}\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It seems to be rare case but here is what happened to me:&lt;/p&gt;\n\n&lt;p&gt;We used &lt;code&gt;@Inject&lt;/code&gt; instead of &lt;code&gt;@Autowired&lt;/code&gt; which is javaee standard supported by Spring. Every places it worked fine and the beans injected correctly, instead of one place. The bean injection seems the same&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Inject&lt;/span&gt;\nCalculator myCalculator\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;At last we found that the error was that we (actually, the Eclipse auto complete feature) imported &lt;code&gt;com.opensymphony.xwork2.Inject&lt;/code&gt; instead of &lt;code&gt;javax.inject.Inject&lt;/code&gt; !&lt;/p&gt;\n\n&lt;p&gt;So to summarize, make sure that your annotations (&lt;code&gt;@Autowired&lt;/code&gt;, &lt;code&gt;@Inject&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt; ,... ) have correct packages!&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;I&apos;m new to Spring, but I discovered this working solution. Please tell me if it&apos;s a deprecable way.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;I make Spring inject &lt;code&gt;applicationContext&lt;/code&gt; in this bean:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.ApplicationContext;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.stereotype.Component;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SpringUtils&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; ApplicationContext ctx;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Make Spring inject the application context\n     * and save it on a static variable,\n     * so that it can be accessed from any point in the application. \n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setApplicationContext&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ApplicationContext applicationContext)&lt;/span&gt; {\n        ctx = applicationContext;       \n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can put this code also in the main application class if you want.&lt;/p&gt;\n\n&lt;p&gt;Other classes can use it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;MyBean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myBean&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (MyBean)SpringUtils.ctx.getBean(MyBean.class);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this way &lt;strong&gt;any bean can be obtained by any object in the application&lt;/strong&gt; (also intantiated with &lt;code&gt;new&lt;/code&gt;) and &lt;strong&gt;in a static way&lt;/strong&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;What hasn&apos;t been mentioned here is described in &lt;a href=&quot;https://technology.amis.nl/2018/02/22/java-how-to-fix-spring-autowired-annotation-not-working-issues/&quot; rel=&quot;noreferrer&quot;&gt;this&lt;/a&gt; article in the paragraph &quot;Order of execution&quot;.&lt;/p&gt;\n\n&lt;p&gt;After &quot;learning&quot; that I had to annotate a class with @Component or the derivatives @Service or @Repository (I guess there are more), to autowire other components inside them, it struck me that these other components still were null inside the constructor of the parent component.&lt;/p&gt;\n\n&lt;p&gt;Using @PostConstruct solves that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SpringBootApplication&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Application&lt;/span&gt; {\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt; MyComponent comp;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyComponent&lt;/span&gt; {\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt; ComponentDAO dao;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// dao is null here&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@PostConstruct&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// dao is initialized here&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;One of the below will work :&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;The class where you are using @Autowired is not a Bean (You may have used new() somewhere I am sure).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Inside the SpringConfig class you have not mentioned the packages the Spring should look for @Component ( I am talking about @ComponentScan(basePackages&quot;here&quot;) )&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;If above two don&apos;t work .... start putting System.out.println() and figure out where it is going wrong.&lt;/p&gt;\n    ","\n&lt;p&gt;Another solution would be putting call:\n&lt;code&gt;SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this)&lt;/code&gt;&lt;br&gt;\nTo MileageFeeCalculator constructor like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Service&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MileageFeeCalculator&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; MileageRateService rateService; &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;--- will be autowired when constructor is called&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MileageFeeCalculator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;)\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mileageCharge&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; miles)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (miles * rateService.ratePerMile()); \n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In simple words there are mainly two reasons for an &lt;code&gt;@Autowired&lt;/code&gt; field to be &lt;code&gt;null&lt;/code&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;YOUR CLASS IS NOT A  SPRING BEAN.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;THE FIELD IS NOT A BEAN.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;If this is happening in a test class, make sure you haven&apos;t forgotten to annotate the class.&lt;/p&gt;\n\n&lt;p&gt;For example, in &lt;strong&gt;Spring Boot&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RunWith(SpringRunner.class)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@SpringBootTest&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyTests&lt;/span&gt; {\n    ....\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Some time elapses...&lt;/h2&gt;\n\n&lt;p&gt;Spring Boot &lt;a href=&quot;https://spring.io/blog/2016/04/15/testing-improvements-in-spring-boot-1-4&quot; rel=&quot;nofollow noreferrer&quot;&gt;continues to evolve&lt;/a&gt;.  It is no longer required to use &lt;code&gt;@RunWith&lt;/code&gt; &lt;em&gt;if you use the correct version of JUnit&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;For &lt;code&gt;@SpringBootTest&lt;/code&gt; to work stand alone, you need to use &lt;code&gt;@Test&lt;/code&gt; from &lt;a href=&quot;https://stackoverflow.com/q/48853312&quot;&gt;JUnit5 instead of JUnit4&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//import org.junit.Test; // JUnit4&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.jupiter.api.Test; &lt;span class=&quot;hljs-comment&quot;&gt;// JUnit5&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@SpringBootTest&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyTests&lt;/span&gt; {\n    ....\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you get this configuration wrong your tests will compile, but &lt;code&gt;@Autowired&lt;/code&gt; and &lt;code&gt;@Value&lt;/code&gt; fields (for example) will be &lt;code&gt;null&lt;/code&gt;.  Since Spring Boot operates by magic, you may have few avenues for directly debugging this failure.&lt;/p&gt;\n    ","\n&lt;p&gt;I think you have missed to instruct spring to scan classes with annotation. &lt;/p&gt;\n\n&lt;p&gt;You can use &lt;code&gt;@ComponentScan(&quot;packageToScan&quot;)&lt;/code&gt; on the configuration class of your spring application to instruct spring to scan.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;@Service, @Component&lt;/code&gt; etc annotations add meta description.\n&lt;br&gt; &lt;/p&gt;\n\n&lt;p&gt;Spring only injects instances of those classes which are either created as bean or marked with annotation.&lt;/p&gt;\n\n&lt;p&gt;Classes marked with annotation need to be identified by spring before injecting, &lt;code&gt;@ComponentScan&lt;/code&gt; instruct spring look for the classes marked with annotation. When Spring finds &lt;code&gt;@Autowired&lt;/code&gt; it searches for the related bean, and injects the required instance.&lt;/p&gt;\n\n&lt;p&gt;Adding annotation only, does not fix or facilitate the dependency injection, Spring needs to know where to look for.&lt;/p&gt;\n    ","\n&lt;p&gt;This is the culprit of giving NullPointerException &lt;code&gt;MileageFeeCalculator calc = new MileageFeeCalculator();&lt;/code&gt; We are using Spring - don&apos;t need to create object manually. Object creation will be taken care of by IoC container.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Really smart people were quick to point on &lt;a href=&quot;https://stackoverflow.com/a/13177782/2583044&quot;&gt;this&lt;/a&gt; answer, which explains the weirdness, described below&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;ORIGINAL ANSWER:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I don&apos;t know if it helps anyone, but I was stuck with the same problem even while doing things seemingly right. In my Main method, I have a code like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ClassPathXmlApplicationContext&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;common.xml&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;token.xml&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;pep-config.xml&quot;&lt;/span&gt; });\n    &lt;span class=&quot;hljs-type&quot;&gt;TokenInitializer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ti&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; context.getBean(TokenInitializer.class);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and in a &lt;code&gt;token.xml&lt;/code&gt; file I&apos;ve had a line&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;context:component-scan base-&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;package.path&quot;&lt;/span&gt;/&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I noticed that the package.path does no longer exist, so I&apos;ve just dropped the line for good. &lt;/p&gt;\n\n&lt;p&gt;And after that, NPE started coming in. In a &lt;code&gt;pep-config.xml&lt;/code&gt; I had just 2 beans: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;bean id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;someAbac&quot;&lt;/span&gt; class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.pep.SomeAbac&quot;&lt;/span&gt; init-method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;init&quot;&lt;/span&gt;/&amp;gt;\n&amp;lt;bean id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;settings&quot;&lt;/span&gt; class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.pep.Settings&quot;&lt;/span&gt;/&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and SomeAbac class has a property declared as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Settings settings;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;for some unknown reason, settings is &lt;em&gt;null&lt;/em&gt; in init(), when &lt;code&gt;&amp;lt;context:component-scan/&amp;gt;&lt;/code&gt; element is not present at all, but when it&apos;s present and has some bs as a basePackage, everything works well. This line now looks like this: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;context:component-scan base-&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;some.shit&quot;&lt;/span&gt;/&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and it works. May be someone can provide an explanation, but for me it&apos;s enough right now )&lt;/p&gt;\n    ","\n&lt;p&gt;You can also fix this issue using @Service annotation on service class and passing the required bean classA as a parameter to the other beans classB constructor and annotate the constructor of classB with @Autowired. Sample snippet here :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Service&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ClassB&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; ClassA classA;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ClassB&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ClassA classA)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.classA = classA;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useClassAObjectHere&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n        classA.callMethodOnObjectA();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Also note that if, for whatever reason, you make a method in a &lt;code&gt;@Service&lt;/code&gt; as &lt;code&gt;final&lt;/code&gt;, the autowired beans you will access from it will always be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This is only valid in case of Unit test.&lt;/p&gt;\n\n&lt;p&gt;My Service class had an annotation of service and it was &lt;code&gt;@autowired&lt;/code&gt; another component class. When I tested the component class was coming null. Because for service class I was creating the object using &lt;code&gt;new&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;If you are writing unit test make sure you are not creating object using &lt;code&gt;new object()&lt;/code&gt;. Use instead injectMock.&lt;/p&gt;\n\n&lt;p&gt;This fixed my issue. Here is a useful &lt;a href=&quot;https://www.moreofless.co.uk/spring-mvc-java-autowired-component-null-repository-service/&quot; rel=&quot;nofollow noreferrer&quot;&gt;link&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Not entirely related to the question, but if the field injection is null, the constructor based injection will still work fine. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; OrderingClient orderingClient;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Sales2Client sales2Client;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Settings2Client settings2Client;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;BrinkWebTool&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(OrderingClient orderingClient, Sales2Client sales2Client, Settings2Client settings2Client)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.orderingClient = orderingClient;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.sales2Client = sales2Client;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.settings2Client = settings2Client;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In addition, don&apos;t inject to a &lt;code&gt;static&lt;/code&gt; member, it will be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;if you are using a &lt;code&gt;private&lt;/code&gt; method, it will be &lt;code&gt;null&lt;/code&gt;, try to change &lt;code&gt;private&lt;/code&gt; to &lt;code&gt;public&lt;/code&gt; in controller.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Another scenario can be when bean &lt;code&gt;F&lt;/code&gt; is called inside the constructor of another bean &lt;code&gt;S&lt;/code&gt;. In this case pass the required bean &lt;code&gt;F&lt;/code&gt; as a parameter to the other beans &lt;code&gt;S&lt;/code&gt; constructor and annotate the constructor of &lt;code&gt;S&lt;/code&gt; with &lt;code&gt;@Autowire&lt;/code&gt;. Remember to annotate the class of the first bean &lt;code&gt;F&lt;/code&gt; with &lt;code&gt;@Component&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/332788/aliopi&quot; title=&quot;3,412 reputation&quot; class=&quot;comment-user&quot;&gt;aliopi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55074706_19896870&quot;&gt;&lt;span title=&quot;2015-11-11 12:36:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 11, 2015 at 12:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I coded up a few examples very similar to this one using Gradle here: &lt;a href=&quot;https://github.com/swimorsink/spring-aspectj-examples&quot; rel=&quot;nofollow noreferrer&quot;&gt;github.com/swimorsink/spring-aspectj-examples&lt;/a&gt;. Hopefully someone will find it useful.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/619175/ross117&quot; title=&quot;1,010 reputation&quot; class=&quot;comment-user&quot;&gt;Ross117&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93466170_19896870&quot;&gt;&lt;span title=&quot;2018-11-14 02:33:54Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 14, 2018 at 2:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The other thing to look at is making objects for beans in a &lt;code&gt;@Configuration&lt;/code&gt; bean, where the method to make an instance of a particular bean class is annotated with &lt;code&gt;@Bean&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/301832/donal-fellows&quot; title=&quot;126,727 reputation&quot; class=&quot;comment-user&quot;&gt;Donal Fellows&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29601116_19896871&quot;&gt;&lt;span title=&quot;2013-11-11 00:12:22Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 11, 2013 at 0:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@DonalFellows I&apos;m not entirely sure what you&apos;re talking about (&quot;making&quot; is ambiguous). Are you talking about a problem with multiple calls to &lt;code&gt;@Bean&lt;/code&gt; methods when using Spring Proxy AOP?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1189885/chrylis-cautiouslyoptimistic&quot; title=&quot;72,212 reputation&quot; class=&quot;comment-user owner&quot;&gt;chrylis -cautiouslyoptimistic-&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29601172_19896871&quot;&gt;&lt;span title=&quot;2013-11-11 00:16:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 11, 2013 at 0:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Hi there, I am running into a similar issue, however when I use your first suggestion, my application thinks &quot;calc&quot; is null when calling the &quot;mileageFee&quot; method. It&apos;s as if it never initializes the &lt;code&gt;@Autowired MileageFeeCalculator calc&lt;/code&gt;. Any thoughts?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3734863/theo&quot; title=&quot;883 reputation&quot; class=&quot;comment-user&quot;&gt;Theo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment38392568_19896871&quot;&gt;&lt;span title=&quot;2014-07-14 22:00:57Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 14, 2014 at 22:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I think you should add an entry at the top of your answer that explains that retrieving the first bean, the root from which you do everything, should be done through the &lt;code&gt;ApplicationContext&lt;/code&gt;. Some users (for which I&apos;ve closed as duplicates) don&apos;t understand this.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/438154/sotirios-delimanolis&quot; title=&quot;264,777 reputation&quot; class=&quot;comment-user&quot;&gt;Sotirios Delimanolis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41515654_19896871&quot;&gt;&lt;span title=&quot;2014-10-18 01:39:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 18, 2014 at 1:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Correct me if I&apos;m wrong but specifying both the &lt;code&gt;@Service&lt;/code&gt; and &lt;code&gt;@Configurable&lt;/code&gt; annotations on the &lt;code&gt;MilegageFeeCalculator&lt;/code&gt; might be incorrect, as per the Spring AOP &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-atconfigurable&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation&lt;/a&gt;: &lt;i&gt;...make sure that you &lt;b&gt;do not use &lt;code&gt;@Configurable&lt;/code&gt; on bean classes which are registered as regular Spring beans&lt;/b&gt; with the container: You would get double initialization otherwise, once through the container and once through the aspect.&lt;/i&gt; So in essence, you should only pick one of them.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1021943/priidu-neemre&quot; title=&quot;2,674 reputation&quot; class=&quot;comment-user&quot;&gt;Priidu Neemre&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment52622678_19896871&quot;&gt;&lt;span title=&quot;2015-09-03 12:42:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 3, 2015 at 12:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 6 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;hi , I gone through your solution, that&apos;s correct . And Here I would like to know &quot; Why we don&apos;t create instance of annotated class using new operator, may I know the reason behind that.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1643741/ashish&quot; title=&quot;184 reputation&quot; class=&quot;comment-user&quot;&gt;Ashish&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment43789460_23212378&quot;&gt;&lt;span title=&quot;2014-12-29 11:30:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 29, 2014 at 11:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;if u create the object using new, u will be handling the life cycle of the bean which contradicts the concept of IOC. We need to ask the container to do it, which does it in  a better way&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1577000/shirish-coolkarni&quot; title=&quot;907 reputation&quot; class=&quot;comment-user&quot;&gt;Shirish Coolkarni&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment52111835_23212378&quot;&gt;&lt;span title=&quot;2015-08-20 03:04:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 20, 2015 at 3:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is the answer. Because you&apos;re instantiating a new MilageFeeCalculator on your own, Spring isn&apos;t involved in the instantiation, so Spring spring has no knowledge the object exists. Thus, it can&apos;t do anything to it, like inject dependencies.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/391936/cyotee-doge&quot; title=&quot;1,119 reputation&quot; class=&quot;comment-user&quot;&gt;cyotee doge&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79574832_38585975&quot;&gt;&lt;span title=&quot;2017-09-19 17:27:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 19, 2017 at 17:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This one helped me forever!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8921265/abdulbasith&quot; title=&quot;139 reputation&quot; class=&quot;comment-user&quot;&gt;Abdulbasith&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125863396_33672798&quot;&gt;&lt;span title=&quot;2022-02-21 10:33:52Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 21 at 10:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This pattern is necessary to make Spring beans accessible to legacy code but should be avoided in new code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1189885/chrylis-cautiouslyoptimistic&quot; title=&quot;72,212 reputation&quot; class=&quot;comment-user owner&quot;&gt;chrylis -cautiouslyoptimistic-&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48577813_30237725&quot;&gt;&lt;span title=&quot;2015-05-14 13:06:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 14, 2015 at 13:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In my case i required this because there were few third party classes. Spring (IOC) didn&apos;t have the control on them. These classes were never called from my spring boot app. I followed this approach and it worked for me.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4584374/joginder-malik&quot; title=&quot;425 reputation&quot; class=&quot;comment-user&quot;&gt;Joginder Malik&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109823319_30237725&quot;&gt;&lt;span title=&quot;2020-05-29 20:49:06Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 29, 2020 at 20:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I used the new() in my code and that caused the problem. I need to use that new(). But also need to use @Autowire in that new Class. How to do that.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9651249/soumik-das&quot; title=&quot;106 reputation&quot; class=&quot;comment-user&quot;&gt;Soumik Das&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117858463_64523265&quot;&gt;&lt;span title=&quot;2021-03-17 11:40:03Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 17, 2021 at 11:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You don&apos;t need to do new ! You can simply declare the class variable and use @ Autowire above it. You also have to make sure you have included @ Component above the class (e.g. above class ABC { ... }) which you want to autowire. It will work :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12125692/ashutosh-tiwari&quot; title=&quot;1,136 reputation&quot; class=&quot;comment-user&quot;&gt;Ashutosh Tiwari&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117941061_64523265&quot;&gt;&lt;span title=&quot;2021-03-20 08:51:51Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 20, 2021 at 8:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This uses unsafe publication.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1189885/chrylis-cautiouslyoptimistic&quot; title=&quot;72,212 reputation&quot; class=&quot;comment-user owner&quot;&gt;chrylis -cautiouslyoptimistic-&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment47675445_29771111&quot;&gt;&lt;span title=&quot;2015-04-21 12:41:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 21, 2015 at 12:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See also: &lt;a href=&quot;https://stackoverflow.com/questions/4130486/spring-value-annotation-always-evaluating-as-null&quot; title=&quot;spring value annotation always evaluating as null&quot;&gt;stackoverflow.com/questions/4130486/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/86967/brent-bradburn&quot; title=&quot;47,117 reputation&quot; class=&quot;comment-user&quot;&gt;Brent Bradburn&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment108115966_49803576&quot;&gt;&lt;span title=&quot;2020-04-09 02:01:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 9, 2020 at 2:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note: &lt;code&gt;@Value&lt;/code&gt; will be null when used with &lt;code&gt;static&lt;/code&gt; fields.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/86967/brent-bradburn&quot; title=&quot;47,117 reputation&quot; class=&quot;comment-user&quot;&gt;Brent Bradburn&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment108115970_49803576&quot;&gt;&lt;span title=&quot;2020-04-09 02:02:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 9, 2020 at 2:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Spring provides numerous ways to fail (with no help from the compiler).  When things go wrong, your best bet is to return to square one -- using only the combination of annotations that you know will work together.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/86967/brent-bradburn&quot; title=&quot;47,117 reputation&quot; class=&quot;comment-user&quot;&gt;Brent Bradburn&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109912445_49803576&quot;&gt;&lt;span title=&quot;2020-06-02 07:01:16Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 2, 2020 at 7:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;ran into this when i forgot to add &lt;code&gt;&amp;lt;context:component-scan base-package=&quot;com.mypackage&quot;/&amp;gt;&lt;/code&gt; to my &lt;code&gt;beans.xml&lt;/code&gt; file&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/84130/ralph-callaway&quot; title=&quot;1,708 reputation&quot; class=&quot;comment-user&quot;&gt;Ralph Callaway&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94111517_41575363&quot;&gt;&lt;span title=&quot;2018-12-05 05:33:43Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 5, 2018 at 5:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;a href=&quot;https://stackoverflow.com/a/13177782/2684760&quot;&gt;That answer&lt;/a&gt; is the explanation. &lt;code&gt;&amp;lt;context:component-scan/&amp;gt;&lt;/code&gt; implicitly enables &lt;code&gt;&amp;lt;context:annotation-config/&amp;gt;&lt;/code&gt; necessary for the &lt;code&gt;@Autowired&lt;/code&gt; to work.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2684760/fornever&quot; title=&quot;6,434 reputation&quot; class=&quot;comment-user&quot;&gt;ForNeVeR&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment80350376_46701560&quot;&gt;&lt;span title=&quot;2017-10-12 04:55:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 12, 2017 at 4:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;this worked for me bu t can you please elaborate on how this is solving the issue ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6949235/cruelengine&quot; title=&quot;2,511 reputation&quot; class=&quot;comment-user&quot;&gt;CruelEngine&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment85227077_40028588&quot;&gt;&lt;span title=&quot;2018-03-05 12:58:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 5, 2018 at 12:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@CruelEngine, look this is constructor injection (where you explicitly setting an object) instead of just using field injection (this is mostly done by spring configuration mostly). So if you are creating a object of ClassB using &quot;new&quot; operator is some other scope then that would not be visible or autowired set for ClassA. Hence, while calling classB.useClassAObjectHere() would throw NPE as classA object was not autowired if you just declare field Injection. Read chrylis is trying to explain same. And this why constructor injection is recommended over field injection. Does it make sense now ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1435014/abhishek&quot; title=&quot;1,450 reputation&quot; class=&quot;comment-user&quot;&gt;Abhishek&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86555831_40028588&quot;&gt;&lt;span title=&quot;2018-04-11 08:45:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 11, 2018 at 8:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I dont think access modifiers have anything to do here&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9796935/ennth&quot; title=&quot;1,334 reputation&quot; class=&quot;comment-user&quot;&gt;ennth&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120652930_64535116&quot;&gt;&lt;span title=&quot;2021-07-06 09:15:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 6, 2021 at 9:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":128,"title":"Why is my Spring @Autowired field null?","content":"\n                \n&lt;p&gt;&lt;em&gt;Note: This is intended to be a canonical answer for a common problem.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;I have a Spring &lt;code&gt;@Service&lt;/code&gt; class (&lt;code&gt;MileageFeeCalculator&lt;/code&gt;) that has an &lt;code&gt;@Autowired&lt;/code&gt; field (&lt;code&gt;rateService&lt;/code&gt;), but the field is &lt;code&gt;null&lt;/code&gt; when I try to use it. The logs show that both the &lt;code&gt;MileageFeeCalculator&lt;/code&gt; bean and the &lt;code&gt;MileageRateService&lt;/code&gt; bean are being created, but I get a &lt;code&gt;NullPointerException&lt;/code&gt; whenever I try to call the &lt;code&gt;mileageCharge&lt;/code&gt; method on my service bean. Why isn&apos;t Spring autowiring the field?&lt;/p&gt;\n\n&lt;p&gt;Controller class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Controller&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MileageFeeController&lt;/span&gt; {    \n    &lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(&quot;/mileage/{miles}&quot;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@ResponseBody&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mileageFee&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; miles)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;MileageFeeCalculator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;calc&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MileageFeeCalculator&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; calc.mileageCharge(miles);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Service class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Service&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MileageFeeCalculator&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; MileageRateService rateService; &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;--- should be autowired, is null&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mileageCharge&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; miles)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (miles * rateService.ratePerMile()); &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;--- throws NPE&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Service bean that should be autowired in &lt;code&gt;MileageFeeCalculator&lt;/code&gt; but it isn&apos;t:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Service&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MileageRateService&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ratePerMile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.565f&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When I try to &lt;code&gt;GET /mileage/3&lt;/code&gt;, I get this exception:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;java.lang.NullPointerException: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n    at com.chrylis.example.spring_autowired_npe.MileageFeeCalculator.mileageCharge(MileageFeeCalculator.java:&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;)\n    at com.chrylis.example.spring_autowired_npe.MileageFeeController.mileageFee(MileageFeeController.java:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;)\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"why-is-my-spring-@autowired-field-null-1657384705291","postType":"QUESTION","createdAt":"2022-07-09T16:38:25.000Z","updatedAt":"2022-07-09T16:38:25.000Z","tags":[{"id":467,"name":"autowired","slug":"autowired","createdAt":"2022-07-09T16:38:25.000Z","updatedAt":"2022-07-09T16:38:25.000Z","Questions_Tags":{"questionId":128,"tagId":467}}]}]}},"__N_SSG":true}