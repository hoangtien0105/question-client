{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;&lt;strong&gt;If you only have two choices to select from:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = np.where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)})\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = np.where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yields&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;  color\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   Z    A  green\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   Z    B  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   X    B    red\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   Y    C    red\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;If you have more than two conditions then use &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.select.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;np.select&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;. For example, if you want &lt;code&gt;color&lt;/code&gt; to be &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;yellow&lt;/code&gt; when &lt;code&gt;(df[&apos;Set&apos;] == &apos;Z&apos;) &amp;amp; (df[&apos;Type&apos;] == &apos;A&apos;)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;otherwise &lt;code&gt;blue&lt;/code&gt; when &lt;code&gt;(df[&apos;Set&apos;] == &apos;Z&apos;) &amp;amp; (df[&apos;Type&apos;] == &apos;B&apos;)&lt;/code&gt; &lt;/li&gt;\n&lt;li&gt;otherwise &lt;code&gt;purple&lt;/code&gt; when &lt;code&gt;(df[&apos;Type&apos;] == &apos;B&apos;)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;otherwise &lt;code&gt;black&lt;/code&gt;,&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;then use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)})\nconditions = [\n    (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;) &amp;amp; (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;),\n    (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;) &amp;amp; (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;),\n    (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;)]\nchoices = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;purple&apos;&lt;/span&gt;]\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = np.select(conditions, choices, default=&lt;span class=&quot;hljs-string&quot;&gt;&apos;black&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which yields&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;   color\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   Z    A  yellow\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   Z    B    blue\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   X    B  purple\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   Y    C   black\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;List comprehension is another way to create another column conditionally. If you are working with object dtypes in columns, like in your example, list comprehensions typically outperform most other methods.&lt;/p&gt;\n\n&lt;p&gt;Example list comprehension:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;%timeit tests:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)})\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]]\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = np.where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;239&lt;/span&gt; µs per loop\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;523&lt;/span&gt; µs per loop\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;263&lt;/span&gt; µs per loop\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another way in which this could be achieved is &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The following is slower than the approaches timed &lt;a href=&quot;https://stackoverflow.com/a/31173785/1878788&quot;&gt;here&lt;/a&gt;, but we can compute the extra column based on the contents of more than one column, and more than two values can be computed for the extra column.&lt;/p&gt;\n\n&lt;p&gt;Simple example using just the &quot;Set&quot; column:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;set_color&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;row&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; row[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Set&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;\n\ndf = df.assign(color=df.apply(set_color, axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;  Set Type  color\n0   Z    A    red\n1   Z    B    red\n2   X    B  green\n3   Y    C  green\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example with more colours and more columns taken into account:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;set_color&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;row&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; row[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Set&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; row[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Type&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;\n\ndf = df.assign(color=df.apply(set_color, axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;  Set Type  color\n0   Z    A    red\n1   Z    B    red\n2   X    B  green\n3   Y    C   blue\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Edit (21/06/2019): Using plydata&lt;/h3&gt;\n\n&lt;p&gt;It is also possible to use &lt;a href=&quot;https://github.com/has2k1/plydata&quot; rel=&quot;noreferrer&quot;&gt;plydata&lt;/a&gt; to do this kind of things (this seems even slower than using &lt;code&gt;assign&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;, though).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; plydata &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; define, if_else\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Simple &lt;code&gt;if_else&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = define(df, color=if_else(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set==&quot;Z&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;red&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;green&quot;&apos;&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;  Set Type  color\n0   Z    A    red\n1   Z    B    red\n2   X    B  green\n3   Y    C  green\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Nested &lt;code&gt;if_else&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = define(df, color=if_else(\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set==&quot;Z&quot;&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;red&quot;&apos;&lt;/span&gt;,\n    if_else(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type==&quot;C&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;green&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;blue&quot;&apos;&lt;/span&gt;)))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)                            \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;  Set Type  color\n0   Z    A    red\n1   Z    B    red\n2   X    B   blue\n3   Y    C  green\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s yet another way to skin this cat, using a dictionary to map new values onto the keys in the list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;map_values&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;row, values_dict&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; values_dict[row]\n\nvalues_dict = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;INDICATOR&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;VALUE&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]})\n\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;NEW_VALUE&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;INDICATOR&apos;&lt;/span&gt;].apply(map_values, args = (values_dict,))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What&apos;s it look like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df\nOut[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: \n  INDICATOR  VALUE  NEW_VALUE\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;         A     &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         B      &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;         C      &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;         D      &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This approach can be very powerful when you have many &lt;code&gt;ifelse&lt;/code&gt;-type statements to make (i.e. many unique values to replace).&lt;/p&gt;\n\n&lt;p&gt;And of course you could always do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;NEW_VALUE&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;INDICATOR&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(values_dict)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But that approach is more than three times as slow as the &lt;code&gt;apply&lt;/code&gt; approach from above, on my machine.&lt;/p&gt;\n\n&lt;p&gt;And you could also do this, using &lt;code&gt;dict.get&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;NEW_VALUE&apos;&lt;/span&gt;] = [values_dict.get(v, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;INDICATOR&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can simply use the powerful &lt;code&gt;.loc&lt;/code&gt; method and use one condition or several depending on your need (tested with pandas=1.0.5).&lt;/p&gt;\n&lt;p&gt;Code Summary:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=pd.DataFrame(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;A B B C&apos;&lt;/span&gt;.split(), &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z Z X Y&apos;&lt;/span&gt;.split()))\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;\ndf.loc[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#practice!&lt;/span&gt;\ndf.loc[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;)&amp;amp;(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;)|(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;purple&quot;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Explanation:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=pd.DataFrame(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;A B B C&apos;&lt;/span&gt;.split(), &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z Z X Y&apos;&lt;/span&gt;.split()))\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# df so far: &lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  \n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    A   Z \n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    B   Z \n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   X \n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    C   Y\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;add a &apos;color&apos; column and set all values to &quot;red&quot;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Apply your single condition:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.loc[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# df: &lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  Color\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    A   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    B   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   X    red\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    C   Y    red\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or multiple conditions if you want:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.loc[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;)&amp;amp;(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;)|(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;purple&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can read on Pandas logical operators and conditional selection here:\n&lt;a href=&quot;https://stackoverflow.com/questions/21415661/logical-operators-for-boolean-indexing-in-pandas&quot;&gt;Logical operators for boolean indexing in Pandas&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can use pandas methods &lt;a href=&quot;http://pandas.pydata.org/docs/reference/api/pandas.Series.where.html#pandas.Series.where&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;where&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://pandas.pydata.org/docs/reference/api/pandas.Series.mask.html#pandas.Series.mask&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;mask&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;].where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, other=&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# Replace values where the condition is False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;].mask(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, other=&lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# Replace values where the condition is True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively, you can use the method &lt;code&gt;transform&lt;/code&gt; with a lambda function:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;].transform(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  color\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    B   X    red\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    C   Y    red\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Performance comparison from @chai:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;})\n \n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color1&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color1&apos;&lt;/span&gt;].where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color2&apos;&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]]\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color3&apos;&lt;/span&gt;] = np.where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color4&apos;&lt;/span&gt;] = df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;397&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\n&lt;span class=&quot;hljs-number&quot;&gt;976&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;241&lt;/span&gt; ms per loop\n&lt;span class=&quot;hljs-number&quot;&gt;673&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;139&lt;/span&gt; ms per loop\n&lt;span class=&quot;hljs-number&quot;&gt;796&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;182&lt;/span&gt; ms per loop\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One liner with &lt;code&gt;.apply()&lt;/code&gt; method is following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;].apply(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; set_: &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; set_==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After that, &lt;code&gt;df&lt;/code&gt; data frame looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  color\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    A   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    B   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   X    red\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    C   Y    red\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;if you have only &lt;strong&gt;2 choices&lt;/strong&gt;, use &lt;code&gt;np.where()&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)})\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;] = np.where(df.A&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;yes&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;no&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;if you have over &lt;strong&gt;2 choices&lt;/strong&gt;, maybe &lt;code&gt;apply()&lt;/code&gt; could work\ninput&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;arr = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and arr is&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    A   B   C   D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   a   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   b   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   c   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;if you want the column E tobe &lt;code&gt;if arr.A ==&apos;a&apos; then arr.B elif arr.A==&apos;b&apos; then arr.C elif arr.A == &apos;c&apos; then arr.D else something_else&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;arr[&lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;] = arr.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;(x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;(x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1234&lt;/span&gt;)), axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and finally the arr is&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    A   B   C   D   E\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   a   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   b   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   c   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;If you&apos;re working with massive data, a memoized approach would be best:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# First create a dictionary of manually stored values&lt;/span&gt;\ncolor_dict = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Second, build a dictionary of &quot;other&quot; values&lt;/span&gt;\ncolor_dict_other = {x:&lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;].unique() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; color_dict.keys()}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Next, merge the two&lt;/span&gt;\ncolor_dict.update(color_dict_other)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Finally, map it to your column&lt;/span&gt;\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(color_dict)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;This approach will be fastest when you have many repeated values.&lt;/em&gt; My general rule of thumb is to memoize when: &lt;code&gt;data_size&lt;/code&gt; &amp;gt; &lt;code&gt;10**4&lt;/code&gt; &amp;amp; &lt;code&gt;n_distinct&lt;/code&gt; &amp;lt; &lt;code&gt;data_size/4&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;E.x. Memoize in a case 10,000 rows with 2,500 or fewer distinct values.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;https://pyjanitor-devs.github.io/pyjanitor/reference/janitor.functions/janitor.case_when.html#janitor.case_when&quot; rel=&quot;nofollow noreferrer&quot;&gt;case_when&lt;/a&gt; function from &lt;a href=&quot;https://pyjanitor-devs.github.io/pyjanitor/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;pyjanitor&lt;/a&gt; is a wrapper around &lt;code&gt;pd.Series.mask&lt;/code&gt; and offers a chainable/convenient form for multiple conditions:&lt;/p&gt;\n&lt;p&gt;For a single condition:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.case_when(\n    df.col1 == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;,  &lt;span class=&quot;hljs-comment&quot;&gt;# condition&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;,         &lt;span class=&quot;hljs-comment&quot;&gt;# value if True&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;,           &lt;span class=&quot;hljs-comment&quot;&gt;# value if False&lt;/span&gt;\n    column_name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;color&quot;&lt;/span&gt;\n    )\n\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  color\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    B   X    red\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    C   Y    red\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For multiple conditions:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.case_when(\n    df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;) &amp;amp; df.&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;# condition, result&lt;/span&gt;\n    df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;) &amp;amp; df.&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;,   &lt;span class=&quot;hljs-comment&quot;&gt;# condition, result&lt;/span&gt;\n    df.&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;purple&apos;&lt;/span&gt;,                  &lt;span class=&quot;hljs-comment&quot;&gt;# condition, result&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;black&apos;&lt;/span&gt;,              &lt;span class=&quot;hljs-comment&quot;&gt;# default if none of the conditions evaluate to True&lt;/span&gt;\n    column_name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;  \n)\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;  &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;   color\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A   Z  yellow\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   Z    blue\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    B   X  purple\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    C   Y   black\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;More examples can be found &lt;a href=&quot;https://github.com/pyjanitor-devs/pyjanitor/blob/dev/examples/notebooks/case_when.ipynb&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A Less verbose approach using &lt;code&gt;np.select&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = np.array([[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;X&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y&apos;&lt;/span&gt;]])\ndf = pd.DataFrame(a,columns=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;])\n\nconditions = [\n    df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;\n]\n\noutputs = [\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;\n    ]\n             &lt;span class=&quot;hljs-comment&quot;&gt;# conditions Z is Green, Red Otherwise.&lt;/span&gt;\nres = np.select(conditions, outputs, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;)\nres \narray([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;], dtype=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;U5&apos;&lt;/span&gt;)\ndf.insert(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;new_column&apos;&lt;/span&gt;,res)    \n\ndf\n    &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;    &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; new_column\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   A   Z   Green\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   B   Z   Green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   B   X   Red\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   C   Y   Red\n\ndf.to_numpy()    \n    \narray([[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;],\n       [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;],\n       [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;X&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;],\n       [&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;]], dtype=&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;)\n\n%%timeit conditions = [df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;] \noutputs = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;] \nnp.select(conditions, outputs, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;134&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;9.71&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n\ndf2 = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;})\n%%timeit conditions = [df2[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;] \noutputs = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;] \nnp.select(conditions, outputs, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;188&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;26.5&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;what is the reason for having to use numpy?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1079002/cikatomo&quot; title=&quot;1,559 reputation&quot; class=&quot;comment-user&quot;&gt;cikatomo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118100469_19913845&quot;&gt;&lt;span title=&quot;2021-03-26 03:59:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 26, 2021 at 3:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s the library &lt;code&gt;pandas&lt;/code&gt; was built with. As it already has this functionality there&apos;s no need for &lt;code&gt;pandas&lt;/code&gt; to implement it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5491375/aydow&quot; title=&quot;3,496 reputation&quot; class=&quot;comment-user&quot;&gt;aydow&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120730869_19913845&quot;&gt;&lt;span title=&quot;2021-07-09 05:22:29Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 9, 2021 at 5:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This code now (January 2022) returns &lt;code&gt;A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5893454/luis&quot; title=&quot;1,258 reputation&quot; class=&quot;comment-user&quot;&gt;Luis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125065370_19913845&quot;&gt;&lt;span title=&quot;2022-01-17 16:48:50Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 17 at 16:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Luis , for your case, it&apos;s not related to the np.select function, but rather caused by how you assign new Series / DataFrame values.  And the message is simply a warning. Please check this out: &lt;a href=&quot;https://pandas.pydata.org/docs/user_guide/indexing.html#indexing-view-versus-copy&quot; rel=&quot;nofollow noreferrer&quot;&gt;pandas.pydata.org/docs/user_guide/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11000933/azhar&quot; title=&quot;53 reputation&quot; class=&quot;comment-user&quot;&gt;Azhar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128376343_19913845&quot;&gt;&lt;span title=&quot;2022-06-19 13:46:11Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 19 at 13:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that, with much larger dataframes (think &lt;code&gt;pd.DataFrame({&apos;Type&apos;:list(&apos;ABBC&apos;)*100000, &apos;Set&apos;:list(&apos;ZZXY&apos;)*100000})&lt;/code&gt;-size), &lt;code&gt;numpy.where&lt;/code&gt; outpaces &lt;code&gt;map&lt;/code&gt;, but the list comprehension is king (about 50% faster than &lt;code&gt;numpy.where&lt;/code&gt;).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5015569/blacksite&quot; title=&quot;11,146 reputation&quot; class=&quot;comment-user&quot;&gt;blacksite&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment74103959_31173785&quot;&gt;&lt;span title=&quot;2017-04-20 16:45:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 20, 2017 at 16:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Can the list comprehension method be used if the condition needs information from multiple columns? I am looking for something like this (this does not work): &lt;code&gt;df[&apos;color&apos;] = [&apos;red&apos; if (x[&apos;Set&apos;] == &apos;Z&apos;) &amp;amp; (x[&apos;Type&apos;] == &apos;B&apos;) else &apos;green&apos; for x in df]&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10370122/matti&quot; title=&quot;161 reputation&quot; class=&quot;comment-user&quot;&gt;Matti&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94824690_31173785&quot;&gt;&lt;span title=&quot;2019-01-01 06:42:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 1, 2019 at 6:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Add iterrows to the dataframe, then you can access multiple columns via row:  [&apos;red&apos; if (row[&apos;Set&apos;] == &apos;Z&apos;) &amp;amp; (row[&apos;Type&apos;] == &apos;B&apos;) else &apos;green&apos; for index, row in in df.iterrows()]&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1803298/cheekybastard&quot; title=&quot;5,285 reputation&quot; class=&quot;comment-user&quot;&gt;cheekybastard&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95178560_31173785&quot;&gt;&lt;span title=&quot;2019-01-14 01:38:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 14, 2019 at 1:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note this nice solution will not work if you need to take replacement values from another series in the data frame, such as &lt;code&gt;df[&apos;color_type&apos;] = np.where(df[&apos;Set&apos;]==&apos;Z&apos;, &apos;green&apos;, df[&apos;Type&apos;])&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2641825/paul-rougieux&quot; title=&quot;8,940 reputation&quot; class=&quot;comment-user&quot;&gt;Paul Rougieux&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102364666_31173785&quot;&gt;&lt;span title=&quot;2019-09-17 15:28:34Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2019 at 15:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@cheekybastard Or don&apos;t, since &lt;code&gt;.iterrows()&lt;/code&gt; is notoriously sluggish and the DataFrame shouldn&apos;t be modified while iterating.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11301900/amc&quot; title=&quot;2,546 reputation&quot; class=&quot;comment-user&quot;&gt;AMC&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106373265_31173785&quot;&gt;&lt;span title=&quot;2020-02-10 01:51:14Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 10, 2020 at 1:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How do we refer to other rows with this type of function? eg. &lt;code&gt;if row[&quot;Set&quot;].shift(1) == &quot;Z&quot;:&lt;/code&gt;, but that doesn&apos;t work&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4107349/chris-dixon&quot; title=&quot;649 reputation&quot; class=&quot;comment-user&quot;&gt;Chris Dixon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115250012_42113965&quot;&gt;&lt;span title=&quot;2020-12-07 22:29:19Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 7, 2020 at 22:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ChrisDixon As far as I know, &lt;code&gt;apply&lt;/code&gt; can only see a row or a column (depending on the axis chosen), but cannot see other rows or columns than the one currently processed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1878788/bli&quot; title=&quot;6,686 reputation&quot; class=&quot;comment-user&quot;&gt;bli&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115271309_42113965&quot;&gt;&lt;span title=&quot;2020-12-08 16:06:22Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 8, 2020 at 16:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I like this answer because it shows how to do multiple replacements of values&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5225453/monica-heddneck&quot; title=&quot;3,316 reputation&quot; class=&quot;comment-user&quot;&gt;Monica Heddneck&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment88914688_42260631&quot;&gt;&lt;span title=&quot;2018-06-21 00:16:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 21, 2018 at 0:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;i&gt;But that approach is more than three times as slow as the apply approach from above, on my machine.&lt;/i&gt; How did you benchmark these? From my quick measurements, the &lt;code&gt;.map()&lt;/code&gt; solution is ~10 times faster than &lt;code&gt;.apply()&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11301900/amc&quot; title=&quot;2,546 reputation&quot; class=&quot;comment-user&quot;&gt;AMC&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106373391_42260631&quot;&gt;&lt;span title=&quot;2020-02-10 02:05:33Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 10, 2020 at 2:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Update: On 100,000,000 rows, 52 string values, &lt;code&gt;.apply()&lt;/code&gt; takes 47 seconds, versus only 5.91 seconds for &lt;code&gt;.map()&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11301900/amc&quot; title=&quot;2,546 reputation&quot; class=&quot;comment-user&quot;&gt;AMC&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106373539_42260631&quot;&gt;&lt;span title=&quot;2020-02-10 02:18:59Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 10, 2020 at 2:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is also faster: import pandas as pd import numpy as np df = pd.DataFrame({&apos;Type&apos;:list(&apos;ABBC&apos;)*1000000, &apos;Set&apos;:list(&apos;ZZXY&apos;)*1000000}) %timeit df[&apos;color1&apos;] = &apos;red&apos;; df[&apos;color1&apos;].where(df[&apos;Set&apos;]==&apos;Z&apos;,&apos;green&apos;) %timeit df[&apos;color2&apos;] = [&apos;red&apos; if x == &apos;Z&apos; else &apos;green&apos; for x in df[&apos;Set&apos;]] %timeit df[&apos;color3&apos;] = np.where(df[&apos;Set&apos;]==&apos;Z&apos;, &apos;red&apos;, &apos;green&apos;) %timeit df[&apos;color4&apos;] = df.Set.map( lambda x: &apos;red&apos; if x == &apos;Z&apos; else &apos;green&apos;) 397 ms ± 101 ms per loop (mean ± std. dev. of 7 runs, 1 loop each) 976 ms ± 241 ms per loop  673 ms ± 139 ms per loop  796 ms ± 182 ms per loop&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14388214/chai&quot; title=&quot;146 reputation&quot; class=&quot;comment-user&quot;&gt;chai&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124631526_65760879&quot;&gt;&lt;span title=&quot;2021-12-28 09:28:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 28, 2021 at 9:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@chai added your evaluation to my answer. Thank you!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8973620/mykola-zotko&quot; title=&quot;12,508 reputation&quot; class=&quot;comment-user&quot;&gt;Mykola Zotko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124637064_65760879&quot;&gt;&lt;span title=&quot;2021-12-28 14:26:49Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 28, 2021 at 14:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Alright, so with only 2 distinct values to map, 100,000,000 rows, it takes 6.67 seconds to run without &quot;memoization&quot;, and 9.86 seconds with.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11301900/amc&quot; title=&quot;2,546 reputation&quot; class=&quot;comment-user&quot;&gt;AMC&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106373684_59238705&quot;&gt;&lt;span title=&quot;2020-02-10 02:31:57Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 10, 2020 at 2:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;100,000,000 rows, 52 distinct values, where 1 of those maps to the first output value, and the other 51 all correspond to the other: 7.99 seconds without memoization, 11.1 seconds with.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11301900/amc&quot; title=&quot;2,546 reputation&quot; class=&quot;comment-user&quot;&gt;AMC&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106373894_59238705&quot;&gt;&lt;span title=&quot;2020-02-10 02:48:11Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 10, 2020 at 2:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Are your values in random order? Or are they back to back? High speed of pandas could be due to caching @AMC&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10521959/yaakov-bressler&quot; title=&quot;6,615 reputation&quot; class=&quot;comment-user&quot;&gt;Yaakov Bressler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106374783_59238705&quot;&gt;&lt;span title=&quot;2020-02-10 04:14:54Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 10, 2020 at 4:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;i&gt;Are your values in random order? Or are they back to back?&lt;/i&gt; Values are random, selected using &lt;code&gt;random.choices()&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11301900/amc&quot; title=&quot;2,546 reputation&quot; class=&quot;comment-user&quot;&gt;AMC&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106404740_59238705&quot;&gt;&lt;span title=&quot;2020-02-10 22:56:03Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 10, 2020 at 22:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":266,"title":"Pandas conditional creation of a series/dataframe column","content":"\n                \n&lt;p&gt;How do I add a &lt;code&gt;color&lt;/code&gt; column to the following dataframe so that &lt;code&gt;color=&apos;green&apos;&lt;/code&gt; if &lt;code&gt;Set&amp;nbsp;==&amp;nbsp;&apos;Z&apos;&lt;/code&gt;, and &lt;code&gt;color=&apos;red&apos;&lt;/code&gt; otherwise?&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;       &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A          Z\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B          Z           \n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    B          X\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    C          Y\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"pandas-conditional-creation-of-a-seriesdataframe-column-1657387461003","postType":"QUESTION","createdAt":"2022-07-09T17:24:21.000Z","updatedAt":"2022-07-09T17:24:21.000Z","tags":[{"id":1685,"name":"numpy","slug":"numpy","createdAt":"2022-07-09T17:24:21.000Z","updatedAt":"2022-07-09T17:24:21.000Z","Questions_Tags":{"questionId":266,"tagId":1685}}]}]}},"__N_SSG":true}