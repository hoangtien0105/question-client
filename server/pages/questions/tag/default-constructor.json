{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;&lt;strong&gt;Most vexing parse&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This is related to what is known as &quot;C++&apos;s most vexing parse&quot;. Basically, anything that can be interpreted by the compiler as a function declaration will be interpreted as a function declaration.&lt;/p&gt;\n\n&lt;p&gt;Another instance of the same problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::ifstream &lt;span class=&quot;hljs-title&quot;&gt;ifs&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file.txt&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;T&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::istream_iterator&amp;lt;T&amp;gt;(ifs), std::istream_iterator&amp;lt;T&amp;gt;())&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;v&lt;/code&gt; is interpreted as a declaration of function with 2 parameters.&lt;/p&gt;\n\n&lt;p&gt;The workaround is to add another pair of parentheses:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;T&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;((std::istream_iterator&amp;lt;T&amp;gt;(ifs)), std::istream_iterator&amp;lt;T&amp;gt;())&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or, if you have C++11 and list-initialization (also known as uniform initialization) available:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::vector&amp;lt;T&amp;gt; v{std::istream_iterator&amp;lt;T&amp;gt;{ifs}, std::istream_iterator&amp;lt;T&amp;gt;{}};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With this, there is no way it could be interpreted as a function declaration.&lt;/p&gt;\n    ","\n&lt;p&gt;Because it is treated as the declaration for a function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyFunction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// clearly a function&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;MyObject &lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// also a function declaration&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The same syntax is used for function declaration - e.g. the function &lt;code&gt;object&lt;/code&gt;, taking no parameters and returning &lt;code&gt;MyObject&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Because the compiler thinks it is a declaration of a function that takes no arguments and returns a MyObject instance.&lt;/p&gt;\n    ","\n&lt;p&gt;I guess, the compiler would not know if this statement:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;MyObject object(); &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;is a constructor call or a function prototype declaring a function named &lt;em&gt;object&lt;/em&gt; with return type &lt;em&gt;MyObject&lt;/em&gt; and no  parameters.&lt;/p&gt;\n    ","\n&lt;p&gt;You could also use the more verbose way of construction:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;MyObject object1 = &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;();\nMyObject object2 = &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;(object1);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In C++0x this also allows for &lt;code&gt;auto&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; object1 = &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; object2 = &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;(object1);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As mentioned many times, it&apos;s a declaration.  It&apos;s that way for backward compatibility.  One of the many areas of C++ that are goofy/inconsistent/painful/bogus because of its legacy.  &lt;/p&gt;\n    ","\n&lt;p&gt;From n4296 [dcl.init]:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;[ Note:&lt;br&gt; Since &lt;code&gt;()&lt;/code&gt; is not permitted by the syntax for &lt;em&gt;initializer&lt;/em&gt;, \n  &lt;code&gt;X a();&lt;/code&gt; is not the declaration of an &lt;em&gt;object&lt;/em&gt; of class X, but the\n  declaration of a &lt;em&gt;function&lt;/em&gt; taking no argument and returning an X. The\n  form () is permitted in certain other initialization contexts (5.3.4,\n  5.2.3, 12.6.2). \n  &lt;br&gt;end note ]&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n3337/dcl.init#10&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++11 Link&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n4140/dcl.init#11&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++14 Link&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As the others said, it is a function declaration. Since C++11 you can use brace initialization if you need to see the empty &lt;em&gt;something&lt;/em&gt; that explicitly tells you that a default constructor is used.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Jedi luke{}; &lt;span class=&quot;hljs-comment&quot;&gt;//default constructor&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Someone should come up with a better title for this, but I can&apos;t think of what that would be.  At least spell out &quot;constructor&quot; to help the search engine(s).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2574/adam-mitz&quot; title=&quot;5,972 reputation&quot; class=&quot;comment-user&quot;&gt;Adam Mitz&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63721_180172&quot;&gt;&lt;span title=&quot;2008-10-08 05:18:20Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 8, 2008 at 5:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;And this is just another good example where C++ is context sensitive. The example code in the question would also fail if &lt;code&gt;blah&lt;/code&gt; would be a class.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/133374/albert&quot; title=&quot;61,905 reputation&quot; class=&quot;comment-user&quot;&gt;Albert&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3764707_180172&quot;&gt;&lt;span title=&quot;2010-08-27 21:03:10Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Aug 27, 2010 at 21:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;One thing that I noticed is that if I only have the default constructor then the compiler doesn&apos;t give any error if I use &lt;code&gt;()&lt;/code&gt; e.g. &lt;code&gt;MyObject object&lt;/code&gt; works as usual &amp;amp; &lt;code&gt;MyObject object()&lt;/code&gt; does not give any error! Could someone please explain why? I mean I haven&apos;t defined the function in my &lt;code&gt;main&lt;/code&gt;... so it should give an error, right? Thanks in advance!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10358768/milan&quot; title=&quot;895 reputation&quot; class=&quot;comment-user&quot;&gt;Milan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114563438_180172&quot;&gt;&lt;span title=&quot;2020-11-12 00:04:54Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 12, 2020 at 0:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Nitpick: you &lt;i&gt;can&lt;/i&gt; declare functions inside functions. It&apos;s called &lt;i&gt;local functions&lt;/i&gt; in C, and at least &lt;code&gt;extern &quot;C&quot; foo();&lt;/code&gt;-style is also allowed in C++.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/134841/marc-mutz-mmutz&quot; title=&quot;23,807 reputation&quot; class=&quot;comment-user&quot;&gt;Marc Mutz - mmutz&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1075040_181463&quot;&gt;&lt;span title=&quot;2009-08-08 10:20:30Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Aug 8, 2009 at 10:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How can that be interpreted as a function?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/165495/casebash&quot; title=&quot;108,538 reputation&quot; class=&quot;comment-user&quot;&gt;Casebash&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment4346679_181463&quot;&gt;&lt;span title=&quot;2010-10-29 01:00:31Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 29, 2010 at 1:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Casebash, &lt;code&gt;std::vector&lt;/code&gt; is return type; &lt;code&gt;v&lt;/code&gt; is function name; &lt;code&gt;(&lt;/code&gt; opens formal argument list; &lt;code&gt;std::istream_iterator&lt;/code&gt; is type of first argument; &lt;code&gt;ifs&lt;/code&gt; is name of first argument, &lt;code&gt;()&lt;/code&gt; around &lt;code&gt;ifs&lt;/code&gt; are effectively ignored; second &lt;code&gt;std::istream_iterator&lt;/code&gt; is type of second argument, which is unnamed, &lt;code&gt;()&lt;/code&gt; around it are also ignored; &apos;);&apos; closes argument list and function declaration.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/20310/constantin&quot; title=&quot;26,708 reputation&quot; class=&quot;comment-user&quot;&gt;Constantin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment4358258_181463&quot;&gt;&lt;span title=&quot;2010-10-30 07:31:59Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 30, 2010 at 7:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;There is an ambiguity in the grammar involving expression-statements and declarations: An expression-statement with a function-style explicit type conversion as its leftmost subexpression can be indistinguishable from a declaration where the first declarator starts with a (. In those cases the statement is a declaration. (C++ ISO/IEC (2003) 6.8.1)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/704244/bartolo-otrit&quot; title=&quot;2,261 reputation&quot; class=&quot;comment-user&quot;&gt;bartolo-otrit&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17041870_181463&quot;&gt;&lt;span title=&quot;2012-09-28 09:12:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 28, 2012 at 9:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Constantin, the parentheses after the second argument are not ignored. The second parameter is not a &lt;code&gt;std::istream_iterator&lt;/code&gt; but a pointer/reference to a function that takes no arguments and returns an &lt;code&gt;istream_iterator&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1010226/ctmacuser&quot; title=&quot;1,932 reputation&quot; class=&quot;comment-user&quot;&gt;CTMacUser&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment32972781_181463&quot;&gt;&lt;span title=&quot;2014-02-15 00:25:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 15, 2014 at 0:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;But it should give an error, right? Because we haven&apos;t defined the &lt;code&gt;object()&lt;/code&gt; function right? Could you please elaborate on that? I&apos;m confused right now. Thank you so much in advance!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10358768/milan&quot; title=&quot;895 reputation&quot; class=&quot;comment-user&quot;&gt;Milan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114563458_180189&quot;&gt;&lt;span title=&quot;2020-11-12 00:07:28Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 12, 2020 at 0:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;On a side note, in my &lt;code&gt;main&lt;/code&gt;, I even tried these: &lt;code&gt;any_variable_name random_function_name()&lt;/code&gt; e.g. &lt;code&gt;int func1()&lt;/code&gt; , &lt;code&gt;double func2()&lt;/code&gt;, &lt;code&gt;void func3()&lt;/code&gt;, etc. and all of them works i.e. my program gets compiled without any error! However, I haven&apos;t defined any of those functions, so, I should get errors, right?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10358768/milan&quot; title=&quot;895 reputation&quot; class=&quot;comment-user&quot;&gt;Milan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114563527_180189&quot;&gt;&lt;span title=&quot;2020-11-12 00:13:31Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 12, 2020 at 0:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Milan I would expect linker errors if you actually tried to call those functions. Otherwise they are just declarations&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3146/1800-information&quot; title=&quot;126,237 reputation&quot; class=&quot;comment-user&quot;&gt;1800 INFORMATION&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114656275_180189&quot;&gt;&lt;span title=&quot;2020-11-15 22:31:31Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 15, 2020 at 22:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks - it wouldn&apos;t occur to me to declare a function in th emiddle of some other code. But I suppose it is legal.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10897/martin-beckett&quot; title=&quot;92,965 reputation&quot; class=&quot;comment-user owner&quot;&gt;Martin Beckett&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment62994_180185&quot;&gt;&lt;span title=&quot;2008-10-07 20:36:41Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 7, 2008 at 20:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This requires a copy constructor and is inefficient&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/165495/casebash&quot; title=&quot;108,538 reputation&quot; class=&quot;comment-user&quot;&gt;Casebash&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment4346680_181772&quot;&gt;&lt;span title=&quot;2010-10-29 01:01:27Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 29, 2010 at 1:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Casebash: The compiler is probably smart enough to use some &lt;code&gt;RVO&lt;/code&gt;-like optimization prevent it from being inefficient.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/19100/dalle&quot; title=&quot;17,617 reputation&quot; class=&quot;comment-user&quot;&gt;dalle&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment4350364_181772&quot;&gt;&lt;span title=&quot;2010-10-29 11:23:31Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 29, 2010 at 11:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;Probably&quot; means &quot;I am guessing&quot;. Regarding optimization people usually do not want to guess but rather take the explicit way.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1557304/stefan&quot; title=&quot;1,023 reputation&quot; class=&quot;comment-user&quot;&gt;Stefan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42061447_181772&quot;&gt;&lt;span title=&quot;2014-11-04 14:35:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 4, 2014 at 14:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Stefan: You do not need to &quot;guess&quot;; copy elision will happen here in all mainstream compilers and that&apos;s been the case for well over a decade. Not that this is good code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/560648/lightness-races-in-orbit&quot; title=&quot;369,871 reputation&quot; class=&quot;comment-user&quot;&gt;Lightness Races in Orbit&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50136793_181772&quot;&gt;&lt;span title=&quot;2015-06-25 18:19:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 25, 2015 at 18:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Since C++17 there is no copy/move,  the behaviour is defined as identical to direct initialization&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1505939/m-m&quot; title=&quot;135,063 reputation&quot; class=&quot;comment-user&quot;&gt;M.M&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125906749_181772&quot;&gt;&lt;span title=&quot;2022-02-22 23:45:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 22 at 23:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Can you add a link for the source?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/239625/felipe-tonello&quot; title=&quot;260 reputation&quot; class=&quot;comment-user&quot;&gt;Felipe Tonello&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment68704526_31093033&quot;&gt;&lt;span title=&quot;2016-11-22 10:25:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 22, 2016 at 10:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":514,"title":"Default constructor with empty brackets","content":"\n                \n&lt;p&gt;Is there any good reason that an empty set of round brackets (parentheses) isn&apos;t valid for calling the default constructor in C++?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;MyObject  object;  &lt;span class=&quot;hljs-comment&quot;&gt;// ok - default ctor&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;MyObject  &lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(blah)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// ok&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;MyObject  &lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I seem to type &quot;()&quot; automatically everytime. Is there a good reason this isn&apos;t allowed?&lt;/p&gt;\n    ","slug":"default-constructor-with-empty-brackets-1657388246967","postType":"QUESTION","createdAt":"2022-07-09T17:37:26.000Z","updatedAt":"2022-07-09T17:37:26.000Z","tags":[{"id":2548,"name":"default-constructor","slug":"default-constructor","createdAt":"2022-07-09T17:37:27.000Z","updatedAt":"2022-07-09T17:37:27.000Z","Questions_Tags":{"questionId":514,"tagId":2548}}]}]}},"__N_SSG":true}