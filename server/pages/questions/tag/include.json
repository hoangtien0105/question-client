{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;What differs is the location in which the preprocessor searches for the included file.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;#include &amp;lt;filename&amp;gt;&lt;/code&gt; &amp;nbsp; The preprocessor searches in an implementation dependent manner, normally in search directories pre-designated by the compiler/IDE. This method is normally used to include standard library header files.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;#include &quot;filename&quot;&lt;/code&gt; &amp;nbsp; The preprocessor searches first in the same directory as the file containing the directive, and then follows the search path used for the &lt;code&gt;#include &amp;lt;filename&amp;gt;&lt;/code&gt; form. This method is normally used to include programmer-defined header files.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;A more complete description is available in the GCC &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cpp/Search-Path.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation on search paths&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The only way to know is to read your implementation&apos;s documentation.&lt;/p&gt;\n\n&lt;p&gt;In &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf#page=182&quot; rel=&quot;noreferrer&quot;&gt;the C standard&lt;/a&gt;, section 6.10.2, paragraphs 2 to 4 state:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;ul&gt;\n  &lt;li&gt;&lt;p&gt;A preprocessing directive of the form&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;h-char-sequence&amp;gt;&lt;/span&gt; new-&lt;span class=&quot;hljs-keyword&quot;&gt;line&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;searches a sequence of implementation-defined places for a &lt;strong&gt;header&lt;/strong&gt; identified uniquely by the specified sequence between the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; delimiters, and causes the replacement of that directive by the entire contents of the &lt;strong&gt;header&lt;/strong&gt;. How the places are specified or the header identified is implementation-defined.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;A preprocessing directive of the form&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;q-char-sequence&quot;&lt;/span&gt; new-&lt;span class=&quot;hljs-keyword&quot;&gt;line&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;causes the replacement of that directive by the entire contents of the &lt;strong&gt;source file&lt;/strong&gt; identified by the specified sequence between the &lt;code&gt;&quot;&lt;/code&gt; delimiters. The named &lt;strong&gt;source file&lt;/strong&gt; is searched for in an implementation-defined manner. If this search is not supported, or if the search fails, the directive is reprocessed as if it read&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;h-char-sequence&amp;gt;&lt;/span&gt; new-&lt;span class=&quot;hljs-keyword&quot;&gt;line&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;with the identical contained sequence (including &lt;code&gt;&amp;gt;&lt;/code&gt; characters, if any) from the original\n  directive.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;A preprocessing directive of the form&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; pp-tokens new-&lt;span class=&quot;hljs-keyword&quot;&gt;line&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;(that does not match one of the two previous forms) is permitted. The preprocessing tokens after &lt;code&gt;include&lt;/code&gt; in the directive are processed just as in normal text. (Each identifier currently defined as a macro name is replaced by its replacement list of preprocessing tokens.) The directive resulting after all replacements shall match one of the two previous forms. The method by which a sequence of preprocessing tokens between a &lt;code&gt;&amp;lt;&lt;/code&gt; and a &lt;code&gt;&amp;gt;&lt;/code&gt; preprocessing token pair or a pair of &lt;code&gt;&quot;&lt;/code&gt; characters is combined into a single header name preprocessing token is implementation-defined.&lt;/p&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;h3&gt;Definitions:&lt;/h3&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;&lt;p&gt;h-char: any member of the source character set except the new-line character and &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;q-char: any member of the source character set except the new-line character and &lt;code&gt;&quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The sequence of characters between &amp;lt; and &amp;gt; uniquely refer to a header, which isn&apos;t necessarily a file. Implementations are pretty much free to use the character sequence as they wish. (Mostly, however, just treat it as a file name and do a search in the &lt;em&gt;include path&lt;/em&gt;, as the other posts state.)&lt;/p&gt;\n\n&lt;p&gt;If the &lt;code&gt;#include &quot;file&quot;&lt;/code&gt; form is used, the implementation first looks for a file of the given name, if supported. If not (supported), or if the search fails, the implementation behaves as though the other (&lt;code&gt;#include &amp;lt;file&amp;gt;&lt;/code&gt;) form was used.&lt;/p&gt;\n\n&lt;p&gt;Also, a third form exists and is used when the &lt;code&gt;#include&lt;/code&gt; directive doesn&apos;t match either of the forms above. In this form, some basic preprocessing (such as macro expansion) is done on the &quot;operands&quot; of the &lt;code&gt;#include&lt;/code&gt; directive, and the result is expected to match one of the two other forms.&lt;/p&gt;\n    ","\n&lt;p&gt;Some good answers here make references to the C standard but forgot the POSIX standard, especially the specific behavior of the &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/c99.html&quot;&gt;c99 (e.g. C compiler)&lt;/a&gt; command.&lt;/p&gt;\n\n&lt;p&gt;According to &lt;a href=&quot;https://www2.opengroup.org/ogsys/catalog/C138&quot;&gt;The Open Group Base Specifications Issue 7&lt;/a&gt;,&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;-I&lt;/strong&gt;  &lt;em&gt;directory&lt;/em&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Change the algorithm for searching for headers whose names are not absolute pathnames to look in the directory named by the &lt;em&gt;directory&lt;/em&gt; pathname before looking in the usual places. Thus, headers whose names are enclosed in double-quotes ( &quot;&quot; ) shall be searched for first in the directory of the file with the &lt;strong&gt;#include&lt;/strong&gt; line, then in directories named in &lt;strong&gt;-I&lt;/strong&gt; options, and last in the usual places. For headers whose names are enclosed in angle brackets ( &quot;&amp;lt;&amp;gt;&quot; ), the header shall be searched for only in directories named in &lt;strong&gt;-I&lt;/strong&gt; options and then in the usual places. Directories named in &lt;strong&gt;-I&lt;/strong&gt; options shall be searched in the order specified. Implementations shall support at least ten instances of this option in a single &lt;em&gt;c99&lt;/em&gt; command invocation.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So, in a POSIX compliant environment, with a POSIX compliant C compiler, &lt;code&gt;#include &quot;file.h&quot;&lt;/code&gt; is likely going to search for &lt;code&gt;./file.h&lt;/code&gt; first, where &lt;code&gt;.&lt;/code&gt; is the directory where is the file with the &lt;code&gt;#include&lt;/code&gt; statement, while &lt;code&gt;#include &amp;lt;file.h&amp;gt;&lt;/code&gt;, is likely going to search for &lt;code&gt;/usr/include/file.h&lt;/code&gt; first, where &lt;code&gt;/usr/include&lt;/code&gt; is your system defined &lt;em&gt;usual places&lt;/em&gt; for headers (it&apos;s seems not defined by POSIX).&lt;/p&gt;\n    ","\n&lt;p&gt;The exact behavior of the preprocessor varies between compilers. The following answer applies for GCC and several other compilers.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;#include &amp;lt;file.h&amp;gt;&lt;/code&gt; tells the compiler to search for the header in its &quot;includes&quot; directory, e.g. for MinGW the compiler would search for &lt;code&gt;file.h&lt;/code&gt; in C:\\MinGW\\include\\ or wherever your compiler is installed.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;#include &quot;file&quot;&lt;/code&gt; tells the compiler to search the current directory (i.e. the directory in which the source file resides) for &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;You can use the &lt;code&gt;-I&lt;/code&gt; flag for GCC to tell it that, when it encounters an include with angled brackets, it should also search for headers in the directory after &lt;code&gt;-I&lt;/code&gt;. GCC will treat the directory after the flag as if it were the &lt;code&gt;includes&lt;/code&gt; directory.&lt;/p&gt;\n&lt;p&gt;For instance, if you have a file called &lt;code&gt;myheader.h&lt;/code&gt; in your own directory, you could say &lt;code&gt;#include &amp;lt;myheader.h&amp;gt;&lt;/code&gt; if you called GCC with the flag &lt;code&gt;-I .&lt;/code&gt; (indicating that it should search for includes in the current directory.)&lt;/p&gt;\n&lt;p&gt;Without the &lt;code&gt;-I&lt;/code&gt; flag, you will have to use &lt;code&gt;#include &quot;myheader.h&quot;&lt;/code&gt; to include the file, or move &lt;code&gt;myheader.h&lt;/code&gt; to the &lt;code&gt;include&lt;/code&gt; directory of your compiler.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html&quot; rel=&quot;noreferrer&quot;&gt;GCC documentation says&lt;/a&gt; the following about the difference between the two:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Both user and system header files are included using the preprocessing     directive &lt;strong&gt;&lt;code&gt;#include&lt;/code&gt;&lt;/strong&gt;. It has two variants:&lt;/p&gt;\n  \n  &lt;blockquote&gt;\n    &lt;p&gt;&lt;strong&gt;&lt;code&gt;#include &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n    \n    &lt;p&gt;This variant is used for system header files. It searches for a file named file in a standard list of system directories. You can prepend directories to this list with the &lt;code&gt;-I&lt;/code&gt; option (see &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cpp/Invocation.html#Invocation&quot; rel=&quot;noreferrer&quot;&gt;Invocation&lt;/a&gt;).&lt;/p&gt;\n    \n    &lt;p&gt;&lt;strong&gt;&lt;code&gt;#include &quot;file&quot;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n    \n    &lt;p&gt;This variant is used for header files of your own program. It searches for a file named file first in the directory containing the current file, then in the quote directories and then the same directories used for &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;. You can prepend directories to the list of quote directories with the &lt;code&gt;-iquote&lt;/code&gt; option.\n    The argument of &lt;code&gt;#include&lt;/code&gt;, whether delimited with quote marks or angle brackets, behaves like a string constant in that comments are not recognized, and macro names are not expanded. Thus, &lt;code&gt;#include &amp;lt;x/*y&amp;gt;&lt;/code&gt; specifies inclusion of a system header file named &lt;code&gt;x/*y&lt;/code&gt;.&lt;/p&gt;\n    \n    &lt;p&gt;However, if backslashes occur within file, they are considered ordinary text characters, not escape characters. None of the character escape sequences appropriate to string constants in C are processed. Thus,&lt;code&gt;#include &quot;x\\n\\\\y&quot;&lt;/code&gt;specifies a filename containing three backslashes. (Some systems interpret \\ as a pathname separator. All of these also interpret &lt;code&gt;/&lt;/code&gt; the same way. It is most portable to use only &lt;code&gt;/&lt;/code&gt;.)&lt;/p&gt;\n    \n    &lt;p&gt;It is an error if there is anything (other than comments) on the line after the file name.&lt;/p&gt;\n  &lt;/blockquote&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;It does:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;mypath/myfile&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ./mypath/myfile\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;with &lt;code&gt;.&lt;/code&gt; being either the directory of the file where the &lt;code&gt;#include&lt;/code&gt; is contained in, and/or the current working directory of the compiler, and/or the &lt;code&gt;default_include_paths&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&amp;lt;mypath/myfile&amp;gt; is short &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &amp;lt;defaultincludepaths&amp;gt;/mypath/myfile\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If &lt;code&gt;./&lt;/code&gt; is in &lt;code&gt;&amp;lt;default_include_paths&amp;gt;&lt;/code&gt;, then it doesn&apos;t make a difference.&lt;/p&gt;\n\n&lt;p&gt;If &lt;code&gt;mypath/myfile&lt;/code&gt; is in another include directory, the behavior is undefined.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; include tells the preprocessor to search in &lt;code&gt;-I&lt;/code&gt; directories and in predefined directories &lt;strong&gt;first&lt;/strong&gt;, then in the .c file&apos;s directory. The &lt;code&gt;&quot;file&quot;&lt;/code&gt; include tells the preprocessor to search the source file&apos;s directory &lt;strong&gt;first&lt;/strong&gt;, and then revert to &lt;code&gt;-I&lt;/code&gt; and predefined. All destinations are searched anyway, only the order of search is different.&lt;/p&gt;\n\n&lt;p&gt;The 2011 standard mostly discusses the include files in &quot;16.2 Source file inclusion&quot;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;2 A preprocessing directive of the form&lt;/p&gt;\n  \n  &lt;p&gt;&lt;code&gt;# include &amp;lt;h-char-sequence&amp;gt; new-line&lt;/code&gt;&lt;/p&gt;\n  \n  &lt;p&gt;searches a sequence of implementation-defined places for a header identified uniquely by the\n  specified sequence between the &amp;lt; and &amp;gt; delimiters, and causes the\n  replacement of that directive by the entire contents of the header.\n  How the places are specified or the header identified is\n  implementation-defined.&lt;/p&gt;\n  \n  &lt;p&gt;3 A preprocessing directive of the form&lt;/p&gt;\n  \n  &lt;p&gt;&lt;code&gt;# include &quot;q-char-sequence&quot; new-line&lt;/code&gt;&lt;/p&gt;\n  \n  &lt;p&gt;causes the replacement of that directive by the entire contents of the source file identified by the\n  specified sequence between the &quot; delimiters. The named source file is\n  searched for in an implementation-defined manner. If this search is\n  not supported, or if the search fails, the directive is reprocessed as\n  if it read&lt;/p&gt;\n  \n  &lt;p&gt;&lt;code&gt;# include &amp;lt;h-char-sequence&amp;gt; new-line&lt;/code&gt;&lt;/p&gt;\n  \n  &lt;p&gt;with the identical contained sequence (including &amp;gt; characters, if any) from the original directive.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Note that &lt;code&gt;&quot;xxx&quot;&lt;/code&gt; form degrades to &lt;code&gt;&amp;lt;xxx&amp;gt;&lt;/code&gt; form if the file is not found. The rest is implementation-defined.&lt;/p&gt;\n    ","\n&lt;p&gt;By the standard - yes, they are different:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;ul&gt;\n  &lt;li&gt;&lt;p&gt;A preprocessing directive of the form&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;h-char-sequence&amp;gt;&lt;/span&gt; new-&lt;span class=&quot;hljs-keyword&quot;&gt;line&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;searches a sequence of implementation-defined places for a header identified uniquely by the specified sequence between the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; delimiters, and causes the replacement of that directive by the entire contents of the header. How the places are specified or the header identified is implementation-defined.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;A preprocessing directive of the form&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;q-char-sequence&quot;&lt;/span&gt; new-&lt;span class=&quot;hljs-keyword&quot;&gt;line&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;causes the replacement of that directive by the entire contents of the source file identified by the specified sequence between the &lt;code&gt;&quot;&lt;/code&gt; delimiters. The named source file is searched for in an implementation-defined manner. If this search is not supported, or if the search fails, the directive is reprocessed as if it read&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;h-char-sequence&amp;gt;&lt;/span&gt; new-&lt;span class=&quot;hljs-keyword&quot;&gt;line&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;with the identical contained sequence (including &lt;code&gt;&amp;gt;&lt;/code&gt; characters, if any) from the original\n  directive.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;A preprocessing directive of the form&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; pp-tokens new-&lt;span class=&quot;hljs-keyword&quot;&gt;line&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;(that does not match one of the two previous forms) is permitted. The preprocessing tokens after &lt;code&gt;include&lt;/code&gt; in the directive are processed just as in normal text. (Each identifier currently defined as a macro name is replaced by its replacement list of preprocessing tokens.) The directive resulting after all replacements shall match one of the two previous forms. The method by which a sequence of preprocessing tokens between a &lt;code&gt;&amp;lt;&lt;/code&gt; and a &lt;code&gt;&amp;gt;&lt;/code&gt; preprocessing token pair or a pair of &lt;code&gt;&quot;&lt;/code&gt; characters is combined into a single header name preprocessing token is implementation-defined.&lt;/p&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;h3&gt;Definitions:&lt;/h3&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;&lt;p&gt;h-char: any member of the source character set except the new-line character and &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;q-char: any member of the source character set except the new-line character and &lt;code&gt;&quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Note that the standard does not tell any relation between the implementation-defined manners. The first form searches in one implementation-defined way, and the other in a (possibly other) implementation-defined way. The standard also specifies that certain include files shall be present (for example, &lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;Formally you&apos;d have to read the manual for your compiler, however normally (by tradition) the &lt;code&gt;#include &quot;...&quot;&lt;/code&gt; form searches the directory of the file in which the &lt;code&gt;#include&lt;/code&gt; was found first, and then the directories that the &lt;code&gt;#include &amp;lt;...&amp;gt;&lt;/code&gt; form searches (the include path, eg system headers).&lt;/p&gt;\n    ","\n&lt;p&gt;At least for GCC version &amp;lt;= 3.0, the angle-bracket form does not generate a dependency between the included file and the including one.&lt;/p&gt;\n\n&lt;p&gt;So if you want to generate dependency rules (using the GCC -M option for exemple), you must use the quoted form for the files that should be included in the dependency tree.&lt;/p&gt;\n\n&lt;p&gt;(See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/cpp/Invocation.html&quot; rel=&quot;noreferrer&quot;&gt;http://gcc.gnu.org/onlinedocs/cpp/Invocation.html&lt;/a&gt; )&lt;/p&gt;\n    ","\n&lt;p&gt;Thanks for the great answers, esp. Adam Stelmaszczyk and piCookie, and aib.&lt;/p&gt;\n&lt;p&gt;Like many programmers, I have used the informal convention of using the &lt;code&gt;&quot;myApp.hpp&quot;&lt;/code&gt; form for application specific files, and the &lt;code&gt;&amp;lt;libHeader.hpp&amp;gt;&lt;/code&gt; form for library and compiler system files, i.e. files specified in &lt;code&gt;/I&lt;/code&gt; and the &lt;code&gt;INCLUDE&lt;/code&gt; environment variable, for years thinking that was the standard.&lt;/p&gt;\n&lt;p&gt;However, the C standard states that the search order is implementation specific, which can make portability complicated.  To make matters worse, we use jam, which automagically figures out where the include files are.  You can use relative or absolute paths for your include files. i.e.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;../../MyProgDir/SourceDir1/someFile.hpp&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Older versions of MSVS required double backslashes (\\\\), but now that&apos;s not required. I don&apos;t know when it changed. Just use forward slashes for compatibility with &apos;nix (Windows will accept that).&lt;/p&gt;\n&lt;p&gt;If you are &lt;em&gt;really&lt;/em&gt; worried about it, use &lt;code&gt;&quot;./myHeader.h&quot;&lt;/code&gt; for an include file in the same directory as the source code (my current, very large project has some duplicate include file names scattered about--really a configuration management problem).&lt;/p&gt;\n&lt;p&gt;Here&apos;s the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/36k2cdd4.aspx&quot; rel=&quot;noreferrer&quot;&gt;MSDN explanation&lt;/a&gt; copied here for your convenience).&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Quoted form&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The preprocessor searches for include files in this order:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;In the same directory as the file that contains the #include statement.&lt;/li&gt;\n&lt;li&gt;In the directories of the currently opened include files, in the reverse order in which&lt;br&gt;\nthey were opened. The search begins in the directory of the parent include file and&lt;br&gt;\ncontinues upward through the directories of any grandparent include files.&lt;/li&gt;\n&lt;li&gt;Along the path that&apos;s specified by each &lt;code&gt;/I&lt;/code&gt; compiler option.&lt;/li&gt;\n&lt;li&gt;Along the paths that are specified by the &lt;code&gt;INCLUDE&lt;/code&gt; environment variable.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;Angle-bracket form&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The preprocessor searches for include files in this order:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Along the path that&apos;s specified by each &lt;code&gt;/I&lt;/code&gt; compiler option.&lt;/li&gt;\n&lt;li&gt;When compiling occurs on the command line, along the paths that are specified by the &lt;code&gt;INCLUDE&lt;/code&gt; environment variable.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;For &lt;code&gt;#include &quot;&quot;&lt;/code&gt; a compiler normally searches the folder of the file which contains that include and then the other folders. For &lt;code&gt;#include &amp;lt;&amp;gt;&lt;/code&gt; the compiler does not search the current file&apos;s folder.&lt;/p&gt;\n    ","\n&lt;p&gt;When you use &lt;code&gt;#include &amp;lt;filename&amp;gt;&lt;/code&gt;, the pre-processor looking for the file in directory of C\\C++ header files (stdio.h\\cstdio, string, vector, etc.). But, when you use &lt;code&gt;#include &quot;filename&quot;&lt;/code&gt; first, the pre-processor is looking for the file in the current directory, and if it doesn&apos;t here - the pre-processor will look for it in the directory of C\\C++ header files.&lt;/p&gt;\n    ","\n&lt;p&gt;An #include with angle brackets will search an &quot;implementation-dependent list of places&quot; (which is a very complicated way of saying &quot;system headers&quot;) for the file to be included.&lt;/p&gt;\n\n&lt;p&gt;An #include with quotes will just search for a file (and, &quot;in an implementation-dependent manner&quot;, bleh). Which means, in normal English, it will try to apply the path/filename that you toss at it and will not prepend a system path or tamper with it otherwise.&lt;/p&gt;\n\n&lt;p&gt;Also, if #include &quot;&quot; fails, it is re-read as #include &amp;lt;&amp;gt; by the standard.&lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html&quot; rel=&quot;noreferrer&quot;&gt;gcc documentation&lt;/a&gt; has a (compiler specific) description which although being specific to gcc and not the standard, is a lot easier to understand than the attorney-style talk of the ISO standards.&lt;/p&gt;\n    ","\n&lt;p&gt;Many of the answers here focus on the paths the compiler will search in order to find the file. While this is what most compilers do, a conforming compiler is allowed to be preprogrammed with the effects of the standard headers, and to treat, say, &lt;code&gt;#include &amp;lt;list&amp;gt;&lt;/code&gt; as a switch, and it need not exist as a file at all.&lt;/p&gt;\n\n&lt;p&gt;This is not purely hypothetical. There is at least one compiler that work that way. Using &lt;code&gt;#include &amp;lt;xxx&amp;gt;&lt;/code&gt; only with standard headers is recommended.&lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;#include &amp;lt;&amp;gt;&lt;/code&gt; is for predefined header files&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If the header file is predefined then you would simply write the header file name in angular brackets, and it would look like this (assuming we have a predefined header file name iostream):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;#include &quot; &quot;&lt;/code&gt; is for header files the programmer defines&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you (the programmer) wrote your own header file then you would write the header file name in quotes. So, suppose you wrote a header file called &lt;code&gt;myfile.h&lt;/code&gt;, then this is an example of how you would use the include directive to include that file:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;myfile.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;filename&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// User defined header&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;filename&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Standard library header.&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;p&gt;The filename here is &lt;code&gt;Seller.h&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; SELLER_H     &lt;span class=&quot;hljs-comment&quot;&gt;// Header guard&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; SELLER_H     &lt;span class=&quot;hljs-comment&quot;&gt;// Header guard&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iomanip&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Seller&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; name[&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;];\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; sales_total;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;Seller&lt;/span&gt;();\n        &lt;span class=&quot;hljs-built_in&quot;&gt;Seller&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[], &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;);\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&lt;span class=&quot;hljs-title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the class implementation (for example, &lt;code&gt;Seller.cpp&lt;/code&gt;, and in other files that will use the file &lt;code&gt;Seller.h&lt;/code&gt;), the header defined by the user should now be included, as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Seller.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;abc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is used to include standard library files. So the compiler will check in the locations where standard library headers are residing.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;xyz.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will tell the compiler to include user-defined header files. So the compiler will check for these header files in the current folder or &lt;code&gt;-I&lt;/code&gt; defined folders.&lt;/p&gt;\n    ","\n&lt;p&gt;In C++, include a file in two ways:&lt;/p&gt;\n\n&lt;p&gt;The first one is #include  which tells the preprocessor to look for the file in the predefined default location.\nThis location is often an INCLUDE environment variable that denotes the path to include files.&lt;/p&gt;\n\n&lt;p&gt;And the second type is #include &quot;filename&quot; which tells the preprocessor to look for the file in the current directory first, then look for it in the predefined locations user have set up.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;#include &amp;lt;filename&amp;gt;&lt;/code&gt; is used when a system file is being referred to. That is a header file that can be found at system default locations like &lt;code&gt;/usr/include&lt;/code&gt; or &lt;code&gt;/usr/local/include&lt;/code&gt;. For your own files that needs to be included in another program you have to use the &lt;code&gt;#include &quot;filename&quot;&lt;/code&gt; syntax.&lt;/p&gt;\n    ","\n&lt;h2&gt;Form 1 - #include &amp;lt; xxx &amp;gt;&lt;/h2&gt;\n&lt;p&gt;First, looks for the presence of header file in the current directory from where directive is invoked. If not found, then it searches in the preconfigured list of standard system directories.&lt;/p&gt;\n&lt;h2&gt;Form 2 - #include &quot;xxx&quot;&lt;/h2&gt;\n&lt;p&gt;This looks for the presence of header file in the current directory from where directive is invoked.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The exact search directory list depends on the target system, how GCC is configured, and where it is installed.\nYou can find the search directory list of your GCC compiler by running it with -v option.&lt;/p&gt;\n&lt;p&gt;You can add additional directories to the search path by using - I&lt;em&gt;dir&lt;/em&gt;, which causes dir to be searched after the current directory (for the quote form of the directive) and ahead of the standard system directories.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Basically, the form &quot;xxx&quot; is nothing but search in current directory; if not found falling back the form &lt;/p&gt;\n    ","\n&lt;p&gt;The simple general rule is to use angled brackets to include header files that come with the compiler. Use double quotes to include any other header files. Most compilers do it this way.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.learncpp.com/cpp-tutorial/19-header-files/&quot; rel=&quot;nofollow&quot;&gt;1.9  Header files&lt;/a&gt;&lt;/em&gt; explains in more detail about pre-processor directives. If you are a novice programmer, that page should help you understand all that. I learned it from here, and I have been following it at work.&lt;/p&gt;\n    ","\n&lt;code&gt;#include &amp;lt;filename&amp;gt;&lt;/code&gt;\n&lt;p&gt;is used when you want to use the header file of the C/C++ system or compiler libraries. These libraries can be stdio.h, string.h, math.h, etc.&lt;/p&gt;\n&lt;code&gt;#include &quot;path-to-file/filename&quot;&lt;/code&gt;\n&lt;p&gt;is used when you want to use your own custom header file which is in your project folder or somewhere else.&lt;/p&gt;\n&lt;p&gt;For more information about preprocessors and header. Read &lt;em&gt;&lt;a href=&quot;http://www.tutorialspoint.com/cprogramming/c_preprocessors.htm&quot; rel=&quot;noreferrer&quot;&gt;C - Preprocessors&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;the &quot; &amp;lt; filename &amp;gt; &quot; searches in standard C library locations&lt;/p&gt;\n  \n  &lt;p&gt;whereas &quot;filename&quot; searches in the current directory as well.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Ideally, you would use &amp;lt;...&amp;gt; for standard C libraries and &quot;...&quot; for libraries that you write and are present in the current directory.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;#include &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The preprocessor searches in an implementation-dependent manner. It tells the compiler to search directory where system header files are held. &lt;/li&gt;\n&lt;li&gt;This method usually use to find standard header files.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;#include &quot;filename&quot;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This tell compiler to search header files where program is running. If it was failed it behave like &lt;code&gt;#include &amp;lt;filename&amp;gt;&lt;/code&gt; and search that header file at where system header files stored.&lt;/li&gt;\n&lt;li&gt;This method usually used for identify user defined header files(header files which are created by user). There for don&apos;t use this if you want to call standard library because it takes more compiling time than &lt;code&gt;#include &amp;lt;filename&amp;gt;&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;In general the difference is where the preprocessor searches for the header file:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;#include is a preprocessor directive to include header file. Both #include are used to add or include header file in the program, but first is to include system header files and later one for user defined header files.&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;#include &amp;lt;filename&amp;gt;&lt;/strong&gt; is used to include the system library header file in the program, means the C/C++ preprocessor will search for the filename where the C library files are stored or predefined system header files are stored.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;#include &quot;filename&quot;&lt;/strong&gt; is used to include user defined header file in the program, means the C/C++ preprocessor will search for the filename in the current directory the program is in and then follows the search path used for the #include &amp;lt;filename&amp;gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Check the gcc docs &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-3.2.1/gcc/Include-Files-and-VMS.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;gcc include files&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Includes a file where the default include directory is.&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Includes a file in the current directory in which it was compiled. Double quotes can specify a full file path to a different location as well.&lt;/p&gt;\n    ","\n&lt;p&gt;To see the search order on your system using gcc, based on current configuration , you can execute the following command.  You can find more detail on this command &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cpp/Search-Path.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;cpp -v /dev/null -o /dev/null&lt;/code&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Apple LLVM version 10.0.0 (clang-1000.10.44.2) &lt;br&gt;\n  Target: x86_64-apple-darwin18.0.0 &lt;br&gt;\n  Thread model: posix InstalledDir: Library/Developer/CommandLineTools/usr/bin&lt;br&gt;\n  &quot;/Library/Developer/CommandLineTools/usr/bin/clang&quot; -cc1 -triple\n  x86_64-apple-macosx10.14.0 -Wdeprecated-objc-isa-usage\n  -Werror=deprecated-objc-isa-usage -E -disable-free -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mthread-model posix -mdisable-fp-elim -fno-strict-return -masm-verbose -munwind-tables -target-cpu penryn -dwarf-column-info -debugger-tuning=lldb -target-linker-version 409.12 -v -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/10.0.0 -isysroot\n  /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk\n  -I/usr/local/include -fdebug-compilation-dir /Users/hogstrom -ferror-limit 19 -fmessage-length 80 -stack-protector 1 -fblocks -fencode-extended-block-signature -fobjc-runtime=macosx-10.14.0 -fmax-type-align=16 -fdiagnostics-show-option -fcolor-diagnostics -traditional-cpp -o - -x c /dev/null &lt;br&gt;\n  clang -cc1 version 10.0.0 (clang-1000.10.44.2) default target x86_64-apple-darwin18.0.0 ignoring\n  nonexistent directory &quot;/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/local/include&quot;\n  ignoring nonexistent directory &quot;/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/Library/Frameworks&quot;&lt;br&gt;\n  &lt;strong&gt;#include &quot;...&quot; search starts here:&lt;/strong&gt;&lt;br&gt;\n  &lt;strong&gt;#include &amp;lt;...&amp;gt; search starts here:&lt;/strong&gt;&lt;br&gt;\n  &lt;strong&gt;/usr/local/include&lt;/strong&gt;  &lt;br&gt;\n  &lt;strong&gt;/Library/Developer/CommandLineTools/usr/lib/clang/10.0.0/include&lt;/strong&gt; &lt;br&gt;\n  &lt;strong&gt;/Library/Developer/CommandLineTools/usr/include&lt;/strong&gt; &lt;br&gt; \n  &lt;strong&gt;/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include&lt;/strong&gt; &lt;br&gt;\n  &lt;strong&gt;/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks&lt;/strong&gt; (framework directory)&lt;br&gt;\n   End of search list.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;code&gt;&quot;&quot;&lt;/code&gt; will search &lt;code&gt;./&lt;/code&gt; first. Then search the default include path.\nYou can use command like this to print the default include path:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;gcc -v -o &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.c&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here are some examples to make thing more clear:\nthe code a.c works&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// a.c&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;stdio.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a = %d\\n&quot;&lt;/span&gt;, a);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;the code of b.c works too&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// b.c&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a = %d\\n&quot;&lt;/span&gt;, a);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;but when I create a new file named &lt;code&gt;stdio.h&lt;/code&gt; in current directory&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// stdio.h&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;a.c&lt;/code&gt; will generate compile error, but &lt;code&gt;b.c&lt;/code&gt; still works&lt;/p&gt;\n&lt;p&gt;and &quot;&quot;, &amp;lt;&amp;gt; can be used together with the same file name. since the search path priority is different.\nso &lt;code&gt;d.c&lt;/code&gt; also works&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// d.c&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;stdio.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n        a = foo();\n\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a=%d\\n&quot;&lt;/span&gt;, a);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The implementation-defined warnings generated by the compiler can (and will) treat system libraries differently than program libraries.&lt;/p&gt;\n&lt;p&gt;So&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;#include &amp;lt;myFilename&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;-- which in effect declares that myFilename is in the system library location -- may well (and probably will) hide dead code and unused variable warnings etc, that would show up when you use:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;#include &quot;myFilename&quot;&lt;/code&gt;&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC6&quot; rel=&quot;nofollow noreferrer&quot;&gt;gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC6&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/183120/legends2k&quot; title=&quot;29,643 reputation&quot; class=&quot;comment-user&quot;&gt;legends2k&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment24453232_21593&quot;&gt;&lt;span title=&quot;2013-06-05 10:40:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 5, 2013 at 10:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;a href=&quot;http://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art026&quot; rel=&quot;nofollow noreferrer&quot;&gt;Where Does GCC Look to Find its Header Files&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5859685/theoretisch&quot; title=&quot;1,688 reputation&quot; class=&quot;comment-user&quot;&gt;theoretisch&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65106849_21593&quot;&gt;&lt;span title=&quot;2016-08-10 11:52:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 10, 2016 at 11:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For the behavior of Visual Studio, please check: &lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/preprocessor/hash-include-directive-c-cpp?view=vs-2019&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs.microsoft.com/en-us/cpp/preprocessor/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/264052/smwikipedia&quot; title=&quot;57,903 reputation&quot; class=&quot;comment-user&quot;&gt;smwikipedia&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment107425126_21593&quot;&gt;&lt;span title=&quot;2020-03-17 05:58:55Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 17, 2020 at 5:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The statement: &quot;the preprocessor searches in the same directory...&quot; may be true in practice but the standard states that the named source file is &quot;searched for in an implementation-defined manner&quot;. See answer from piCookie.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11698/richard-corden&quot; title=&quot;20,995 reputation&quot; class=&quot;comment-user&quot;&gt;Richard Corden&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10660_21594&quot;&gt;&lt;span title=&quot;2008-09-17 13:41:58Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2008 at 13:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;While your answer may appear to be &quot;true&quot;, because this is how many implementations work by convention, you should take a close look at aib&apos;s and piCookie&apos;s answers. They both point out (backed by the wording of the C standard) that the real distinction is inclusion of a &quot;header&quot; versus inclusion of a &quot;source file&quot; (and no, this doesn&apos;t mean &quot;.h&quot; vs. &quot;.c&quot;). &quot;Source file&quot; in this context can be (and usually is, and almost always should be) a &quot;.h&quot; file. A header does not necessarily need to be a file (a compiler could e.g. include a header that is statically coded, not in a file).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/95706/dan-moulding&quot; title=&quot;199,039 reputation&quot; class=&quot;comment-user&quot;&gt;Dan Moulding&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1119214_21594&quot;&gt;&lt;span title=&quot;2009-08-17 16:30:56Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Aug 17, 2009 at 16:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;... the preprocessor searches in the same directory as the file being compiled for the file to be included.&quot; This statement is not completely correct. I was interested in this question because I was curious what the actual answer is, but I know this is not true because at least with gcc when you specify an additional include path with -I that will search for files specified with #include &quot;filename.h&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/937324/gabriel-southern&quot; title=&quot;9,024 reputation&quot; class=&quot;comment-user&quot;&gt;Gabriel Southern&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment12291075_21594&quot;&gt;&lt;span title=&quot;2012-03-12 21:49:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 12, 2012 at 21:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Those who don&apos;t like the answer, please, give one practical example, where it is wrong.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2986286/0kcats&quot; title=&quot;512 reputation&quot; class=&quot;comment-user&quot;&gt;0kcats&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment81328028_21594&quot;&gt;&lt;span title=&quot;2017-11-08 20:46:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 8, 2017 at 20:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;One practical example where it&apos;s wrong&quot; is irrelevant. Standards exist for a reason. The guideline (in the standard) is to use &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; for headers included with the implementation, &lt;code&gt;&quot;&quot;&lt;/code&gt; for everything else. But it&apos;s made clear that this is a guideline only, the search paths for both cases are implementation defined other than the fact &lt;code&gt;&quot;&quot;&lt;/code&gt; will fall back to &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; if it can&apos;t be found.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14860/paxdiablo&quot; title=&quot;818,480 reputation&quot; class=&quot;comment-user&quot;&gt;paxdiablo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105506165_21594&quot;&gt;&lt;span title=&quot;2020-01-09 23:58:37Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 9, 2020 at 23:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Relevant: implementation in &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;g++&lt;/a&gt; and in &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/36k2cdd4(v=vs.110).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;visual c++&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/264047/alexander-malakhov&quot; title=&quot;3,213 reputation&quot; class=&quot;comment-user&quot;&gt;Alexander Malakhov&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17327255_77092&quot;&gt;&lt;span title=&quot;2012-10-10 03:48:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 10, 2012 at 3:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@piCookie both &amp;lt;filename&amp;gt; and &quot;filename&quot; search for implementation-defined places. So what is the difference ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1418457/onmyway133&quot; title=&quot;43,053 reputation&quot; class=&quot;comment-user&quot;&gt;onmyway133&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment20523310_77092&quot;&gt;&lt;span title=&quot;2013-02-04 03:45:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 4, 2013 at 3:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Stefan, I&apos;m just quoting the standard which does not say anything about INCLUDE_PATH. Your implementation may do that, and mine may not. The original question was generically C and not specifically gcc (which I don&apos;t think uses INCLUDE_PATH) or Microsoft C (which I think does) or any other, so it can not be answered generically but instead each implementation&apos;s documentation must be referenced.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8763/picookie&quot; title=&quot;9,360 reputation&quot; class=&quot;comment-user&quot;&gt;piCookie&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27068040_77092&quot;&gt;&lt;span title=&quot;2013-08-25 00:22:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 25, 2013 at 0:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;As with all of these situations, concrete examples (especially of common scenarios) are greatly useful and equally appreciated.  Needlessly obtuse generic answers don&apos;t have as much practical use.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/253012/vargonian&quot; title=&quot;2,876 reputation&quot; class=&quot;comment-user&quot;&gt;vargonian&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment35800200_77092&quot;&gt;&lt;span title=&quot;2014-04-29 17:51:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 29, 2014 at 17:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;Here&apos;s how the C standard can be verbose and not answer your question&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/509868/anatolyg&quot; title=&quot;25,103 reputation&quot; class=&quot;comment-user&quot;&gt;anatolyg&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46856463_77092&quot;&gt;&lt;span title=&quot;2015-03-29 19:32:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 29, 2015 at 19:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1, this is probably the most concise and correct answer here. According to the standard (which piCookie quotes from in his answer), the only &lt;i&gt;real&lt;/i&gt; difference is &quot;header&quot; versus &quot;source file&quot;. The search mechanism is implementation-defined either way. Using double quotes means that you intend to include a &quot;source file&quot;, while angle brackets mean you intend to include a &quot;header&quot; which, as you say, may not be a file at all.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/95706/dan-moulding&quot; title=&quot;199,039 reputation&quot; class=&quot;comment-user&quot;&gt;Dan Moulding&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1119126_50266&quot;&gt;&lt;span title=&quot;2009-08-17 16:12:17Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Aug 17, 2009 at 16:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See Dan Moulding&apos;s comment to quest49&apos;s answer; standard headers don&apos;t have to be in file form, they can be built-in.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1088/aib&quot; title=&quot;43,421 reputation&quot; class=&quot;comment-user&quot;&gt;aib&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment5338352_50266&quot;&gt;&lt;span title=&quot;2011-01-27 09:28:45Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jan 27, 2011 at 9:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;ve been reading this &quot;standard headers don&apos;t have to be in file form&quot; for a decade. Care to provide a real-world example?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/412080/maxim-egorushkin&quot; title=&quot;126,374 reputation&quot; class=&quot;comment-user&quot;&gt;Maxim Egorushkin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment5497951_50266&quot;&gt;&lt;span title=&quot;2011-02-08 11:54:18Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 8, 2011 at 11:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Maxim Yegorushkin: I can&apos;t think of any existing real-world examples either; however, no complete C11 compiler can exist for MS-DOS unless headers don&apos;t have to be files. This is because some of the C11 header names are not compatible with the &quot;8.3&quot; MS-DOS file name limitation.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/95706/dan-moulding&quot; title=&quot;199,039 reputation&quot; class=&quot;comment-user&quot;&gt;Dan Moulding&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17403578_50266&quot;&gt;&lt;span title=&quot;2012-10-12 12:35:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 12, 2012 at 12:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MaximEgorushkin:  The VAX/VMS C compiler kept all the C runtime library headers in a single textual library file (similar to a unix archive), and used the string between the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; as the key to index into the library.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1386054/adrian-mccarthy&quot; title=&quot;43,460 reputation&quot; class=&quot;comment-user&quot;&gt;Adrian McCarthy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment71681358_50266&quot;&gt;&lt;span title=&quot;2017-02-15 23:14:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 15, 2017 at 23:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What is exact source of the text? Is it from normative part of IEEE Std 1003.1, 2013?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/196561/osgx&quot; title=&quot;86,289 reputation&quot; class=&quot;comment-user&quot;&gt;osgx&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46249641_11576616&quot;&gt;&lt;span title=&quot;2015-03-12 02:34:32Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 12, 2015 at 2:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@osgx: that wording (or something extremely similar) is found in the POSIX specification for &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/c99.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;c99&lt;/code&gt;&lt;/a&gt;  which is the POSIX name for the C compiler.  (The POSIX 2008 standard could hardly refer to C11; the 2013 update to POSIX 2008 did not change the C standard that it referred to.)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15168/jonathan-leffler&quot; title=&quot;700,796 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Leffler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment68280629_11576616&quot;&gt;&lt;span title=&quot;2016-11-10 03:40:37Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 10, 2016 at 3:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This was my first thought too. The manpage for gcc includes this as do others. There&apos;s also a similar thing for libraries - &lt;code&gt;-L&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9205647/pryftan&quot; title=&quot;145 reputation&quot; class=&quot;comment-user&quot;&gt;Pryftan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment104222467_11576616&quot;&gt;&lt;span title=&quot;2019-11-21 22:55:34Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 21, 2019 at 22:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Crazy that so few people (including myself) understand something so basic to developing in C/C++. The tyranny of poorly documented conventions.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1334007/d512&quot; title=&quot;29,526 reputation&quot; class=&quot;comment-user&quot;&gt;d512&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124538113_49226070&quot;&gt;&lt;span title=&quot;2021-12-22 16:16:39Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 22, 2021 at 16:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What is a &quot;quote directory&quot;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/815612/jack-m&quot; title=&quot;3,950 reputation&quot; class=&quot;comment-user&quot;&gt;Jack M&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment111712750_41646905&quot;&gt;&lt;span title=&quot;2020-07-30 13:31:54Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 30, 2020 at 13:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JackM  there are 3 locations: the &lt;code&gt;#include&lt;/code&gt;-ing file&apos;s &lt;i&gt;current directory&lt;/i&gt;, the &lt;i&gt;quote directories&lt;/i&gt; (the paths to check for the &lt;code&gt;#include &quot;foo.h&quot;&lt;/code&gt; style includes), and the &lt;i&gt;system directories&lt;/i&gt; (the paths to check for the &lt;code&gt;#include &amp;lt;bar.h&amp;gt;&lt;/code&gt; style includes).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4641116/eljay&quot; title=&quot;4,244 reputation&quot; class=&quot;comment-user&quot;&gt;Eljay&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment111785700_41646905&quot;&gt;&lt;span title=&quot;2020-08-02 13:29:48Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 2, 2020 at 13:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What does &quot;system&quot; mean in the phrase &quot;system header file&quot;? I find that computer scientists throw around this word &quot;system&quot; a lot and I often can&apos;t tell if it means &quot;operating system&quot;, &quot;computer system&quot;, or something else.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1854748/littleo&quot; title=&quot;842 reputation&quot; class=&quot;comment-user&quot;&gt;littleO&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114639309_41646905&quot;&gt;&lt;span title=&quot;2020-11-15 00:56:09Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 15, 2020 at 0:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is the best answer. This topic can be discussed ad infinitum for years and decades, but the clear compiler trend is that &amp;lt;&amp;gt; is for system headers and &quot; &quot; is for local directory and project headers. I use &amp;lt;&amp;gt; for system headers and &quot; &quot; for everything else. That way it&apos;s clear in code whether a header is a system header. Plus, this way, if you move local project headers to different directory as you change code, you don&apos;t need to change &quot; &quot; to &amp;lt;&amp;gt; and vice versa. (PS: This is also the ReSharper C++ methodology with includes headers automatically for you).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user2534096&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122355192_41646905&quot;&gt;&lt;span title=&quot;2021-09-17 15:46:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2021 at 15:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I agree this is the best answer.  For clarification, to me a system file is anything you did not write, and are referencing, of course your compiler includes, but beyond that any other installed packages.  And a program file you wrote.  Using Google protobufs, a system file would be &amp;lt;google/protobuf/type_pb.h&amp;gt;, and a program file would be your protobuf &quot;mydir/my_pb.h&quot;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5403087/bill-gale&quot; title=&quot;1,122 reputation&quot; class=&quot;comment-user&quot;&gt;Bill Gale&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122821737_41646905&quot;&gt;&lt;span title=&quot;2021-10-07 21:38:03Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 7, 2021 at 21:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;No, &lt;code&gt;#include &quot;mypath/myfile&quot;&lt;/code&gt; is not equivalent to &lt;code&gt;#include &quot;./mypath/myfile&quot;&lt;/code&gt;.  As piCookie&apos;s answer says, double quotes tell the compiler to search in an implementation-defined manner -- which includes searching in the places specified for &lt;code&gt;#include &amp;lt;...&amp;gt;&lt;/code&gt;.  (Actually, it probably is equivalent, but only because, for example, &lt;code&gt;/usr/include/mypath/myfile&lt;/code&gt; can be referred to as &lt;code&gt;/usr/include/./mypath/myfile&lt;/code&gt; -- at least on Unix-like systems.)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/827263/keith-thompson&quot; title=&quot;243,248 reputation&quot; class=&quot;comment-user&quot;&gt;Keith Thompson&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8855073_4932605&quot;&gt;&lt;span title=&quot;2011-09-07 23:03:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 7, 2011 at 23:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Keith Thompson: That&apos;s right, I was thinking of my Linux box. Evidently it could be different. Though in practice, Windows as non-Posix operating system also does interprete / as path separator, and ./ also exists.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/155077/stefan-steiger&quot; title=&quot;73,955 reputation&quot; class=&quot;comment-user&quot;&gt;Stefan Steiger&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34827206_4932605&quot;&gt;&lt;span title=&quot;2014-04-03 09:23:03Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 3, 2014 at 9:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;the -L &lt;b&gt;dirpath&lt;/b&gt; option then adds &lt;b&gt;dirpath&lt;/b&gt; to the &lt;code&gt;defaultincludepaths&lt;/code&gt;, as opposed to giving another meaning to the &lt;code&gt;.&lt;/code&gt; (as referred to above). This has the expected consequence that both &lt;code&gt;#include &quot;...&quot;&lt;/code&gt; and &lt;code&gt;#include &amp;lt;...&amp;gt;&lt;/code&gt; search in &lt;b&gt;dirpath&lt;/b&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/944387/protongun&quot; title=&quot;3,160 reputation&quot; class=&quot;comment-user&quot;&gt;Protongun&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34944150_4932605&quot;&gt;&lt;span title=&quot;2014-04-06 18:07:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 6, 2014 at 18:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I think this answer is incorrect, since it implies that headers included with double quotes are always looked for in the current working directory. The search mechanism is way more detailed; this answer is incomplete. I&apos;m not adding this comment to complain or whine, but because the system asks me to add a comment to explain why I voted this answer down.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1487069/carlo-wood&quot; title=&quot;4,475 reputation&quot; class=&quot;comment-user&quot;&gt;Carlo Wood&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment66769074_4932605&quot;&gt;&lt;span title=&quot;2016-09-27 23:06:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 27, 2016 at 23:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Could you provide a reference to where in the C standard this &lt;code&gt;-I&lt;/code&gt; business is specified?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/661519/juanchopanza&quot; title=&quot;217,673 reputation&quot; class=&quot;comment-user&quot;&gt;juanchopanza&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment43762342_41538&quot;&gt;&lt;span title=&quot;2014-12-28 04:31:32Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 28, 2014 at 4:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I see no reference to &lt;code&gt;-I&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/661519/juanchopanza&quot; title=&quot;217,673 reputation&quot; class=&quot;comment-user&quot;&gt;juanchopanza&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment43773575_41538&quot;&gt;&lt;span title=&quot;2014-12-28 18:49:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 28, 2014 at 18:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;That&apos;s &quot;implementation-defined&quot; part.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user3458&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment43794924_41538&quot;&gt;&lt;span title=&quot;2014-12-29 14:40:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 29, 2014 at 14:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;All destinations are searched anyway, only the order of search is different.&quot; How can it then be that if I try to compile my program with mingw that if I include with &amp;lt; &amp;gt; it cannot find my header file, but with &quot; &quot; it does find it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1107649/mnr&quot; title=&quot;574 reputation&quot; class=&quot;comment-user&quot;&gt;mnr&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120546275_41538&quot;&gt;&lt;span title=&quot;2021-07-01 08:24:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 1, 2021 at 8:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is mostly just the same text as piCookie&apos;s answer from &lt;i&gt;seven years&lt;/i&gt; earlier.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1858225/kyle-strand&quot; title=&quot;15,197 reputation&quot; class=&quot;comment-user&quot;&gt;Kyle Strand&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment64625402_32064944&quot;&gt;&lt;span title=&quot;2016-07-27 17:43:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 27, 2016 at 17:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@KyleStrand That&apos;s because the same text is a quote of the relevant section in the standard - that text &lt;b&gt;should&lt;/b&gt; be identical. The actual answer is not the same text and is somewhat different - while I also recognize that it will be written in the documentation for the implementation I also note that there&apos;s also a traditional way these are interpreted (that most or all compilers I used respects).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4498329/skyking&quot; title=&quot;13,224 reputation&quot; class=&quot;comment-user&quot;&gt;skyking&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment64643427_32064944&quot;&gt;&lt;span title=&quot;2016-07-28 07:25:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 28, 2016 at 7:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;IMO this is the best answer here, because it covers both what the standard says and what most compilers actually do.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5083516/plugwash&quot; title=&quot;8,758 reputation&quot; class=&quot;comment-user&quot;&gt;plugwash&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment66196093_32064944&quot;&gt;&lt;span title=&quot;2016-09-11 13:59:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 11, 2016 at 13:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yes - there are several different ways of generating dependencies. That&apos;s one of them but it&apos;s not the only one.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9205647/pryftan&quot; title=&quot;145 reputation&quot; class=&quot;comment-user&quot;&gt;Pryftan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment104222570_7889340&quot;&gt;&lt;span title=&quot;2019-11-21 23:01:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 21, 2019 at 23:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Not sure why people disagree.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/412080/maxim-egorushkin&quot; title=&quot;126,374 reputation&quot; class=&quot;comment-user&quot;&gt;Maxim Egorushkin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment12607242_4932607&quot;&gt;&lt;span title=&quot;2012-03-27 06:30:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 27, 2012 at 6:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I suspect that&apos;s because most people compile only the files in their CWD. If you&apos;re in directory foo, and you&apos;re compiling foo/unittest/bar.c, and it includes bar.h, then &quot;bar.h&quot; works and &amp;lt;bar.h&amp;gt; does not.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user3458&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment12697206_4932607&quot;&gt;&lt;span title=&quot;2012-03-30 14:07:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 30, 2012 at 14:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Maxim people disagree because the behaviour you describe is not standard C.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1981338/osvein&quot; title=&quot;595 reputation&quot; class=&quot;comment-user&quot;&gt;osvein&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment51200255_4932607&quot;&gt;&lt;span title=&quot;2015-07-25 12:16:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 25, 2015 at 12:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Spookbuster Right, the standard says both &lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; and &lt;code&gt;&quot;filename&quot;&lt;/code&gt; search for implementation-defined places.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/412080/maxim-egorushkin&quot; title=&quot;126,374 reputation&quot; class=&quot;comment-user&quot;&gt;Maxim Egorushkin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment66407107_4932607&quot;&gt;&lt;span title=&quot;2016-09-17 13:33:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2016 at 13:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;After a perfect answer had been available for years, why submit one, that&apos;s just blatantly wrong? Even though common, the &lt;code&gt;#include&lt;/code&gt; directive isn&apos;t strictly related to files at all.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1889329/iinspectable&quot; title=&quot;41,340 reputation&quot; class=&quot;comment-user&quot;&gt;IInspectable&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment92164646_49789599&quot;&gt;&lt;span title=&quot;2018-10-02 19:31:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 2, 2018 at 19:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@IInspectable please explain why it&apos;s not related to files at all.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/270589/behrooz-karjoo&quot; title=&quot;4,130 reputation&quot; class=&quot;comment-user&quot;&gt;Behrooz Karjoo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment96555604_49789599&quot;&gt;&lt;span title=&quot;2019-02-26 20:06:12Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 26, 2019 at 20:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@beh &lt;a href=&quot;https://stackoverflow.com/a/50266/1889329&quot;&gt;This answer&lt;/a&gt; does a perfect job doing just that.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1889329/iinspectable&quot; title=&quot;41,340 reputation&quot; class=&quot;comment-user&quot;&gt;IInspectable&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120111767_49789599&quot;&gt;&lt;span title=&quot;2021-06-13 07:02:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 13, 2021 at 7:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;However, using angle brackets or quotes doesn&apos;t affect the way the files are included, it is exactly the same: the preprocessor essentally creates a large source file by copy&apos;n&apos;pasting the code from include files to original source file, before giving it to the compiler (preprocessor does other thing, like #define sustitution, #if evaluation, etc. but the #include processing is that easy)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/474258/loghorn&quot; title=&quot;2,689 reputation&quot; class=&quot;comment-user&quot;&gt;Loghorn&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment5498714_4932754&quot;&gt;&lt;span title=&quot;2011-02-08 12:59:26Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 8, 2011 at 12:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What about conflicts?  eg say I have &lt;code&gt;zlib.h&lt;/code&gt; in my &apos;user&apos; search paths, and a different version exists in the system search path, then does &lt;code&gt;#include &amp;lt;zlib.h&amp;gt;&lt;/code&gt; include the system version and &lt;code&gt;#include &quot;zlib.h&quot;&lt;/code&gt; include my own?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/188414/the-mandrill&quot; title=&quot;28,644 reputation&quot; class=&quot;comment-user&quot;&gt;the_mandrill&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment5498869_4932754&quot;&gt;&lt;span title=&quot;2011-02-08 13:10:06Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 8, 2011 at 13:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Aha, answered my own question: &lt;a href=&quot;http://stackoverflow.com/questions/21593/what-is-the-difference-between-include-filename-and-include-filename&quot; title=&quot;what is the difference between include filename and include filename&quot;&gt;stackoverflow.com/questions/21593/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/188414/the-mandrill&quot; title=&quot;28,644 reputation&quot; class=&quot;comment-user&quot;&gt;the_mandrill&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment5498879_4932754&quot;&gt;&lt;span title=&quot;2011-02-08 13:10:40Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 8, 2011 at 13:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thank you for acknowledging that both the standard(s) &lt;i&gt;and&lt;/i&gt; typical implementation conventions are both relevant here, rather than simply stating that it&apos;s unknowable because it&apos;s not specified by the standard.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1858225/kyle-strand&quot; title=&quot;15,197 reputation&quot; class=&quot;comment-user&quot;&gt;Kyle Strand&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment64625475_4932754&quot;&gt;&lt;span title=&quot;2016-07-27 17:45:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 27, 2016 at 17:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;On a related note, the Standard says nothing about what characters an implementation must accept in filenames, nor what lengths of filenames an implementation must accept.  A conforming implementation could run on a file system where filenames were limited to six alphanumeric characters, and reject any directives of the form &lt;code&gt;#include &quot;fname&quot;&lt;/code&gt; where the file name contained periods, but a conforming implementation must accept e.g. ` #include &amp;lt;float.h&amp;gt;` without regard for whether &lt;code&gt;float.h&lt;/code&gt; would be a valid file name.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/363751/supercat&quot; title=&quot;73,697 reputation&quot; class=&quot;comment-user&quot;&gt;supercat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117812727_22011884&quot;&gt;&lt;span title=&quot;2021-03-15 21:02:16Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 15, 2021 at 21:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It has nothing to do with pre-defined header files at all. It has to do with locations to search for.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/321866/c-johnson&quot; title=&quot;15,125 reputation&quot; class=&quot;comment-user&quot;&gt;C Johnson&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98296066_13910243&quot;&gt;&lt;span title=&quot;2019-04-23 15:29:42Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 23, 2019 at 15:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The question is more general than your answer, which only addresses one aspect of C++ and ignores C.   And I agree with C Jonhson.  The C++ does support extension-less headers (which are a real pain for some tools, BTW) but it can also be used to identify a file which will be searched with an implementation-specific way as described in the other answers.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12178680/prouleau&quot; title=&quot;136 reputation&quot; class=&quot;comment-user&quot;&gt;PRouleau&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128603512_13910243&quot;&gt;&lt;span title=&quot;2022-06-30 02:04:02Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 30 at 2:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you decide to answer an older question that has well established and correct answers, adding a new answer late in the day may not get you any credit. If you have some distinctive new information, or you&apos;re convinced the other answers are all wrong, by all means add a new answer, but &apos;yet another answer&apos; giving the same basic information a long time after the question was asked usually won&apos;t earn you much credit.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15168/jonathan-leffler&quot; title=&quot;700,796 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Leffler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment100564246_51892905&quot;&gt;&lt;span title=&quot;2019-07-13 05:27:20Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 13, 2019 at 5:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Jonathan Leffler Can you point me to the &quot;well established&quot; answer that you feel is as concise and accurate as Darshan&apos;s answer?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5896591/personal-cloud&quot; title=&quot;3,554 reputation&quot; class=&quot;comment-user&quot;&gt;personal_cloud&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment100564355_51892905&quot;&gt;&lt;span title=&quot;2019-07-13 05:36:49Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 13, 2019 at 5:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The description of the &lt;code&gt;#include &quot;header.h&quot;&lt;/code&gt; form is not accurate, @personal_cloud.   I consider the answer by &lt;a href=&quot;https://stackoverflow.com/a/77092/15168&quot;&gt;piCookie&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/11576616/15168&quot;&gt;Yann Droneaud&lt;/a&gt; to be most relevant as they identify where their information comes from.  I don&apos;t find the top-voted answer to be entirely satisfactory, either.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15168/jonathan-leffler&quot; title=&quot;700,796 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Leffler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment100564617_51892905&quot;&gt;&lt;span title=&quot;2019-07-13 06:05:27Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 13, 2019 at 6:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why is this answer shown on top, while two answers further down there is a 650+ votes one? This answer confused me, because it doesn&apos;t match the behavior observed by me. This might be, because the last sentence is broken due to not escaping angle brackets. I&apos;m not sure what it is supposed to mean.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2477364/neonit&quot; title=&quot;632 reputation&quot; class=&quot;comment-user&quot;&gt;Neonit&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment101117236_51892905&quot;&gt;&lt;span title=&quot;2019-08-01 15:37:38Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 1, 2019 at 15:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Which new information adds this answer to the other ones?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/580083/daniel-langr&quot; title=&quot;20,545 reputation&quot; class=&quot;comment-user&quot;&gt;Daniel Langr&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86073245_49533474&quot;&gt;&lt;span title=&quot;2018-03-28 11:40:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 28, 2018 at 11:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is incorrect. While compilers do treat system headers differently, that behavior isn&apos;t triggered by using angle brackets in the &lt;code&gt;#include&lt;/code&gt;, but by the headers being in specific system directories. See &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cpp/System-Headers.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;gcc&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/build/reference/external-external-headers-diagnostics?view=msvc-160&quot; rel=&quot;nofollow noreferrer&quot;&gt;Microsoft&lt;/a&gt; docs on the subject.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/938914/nathan-reed&quot; title=&quot;3,245 reputation&quot; class=&quot;comment-user&quot;&gt;Nathan Reed&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121684090_68311198&quot;&gt;&lt;span title=&quot;2021-08-19 19:11:03Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 19, 2021 at 19:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Nathan-Reed  Read your sources again, try to understand what they mean, and delete your comment.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1335492/david&quot; title=&quot;2,206 reputation&quot; class=&quot;comment-user&quot;&gt;david&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121712192_68311198&quot;&gt;&lt;span title=&quot;2021-08-21 00:19:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 21, 2021 at 0:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I suggest you reread the sources. Again, using angle brackets in the &lt;code&gt;#include&lt;/code&gt; does not trigger the system header behavior, as your answer claims. The only exception is with VS with the &lt;code&gt;/external:anglebrackets&lt;/code&gt; flag, which is non-default.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/938914/nathan-reed&quot; title=&quot;3,245 reputation&quot; class=&quot;comment-user&quot;&gt;Nathan Reed&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121723142_68311198&quot;&gt;&lt;span title=&quot;2021-08-21 18:18:20Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 21, 2021 at 18:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":585,"title":"What is the difference between #include <filename> and #include \"filename\"?","content":"\n                \n&lt;p&gt;What is the difference between using angle brackets and quotes in an &lt;code&gt;include&lt;/code&gt; directive?&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;#include &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;#include &quot;filename&quot;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","slug":"what-is-the-difference-between-include-lessfilenamegreater-and-include-\"filename\"-1657388489547","postType":"QUESTION","createdAt":"2022-07-09T17:41:29.000Z","updatedAt":"2022-07-09T17:41:29.000Z","tags":[{"id":2791,"name":"include","slug":"include","createdAt":"2022-07-09T17:41:29.000Z","updatedAt":"2022-07-09T17:41:29.000Z","Questions_Tags":{"questionId":585,"tagId":2791}}]}]}},"__N_SSG":true}