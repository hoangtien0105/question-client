{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;I see many people use subqueries or else window functions to do this, but I often do this kind of query without subqueries in the following way.  It uses plain, standard SQL so it should work in any brand of RDBMS.&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; mytable t1\n  &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; mytable t2\n    &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (t1.UserId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.UserId &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; t1.&quot;Date&quot; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; t2.&quot;Date&quot;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t2.UserId &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In other words: fetch the row from &lt;code&gt;t1&lt;/code&gt; where no other row exists with the same &lt;code&gt;UserId&lt;/code&gt; and a greater Date.&lt;/p&gt;\n&lt;p&gt;(I put the identifier &quot;Date&quot; in delimiters because it&apos;s an SQL reserved word.)&lt;/p&gt;\n&lt;p&gt;In case if &lt;code&gt;t1.&quot;Date&quot; = t2.&quot;Date&quot;&lt;/code&gt;, doubling appears. Usually tables has &lt;code&gt;auto_inc(seq)&lt;/code&gt; key, e.g. &lt;code&gt;id&lt;/code&gt;.\nTo avoid doubling can be used follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; mytable t1\n  &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; mytable t2\n    &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.UserId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.UserId &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; ((t1.&quot;Date&quot; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; t2.&quot;Date&quot;) \n         &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; (t1.&quot;Date&quot; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.&quot;Date&quot; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; t2.id))\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t2.UserId &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Re comment from @Farhan:&lt;/p&gt;\n&lt;p&gt;Here&apos;s a more detailed explanation:&lt;/p&gt;\n&lt;p&gt;An outer join attempts to join &lt;code&gt;t1&lt;/code&gt; with &lt;code&gt;t2&lt;/code&gt;.  By default, all results of &lt;code&gt;t1&lt;/code&gt; are returned, and &lt;em&gt;if&lt;/em&gt; there is a match in &lt;code&gt;t2&lt;/code&gt;, it is also returned.  If there is no match in &lt;code&gt;t2&lt;/code&gt; for a given row of &lt;code&gt;t1&lt;/code&gt;, then the query still returns the row of &lt;code&gt;t1&lt;/code&gt;, and uses &lt;code&gt;NULL&lt;/code&gt; as a placeholder for all of &lt;code&gt;t2&lt;/code&gt;&apos;s columns.  That&apos;s just how outer joins work in general.&lt;/p&gt;\n&lt;p&gt;The trick in this query is to design the join&apos;s matching condition such that &lt;code&gt;t2&lt;/code&gt; must match the &lt;em&gt;same&lt;/em&gt; &lt;code&gt;userid&lt;/code&gt;, and a &lt;em&gt;greater&lt;/em&gt; &lt;code&gt;date&lt;/code&gt;.  The idea being if a row exists in &lt;code&gt;t2&lt;/code&gt; that has a greater &lt;code&gt;date&lt;/code&gt;, then the row in &lt;code&gt;t1&lt;/code&gt; it&apos;s compared against &lt;em&gt;can&apos;t&lt;/em&gt; be the greatest &lt;code&gt;date&lt;/code&gt; for that &lt;code&gt;userid&lt;/code&gt;.  But if there is no match -- i.e. if no row exists in &lt;code&gt;t2&lt;/code&gt; with a greater &lt;code&gt;date&lt;/code&gt; than the row in &lt;code&gt;t1&lt;/code&gt; -- we know that the row in &lt;code&gt;t1&lt;/code&gt; was the row with the greatest &lt;code&gt;date&lt;/code&gt; for the given &lt;code&gt;userid&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;In those cases (when there&apos;s no match), the columns of &lt;code&gt;t2&lt;/code&gt; will be &lt;code&gt;NULL&lt;/code&gt; -- even the columns specified in the join condition.  So that&apos;s why we use &lt;code&gt;WHERE t2.UserId IS NULL&lt;/code&gt;, because we&apos;re searching for the cases where no row was found with a greater &lt;code&gt;date&lt;/code&gt; for the given &lt;code&gt;userid&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This will retrieve all rows for which the my_date column value is equal to the maximum value of my_date for that userid. This may retrieve multiple rows for the userid where the maximum date is on multiple rows.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; userid,\n       my_date,\n       ...\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n(\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; userid,\n       my_date,\n       ...\n       &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(my_date) &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; userid) max_my_date\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;   users\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; my_date &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; max_my_date\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&quot;Analytic functions rock&quot;&lt;/p&gt;\n\n&lt;p&gt;Edit: With regard to the first comment ...&lt;/p&gt;\n\n&lt;p&gt;&quot;using analytic queries and a self-join defeats the purpose of analytic queries&quot;&lt;/p&gt;\n\n&lt;p&gt;There is no self-join in this code. There is instead a predicate placed on the result of the inline view that contains the analytic function -- a very different matter, and completely standard practice.&lt;/p&gt;\n\n&lt;p&gt;&quot;The default window in Oracle is from the first row in the partition to the current one&quot;&lt;/p&gt;\n\n&lt;p&gt;The windowing clause is only applicable in the presence of the order by clause. With no order by clause, no windowing clause is applied by default and none can be explicitly specified.&lt;/p&gt;\n\n&lt;p&gt;The code works.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; userid, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;) KEEP (DENSE_RANK &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; userid\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I don&apos;t know your exact columns names, but it would be something like this:&lt;/p&gt;\n\n&lt;pre&gt;    select userid, value\n      from users u1\n     where date = (select max(date)\n                     from users u2\n                    where u1.userid = u2.userid)\n&lt;/pre&gt;\n    ","\n&lt;p&gt;Not being at work, I don&apos;t have Oracle to hand, but I seem to recall that Oracle allows multiple columns to be matched in an IN clause, which should at least avoid the options that use a correlated subquery, which is seldom a good idea.&lt;/p&gt;\n\n&lt;p&gt;Something like this, perhaps (can&apos;t remember if the column list should be parenthesised or not):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; MyTable\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;User&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt;\n  ( &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;User&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; MyTable &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;User&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;EDIT: Just tried it for real:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; MyTable (usr &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), dt &lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; mytable &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;01-JAN-2009&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; mytable &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;01-JAN-2009&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; mytable &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;31-DEC-2008&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; mytable &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;31-DEC-2008&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; usr, dt &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; mytable\n  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; (usr, dt) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; \n  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  ( &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; usr, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(dt) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; mytable &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; usr)\n  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;\n\nU DT\n&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;---------&lt;/span&gt;\nA &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;JAN&lt;span class=&quot;hljs-number&quot;&gt;-09&lt;/span&gt;\nB &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;JAN&lt;span class=&quot;hljs-number&quot;&gt;-09&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So it works, although some of the new-fangly stuff mentioned elsewhere may be more performant.&lt;/p&gt;\n    ","\n&lt;p&gt;I know you asked for Oracle, but in SQL 2005 we now use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Single Value&lt;/span&gt;\n;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; ByDate\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) RowNum\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; UserDates\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ByDate\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; RowNum &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Multiple values where dates match&lt;/span&gt;\n;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; ByDate\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;RANK&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) Rnk\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; UserDates\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ByDate\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; Rnk &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I don&apos;t have Oracle to test it, but the most efficient solution is to use analytic queries.  It should look something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt;\n    UserId\n  , MaxValue\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId\n      , &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;Over&lt;/span&gt; (\n          &lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId\n          &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n        ) MaxValue\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; SomeTable\n  )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I suspect that you can get rid of the outer query and put distinct on the inner, but I&apos;m not sure.  In the meantime I know this one works.&lt;/p&gt;\n\n&lt;p&gt;If you want to learn about analytic queries, I&apos;d suggest reading &lt;a href=&quot;http://www.orafaq.com/node/55&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.orafaq.com/node/55&lt;/a&gt; and &lt;strike&gt;&lt;a href=&quot;http://www.akadia.com/services/ora_analytic_functions.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.akadia.com/services/ora_analytic_functions.html&lt;/a&gt;&lt;/strike&gt;.  Here is the short summary.&lt;/p&gt;\n\n&lt;p&gt;Under the hood analytic queries sort the whole dataset, then process it sequentially.  As you process it you partition the dataset according to certain criteria, and then for each row looks at some window (defaults to the first value in the partition to the current row - that default is also the most efficient) and can compute values using a number of analytic functions (the list of which is very similar to the aggregate functions).&lt;/p&gt;\n\n&lt;p&gt;In this case here is what the inner query does.  The whole dataset is sorted by UserId then Date DESC.  Then it processes it in one pass.  For each row you return the UserId and the first Date seen for that UserId (since dates are sorted DESC, that&apos;s the max date).  This gives you your answer with duplicated rows.  Then the outer DISTINCT squashes duplicates.&lt;/p&gt;\n\n&lt;p&gt;This is not a particularly spectacular example of analytic queries.  For a much bigger win consider taking a table of financial receipts and calculating for each user and receipt, a running total of what they paid.  Analytic queries solve that efficiently.  Other solutions are less efficient.  Which is why they are part of the 2003 SQL standard.  (Unfortunately Postgres doesn&apos;t have them yet.  Grrr...)&lt;/p&gt;\n    ","\n&lt;p&gt;Wouldn&apos;t a QUALIFY clause be both simplest and best?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; userid, my_date, ...\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; users\nqualify &lt;span class=&quot;hljs-built_in&quot;&gt;rank&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; userid &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; my_date &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For context, on Teradata here a decent size test of this runs in 17s with this QUALIFY version and in 23s with the &apos;inline view&apos;/Aldridge solution #1.&lt;/p&gt;\n    ","\n&lt;p&gt;In &lt;strong&gt;&lt;code&gt;Oracle 12c+&lt;/code&gt;&lt;/strong&gt;, you can use &lt;em&gt;Top n&lt;/em&gt; queries along with analytic function &lt;code&gt;rank&lt;/code&gt; to achieve this very concisely &lt;em&gt;without&lt;/em&gt; subqueries:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; your_table\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;rank&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; user_id &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; my_date &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; ties;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above returns all the rows with max my_date per user. &lt;/p&gt;\n\n&lt;p&gt;If you want only one row with max date, then replace the &lt;code&gt;rank&lt;/code&gt; with &lt;code&gt;row_number&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; your_table\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;row_number&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; user_id &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; my_date &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; ties; \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With PostgreSQL 8.4 or later, you can use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; user_id, user_value_1, user_value_2\n  &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; user_id, user_value_1, user_value_2, &lt;span class=&quot;hljs-built_in&quot;&gt;row_number&lt;/span&gt;()\n          &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; user_id &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; user_date &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;) \n        &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; users) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; r\n  &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; r.row_number&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;https://docs.oracle.com/database/121/SQLRF/functions170.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ROW_NUMBER()&lt;/code&gt;&lt;/a&gt; to assign a unique ranking on descending &lt;code&gt;Date&lt;/code&gt; for each &lt;code&gt;UserId&lt;/code&gt;, then filter to the first row for each &lt;code&gt;UserId&lt;/code&gt; (i.e., &lt;code&gt;ROW_NUMBER&lt;/code&gt; = 1).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;,\n        &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) rn\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users) u\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; rn &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just had to write a &quot;live&quot; example at work :)&lt;/p&gt;\n\n&lt;p&gt;This one supports multiple values for UserId on the &lt;strong&gt;same&lt;/strong&gt; date.&lt;/p&gt;\n\n&lt;p&gt;Columns:\nUserId, Value, Date&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; UserId,\n   &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;),\n   &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;Values&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n(\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Values&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;table_name&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId, &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can use FIRST_VALUE instead of MAX and look it up in the explain plan. I didn&apos;t have the time to play with it.&lt;/p&gt;\n\n&lt;p&gt;Of course, if searching through huge tables, it&apos;s probably better if you use FULL hints in your query.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m quite late to the party but the following hack will outperform both correlated subqueries and any analytics function but has one restriction: values must convert to strings. So it works for dates, numbers and other strings. The code does not look good but the execution profile is great. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt;\n    userid,\n    to_number(substr(&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(to_char(&lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;yyyymmdd&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; to_char(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;)), &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; \n    users\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;\n    userid\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The reason why this code works so well is that it only needs to scan the table once. It does not require any indexes and most importantly it does not need to sort the table, which most analytics functions do. Indexes will help though if you need to filter the result for a single userid.&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re using Postgres, you can use &lt;code&gt;array_agg&lt;/code&gt; like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; userid,&lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(adate),(&lt;span class=&quot;hljs-built_in&quot;&gt;array_agg&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; adate &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YOURTABLE\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; userid\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;m not familiar with Oracle. This is what I came up with&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n  userid,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(adate),\n  SUBSTR(\n    (&lt;span class=&quot;hljs-built_in&quot;&gt;LISTAGG&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;WITHIN&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; adate &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;)),\n    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n    INSTR((&lt;span class=&quot;hljs-built_in&quot;&gt;LISTAGG&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;WITHIN&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; adate &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;)), &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;\n  ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YOURTABLE\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; userid \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both queries return the same results as the accepted answer. See SQLFiddles:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;http://sqlfiddle.com/#!4/2749b5/42&quot; rel=&quot;nofollow&quot;&gt;Accepted answer&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://sqlfiddle.com/#!12/24a7a/18&quot; rel=&quot;nofollow&quot;&gt;My solution with Postgres&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://sqlfiddle.com/#!4/2749b5/41&quot; rel=&quot;nofollow&quot;&gt;My solution with Oracle&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;I think something like this. (Forgive me for any syntax mistakes; I&apos;m used to using HQL at this point!)&lt;/p&gt;\n\n&lt;p&gt;EDIT: Also misread the question! Corrected the query...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;user&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; maxtest\n    &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; maxtest.UserId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; user.UserId\n)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;i thing you shuold make this variant to previous query:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users U1 &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; \n&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;)    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; UserId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; U1.UserId)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;  \n   UserID,  \n   &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;,  \n   &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;  \n&lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt;  \n   &lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt;,  \n   (  \n      &lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;  \n          UserID,  \n          &lt;span class=&quot;hljs-built_in&quot;&gt;Max&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; MDate  \n      &lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt;  \n          &lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt;  \n      &lt;span class=&quot;hljs-keyword&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;  \n          UserID  \n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; subQuery  \n&lt;span class=&quot;hljs-keyword&quot;&gt;Where&lt;/span&gt;  \n   Table.UserID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; subQuery.UserID &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt;  \n   Table.Date &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; subQuery.mDate  \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; TABLE1 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;TIME&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;TIME&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; TABLE1 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;DATE&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; TABLE1 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; CRITERIA&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;CRITERIA))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;(T-SQL) First get all the users and their maxdate. Join with the table to find the corresponding values for the users on the maxdates.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; users (userid &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; , &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; , &lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt; datetime)\n&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;20010101&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;20020101&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;20010101&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;20030101&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; T1.userid, T1.value, T1.date \n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; users T1,\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; maxdate, userid &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; userid) T2    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; T1.userid&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; T2.userid &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; T1.date &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; T2.maxdate\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;results:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;userid      &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;       &lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;                                    \n&lt;span class=&quot;hljs-comment&quot;&gt;----------- ----------- -------------------------- &lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;2003&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-01&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00.000&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;2002&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-01&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00.000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The answer here is Oracle only. Here&apos;s a bit more sophisticated answer in all SQL:&lt;/p&gt;\n\n&lt;p&gt;Who has the best overall homework result (maximum sum of homework points)?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;LAST&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(POINTS) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; TOTAL\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; STUDENTS S, RESULTS R\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; S.SID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; R.SID &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; R.CAT &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;H&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; S.SID, &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;LAST&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;HAVING&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(POINTS) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt; (POINTS)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; RESULTS\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; CAT &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;H&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; SID)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And a more difficult example, which need some explanation, for which I don&apos;t have time atm:&lt;/p&gt;\n\n&lt;p&gt;Give the book (ISBN and title) that is most popular in 2008, i.e., which is borrowed most often in 2008.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; X.ISBN, X.title, X.loans\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Book.ISBN, Book.title, &lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;(Loan.dateTimeOut) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; loans\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; CatalogEntry Book\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; BookOnShelf &lt;span class=&quot;hljs-keyword&quot;&gt;Copy&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; Book.bookId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Copy.bookId\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Loan &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;YEAR&lt;/span&gt;(Loan.dateTimeOut) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2008&lt;/span&gt;) Loan \n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; Copy.copyId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Loan.copyId\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Book.title) X\n&lt;span class=&quot;hljs-keyword&quot;&gt;HAVING&lt;/span&gt; loans &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;(Loan.dateTimeOut) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; loans\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; CatalogEntry Book\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; BookOnShelf &lt;span class=&quot;hljs-keyword&quot;&gt;Copy&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; Book.bookId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Copy.bookId\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Loan &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;YEAR&lt;/span&gt;(Loan.dateTimeOut) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2008&lt;/span&gt;) Loan \n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; Copy.copyId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Loan.copyId\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Book.title);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hope this helps (anyone).. :)&lt;/p&gt;\n\n&lt;p&gt;Regards,\nGuus&lt;/p&gt;\n    ","\n&lt;p&gt;Just tested this and it seems to work on a logging table&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ColumnNames, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(DateColumn) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; log  &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; ColumnNames &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Assuming Date is unique for a given UserID, here&apos;s some TSQL:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n    UserTest.UserID, UserTest.Value\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; UserTest\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt;\n(\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserID, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) MaxDate\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; UserTest\n    &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserID\n) Dates\n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; UserTest.UserID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Dates.UserID\n&lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; UserTest.Date &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Dates.MaxDate \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Solution for MySQL which doesn&apos;t have concepts of partition KEEP, DENSE_RANK. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; userid,\n       my_date,\n       ...\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n(\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sno&lt;/span&gt;:&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@pid&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;userid &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sno&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; serialnumber, \n    &lt;span class=&quot;hljs-variable&quot;&gt;@pid&lt;/span&gt;:&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;userid,\n       my_Date,\n       ...\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;   users &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; userid, my_date\n) a\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; a.serialnumber&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Reference:  &lt;a href=&quot;http://benincampus.blogspot.com/2013/08/select-rows-which-have-maxmin-value-in.html&quot; rel=&quot;nofollow&quot;&gt;http://benincampus.blogspot.com/2013/08/select-rows-which-have-maxmin-value-in.html&lt;/a&gt; &lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; userid, &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; thetable t1 ,\n       ( &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; t2.userid, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(t2.date) date2 \n           &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; thetable t2 \n          &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; t2.userid ) t3\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; t3.userid t1.userid &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt;\n       t3.date2 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.date\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;IMHO this works. HTH    &lt;/p&gt;\n    ","\n&lt;p&gt;I think this should work?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nT1.UserId,\n(&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; Top &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; T2.Value &lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt; T2 &lt;span class=&quot;hljs-keyword&quot;&gt;Where&lt;/span&gt; T2.UserId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; T1.UserId &lt;span class=&quot;hljs-keyword&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;By&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Desc&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Value&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt; T1\n&lt;span class=&quot;hljs-keyword&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;By&lt;/span&gt;\nT1.UserId\n&lt;span class=&quot;hljs-keyword&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;By&lt;/span&gt;\nT1.UserId\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;First try I misread the question, following the top answer, here is a complete example with correct results:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; table_name (id &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, the_value &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), the_date datetime);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; table_name (id,the_value,the_date) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;1/1/2000&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; table_name (id,the_value,the_date) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;2/2/2002&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; table_name (id,the_value,the_date) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;1/1/2000&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; table_name (id,the_value,the_date) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;3/3/2003&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; table_name (id,the_value,the_date) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;3/3/2003&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;--&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; id, the_value\n      &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; table_name u1\n      &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; the_date &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(the_date)\n                     &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; table_name u2\n                     &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; u1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; u2.id)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;--&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;id          the_value\n&lt;span class=&quot;hljs-comment&quot;&gt;----------- ---------&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;           d\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;           e\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;           b\n\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;row&lt;/span&gt;(s) affected)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This will also take care of duplicates (return one row for each user_id):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; u.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;FIRST_VALUE&lt;/span&gt;(u.rowid) &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; u.user_id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; u.date &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; last_rowid\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users u\n) u2\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; u2.rowid &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; u2.last_rowid\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This should be as simple as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users u\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; UserID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; u.UserID)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt;   UserId,&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; UserId) &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; users;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If (UserID, Date) is unique, i.e. no date appears twice for the same user then:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; TheTable.UserID, TheTable.Value\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; TheTable &lt;span class=&quot;hljs-keyword&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; UserID, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;([&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;]) MaxDate\n                          &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; TheTable\n                          &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; UserID) UserMaxDate\n     &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; TheTable.UserID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; UserMaxDate.UserID\n        TheTable.[&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; UserMaxDate.MaxDate;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What if there are multiple rows having the maximum date value for a particular userid?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6742/david-aldridge&quot; title=&quot;50,503 reputation&quot; class=&quot;comment-user&quot;&gt;David Aldridge&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27781_121387&quot;&gt;&lt;span title=&quot;2008-09-23 18:29:53Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2008 at 18:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What are the key fields of the table?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1599832/vamosrafa&quot; title=&quot;687 reputation&quot; class=&quot;comment-user&quot;&gt;vamosrafa&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment24930112_121387&quot;&gt;&lt;span title=&quot;2013-06-20 09:53:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 20, 2013 at 9:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;some solutions below compared: &lt;a href=&quot;http://sqlfiddle.com/#!4/6d4e81/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;sqlfiddle.com/#!4/6d4e81/1&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2067753/paul-maxwell&quot; title=&quot;28,371 reputation&quot; class=&quot;comment-user&quot;&gt;Paul Maxwell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39200487_121387&quot;&gt;&lt;span title=&quot;2014-08-07 07:27:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 7, 2014 at 7:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@DavidAldridge, That column is likely unique.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/632951/pacerier&quot; title=&quot;81,802 reputation&quot; class=&quot;comment-user&quot;&gt;Pacerier&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment44935299_121387&quot;&gt;&lt;span title=&quot;2015-02-03 03:38:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 3, 2015 at 3:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2854257/sql-how-to-select-a-row-having-a-column-with-max-value&quot; title=&quot;sql how to select a row having a column with max value&quot;&gt;stackoverflow.com/questions/2854257/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1673376/zloctb&quot; title=&quot;9,614 reputation&quot; class=&quot;comment-user&quot;&gt;zloctb&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment53946818_121387&quot;&gt;&lt;span title=&quot;2015-10-11 10:29:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 11, 2015 at 10:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Wow Bill.  This is the most creative solution to this problem I&apos;ve seen.  It is pretty performant too on my fairly large data set.  This  sure beats many of the other solutions I&apos;ve seen or my own attempts at solving this quandary.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/75644/justin-noel&quot; title=&quot;5,665 reputation&quot; class=&quot;comment-user&quot;&gt;Justin Noel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment5154689_123481&quot;&gt;&lt;span title=&quot;2011-01-13 02:07:26Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jan 13, 2011 at 2:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;When applied to a table having 8.8 million rows, this query took almost twice as long as that in the accepted answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/107158/derek-mahar&quot; title=&quot;26,630 reputation&quot; class=&quot;comment-user&quot;&gt;Derek Mahar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6489742_123481&quot;&gt;&lt;span title=&quot;2011-04-15 23:11:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 15, 2011 at 23:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Derek: Optimizations depend on the brand and version of RDBMS, as well as presence of appropriate indexes, data types, etc.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/20860/bill-karwin&quot; title=&quot;503,252 reputation&quot; class=&quot;comment-user&quot;&gt;Bill Karwin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6540843_123481&quot;&gt;&lt;span title=&quot;2011-04-19 17:30:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 19, 2011 at 17:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;On MySQL, this kind of query appears to actually cause it to loop over the result of a Cartesian join between the tables, resulting in O(n^2) time. Using the subquery method instead reduced the query time from 2.0s to 0.003s. YMMV.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/268083/jesse&quot; title=&quot;6,185 reputation&quot; class=&quot;comment-user&quot;&gt;Jesse&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment11863185_123481&quot;&gt;&lt;span title=&quot;2012-02-22 06:22:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 22, 2012 at 6:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Is there a way to adapt this to match rows where date is the greatest date less than or equal to a user given date?  For example if the user gives the date &quot;23-OCT-2011&quot;, and the table includes rows for &quot;24-OCT-2011&quot;, &quot;22-OCT-2011&quot;, &quot;20-OCT-2011&quot;, then I want to get &quot;22-OCT-2011&quot;.  Been scratching my head and reading this snippet for a while now...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/886749/cory-kendall&quot; title=&quot;6,927 reputation&quot; class=&quot;comment-user&quot;&gt;Cory Kendall&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment12400187_123481&quot;&gt;&lt;span title=&quot;2012-03-17 08:18:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 17, 2012 at 8:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;When applied to a table having 8.8 million rows, this query took half the time of the queries in some the other highly voted answers.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/107158/derek-mahar&quot; title=&quot;26,630 reputation&quot; class=&quot;comment-user&quot;&gt;Derek Mahar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6490097_121450&quot;&gt;&lt;span title=&quot;2011-04-15 23:59:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 15, 2011 at 23:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Anyone care to post a link to the MySQL equivalent of this, if there is one?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/970175/redolent&quot; title=&quot;3,963 reputation&quot; class=&quot;comment-user&quot;&gt;redolent&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment44146907_121450&quot;&gt;&lt;span title=&quot;2015-01-10 02:35:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 10, 2015 at 2:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Couldn&apos;t this return duplicates? Eg. if two rows have the same user_id and the same date (which happens to be the max).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1070199/jastr&quot; title=&quot;853 reputation&quot; class=&quot;comment-user&quot;&gt;jastr&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63148800_121450&quot;&gt;&lt;span title=&quot;2016-06-15 19:30:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 15, 2016 at 19:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@jastr I think that was acknowledged in the question&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6742/david-aldridge&quot; title=&quot;50,503 reputation&quot; class=&quot;comment-user&quot;&gt;David Aldridge&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63225871_121450&quot;&gt;&lt;span title=&quot;2016-06-17 15:47:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 17, 2016 at 15:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Instead of &lt;code&gt;MAX(...) OVER (...)&lt;/code&gt; you can also use &lt;code&gt;ROW_NUMBER() OVER (...)&lt;/code&gt; (for the top-n-per-group) or &lt;code&gt;RANK() OVER (...)&lt;/code&gt; (for the greatest-n-per-group).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1509264/mt0&quot; title=&quot;117,973 reputation&quot; class=&quot;comment-user&quot;&gt;MT0&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63536931_121450&quot;&gt;&lt;span title=&quot;2016-06-27 08:13:48Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 27, 2016 at 8:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In my tests using a table having a large number of rows, this solution took about twice as long as that in the accepted answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/107158/derek-mahar&quot; title=&quot;26,630 reputation&quot; class=&quot;comment-user&quot;&gt;Derek Mahar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6489784_121661&quot;&gt;&lt;span title=&quot;2011-04-15 23:16:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 15, 2011 at 23:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I confirm it&apos;s much faster than other solutions&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7693/tamersalama&quot; title=&quot;3,953 reputation&quot; class=&quot;comment-user&quot;&gt;tamersalama&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment16630643_121661&quot;&gt;&lt;span title=&quot;2012-09-12 01:02:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 12, 2012 at 1:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;trouble is it does not return the full record&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2067753/paul-maxwell&quot; title=&quot;28,371 reputation&quot; class=&quot;comment-user&quot;&gt;Paul Maxwell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39199714_121661&quot;&gt;&lt;span title=&quot;2014-08-07 07:03:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 7, 2014 at 7:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@user2067753 No, it doesn&apos;t return the full record.  You can use the same MAX()..KEEP.. expression on multiple columns, so you can select all the columns you need.  But it is inconvenient if you want a large number of columns and would prefer to use SELECT *.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6568/dave-costa&quot; title=&quot;46,175 reputation&quot; class=&quot;comment-user&quot;&gt;Dave Costa&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39227756_121661&quot;&gt;&lt;span title=&quot;2014-08-07 19:54:33Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 7, 2014 at 19:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Probably not very efficent, Steve.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6742/david-aldridge&quot; title=&quot;50,503 reputation&quot; class=&quot;comment-user&quot;&gt;David Aldridge&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment26950_121435&quot;&gt;&lt;span title=&quot;2008-09-23 14:43:35Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2008 at 14:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You are probably underestimating the Oracle query optimizer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12166/rafa%c5%82-dowgird&quot; title=&quot;40,950 reputation&quot; class=&quot;comment-user&quot;&gt;Rafał Dowgird&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27011_121435&quot;&gt;&lt;span title=&quot;2008-09-23 14:57:10Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2008 at 14:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Not at all. This will almost certainly be implemented as a full scan  with a nested loop join to get the dates. You&apos;re talking about logical io&apos;s in the order of 4 times the number of rows in the table and be dreadful for non-trivial amounts of data.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6742/david-aldridge&quot; title=&quot;50,503 reputation&quot; class=&quot;comment-user&quot;&gt;David Aldridge&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27033_121435&quot;&gt;&lt;span title=&quot;2008-09-23 15:02:38Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2008 at 15:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;FYI, &quot;Not efficient, but works&quot; is the same as &quot;Works, but is not efficient&quot;. When did we give up on efficient as a design goal?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6742/david-aldridge&quot; title=&quot;50,503 reputation&quot; class=&quot;comment-user&quot;&gt;David Aldridge&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27197_121435&quot;&gt;&lt;span title=&quot;2008-09-23 15:43:41Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2008 at 15:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1 because when your datatables are not millions of rows in length anwyays, this is the most easily understood solution. when you have multiple developers of all skill levels modifying the code, understandability is more important then a fraction of a second in performance that is unnoticable.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/534062/n00b&quot; title=&quot;3,935 reputation&quot; class=&quot;comment-user&quot;&gt;n00b&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment23161484_121435&quot;&gt;&lt;span title=&quot;2013-04-24 17:59:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 24, 2013 at 17:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This works nicely on PostgreSQL too.  And I like the simplicity and generality of it -- the subquery says &quot;Here&apos;s my criteria&quot;, the outer query says &quot;And here&apos;s the details I want to see&quot;. +1.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/47984/j-random-hacker&quot; title=&quot;49,399 reputation&quot; class=&quot;comment-user&quot;&gt;j_random_hacker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3113570_123511&quot;&gt;&lt;span title=&quot;2010-06-15 06:00:54Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jun 15, 2010 at 6:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You also need to return the date value to answer the question completely. If that means another first_value clause then I&apos;d suggest that the solution is more complex than it ought to be, and the analytic method based on max(date) reads better.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6742/david-aldridge&quot; title=&quot;50,503 reputation&quot; class=&quot;comment-user&quot;&gt;David Aldridge&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27655_121873&quot;&gt;&lt;span title=&quot;2008-09-23 18:01:48Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2008 at 18:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The question statement says nothing about returning the date.  You can do that either by adding another FIRST(Date) or else just by querying the Date and changing the outer query to a GROUP BY.  I&apos;d use the first and expect the optimizer to calculate both in one pass.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11318/user11318&quot; title=&quot;9,163 reputation&quot; class=&quot;comment-user&quot;&gt;user11318&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27702_121873&quot;&gt;&lt;span title=&quot;2008-09-23 18:11:51Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2008 at 18:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;The question statement says nothing about returning the date&quot; ... yes, you&apos;re right. Sorry.  But adding more FIRST_VALUE clauses would become messy pretty quickly. It&apos;s a single window sort, but if you had 20 columns to return for that row then you&apos;ve written a lot of code to wade through.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6742/david-aldridge&quot; title=&quot;50,503 reputation&quot; class=&quot;comment-user&quot;&gt;David Aldridge&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27730_121873&quot;&gt;&lt;span title=&quot;2008-09-23 18:18:14Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2008 at 18:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It also occurs to me that this solution is non-deterministic for data where a single userid has multiple rows that have the maximum date and different VALUEs. More a fault in the question than the answer though.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6742/david-aldridge&quot; title=&quot;50,503 reputation&quot; class=&quot;comment-user&quot;&gt;David Aldridge&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27746_121873&quot;&gt;&lt;span title=&quot;2008-09-23 18:22:22Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2008 at 18:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I agree it is painfully verbose.  However isn&apos;t that generally the case with SQL?  And you&apos;re right that the solution is non-deterministic.  There are multiple ways to deal with ties, and sometimes each is what you want.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11318/user11318&quot; title=&quot;9,163 reputation&quot; class=&quot;comment-user&quot;&gt;user11318&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment28062_121873&quot;&gt;&lt;span title=&quot;2008-09-23 19:51:21Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2008 at 19:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is the best answer in my opinion.  However, be careful with the &lt;code&gt;rank()&lt;/code&gt; function in situations where there are ties.  You could end up with more than one &lt;code&gt;rank=1&lt;/code&gt;.  Better to use &lt;code&gt;row_number()&lt;/code&gt; if you really do want just one record returned.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1176987/cartbeforehorse&quot; title=&quot;2,720 reputation&quot; class=&quot;comment-user&quot;&gt;cartbeforehorse&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment13996695_7824518&quot;&gt;&lt;span title=&quot;2012-05-26 13:18:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 26, 2012 at 13:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also, be aware that the &lt;code&gt;QUALIFY&lt;/code&gt; clause is specific to Teradata.  In Oracle (at least) you have to nest your query and filter using a &lt;code&gt;WHERE&lt;/code&gt; clause on the wrapping select statement (which probably hits performance a touch, I&apos;d imagine).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1176987/cartbeforehorse&quot; title=&quot;2,720 reputation&quot; class=&quot;comment-user&quot;&gt;cartbeforehorse&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment13996945_7824518&quot;&gt;&lt;span title=&quot;2012-05-26 13:40:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 26, 2012 at 13:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For PostgreSQL we can now use &lt;code&gt;DISTINCT ON&lt;/code&gt; which perfectly addresses the use case: &lt;a href=&quot;https://stackoverflow.com/questions/586781/postgresql-fetch-the-rows-which-have-the-max-value-for-a-column-in-each-group&quot; title=&quot;postgresql fetch the rows which have the max value for a column in each group&quot;&gt;stackoverflow.com/questions/586781/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/895245/ciro-santilli-%d0%9f%d1%83%d1%82%d0%bb%d0%b5%d1%80-%d0%9a%d0%b0%d0%bf%d1%83%d1%82-%e5%85%ad%e5%9b%9b%e4%ba%8b&quot; title=&quot;306,035 reputation&quot; class=&quot;comment-user&quot;&gt;Ciro Santilli Путлер Капут &lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128584990_7967101&quot;&gt;&lt;span title=&quot;2022-06-29 09:53:08Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 29 at 9:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is a good execution plan compared to most, but applying all those tricks to more then a few fields would be tedious and may work against it. But very interesting - thanks. see &lt;a href=&quot;http://sqlfiddle.com/#!4/2749b5/23&quot; rel=&quot;nofollow noreferrer&quot;&gt;sqlfiddle.com/#!4/2749b5/23&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2067753/paul-maxwell&quot; title=&quot;28,371 reputation&quot; class=&quot;comment-user&quot;&gt;Paul Maxwell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39199971_24860655&quot;&gt;&lt;span title=&quot;2014-08-07 07:11:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 7, 2014 at 7:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You are right it can become tedious, which is why this should be done only when the performance of the query requires it. Such is often the case with ETL scripts.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/913665/alevelofindirection&quot; title=&quot;3,512 reputation&quot; class=&quot;comment-user&quot;&gt;aLevelOfIndirection&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39412261_24860655&quot;&gt;&lt;span title=&quot;2014-08-13 15:07:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 13, 2014 at 15:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;this is very nice. did something similar using LISTAGG but looks ugly. postgres has a better altenative using array_agg. see my answer :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/822023/bruno-calza&quot; title=&quot;2,694 reputation&quot; class=&quot;comment-user&quot;&gt;Bruno Calza&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42369538_24860655&quot;&gt;&lt;span title=&quot;2014-11-13 13:26:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 13, 2014 at 13:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks. Nice to know about the &lt;code&gt;array-agg&lt;/code&gt; function. Hypothetically, &lt;code&gt;array-agg&lt;/code&gt; may not work well for cases where there are too many rows per &lt;code&gt;userid&lt;/code&gt; (the group by column) ? And, also when we need multiple select columns in the result; Then , we would need to apply &lt;code&gt;array_agg&lt;/code&gt; to every other column, i.e do a &lt;code&gt;group by&lt;/code&gt; with &lt;code&gt;adate&lt;/code&gt; with every other select column ? Great answer for OP&apos;s question though!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1611714/binita-bharati&quot; title=&quot;4,205 reputation&quot; class=&quot;comment-user&quot;&gt;Binita Bharati&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122176249_26872328&quot;&gt;&lt;span title=&quot;2021-09-10 04:44:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 10, 2021 at 4:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Doesn&apos;t meet the &quot;for each UserId&quot; condition&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6742/david-aldridge&quot; title=&quot;50,503 reputation&quot; class=&quot;comment-user&quot;&gt;David Aldridge&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment26949_121416&quot;&gt;&lt;span title=&quot;2008-09-23 14:42:51Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2008 at 14:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Where would it fail? For every UserID in Users, it will be guaranteed that at least one row containing that UserID will be returned. Or am I missing a special case somewhere?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12275/jdmichal&quot; title=&quot;10,797 reputation&quot; class=&quot;comment-user&quot;&gt;jdmichal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment26957_121416&quot;&gt;&lt;span title=&quot;2008-09-23 14:45:29Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2008 at 14:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The accepted answer is not &quot;Oracle only&quot; - it&apos;s standard SQL (supported by many DBMS)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/330315/a-horse-with-no-name&quot; title=&quot;502,896 reputation&quot; class=&quot;comment-user&quot;&gt;a_horse_with_no_name&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment43137632_2731582&quot;&gt;&lt;span title=&quot;2014-12-07 08:08:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 7, 2014 at 8:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This does not work &quot;&lt;i&gt;on other DBs too&lt;/i&gt;&quot;. This only works on MySQL and possibly on SQL Server because it has a similar concept of variables. It will definitely not work on Oracle, Postgres, DB2, Derby, H2, HSQLDB, Vertica, Greenplum. Additionally the accepted answer is standard ANSI SQL (which by know only MySQL doesn&apos;t support)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/330315/a-horse-with-no-name&quot; title=&quot;502,896 reputation&quot; class=&quot;comment-user&quot;&gt;a_horse_with_no_name&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27268918_18539442&quot;&gt;&lt;span title=&quot;2013-08-30 18:55:03Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 30, 2013 at 18:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;horse, I guess you are right. I don&apos;t have knowledge about other DBs, or ANSI. My solution is able to solve the issue in MySQL, which doesn&apos;t have proper support for ANSI SQL to solve it in standard way.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1960137/ben-lin&quot; title=&quot;669 reputation&quot; class=&quot;comment-user&quot;&gt;Ben Lin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27446253_18539442&quot;&gt;&lt;span title=&quot;2013-09-05 16:28:38Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 5, 2013 at 16:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This will return all rows, not just one row per user.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/409172/jon-heller&quot; title=&quot;33,555 reputation&quot; class=&quot;comment-user&quot;&gt;Jon Heller&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment23036880_16127407&quot;&gt;&lt;span title=&quot;2013-04-21 04:05:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 21, 2013 at 4:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I believe that you need to join by the UserID as well&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5696608/tom-h&quot; title=&quot;45,864 reputation&quot; class=&quot;comment-user&quot;&gt;Tom H&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment26985_121475&quot;&gt;&lt;span title=&quot;2008-09-23 14:49:45Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2008 at 14:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":256,"title":"Fetch the rows which have the Max value for a column for each distinct value of another column","content":"\n                \n&lt;p&gt;Table: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;, Date.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I want to get the UserId, Value for the max(Date) for each UserId. That is, the Value for each UserId that has the latest date. Is there a way to do this simply in SQL? (Preferably Oracle)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Apologies for any ambiguity: I need to get ALL the UserIds. But for each UserId, only that row where that user has the latest date.&lt;/p&gt;\n    ","slug":"fetch-the-rows-which-have-the-max-value-for-a-column-for-each-distinct-value-of-another-column-1657387423925","postType":"QUESTION","createdAt":"2022-07-09T17:23:43.000Z","updatedAt":"2022-07-09T17:23:43.000Z","tags":[{"id":1648,"name":"oracle","slug":"oracle","createdAt":"2022-07-09T17:23:43.000Z","updatedAt":"2022-07-09T17:23:43.000Z","Questions_Tags":{"questionId":256,"tagId":1648}}]}]}},"__N_SSG":true}