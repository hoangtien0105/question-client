{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;The reason you need to use &lt;code&gt;self.&lt;/code&gt; is because Python does not use the &lt;code&gt;@&lt;/code&gt; syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be &lt;em&gt;passed&lt;/em&gt; automatically, but not &lt;em&gt;received&lt;/em&gt; automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although &lt;code&gt;self&lt;/code&gt; is the convention, and people will generally frown at you when you use something else.) &lt;code&gt;self&lt;/code&gt; is not special to the code, it&apos;s just another object.&lt;/p&gt;\n\n&lt;p&gt;Python could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something  yet more different -- but it didn&apos;t. Python&apos;s all for making things explicit, making it obvious what&apos;s what, and although it doesn&apos;t do it entirely everywhere, it does do it for instance attributes. That&apos;s why assigning to an instance attribute needs to know what instance to assign to, and that&apos;s why it needs &lt;code&gt;self.&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Let&apos;s say you have a class &lt;code&gt;ClassA&lt;/code&gt; which contains a method &lt;code&gt;methodA&lt;/code&gt; defined as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;methodA&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, arg1, arg2&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# do something&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and &lt;code&gt;ObjectA&lt;/code&gt; is an instance of this class.&lt;/p&gt;\n\n&lt;p&gt;Now when &lt;code&gt;ObjectA.methodA(arg1, arg2)&lt;/code&gt; is called, python internally converts it for you as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;ClassA.methodA(ObjectA, arg1, arg2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;self&lt;/code&gt; variable refers to the object itself.&lt;/p&gt;\n    ","\n&lt;p&gt;Lets take a simple vector class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Vector&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, x, y&lt;/span&gt;):\n        self.x = x\n        self.y = y\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We want to have a method which calculates the length. What would it look like if we wanted to define it inside the class?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;length&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; math.sqrt(self.x ** &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + self.y ** &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What should it look like when we were to define it as a global method/function?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;length_global&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;vector&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; math.sqrt(vector.x ** &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + vector.y ** &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So the whole structure stays the same. How can me make use of this? If we assume for a moment that we hadnt written a &lt;code&gt;length&lt;/code&gt; method for our &lt;code&gt;Vector&lt;/code&gt; class, we could do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Vector.length_new = length_global\nv = Vector(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(v.length_new()) &lt;span class=&quot;hljs-comment&quot;&gt;# 5.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works because the first parameter of &lt;code&gt;length_global&lt;/code&gt;, can be re-used as the &lt;code&gt;self&lt;/code&gt; parameter in &lt;code&gt;length_new&lt;/code&gt;. This would not be possible without an explicit &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Another way of understanding the need for the explicit &lt;code&gt;self&lt;/code&gt; is to see where Python adds some syntactical sugar. When you keep in mind, that basically, a call like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;v_instance.length()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is internally transformed to&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Vector.length(v_instance)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;it is easy to see where the &lt;code&gt;self&lt;/code&gt; fits in. You don&apos;t actually write instance methods in Python; what you write is class methods which must take an instance as a first parameter. And therefore, youll have to place the instance parameter somewhere explicitly.&lt;/p&gt;\n    ","\n&lt;p&gt;When objects are instantiated, the object itself is passed into the self parameter. &lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/whCZm.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Because of this, the objects data is bound to the object. Below is an example of how you might like to visualize what each objects data might look. Notice how self is replaced with the objects name. I&apos;m not saying this example diagram below is wholly accurate but it hopefully with serve a purpose in visualizing the use of self. &lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/5daR6.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;The Object is passed into the self parameter so that the object can keep hold of its own data.&lt;/p&gt;\n\n&lt;p&gt;Although this may not be wholly accurate, think of the process of instantiating an object like this: When an object is made it uses the class as a template for its own data and methods. Without passing it&apos;s own name into the self parameter, the attributes and methods in the class would remain as a general template and would not be referenced to (belong to) the object. So by passing the object&apos;s name into the self parameter it means that if 100 objects are instantiated from the one class, they can all keep track of their own data and methods.&lt;/p&gt;\n\n&lt;p&gt;See the illustration below:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/oZZe5.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I like this example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;: \n    foo = []\na, b = A(), A()\na.foo.append(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\nb.foo\nans: [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;: \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;): \n        self.foo = []\na, b = A(), A()\na.foo.append(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\nb.foo\nans: []\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I will demonstrate with code that &lt;strong&gt;does not use classes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;state_init&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;state&lt;/span&gt;):\n    state[&lt;span class=&quot;hljs-string&quot;&gt;&apos;field&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;init&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;state_add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;state, x&lt;/span&gt;):\n    state[&lt;span class=&quot;hljs-string&quot;&gt;&apos;field&apos;&lt;/span&gt;] += x\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;state_mult&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;state, x&lt;/span&gt;):\n    state[&lt;span class=&quot;hljs-string&quot;&gt;&apos;field&apos;&lt;/span&gt;] *= x\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;state_getField&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;state&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; state[&lt;span class=&quot;hljs-string&quot;&gt;&apos;field&apos;&lt;/span&gt;]\n\nmyself = {}\nstate_init(myself)\nstate_add(myself, &lt;span class=&quot;hljs-string&quot;&gt;&apos;added&apos;&lt;/span&gt;)\nstate_mult(myself, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( state_getField(myself) )\n&lt;span class=&quot;hljs-comment&quot;&gt;#--&amp;gt; &apos;initaddedinitadded&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Classes are just a way to avoid passing in this &quot;state&quot; thing all the time (and other nice things like initializing, class composition, the rarely-needed metaclasses, and supporting custom methods to override operators).&lt;/p&gt;\n\n&lt;p&gt;Now let&apos;s demonstrate the above code using the built-in python class machinery, to show how it&apos;s basically the same thing.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;State&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.field = &lt;span class=&quot;hljs-string&quot;&gt;&apos;init&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, x&lt;/span&gt;):\n        self.field += x\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mult&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, x&lt;/span&gt;):\n        self.field *= x\n\ns = State()\ns.add(&lt;span class=&quot;hljs-string&quot;&gt;&apos;added&apos;&lt;/span&gt;)    &lt;span class=&quot;hljs-comment&quot;&gt;# self is implicitly passed in&lt;/span&gt;\ns.mult(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)         &lt;span class=&quot;hljs-comment&quot;&gt;# self is implicitly passed in&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( s.field )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;[migrated my answer from duplicate closed question]&lt;/p&gt;\n    ","\n&lt;p&gt;The following excerpts are from the &lt;a href=&quot;http://docs.python.org/tutorial/classes.html&quot; rel=&quot;noreferrer&quot;&gt;Python documentation about self&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;As in Modula-3, there are no shorthands [in Python] for referencing the objects members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.&lt;/p&gt;\n&lt;p&gt;Often, the first argument of a method is called self. This is nothing more than a convention: the name self has absolutely no special meaning to Python. Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a class browser program might be written that relies upon such a convention.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;For more information, see the &lt;a href=&quot;http://docs.python.org/tutorial/classes.html&quot; rel=&quot;noreferrer&quot;&gt;Python documentation tutorial on classes&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;As well as all the other reasons already stated, it allows for easier access to overridden methods; you can call &lt;code&gt;Class.some_method(inst)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;An example of where its useful:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C1&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n         &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;C1 init&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C2&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;C1&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;#overrides C1.__init__&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;C2 init&quot;&lt;/span&gt;\n        C1.__init__(self) &lt;span class=&quot;hljs-comment&quot;&gt;#but we still want C1 to init the class too&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;C2()\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;C2 init&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;C1 init&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Its use is similar to the use of &lt;code&gt;this&lt;/code&gt; keyword in Java, i.e. to give a reference to the current object.&lt;/p&gt;\n    ","\n&lt;p&gt;Python is not a language built for Object Oriented Programming unlike Java or C++. &lt;/p&gt;\n\n&lt;p&gt;When calling a static method in Python, one simply writes a method with regular arguments inside it. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Animal&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;staticMethod&lt;/span&gt;():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is a static method&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, an object method, which requires you to make a variable, which is an Animal, in this case, needs the self argument&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Animal&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectMethod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is an object method which needs an instance of a class&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The self method is also used to refer to a variable field within the class. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Animal&lt;/span&gt;():\n    &lt;span class=&quot;hljs-comment&quot;&gt;#animalName made in constructor&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Animal&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.animalName = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getAnimalName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.animalName\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case, self is referring to the animalName variable of the entire class. REMEMBER: If you have a variable within a method, self will not work. That variable is simply existent only while that method is running. For defining fields (the variables of the entire class), you have to define them OUTSIDE the class methods. &lt;/p&gt;\n\n&lt;p&gt;If you don&apos;t understand a single word of what I am saying, then Google &quot;Object Oriented Programming.&quot; Once you understand this, you won&apos;t even need to ask that question :).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;self&lt;/code&gt; is an object reference to the object itself, therefore, they are same.\nPython methods are not called in the context of the object itself.\n&lt;code&gt;self&lt;/code&gt; in Python may be used to deal with custom object models or something.&lt;/p&gt;\n    ","\n&lt;p&gt;Its there to follow the Python zen explicit is better than implicit. Its indeed a reference to your class object. In Java and PHP, for example, it&apos;s called &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;If &lt;code&gt;user_type_name&lt;/code&gt; is a field on your model you access it by &lt;code&gt;self.user_type_name&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;First of all, self is a conventional name, you could put anything else (being coherent) in its stead.&lt;/p&gt;\n\n&lt;p&gt;It refers to the object itself, so when you are using it, you are declaring that .name and .age are properties of the Student objects (note, not of the Student class) you are going to create.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Student&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;#called each time you create a new Student instance&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self,name,age&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;#special method to initialize&lt;/span&gt;\n        self.name=name\n        self.age=age\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;#special method called for example when you use print&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Student %s is %s years old&quot;&lt;/span&gt; %(self.name,self.age)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, msg&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;#silly example for custom method&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hey, %s! &quot;&lt;/span&gt;+msg) %self.name\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#initializing two instances of the student class&lt;/span&gt;\nbob=Student(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\nalice=Student(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Alice&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#using them&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; bob.name\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; bob.age\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; alice &lt;span class=&quot;hljs-comment&quot;&gt;#this one only works if you define the __str__ method&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; alice.call(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Come here!&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;#notice you don&apos;t put a value for self&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#you can modify attributes, like when alice ages&lt;/span&gt;\nalice.age=&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; alice\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://labs.codecademy.com/DJ9z#:workspace&quot; rel=&quot;noreferrer&quot;&gt;Code is here &lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m surprised nobody has brought up Lua. Lua also uses the &apos;self&apos; variable however it can be omitted but still used. C++ does the same with &apos;this&apos;. I don&apos;t see any reason to have to declare &apos;self&apos; in each function but you should still be able to use it just like you can with lua and C++. For a language that prides itself on being brief it&apos;s odd that it requires you to declare the self variable.&lt;/p&gt;\n    ","\n&lt;p&gt;The use of the argument, conventionally called &lt;code&gt;self&lt;/code&gt; isn&apos;t as hard to understand, as is why is it necessary? Or as to why explicitly mention it? That, I suppose, is a bigger question for most users who look up this question, or if it is not, they will certainly have the same question as they move forward learning python. I recommend them to read these couple of blogs:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://pythontips.com/2013/08/07/the-self-variable-in-python-explained/&quot; rel=&quot;noreferrer&quot;&gt;1: Use of self explained&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Note that it is not a keyword.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The first argument of every class method, including init, is always a reference to the current instance of the class. By convention, this argument is always named self. In the init method, self refers to the newly created object; in other class methods, it refers to the instance whose method was called. For example the below code is the same as the above code.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html&quot; rel=&quot;noreferrer&quot;&gt;2: Why do we have it this way and why can we not eliminate it as an argument, like Java, and have a keyword instead&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Another thing I would like to add is, an optional &lt;code&gt;self&lt;/code&gt; argument allows me to declare static methods inside a class, by not writing &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Code examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;staticMethod&lt;/span&gt;():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is a static method&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectMethod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is an object method which needs an instance of a class, and that is what self refers to&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;:This works only in Python 3.x.&lt;/p&gt;\n\n&lt;p&gt;In previous versions, you have to explicitly add &lt;code&gt;@staticmethod&lt;/code&gt; decorator, otherwise &lt;code&gt;self&lt;/code&gt; argument is obligatory. &lt;/p&gt;\n    ","\n&lt;p&gt;Take a look at the following example, which clearly explains the purpose of &lt;code&gt;self&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Restaurant&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):  \n    bankrupt = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;open_branch&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; self.bankrupt:\n           &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;branch opened&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#create instance1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = Restaurant()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x.bankrupt\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#create instance2&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y = Restaurant()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y.bankrupt = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;   \n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y.bankrupt\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x.bankrupt\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;self&lt;/code&gt; is used/needed to distinguish between instances.&lt;/p&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;https://pythontips.com/2013/08/07/the-self-variable-in-python-explained/&quot; rel=&quot;nofollow noreferrer&quot;&gt;self variable in python explained - Pythontips&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Is because by the way python is designed the alternatives would hardly work. Python is designed to allow methods or functions to be defined in a context where both implicit &lt;code&gt;this&lt;/code&gt; (a-la Java/C++) or explicit &lt;code&gt;@&lt;/code&gt; (a-la ruby) wouldn&apos;t work. Let&apos;s have an example with the explicit approach with python conventions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fubar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    self.x = x\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt;:\n    frob = fubar\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now the &lt;code&gt;fubar&lt;/code&gt; function wouldn&apos;t work since it would assume that &lt;code&gt;self&lt;/code&gt; is a global variable (and in &lt;code&gt;frob&lt;/code&gt; as well). The alternative would be to execute method&apos;s with a replaced global scope (where &lt;code&gt;self&lt;/code&gt; is the object).&lt;/p&gt;\n\n&lt;p&gt;The implicit approach would be&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fubar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;)\n    myX = x\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt;:\n    frob = fubar\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This would mean that &lt;code&gt;myX&lt;/code&gt; would be interpreted as a local variable in &lt;code&gt;fubar&lt;/code&gt; (and in &lt;code&gt;frob&lt;/code&gt; as well). The alternative here would be to execute methods with a replaced local scope which is retained between calls, but that would remove the posibility of method local variables.&lt;/p&gt;\n\n&lt;p&gt;However the current situation works out well:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fubar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, x&lt;/span&gt;)\n     self.x = x\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt;:\n     frob = fubar\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;here when called as a method &lt;code&gt;frob&lt;/code&gt; will receive the object on which it&apos;s called via the &lt;code&gt;self&lt;/code&gt; parameter, and &lt;code&gt;fubar&lt;/code&gt; can still be called with an object as parameter and work the same (it &lt;em&gt;is&lt;/em&gt; the same as &lt;code&gt;C.frob&lt;/code&gt; I think).&lt;/p&gt;\n    ","\n&lt;p&gt;In the &lt;code&gt;__init__&lt;/code&gt; method, self refers to the newly created object; in other class methods, it refers to the instance whose method was called.&lt;/p&gt;\n\n&lt;p&gt;self, as a name, is &lt;strong&gt;&lt;em&gt;just a convention&lt;/em&gt;&lt;/strong&gt;, call it as you want ! but when using it, for example to delete the object, you have to use the same name: &lt;code&gt;__del__(var)&lt;/code&gt;, where &lt;code&gt;var&lt;/code&gt; was used in the &lt;code&gt;__init__(var,[...])&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;You should take a look at &lt;code&gt;cls&lt;/code&gt; too, to have &lt;strong&gt;&lt;em&gt;the bigger picture&lt;/em&gt;&lt;/strong&gt;. This &lt;a href=&quot;https://stackoverflow.com/questions/7554738/python-self-no-self-and-cls&quot;&gt;&lt;strong&gt;post&lt;/strong&gt;&lt;/a&gt; could be helpful.&lt;/p&gt;\n    ","\n&lt;p&gt;self is acting as like current object name or instance of class .&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Self explanation.&lt;/span&gt;\n\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;classname&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self,name&lt;/span&gt;):\n\n        self.name=name\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Self is acting as a replacement of object name.&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;#self.name=object1.name&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;display&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name of the person is :&quot;&lt;/span&gt;,self.name)\n      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;object name:&quot;&lt;/span&gt;,object1.name)\n\n\n object1=classname(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bucky&quot;&lt;/span&gt;)\n object2=classname(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ford&quot;&lt;/span&gt;)\n\n object1.display()\n object2.display()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;###### Output &lt;/span&gt;\nName of the person &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; : Bucky\n&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; name: Bucky\nName of the person &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; : ford\n&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; name: Bucky\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;&lt;em&gt;&lt;code&gt;self&lt;/code&gt; is inevitable.&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;There was just a &lt;a href=&quot;https://www.artima.com/weblogs/viewpost.jsp?thread=239003&quot; rel=&quot;nofollow noreferrer&quot;&gt;question&lt;/a&gt; should &lt;code&gt;self&lt;/code&gt; be implicit or explicit.\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Guido_van_Rossum&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Guido van Rossum&lt;/code&gt;&lt;/a&gt; resolved this question saying &lt;a href=&quot;https://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;self&lt;/code&gt; has to stay&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h3&gt;&lt;em&gt;So where the &lt;code&gt;self&lt;/code&gt; live?&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;If we would just stick to functional programming we would not need &lt;code&gt;self&lt;/code&gt;.\nOnce we enter the &lt;em&gt;Python OOP&lt;/em&gt; we find &lt;code&gt;self&lt;/code&gt; there.&lt;/p&gt;\n\n&lt;p&gt;Here is the typical use case &lt;code&gt;class C&lt;/code&gt; with the method &lt;code&gt;m1&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;m1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, arg&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(self, &lt;span class=&quot;hljs-string&quot;&gt;&apos; inside&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\nci =C()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ci, &lt;span class=&quot;hljs-string&quot;&gt;&apos; outside&apos;&lt;/span&gt;)\nci.m1(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;hex&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(ci))) &lt;span class=&quot;hljs-comment&quot;&gt;# hex memory address&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;This program will output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;__main__.C &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x000002B9D79C6CC0&lt;/span&gt;&amp;gt;  outside\n&amp;lt;__main__.C &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x000002B9D79C6CC0&lt;/span&gt;&amp;gt;  inside\n&lt;span class=&quot;hljs-number&quot;&gt;0x2b9d79c6cc0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So &lt;code&gt;self&lt;/code&gt; holds the memory address of the class instance.\n&lt;em&gt;The purpose&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt; would be to hold the reference for &lt;em&gt;instance methods&lt;/em&gt; and for us to have &lt;strong&gt;explicit&lt;/strong&gt; access to that reference.     &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;sub&gt;Note there are three different types of class methods: &lt;/sub&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;sub&gt;static methods (read: functions), &lt;/sub&gt;&lt;/li&gt;\n&lt;li&gt;&lt;sub&gt;class methods, &lt;/sub&gt;&lt;/li&gt;\n&lt;li&gt;&lt;sub&gt;instance methods (mentioned).&lt;/sub&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&quot;self&quot; keyword holds the reference of class and it is upto you if you want to use it or not but if you notice, whenever you create a new method in python, python automatically write self keyword for you. If you do some R&amp;amp;D, you will notice that if you create say two methods in a class and try to call one inside another, it does not recognize method unless you add self (reference of class).&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;testA&lt;/span&gt;:\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ads&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;m1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;method 1&apos;&lt;/span&gt;)\n    self.m2()\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;m2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;method 2&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Below code throws unresolvable reference error.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;testA&lt;/span&gt;:\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ads&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;m1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;method 1&apos;&lt;/span&gt;)\n    m2()  &lt;span class=&quot;hljs-comment&quot;&gt;#throws unresolvable reference error as class does not know if m2 exist in class scope&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;m2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;method 2&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now let see below example&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;testA&lt;/span&gt;:\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ads&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;m1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;method 1&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;m2&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;method 2&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now when you create object of class testA, you can call method m1() using class object like this as method m1() has included self keyword&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;obj = testA()\nobj.m1()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But if you want to call method m2(), because is has no self reference so you can call m2() directly using class name like below&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;testA.m2()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But keep in practice to live with self keyword as there are other benefits too of it like creating global variable inside and so on.&lt;/p&gt;\n    ","\n&lt;p&gt;The word &apos;self&apos; refers to instance of a class&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;foo&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, num1, num2&lt;/span&gt;):\n             self.n1 = num1 &lt;span class=&quot;hljs-comment&quot;&gt;#now in this it will make the perimeter num1 and num2 access across the whole class&lt;/span&gt;\n             self.n2 = num2\n      &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n             &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.n1 + self.n2 &lt;span class=&quot;hljs-comment&quot;&gt;# if we had not written self then if would throw an error that n1 and n2 is not defined and we have to include self in the function&apos;s perimeter to access it&apos;s variables&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;it&apos;s an explicit reference to the class instance object. &lt;/p&gt;\n    ","\n&lt;p&gt;from the &lt;a href=&quot;https://docs.python.org/3/tutorial/classes.html#method-objects&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs&lt;/a&gt;, &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;the special thing about methods is that the instance object is passed as the first argument of the function. In our example, the call &lt;code&gt;x.f()&lt;/code&gt; is exactly equivalent to &lt;code&gt;MyClass.f(x)&lt;/code&gt;. In general, calling a method with a list of n arguments is equivalent to calling the corresponding function with an argument list that is created by inserting the methods instance object before the first argument.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;preceding this the related snippet,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;:\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;A simple example class&quot;&quot;&quot;&lt;/span&gt;\n    i = &lt;span class=&quot;hljs-number&quot;&gt;12345&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello world&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;x = MyClass()\n&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I would say for Python at least, the self parameter can be thought of as a placeholder.\nTake a look at this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;:\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name, age&lt;/span&gt;):\n    self.name = name\n    self.age = age\n\np1 = Person(&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(p1.name)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(p1.age)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Self in this case and a lot of others was used as a method to say store the name value. However, after that, we use the p1 to assign it to the class we&apos;re using. Then when we print it we use the same p1 keyword.&lt;/p&gt;\n&lt;p&gt;Hope this helps for Python!&lt;/p&gt;\n    ","\n&lt;p&gt;my little 2 cents&lt;/p&gt;\n&lt;p&gt;In this class Person, we defined out &lt;strong&gt;init&lt;/strong&gt; method with the self and interesting thing to notice here is the memory location of both the &lt;strong&gt;self&lt;/strong&gt; and instance variable &lt;strong&gt;p&lt;/strong&gt; is same &lt;code&gt;&amp;lt;__main__.Person object at 0x106a78fd0&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;:\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name, age&lt;/span&gt;):\n        self.name = name \n        self.age = age \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say_hi&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the self is at:&quot;&lt;/span&gt;, self)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;((&lt;span class=&quot;hljs-string&quot;&gt;f&quot;hey there, my name is &lt;span class=&quot;hljs-subst&quot;&gt;{self.name}&lt;/span&gt; and I am &lt;span class=&quot;hljs-subst&quot;&gt;{self.age}&lt;/span&gt; years old&quot;&lt;/span&gt;))\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;say_bye&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the self is at:&quot;&lt;/span&gt;, self)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;good to see you &lt;span class=&quot;hljs-subst&quot;&gt;{self.name}&lt;/span&gt;&quot;&lt;/span&gt;)\n\np = Person(&lt;span class=&quot;hljs-string&quot;&gt;&quot;john&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;78&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the p is at&quot;&lt;/span&gt;,p)\np.say_hi()  \np.say_bye() \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;so as explained in above, both self and instance variable are same object.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You may find interesting this essay &quot;Why explicit self has to stay&quot; by Guido van Rossum: &lt;a href=&quot;http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;neopythonic.blogspot.com/2008/10/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/190597/unutbu&quot; title=&quot;783,286 reputation&quot; class=&quot;comment-user&quot;&gt;unutbu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment2734198_2709821&quot;&gt;&lt;span title=&quot;2010-04-25 20:35:06Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 25, 2010 at 20:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See also &quot;Why must &apos;self&apos; be used explicitly in method definitions and calls&quot;: &lt;a href=&quot;http://docs.python.org/faq/design.html#why-must-self-be-used-explicitly-in-method-definitions-and-calls&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs.python.org/faq/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/190597/unutbu&quot; title=&quot;783,286 reputation&quot; class=&quot;comment-user&quot;&gt;unutbu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment2734210_2709821&quot;&gt;&lt;span title=&quot;2010-04-25 20:38:38Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 25, 2010 at 20:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;Which i understand, quite easily&quot; ---  Quite subjective, don&apos;t you think? What makes &lt;code&gt;@name&lt;/code&gt; more intuitive than &lt;code&gt;self.name&lt;/code&gt;? The latter, IMO, is more intuitive.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/302831/santa&quot; title=&quot;11,133 reputation&quot; class=&quot;comment-user&quot;&gt;Santa&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment2752890_2709821&quot;&gt;&lt;span title=&quot;2010-04-28 00:12:06Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 28, 2010 at 0:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Although to play devils advocate its very easy to forget to add an additional argument to each method and have bizarre behavior when you forget which makes it hard for beginners. IMHO I rather be specific about unusual things like static methods then normal behavior like instance methods.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/318174/adam-gent&quot; title=&quot;46,363 reputation&quot; class=&quot;comment-user&quot;&gt;Adam Gent&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment2752966_2709821&quot;&gt;&lt;span title=&quot;2010-04-28 00:29:54Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 28, 2010 at 0:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;That&apos;s the key difference between a function and a class method. A function is floating free, unencumbered. A class (instance) method has to be aware of it&apos;s parent (and parent properties) so you need to pass the method a reference to the parent class (as &lt;b&gt;self&lt;/b&gt;). It&apos;s just one less implicit rule that you have to internalize before understanding OOP. Other languages choose syntactic sugar over semantic simplicity, python isn&apos;t other languages.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/290340/evan-plaice&quot; title=&quot;13,750 reputation&quot; class=&quot;comment-user&quot;&gt;Evan Plaice&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment11116129_2709821&quot;&gt;&lt;span title=&quot;2012-01-17 06:59:47Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 17, 2012 at 6:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Georg: &lt;code&gt;cls&lt;/code&gt; refers to the class object, not instance object&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12855/silentghost&quot; title=&quot;289,331 reputation&quot; class=&quot;comment-user&quot;&gt;SilentGhost&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment2734191_2709832&quot;&gt;&lt;span title=&quot;2010-04-25 20:33:15Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 25, 2010 at 20:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@SilentGhost: Actually, the name of the first parameter is whatever you want it to be.  On class methods, the convention is to use &lt;code&gt;cls&lt;/code&gt; and &lt;code&gt;self&lt;/code&gt; is used conventionally for instance methods.  If I wanted, I could use &lt;code&gt;self&lt;/code&gt; for classmethods and &lt;code&gt;cls&lt;/code&gt; for instance methods. I could also use &lt;code&gt;bob&lt;/code&gt; and &lt;code&gt;fnord&lt;/code&gt; if I liked.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/65696/singlenegationelimination&quot; title=&quot;145,377 reputation&quot; class=&quot;comment-user&quot;&gt;SingleNegationElimination&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment4604498_2709832&quot;&gt;&lt;span title=&quot;2010-11-22 22:13:54Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 22, 2010 at 22:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I find it interesting that the community didn&apos;t choose &lt;code&gt;this&lt;/code&gt; instead of &lt;code&gt;self&lt;/code&gt;. Does &lt;code&gt;self&lt;/code&gt; have some history that I&apos;m not aware of in older programming languages?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/447599/jules-g-m&quot; title=&quot;3,329 reputation&quot; class=&quot;comment-user&quot;&gt;Jules G.M.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment19063966_2709832&quot;&gt;&lt;span title=&quot;2012-12-12 20:46:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 12, 2012 at 20:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Julius The &lt;code&gt;self&lt;/code&gt; came from Modula-3&apos;s conventions, see &lt;a href=&quot;http://stackoverflow.com/questions/13652006/why-accessing-to-class-variable-from-within-the-class-needs-self-in-python/13652256#13652256&quot;&gt;this answer&lt;/a&gt; for further details on this choice. (Disclaimer: its mine).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/510937/bakuriu&quot; title=&quot;93,030 reputation&quot; class=&quot;comment-user&quot;&gt;Bakuriu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27940514_2709832&quot;&gt;&lt;span title=&quot;2013-09-20 19:07:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 20, 2013 at 19:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Julius The &lt;code&gt;self&lt;/code&gt; keyword (Smalltalk, 1980) predates the &lt;code&gt;this&lt;/code&gt; keyword (from C++). See: &lt;a href=&quot;https://stackoverflow.com/questions/1079983/why-do-pythonistas-call-the-current-reference-self-and-not-this/1080192#1080192&quot; title=&quot;why do pythonistas call the current reference self and not this&quot;&gt;stackoverflow.com/questions/1079983/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/188833/wes-turner&quot; title=&quot;1,073 reputation&quot; class=&quot;comment-user&quot;&gt;Wes Turner&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42210957_2709832&quot;&gt;&lt;span title=&quot;2014-11-08 18:42:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 8, 2014 at 18:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I read all the other answers and sort of understood, I read this one and then it all made sense.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1727263/seth&quot; title=&quot;508 reputation&quot; class=&quot;comment-user&quot;&gt;Seth&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41174707_21366809&quot;&gt;&lt;span title=&quot;2014-10-08 02:37:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 8, 2014 at 2:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This nailed it for me!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6228166/bernard-beta-berlin-parah&quot; title=&quot;2,031 reputation&quot; class=&quot;comment-user&quot;&gt;Bernard &apos;Beta Berlin&apos; Parah&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63579875_21366809&quot;&gt;&lt;span title=&quot;2016-06-28 08:41:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2016 at 8:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why not keep those guts inside, though, like Ruby does?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/819417/cees-timmerman&quot; title=&quot;15,475 reputation&quot; class=&quot;comment-user&quot;&gt;Cees Timmerman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79661533_21366809&quot;&gt;&lt;span title=&quot;2017-09-21 18:15:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2017 at 18:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Seriously, this is much better than Debilski&apos;s example because it is not overly complex and people may not be familiar with vectors.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2619038/noname&quot; title=&quot;9,032 reputation&quot; class=&quot;comment-user&quot;&gt;NoName&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment101964293_21366809&quot;&gt;&lt;span title=&quot;2019-09-03 02:18:14Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 3, 2019 at 2:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For what it&apos;s worth, the &lt;code&gt;__new__&lt;/code&gt; method is called (not taking a &lt;code&gt;self argument) to create the &lt;/code&gt;self` object before &lt;code&gt;__init__&lt;/code&gt; is called.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5267751/user202729&quot; title=&quot;2,832 reputation&quot; class=&quot;comment-user&quot;&gt;user202729&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114767714_21366809&quot;&gt;&lt;span title=&quot;2020-11-19 15:14:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 19, 2020 at 15:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Vector.length_new = length_global... I actually started to use syntax like this in my class declarations. Whenever I only want to inherit some of the methods from another class, I just explicitly copy the reference to the methods.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/133973/jeeyoung-kim&quot; title=&quot;5,522 reputation&quot; class=&quot;comment-user&quot;&gt;Jeeyoung Kim&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment4604132_2725996&quot;&gt;&lt;span title=&quot;2010-11-22 21:37:34Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 22, 2010 at 21:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;would it be fair to say that python&apos;s &quot;instance method&quot; is simply a syntactic sugar of static global methods (as in Java or C++) with an instance object passed in to package multiple attributes?  --- well this is kind of half-true since in polymorphism, the more important purpose of &quot;this&quot; (as in java) or &quot;self&quot; is to give u the correct implementation of methods. Python does have this. so calling myobj.someMethod() is equal to TheClassOfMyObj.someMethod(myobj) in python. note that the &quot;TheClassOfMyObj&quot; is automatically figured out by python from &quot;self&quot;, otherwise u&apos;d have to find that out.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/933882/teddy-teddy&quot; title=&quot;2,915 reputation&quot; class=&quot;comment-user&quot;&gt;teddy teddy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment16540616_2725996&quot;&gt;&lt;span title=&quot;2012-09-07 19:43:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 7, 2012 at 19:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Infact, not only are instance methods just class methods, but methods are just functions which are members of a class, as the &lt;code&gt;Vector.length_new = length_global&lt;/code&gt; shows.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1179778/russw&quot; title=&quot;417 reputation&quot; class=&quot;comment-user&quot;&gt;RussW&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27469407_2725996&quot;&gt;&lt;span title=&quot;2013-09-06 09:46:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 6, 2013 at 9:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;This works, because the first parameter of length_global, can be re-used as the self parameter in length_new. This would not be possible without an explicit self.&quot; - it would work just the same. it would be re-used for the implicit self... the second example is a circular reasoning - you have to explicitly place self there, because python needs the explicit self.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/650405/karoly-horvath&quot; title=&quot;92,096 reputation&quot; class=&quot;comment-user&quot;&gt;Karoly Horvath&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34102116_2725996&quot;&gt;&lt;span title=&quot;2014-03-15 16:16:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 15, 2014 at 16:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@KarolyHorvath: Sure, it would also be possible to have a language with a model where internally defined methods do not need an explicit self but externally defined methods do. But Id say there is some consistency in requiring the explicit self in both cases, which makes it a legitimate reason to do it this way. Other languages may choose different approaches.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/200266/debilski&quot; title=&quot;65,400 reputation&quot; class=&quot;comment-user&quot;&gt;Debilski&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34123622_2725996&quot;&gt;&lt;span title=&quot;2014-03-16 14:52:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 16, 2014 at 14:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Hey there, when accessing Bob&apos;s attributes for example by &quot;bob.name()&quot;, you actually accesing bob().self.name so to speak from the &apos;&lt;b&gt;init&lt;/b&gt;&apos; right?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4257949/udarh3&quot; title=&quot;179 reputation&quot; class=&quot;comment-user&quot;&gt;udarH3&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment51742866_31096552&quot;&gt;&lt;span title=&quot;2015-08-10 08:31:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 10, 2015 at 8:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;When you write bob.name() in the above comment, you are implying that bob has a method called name() due to the fact that you added brackets after name. In this example however there is no such method. &apos;bob.name&apos; (which has no parenthesis) is directly accessing the attribute called name from the init (constructor) method. When bob&apos;s speak method is called it is the method which accesses the name attribute and returns it in a print statement. Hope this helps.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2686197/sw123456&quot; title=&quot;3,173 reputation&quot; class=&quot;comment-user&quot;&gt;sw123456&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment51743445_31096552&quot;&gt;&lt;span title=&quot;2015-08-10 08:48:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 10, 2015 at 8:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;No, you get the value of self.name, which for the bob object is actually bob.name, because the object&apos;s name is passed into the self parameter when it is created (instantiated). Again, hope this helps. Feel free to upvote main post if it has.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2686197/sw123456&quot; title=&quot;3,173 reputation&quot; class=&quot;comment-user&quot;&gt;sw123456&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment51744484_31096552&quot;&gt;&lt;span title=&quot;2015-08-10 09:18:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 10, 2015 at 9:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Name is assigned to self.name at instantiation. After an object is created, all variables that belong to the object are those prefixed with &apos;self.&apos; Remember that self is replaced with the object&apos;s name when it is created from the class.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2686197/sw123456&quot; title=&quot;3,173 reputation&quot; class=&quot;comment-user&quot;&gt;sw123456&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment51744680_31096552&quot;&gt;&lt;span title=&quot;2015-08-10 09:23:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 10, 2015 at 9:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is how you explain stuff ! nice job :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5099964/penta&quot; title=&quot;2,386 reputation&quot; class=&quot;comment-user&quot;&gt;penta&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment81189993_31096552&quot;&gt;&lt;span title=&quot;2017-11-05 09:44:03Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 5, 2017 at 9:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;so vars without self is simply static vars of the class, like in java&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/933882/teddy-teddy&quot; title=&quot;2,915 reputation&quot; class=&quot;comment-user&quot;&gt;teddy teddy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment16540656_2714920&quot;&gt;&lt;span title=&quot;2012-09-07 19:45:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 7, 2012 at 19:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;teddy teddy, you aren&apos;t entirely correct. The behavior (static or non-static like) depends not only on &lt;code&gt;self&lt;/code&gt; but also on the variable type. Try to do the first example with simple integer instead of list. The result would be quite different.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3168356/konstantin&quot; title=&quot;2,667 reputation&quot; class=&quot;comment-user&quot;&gt;Konstantin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34582202_2714920&quot;&gt;&lt;span title=&quot;2014-03-27 19:18:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 27, 2014 at 19:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Actually, my question with this is why are you allowed to say &lt;code&gt;a.foo&lt;/code&gt; in the first example, rather than &lt;code&gt;A.foo&lt;/code&gt;? Clearly &lt;code&gt;foo&lt;/code&gt; belongs to the class...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3538165/radon-rosborough&quot; title=&quot;4,234 reputation&quot; class=&quot;comment-user&quot;&gt;Radon Rosborough&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39184200_2714920&quot;&gt;&lt;span title=&quot;2014-08-06 18:29:41Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 6, 2014 at 18:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You can call static members from instances of the object in most languages. Why is that surprising?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2557260/paarth&quot; title=&quot;8,637 reputation&quot; class=&quot;comment-user&quot;&gt;Paarth&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41852298_2714920&quot;&gt;&lt;span title=&quot;2014-10-29 00:25:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 29, 2014 at 0:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@RadonRosborough Because in the first example, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are both labels (or pointers)  for &lt;code&gt;A()&lt;/code&gt; (the class). &lt;code&gt;a.foo&lt;/code&gt; references the &lt;code&gt;A().foo&lt;/code&gt; class method.  In the second example, though, &lt;code&gt;a&lt;/code&gt; becomes a reference to an &lt;i&gt;instance&lt;/i&gt; of &lt;code&gt;A()&lt;/code&gt;, as does &lt;code&gt;b&lt;/code&gt;.  Now that they are instances instead of the class object itself, &lt;i&gt;self&lt;/i&gt; allows the &lt;code&gt;foo&lt;/code&gt; method to operate on the instances.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2271861/legendarydude&quot; title=&quot;501 reputation&quot; class=&quot;comment-user&quot;&gt;LegendaryDude&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77100679_2714920&quot;&gt;&lt;span title=&quot;2017-07-12 17:07:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 12, 2017 at 17:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I wish Python sugarcoated the handlers as well as Ruby does.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/819417/cees-timmerman&quot; title=&quot;15,475 reputation&quot; class=&quot;comment-user&quot;&gt;Cees Timmerman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79661616_6433556&quot;&gt;&lt;span title=&quot;2017-09-21 18:18:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2017 at 18:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;class myClass:         def myFunc(this, name):             this.name = name&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1347816/lemuel-adane&quot; title=&quot;7,582 reputation&quot; class=&quot;comment-user&quot;&gt;LEMUEL  ADANE&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17780797_12201574&quot;&gt;&lt;span title=&quot;2012-10-26 12:01:24Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 26, 2012 at 12:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1 because of the distinction between &lt;code&gt;staticMethod()&lt;/code&gt; and &lt;code&gt;objectMethod(self)&lt;/code&gt;. I would like to add that in order to invoke the first, you would say &lt;code&gt;Animal.staticMethod()&lt;/code&gt;, while &lt;code&gt;objectMethod()&lt;/code&gt; needs an instance: &lt;code&gt;a = Animal(); a.objectMethod()&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/465139/laryx-decidua&quot; title=&quot;7,883 reputation&quot; class=&quot;comment-user&quot;&gt;Laryx Decidua&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment51164282_30442095&quot;&gt;&lt;span title=&quot;2015-07-24 09:37:38Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 24, 2015 at 9:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What you are saying isn&apos;t 100% true. That&apos;s just a convention. You can still call the static method from an object created. You just won&apos;t be able to use any class members because you didn&apos;t declare a self. I can even call Animal.objectMethod(animalObj) to call the non static. Basically this means a static method is only a method that doesn&apos;t use member variables. There shouldn&apos;t be any need to declare self. It&apos;s a silly language requirement I think. Languages like Lua and C++ give you obj variables behind the scenes.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/441521/user441521&quot; title=&quot;6,674 reputation&quot; class=&quot;comment-user&quot;&gt;user441521&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment57247895_30442095&quot;&gt;&lt;span title=&quot;2016-01-12 18:20:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 12, 2016 at 18:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You made a useless animalName string declaration and crashing animalName method.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/819417/cees-timmerman&quot; title=&quot;15,475 reputation&quot; class=&quot;comment-user&quot;&gt;Cees Timmerman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79661861_30442095&quot;&gt;&lt;span title=&quot;2017-09-21 18:25:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2017 at 18:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ytpillai Irrelevant. Confusing and incorrect code should not be presented as an answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/819417/cees-timmerman&quot; title=&quot;15,475 reputation&quot; class=&quot;comment-user&quot;&gt;Cees Timmerman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79662136_30442095&quot;&gt;&lt;span title=&quot;2017-09-21 18:34:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2017 at 18:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;def getAnimalName&lt;/code&gt; to not clobber the string you&apos;re trying to return, and &lt;code&gt;self&lt;/code&gt; refers to the instance of the class, not any field inside of it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/819417/cees-timmerman&quot; title=&quot;15,475 reputation&quot; class=&quot;comment-user&quot;&gt;Cees Timmerman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79662264_30442095&quot;&gt;&lt;span title=&quot;2017-09-21 18:38:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2017 at 18:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yes, I think we know why self is used, but the question is why does the language make you explicitly declare it. Many other languages don&apos;t require this and a language which prides itself on being brief, you&apos;d think they would just give you the variable behind the scenes to use like Lua or C++ (this) does.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/441521/user441521&quot; title=&quot;6,674 reputation&quot; class=&quot;comment-user&quot;&gt;user441521&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment57247643_26943812&quot;&gt;&lt;span title=&quot;2016-01-12 18:13:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 12, 2016 at 18:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@kmario23 You&apos;re response was from here: &lt;a href=&quot;https://pythontips.com/2013/08/07/the-self-variable-in-python-explained/&quot; rel=&quot;nofollow noreferrer&quot;&gt;pythontips.com/2013/08/07/the-self-variable-in-python-explained&lt;/a&gt;  Please always acknowledge original authors when posting answers as your own.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5893695/geekidharsh&quot; title=&quot;3,401 reputation&quot; class=&quot;comment-user&quot;&gt;geekidharsh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86661379_26943812&quot;&gt;&lt;span title=&quot;2018-04-13 18:12:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 13, 2018 at 18:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I don&apos;t think this helps richzilla to understand the reason behind it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/24587/georg-sch%c3%b6lly&quot; title=&quot;121,022 reputation&quot; class=&quot;comment-user&quot;&gt;Georg Schölly&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment2734185_2709828&quot;&gt;&lt;span title=&quot;2010-04-25 20:30:43Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 25, 2010 at 20:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@SilentGhost: you have nailed it. I am impressed. if I understand it correctly: I do create an object as an instance of the defined class and the self parameter refers to that object? I understand self refers in implicit way to the class itself but it would be great if you explain your answer a bit more.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4450090/dariusz-krynicki&quot; title=&quot;2,183 reputation&quot; class=&quot;comment-user&quot;&gt;Dariusz Krynicki&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment80247629_2709828&quot;&gt;&lt;span title=&quot;2017-10-09 14:51:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 9, 2017 at 14:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":289,"title":"What is the `self` parameter in class methods?","content":"\n                \n&lt;p&gt;&lt;code&gt;self&lt;/code&gt; refers to the specific object instance created from a class. But why must every method explicitly include &lt;code&gt;self&lt;/code&gt; as a parameter?&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name&lt;/span&gt;):\n        self.name = name\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Conversely, in Ruby, there is no &lt;code&gt;self&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-rb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ruby&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;)\n        &lt;span class=&quot;hljs-variable&quot;&gt;@name&lt;/span&gt; = name\n    &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"what-is-the-self-parameter-in-class-methods-1657387518448","postType":"QUESTION","createdAt":"2022-07-09T17:25:18.000Z","updatedAt":"2022-07-09T17:25:18.000Z","tags":[{"id":1759,"name":"self","slug":"self","createdAt":"2022-07-09T17:25:18.000Z","updatedAt":"2022-07-09T17:25:18.000Z","Questions_Tags":{"questionId":289,"tagId":1759}}]}]}},"__N_SSG":true}