{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;Probably the best way to check for errors in runtime API code is to define an assert style handler function and wrapper macro like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;gpuErrchk&lt;/span&gt;(ans) { &lt;span class=&quot;hljs-built_in&quot;&gt;gpuAssert&lt;/span&gt;((ans), __FILE__, __LINE__); }\ninline void &lt;span class=&quot;hljs-built_in&quot;&gt;gpuAssert&lt;/span&gt;(cudaError_t code, const char *file, int line, bool abort=true)\n{\n   if (code != cudaSuccess) \n   {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;fprintf&lt;/span&gt;(stderr,&quot;GPUassert: %s %s %d\\n&quot;, cudaGetErrorString(code), file, line);\n      if (abort) &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(code);\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can then wrap each API call with the &lt;code&gt;gpuErrchk&lt;/code&gt; macro, which will process the return status of the API call it wraps, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lisp&quot;&gt;gpuErrchk( &lt;span class=&quot;hljs-name&quot;&gt;cudaMalloc&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;&amp;amp;a_d&lt;/span&gt;, size*sizeof(&lt;span class=&quot;hljs-name&quot;&gt;int&lt;/span&gt;)) )&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If there is an error in a call, a textual message describing the error and the file and line in your code where the error occurred will be emitted to &lt;code&gt;stderr&lt;/code&gt; and the application will exit. You could conceivably modify &lt;code&gt;gpuAssert&lt;/code&gt; to raise an exception rather than call &lt;code&gt;exit()&lt;/code&gt; in a more sophisticated application if it were required.&lt;/p&gt;\n\n&lt;p&gt;A second related question is how to check for errors in kernel launches, which can&apos;t be directly wrapped in a macro call like standard runtime API calls. For kernels, something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;kernel&amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(a);\n&lt;span class=&quot;hljs-built_in&quot;&gt;gpuErrchk&lt;/span&gt;( cudaPeekAtLastError() );\n&lt;span class=&quot;hljs-built_in&quot;&gt;gpuErrchk&lt;/span&gt;( cudaDeviceSynchronize() );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will firstly check for invalid launch argument, then force the host to wait until the kernel stops and checks for an execution error. The synchronisation can be eliminated if you have a subsequent blocking API call like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;kernel&amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(a_d);\n&lt;span class=&quot;hljs-built_in&quot;&gt;gpuErrchk&lt;/span&gt;( cudaPeekAtLastError() );\n&lt;span class=&quot;hljs-built_in&quot;&gt;gpuErrchk&lt;/span&gt;( cudaMemcpy(a_h, a_d, size * sizeof(int), cudaMemcpyDeviceToHost) );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in which case the &lt;code&gt;cudaMemcpy&lt;/code&gt; call can return either errors which occurred during the kernel execution or those from the memory copy itself. This can be confusing for the beginner, and I would recommend using explicit synchronisation after a kernel launch during debugging to make it easier to understand where problems might be arising. &lt;/p&gt;\n\n&lt;p&gt;Note that when using &lt;a href=&quot;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cuda-dynamic-parallelism&quot; rel=&quot;noreferrer&quot;&gt;CUDA Dynamic Parallelism&lt;/a&gt;, a very similar methodology can and should be applied to any usage of the CUDA runtime API in device kernels, as well as after any device kernel launches:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; cdpErrchk(ans) { cdpAssert((ans), __FILE__, __LINE__); }&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;__device__ &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cdpAssert&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(cudaError_t code, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *file, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; line, &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; abort=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (code != cudaSuccess)\n   {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GPU kernel assert: %s %s %d\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;cudaGetErrorString&lt;/span&gt;(code), file, line);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (abort) &lt;span class=&quot;hljs-built_in&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;talonmies&apos; answer above is a fine way to abort an application in an &lt;code&gt;assert&lt;/code&gt;-style manner.&lt;/p&gt;\n\n&lt;p&gt;Occasionally we may wish to report and recover from an error condition in a C++ context as part of a larger application.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a reasonably terse way to do that by throwing a C++ exception derived from &lt;code&gt;std::runtime_error&lt;/code&gt; using &lt;code&gt;thrust::system_error&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;thrust/system_error.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;thrust/system/cuda/error.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;throw_on_cuda_error&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(cudaError_t code, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *file, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; line)&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(code != cudaSuccess)\n  {\n    std::stringstream ss;\n    ss &amp;lt;&amp;lt; file &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;(&quot;&lt;/span&gt; &amp;lt;&amp;lt; line &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;;\n    std::string file_and_line;\n    ss &amp;gt;&amp;gt; file_and_line;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; thrust::&lt;span class=&quot;hljs-built_in&quot;&gt;system_error&lt;/span&gt;(code, thrust::&lt;span class=&quot;hljs-built_in&quot;&gt;cuda_category&lt;/span&gt;(), file_and_line);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will incorporate the filename, line number, and an English language description of the &lt;code&gt;cudaError_t&lt;/code&gt; into the thrown exception&apos;s &lt;code&gt;.what()&lt;/code&gt; member:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;main&lt;/span&gt;()\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n  {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// do something crazy&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;throw_on_cuda_error&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;cudaSetDevice&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;__FILE__&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;__LINE__&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(thrust::&lt;span class=&quot;hljs-variable constant_&quot;&gt;system_error&lt;/span&gt; &amp;amp;e)\n  {\n    std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;CUDA error after cudaSetDevice: &quot;&lt;/span&gt; &amp;lt;&amp;lt; e.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;what&lt;/span&gt;() &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;endl&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// oops, recover&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;cudaSetDevice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ocaml&quot;&gt;$ nvcc &lt;span class=&quot;hljs-keyword&quot;&gt;exception&lt;/span&gt;.cu -run\n&lt;span class=&quot;hljs-type&quot;&gt;CUDA&lt;/span&gt; error after cudaSetDevice: &lt;span class=&quot;hljs-keyword&quot;&gt;exception&lt;/span&gt;.cu(&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;): invalid device ordinal\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A client of &lt;code&gt;some_function&lt;/code&gt; can distinguish CUDA errors from other kinds of errors if desired:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-comment&quot;&gt;// call some_function which may throw something&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;some_function&lt;/span&gt;();\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(thrust::&lt;span class=&quot;hljs-variable constant_&quot;&gt;system_error&lt;/span&gt; &amp;amp;e)\n{\n  std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;CUDA error during some_function: &quot;&lt;/span&gt; &amp;lt;&amp;lt; e.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;what&lt;/span&gt;() &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;endl&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;bad_alloc&lt;/span&gt; &amp;amp;e)\n{\n  std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bad memory allocation during some_function: &quot;&lt;/span&gt; &amp;lt;&amp;lt; e.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;what&lt;/span&gt;() &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;endl&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;runtime_error&lt;/span&gt; &amp;amp;e)\n{\n  std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Runtime error during some_function: &quot;&lt;/span&gt; &amp;lt;&amp;lt; e.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;what&lt;/span&gt;() &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;endl&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(...)\n{\n  std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Some other kind of error during some_function&quot;&lt;/span&gt; &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;endl&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// no idea what to do, so just rethrow the exception&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Because &lt;code&gt;thrust::system_error&lt;/code&gt; is a &lt;code&gt;std::runtime_error&lt;/code&gt;, we can alternatively handle it in the same manner of a broad class of errors if we don&apos;t require the precision of the previous example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-comment&quot;&gt;// call some_function which may throw something&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;some_function&lt;/span&gt;();\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;runtime_error&lt;/span&gt; &amp;amp;e)\n{\n  std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Runtime error during some_function: &quot;&lt;/span&gt; &amp;lt;&amp;lt; e.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;what&lt;/span&gt;() &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;endl&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;The C++-canonical way: Don&apos;t check for errors...use the C++ bindings which throw exceptions.&lt;/h3&gt;\n&lt;p&gt;I used to be irked by this problem; and I used to have a macro-cum-wrapper-function solution just like in Talonmies and Jared&apos;s answers, but, honestly? It makes using the CUDA Runtime API even more ugly and C-like.&lt;/p&gt;\n&lt;p&gt;So I&apos;ve approached this in a different and more fundamental way. For a sample of the result, here&apos;s part of the CUDA &lt;code&gt;vectorAdd&lt;/code&gt; sample - with &lt;em&gt;complete&lt;/em&gt; error checking of every runtime API call:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-rust&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// (... prepare host-side buffers here ...)&lt;/span&gt;\n\nauto current_device = cuda::device::current::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;();\nauto d_A = cuda::memory::device::make_unique&amp;lt;float[]&amp;gt;(current_device, numElements);\nauto d_B = cuda::memory::device::make_unique&amp;lt;float[]&amp;gt;(current_device, numElements);\nauto d_C = cuda::memory::device::make_unique&amp;lt;float[]&amp;gt;(current_device, numElements);\n\ncuda::memory::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;copy&lt;/span&gt;(d_A.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), h_A.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), size);\ncuda::memory::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;copy&lt;/span&gt;(d_B.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), h_B.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), size);\n\nauto launch_config = cuda::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;launch_config_builder&lt;/span&gt;()\n    .&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;overall_size&lt;/span&gt;(numElements)\n    .&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;block_size&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;build&lt;/span&gt;();\n\ncuda::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;launch&lt;/span&gt;(vectorAdd, launch_config,\n    d_A.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), d_B.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), d_C.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), numElements\n);    \ncuda::memory::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;copy&lt;/span&gt;(h_C.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), d_C.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), size);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// (... verify results here...)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Again - all potential errors are checked , and an exception if an error occurred (caveat: If the kernel caused some error &lt;em&gt;after&lt;/em&gt; launch, it will be caught after the attempt to copy the result, not before; to ensure the kernel was successful you would need to check for error between the launch and the copy with a &lt;code&gt;cuda::outstanding_error::ensure_none()&lt;/code&gt; command).&lt;/p&gt;\n&lt;p&gt;The code above uses my&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://github.com/eyalroz/cuda-api-wrappers&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Thin Modern-C++ wrappers for the CUDA Runtime API library&lt;/strong&gt;&lt;/a&gt; (Github)&lt;/p&gt;\n&lt;p&gt;Note that the exceptions carry both a string explanation and the CUDA runtime API status code after the failing call.&lt;/p&gt;\n&lt;p&gt;A few links to how CUDA errors are automagically checked with these wrappers:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/eyalroz/cuda-api-wrappers/blob/master/examples/by_runtime_api_module/error_handling.cu&quot; rel=&quot;nofollow noreferrer&quot;&gt;A test program throwing and catching a bunch of exceptions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://codedocs.xyz/eyalroz/cuda-api-wrappers/error_8hpp.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Documentation for the error-related functionality&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The solution discussed &lt;a href=&quot;https://code.google.com/p/stanford-cs193g-sp2010/wiki/TutorialWhenSomethingGoesWrong&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; worked well for me. This solution uses built-in cuda functions and is very simple to implement.&lt;/p&gt;\n\n&lt;p&gt;The relevant code is copied below:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;__global__ &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ptr)&lt;/span&gt;\n&lt;/span&gt;{\n  *ptr = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n  foo&amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// make the host block until the device is finished with foo&lt;/span&gt;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;cudaDeviceSynchronize&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// check for error&lt;/span&gt;\n  cudaError_t error = &lt;span class=&quot;hljs-built_in&quot;&gt;cudaGetLastError&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(error != cudaSuccess)\n  {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// print the CUDA error message and exit&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;CUDA error: %s\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;cudaGetErrorString&lt;/span&gt;(error));\n    &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;);\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;NVIDIA&apos;s CUDA &lt;a href=&quot;http://docs.nvidia.com/cuda/cuda-samples/&quot; rel=&quot;nofollow noreferrer&quot;&gt;samples&lt;/a&gt; contains a header, helper_cuda.h, that has macros called &lt;code&gt;getLastCudaError&lt;/code&gt; and &lt;code&gt;checkCudaErrors&lt;/code&gt;, which do pretty much what is described in &lt;a href=&quot;http://stackoverflow.com/a/14038590/2778484&quot;&gt;the accepted answer&lt;/a&gt;. See the samples for demonstrations. Just choose to &lt;a href=&quot;https://developer.nvidia.com/cuda-downloads&quot; rel=&quot;nofollow noreferrer&quot;&gt;install the samples along with the toolkit&lt;/a&gt; and you will have it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2778484/chappjc&quot; title=&quot;30,019 reputation&quot; class=&quot;comment-user&quot;&gt;chappjc&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment40052529_14038589&quot;&gt;&lt;span title=&quot;2014-09-03 01:16:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 3, 2014 at 1:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@chappjc I do not think this question and answer pretends to be original, if this is what you mean, but it has the merit to have educated people using CUDA error checking.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1886641/vitality&quot; title=&quot;19,685 reputation&quot; class=&quot;comment-user&quot;&gt;Vitality&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45487379_14038589&quot;&gt;&lt;span title=&quot;2015-02-18 17:51:22Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 18, 2015 at 17:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JackOLantern No, that&apos;s not what I was implying. This Q&amp;amp;A was very helpful to me and it&apos;s certainly easier to find than some header in the SDK. I thought it was valuable to point out this is also how NVIDIA handles it and where to look for more. I&apos;d soften the tone of my comment if I could though.  :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2778484/chappjc&quot; title=&quot;30,019 reputation&quot; class=&quot;comment-user&quot;&gt;chappjc&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45488058_14038589&quot;&gt;&lt;span title=&quot;2015-02-18 18:09:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 18, 2015 at 18:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Debugging tools allowing you to &quot;approach&quot; where the errors start have improved a great deal since 2012 on CUDA.  I have not worked with GUI based debuggers but the &lt;a href=&quot;http://stackoverflow.com/tags/cuda/info&quot;&gt;CUDA tag wiki&lt;/a&gt; mentions the command line cuda-gdb.  This is a VERY powerful tool as it allows you to step through actual warps and threads on the GPU itself (requires 2.0+ architecture most of the time though)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2584917/opetrenko&quot; title=&quot;346 reputation&quot; class=&quot;comment-user&quot;&gt;opetrenko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment57139959_14038589&quot;&gt;&lt;span title=&quot;2016-01-09 17:58:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 9, 2016 at 17:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@bluefeet: what was the deal with the edit that you rolled back? It looked like nothing actually changed in the markdown, but it was accepted as an edit. Was there something nefarious at work?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/681865/talonmies&quot; title=&quot;68,882 reputation&quot; class=&quot;comment-user owner&quot;&gt;talonmies&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment73128089_14038589&quot;&gt;&lt;span title=&quot;2017-03-25 18:09:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 25, 2017 at 18:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;shouldn&apos;t we add &lt;code&gt;cudaDeviceReset()&lt;/code&gt; before exiting also? And a clause for memory deallocation?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1780864/aurelius&quot; title=&quot;579 reputation&quot; class=&quot;comment-user&quot;&gt;Aurelius&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41611673_14038590&quot;&gt;&lt;span title=&quot;2014-10-21 14:14:41Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 21, 2014 at 14:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@talonmies: For Async CUDA runtime calls, such as cudaMemsetAsync and cudaMemcpyAsync, does it also require synchronizing gpu device and host thread via call to gpuErrchk( cudaDeviceSynchronize() ) ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/238038/nurabha&quot; title=&quot;1,062 reputation&quot; class=&quot;comment-user&quot;&gt;nurabha&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49007203_14038590&quot;&gt;&lt;span title=&quot;2015-05-26 15:55:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 26, 2015 at 15:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that explicit synchronization after kernel launch is not wrong but can severely alter execution performance and interleaving semantics. If you are using interleaving, doing explicit synchronization for debugging might hide a whole class of bugs which might be hard to track down in the Release build.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/524504/masterxilo&quot; title=&quot;2,280 reputation&quot; class=&quot;comment-user&quot;&gt;masterxilo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment60540943_14038590&quot;&gt;&lt;span title=&quot;2016-04-07 00:36:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 7, 2016 at 0:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Is there any way to get more specific errors for kernel executions? All the errors I&apos;m getting just give me the line number from the host code, not from the kernel.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/379572/azmisov&quot; title=&quot;5,451 reputation&quot; class=&quot;comment-user&quot;&gt;Azmisov&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment75358150_14038590&quot;&gt;&lt;span title=&quot;2017-05-25 02:15:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 25, 2017 at 2:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that, unlike all other CUDA errors, kernel &lt;i&gt;launch&lt;/i&gt; errors will not be reported by subsequent synchronizing calls to the CUDA runtime API. Just putting &lt;code&gt;gpuErrchk()&lt;/code&gt; around the next &lt;code&gt;cudaMemcpy()&lt;/code&gt; or &lt;code&gt;cudaDeviceSynchronize()&lt;/code&gt; call is thus insufficient to catch all possible error conditions. I&apos;d argue it is better style to call &lt;code&gt;cudaGetLastError()&lt;/code&gt; instead of &lt;code&gt;cudaPeekAtLastError()&lt;/code&gt; immediately after a kernel launch` even though they have the same effect, to aid the unwitting reader.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1662425/tera&quot; title=&quot;6,820 reputation&quot; class=&quot;comment-user&quot;&gt;tera&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment100690653_14038590&quot;&gt;&lt;span title=&quot;2019-07-17 20:40:43Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 17, 2019 at 20:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The thrust headers seem to have been rearranged. &lt;code&gt;&amp;lt;thrust/system/cuda_error.h&amp;gt;&lt;/code&gt; is now effectively &lt;code&gt;&amp;lt;thrust/system/cuda/error.h&amp;gt;&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2778484/chappjc&quot; title=&quot;30,019 reputation&quot; class=&quot;comment-user&quot;&gt;chappjc&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48719114_14051069&quot;&gt;&lt;span title=&quot;2015-05-18 20:05:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 18, 2015 at 20:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Jared, I think my wrapper library subsumes your suggested solution - mostly, and is lightweight enough to propably be replacement. (See my answer)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1593077/einpoklum&quot; title=&quot;103,988 reputation&quot; class=&quot;comment-user&quot;&gt;einpoklum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment73005399_14051069&quot;&gt;&lt;span title=&quot;2017-03-22 15:00:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 22, 2017 at 15:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":217,"title":"What is the canonical way to check for errors using the CUDA runtime API?","content":"\n                \n&lt;p&gt;Looking through the answers and comments on CUDA questions, and in the &lt;a href=&quot;https://stackoverflow.com/tags/cuda/info&quot;&gt;CUDA tag wiki&lt;/a&gt;, I see it is often suggested that the return status of every API call should checked for errors. The API documentation contains functions like &lt;code&gt;cudaGetLastError&lt;/code&gt;, &lt;code&gt;cudaPeekAtLastError&lt;/code&gt;, and &lt;code&gt;cudaGetErrorString&lt;/code&gt;, but what is the best way to put these together to reliably catch and report errors without requiring lots of extra code?&lt;/p&gt;\n    ","slug":"what-is-the-canonical-way-to-check-for-errors-using-the-cuda-runtime-api-1657387302698","postType":"QUESTION","createdAt":"2022-07-09T17:21:42.000Z","updatedAt":"2022-07-09T17:21:42.000Z","tags":[{"id":1497,"name":"error-checking","slug":"error-checking","createdAt":"2022-07-09T17:21:42.000Z","updatedAt":"2022-07-09T17:21:42.000Z","Questions_Tags":{"questionId":217,"tagId":1497}}]}]}},"__N_SSG":true}