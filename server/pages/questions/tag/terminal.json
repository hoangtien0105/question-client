{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;Use the &lt;a href=&quot;https://docs.python.org/library/subprocess.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt; module in the standard library:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; subprocess\nsubprocess.run([&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;-l&quot;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The advantage of &lt;a href=&quot;https://docs.python.org/library/subprocess.html#subprocess.run&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;subprocess.run&lt;/code&gt;&lt;/a&gt; over &lt;a href=&quot;https://docs.python.org/library/os.html#os.system&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.system&lt;/code&gt;&lt;/a&gt; is that it is more flexible (you can get the &lt;a href=&quot;https://docs.python.org/library/subprocess.html#subprocess.CompletedProcess.stdout&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/library/subprocess.html#subprocess.CompletedProcess.stderr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;https://docs.python.org/library/subprocess.html#subprocess.CompletedProcess.returncode&quot; rel=&quot;noreferrer&quot;&gt;&quot;real&quot; status code&lt;/a&gt;, better &lt;a href=&quot;https://docs.python.org/library/subprocess.html#subprocess.CalledProcessError&quot; rel=&quot;noreferrer&quot;&gt;error handling&lt;/a&gt;, etc...).&lt;/p&gt;\n&lt;p&gt;Even &lt;a href=&quot;https://docs.python.org/library/os.html#os.system&quot; rel=&quot;noreferrer&quot;&gt;the documentation for &lt;code&gt;os.system&lt;/code&gt;&lt;/a&gt; recommends using &lt;code&gt;subprocess&lt;/code&gt; instead:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The &lt;code&gt;subprocess&lt;/code&gt; module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function. See the &lt;a href=&quot;https://docs.python.org/library/subprocess.html#subprocess-replacements&quot; rel=&quot;noreferrer&quot;&gt;Replacing Older Functions with the subprocess Module&lt;/a&gt; section in the &lt;a href=&quot;https://docs.python.org/library/subprocess.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt; documentation for some helpful recipes.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;On Python 3.4 and earlier, use &lt;code&gt;subprocess.call&lt;/code&gt; instead of &lt;code&gt;.run&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;subprocess.call([&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;-l&quot;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Summary of ways to call external programs, including their advantages and disadvantages:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/os.html#os.system&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.system&lt;/code&gt;&lt;/a&gt; passes the command and arguments to your system&apos;s shell. This is nice because you can actually run multiple commands at once in this manner and set up pipes and input/output redirection. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;os.system(&lt;span class=&quot;hljs-string&quot;&gt;&quot;some_command &amp;lt; input_file | another_command &amp;gt; output_file&quot;&lt;/span&gt;)  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, while this is convenient, you have to manually handle the escaping of shell characters such as spaces, et cetera. On the other hand, this also lets you run commands which are simply shell commands and not actually external programs.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/os.html#os.popen&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.popen&lt;/code&gt;&lt;/a&gt; will do the same thing as &lt;code&gt;os.system&lt;/code&gt; except that it gives you a file-like object that you can use to access standard input/output for that process. There are 3 other variants of popen that all handle the i/o slightly differently. If you pass everything as a string, then your command is passed to the shell; if you pass them as a list then you don&apos;t need to worry about escaping anything. Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(os.popen(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls -l&quot;&lt;/span&gt;).read())\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.Popen&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;subprocess.Popen&lt;/code&gt;&lt;/a&gt;. This is intended as a replacement for &lt;code&gt;os.popen&lt;/code&gt;, but has the downside of being slightly more complicated by virtue of being so comprehensive. For example, you&apos;d say:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; subprocess.Popen(&lt;span class=&quot;hljs-string&quot;&gt;&quot;echo Hello World&quot;&lt;/span&gt;, shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, stdout=subprocess.PIPE).stdout.read()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;instead of&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; os.popen(&lt;span class=&quot;hljs-string&quot;&gt;&quot;echo Hello World&quot;&lt;/span&gt;).read()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;but it is nice to have all of the options there in one unified class instead of 4 different popen functions. See &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#popen-constructor&quot; rel=&quot;noreferrer&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.call&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;subprocess.call&lt;/code&gt;&lt;/a&gt;. This is basically just like the &lt;code&gt;Popen&lt;/code&gt; class and takes all of the same arguments, but it simply waits until the command completes and gives you the return code. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;return_code = subprocess.call(&lt;span class=&quot;hljs-string&quot;&gt;&quot;echo Hello World&quot;&lt;/span&gt;, shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.run&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;subprocess.run&lt;/code&gt;&lt;/a&gt;. Python 3.5+ only. Similar to the above but even more flexible and returns a &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;CompletedProcess&lt;/code&gt;&lt;/a&gt; object when the command finishes executing.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;os.fork&lt;/code&gt;, &lt;code&gt;os.exec&lt;/code&gt;, &lt;code&gt;os.spawn&lt;/code&gt; are similar to their C language counterparts, but I don&apos;t recommend using them directly.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;The &lt;code&gt;subprocess&lt;/code&gt; module should probably be what you use.&lt;/p&gt;\n&lt;p&gt;Finally, please be aware that for all methods where you pass the final command to be executed by the shell as a string and you are responsible for escaping it. &lt;strong&gt;There are serious security implications&lt;/strong&gt; if any part of the string that you pass can not be fully trusted. For example, if a user is entering some/any part of the string. If you are unsure, only use these methods with constants. To give you a hint of the implications consider this code:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; subprocess.Popen(&lt;span class=&quot;hljs-string&quot;&gt;&quot;echo %s &quot;&lt;/span&gt; % user_input, stdout=PIPE).stdout.read()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and imagine that the user enters something &quot;&lt;code&gt;my mama didnt love me &amp;amp;&amp;amp; rm -rf /&lt;/code&gt;&quot; which could erase the whole filesystem.&lt;/p&gt;\n    ","\n&lt;p&gt;Typical implementation:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; subprocess\n\np = subprocess.Popen(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;, shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; p.stdout.readlines():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; line,\nretval = p.wait()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You are free to do what you want with the &lt;code&gt;stdout&lt;/code&gt; data in the pipe.  In fact, you can simply omit those parameters (&lt;code&gt;stdout=&lt;/code&gt; and &lt;code&gt;stderr=&lt;/code&gt;) and it&apos;ll behave like &lt;code&gt;os.system()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Some hints on detaching the child process from the calling one (starting the child process in background).&lt;/p&gt;\n\n&lt;p&gt;Suppose you want to start a long task from a CGI script. That is, the child process should live longer than the CGI script execution process.&lt;/p&gt;\n\n&lt;p&gt;The classical example from the subprocess module documentation is:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; subprocess\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Some code here&lt;/span&gt;\n\npid = subprocess.Popen([sys.executable, &lt;span class=&quot;hljs-string&quot;&gt;&quot;longtask.py&quot;&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;# Call subprocess&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Some more code here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The idea here is that you do not want to wait in the line &apos;call subprocess&apos; until the longtask.py is finished. But it is not clear what happens after the line &apos;some more code here&apos; from the example.&lt;/p&gt;\n\n&lt;p&gt;My target platform was FreeBSD, but the development was on Windows, so I faced the problem on Windows first.&lt;/p&gt;\n\n&lt;p&gt;On Windows (Windows&amp;nbsp;XP), the parent process will not finish until the longtask.py has finished its work. It is not what you want in a CGI script. The problem is not specific to Python; in the PHP community the problems are the same.&lt;/p&gt;\n\n&lt;p&gt;The solution is to pass DETACHED_PROCESS &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx&quot; rel=&quot;noreferrer&quot;&gt;Process Creation Flag&lt;/a&gt; to the underlying CreateProcess function in Windows API.\nIf you happen to have installed pywin32, you can import the flag from the win32process module, otherwise you should define it yourself:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;DETACHED_PROCESS&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00000008\n\n&lt;span class=&quot;hljs-attr&quot;&gt;pid&lt;/span&gt; = subprocess.Popen([sys.executable, &lt;span class=&quot;hljs-string&quot;&gt;&quot;longtask.py&quot;&lt;/span&gt;],\n                       &lt;span class=&quot;hljs-attr&quot;&gt;creationflags&lt;/span&gt;=DETACHED_PROCESS).pid\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;/* &lt;em&gt;UPD 2015.10.27&lt;/em&gt; @eryksun in a comment below notes, that the semantically correct flag is CREATE_NEW_CONSOLE (0x00000010) */&lt;/p&gt;\n\n&lt;p&gt;On FreeBSD we have another problem: when the parent process is finished, it finishes the child processes as well. And that is not what you want in a CGI script either. Some experiments showed that the problem seemed to be in sharing sys.stdout. And the working solution was the following:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lua&quot;&gt;pid = subprocess.Popen([sys.executable, &lt;span class=&quot;hljs-string&quot;&gt;&quot;longtask.py&quot;&lt;/span&gt;], &lt;span class=&quot;hljs-built_in&quot;&gt;stdout&lt;/span&gt;=subprocess.PIPE, &lt;span class=&quot;hljs-built_in&quot;&gt;stderr&lt;/span&gt;=subprocess.PIPE, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;=subprocess.PIPE)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I have not checked the code on other platforms and do not know the reasons of the behaviour on FreeBSD. If anyone knows, please share your ideas. Googling on starting background processes in Python does not shed any light yet.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lua&quot;&gt;import &lt;span class=&quot;hljs-built_in&quot;&gt;os&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;os&lt;/span&gt;.system(&lt;span class=&quot;hljs-string&quot;&gt;&quot;your command&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that this is dangerous, since the command isn&apos;t cleaned. I leave it up to you to google for the relevant documentation on the &apos;os&apos; and &apos;sys&apos; modules. There are a bunch of functions (exec* and spawn*) that will do similar things.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;d recommend using the &lt;a href=&quot;http://docs.python.org/library/subprocess.html&quot; rel=&quot;noreferrer&quot;&gt;subprocess&lt;/a&gt; module instead of os.system because it does shell escaping for you and is therefore much safer.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;subprocess&lt;span class=&quot;hljs-selector-class&quot;&gt;.call&lt;/span&gt;(&lt;span class=&quot;hljs-selector-attr&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;ping&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;localhost&apos;&lt;/span&gt;]&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;os&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ls -al&apos;&lt;/span&gt;\nos.system(cmd)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to return the results of the command, you can use &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.popen&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.popen&lt;/code&gt;&lt;/a&gt;. However, this is deprecated since version 2.6 in favor of the &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#module-subprocess&quot; rel=&quot;noreferrer&quot;&gt;subprocess module&lt;/a&gt;, which other answers have covered well.&lt;/p&gt;\n    ","\n&lt;p&gt;There are lots of different libraries which allow you to call external commands with Python. For each library I&apos;ve given a description and shown an example of calling an external command. The command I used as the example is &lt;code&gt;ls -l&lt;/code&gt; (list all files). If you want to find out more about any of the libraries I&apos;ve listed and linked the documentation for each of them.&lt;/p&gt;\n&lt;h3&gt;Sources&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;subprocess: &lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html&quot; rel=&quot;noreferrer&quot;&gt;https://docs.python.org/3.5/library/subprocess.html&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;shlex: &lt;a href=&quot;https://docs.python.org/3/library/shlex.html&quot; rel=&quot;noreferrer&quot;&gt;https://docs.python.org/3/library/shlex.html&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;os: &lt;a href=&quot;https://docs.python.org/3.5/library/os.html&quot; rel=&quot;noreferrer&quot;&gt;https://docs.python.org/3.5/library/os.html&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;sh: &lt;a href=&quot;https://amoffat.github.io/sh/&quot; rel=&quot;noreferrer&quot;&gt;https://amoffat.github.io/sh/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;plumbum: &lt;a href=&quot;https://plumbum.readthedocs.io/en/latest/&quot; rel=&quot;noreferrer&quot;&gt;https://plumbum.readthedocs.io/en/latest/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;pexpect: &lt;a href=&quot;https://pexpect.readthedocs.io/en/stable/&quot; rel=&quot;noreferrer&quot;&gt;https://pexpect.readthedocs.io/en/stable/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;fabric: &lt;a href=&quot;http://www.fabfile.org/&quot; rel=&quot;noreferrer&quot;&gt;http://www.fabfile.org/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;envoy: &lt;a href=&quot;https://github.com/kennethreitz/envoy&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/kennethreitz/envoy&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;commands: &lt;a href=&quot;https://docs.python.org/2/library/commands.html&quot; rel=&quot;noreferrer&quot;&gt;https://docs.python.org/2/library/commands.html&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;These are all the libraries&lt;/h3&gt;\n&lt;p&gt;Hopefully this will help you make a decision on which library to use :)&lt;/p&gt;\n&lt;h3&gt;&lt;em&gt;subprocess&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;Subprocess allows you to call external commands and connect them to their input/output/error pipes (stdin, stdout, and stderr). Subprocess is the default choice for running commands, but sometimes other modules are better.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;subprocess.run([&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;-l&quot;&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;# Run command&lt;/span&gt;\nsubprocess.run([&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;-l&quot;&lt;/span&gt;], stdout=subprocess.PIPE) &lt;span class=&quot;hljs-comment&quot;&gt;# This will run the command and return any output&lt;/span&gt;\nsubprocess.run(shlex.&lt;span class=&quot;hljs-keyword&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls -l&quot;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;# You can also use the shlex library to split the command&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;&lt;em&gt;os&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;os is used for &quot;operating system dependent functionality&quot;. It can also be used to call external commands with &lt;code&gt;os.system&lt;/code&gt; and &lt;code&gt;os.popen&lt;/code&gt; (Note: There is also a subprocess.popen). os will always run the shell and is a simple alternative for people who don&apos;t need to, or don&apos;t know how to use &lt;code&gt;subprocess.run&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;os.system(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls -l&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Run command&lt;/span&gt;\nos.popen(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls -l&quot;&lt;/span&gt;).read() &lt;span class=&quot;hljs-comment&quot;&gt;# This will run the command and return any output&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;&lt;em&gt;sh&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;sh is a subprocess interface which lets you call programs as if they were functions. This is useful if you want to run a command multiple times.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-makefile&quot;&gt;sh.ls(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-l&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Run command normally&lt;/span&gt;\nls_cmd = sh.Command(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Save command as a variable&lt;/span&gt;\nls_cmd() &lt;span class=&quot;hljs-comment&quot;&gt;# Run command as if it were a function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;&lt;em&gt;plumbum&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;plumbum is a library for &quot;script-like&quot; Python programs. You can call programs like functions as in &lt;code&gt;sh&lt;/code&gt;. Plumbum is useful if you want to run a pipeline without the shell.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-makefile&quot;&gt;ls_cmd = plumbum.local(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls -l&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Get command&lt;/span&gt;\nls_cmd() &lt;span class=&quot;hljs-comment&quot;&gt;# Run command&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;&lt;em&gt;pexpect&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;pexpect lets you spawn child applications, control them and find patterns in their output. This is a better alternative to subprocess for commands that expect a tty on Unix.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;pexpect.run(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls -l&quot;&lt;/span&gt;) # Run command &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; normal\nchild = pexpect.spawn(&lt;span class=&quot;hljs-string&quot;&gt;&apos;scp foo user@example.com:.&apos;&lt;/span&gt;) # Spawns child application\nchild.&lt;span class=&quot;hljs-keyword&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Password:&apos;&lt;/span&gt;) # When &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; the output\nchild.sendline(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mypassword&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;&lt;em&gt;fabric&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;fabric is a Python 2.5 and 2.7 library. It allows you to execute local and remote shell commands. Fabric is simple alternative for running commands in a secure shell (SSH)&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;fabric.operations.local(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls -l&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Run command as normal&lt;/span&gt;\nfabric.operations.local(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls -l&apos;&lt;/span&gt;, capture = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Run command and receive output&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;&lt;em&gt;envoy&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;envoy is known as &quot;subprocess for humans&quot;. It is used as a convenience wrapper around the &lt;code&gt;subprocess&lt;/code&gt; module.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-makefile&quot;&gt;r = envoy.run(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls -l&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Run command&lt;/span&gt;\nr.std_out &lt;span class=&quot;hljs-comment&quot;&gt;# Get output&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;&lt;em&gt;commands&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;commands&lt;/code&gt; contains wrapper functions for &lt;code&gt;os.popen&lt;/code&gt;, but it has been removed from Python 3 since &lt;code&gt;subprocess&lt;/code&gt; is a better alternative.&lt;/p&gt;\n    ","\n&lt;h3&gt;With the standard library&lt;/h3&gt;\n\n&lt;p&gt;Use the &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.run&quot; rel=&quot;noreferrer&quot;&gt;subprocess module&lt;/a&gt; (Python 3):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;import subprocess\nsubprocess&lt;span class=&quot;hljs-selector-class&quot;&gt;.run&lt;/span&gt;(&lt;span class=&quot;hljs-selector-attr&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-l&apos;&lt;/span&gt;]&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is the recommended standard way. However, more complicated tasks (pipes, output, input, etc.) can be tedious to construct and write.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Note on Python version: If you are still using Python 2, &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#subprocess.call&quot; rel=&quot;noreferrer&quot;&gt;subprocess.call&lt;/a&gt; works in a similar way.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;ProTip: &lt;a href=&quot;https://docs.python.org/2/library/shlex.html#shlex.split&quot; rel=&quot;noreferrer&quot;&gt;shlex.split&lt;/a&gt; can help you to parse the command for &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt;, and other &lt;code&gt;subprocess&lt;/code&gt; functions in case you don&apos;t want (or you can&apos;t!) provide them in form of lists:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; shlex\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; subprocess\n&lt;span class=&quot;hljs-title&quot;&gt;subprocess&lt;/span&gt;.run(shlex.split(&apos;ls -l&apos;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;With external dependencies&lt;/h3&gt;\n\n&lt;p&gt;If you do not mind external dependencies, use &lt;a href=&quot;https://pypi.python.org/pypi/plumbum&quot; rel=&quot;noreferrer&quot;&gt;plumbum&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; plumbum.cmd &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ifconfig\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ifconfig[&lt;span class=&quot;hljs-string&quot;&gt;&apos;wlan0&apos;&lt;/span&gt;]())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is the best &lt;code&gt;subprocess&lt;/code&gt; wrapper. It&apos;s cross-platform, i.e. it works on both Windows and Unix-like systems. Install by &lt;code&gt;pip install plumbum&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Another popular library is &lt;a href=&quot;https://pypi.python.org/pypi/sh&quot; rel=&quot;noreferrer&quot;&gt;sh&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sh &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ifconfig\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ifconfig(&lt;span class=&quot;hljs-string&quot;&gt;&apos;wlan0&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, &lt;code&gt;sh&lt;/code&gt; dropped Windows support, so it&apos;s not as awesome as it used to be. Install by &lt;code&gt;pip install sh&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I always use &lt;code&gt;fabric&lt;/code&gt; for this things like:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; fabric.operations import &lt;span class=&quot;hljs-keyword&quot;&gt;local&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;local&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;, capture&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\nprint &quot;Content:/n%s&quot; &lt;span class=&quot;hljs-operator&quot;&gt;%&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;result&lt;/span&gt;, )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But this seem to be a good tool: &lt;a href=&quot;https://github.com/amoffat/sh&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;sh&lt;/code&gt; (Python subprocess interface)&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Look at an example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sh &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; vgdisplay\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; vgdisplay()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; vgdisplay(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-v&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; vgdisplay(v=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Check the &quot;pexpect&quot; Python library, too.&lt;/p&gt;\n\n&lt;p&gt;It allows for interactive controlling of external programs/commands, even ssh, ftp, telnet, etc. You can just type something like:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;child = pexpect.spawn(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ftp 192.168.0.24&apos;&lt;/span&gt;)\n\nchild.&lt;span class=&quot;hljs-keyword&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(?i)name .*: &apos;&lt;/span&gt;)\n\nchild.sendline(&lt;span class=&quot;hljs-string&quot;&gt;&apos;anonymous&apos;&lt;/span&gt;)\n\nchild.&lt;span class=&quot;hljs-keyword&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(?i)password&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you need the output from the command you are calling,\nthen you can use &lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#subprocess.check_output&quot; rel=&quot;noreferrer&quot;&gt;subprocess.check_output&lt;/a&gt; (Python 2.7+).&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;subprocess.check_output([&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;-l&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/dev/null&quot;&lt;/span&gt;])\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\\n&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also note the &lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#frequently-used-arguments&quot; rel=&quot;noreferrer&quot;&gt;shell&lt;/a&gt; parameter.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If shell is &lt;code&gt;True&lt;/code&gt;, the specified command will be executed through the shell. This can be useful if you are using Python primarily for the enhanced control flow it offers over most system shells and still want convenient access to other shell features such as shell pipes, filename wildcards, environment variable expansion, and expansion of ~ to a users home directory. However, note that Python itself offers implementations of many shell-like features (in particular, &lt;code&gt;glob&lt;/code&gt;, &lt;code&gt;fnmatch&lt;/code&gt;, &lt;code&gt;os.walk()&lt;/code&gt;, &lt;code&gt;os.path.expandvars()&lt;/code&gt;, &lt;code&gt;os.path.expanduser()&lt;/code&gt;, and &lt;code&gt;shutil&lt;/code&gt;).&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;h1&gt;Update:&lt;/h1&gt;\n\n&lt;p&gt;&lt;code&gt;subprocess.run&lt;/code&gt; is the recommended approach &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.5.html#whatsnew-subprocess&quot; rel=&quot;noreferrer&quot;&gt;as of Python 3.5&lt;/a&gt; if your code does not need to maintain compatibility with earlier Python versions. It&apos;s more consistent and offers similar ease-of-use as Envoy. (Piping isn&apos;t as straightforward though. See &lt;a href=&quot;https://stackoverflow.com/questions/7389662/link-several-popen-commands-with-pipes&quot;&gt;this question for how&lt;/a&gt;.)&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s some examples from &lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#subprocess.run&quot; rel=&quot;noreferrer&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Run a process:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;subprocess.run([&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;-l&quot;&lt;/span&gt;])  &lt;span class=&quot;hljs-comment&quot;&gt;# Doesn&apos;t capture output&lt;/span&gt;\nCompletedProcess(args=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-l&apos;&lt;/span&gt;], returncode=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Raise on failed run:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; subprocess.run(&quot;exit 1&quot;, shell&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\nTraceback (most recent &lt;span class=&quot;hljs-keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;last&lt;/span&gt;):\n  ...\nsubprocess.CalledProcessError: Command &lt;span class=&quot;hljs-string&quot;&gt;&apos;exit 1&apos;&lt;/span&gt; returned non&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;zero exit status &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Capture output:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lua&quot;&gt;&amp;gt;&amp;gt;&amp;gt; subprocess.run([&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;-l&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/dev/null&quot;&lt;/span&gt;], &lt;span class=&quot;hljs-built_in&quot;&gt;stdout&lt;/span&gt;=subprocess.PIPE)\nCompletedProcess(args=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-l&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/dev/null&apos;&lt;/span&gt;], returncode=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n&lt;span class=&quot;hljs-built_in&quot;&gt;stdout&lt;/span&gt;=b&lt;span class=&quot;hljs-string&quot;&gt;&apos;crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\\n&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Original answer:&lt;/h1&gt;\n\n&lt;p&gt;I recommend trying &lt;a href=&quot;https://github.com/kennethreitz/envoy&quot; rel=&quot;noreferrer&quot;&gt;Envoy&lt;/a&gt;. It&apos;s a wrapper for subprocess, which in turn &lt;a href=&quot;http://docs.python.org/2/library/subprocess.html&quot; rel=&quot;noreferrer&quot;&gt;aims to replace&lt;/a&gt; the older modules and functions. Envoy is subprocess for humans.&lt;/p&gt;\n\n&lt;p&gt;Example usage from &lt;a href=&quot;https://github.com/kennethreitz/envoy#readme&quot; rel=&quot;noreferrer&quot;&gt;the README&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r = envoy.run(&lt;span class=&quot;hljs-string&quot;&gt;&apos;git config&apos;&lt;/span&gt;, data=&lt;span class=&quot;hljs-string&quot;&gt;&apos;data to pipe in&apos;&lt;/span&gt;, timeout=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r.status_code\n&lt;span class=&quot;hljs-number&quot;&gt;129&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r.std_out\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;usage: git config [options]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r.std_err\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Pipe stuff around too:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r = envoy.run(&lt;span class=&quot;hljs-string&quot;&gt;&apos;uptime | pbcopy&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r.command\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;pbcopy&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r.status_code\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r.history\n[&amp;lt;Response &lt;span class=&quot;hljs-string&quot;&gt;&apos;uptime&apos;&lt;/span&gt;&amp;gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is how I run my commands. This code has everything you need pretty much&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; subprocess &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Popen, PIPE\ncmd = &lt;span class=&quot;hljs-string&quot;&gt;&quot;ls -l ~/&quot;&lt;/span&gt;\np = Popen(cmd , shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, stdout=PIPE, stderr=PIPE)\nout, err = p.communicate()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Return code: &quot;&lt;/span&gt;, p.returncode\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; out.rstrip(), err.rstrip()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n&lt;h2&gt;How to execute a program or call a system command from Python&lt;/h2&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Simple, use &lt;code&gt;subprocess.run&lt;/code&gt;, which returns a &lt;code&gt;CompletedProcess&lt;/code&gt; object:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; subprocess &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; run\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; shlex &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; split\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;completed_process = run(split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;python --version&apos;&lt;/span&gt;))\nPython &lt;span class=&quot;hljs-number&quot;&gt;3.8&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.8&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;completed_process\nCompletedProcess(args=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;--version&apos;&lt;/span&gt;], returncode=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(&lt;code&gt;run&lt;/code&gt; wants a list of lexically parsed shell arguments - this is what you&apos;d type in a shell, separated by spaces, but not where the spaces are quoted, so use a specialized function, &lt;code&gt;split&lt;/code&gt;, to split up what you would literally type into your shell)&lt;/p&gt;\n&lt;h3&gt;Why?&lt;/h3&gt;\n&lt;p&gt;As of Python 3.5, the documentation recommends &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.run&quot; rel=&quot;noreferrer&quot;&gt;subprocess.run&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The recommended approach to invoking subprocesses is to use the run() function for all use cases it can handle. For more advanced use cases, the underlying Popen interface can be used directly.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Here&apos;s an example of the simplest possible usage - and it does exactly as asked:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; subprocess &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; run\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; shlex &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; split\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;completed_process = run(split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;python --version&apos;&lt;/span&gt;))\nPython &lt;span class=&quot;hljs-number&quot;&gt;3.8&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.8&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;completed_process\nCompletedProcess(args=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;--version&apos;&lt;/span&gt;], returncode=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;run&lt;/code&gt; waits for the command to successfully finish, then returns a &lt;code&gt;CompletedProcess&lt;/code&gt; object. It may instead raise &lt;code&gt;TimeoutExpired&lt;/code&gt; (if you give it a &lt;code&gt;timeout=&lt;/code&gt; argument) or &lt;code&gt;CalledProcessError&lt;/code&gt; (if it fails and you pass &lt;code&gt;check=True&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;As you might infer from the above example, stdout and stderr both get piped to your own stdout and stderr by default.&lt;/p&gt;\n&lt;p&gt;We can inspect the returned object and see the command that was given and the returncode:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;completed_process.args\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;--version&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;completed_process.returncode\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Capturing output&lt;/h3&gt;\n&lt;p&gt;If you want to capture the output, you can pass &lt;code&gt;subprocess.PIPE&lt;/code&gt; to the appropriate &lt;code&gt;stderr&lt;/code&gt; or &lt;code&gt;stdout&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; subprocess &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; PIPE\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;completed_process = run(shlex.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;python --version&apos;&lt;/span&gt;), stdout=PIPE, stderr=PIPE)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;completed_process.stdout\n&lt;span class=&quot;hljs-string&quot;&gt;b&apos;Python 3.8.8\\n&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;completed_process.stderr\n&lt;span class=&quot;hljs-string&quot;&gt;b&apos;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And those respective attributes return bytes.&lt;/p&gt;\n&lt;h2&gt;Pass a command list&lt;/h2&gt;\n&lt;p&gt;One might easily move from manually providing a command string (like the question suggests) to providing a string built programmatically. &lt;strong&gt;Don&apos;t build strings programmatically.&lt;/strong&gt; This is a potential security issue. It&apos;s better to assume you don&apos;t trust the input.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; textwrap\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;args = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;, textwrap.__file__]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cp = run(args, stdout=subprocess.PIPE)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cp.stdout\n&lt;span class=&quot;hljs-string&quot;&gt;b&apos;Hello there.\\n  This is indented.\\n&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note, only &lt;code&gt;args&lt;/code&gt; should be passed positionally.&lt;/p&gt;\n&lt;h2&gt;Full Signature&lt;/h2&gt;\n&lt;p&gt;Here&apos;s the actual signature in the source and as shown by &lt;code&gt;help(run)&lt;/code&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*popenargs, &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, timeout=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, check=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, **kwargs&lt;/span&gt;):\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The &lt;code&gt;popenargs&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt; are given to the &lt;code&gt;Popen&lt;/code&gt; constructor. &lt;code&gt;input&lt;/code&gt; can be a string of bytes (or unicode, if specify encoding or &lt;code&gt;universal_newlines=True&lt;/code&gt;) that will be piped to the subprocess&apos;s stdin.&lt;/p&gt;\n&lt;p&gt;The documentation describes &lt;code&gt;timeout=&lt;/code&gt; and &lt;code&gt;check=True&lt;/code&gt; better than I could:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The timeout argument is passed to Popen.communicate(). If the timeout\nexpires, the child process will be killed and waited for. The\nTimeoutExpired exception will be re-raised after the child process has\nterminated.&lt;/p&gt;\n&lt;p&gt;If check is true, and the process exits with a non-zero exit code, a\nCalledProcessError exception will be raised. Attributes of that\nexception hold the arguments, the exit code, and stdout and stderr if\nthey were captured.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;and this example for &lt;code&gt;check=True&lt;/code&gt; is better than one I could come up with:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; subprocess.run(&quot;exit 1&quot;, shell&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\nTraceback (most recent &lt;span class=&quot;hljs-keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;last&lt;/span&gt;):\n  ...\nsubprocess.CalledProcessError: Command &lt;span class=&quot;hljs-string&quot;&gt;&apos;exit 1&apos;&lt;/span&gt; returned non&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;zero exit status &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;h3&gt;Expanded Signature&lt;/h3&gt;\n&lt;p&gt;Here&apos;s an expanded signature, as given in the documentation:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;subprocess.run(args, *, stdin=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, stdout=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, stderr=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, \nshell=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, cwd=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, timeout=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, check=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, encoding=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, \nerrors=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Note that this indicates that only the args list should be passed positionally. So pass the remaining arguments as keyword arguments.&lt;/p&gt;\n&lt;h3&gt;Popen&lt;/h3&gt;\n&lt;p&gt;When use &lt;code&gt;Popen&lt;/code&gt; instead? I would struggle to find use-case based on the arguments alone. Direct usage of &lt;code&gt;Popen&lt;/code&gt; would, however, give you access to its methods, including &lt;code&gt;poll&lt;/code&gt;, &apos;send_signal&apos;, &apos;terminate&apos;, and &apos;wait&apos;.&lt;/p&gt;\n&lt;p&gt;Here&apos;s the &lt;code&gt;Popen&lt;/code&gt; signature as given in &lt;a href=&quot;https://github.com/python/cpython/blob/master/Lib/subprocess.py#L752&quot; rel=&quot;noreferrer&quot;&gt;the source&lt;/a&gt;. I think this is the most precise encapsulation of the information (as opposed to &lt;code&gt;help(Popen)&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, args, bufsize=-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, executable=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;,\n             stdin=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, stdout=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, stderr=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;,\n             preexec_fn=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, close_fds=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;,\n             shell=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, cwd=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, env=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, universal_newlines=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;,\n             startupinfo=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, creationflags=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n             restore_signals=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, start_new_session=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;,\n             pass_fds=(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;), *, user=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, group=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, extra_groups=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;,\n             encoding=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, errors=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, text=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, umask=-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, pipesize=-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;):\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But more informative is &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#popen-constructor&quot; rel=&quot;noreferrer&quot;&gt;the &lt;code&gt;Popen&lt;/code&gt; documentation&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;subprocess.Popen(args, bufsize&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, executable&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, stdin&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, stdout&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, \nstderr&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, preexec_fn&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, close_fds&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, shell&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, cwd&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;,\nenv&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, universal_newlines&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, startupinfo&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, creationflags&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, \nrestore_signals&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, start_new_session&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, pass_fds&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;(), &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, \nextra_groups&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, umask&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, encoding&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, errors&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, \ntext&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Execute a child program in a new process. On POSIX, the class uses\nos.execvp()-like behavior to execute the child program. On Windows,\nthe class uses the Windows CreateProcess() function. The arguments to\nPopen are as follows.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Understanding the remaining documentation on &lt;code&gt;Popen&lt;/code&gt; will be left as an exercise for the reader.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;em&gt;&lt;a href=&quot;https://docs.python.org/2/library/subprocess.html&quot; rel=&quot;noreferrer&quot;&gt;subprocess&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;...or for a very simple command:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lua&quot;&gt;import &lt;span class=&quot;hljs-built_in&quot;&gt;os&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;os&lt;/span&gt;.system(&lt;span class=&quot;hljs-string&quot;&gt;&apos;cat testfile&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;os.system&lt;/code&gt; is OK, but kind of dated.  It&apos;s also not very secure.  Instead, try &lt;code&gt;subprocess&lt;/code&gt;.  &lt;code&gt;subprocess&lt;/code&gt; does not call sh directly and is therefore more secure than &lt;code&gt;os.system&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Get more information &lt;a href=&quot;https://docs.python.org/library/subprocess.html&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;As of &lt;strong&gt;Python 3.7.0 released on June 27th 2018 (&lt;a href=&quot;https://docs.python.org/3/whatsnew/3.7.html&quot; rel=&quot;noreferrer&quot;&gt;https://docs.python.org/3/whatsnew/3.7.html&lt;/a&gt;)&lt;/strong&gt;, you can achieve your desired result in the most powerful while equally simple way. This answer intends to show you the essential summary of various options in a short manner. For in-depth answers, please see the other ones.&lt;/em&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;TL;DR in 2021&lt;/h1&gt;\n&lt;p&gt;The big advantage of &lt;code&gt;os.system(...)&lt;/code&gt; was its simplicity. &lt;code&gt;subprocess&lt;/code&gt; is better and still easy to use, especially as of &lt;strong&gt;Python 3.5&lt;/strong&gt;.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; subprocess\nsubprocess.run(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls -a&quot;&lt;/span&gt;, shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; This is the exact answer to your question - running a command&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;like in a shell&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;h3&gt;Preferred Way&lt;/h3&gt;\n&lt;p&gt;If possible, remove the shell overhead and run the command directly (requires a list).&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;import subprocess\nsubprocess&lt;span class=&quot;hljs-selector-class&quot;&gt;.run&lt;/span&gt;(&lt;span class=&quot;hljs-selector-attr&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;help&quot;&lt;/span&gt;]&lt;/span&gt;)\nsubprocess&lt;span class=&quot;hljs-selector-class&quot;&gt;.run&lt;/span&gt;(&lt;span class=&quot;hljs-selector-attr&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;-a&quot;&lt;/span&gt;]&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Pass program arguments in a list. &lt;strong&gt;Don&apos;t include &lt;code&gt;\\&quot;&lt;/code&gt;-escaping for arguments containing spaces.&lt;/strong&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;Advanced Use Cases&lt;/h1&gt;\n&lt;h2&gt;Checking The Output&lt;/h2&gt;\n&lt;p&gt;The following code speaks for itself:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; subprocess\nresult = subprocess.run([&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;-a&quot;&lt;/span&gt;], capture_output=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, text=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;stackoverflow-logo.png&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; result.stdout:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You&apos;re a fan!&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You&apos;re not a fan?&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;result.stdout&lt;/code&gt; is all normal program output &lt;strong&gt;excluding errors&lt;/strong&gt;. Read &lt;code&gt;result.stderr&lt;/code&gt; to get them.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;capture_output=True&lt;/code&gt; - turns capturing on. Otherwise &lt;code&gt;result.stderr&lt;/code&gt; and &lt;code&gt;result.stdout&lt;/code&gt; would be &lt;code&gt;None&lt;/code&gt;. Available from &lt;em&gt;Python 3.7&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;text=True&lt;/code&gt; - a convenience argument added in &lt;em&gt;Python 3.7&lt;/em&gt; which converts the received binary data to Python strings you can easily work with.&lt;/p&gt;\n&lt;h2&gt;Checking the returncode&lt;/h2&gt;\n&lt;p&gt;Do&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; result.returncode == 127: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The program failed for some weird reason&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; result.returncode == 0: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The program succeeded&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The program failed unexpectedly&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you just want to check if the program succeeded (returncode == 0) and otherwise throw an Exception, there is a more convenient function:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;result&lt;span class=&quot;hljs-selector-class&quot;&gt;.check_returncode&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But it&apos;s Python, so there&apos;s an even more convenient argument &lt;code&gt;check&lt;/code&gt; which does the same thing automatically for you:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; subprocess.run(..., &lt;span class=&quot;hljs-keyword&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;stderr should be inside stdout&lt;/h2&gt;\n&lt;p&gt;You might want to have all program output inside stdout, even errors. To accomplish this, run&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;result&lt;/span&gt; = subprocess.run(..., stderr=subprocess.STDOUT)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;result.stderr&lt;/code&gt; will then be &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;result.stdout&lt;/code&gt; will contain everything.&lt;/p&gt;\n&lt;h2&gt;Using shell=False with an argument string&lt;/h2&gt;\n&lt;p&gt;&lt;code&gt;shell=False&lt;/code&gt; expects a &lt;strong&gt;list&lt;/strong&gt; of arguments. You might however, split an argument string on your own using shlex.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; subprocess\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; shlex\n&lt;span class=&quot;hljs-title&quot;&gt;subprocess&lt;/span&gt;.run(shlex.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls -a&quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That&apos;s it.&lt;/p&gt;\n&lt;h1&gt;Common Problems&lt;/h1&gt;\n&lt;p&gt;Chances are high you just started using Python when you come across this question. Let&apos;s look at some common problems.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;FileNotFoundError: [Errno 2] No such file or directory: &apos;ls -a&apos;: &apos;ls -a&apos;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;em&gt;You&apos;re running a subprocess without &lt;code&gt;shell=True&lt;/code&gt; . Either use a list (&lt;code&gt;[&quot;ls&quot;, &quot;-a&quot;]&lt;/code&gt;) or set &lt;code&gt;shell=True&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;TypeError: [...] NoneType [...]&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;em&gt;Check that you&apos;ve set &lt;code&gt;capture_output=True&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;TypeError: a bytes-like object is required, not [...]&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;em&gt;You always receive byte results from your program. If you want to work with it like a normal string, set &lt;code&gt;text=True&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;subprocess.CalledProcessError: Command &apos;[...]&apos; returned non-zero exit status 1.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;em&gt;Your command didn&apos;t run successfully. You could disable returncode checking or check your actual program&apos;s validity.&lt;/em&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;TypeError: &lt;strong&gt;init&lt;/strong&gt;() got an unexpected keyword argument [...]&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;em&gt;You&apos;re likely using a version of Python older than 3.7.0; update it to the most recent one available. Otherwise there are other answers in this Stack Overflow post showing you older alternative solutions.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;There is also &lt;a href=&quot;http://plumbum.readthedocs.org/en/latest/&quot;&gt;Plumbum&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; plumbum &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; local\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ls = local[&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ls\nLocalCommand(&amp;lt;LocalPath /&lt;span class=&quot;hljs-built_in&quot;&gt;bin&lt;/span&gt;/ls&amp;gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ls()\n&lt;span class=&quot;hljs-string&quot;&gt;u&apos;build.py\\ndist\\ndocs\\nLICENSE\\nplumbum\\nREADME.rst\\nsetup.py\\ntests\\ntodo.txt\\n&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;notepad = local[&lt;span class=&quot;hljs-string&quot;&gt;&quot;c:\\\\windows\\\\notepad.exe&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;notepad()                                   &lt;span class=&quot;hljs-comment&quot;&gt;# Notepad window pops up&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;u&apos;&apos;&lt;/span&gt;                                             &lt;span class=&quot;hljs-comment&quot;&gt;# Notepad window is closed by user, command returns&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;os&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ls -al&apos;&lt;/span&gt;\n\nos.system(cmd)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;os - This module provides a portable way of using operating system-dependent functionality.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For the more &lt;code&gt;os&lt;/code&gt; functions, &lt;a href=&quot;https://docs.python.org/2/library/os.html&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; is the documentation.&lt;/p&gt;\n    ","\n&lt;p&gt;It can be this simple:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;os&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;your command&quot;&lt;/span&gt;\nos.system(cmd)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is another difference here which is not mentioned previously.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;subprocess.Popen&lt;/code&gt; executes the &amp;lt;command&amp;gt; as a subprocess. In my case, I need to execute file &amp;lt;a&amp;gt; which needs to communicate with another program, &amp;lt;b&amp;gt;. &lt;/p&gt;\n\n&lt;p&gt;I tried subprocess, and execution was successful. However &amp;lt;b&amp;gt; could not communicate with &amp;lt;a&amp;gt;.\nEverything is normal when I run both from the terminal.&lt;/p&gt;\n\n&lt;p&gt;One more: \n(NOTE: kwrite behaves different from other applications. If you try the below with Firefox, the results will not be the same.)&lt;/p&gt;\n\n&lt;p&gt;If you try &lt;code&gt;os.system(&quot;kwrite&quot;)&lt;/code&gt;, program flow freezes until the user closes kwrite. To overcome that I tried instead &lt;code&gt;os.system(konsole -e kwrite)&lt;/code&gt;. This time program continued to flow, but kwrite became the subprocess of the console.&lt;/p&gt;\n\n&lt;p&gt;Anyone runs the kwrite not being a subprocess (i.e. in the system monitor it must appear at the leftmost edge of the tree).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;os.system&lt;/code&gt; does not allow you to store results, so if you want to store results in some list or something, a &lt;code&gt;subprocess.call&lt;/code&gt; works.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;subprocess.check_call&lt;/code&gt; is convenient if you don&apos;t want to test return values. It throws an exception on any error.&lt;/p&gt;\n    ","\n&lt;p&gt;I tend to use &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html&quot; rel=&quot;noreferrer&quot;&gt;subprocess&lt;/a&gt; together with &lt;a href=&quot;https://docs.python.org/2/library/shlex.html&quot; rel=&quot;noreferrer&quot;&gt;shlex&lt;/a&gt; (to handle escaping of quoted strings):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; subprocess, shlex\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;command = &lt;span class=&quot;hljs-string&quot;&gt;&apos;ls -l &quot;/your/path/with spaces/&quot;&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;call_params = shlex.split(command)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; call_params\n[&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;-l&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/your/path/with spaces/&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;subprocess.call(call_params)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I wrote a library for this, &lt;em&gt;&lt;a href=&quot;https://github.com/houqp/shell.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;shell.py&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;It&apos;s basically a wrapper for popen and shlex for now. It also supports piping commands, so you can chain commands easier in Python. So you can do things like:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;ex(&lt;span class=&quot;hljs-string&quot;&gt;&apos;echo hello shell.py&apos;&lt;/span&gt;) | &lt;span class=&quot;hljs-string&quot;&gt;&quot;awk &apos;{print &lt;span class=&quot;hljs-variable&quot;&gt;$2&lt;/span&gt;}&apos;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Windows you can just import the &lt;code&gt;subprocess&lt;/code&gt; module and run external commands by calling &lt;code&gt;subprocess.Popen()&lt;/code&gt;, &lt;code&gt;subprocess.Popen().communicate()&lt;/code&gt; and &lt;code&gt;subprocess.Popen().wait()&lt;/code&gt; as below:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Python script to run a command line&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; subprocess\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cmd&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n        Purpose  : To execute a command and return exit status\n        Argument : cmd - command to execute\n        Return   : exit_code\n    &quot;&quot;&quot;&lt;/span&gt;\n    process = subprocess.Popen(cmd, shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    (result, error) = process.communicate()\n\n    rc = process.wait()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; rc != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Error: failed to execute command:&quot;&lt;/span&gt;, cmd\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; error\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n&lt;span class=&quot;hljs-comment&quot;&gt;# def&lt;/span&gt;\n\ncommand = &lt;span class=&quot;hljs-string&quot;&gt;&quot;tasklist | grep python&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This process detail: \\n&quot;&lt;/span&gt;, execute(command)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;This process detail:\npython.exe                     604 RDP-Tcp&lt;span class=&quot;hljs-comment&quot;&gt;#0                  4      5,660 K&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Under Linux, in case you would like to call an external command that will execute independently (will keep running after the Python script terminates), you can use a simple queue as &lt;a href=&quot;http://vicerveza.homeunix.net/%7Eviric/soft/ts/&quot; rel=&quot;nofollow noreferrer&quot;&gt;task spooler&lt;/a&gt; or the &lt;a href=&quot;https://linux.die.net/man/1/at&quot; rel=&quot;nofollow noreferrer&quot;&gt;at&lt;/a&gt; command.&lt;/p&gt;\n&lt;p&gt;An example with task spooler:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lua&quot;&gt;import &lt;span class=&quot;hljs-built_in&quot;&gt;os&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;os&lt;/span&gt;.system(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ts &amp;lt;your-command&amp;gt;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Notes about task spooler (&lt;code&gt;ts&lt;/code&gt;):&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;You could set the number of concurrent processes to be run (&quot;slots&quot;) with:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;ts -S &amp;lt;number-of-slots&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Installing &lt;code&gt;ts&lt;/code&gt; doesn&apos;t requires admin privileges. You can download and compile it from source with a simple &lt;code&gt;make&lt;/code&gt;, add it to your path and you&apos;re done.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.pyinvoke.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Invoke&lt;/a&gt;&lt;/strong&gt; is a Python (2.7 and 3.4+) task execution tool and library. It provides a clean, high-level API for running shell commands:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; invoke &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; run\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cmd = &lt;span class=&quot;hljs-string&quot;&gt;&quot;pip install -r requirements.txt&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;result = run(cmd, hide=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, warn=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(result.ok)\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(result.stdout.splitlines()[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\nSuccessfully installed invocations-&lt;span class=&quot;hljs-number&quot;&gt;0.13&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt; pep8-&lt;span class=&quot;hljs-number&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.7&lt;/span&gt; spec-&lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use Popen, and then you can check the procedure&apos;s status:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; subprocess &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Popen\n\nproc = Popen([&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-l&apos;&lt;/span&gt;])\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; proc.poll() &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n    proc.kill()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Check out &lt;a href=&quot;http://docs.python.org/library/subprocess.html#popen-objects&quot; rel=&quot;noreferrer&quot;&gt;subprocess.Popen&lt;/a&gt;.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Is there a way to use variable substitution? IE I tried to do &lt;code&gt;echo $PATH&lt;/code&gt; by using &lt;code&gt;call([&quot;echo&quot;, &quot;$PATH&quot;])&lt;/code&gt;, but it just echoed the literal string &lt;code&gt;$PATH&lt;/code&gt; instead of doing any substitution. I know I could get the PATH environment variable, but I&apos;m wondering if there is an easy way to have the command behave exactly as if I had executed it in bash.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3470632/kevin-wheeler&quot; title=&quot;1,126 reputation&quot; class=&quot;comment-user&quot;&gt;Kevin Wheeler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment52559086_89243&quot;&gt;&lt;span title=&quot;2015-09-01 23:17:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 1, 2015 at 23:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@KevinWheeler You&apos;ll have to use &lt;code&gt;shell=True&lt;/code&gt; for that to work.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1399279/sethmmorton&quot; title=&quot;41,514 reputation&quot; class=&quot;comment-user&quot;&gt;SethMMorton&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment52598063_89243&quot;&gt;&lt;span title=&quot;2015-09-02 20:38:24Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 2, 2015 at 20:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@KevinWheeler You should NOT use &lt;code&gt;shell=True&lt;/code&gt;, for this purpose Python comes with &lt;a href=&quot;https://docs.python.org/2/library/os.path.html#os.path.expandvars&quot; rel=&quot;nofollow noreferrer&quot;&gt;os.path.expandvars&lt;/a&gt;. In your case you can write: &lt;code&gt;os.path.expandvars(&quot;$PATH&quot;)&lt;/code&gt;. @SethMMorton please reconsider your comment -&amp;gt; &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#frequently-used-arguments&quot; rel=&quot;nofollow noreferrer&quot;&gt;Why not to use shell=True&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1885518/murmel&quot; title=&quot;4,885 reputation&quot; class=&quot;comment-user&quot;&gt;Murmel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55091938_89243&quot;&gt;&lt;span title=&quot;2015-11-11 20:24:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 11, 2015 at 20:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;what if I want to pipe things e.g. &lt;code&gt;pip list | grep anatome&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1601580/charlie-parker&quot; title=&quot;13,540 reputation&quot; class=&quot;comment-user&quot;&gt;Charlie Parker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment123644441_89243&quot;&gt;&lt;span title=&quot;2021-11-12 16:51:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 12, 2021 at 16:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Many arguments version looks like that:  &lt;code&gt;subprocess.run([&quot;balcon.exe&quot;,&quot;-n&quot;,&quot;Tatyana&quot;,&quot;-t&quot;, &quot;Hello world&quot;])&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4099964/sergey-anisimov&quot; title=&quot;183 reputation&quot; class=&quot;comment-user&quot;&gt;Sergey Anisimov&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127649670_89243&quot;&gt;&lt;span title=&quot;2022-05-15 18:55:58Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 15 at 18:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Nice answer/explanation.  How is this answer justifying Python&apos;s motto as described in this article ?  &lt;a href=&quot;http://www.fastcompany.com/3026446/the-fall-of-perl-the-webs-most-promising-language&quot; rel=&quot;nofollow noreferrer&quot;&gt;fastcompany.com/3026446/&lt;/a&gt;  &quot;Stylistically, Perl and Python have different philosophies. Perls best known mottos is &quot; Theres More Than One Way to Do It&quot;. Python is designed to have one obvious way to do it&quot;  Seem like it should be the other way! In Perl I know only two ways to execute a command - using back-tick or &lt;code&gt;open&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/472485/jean&quot; title=&quot;20,313 reputation&quot; class=&quot;comment-user&quot;&gt;Jean&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49018699_92395&quot;&gt;&lt;span title=&quot;2015-05-26 21:16:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 26, 2015 at 21:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If using Python 3.5+, use &lt;code&gt;subprocess.run()&lt;/code&gt;. &lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html#subprocess.run&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs.python.org/3.5/library/subprocess.html#subprocess.run&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1398841/phoenix&quot; title=&quot;5,948 reputation&quot; class=&quot;comment-user&quot;&gt;phoenix&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment53820265_92395&quot;&gt;&lt;span title=&quot;2015-10-07 16:37:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 7, 2015 at 16:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What one typically needs to know is what is done with the child process&apos;s STDOUT and STDERR, because if they are ignored, under some (quite common) conditions, eventually the child process will issue a system call to write to STDOUT (STDERR too?) that would exceed the output buffer provided for the process by the OS, and the OS will cause it to block until some process reads from that buffer. So, with the currently recommended ways, &lt;code&gt;subprocess.run(..)&lt;/code&gt;, what exactly does &lt;i&gt;&quot;This does not capture stdout or stderr by default.&quot;&lt;/i&gt; imply? What about &lt;code&gt;subprocess.check_output(..)&lt;/code&gt; and STDERR?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1143274/evgeni-sergeev&quot; title=&quot;20,997 reputation&quot; class=&quot;comment-user&quot;&gt;Evgeni Sergeev&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment62619897_92395&quot;&gt;&lt;span title=&quot;2016-06-01 10:44:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 1, 2016 at 10:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;which of the commands you recommended block my script? i.e. if I want to run multiple commands in a &lt;code&gt;for&lt;/code&gt; loop how do I do it without it blocking my python script? I don&apos;t care about the output of the command I just want to run lots of them.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1601580/charlie-parker&quot; title=&quot;13,540 reputation&quot; class=&quot;comment-user&quot;&gt;Charlie Parker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment80783837_92395&quot;&gt;&lt;span title=&quot;2017-10-24 19:08:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 24, 2017 at 19:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is arguably the wrong way around. Most people only need &lt;code&gt;subprocess.run()&lt;/code&gt; or its older siblings &lt;code&gt;subprocess.check_call()&lt;/code&gt; et al. For cases where these do not suffice, see &lt;code&gt;subprocess.Popen()&lt;/code&gt;. &lt;code&gt;os.popen()&lt;/code&gt; should perhaps not be mentioned at all, or come even after &quot;hack your own fork/exec/spawn code&quot;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874188/tripleee&quot; title=&quot;159,777 reputation&quot; class=&quot;comment-user&quot;&gt;tripleee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94039654_92395&quot;&gt;&lt;span title=&quot;2018-12-03 06:00:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 3, 2018 at 6:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;.readlines()&lt;/code&gt; reads &lt;i&gt;all&lt;/i&gt; lines at once i.e., it blocks until the subprocess exits (closes its end of the pipe). To read in real time (if there is no buffering issues) you could: &lt;code&gt;for line in iter(p.stdout.readline, &apos;&apos;): print line,&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4279/jfs&quot; title=&quot;376,440 reputation&quot; class=&quot;comment-user&quot;&gt;jfs&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18336103_95246&quot;&gt;&lt;span title=&quot;2012-11-16 14:12:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 16, 2012 at 14:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Could you elaborate on what you mean by &quot;if there is no buffering issues&quot;?  If the process blocks definitely, the subprocess call also blocks.  The same could happen with my original example as well. What else could happen with respect to buffering?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9188/emmeff&quot; title=&quot;7,463 reputation&quot; class=&quot;comment-user&quot;&gt;EmmEff&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18358478_95246&quot;&gt;&lt;span title=&quot;2012-11-17 13:25:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 17, 2012 at 13:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;the child process may use block-buffering in non-interactive mode instead of line-buffering so &lt;code&gt;p.stdout.readline()&lt;/code&gt; (note: no &lt;code&gt;s&lt;/code&gt; at the end) won&apos;t see any data until the child fills its buffer. If the child doesn&apos;t produce much data then the output won&apos;t be in real time. See the second reason in &lt;a href=&quot;http://www.noah.org/wiki/Pexpect#Q:_Why_not_just_use_a_pipe_.28popen.28.29.29.3F&quot; rel=&quot;nofollow noreferrer&quot;&gt;Q: Why not just use a pipe (popen())?&lt;/a&gt;. Some workarounds are provided &lt;a href=&quot;http://stackoverflow.com/a/12471855/4279&quot;&gt;in this answer&lt;/a&gt; (pexpect, pty, stdbuf)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4279/jfs&quot; title=&quot;376,440 reputation&quot; class=&quot;comment-user&quot;&gt;jfs&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18358805_95246&quot;&gt;&lt;span title=&quot;2012-11-17 13:51:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 17, 2012 at 13:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;the buffering issue only matters if you want output in real time and doesn&apos;t apply to your code that doesn&apos;t print anything until &lt;i&gt;all&lt;/i&gt; data is received&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4279/jfs&quot; title=&quot;376,440 reputation&quot; class=&quot;comment-user&quot;&gt;jfs&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18358836_95246&quot;&gt;&lt;span title=&quot;2012-11-17 13:53:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 17, 2012 at 13:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer was fine for its time, but we should no longer recommend &lt;code&gt;Popen&lt;/code&gt; for simple tasks. This also needlessly specifies &lt;code&gt;shell=True&lt;/code&gt;. Try one of the &lt;code&gt;subprocess.run()&lt;/code&gt; answers.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874188/tripleee&quot; title=&quot;159,777 reputation&quot; class=&quot;comment-user&quot;&gt;tripleee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94039263_95246&quot;&gt;&lt;span title=&quot;2018-12-03 05:39:55Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 3, 2018 at 5:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;you might also need CREATE_NEW_PROCESS_GROUP flag. See &lt;a href=&quot;http://stackoverflow.com/q/13243807/4279&quot;&gt;Popen waiting for child process even when the immediate child has terminated&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4279/jfs&quot; title=&quot;376,440 reputation&quot; class=&quot;comment-user&quot;&gt;jfs&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18336228_2251026&quot;&gt;&lt;span title=&quot;2012-11-16 14:16:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 16, 2012 at 14:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;m seeing &lt;code&gt;import subprocess as sp;sp.Popen(&apos;calc&apos;)&lt;/code&gt; not waiting for the subprocess to complete. It seems the creationflags aren&apos;t necessary. What am I missing?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/177498/ubershmekel&quot; title=&quot;10,710 reputation&quot; class=&quot;comment-user&quot;&gt;ubershmekel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41807947_2251026&quot;&gt;&lt;span title=&quot;2014-10-27 21:01:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 27, 2014 at 21:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ubershmekel, I am not sure what you mean and don&apos;t have a windows installation. If I recall correctly, without the flags you can not close the &lt;code&gt;cmd&lt;/code&gt; instance from which you started the &lt;code&gt;calc&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/68998/newtover&quot; title=&quot;30,026 reputation&quot; class=&quot;comment-user&quot;&gt;newtover&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41828669_2251026&quot;&gt;&lt;span title=&quot;2014-10-28 12:25:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 28, 2014 at 12:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The following is incorrect: &quot;[o]n windows (win xp), the parent process will not finish until the longtask.py has finished its work&quot;. The parent will exit normally, but the console window (conhost.exe instance) only closes when the last attached process exits, and the child may have inherited the parent&apos;s console. Setting &lt;code&gt;DETACHED_PROCESS&lt;/code&gt; in &lt;code&gt;creationflags&lt;/code&gt; avoids this by preventing the child from inheriting or creating a console. If you instead want a new console, use &lt;code&gt;CREATE_NEW_CONSOLE&lt;/code&gt; (0x00000010).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/205580/eryk-sun&quot; title=&quot;31,492 reputation&quot; class=&quot;comment-user&quot;&gt;Eryk Sun&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment54511646_2251026&quot;&gt;&lt;span title=&quot;2015-10-27 00:27:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 27, 2015 at 0:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I didn&apos;t mean that executing as a detached process is incorrect. That said, you may need to set the standard handles to files, pipes, or &lt;code&gt;os.devnull&lt;/code&gt; because some console programs exit with an error otherwise. Create a new console when you want the child process to interact with the user concurrently with the parent process. It would be confusing to try to do both in a single window.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/205580/eryk-sun&quot; title=&quot;31,492 reputation&quot; class=&quot;comment-user&quot;&gt;Eryk Sun&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment54543759_2251026&quot;&gt;&lt;span title=&quot;2015-10-27 17:37:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 27, 2015 at 17:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;No idea what I meant nearly a decade ago (check the date!), but if I had to guess, it would be that there&apos;s no validation done.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3926/nimish&quot; title=&quot;4,477 reputation&quot; class=&quot;comment-user&quot;&gt;nimish&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment88457934_89237&quot;&gt;&lt;span title=&quot;2018-06-06 16:01:34Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 6, 2018 at 16:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This should now point to &lt;code&gt;subprocess&lt;/code&gt; as a slightly more versatile and portable solution. Running external commands is of course inherently unportable (you have to make sure the command is available on every architecture you need to support) and passing user input as an external command is inherently unsafe.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874188/tripleee&quot; title=&quot;159,777 reputation&quot; class=&quot;comment-user&quot;&gt;tripleee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94038788_89237&quot;&gt;&lt;span title=&quot;2018-12-03 05:11:39Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 3, 2018 at 5:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you want to &lt;b&gt;create a list out of a command with parameters&lt;/b&gt;, a list which can be used with &lt;code&gt;subprocess&lt;/code&gt; when &lt;code&gt;shell=False&lt;/code&gt;, then use &lt;code&gt;shlex.split&lt;/code&gt; for an easy way to do this &lt;a href=&quot;https://docs.python.org/2/library/shlex.html#shlex.split&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs.python.org/2/library/shlex.html#shlex.split&lt;/a&gt; (it&apos;s the recommended way according to the docs &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#popen-constructor&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs.python.org/2/library/subprocess.html#popen-constructor&lt;/a&gt;)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/277267/daniel-f&quot; title=&quot;13,058 reputation&quot; class=&quot;comment-user&quot;&gt;Daniel F&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91805349_89255&quot;&gt;&lt;span title=&quot;2018-09-20 18:07:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 20, 2018 at 18:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is incorrect: &quot;&lt;b&gt;it does shell escaping for you and is therefore much safer&lt;/b&gt;&quot;. subprocess doesn&apos;t do shell escaping, subprocess doesn&apos;t pass your command through the shell, so there&apos;s no need to shell escape.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/309412/lie-ryan&quot; title=&quot;58,925 reputation&quot; class=&quot;comment-user&quot;&gt;Lie Ryan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94078666_89255&quot;&gt;&lt;span title=&quot;2018-12-04 08:36:35Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 4, 2018 at 8:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;popen &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.popen&quot; rel=&quot;nofollow noreferrer&quot;&gt;is deprecated&lt;/a&gt; in favor of &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;subprocess&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/699159/tew&quot; title=&quot;2,593 reputation&quot; class=&quot;comment-user&quot;&gt;tew&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39233700_89238&quot;&gt;&lt;span title=&quot;2014-08-08 00:22:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 8, 2014 at 0:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You can also save your result with the os.system call, since it works like the UNIX shell itself, like for example os.system(&apos;ls -l &amp;gt; test2.txt&apos;)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1751920/stefan-gruenwald&quot; title=&quot;2,512 reputation&quot; class=&quot;comment-user&quot;&gt;Stefan Gruenwald&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment81287939_89238&quot;&gt;&lt;span title=&quot;2017-11-07 23:19:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 7, 2017 at 23:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that &lt;code&gt;check_output&lt;/code&gt; requires a list rather than a string. If you don&apos;t rely on quoted spaces to make your call valid, the simplest, most readable way to do this is &lt;code&gt;subprocess.check_output(&quot;ls -l /dev/null&quot;.split())&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/117471/bruno-bronosky&quot; title=&quot;61,279 reputation&quot; class=&quot;comment-user&quot;&gt;Bruno Bronosky&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84050970_5824565&quot;&gt;&lt;span title=&quot;2018-01-30 18:18:54Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 30, 2018 at 18:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Like the answer vaguely mentions, and many other answers on this page explain in more detail, you can pass a list, or with &lt;code&gt;shell=True&lt;/code&gt; a single string which the shell then takes care of parsing and executing. Using plain &lt;code&gt;.split()&lt;/code&gt; is fine under the circumstances you mention, but beginners typically don&apos;t understand the nuances; you are probably better off recommending &lt;code&gt;shlex.split()&lt;/code&gt; which does handle quoting and backslash escapes correctly.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874188/tripleee&quot; title=&quot;159,777 reputation&quot; class=&quot;comment-user&quot;&gt;tripleee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120034000_5824565&quot;&gt;&lt;span title=&quot;2021-06-09 19:39:09Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 9, 2021 at 19:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I think it&apos;s acceptable for hard-coded commands, if it increases readability.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/51197/adam-matan&quot; title=&quot;118,845 reputation&quot; class=&quot;comment-user&quot;&gt;Adam Matan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34789609_13106558&quot;&gt;&lt;span title=&quot;2014-04-02 13:07:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 2, 2014 at 13:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;A simple example of two-way communication between a primary process and a subprocess can be found here: &lt;a href=&quot;https://stackoverflow.com/a/52841475/1349673&quot;&gt;stackoverflow.com/a/52841475/1349673&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1349673/james-hirschorn&quot; title=&quot;5,830 reputation&quot; class=&quot;comment-user&quot;&gt;James Hirschorn&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment92598860_46815111&quot;&gt;&lt;span title=&quot;2018-10-16 18:05:17Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 16, 2018 at 18:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;While I agree with the overall recommendation, &lt;code&gt;subprocess&lt;/code&gt; does not remove all of the security problems, and has some pesky issues of its own.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874188/tripleee&quot; title=&quot;159,777 reputation&quot; class=&quot;comment-user&quot;&gt;tripleee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94039191_89304&quot;&gt;&lt;span title=&quot;2018-12-03 05:36:59Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 3, 2018 at 5:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;The big advantage of os.system(...) was its simplicity. subprocess is better&quot; - how subprocess is better? I am happily using os.system, not sure how switching to subprocess and remembering extra &lt;code&gt;shell=True&lt;/code&gt; benefits me. What kind of thing is better in subprocess?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4130619/reducing-activity&quot; title=&quot;1,611 reputation&quot; class=&quot;comment-user&quot;&gt;reducing activity&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118105684_64341833&quot;&gt;&lt;span title=&quot;2021-03-26 09:14:05Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 26, 2021 at 9:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You&apos;re right in that &lt;code&gt;os.system(...)&lt;/code&gt; is a reasonable choice for executing commands in terms of simple &quot;blind&quot; execution. However, the use cases are rather limited - as soon as you want to capture the output, you have to use a whole other library and then you start having both - subprocess and os for similar use cases in your code. I prefer to keep the code clean and use only one of them.  Second, and I would have put that section at the top but the TL;DR has to answer the question &lt;b&gt;exactly&lt;/b&gt;, you should &lt;b&gt;not&lt;/b&gt; use &lt;code&gt;shell=True&lt;/code&gt;, but instead what I&apos;ve written in the &lt;code&gt;Preferred Way&lt;/code&gt; section.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6685358/fameman&quot; title=&quot;2,793 reputation&quot; class=&quot;comment-user&quot;&gt;fameman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118133731_64341833&quot;&gt;&lt;span title=&quot;2021-03-27 11:30:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 27, 2021 at 11:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The problem with &lt;code&gt;os.system(...)&lt;/code&gt; and &lt;code&gt;shell=True&lt;/code&gt; is that you&apos;re spawning a new shell process, just to execute your command. This means, you have to do manual escaping which is not as simple as you might think - especially when targeting both POSIX and Windows. For user-supplied input, this is a no-go (just imagine the user entered something with &lt;code&gt;&quot;&lt;/code&gt; quotes - you&apos;d have to escape them as well). Also, the shell process itself could load code you don&apos;t need - not only does it delay the program, but it could also lead to unexpected side effects, ending with a wrong return code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6685358/fameman&quot; title=&quot;2,793 reputation&quot; class=&quot;comment-user&quot;&gt;fameman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118133786_64341833&quot;&gt;&lt;span title=&quot;2021-03-27 11:34:02Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 27, 2021 at 11:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Summing up, &lt;code&gt;os.system(...)&lt;/code&gt; is valid to use, indeed. But as soon as you&apos;re writing more than a quick python helper script, I&apos;d recommend you to go for subprocess.run without &lt;code&gt;shell=True&lt;/code&gt;. For more information about the drawbacks of os.system, I&apos;d like to propose you a read through this SO answer: &lt;a href=&quot;https://stackoverflow.com/a/44731082/6685358&quot;&gt;stackoverflow.com/a/44731082/6685358&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6685358/fameman&quot; title=&quot;2,793 reputation&quot; class=&quot;comment-user&quot;&gt;fameman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118133803_64341833&quot;&gt;&lt;span title=&quot;2021-03-27 11:35:42Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 27, 2021 at 11:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;An explanation would be in order.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/63550/peter-mortensen&quot; title=&quot;30,018 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Mortensen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118415297_26305089&quot;&gt;&lt;span title=&quot;2021-04-07 17:29:33Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 7, 2021 at 17:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;it&apos;s also deprecated.  use subprocess&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/16148/corey-goldberg&quot; title=&quot;56,492 reputation&quot; class=&quot;comment-user&quot;&gt;Corey Goldberg&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment56118340_31114625&quot;&gt;&lt;span title=&quot;2015-12-09 18:13:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 9, 2015 at 18:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This fails to point out the drawbacks, which are explained in much more detail in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0324/&quot; rel=&quot;nofollow noreferrer&quot;&gt;PEP-324&lt;/a&gt;. The documentation for &lt;code&gt;os.system&lt;/code&gt; explicitly recommends avoiding it in favor of &lt;code&gt;subprocess&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874188/tripleee&quot; title=&quot;159,777 reputation&quot; class=&quot;comment-user&quot;&gt;tripleee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94038650_50101887&quot;&gt;&lt;span title=&quot;2018-12-03 05:02:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 3, 2018 at 5:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What do you mean by &lt;i&gt;&quot;Anyone runs the kwrite not being a subprocess&quot;&lt;/i&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/63550/peter-mortensen&quot; title=&quot;30,018 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Mortensen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment88350869_2030768&quot;&gt;&lt;span title=&quot;2018-06-03 20:14:54Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 3, 2018 at 20:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is baffling indeed that &lt;code&gt;subprocess&lt;/code&gt; runs a subprocess.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874188/tripleee&quot; title=&quot;159,777 reputation&quot; class=&quot;comment-user&quot;&gt;tripleee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120034031_2030768&quot;&gt;&lt;span title=&quot;2021-06-09 19:40:29Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 9, 2021 at 19:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;ts&lt;/code&gt; is not standard on any distro I know of, though the pointer to &lt;code&gt;at&lt;/code&gt; is mildly useful. You should probably also mention &lt;code&gt;batch&lt;/code&gt;. As elsewhere, the &lt;code&gt;os.system()&lt;/code&gt; recommendation should probably at least mention that &lt;code&gt;subprocess&lt;/code&gt; is its recommended replacement.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874188/tripleee&quot; title=&quot;159,777 reputation&quot; class=&quot;comment-user&quot;&gt;tripleee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94039329_40824514&quot;&gt;&lt;span title=&quot;2018-12-03 05:43:45Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 3, 2018 at 5:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is a great library.  I was trying to explain it to a coworker the other day adn described it like this: &lt;code&gt;invoke&lt;/code&gt; is to &lt;code&gt;subprocess&lt;/code&gt; as &lt;code&gt;requests&lt;/code&gt; is to &lt;code&gt;urllib3&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9074332/user9074332&quot; title=&quot;2,108 reputation&quot; class=&quot;comment-user&quot;&gt;user9074332&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment96968474_52339862&quot;&gt;&lt;span title=&quot;2019-03-12 02:00:27Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 12, 2019 at 2:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":194,"title":"How do I execute a program or call a system command?","content":"\n                \n&lt;p&gt;How do I call an external command within Python as if I&apos;d typed it in a shell or command prompt?&lt;/p&gt;\n    ","slug":"how-do-i-execute-a-program-or-call-a-system-command-1657385465629","postType":"QUESTION","createdAt":"2022-07-09T16:51:05.000Z","updatedAt":"2022-07-09T16:51:05.000Z","tags":[{"id":1414,"name":"terminal","slug":"terminal","createdAt":"2022-07-09T16:51:05.000Z","updatedAt":"2022-07-09T16:51:05.000Z","Questions_Tags":{"questionId":194,"tagId":1414}}]}]}},"__N_SSG":true}