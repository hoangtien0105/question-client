{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;h1&gt;Setting a bit&lt;/h1&gt;\n&lt;p&gt;Use the bitwise OR operator (&lt;code&gt;|&lt;/code&gt;) to set a bit.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;number |= 1UL &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;n;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That will set the &lt;code&gt;n&lt;/code&gt;th bit of &lt;code&gt;number&lt;/code&gt;. &lt;code&gt;n&lt;/code&gt; should be zero, if you want to set the &lt;code&gt;1&lt;/code&gt;st bit and so on upto &lt;code&gt;n-1&lt;/code&gt;, if you want to set the &lt;code&gt;n&lt;/code&gt;th bit.&lt;/p&gt;\n&lt;p&gt;Use &lt;code&gt;1ULL&lt;/code&gt; if &lt;code&gt;number&lt;/code&gt; is wider than &lt;code&gt;unsigned long&lt;/code&gt;; promotion of &lt;code&gt;1UL &amp;lt;&amp;lt; n&lt;/code&gt; doesn&apos;t happen until after evaluating &lt;code&gt;1UL &amp;lt;&amp;lt; n&lt;/code&gt; where it&apos;s undefined behaviour to shift by more than the width of a &lt;code&gt;long&lt;/code&gt;.  The same applies to all the rest of the examples.&lt;/p&gt;\n&lt;h1&gt;Clearing a bit&lt;/h1&gt;\n&lt;p&gt;Use the bitwise AND operator (&lt;code&gt;&amp;amp;&lt;/code&gt;) to clear a bit.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;number &amp;amp;= ~(1UL &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;n);\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That will clear the &lt;code&gt;n&lt;/code&gt;th bit of &lt;code&gt;number&lt;/code&gt;. You must invert the bit string with the bitwise NOT operator (&lt;code&gt;~&lt;/code&gt;), then AND it.&lt;/p&gt;\n&lt;h1&gt;Toggling a bit&lt;/h1&gt;\n&lt;p&gt;The XOR operator (&lt;code&gt;^&lt;/code&gt;) can be used to toggle a bit.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;number ^= 1UL &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;n;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That will toggle the &lt;code&gt;n&lt;/code&gt;th bit of &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;\n&lt;h1&gt;Checking a bit&lt;/h1&gt;\n&lt;p&gt;You didn&apos;t ask for this, but I might as well add it.&lt;/p&gt;\n&lt;p&gt;To check a bit, shift the number n to the right, then bitwise AND it:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;bit&lt;/span&gt; = (number &amp;gt;&amp;gt; n) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;U&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That will put the value of the &lt;code&gt;n&lt;/code&gt;th bit of &lt;code&gt;number&lt;/code&gt; into the variable &lt;code&gt;bit&lt;/code&gt;.&lt;/p&gt;\n&lt;h1&gt;Changing the &lt;em&gt;n&lt;/em&gt;th bit to &lt;em&gt;x&lt;/em&gt;&lt;/h1&gt;\n&lt;p&gt;Setting the &lt;code&gt;n&lt;/code&gt;th bit to either &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; can be achieved with the following on a 2&apos;s complement C++ implementation:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt; ^= (-x ^ &lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt;) &amp;amp; (1UL &amp;lt;&amp;lt; n);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Bit &lt;code&gt;n&lt;/code&gt; will be set if &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, and cleared if &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.  If &lt;code&gt;x&lt;/code&gt; has some other value, you get garbage.  &lt;code&gt;x = !!x&lt;/code&gt; will booleanize it to 0 or 1.&lt;/p&gt;\n&lt;p&gt;To make this independent of 2&apos;s complement negation behaviour (where &lt;code&gt;-1&lt;/code&gt; has all bits set, unlike on a 1&apos;s complement or sign/magnitude C++ implementation), use unsigned negation.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;number ^= (-(&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;)x ^ number) &amp;amp; (&lt;span class=&quot;hljs-number&quot;&gt;1UL&lt;/span&gt; &amp;lt;&amp;lt; n);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; newbit = !!x;    &lt;span class=&quot;hljs-comment&quot;&gt;// Also booleanize to force 0 or 1&lt;/span&gt;\nnumber ^= (-newbit ^ number) &amp;amp; (&lt;span class=&quot;hljs-number&quot;&gt;1UL&lt;/span&gt; &amp;lt;&amp;lt; n);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s generally a good idea to use unsigned types for portable bit manipulation.&lt;/p&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;number = (number &amp;amp; ~(1UL &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;n)) | (x &amp;lt;&amp;lt; n&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;(number &amp;amp; ~(1UL &amp;lt;&amp;lt; n))&lt;/code&gt; will clear the &lt;code&gt;n&lt;/code&gt;th bit and &lt;code&gt;(x &amp;lt;&amp;lt; n)&lt;/code&gt; will set the &lt;code&gt;n&lt;/code&gt;th bit to &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;It&apos;s also generally a good idea to not to copy/paste code in general and so many people use preprocessor macros (like &lt;a href=&quot;https://stackoverflow.com/a/263738/52074&quot;&gt;the community wiki answer further down&lt;/a&gt;) or some sort of encapsulation.&lt;/p&gt;\n    ","\n&lt;p&gt;Using the Standard C++ Library: &lt;a href=&quot;http://en.cppreference.com/w/cpp/utility/bitset&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::bitset&amp;lt;N&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Or the &lt;a href=&quot;http://en.wikipedia.org/wiki/Boost_%28C%2B%2B_libraries%29&quot; rel=&quot;noreferrer&quot;&gt;Boost&lt;/a&gt; version: &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/dynamic_bitset/dynamic_bitset.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;boost::dynamic_bitset&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;There is no need to roll your own:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bitset&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    std::bitset&amp;lt;5&amp;gt; x;\n\n    x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    x[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Note x[0-4]  valid&lt;/span&gt;\n\n    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;Alpha:&lt;/span&gt;] &amp;gt; ./a.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;00010&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The Boost version allows a runtime sized bitset compared with a &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B_Standard_Library&quot; rel=&quot;noreferrer&quot;&gt;standard library&lt;/a&gt; compile-time sized bitset.&lt;/p&gt;\n    ","\n&lt;p&gt;The other option is to use bit fields:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;bits&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;bits&lt;/span&gt; mybits;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;defines a 3-bit field (actually, it&apos;s three 1-bit felds). Bit operations now become a bit (haha) simpler:&lt;/p&gt;\n\n&lt;p&gt;To set or clear a bit:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;mybits.b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;mybits.c&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To toggle a bit:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;mybits.a = !mybits.a;\nmybits.b = ~mybits.b;\nmybits.c ^= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;/* all work */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Checking a bit:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;if (mybits.c)  &lt;span class=&quot;hljs-comment&quot;&gt;//if mybits.c is non zero the next line below will execute&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This only works with fixed-size bit fields. Otherwise you have to resort to the bit-twiddling techniques described in previous posts.&lt;/p&gt;\n    ","\n&lt;p&gt;I use macros defined in a header file to handle bit set and clear:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* a=target variable, b=bit number to act upon 0-n */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BIT_SET(a,b) ((a) |= (1ULL&amp;lt;&amp;lt;(b)))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BIT_CLEAR(a,b) ((a) &amp;amp;= ~(1ULL&amp;lt;&amp;lt;(b)))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BIT_FLIP(a,b) ((a) ^= (1ULL&amp;lt;&amp;lt;(b)))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BIT_CHECK(a,b) (!!((a) &amp;amp; (1ULL&amp;lt;&amp;lt;(b))))        &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;!!&apos; to make sure this returns 0 or 1&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BITMASK_SET(x, mask) ((x) |= (mask))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BITMASK_CLEAR(x, mask) ((x) &amp;amp;= (~(mask)))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BITMASK_FLIP(x, mask) ((x) ^= (mask))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BITMASK_CHECK_ALL(x, mask) (!(~(x) &amp;amp; (mask)))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BITMASK_CHECK_ANY(x, mask) ((x) &amp;amp; (mask))&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It is sometimes worth using an &lt;code&gt;enum&lt;/code&gt; to &lt;em&gt;name&lt;/em&gt; the bits:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;enum ThingFlags = {\n  ThingMask  = 0x0000,\n  ThingFlag0 = 1 &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;0,\n  ThingFlag1 = 1 &amp;lt;&amp;lt; 1,\n  ThingError = 1 &amp;lt;&amp;lt; 8,\n}\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then use the &lt;em&gt;names&lt;/em&gt; later on. I.e. write &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-erlang&quot;&gt;thingstate |= ThingFlag1;\nthingstate &amp;amp;= ~ThingFlag0;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(thing &amp;amp; ThingError)&lt;/span&gt; {...}\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to set, clear and test. This way you hide the magic numbers from the rest of your code. &lt;/p&gt;\n\n&lt;p&gt;Other than that I endorse Jeremy&apos;s solution.&lt;/p&gt;\n    ","\n&lt;h2&gt;From &lt;a href=&quot;http://snippets.org/code/temp/snip-c.zip&quot; rel=&quot;noreferrer&quot;&gt;snip-c.zip&lt;/a&gt;&apos;s bitops.h:&lt;/h2&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n**  Bit set, clear, and test operations\n**\n**  public domain snippet by Bob Stout\n*/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; {ERROR = &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;} LOGICAL;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BOOL(x) (!(!(x)))&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BitSet(arg,posn) ((arg) | (1L &amp;lt;&amp;lt; (posn)))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BitClr(arg,posn) ((arg) &amp;amp; ~(1L &amp;lt;&amp;lt; (posn)))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BitTst(arg,posn) BOOL((arg) &amp;amp; (1L &amp;lt;&amp;lt; (posn)))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BitFlp(arg,posn) ((arg) ^ (1L &amp;lt;&amp;lt; (posn)))&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;OK, let&apos;s analyze things...&lt;/p&gt;\n\n&lt;p&gt;The common expression that you seem to be having problems with in all of these is &quot;(1L &amp;lt;&amp;lt; (posn))&quot;. All this does is create a mask with a single bit on\nand which will work with any integer type. The &quot;posn&quot; argument specifies the\nposition where you want the bit. If posn==0, then this expression will\nevaluate to:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-yaml&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0001 &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;binary.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If posn==8, it will evaluate to:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-yaml&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0001 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;binary.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In other words, it simply creates a field of 0&apos;s with a 1 at the specified\nposition. The only tricky part is in the BitClr() macro where we need to set\na single 0 bit in a field of 1&apos;s. This is accomplished by using the 1&apos;s\ncomplement of the same expression as denoted by the tilde (~) operator.&lt;/p&gt;\n\n&lt;p&gt;Once the mask is created it&apos;s applied to the argument just as you suggest,\nby use of the bitwise and (&amp;amp;), or (|), and xor (^) operators. Since the mask\nis of type long, the macros will work just as well on char&apos;s, short&apos;s, int&apos;s,\nor long&apos;s.&lt;/p&gt;\n\n&lt;p&gt;The bottom line is that this is a general solution to an entire class of\nproblems. It is, of course, possible and even appropriate to rewrite the\nequivalent of any of these macros with explicit mask values every time you\nneed one, but why do it? Remember, the macro substitution occurs in the\npreprocessor and so the generated code will reflect the fact that the values\nare considered constant by the compiler - i.e. it&apos;s just as efficient to use\nthe generalized macros as to &quot;reinvent the wheel&quot; every time you need to do\nbit manipulation. &lt;/p&gt;\n\n&lt;p&gt;Unconvinced? Here&apos;s some test code - I used Watcom C with full optimization\nand without using _cdecl so the resulting disassembly would be as clean as\npossible:&lt;/p&gt;\n\n&lt;p&gt;----[ TEST.C ]----------------------------------------------------------------&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BOOL(x) (!(!(x)))&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BitSet(arg,posn) ((arg) | (1L &amp;lt;&amp;lt; (posn)))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BitClr(arg,posn) ((arg) &amp;amp; ~(1L &amp;lt;&amp;lt; (posn)))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BitTst(arg,posn) BOOL((arg) &amp;amp; (1L &amp;lt;&amp;lt; (posn)))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; BitFlp(arg,posn) ((arg) ^ (1L &amp;lt;&amp;lt; (posn)))&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bitmanip&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; word&lt;/span&gt;)&lt;/span&gt;\n{\n      word = BitSet(word, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n      word = BitSet(word, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;);\n      word = BitClr(word, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n      word = BitFlp(word, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; word;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;----[ TEST.OUT (disassembled) ]-----------------------------------------------&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;Module:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;C:\\BINK\\tst.c&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;Group:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;DGROUP&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;CONST,CONST2,_DATA,_BSS&lt;/span&gt;\n\n&lt;span class=&quot;hljs-attr&quot;&gt;Segment:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;_TEXT&lt;/span&gt;  &lt;span class=&quot;hljs-string&quot;&gt;BYTE&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;00000008&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;bytes&lt;/span&gt;  \n &lt;span class=&quot;hljs-number&quot;&gt;0000  &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;0c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;84&lt;/span&gt;             &lt;span class=&quot;hljs-string&quot;&gt;bitmanip_&lt;/span&gt;       &lt;span class=&quot;hljs-string&quot;&gt;or&lt;/span&gt;      &lt;span class=&quot;hljs-string&quot;&gt;al,84H&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;0002  &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;f4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;02&lt;/span&gt;                          &lt;span class=&quot;hljs-string&quot;&gt;xor&lt;/span&gt;     &lt;span class=&quot;hljs-string&quot;&gt;ah,02H&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;flip&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;EAX&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(bit&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;AH)&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;0005  &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;f7&lt;/span&gt;                             &lt;span class=&quot;hljs-string&quot;&gt;and&lt;/span&gt;     &lt;span class=&quot;hljs-string&quot;&gt;al,0f7H&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;0007  &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;c3&lt;/span&gt;                                &lt;span class=&quot;hljs-string&quot;&gt;ret&lt;/span&gt;     \n\n&lt;span class=&quot;hljs-literal&quot;&gt;No&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;disassembly&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;errors&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;----[ finis ]----------------------------------------------------------------- &lt;/p&gt;\n    ","\n&lt;p&gt;For the beginner I would like to explain a bit more with an example:&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x55&lt;/span&gt;;\nbitnum : &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;rd.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;&amp;amp;&lt;/code&gt; operator is used check the bit:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-yaml&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0101 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0101&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&amp;amp;&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;___________&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(mean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;0:&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;).&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;fine&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;third&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(then&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Toggle or Flip:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-yaml&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0101 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0101&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;^&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;___________&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0101 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1101&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(Flip&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;third&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;without&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;affecting&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;bits)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt; operator: set the bit&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-yaml&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0101 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0101&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;___________&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0101 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1101&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(set&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;third&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;without&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;affecting&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;bits)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As this is tagged &quot;embedded&quot; I&apos;ll assume you&apos;re using a microcontroller. All of the above suggestions are valid &amp;amp; work (read-modify-write, unions, structs, etc.).&lt;/p&gt;\n\n&lt;p&gt;However, during a bout of oscilloscope-based debugging I was amazed to find that these methods have a considerable overhead in CPU cycles compared to writing a value directly to the micro&apos;s PORTnSET / PORTnCLEAR registers which makes a real difference where there are tight loops / high-frequency ISR&apos;s toggling pins.&lt;/p&gt;\n\n&lt;p&gt;For those unfamiliar: In my example, the micro has a general pin-state register PORTn which reflects the output pins, so doing PORTn |= BIT_TO_SET results in a read-modify-write to that register. However, the PORTnSET / PORTnCLEAR registers take a &apos;1&apos; to mean &quot;please make this bit 1&quot; (SET) or &quot;please make this bit zero&quot; (CLEAR) and a &apos;0&apos; to mean &quot;leave the pin alone&quot;. so, you end up with two port addresses depending whether you&apos;re setting or clearing the bit (not always convenient) but a &lt;em&gt;much&lt;/em&gt; faster reaction and smaller assembled code.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s my favorite bit arithmetic macro, which works for any type of unsigned integer array from &lt;code&gt;unsigned char&lt;/code&gt; up to &lt;code&gt;size_t&lt;/code&gt; (which is the biggest type that should be efficient to work with):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;BITOP&lt;/span&gt;(a,b,op) \\\n ((a)&lt;span class=&quot;hljs-selector-attr&quot;&gt;[(size_t)(b)/(8*sizeof *(a))]&lt;/span&gt; op ((size_t)&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;((size_t)(b)%(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;*sizeof *(a)))))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To set a bit:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;BITOP&lt;/span&gt;(array, bit, |=);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To clear a bit:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;BITOP&lt;/span&gt;(array, bit, &amp;amp;=~);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To toggle a bit:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;BITOP&lt;/span&gt;(array, bit, ^=);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To test a bit:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vhdl&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (BITOP(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;bit&lt;/span&gt;, &amp;amp;)) ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;etc.&lt;/p&gt;\n    ","\n&lt;p&gt;The bitfield approach has other advantages in the embedded arena. You can define a struct that maps directly onto the bits in a particular hardware register.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HwRegister&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; errorFlag:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// one-bit flag field&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; Mode:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;       &lt;span class=&quot;hljs-comment&quot;&gt;// three-bit mode field&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; StatusCode:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// four-bit status code&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HwRegister&lt;/span&gt; CR3342_AReg;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You need to be aware of the bit packing order - I think it&apos;s MSB first, but this may be implementation-dependent. Also, verify how your compiler handlers fields crossing byte boundaries.&lt;/p&gt;\n\n&lt;p&gt;You can then read, write, test the individual values as before.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Let suppose few things first&lt;/strong&gt;&lt;br&gt;\n  &lt;code&gt;num = 55&lt;/code&gt; Integer to perform bitwise operations (set, get, clear, toggle).&lt;br&gt;\n  &lt;code&gt;n = 4&lt;/code&gt; 0 based bit position to perform bitwise operations.   &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h1&gt;How to get a bit?&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;To get the &lt;code&gt;nth&lt;/code&gt; bit of num right shift &lt;code&gt;num&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt; times. Then perform bitwise AND &lt;code&gt;&amp;amp;&lt;/code&gt; with 1.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;bit&lt;/span&gt; = (num &amp;gt;&amp;gt; n) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;How it works?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-yaml&quot;&gt;       &lt;span class=&quot;hljs-number&quot;&gt;0011 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0111&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(55&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;decimal)&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(right&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;times)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;-----------------&lt;/span&gt;\n       &lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0011&lt;/span&gt;\n     &lt;span class=&quot;hljs-string&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0001&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(1&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;decimal)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;-----------------&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0001&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(final&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;result)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;How to set a bit?&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;To set a particular bit of number. Left shift 1 &lt;code&gt;n&lt;/code&gt; times. Then perform bitwise OR &lt;code&gt;|&lt;/code&gt; operation with &lt;code&gt;num&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;num |= (1 &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;n);    // Equivalent to; num = (1 &amp;lt;&amp;lt; n&lt;/span&gt;) | num;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;How it works?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-yaml&quot;&gt;       &lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0001&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(1&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;decimal)&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(left&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;times)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;-----------------&lt;/span&gt;\n       &lt;span class=&quot;hljs-number&quot;&gt;0001 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt;\n     &lt;span class=&quot;hljs-string&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0011 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0111&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(55&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;decimal)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;-----------------&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0001 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(final&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;result)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;How to clear a bit?&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Left shift 1, &lt;code&gt;n&lt;/code&gt; times i.e. &lt;code&gt;1 &amp;lt;&amp;lt; n&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Perform bitwise complement with the above result. So that the nth bit becomes unset and rest of bit becomes set i.e. &lt;code&gt;~ (1 &amp;lt;&amp;lt; n)&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Finally, perform bitwise AND &lt;code&gt;&amp;amp;&lt;/code&gt; operation with the above result and &lt;code&gt;num&lt;/code&gt;. The above three steps together can be written as &lt;code&gt;num &amp;amp; (~ (1 &amp;lt;&amp;lt; n))&lt;/code&gt;;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/mf8hm.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/mf8hm.png&quot; alt=&quot;Steps to clear a bit&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;num &amp;amp;= (~(1 &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;n));    // Equivalent to; num = num &amp;amp; (~(1 &amp;lt;&amp;lt; n&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;How it works?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-yaml&quot;&gt;       &lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0001&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(1&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;decimal)&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(left&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;times)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;-----------------&lt;/span&gt;\n     &lt;span class=&quot;hljs-string&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0001 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;-----------------&lt;/span&gt;\n       &lt;span class=&quot;hljs-number&quot;&gt;1110 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1111&lt;/span&gt;\n     &lt;span class=&quot;hljs-string&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0011 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0111&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(55&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;decimal)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;-----------------&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0010 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0111&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(final&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;result)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;How to toggle a bit?&lt;/h1&gt;\n\n&lt;p&gt;To toggle a bit we use bitwise XOR &lt;code&gt;^&lt;/code&gt; operator. Bitwise XOR operator evaluates to 1 if corresponding bit of both operands are different, otherwise evaluates to 0.  &lt;/p&gt;\n\n&lt;p&gt;Which means to toggle a bit, we need to perform XOR operation with the bit you want to toggle and 1. &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;num ^= (1 &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;n);    // Equivalent to; num = num ^ (1 &amp;lt;&amp;lt; n&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;How it works?&lt;/strong&gt; &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If the bit to toggle is 0 then, &lt;code&gt;0 ^ 1 =&amp;gt; 1&lt;/code&gt;.  &lt;/li&gt;\n&lt;li&gt;If the bit to toggle is 1 then, &lt;code&gt;1 ^ 1 =&amp;gt; 0&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-yaml&quot;&gt;       &lt;span class=&quot;hljs-number&quot;&gt;0000 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0001&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(1&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;decimal)&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(left&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;times)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;-----------------&lt;/span&gt;\n       &lt;span class=&quot;hljs-number&quot;&gt;0001 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0000&lt;/span&gt;\n     &lt;span class=&quot;hljs-string&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0011 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0111&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(55&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;decimal)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;-----------------&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0010 &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0111&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;(final&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;result)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Recommended reading - &lt;a href=&quot;https://codeforwin.org/2016/01/bitwise-operator-programming-exercises-and-solutions-in-c.html&quot; rel=&quot;noreferrer&quot;&gt;Bitwise operator exercises&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;Check a bit at an arbitrary location in a variable of arbitrary type:&lt;/h2&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lisp&quot;&gt;#define bit_test(&lt;span class=&quot;hljs-name&quot;&gt;x&lt;/span&gt;, y)  ( ( ((&lt;span class=&quot;hljs-name&quot;&gt;const&lt;/span&gt; char*)&amp;amp;(&lt;span class=&quot;hljs-name&quot;&gt;x&lt;/span&gt;))[(&lt;span class=&quot;hljs-name&quot;&gt;y&lt;/span&gt;)&amp;gt;&amp;gt;3] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x80 &amp;gt;&amp;gt; ((&lt;span class=&quot;hljs-name&quot;&gt;y&lt;/span&gt;)&amp;amp;0x07)) &amp;gt;&amp;gt; (&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;-((&lt;span class=&quot;hljs-name&quot;&gt;y&lt;/span&gt;)&amp;amp;0x07) ) )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sample usage:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; arr[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] = { &lt;span class=&quot;hljs-number&quot;&gt;0x01&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x45&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x67&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x89&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xAB&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xCD&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xEF&lt;/span&gt; };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ix = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; ix &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;; ++ix)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bit %d is %d\\n&quot;&lt;/span&gt;, ix, &lt;span class=&quot;hljs-built_in&quot;&gt;bit_test&lt;/span&gt;(arr, ix));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;\nThis is designed to be fast (given its flexibility) and non-branchy.  It results in efficient SPARC machine code when compiled Sun Studio 8; I&apos;ve also tested it using MSVC++ 2008 on amd64.  It&apos;s possible to make similar macros for setting and clearing bits.  The key difference of this solution compared with many others here is that it works for any location in pretty much any type of variable.&lt;/p&gt;\n    ","\n&lt;p&gt;More general, for arbitrary sized bitmaps:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lisp&quot;&gt;#define BITS &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n#define BIT_SET(  &lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;, n) (&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;[(&lt;span class=&quot;hljs-name&quot;&gt;n&lt;/span&gt;)/BITS] |=  (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x80&amp;gt;&amp;gt;((&lt;span class=&quot;hljs-name&quot;&gt;n&lt;/span&gt;)%BITS)))\n#define BIT_CLEAR(&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;, n) (&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;[(&lt;span class=&quot;hljs-name&quot;&gt;n&lt;/span&gt;)/BITS] &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;=&lt;/span&gt; ~(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x80&amp;gt;&amp;gt;((&lt;span class=&quot;hljs-name&quot;&gt;n&lt;/span&gt;)%BITS)))\n#define BIT_ISSET(&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;, n) (&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;[(&lt;span class=&quot;hljs-name&quot;&gt;n&lt;/span&gt;)/BITS] &amp;amp;   (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x80&amp;gt;&amp;gt;((&lt;span class=&quot;hljs-name&quot;&gt;n&lt;/span&gt;)%BITS)))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This program is to change any data bit from 0 to 1 or 1 to 0:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;{\n    unsigned int &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; = 0x000000F0;&lt;/span&gt;\n    int bitpos = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    int bitvalue = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    unsigned int bit = &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;;&lt;/span&gt;\n    bit = (bit&amp;gt;&amp;gt;bitpos)&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0x00000001&lt;/span&gt;;\n    int invbitvalue = &lt;span class=&quot;hljs-number&quot;&gt;0x00000001&lt;/span&gt;&amp;amp;(~bitvalue);\n    printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%x\\n&quot;&lt;/span&gt;,bit);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (bitvalue == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (bit == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%x\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;);&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n             &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; = (&lt;span class=&quot;hljs-title&quot;&gt;data&lt;/span&gt;^(&lt;span class=&quot;hljs-title&quot;&gt;invbitvalue&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;bitpos&lt;/span&gt;));&lt;/span&gt;\n             printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%x\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;);&lt;/span&gt;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (bit == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n            printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;elseif %x\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;);&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; = (&lt;span class=&quot;hljs-title&quot;&gt;data&lt;/span&gt;|(&lt;span class=&quot;hljs-title&quot;&gt;bitvalue&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;bitpos&lt;/span&gt;));&lt;/span&gt;\n            printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;else %x\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;);&lt;/span&gt;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you&apos;re doing a lot of bit twiddling you might want to use masks which will make the whole thing quicker. The following functions are very fast and are still flexible (they allow bit twiddling in bit maps of any size).&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;const unsigned &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; TQuickByteMask[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] =\n{\n   &lt;span class=&quot;hljs-number&quot;&gt;0x01&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x02&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x04&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x08&lt;/span&gt;,\n   &lt;span class=&quot;hljs-number&quot;&gt;0x10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x40&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x80&lt;/span&gt;,\n};\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** Set bit in any sized bit mask.\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt;    none\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;     bit    - Bit number.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;     bitmap - Pointer to bitmap.\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;TSetBit&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; bit, unsigned &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *bitmap)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; n, x;\n\n    x = bit / &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;        &lt;span class=&quot;hljs-comment&quot;&gt;// Index to byte.&lt;/span&gt;\n    n = bit % &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;        &lt;span class=&quot;hljs-comment&quot;&gt;// Specific bit in byte.&lt;/span&gt;\n\n    bitmap[x] |= TQuickByteMask[n];        &lt;span class=&quot;hljs-comment&quot;&gt;// Set bit.&lt;/span&gt;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** Reset bit in any sized mask.\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt;  None\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;   bit    - Bit number.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;   bitmap - Pointer to bitmap.\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;TResetBit&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; bit, unsigned &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *bitmap)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; n, x;\n\n    x = bit / &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;        &lt;span class=&quot;hljs-comment&quot;&gt;// Index to byte.&lt;/span&gt;\n    n = bit % &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;        &lt;span class=&quot;hljs-comment&quot;&gt;// Specific bit in byte.&lt;/span&gt;\n\n    bitmap[x] &amp;amp;= (~TQuickByteMask[n]);    &lt;span class=&quot;hljs-comment&quot;&gt;// Reset bit.&lt;/span&gt;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** Toggle bit in any sized bit mask.\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt;   none\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;   bit    - Bit number.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;   bitmap - Pointer to bitmap.\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;TToggleBit&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; bit, unsigned &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *bitmap)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; n, x;\n\n    x = bit / &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;        &lt;span class=&quot;hljs-comment&quot;&gt;// Index to byte.&lt;/span&gt;\n    n = bit % &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;        &lt;span class=&quot;hljs-comment&quot;&gt;// Specific bit in byte.&lt;/span&gt;\n\n    bitmap[x] ^= TQuickByteMask[n];        &lt;span class=&quot;hljs-comment&quot;&gt;// Toggle bit.&lt;/span&gt;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** Checks specified bit.\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt;  1 if bit set else 0.\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;   bit    - Bit number.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;   bitmap - Pointer to bitmap.\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;TIsBitSet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; bit, const unsigned &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *bitmap)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; n, x;\n\n    x = bit / &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;// Index to byte.&lt;/span&gt;\n    n = bit % &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;// Specific bit in byte.&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Test bit (logigal AND).&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (bitmap[x] &amp;amp; TQuickByteMask[n])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** Checks specified bit.\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt;  1 if bit reset else 0.\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;   bit    - Bit number.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;   bitmap - Pointer to bitmap.\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;TIsBitReset&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; bit, const unsigned &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *bitmap)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; TIsBitSet(bit, bitmap) ^ &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** Count number of bits set in a bitmap.\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt;   Number of bits set.\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;    bitmap - Pointer to bitmap.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;    size   - Bitmap size (in bits).\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@note&lt;/span&gt;    Not very efficient in terms of execution speed. If you are doing\n *        some computationally intense stuff you may need a more complex\n *        implementation which would be faster (especially for big bitmaps).\n *        See (http://graphics.stanford.edu/~seander/bithacks.html).\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;TCountBits&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( const unsigned &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *bitmap, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; size)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i, count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;size; i++)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (TIsBitSet(i, bitmap))\n            count++;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; count;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note, to set bit &apos;n&apos; in a 16 bit integer you do the following:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;TSetBit&lt;/span&gt;( n, &amp;amp;my_int);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s up to you to ensure that the bit number is within the range of the bit map that you pass. Note that for little endian processors that bytes, words, dwords, qwords, etc., map correctly to each other in memory (main reason that little endian processors are &apos;better&apos; than big-endian processors, ah, I feel a flame war coming on...).&lt;/p&gt;\n    ","\n&lt;p&gt;Use this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-dart&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; ToggleNthBit ( unsigned char n, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt; )\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt; &amp;amp; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n))\n        &lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt; &amp;amp;= ~(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt; |= (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Expanding on the &lt;code&gt;bitset&lt;/code&gt; answer:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bitset&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-function&quot;&gt;bitset&amp;lt;8&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::string(&lt;span class=&quot;hljs-string&quot;&gt;&quot;10010011&quot;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Set Bit&lt;/span&gt;\n  byte.set(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 10010111&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Clear Bit&lt;/span&gt;\n  byte.reset(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 10010101&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Toggle Bit&lt;/span&gt;\n  byte.flip(&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 00010101&lt;/span&gt;\n\n  cout &amp;lt;&amp;lt; byte &amp;lt;&amp;lt; endl;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to perform this all operation with C programming in the &lt;strong&gt;Linux kernel&lt;/strong&gt; then I suggest to use standard APIs of the Linux kernel.&lt;/p&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://www.kernel.org/doc/htmldocs/kernel-api/ch02s03.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.kernel.org/doc/htmldocs/kernel-api/ch02s03.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vhdl&quot;&gt;set_bit  Atomically set a &lt;span class=&quot;hljs-built_in&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; memory\nclear_bit  Clears a &lt;span class=&quot;hljs-built_in&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; memory\nchange_bit  Toggle a &lt;span class=&quot;hljs-built_in&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; memory\ntest_and_set_bit  Set a &lt;span class=&quot;hljs-built_in&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; its old value\ntest_and_clear_bit  Clear a &lt;span class=&quot;hljs-built_in&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; its old value\ntest_and_change_bit  Change a &lt;span class=&quot;hljs-built_in&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; its old value\ntest_bit  Determine whether a &lt;span class=&quot;hljs-built_in&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; set\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note: Here the whole operation happens in a single step. So these all are  guaranteed to be &lt;strong&gt;atomic&lt;/strong&gt; even on SMP computers and are useful\nto keep coherence across processors.&lt;/p&gt;\n    ","\n&lt;p&gt;Visual C 2010, and perhaps many other compilers, have direct support for boolean operations built in. A bit has two possible values, just like a boolean, so we can use booleans instead - even if they take up more space than a single bit in memory in this representation. This works, even the &lt;code&gt;sizeof()&lt;/code&gt; operator works properly. &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt;    IsGph[&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;], IsNotGph[&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//  Initialize boolean array to detect printable characters&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(IsGph); i++)  {\n    IsGph[i] = &lt;span class=&quot;hljs-built_in&quot;&gt;isgraph&lt;/span&gt;((&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)i);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, to your question, &lt;code&gt;IsGph[i] =1&lt;/code&gt;, or &lt;code&gt;IsGph[i] =0&lt;/code&gt; make setting and clearing bools easy.&lt;/p&gt;\n\n&lt;p&gt;To find unprintable characters:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//  Initialize boolean array to detect UN-printable characters, &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//  then call function to toggle required bits true, while initializing a 2nd&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//  boolean array as the complement of the 1st.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(IsGph); i++)  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(IsGph[i])    {\n         IsNotGph[i] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;   {\n         IsNotGph[i] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note there is nothing &quot;special&quot; about this code. It treats a bit like an integer - which technically, it is. A 1 bit integer that can hold 2 values, and 2 values only.&lt;/p&gt;\n\n&lt;p&gt;I once used this approach to find duplicate loan records, where loan_number was the ISAM key, using the 6-digit loan number as an index into the bit array. Savagely fast, and after 8 months, proved that the mainframe system we were getting the data from was in fact malfunctioning. The simplicity of bit arrays makes confidence in their correctness very high - vs a searching approach for example.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-dart&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; set_nth_bit(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n){    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n);\n}\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; clear_nth_bit(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n){    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt; &amp;amp; ~( &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n));\n}\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; toggle_nth_bit(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n){    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt; ^ (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n);\n}\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; check_nth_bit(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n){    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;num&lt;/span&gt; &amp;amp; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here are some macros I use:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lisp&quot;&gt;SET_FLAG(&lt;span class=&quot;hljs-name&quot;&gt;Status&lt;/span&gt;, Flag)            ((&lt;span class=&quot;hljs-name&quot;&gt;Status&lt;/span&gt;) |= (&lt;span class=&quot;hljs-name&quot;&gt;Flag&lt;/span&gt;))\nCLEAR_FLAG(&lt;span class=&quot;hljs-name&quot;&gt;Status&lt;/span&gt;, Flag)          ((&lt;span class=&quot;hljs-name&quot;&gt;Status&lt;/span&gt;) &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;=&lt;/span&gt; ~(&lt;span class=&quot;hljs-name&quot;&gt;Flag&lt;/span&gt;))\nINVALID_FLAGS(&lt;span class=&quot;hljs-name&quot;&gt;ulFlags&lt;/span&gt;, ulAllowed) ((&lt;span class=&quot;hljs-name&quot;&gt;ulFlags&lt;/span&gt;) &amp;amp; ~(&lt;span class=&quot;hljs-name&quot;&gt;ulAllowed&lt;/span&gt;))\nTEST_FLAGS(&lt;span class=&quot;hljs-name&quot;&gt;t&lt;/span&gt;,ulMask, ulBit)       (((&lt;span class=&quot;hljs-name&quot;&gt;t&lt;/span&gt;)&amp;amp;(&lt;span class=&quot;hljs-name&quot;&gt;ulMask&lt;/span&gt;)) == (&lt;span class=&quot;hljs-name&quot;&gt;ulBit&lt;/span&gt;))\nIS_FLAG_SET(&lt;span class=&quot;hljs-name&quot;&gt;t&lt;/span&gt;,ulMask)             TEST_FLAGS(&lt;span class=&quot;hljs-name&quot;&gt;t&lt;/span&gt;,ulMask,ulMask)\nIS_FLAG_CLEAR(&lt;span class=&quot;hljs-name&quot;&gt;t&lt;/span&gt;,ulMask)           TEST_FLAGS(&lt;span class=&quot;hljs-name&quot;&gt;t&lt;/span&gt;,ulMask,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;How do you set, clear, and toggle a single bit?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;To address a common coding pitfall when attempting to form the mask:&lt;br&gt;\n&lt;strong&gt;&lt;code&gt;1&lt;/code&gt; is not always wide enough&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;What problems happen when &lt;code&gt;number&lt;/code&gt; is a wider type than &lt;code&gt;1&lt;/code&gt;?&lt;br&gt;\n&lt;code&gt;x&lt;/code&gt; may be too great for the shift &lt;code&gt;1 &amp;lt;&amp;lt; x&lt;/code&gt; leading to &lt;em&gt;undefined behavior&lt;/em&gt; (UB).  Even if &lt;code&gt;x&lt;/code&gt; is not too great, &lt;code&gt;~&lt;/code&gt; may not flip enough most-significant-bits.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// assume 32 bit int/unsigned&lt;/span&gt;\nunsigned long long &lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n\nunsigned x = &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;; \n&lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt; |= (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; x);  &lt;span class=&quot;hljs-comment&quot;&gt;// UB&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt; ^= (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; x);  &lt;span class=&quot;hljs-comment&quot;&gt;// UB&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt; &amp;amp;= ~(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; x); &lt;span class=&quot;hljs-comment&quot;&gt;// UB&lt;/span&gt;\n\nx = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt; &amp;amp;= ~(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; x); &lt;span class=&quot;hljs-comment&quot;&gt;// Wrong mask, not wide enough&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;To insure 1 is wide enough:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Code could use &lt;code&gt;1ull&lt;/code&gt; or pedantically &lt;code&gt;(uintmax_t)1&lt;/code&gt; and let the compiler optimize.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;number |= (1ull &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;x);\nnumber |= ((uintmax_t)1 &amp;lt;&amp;lt; x&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or cast - which makes for coding/review/maintenance issues keeping the cast correct and up-to-date.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;number |= (type_of_number)1 &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;x;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or gently promote the &lt;code&gt;1&lt;/code&gt; by forcing a math operation that is as least as wide as the type of &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt; |= (&lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; x;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;As with most bit manipulations, best to work with &lt;em&gt;unsigned&lt;/em&gt; types rather than &lt;em&gt;signed&lt;/em&gt; ones&lt;/p&gt;\n    ","\n&lt;p&gt;This program is based out of @Jeremy&apos;s above solution. If someone wish to quickly play around.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BitwiseOperations&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;String args[]&lt;/span&gt;)&lt;/span&gt; {\n\n        setABit(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// set the 4th bit, 0000 -&amp;gt; 1000 [8]&lt;/span&gt;\n        clearABit(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// clear the 5th bit, 10000 -&amp;gt; 00000 [0]&lt;/span&gt;\n        toggleABit(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// toggle the 4th bit, 1000 -&amp;gt; 0000 [0]&lt;/span&gt;\n        checkABit(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// check the 4th bit 1000 -&amp;gt; true &lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setABit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; input, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n&lt;/span&gt;)&lt;/span&gt; {\n        input = input | ( &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;);\n        System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(input);\n    }\n\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;clearABit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; input, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n&lt;/span&gt;)&lt;/span&gt; {\n        input = input &amp;amp; ~(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;);\n        System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(input);\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;toggleABit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; input, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n&lt;/span&gt;)&lt;/span&gt; {\n        input = input ^ (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;);\n        System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(input);\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;checkABit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; input, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n&lt;/span&gt;)&lt;/span&gt; {\n        boolean isSet = ((input &amp;gt;&amp;gt; n&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; \n        System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(isSet);\n    }\n}\n\n\nOutput :\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A templated version (put in a header file) with support for changing multiple bits (works on AVR microcontrollers btw):&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; bit {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T1, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T2&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; T1 &lt;span class=&quot;hljs-title&quot;&gt;bitmask&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T2 bit)&lt;/span&gt; \n  &lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (T1)&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; bit;}\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T1, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T3, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ...T2&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; T1 &lt;span class=&quot;hljs-title&quot;&gt;bitmask&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T3 bit, T2 ...bits)&lt;/span&gt; \n  &lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((T1)&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; bit) | &lt;span class=&quot;hljs-built_in&quot;&gt;bitmask&lt;/span&gt;&amp;lt;T1&amp;gt;(bits...);}\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;/** Set these bits (others retain their state) */&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T1, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ...T2&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(T1 &amp;amp;variable, T2 ...bits)&lt;/span&gt; \n  &lt;/span&gt;{variable |= &lt;span class=&quot;hljs-built_in&quot;&gt;bitmask&lt;/span&gt;&amp;lt;T1&amp;gt;(bits...);}\n  &lt;span class=&quot;hljs-comment&quot;&gt;/** Set only these bits (others will be cleared) */&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T1, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ...T2&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setOnly&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(T1 &amp;amp;variable, T2 ...bits)&lt;/span&gt; \n  &lt;/span&gt;{variable = &lt;span class=&quot;hljs-built_in&quot;&gt;bitmask&lt;/span&gt;&amp;lt;T1&amp;gt;(bits...);}\n  &lt;span class=&quot;hljs-comment&quot;&gt;/** Clear these bits (others retain their state) */&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T1, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ...T2&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;clear&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(T1 &amp;amp;variable, T2 ...bits)&lt;/span&gt; \n  &lt;/span&gt;{variable &amp;amp;= ~&lt;span class=&quot;hljs-built_in&quot;&gt;bitmask&lt;/span&gt;&amp;lt;T1&amp;gt;(bits...);}\n  &lt;span class=&quot;hljs-comment&quot;&gt;/** Flip these bits (others retain their state) */&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T1, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ...T2&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;flip&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(T1 &amp;amp;variable, T2 ...bits)&lt;/span&gt; \n  &lt;/span&gt;{variable ^= &lt;span class=&quot;hljs-built_in&quot;&gt;bitmask&lt;/span&gt;&amp;lt;T1&amp;gt;(bits...);}\n  &lt;span class=&quot;hljs-comment&quot;&gt;/** Check if any of these bits are set */&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T1, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ...T2&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;isAnySet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T1 &amp;amp;variable, T2 ...bits)&lt;/span&gt; \n  &lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; variable &amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;bitmask&lt;/span&gt;&amp;lt;T1&amp;gt;(bits...);}\n  &lt;span class=&quot;hljs-comment&quot;&gt;/** Check if all these bits are set */&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T1, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ...T2&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;isSet&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T1 &amp;amp;variable, T2 ...bits)&lt;/span&gt; \n  &lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((variable &amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;bitmask&lt;/span&gt;&amp;lt;T1&amp;gt;(bits...)) == &lt;span class=&quot;hljs-built_in&quot;&gt;bitmask&lt;/span&gt;&amp;lt;T1&amp;gt;(bits...));}\n  &lt;span class=&quot;hljs-comment&quot;&gt;/** Check if all these bits are not set */&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T1, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ...T2&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;isNotSet&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T1 &amp;amp;variable, T2 ...bits)&lt;/span&gt; \n  &lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((variable &amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;bitmask&lt;/span&gt;&amp;lt;T1&amp;gt;(bits...)) != &lt;span class=&quot;hljs-built_in&quot;&gt;bitmask&lt;/span&gt;&amp;lt;T1&amp;gt;(bits...));}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example of use:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bitset&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// for console output of binary values&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// and include the code above of course&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;uint8_t&lt;/span&gt; v = &lt;span class=&quot;hljs-number&quot;&gt;0b1111&apos;1100&lt;/span&gt;;\n  bit::&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(v, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;bitset&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&amp;gt;(v) &amp;lt;&amp;lt; endl;\n\n  bit::&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;(v, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n  cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;bitset&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&amp;gt;(v) &amp;lt;&amp;lt; endl;\n\n  bit::&lt;span class=&quot;hljs-built_in&quot;&gt;flip&lt;/span&gt;(v, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n  cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;bitset&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&amp;gt;(v) &amp;lt;&amp;lt; endl;\n\n  bit::&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;(v, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;);\n  cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;bitset&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&amp;gt;(v) &amp;lt;&amp;lt; endl;\n\n  bit::&lt;span class=&quot;hljs-built_in&quot;&gt;flip&lt;/span&gt;(v, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;);\n  cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;bitset&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&amp;gt;(v) &amp;lt;&amp;lt; endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;BTW: It turns out that constexpr and inline is not used if not sending the optimizer argument (e.g.: -O3) to the compiler. Feel free to try the code at &lt;a href=&quot;https://godbolt.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://godbolt.org/&lt;/a&gt; and look at the ASM output.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a routine in C to perform the basic bitwise operations:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; INT_BIT (unsigned int) (sizeof(unsigned int) * 8U) &lt;span class=&quot;hljs-comment&quot;&gt;//number of bits in unsigned int&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    \n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//k is the bit position; here it is the 5th bit from the LSb (0th bit)&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; regA = &lt;span class=&quot;hljs-number&quot;&gt;0x00007C7C&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//we perform bitwise operations on regA&lt;/span&gt;\n    \n    regA |= (&lt;span class=&quot;hljs-number&quot;&gt;1U&lt;/span&gt; &amp;lt;&amp;lt; k);    &lt;span class=&quot;hljs-comment&quot;&gt;//Set kth bit&lt;/span&gt;\n    \n    regA &amp;amp;= ~(&lt;span class=&quot;hljs-number&quot;&gt;1U&lt;/span&gt; &amp;lt;&amp;lt; k);   &lt;span class=&quot;hljs-comment&quot;&gt;//Clear kth bit&lt;/span&gt;\n    \n    regA ^= (&lt;span class=&quot;hljs-number&quot;&gt;1U&lt;/span&gt; &amp;lt;&amp;lt; k);    &lt;span class=&quot;hljs-comment&quot;&gt;//Toggle kth bit&lt;/span&gt;\n    \n    regA = (regA &amp;lt;&amp;lt; k) | regA &amp;gt;&amp;gt; (INT_BIT - k); &lt;span class=&quot;hljs-comment&quot;&gt;//Rotate left by k bits&lt;/span&gt;\n    \n    regA = (regA &amp;gt;&amp;gt; k) | regA &amp;lt;&amp;lt; (INT_BIT - k); &lt;span class=&quot;hljs-comment&quot;&gt;//Rotate right by k bits&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;   \n}\n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Setting the nth bit to x (bit value) without using -1&lt;/h1&gt;\n&lt;p&gt;Sometimes when you are not sure what -1 or the like will result in, you may wish to set the nth bit without using -1:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;number = (((number | (1 &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;n)) ^ (1 &amp;lt;&amp;lt; n&lt;/span&gt;))) | (x &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;n);\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Explanation: &lt;code&gt;((number | (1 &amp;lt;&amp;lt; n)&lt;/code&gt; sets the nth bit to 1 (where &lt;code&gt;|&lt;/code&gt; denotes bitwise OR), then with &lt;code&gt;(...) ^ (1 &amp;lt;&amp;lt; n)&lt;/code&gt; we set the nth bit to 0, and finally with &lt;code&gt;(...) | x &amp;lt;&amp;lt; n)&lt;/code&gt; we set the nth bit that was 0, to (bit value) &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;This also works in &lt;code&gt;golang&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Try one of these functions in the C language to change n bit:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; bitfield;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Start at 0th position&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;chang_n_bit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n{\n    bitfield = (bitfield | (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n)) &amp;amp; (~( (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n) ^ (&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &amp;lt;&amp;lt; n) ));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;void chang_n_bit(int n, int value)\n{\n    bitfield = (bitfield | (1 &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;n)) &amp;amp; ((value &amp;lt;&amp;lt; n&lt;/span&gt;) | ((~0) ^ (1 &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;n)));\n}\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;chang_n_bit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;)\n        bitfield |= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        bitfield &amp;amp;= ~&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ^ (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;get_n_bit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; n&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (bitfield &amp;amp; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n)) ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;read this: &lt;a href=&quot;http://graphics.stanford.edu/~seander/bithacks.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;graphics.stanford.edu/~seander/bithacks.html&lt;/a&gt; and, when you&apos;ll master this, read this one: &lt;a href=&quot;http://realtimecollisiondetection.net/blog/?p=78&quot; rel=&quot;nofollow noreferrer&quot;&gt;realtimecollisiondetection.net/blog/?p=78&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10120/ugasoft&quot; title=&quot;3,582 reputation&quot; class=&quot;comment-user&quot;&gt;ugasoft&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31341681_47981&quot;&gt;&lt;span title=&quot;2008-09-18 16:01:18Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 18, 2008 at 16:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You may also be interested in checking out &lt;a href=&quot;http://bits.stephan-brumme.com/&quot; title=&quot;The Bit Twiddler&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Bit Twiddler&lt;/a&gt;, &lt;a href=&quot;http://graphics.stanford.edu/~seander/bithacks.html&quot; title=&quot;Bit Twiddling Hacks&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bit Twiddling Hacks&lt;/a&gt;, and &lt;a href=&quot;http://aggregate.org/MAGIC/&quot; title=&quot;The Aggregate Magic Algorithms&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Aggregate Magic Algorithms&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;anon&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment56289683_47981&quot;&gt;&lt;span title=&quot;2009-01-05 11:13:32Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jan 5, 2009 at 11:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I would like to note that on platforms that have native support for bit set/clear (ex, AVR microcontrollers), compilers will often translate &apos;myByte |= (1 &amp;lt;&amp;lt; x)&apos; into the native bit set/clear instructions whenever x is a constant, ex: (1 &amp;lt;&amp;lt; 5), or const unsigned x = 5.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14153/aaron&quot; title=&quot;3,417 reputation&quot; class=&quot;comment-user&quot;&gt;Aaron&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment11300_47990&quot;&gt;&lt;span title=&quot;2008-09-17 17:13:35Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2008 at 17:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;bit = number &amp;amp; (1 &amp;lt;&amp;lt; x); will not put the value of bit x into bit unless bit has type _Bool (&amp;lt;stdbool.h&amp;gt;). Otherwise, bit = !!(number &amp;amp; (1 &amp;lt;&amp;lt; x)); will..&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9417/chris-young&quot; title=&quot;15,305 reputation&quot; class=&quot;comment-user&quot;&gt;Chris Young&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment141425_47990&quot;&gt;&lt;span title=&quot;2008-11-16 07:49:52Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 16, 2008 at 7:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;why don&apos;t you change the last one to &lt;code&gt;bit = (number &amp;gt;&amp;gt; x) &amp;amp; 1&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2167655/aaronman&quot; title=&quot;17,866 reputation&quot; class=&quot;comment-user&quot;&gt;aaronman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25135769_47990&quot;&gt;&lt;span title=&quot;2013-06-26 18:47:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 26, 2013 at 18:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;1&lt;/code&gt; is an &lt;code&gt;int&lt;/code&gt; literal, which is signed. So all the operations here operate on signed numbers, which is not well defined by the standards. The standards does not guarantee two&apos;s complement or arithmetic shift so it is better to use &lt;code&gt;1U&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/832878/siyuan-ren&quot; title=&quot;7,181 reputation&quot; class=&quot;comment-user&quot;&gt;Siyuan Ren&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment30624288_47990&quot;&gt;&lt;span title=&quot;2013-12-10 08:53:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 10, 2013 at 8:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I prefer &lt;code&gt;number = number &amp;amp; ~(1 &amp;lt;&amp;lt; n) | (x &amp;lt;&amp;lt; n);&lt;/code&gt; for Changing the n-th bit to x.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2199657/leoly&quot; title=&quot;7,620 reputation&quot; class=&quot;comment-user&quot;&gt;leoly&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46654671_47990&quot;&gt;&lt;span title=&quot;2015-03-24 00:38:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 24, 2015 at 0:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1. Not that std::bitset is usable from &quot;C&quot;, but as the author tagged his/her question with &quot;C++&quot;, AFAIK, your answer is the best around here... std::vector&amp;lt;bool&amp;gt; is another way, if one knows its pros and its cons&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14089/paercebal&quot; title=&quot;78,896 reputation&quot; class=&quot;comment-user&quot;&gt;paercebal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18457_88934&quot;&gt;&lt;span title=&quot;2008-09-19 18:16:50Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 19, 2008 at 18:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@andrewdotnich: vector&amp;lt;bool&amp;gt; is (unfortunately) a specialization that stores the values as bits. See &lt;a href=&quot;http://www.gotw.ca/publications/mill09.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;gotw.ca/publications/mill09.htm&lt;/a&gt; for more info...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15323/niklas&quot; title=&quot;5,406 reputation&quot; class=&quot;comment-user&quot;&gt;Niklas&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment194024_88934&quot;&gt;&lt;span title=&quot;2008-12-12 20:40:15Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 12, 2008 at 20:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Maybe nobody mentioned it because this was tagged embedded. In most embedded systems you avoid STL like the plague. And boost support is likely a very rare bird to spot among most embedded compilers.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/584518/lundin&quot; title=&quot;175,730 reputation&quot; class=&quot;comment-user&quot;&gt;Lundin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8521682_88934&quot;&gt;&lt;span title=&quot;2011-08-18 19:47:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 18, 2011 at 19:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Martin It is very true. Besides specific performance killers like STL and templates, many embedded systems even avoid the whole standard libraries entirely, because they are such a pain to verify. Most of the embedded branch is embracing standards like MISRA, that requires static code analysis tools (any software professionals should be using such tools btw, not just embedded folks). Generally people have better things to do than run static analysis through the whole standard library - if its source code is even available to them on the specific compiler.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/584518/lundin&quot; title=&quot;175,730 reputation&quot; class=&quot;comment-user&quot;&gt;Lundin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8528476_88934&quot;&gt;&lt;span title=&quot;2011-08-19 06:26:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 19, 2011 at 6:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Lundin: Your statements are excessively broad (thus useless to argue about). I am sure that I can find situations were they are true. This does not change my initial point. Both of these classes are perfectly fine for use in embedded systems (and I know for a fact that they are used). Your initial point about STL/Boost not being used on embedded systems is also wrong. I am sure there are systems that don&apos;t use them and even the systems that do use them they are used judiciously but saying they are not used is just not correct (because there are systems were they are used).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14065/martin-york&quot; title=&quot;247,789 reputation&quot; class=&quot;comment-user&quot;&gt;Martin York&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8528636_88934&quot;&gt;&lt;span title=&quot;2011-08-19 06:41:32Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 19, 2011 at 6:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;ve always found using bitfields is a bad idea. You have no control over the order in which bits are allocated (from the top or the bottom), which makes it impossible to serialize the value in a stable/portable way except bit-at-a-time. It&apos;s also impossible to mix DIY bit arithmetic with bitfields, for example making a mask that tests for several bits at once. You can of course use &amp;amp;&amp;amp; and hope the compiler will optimize it correctly...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/379897/r-github-stop-helping-ice&quot; title=&quot;202,279 reputation&quot; class=&quot;comment-user&quot;&gt;R.. GitHub STOP HELPING ICE&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3215180_55584&quot;&gt;&lt;span title=&quot;2010-06-28 06:17:34Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2010 at 6:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Bit fields are bad in so many ways, I could almost write a book about it. In fact I almost had to do that for a bit field program that needed MISRA-C compliance. MISRA-C enforces all implementation-defined behavior to be documented, so I ended up writing quite an essay about everything that can go wrong in bit fields. Bit order, endianess, padding bits, padding bytes, various other alignment issues, implicit and explicit type conversions to and from a bit field, UB if int isn&apos;t used and so on. Instead, use bitwise-operators for less bugs and portable code. Bit fields are completely redundant.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/584518/lundin&quot; title=&quot;175,730 reputation&quot; class=&quot;comment-user&quot;&gt;Lundin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8521238_55584&quot;&gt;&lt;span title=&quot;2011-08-18 19:19:51Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 18, 2011 at 19:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Like most language features, bit fields can be used correctly or they can be abused. If you need to pack several small values into a single int, bit fields can be very useful. On the other hand, if you start making assumptions about how the bit fields map to the actual containing int, you&apos;re just asking for trouble.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4086/ferruccio&quot; title=&quot;96,506 reputation&quot; class=&quot;comment-user&quot;&gt;Ferruccio&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8521503_55584&quot;&gt;&lt;span title=&quot;2011-08-18 19:35:12Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 18, 2011 at 19:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@endolith: That would not be a good idea. You could make it work, but it wouldn&apos;t necessarily be portable to a different processor, or to a different compiler or even to the next release of the same compiler.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4086/ferruccio&quot; title=&quot;96,506 reputation&quot; class=&quot;comment-user&quot;&gt;Ferruccio&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment12214816_55584&quot;&gt;&lt;span title=&quot;2012-03-08 21:02:38Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 8, 2012 at 21:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Yasky and Ferruccio getting different answers to a sizeof() for this approach should illustrate the problems with compatibility not just across compilers but across hardware.  We sometimes fool ourselves that we&apos;ve solved these issues with languages or defined runtimes but it really comes down to &apos;will it work on my machine?&apos;. You embedded guys have my respect (and sympathies).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/135078/kelly-s-french&quot; title=&quot;11,987 reputation&quot; class=&quot;comment-user&quot;&gt;Kelly S. French&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment69295419_55584&quot;&gt;&lt;span title=&quot;2016-12-08 16:11:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 8, 2016 at 16:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Uh I realize this is a 5 year old post but there is no argument duplication in any of those macros, Dan&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/619255/robert-kelly&quot; title=&quot;946 reputation&quot; class=&quot;comment-user&quot;&gt;Robert Kelly&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment28307539_263738&quot;&gt;&lt;span title=&quot;2013-10-02 14:53:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 2, 2013 at 14:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;BITMASK_CHECK(x,y) ((x) &amp;amp; (y))&lt;/code&gt; must be &lt;code&gt;((x) &amp;amp; (y)) == (y)&lt;/code&gt; otherwise it returns incorrect result on multibit mask (ex. &lt;code&gt;5&lt;/code&gt; vs. &lt;code&gt;3&lt;/code&gt;)  /*Hello to all gravediggers :)*/&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/326017/brigadir&quot; title=&quot;6,533 reputation&quot; class=&quot;comment-user&quot;&gt;brigadir&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment43286974_263738&quot;&gt;&lt;span title=&quot;2014-12-11 12:00:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 11, 2014 at 12:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;1&lt;/code&gt; should be &lt;code&gt;(uintmax_t)1&lt;/code&gt; or similar in case anybody tries to use these macros on a &lt;code&gt;long&lt;/code&gt; or larger type&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1505939/m-m&quot; title=&quot;135,063 reputation&quot; class=&quot;comment-user&quot;&gt;M.M&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45093698_263738&quot;&gt;&lt;span title=&quot;2015-02-06 23:50:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 6, 2015 at 23:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;BITMASK_CHECK_ALL(x,y)&lt;/code&gt; can be implemented as &lt;code&gt;!~((~(y))|(x))&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10532253/handy999&quot; title=&quot;766 reputation&quot; class=&quot;comment-user&quot;&gt;Handy999&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93655082_263738&quot;&gt;&lt;span title=&quot;2018-11-20 09:24:42Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 20, 2018 at 9:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Handy999 It&apos;s a bit easier to see why that works after applying De Morgan&apos;s law and re-arranging to get &lt;code&gt;!(~(x) &amp;amp; (y))&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/502399/tavian-barnes&quot; title=&quot;12,047 reputation&quot; class=&quot;comment-user&quot;&gt;Tavian Barnes&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment101440658_263738&quot;&gt;&lt;span title=&quot;2019-08-13 20:14:54Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 13, 2019 at 20:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Alternately you could make a &lt;code&gt;clearbits()&lt;/code&gt; function instead of &lt;code&gt;&amp;amp;= ~&lt;/code&gt;.  Why are you using an enum for this?  I thought those were for creating a bunch of unique variables with hidden arbitrary value, but you&apos;re assigning a definite value to each one.  So what&apos;s the benefit vs just defining them as variables?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/125507/endolith&quot; title=&quot;23,777 reputation&quot; class=&quot;comment-user&quot;&gt;endolith&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10635941_50691&quot;&gt;&lt;span title=&quot;2011-12-20 15:09:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 20, 2011 at 15:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@endolith: The use of &lt;code&gt;enum&lt;/code&gt;s for sets of related constants goes back a long way in c programing. I suspect that with modern compilers the only advantage over &lt;code&gt;const short&lt;/code&gt; or whatever is that they are explicitly grouped together. And when you want them for something &lt;i&gt;other&lt;/i&gt; than bitmasks you get the automatic numbering. In c++ of course, they also form distinct types which gives you a little extras static error checking.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2509/dmckee-ex-moderator-kitten&quot; title=&quot;95,126 reputation&quot; class=&quot;comment-user&quot;&gt;dmckee --- ex-moderator kitten&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10667618_50691&quot;&gt;&lt;span title=&quot;2011-12-22 01:15:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 22, 2011 at 1:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You&apos;ll get into undefined enum constants if you don&apos;t define a constant for each of the possible values of the bits.  What&apos;s the &lt;code&gt;enum ThingFlags&lt;/code&gt; value for &lt;code&gt;ThingError|ThingFlag1&lt;/code&gt;, for example?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3899431/luis-colorado&quot; title=&quot;9,512 reputation&quot; class=&quot;comment-user&quot;&gt;Luis Colorado&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment40934391_50691&quot;&gt;&lt;span title=&quot;2014-09-30 10:55:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 30, 2014 at 10:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you use this method please keep in mind that enum constants are always of signed type &lt;code&gt;int&lt;/code&gt;. This can cause all manner of subtle bugs because of implicit integer promotion or bitwise operations on signed types. &lt;code&gt;thingstate = ThingFlag1 &amp;gt;&amp;gt; 1&lt;/code&gt; will for example invoke implementation-defined behavior. &lt;code&gt;thingstate = (ThingFlag1 &amp;gt;&amp;gt; x) &amp;lt;&amp;lt; y&lt;/code&gt; can invoke undefined behavior. And so on. To be safe, always cast to an unsigned type.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/584518/lundin&quot; title=&quot;175,730 reputation&quot; class=&quot;comment-user&quot;&gt;Lundin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment56268243_50691&quot;&gt;&lt;span title=&quot;2015-12-14 09:25:32Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 14, 2015 at 9:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Lundin: As of C++11, you can set the underlying type of an enumeration, e.g.:  &lt;code&gt;enum My16Bits: unsigned short { ... };&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3308532/aiken-drum&quot; title=&quot;561 reputation&quot; class=&quot;comment-user&quot;&gt;Aiken Drum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59681239_50691&quot;&gt;&lt;span title=&quot;2016-03-15 15:01:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 15, 2016 at 15:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;2 things about this: (1) in perusing your macros, some may incorrectly believe that the macros actually set/clear/flip bits in the arg, however there is no assignment; (2) your test.c is not complete; I suspect if you ran more cases you&apos;d find a problem (reader exercise)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/28574/dan&quot; title=&quot;10,074 reputation&quot; class=&quot;comment-user&quot;&gt;Dan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment85093_79163&quot;&gt;&lt;span title=&quot;2008-10-18 01:51:34Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 18, 2008 at 1:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;-1 This is just weird obfuscation. Never re-invent the C language by hiding away language syntax behind macros, it is &lt;i&gt;very&lt;/i&gt; bad practice. Then some oddities: first, 1L is signed, meaning all bit operations will be performed on a signed type. Everything passed to these macros will return as signed long. Not good. Second, this will work very inefficiently on smaller CPUs as it enforces long when the operations could have been on int level. Third, function-like macros are the root of all evil: you have no type safety whatsoever. Also, the previous comment about no assignment is very valid.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/584518/lundin&quot; title=&quot;175,730 reputation&quot; class=&quot;comment-user&quot;&gt;Lundin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8521123_79163&quot;&gt;&lt;span title=&quot;2011-08-18 19:14:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 18, 2011 at 19:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This will fail if &lt;code&gt;arg&lt;/code&gt; is &lt;code&gt;long long&lt;/code&gt;.  &lt;code&gt;1L&lt;/code&gt; needs to be the widest possible type, so &lt;code&gt;(uintmax_t)1&lt;/code&gt; . (You might get away with &lt;code&gt;1ull&lt;/code&gt;)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1505939/m-m&quot; title=&quot;135,063 reputation&quot; class=&quot;comment-user&quot;&gt;M.M&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45093723_79163&quot;&gt;&lt;span title=&quot;2015-02-06 23:51:47Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 6, 2015 at 23:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Did you optimize for code-size?  On Intel mainstream CPUs you&apos;ll get partial-register stalls when reading AX or EAX after this function returns, because it writes the 8-bit components of EAX.  (It&apos;s fine on AMD CPUs, or others that don&apos;t rename partial registers separately from the full register.  &lt;a href=&quot;https://stackoverflow.com/questions/45660139/how-exactly-do-partial-registers-on-haswell-skylake-perform-writing-al-seems-to&quot;&gt;Haswell/Skylake don&apos;t rename AL separately, but they do rename AH.&lt;/a&gt;).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/224132/peter-cordes&quot; title=&quot;289,881 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Cordes&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment81413744_79163&quot;&gt;&lt;span title=&quot;2017-11-10 21:38:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 10, 2017 at 21:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Micro was Coldfire MCF52259, using C in Codewarrior. Looking at the disassembler / asm is a useful exercise as it shows all the steps the CPU has to go through to do even the most basic operation.  &amp;lt;br&amp;gt;We also spotted other CPU-hogging instructions in time-critical loops - constraining a variable by doing var %= max_val costs a pile of CPU cycles every time round, while doing if(var &amp;gt; max_val)var-=max_val uses only a couple of instructions.  &amp;lt;br&amp;gt;A good guide to a few more tricks is here: &lt;a href=&quot;http://www.codeproject.com/Articles/6154/Writing-Efficient-C-and-C-Code-Optimization&quot; rel=&quot;nofollow noreferrer&quot;&gt;codeproject.com/Articles/6154/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1389218/john-u&quot; title=&quot;2,769 reputation&quot; class=&quot;comment-user&quot;&gt;John U&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment14547135_11036329&quot;&gt;&lt;span title=&quot;2012-06-19 17:33:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 19, 2012 at 17:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Even more importantly, the helper memory-mapped I/O registers provide a mechanism for atomic updates.  Read/modify/write can go very badly if the sequence is interrupted.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/103167/ben-voigt&quot; title=&quot;270,543 reputation&quot; class=&quot;comment-user&quot;&gt;Ben Voigt&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45604449_11036329&quot;&gt;&lt;span title=&quot;2015-02-22 02:16:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 22, 2015 at 2:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Keep in mind that all port registers will be defined as &lt;code&gt;volatile&lt;/code&gt; and therefore the compiler is unable to perform any optimizations on code involving such registers. Therefore, it is good practice to disassemble such code and see how it turned out on assembler level.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/584518/lundin&quot; title=&quot;175,730 reputation&quot; class=&quot;comment-user&quot;&gt;Lundin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment56268853_11036329&quot;&gt;&lt;span title=&quot;2015-12-14 09:42:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 14, 2015 at 9:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s good to read but one should be aware of possible side effects. Using &lt;code&gt;BITOP(array, bit++, |=);&lt;/code&gt; in a loop will most likely not do what the caller wants.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/27596/foraidt&quot; title=&quot;5,439 reputation&quot; class=&quot;comment-user&quot;&gt;foraidt&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3340326_3234773&quot;&gt;&lt;span title=&quot;2010-07-13 08:27:40Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 13, 2010 at 8:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Indeed. =) One variant you might prefer is to separate it into 2 macros, 1 for addressing the array element and the other for shifting the bit into place, ala &lt;code&gt;BITCELL(a,b) |= BITMASK(a,b);&lt;/code&gt; (both take &lt;code&gt;a&lt;/code&gt; as an argument to determine the size, but the latter would never evaluate &lt;code&gt;a&lt;/code&gt; since it appears only in &lt;code&gt;sizeof&lt;/code&gt;).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/379897/r-github-stop-helping-ice&quot; title=&quot;202,279 reputation&quot; class=&quot;comment-user&quot;&gt;R.. GitHub STOP HELPING ICE&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3340730_3234773&quot;&gt;&lt;span title=&quot;2010-07-13 09:19:46Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 13, 2010 at 9:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@R.. This answer is really old, but I&apos;d probably prefer a function to a macro in this case.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4367864/pc-luddite&quot; title=&quot;5,761 reputation&quot; class=&quot;comment-user&quot;&gt;PC Luddite&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment54414548_3234773&quot;&gt;&lt;span title=&quot;2015-10-23 17:08:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 23, 2015 at 17:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Minor: the  3rd &lt;code&gt;(size_t)&lt;/code&gt; cast seem to be there only to insure some &lt;i&gt;unsigned math&lt;/i&gt; with &lt;code&gt;%&lt;/code&gt;.  Could &lt;code&gt;(unsigned)&lt;/code&gt; there.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79864204_3234773&quot;&gt;&lt;span title=&quot;2017-09-27 17:58:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 27, 2017 at 17:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The &lt;code&gt;(size_t)(b)/(8*sizeof *(a))&lt;/code&gt; unnecessarily could narrow &lt;code&gt;b&lt;/code&gt; before the division.  Only an issue with very large bit arrays.  Still an interesting macro.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79864288_3234773&quot;&gt;&lt;span title=&quot;2017-09-27 18:00:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 27, 2017 at 18:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Pretty much everything about bit-fields is implementation-defined. Even if you manage to find out all details regarding how your particular compiler implements them, using them in your code will most certainly make it non-portable.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/584518/lundin&quot; title=&quot;175,730 reputation&quot; class=&quot;comment-user&quot;&gt;Lundin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8521738_268356&quot;&gt;&lt;span title=&quot;2011-08-18 19:50:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 18, 2011 at 19:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Lundin - True, but embedded system bit-fiddling (particularly in hardware registers, which is what my answer relates to) is never going to be usefully portable anyway.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1737/roddy&quot; title=&quot;65,037 reputation&quot; class=&quot;comment-user&quot;&gt;Roddy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8541938_268356&quot;&gt;&lt;span title=&quot;2011-08-19 20:13:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 19, 2011 at 20:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Not between entirely different CPUs perhaps. But you most likely want it to be portable between compilers and between different projects. And there is a lot of embedded &quot;bit-fiddling&quot; that isn&apos;t related to the hardware at all, such as data protocol encoding/decoding.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/584518/lundin&quot; title=&quot;175,730 reputation&quot; class=&quot;comment-user&quot;&gt;Lundin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8547948_268356&quot;&gt;&lt;span title=&quot;2011-08-20 09:35:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 20, 2011 at 9:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;...and if you get in the habit of using bit fields doing embedded programming, you&apos;ll find your X86 code runs faster, and leaner too. Not in simple benchmarks where you have the whole machine to crush the benchmark, but in real-world multi-tasking environments where programs compete for resources. Advantage CISC - whose original design goal was to make up for CPUs faster than buses and slow memory.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user1899861&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment20906428_268356&quot;&gt;&lt;span title=&quot;2013-02-15 22:26:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 15, 2013 at 22:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks for the detailed explanation. Here is the link for practice problem for BIT Magic &lt;a href=&quot;https://www.geeksforgeeks.org/c-programs-gq/bit-magic-programs-gq/&quot; rel=&quot;nofollow noreferrer&quot;&gt;link&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7497038/chandra-shekhar&quot; title=&quot;579 reputation&quot; class=&quot;comment-user&quot;&gt;Chandra Shekhar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105199309_56521123&quot;&gt;&lt;span title=&quot;2019-12-28 18:37:41Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 28, 2019 at 18:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 4 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;CHAR_BIT&lt;/code&gt; is already defined by &lt;code&gt;limits.h&lt;/code&gt;, you don&apos;t need to put in your own &lt;code&gt;BITS&lt;/code&gt; (and in fact you make your code worse by doing so)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1505939/m-m&quot; title=&quot;135,063 reputation&quot; class=&quot;comment-user&quot;&gt;M.M&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45093737_991546&quot;&gt;&lt;span title=&quot;2015-02-06 23:52:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 6, 2015 at 23:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Don&apos;t use a table for a function that can be implemented with a single operator. TQuickByteMask[n] is equivalent to (1&amp;lt;&amp;lt;n).  Also, making your arguments short is a very bad idea. The / and % will actually be a division, not bitshift/bitwise and, because signed division by a power of 2 cannot be implemented bitwise. You should make the argument type unsigned int!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/379897/r-github-stop-helping-ice&quot; title=&quot;202,279 reputation&quot; class=&quot;comment-user&quot;&gt;R.. GitHub STOP HELPING ICE&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3215209_83645&quot;&gt;&lt;span title=&quot;2010-06-28 06:24:57Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2010 at 6:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What&apos;s the point with this? It only makes the code slower and harder to read? I can&apos;t see a single advantage with it. 1u &amp;lt;&amp;lt; n is easier to read for C programmers, and can hopefully be translated into a single clock tick CPU instruction. Your division on the other hand, will be translated to something around 10 ticks, or even as bad as up to 100 ticks, depending on how poorly the specific architecture handles division. As for the bitmap feature, it would make more sense to have a lookup table translating each bit index to a byte index, to optimize for speed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/584518/lundin&quot; title=&quot;175,730 reputation&quot; class=&quot;comment-user&quot;&gt;Lundin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8521453_83645&quot;&gt;&lt;span title=&quot;2011-08-18 19:32:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 18, 2011 at 19:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;As for big/little endian, big endian will map integers and raw data (for example strings) in the same way: left-to-right msb to lsb throughout the whole bitmap. While little endian will map integers left to right as 7-0, 15-8, 23-18, 31-24, but raw data is still left-to-right msb to lsb. So how little endian is better for your particular algorithm is completely beyond me, it seems to be the opposite.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/584518/lundin&quot; title=&quot;175,730 reputation&quot; class=&quot;comment-user&quot;&gt;Lundin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8521617_83645&quot;&gt;&lt;span title=&quot;2011-08-18 19:42:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 18, 2011 at 19:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@R.. A table can be useful if your plattform can&apos;t shift efficiently, like old microchip mcu&apos;s, but of course then the division in the sample is absolutly inefficient&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/463115/jeb&quot; title=&quot;75,148 reputation&quot; class=&quot;comment-user&quot;&gt;jeb&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10050186_83645&quot;&gt;&lt;span title=&quot;2011-11-18 11:28:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 18, 2011 at 11:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Well, it uses inefficient branching.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/764223/asdf&quot; title=&quot;229 reputation&quot; class=&quot;comment-user&quot;&gt;asdf&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7730398_740953&quot;&gt;&lt;span title=&quot;2011-07-02 19:33:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 2, 2011 at 19:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@asdf The compiler&apos;s job is to output the most efficient binary, the programmer&apos;s job is to write clear code&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1505939/m-m&quot; title=&quot;135,063 reputation&quot; class=&quot;comment-user&quot;&gt;M.M&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45093754_740953&quot;&gt;&lt;span title=&quot;2015-02-06 23:53:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 6, 2015 at 23:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is a good demonstration of testing, setting, and clearing a particular bit.  However it&apos;s a very bad approach for toggling a bit.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/103167/ben-voigt&quot; title=&quot;270,543 reputation&quot; class=&quot;comment-user&quot;&gt;Ben Voigt&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45604482_740953&quot;&gt;&lt;span title=&quot;2015-02-22 02:18:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 22, 2015 at 2:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;std::bitset is indeed implemented as bits by most compilers&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2042388/galinette&quot; title=&quot;8,354 reputation&quot; class=&quot;comment-user&quot;&gt;galinette&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42495979_14087800&quot;&gt;&lt;span title=&quot;2014-11-17 20:03:37Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 17, 2014 at 20:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@galinette, Agreed. The header file #include &amp;lt;bitset&amp;gt; is a good resource in this regard. Also, the special class vector&amp;lt;bool&amp;gt; for when you need the size of the vector to change. The C++ STL, 2nd Edition, Nicolai M. Josuttis covers them exhaustively on pgs 650 and 281 respectively. C++11 adds a few new capabilities to std::bitset, of special interest to me is a hash function in unordered containers. Thanks for the heads up! I&apos;m going to delete my brain-cramp comment. Already enough garbage out on the web. I don&apos;t want to add to it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user1899861&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42498029_14087800&quot;&gt;&lt;span title=&quot;2014-11-17 21:08:22Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 17, 2014 at 21:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This uses at least a whole byte of storage for each &lt;code&gt;bool&lt;/code&gt;. Maybe even 4 bytes for C89 setups that use &lt;code&gt;int&lt;/code&gt; to implement &lt;code&gt;bool&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1505939/m-m&quot; title=&quot;135,063 reputation&quot; class=&quot;comment-user&quot;&gt;M.M&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45093778_14087800&quot;&gt;&lt;span title=&quot;2015-02-06 23:55:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 6, 2015 at 23:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MattMcNabb, you are correct. In C++ the size of the int type necessary to implement a boolean is not specified by the standard. I realized this answer was in error some time ago, but decided to leave it here as people are apparently finding it useful. For those wanting to use bits galinette&apos;s comment is most helpful as is my bit library here ... &lt;a href=&quot;http://stackoverflow.com/a/16534995/1899861&quot;&gt;stackoverflow.com/a/16534995/1899861&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user1899861&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45267343_14087800&quot;&gt;&lt;span title=&quot;2015-02-12 07:23:47Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 12, 2015 at 7:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@RocketRoy: Probably worth changing the sentence that claims this is an example of &quot;bit operations&quot;, then.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/103167/ben-voigt&quot; title=&quot;270,543 reputation&quot; class=&quot;comment-user&quot;&gt;Ben Voigt&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45604502_14087800&quot;&gt;&lt;span title=&quot;2015-02-22 02:20:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 22, 2015 at 2:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Return type of &lt;code&gt;check_nth_bit&lt;/code&gt; can be &lt;code&gt;bool&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4818802/xeverous&quot; title=&quot;901 reputation&quot; class=&quot;comment-user&quot;&gt;Xeverous&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment108994716_48906086&quot;&gt;&lt;span title=&quot;2020-05-05 16:07:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 5, 2020 at 16:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Xeverous yes it depends on callers intention&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1084174/sazzad-hissain-khan&quot; title=&quot;34,234 reputation&quot; class=&quot;comment-user&quot;&gt;Sazzad Hissain Khan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment108998835_48906086&quot;&gt;&lt;span title=&quot;2020-05-05 18:09:52Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 5, 2020 at 18:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Interesting look on an old question! Neither &lt;code&gt;number |= (type_of_number)1 &amp;lt;&amp;lt; x;&lt;/code&gt; nor &lt;code&gt;number |= (number*0 + 1) &amp;lt;&amp;lt; x;&lt;/code&gt; appropriate to set the sign bit of a signed type... As a matter of fact, neither is &lt;code&gt;number |= (1ull &amp;lt;&amp;lt; x);&lt;/code&gt;. Is there a portable way to do it by position?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4593267/chqrlie&quot; title=&quot;116,263 reputation&quot; class=&quot;comment-user&quot;&gt;chqrlie&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79871861_46454677&quot;&gt;&lt;span title=&quot;2017-09-27 22:27:57Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 27, 2017 at 22:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@chqrlie IMO, the best way to avoid setting the sign bit and risking UB or IDB with shifts is to use &lt;i&gt;unsigned&lt;/i&gt; types. Highly portable shift &lt;i&gt;signed&lt;/i&gt; code is too convoluted to be acceptable.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79871981_46454677&quot;&gt;&lt;span title=&quot;2017-09-27 22:33:49Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 27, 2017 at 22:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This code is broken. (Also, why do you have &lt;code&gt;;&lt;/code&gt; after your function definitions?)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1848654/melpomene&quot; title=&quot;81,971 reputation&quot; class=&quot;comment-user&quot;&gt;melpomene&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84449119_48725080&quot;&gt;&lt;span title=&quot;2018-02-10 20:11:47Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 10, 2018 at 20:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@melpomene The code is not broken, I did test it. Do you mean that it will not compile or that the result is wrong? About the extra &apos;;&apos; I don&apos;t remember, those can be removed indeed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4216153/joakim-l-christiansen&quot; title=&quot;1,368 reputation&quot; class=&quot;comment-user&quot;&gt;Joakim L. Christiansen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84955638_48725080&quot;&gt;&lt;span title=&quot;2018-02-25 15:51:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 25, 2018 at 15:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;(variable &amp;amp; bits == bits)&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1848654/melpomene&quot; title=&quot;81,971 reputation&quot; class=&quot;comment-user&quot;&gt;melpomene&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84958723_48725080&quot;&gt;&lt;span title=&quot;2018-02-25 18:25:33Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 25, 2018 at 18:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thank you for noticing, it was supposed to be &lt;code&gt;((variable &amp;amp; bits) == bits)&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4216153/joakim-l-christiansen&quot; title=&quot;1,368 reputation&quot; class=&quot;comment-user&quot;&gt;Joakim L. Christiansen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment85040662_48725080&quot;&gt;&lt;span title=&quot;2018-02-27 20:56:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 27, 2018 at 20:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;use &lt;code&gt;std::bitset&lt;/code&gt;in c++11&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/686184/pqnet&quot; title=&quot;5,347 reputation&quot; class=&quot;comment-user&quot;&gt;pqnet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103449129_48725080&quot;&gt;&lt;span title=&quot;2019-10-25 20:27:22Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 25, 2019 at 20:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This could be much more succinctly (and likely more efficiently, unless the compiler optimizes your solution) as &lt;code&gt;(number &amp;amp; ~(1 &amp;lt;&amp;lt; n)) | (!!x &amp;lt;&amp;lt; n)&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2712525/will-eccles&quot; title=&quot;375 reputation&quot; class=&quot;comment-user&quot;&gt;Will Eccles&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment119205603_66075462&quot;&gt;&lt;span title=&quot;2021-05-07 21:16:27Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 7, 2021 at 21:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;value &amp;lt;&amp;lt; n&lt;/code&gt; may cause undefined behaviour&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1505939/m-m&quot; title=&quot;135,063 reputation&quot; class=&quot;comment-user&quot;&gt;M.M&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45093811_23888594&quot;&gt;&lt;span title=&quot;2015-02-06 23:57:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 6, 2015 at 23:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;change &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;0x1&lt;/code&gt; or &lt;code&gt;1UL&lt;/code&gt; to avoid UB @M.M is talking about&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user5550963&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118694579_23888594&quot;&gt;&lt;span title=&quot;2021-04-18 15:58:06Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 18, 2021 at 15:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":508,"title":"How do I set, clear, and toggle a single bit?","content":"\n                \n&lt;p&gt;How do I set, clear, and toggle a bit?&lt;/p&gt;\n    ","slug":"how-do-i-set-clear-and-toggle-a-single-bit-1657388227052","postType":"QUESTION","createdAt":"2022-07-09T17:37:07.000Z","updatedAt":"2022-07-09T17:37:07.000Z","tags":[{"id":2529,"name":"bitwise-operators","slug":"bitwise-operators","createdAt":"2022-07-09T17:37:07.000Z","updatedAt":"2022-07-09T17:37:07.000Z","Questions_Tags":{"questionId":508,"tagId":2529}}]}]}},"__N_SSG":true}