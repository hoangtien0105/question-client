{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;The stack is the memory set aside as scratch space for a thread of execution.  When a function is called, a block is reserved on the top of the stack for local variables and some bookkeeping data.  When that function returns, the block becomes unused and can be used the next time a function is called.  The stack is always reserved in a LIFO (last in first out) order; the most recently reserved block is always the next block to be freed.  This makes it really simple to keep track of the stack; freeing a block from the stack is nothing more than adjusting one pointer.&lt;/p&gt;\n&lt;p&gt;The heap is memory set aside for dynamic allocation.  Unlike the stack, there&apos;s no enforced pattern to the allocation and deallocation of blocks from the heap; you can allocate a block at any time and free it at any time.  This makes it much more complex to keep track of which parts of the heap are allocated or free at any given time; there are many custom heap allocators available to tune heap performance for different usage patterns.&lt;/p&gt;\n&lt;p&gt;Each thread gets a stack, while there&apos;s typically only one heap for the application (although it isn&apos;t uncommon to have multiple heaps for different types of allocation).&lt;/p&gt;\n&lt;p&gt;To answer your questions directly:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;To what extent are they controlled by the OS or language runtime?&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The OS allocates the stack for each system-level thread when the thread is created.  Typically the OS is called by the language runtime to allocate the heap for the application.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;What is their scope?&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The stack is attached to a thread, so when the thread exits the stack is reclaimed.  The heap is typically allocated at application startup by the runtime, and is reclaimed when the application (technically process) exits.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;What determines the size of each of them?&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The size of the stack is set when a thread is created.  The size of the heap is set on application startup, but can grow as space is needed (the allocator requests more memory from the operating system).&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;What makes one faster?&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The stack is faster because the access pattern makes it trivial to allocate and deallocate memory from it (a pointer/integer is simply incremented or decremented), while the heap has much more complex bookkeeping involved in an allocation or deallocation.  Also, each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor&apos;s cache, making it very fast. Another performance hit for the heap is that the heap, being mostly a global resource, typically has to be multi-threading safe, i.e. each allocation and deallocation needs to be - typically - synchronized with &quot;all&quot; other heap accesses in the program.&lt;/p&gt;\n&lt;p&gt;A clear demonstration:\n&lt;img src=&quot;https://i.stack.imgur.com/i6k0Z.png&quot; alt=&quot;&quot;&gt;\n&lt;br&gt;&lt;sub&gt;Image source: &lt;a href=&quot;http://vikashazrati.wordpress.com/2007/10/01/quicktip-java-basics-stack-and-heap/&quot; rel=&quot;noreferrer&quot;&gt;vikashazrati.wordpress.com&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Stack:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Stored in computer RAM just like the heap.&lt;/li&gt;\n&lt;li&gt;Variables created on the stack will go out of scope and are automatically deallocated.&lt;/li&gt;\n&lt;li&gt;Much faster to allocate in comparison to variables on the heap.&lt;/li&gt;\n&lt;li&gt;Implemented with an actual stack data structure.&lt;/li&gt;\n&lt;li&gt;Stores local data, return addresses, used for parameter passing.&lt;/li&gt;\n&lt;li&gt;Can have a stack overflow when too much of the stack is used (mostly from infinite or too deep recursion, very large allocations).&lt;/li&gt;\n&lt;li&gt;Data created on the stack can be used without pointers.&lt;/li&gt;\n&lt;li&gt;You would use the stack if you know exactly how much data you need to allocate before compile time and it is not too big.&lt;/li&gt;\n&lt;li&gt;Usually has a maximum size already determined when your program starts.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Heap:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Stored in computer RAM just like the stack.&lt;/li&gt;\n&lt;li&gt;In C++, variables on the heap must be destroyed manually and never fall out of scope. The data is freed with &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;delete[]&lt;/code&gt;, or &lt;code&gt;free&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Slower to allocate in comparison to variables on the stack.&lt;/li&gt;\n&lt;li&gt;Used on demand to allocate a block of data for use by the program.&lt;/li&gt;\n&lt;li&gt;Can have fragmentation when there are a lot of allocations and deallocations.&lt;/li&gt;\n&lt;li&gt;In C++ or C, data created on the heap will be pointed to by pointers and allocated with &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;malloc&lt;/code&gt; respectively.&lt;/li&gt;\n&lt;li&gt;Can have allocation failures if too big of a buffer is requested to be allocated.&lt;/li&gt;\n&lt;li&gt;You would use the heap if you don&apos;t know exactly how much data you will need at run time or if you need to allocate a lot of data.&lt;/li&gt;\n&lt;li&gt;Responsible for memory leaks.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pBuffer; &lt;span class=&quot;hljs-comment&quot;&gt;//&amp;lt;--nothing allocated yet (excluding the pointer itself, which is allocated here on the stack).&lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; b = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Allocated on the stack.&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(b)\n  {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Create 500 bytes on the stack&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; buffer[&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Create 500 bytes on the heap&lt;/span&gt;\n    pBuffer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;];\n\n   }&lt;span class=&quot;hljs-comment&quot;&gt;//&amp;lt;-- buffer is deallocated here, pBuffer is not&lt;/span&gt;\n}&lt;span class=&quot;hljs-comment&quot;&gt;//&amp;lt;--- oops there&apos;s a memory leak, I should have called delete[] pBuffer;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The most important point is that heap and stack are generic terms for ways in which memory can be allocated.  They can be implemented in many different ways, and the terms apply to the basic concepts.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;In a stack of items, items sit one on top of the other in the order they were placed there, and you can only remove the top one (without toppling the whole thing over).&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/ZLzMV.jpg&quot; alt=&quot;Stack like a stack of papers&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;The simplicity of a stack is that you do not need to maintain a table containing a record of each section of allocated memory; the only state information you need is a single pointer to the end of the stack.  To allocate and de-allocate, you just increment and decrement that single pointer.  Note: a stack can sometimes be implemented to start at the top of a section of memory and extend downwards rather than growing upwards.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In a heap, there is no particular order to the way items are placed.  You can reach in and remove items in any order because there is no clear &apos;top&apos; item.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/kINqo.jpg&quot; alt=&quot;Heap like a heap of licorice allsorts&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Heap allocation requires maintaining a full record of what memory is allocated and what isn&apos;t, as well as some overhead maintenance to reduce fragmentation, find contiguous memory segments big enough to fit the requested size, and so on.  Memory can be deallocated at any time leaving free space.  Sometimes a memory allocator will perform maintenance tasks such as defragmenting memory by moving allocated memory around, or garbage collecting - identifying at runtime when memory is no longer in scope and deallocating it. &lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;These images should do a fairly good job of describing the two ways of allocating and freeing memory in a stack and a heap.  Yum!&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;To what extent are they controlled by the OS or language runtime?&lt;/p&gt;\n\n&lt;p&gt;As mentioned, heap and stack are general terms, and can be implemented in many ways.  Computer programs typically have a stack called a &lt;a href=&quot;http://en.wikipedia.org/wiki/Call_stack&quot; rel=&quot;noreferrer&quot;&gt;call stack&lt;/a&gt; which stores information relevant to the current function such as a pointer to whichever function it was called from, and any local variables.  Because functions call other functions and then return, the stack grows and shrinks to hold information from the functions further down the call stack.  A program doesn&apos;t really have runtime control over it; it&apos;s determined by the programming language, OS and even the system architecture.&lt;/p&gt;\n\n&lt;p&gt;A heap is a general term used for any memory that is allocated dynamically and randomly; i.e. out of order.  The memory is typically allocated by the OS, with the application calling API functions to do this allocation.  There is a fair bit of overhead required in managing dynamically allocated memory, which is usually handled by the runtime code of the programming language or environment used.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;What is their scope?&lt;/p&gt;\n\n&lt;p&gt;The call stack is such a low level concept that it doesn&apos;t relate to &apos;scope&apos; in the sense of programming.  If you disassemble some code you&apos;ll see relative pointer style references to portions of the stack, but as far as a higher level language is concerned, the language imposes its own rules of scope.  One important aspect of a stack, however, is that once a function returns, anything local to that function is immediately freed from the stack.  That works the way you&apos;d expect it to work given how your programming languages work.  In a heap, it&apos;s also difficult to define.  The scope is whatever is exposed by the OS, but your programming language probably adds its rules about what a &quot;scope&quot; is in your application.  The processor architecture and the OS use virtual addressing, which the processor translates to physical addresses and there are page faults, etc.  They keep track of what pages belong to which applications.  You never really need to worry about this, though, because you just use whatever method your programming language uses to allocate and free memory, and check for errors (if the allocation/freeing fails for any reason).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;What determines the size of each of them?&lt;/p&gt;\n\n&lt;p&gt;Again, it depends on the language, compiler, operating system and architecture.  A stack is usually pre-allocated, because by definition it must be contiguous memory.  The language compiler or the OS determine its size.  You don&apos;t store huge chunks of data on the stack, so it&apos;ll be big enough that it should never be fully used, except in cases of unwanted endless recursion (hence, &quot;stack overflow&quot;) or other unusual programming decisions.&lt;/p&gt;\n\n&lt;p&gt;A heap is a general term for anything that can be dynamically allocated.  Depending on which way you look at it, it is constantly changing size.  In modern processors and operating systems the exact way it works is very abstracted anyway, so you don&apos;t normally need to worry much about how it works deep down, except that (in languages where it lets you) you mustn&apos;t use memory that you haven&apos;t allocated yet or memory that you have freed.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;What makes one faster?&lt;/p&gt;\n\n&lt;p&gt;The stack is faster because all free memory is always contiguous.  No list needs to be maintained of all the segments of free memory, just a single pointer to the current top of the stack.  Compilers usually store this pointer in a special, fast &lt;a href=&quot;http://en.wikipedia.org/wiki/Stack_register&quot; rel=&quot;noreferrer&quot;&gt;register&lt;/a&gt; for this purpose.  What&apos;s more, subsequent operations on a stack are usually concentrated within very nearby areas of memory, which at a very low level is good for optimization by the processor on-die caches.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;(I have moved this answer from another question that was more or less a dupe of this one.)&lt;/p&gt;\n&lt;p&gt;The answer to your question is implementation specific and may vary across compilers and processor architectures. However, here is a simplified explanation.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Both the stack and the heap are memory areas allocated from the underlying operating system (often virtual memory that is mapped to physical memory on demand).&lt;/li&gt;\n&lt;li&gt;In a multi-threaded environment each thread will have its own completely independent stack but they will share the heap. Concurrent access has to be controlled on the heap and is not possible on the stack.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;The heap&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;The heap contains a linked list of used and free blocks. New allocations on the heap (by &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;malloc&lt;/code&gt;) are satisfied by creating a suitable block from one of the free blocks. This requires updating the list of blocks on the heap. This &lt;em&gt;meta information&lt;/em&gt; about the blocks on the heap is also stored on the heap often in a small area just in front of every block.&lt;/li&gt;\n&lt;li&gt;As the heap grows new blocks are often allocated from lower addresses towards higher addresses. Thus you can think of the heap as a &lt;em&gt;heap&lt;/em&gt; of memory blocks that grows in size as memory is allocated. If the heap is too small for an allocation the size can often be increased by acquiring more memory from the underlying operating system.&lt;/li&gt;\n&lt;li&gt;Allocating and deallocating many small blocks may leave the heap in a state where there are a lot of small free blocks interspersed between the used blocks. A request to allocate a large block may fail because none of the free blocks are large enough to satisfy the allocation request even though the combined size of the free blocks may be large enough. This is called &lt;em&gt;heap fragmentation&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;When a used block that is adjacent to a free block is deallocated the new free block may be merged with the adjacent free block to create a larger free block effectively reducing the fragmentation of the heap.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/0Obi0.png&quot; alt=&quot;The heap&quot;&gt;&lt;/p&gt;\n&lt;h2&gt;The stack&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;The stack often works in close tandem with a special register on the CPU named the &lt;em&gt;stack pointer&lt;/em&gt;. Initially the stack pointer points to the top of the stack (the highest address on the stack).&lt;/li&gt;\n&lt;li&gt;The CPU has special instructions for &lt;em&gt;pushing&lt;/em&gt; values onto the stack and &lt;em&gt;popping&lt;/em&gt; them off the stack. Each &lt;em&gt;push&lt;/em&gt; stores the value at the current location of the stack pointer and decreases the stack pointer. A &lt;em&gt;pop&lt;/em&gt; retrieves the value pointed to by the stack pointer and then increases the stack pointer (don&apos;t be confused by the fact that &lt;em&gt;adding&lt;/em&gt; a value to the stack &lt;em&gt;decreases&lt;/em&gt; the stack pointer and &lt;em&gt;removing&lt;/em&gt; a value &lt;em&gt;increases&lt;/em&gt; it. Remember that the stack grows to the bottom). The values stored and retrieved are the values of the CPU registers.&lt;/li&gt;\n&lt;li&gt;If a function has parameters, these are pushed onto the stack before the call to the function. The code in the function is then able to navigate up the stack from the current stack pointer to locate these values.&lt;/li&gt;\n&lt;li&gt;When a function is called the CPU uses special instructions that push the current &lt;em&gt;instruction pointer&lt;/em&gt; onto the stack, i.e. the address of the code executing on the stack. The CPU then jumps to the function by setting the instruction pointer to the address of the function called. Later, when the function returns, the old instruction pointer is popped off the stack and execution resumes at the code just after the call to the function.&lt;/li&gt;\n&lt;li&gt;When a function is entered, the stack pointer is decreased to allocate more space on the stack for local (automatic) variables. If the function has one local 32 bit variable four bytes are set aside on the stack. When the function returns, the stack pointer is moved back to free the allocated area.&lt;/li&gt;\n&lt;li&gt;Nesting function calls work like a charm. Each new call will allocate function parameters, the return address and space for local variables and these &lt;em&gt;activation records&lt;/em&gt; can be stacked for nested calls and will unwind in the correct way when the functions return.&lt;/li&gt;\n&lt;li&gt;As the stack is a limited block of memory, you can cause a &lt;em&gt;stack overflow&lt;/em&gt; by calling too many nested functions and/or allocating too much space for local variables. Often the memory area used for the stack is set up in such a way that writing below the bottom (the lowest address) of the stack will trigger a trap or exception in the CPU. This exceptional condition can then be caught by the runtime and converted into some kind of stack overflow exception.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/9UshP.png&quot; alt=&quot;The stack&quot;&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Can a function be allocated on the heap instead of a stack?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;No, activation records for functions (i.e. local or automatic variables) are allocated on the stack that is used not only to store these variables, but also to keep track of nested function calls.&lt;/p&gt;\n&lt;p&gt;How the heap is managed is really up to the runtime environment. C uses &lt;code&gt;malloc&lt;/code&gt; and C++ uses &lt;code&gt;new&lt;/code&gt;, but many other languages have garbage collection.&lt;/p&gt;\n&lt;p&gt;However, the stack is a more low-level feature closely tied to the processor architecture. Growing the heap when there is not enough space isn&apos;t too hard since it can be implemented in the library call that handles the heap. However, growing the stack is often impossible as the stack overflow only is discovered when it is too late; and shutting down the thread of execution is the only viable option.&lt;/p&gt;\n    ","\n&lt;p&gt;In the following C# code&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Method1&lt;/span&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    class1 cls1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; class1();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here&apos;s how the memory is managed&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/NS0k7.jpg&quot; alt=&quot;Picture of variables on the stack&quot;&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;Local Variables&lt;/code&gt; that only need to last as long as the function invocation go in the stack. The heap is used for variables whose lifetime we don&apos;t really know up front but we expect them to last a while. In most languages it&apos;s critical that we know at compile time how large a variable is if we want to store it on the stack.&lt;/p&gt;\n&lt;p&gt;Objects (which vary in size as we update them) go on the heap because we don&apos;t know at creation time how long they are going to last. In many languages the heap is garbage collected to find objects (such as the cls1 object) that no longer have any references.&lt;/p&gt;\n&lt;p&gt;In Java, most objects go directly into the heap. In languages like C / C++, structs and classes can often remain on the stack when you&apos;re not dealing with pointers.&lt;/p&gt;\n&lt;p&gt;More information can be found here:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20200216082556/http://timmurphy.org/2010/08/11/the-difference-between-stack-and-heap-memory-allocation/&quot; rel=&quot;nofollow noreferrer&quot;&gt;The difference between stack and heap memory allocation «  timmurphy.org&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;and here:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://root.cern.ch/root/htmldoc/guides/users-guide/ALittleC++.html#creating-objects-on-the-stack-and-heap&quot; rel=&quot;nofollow noreferrer&quot;&gt;Creating Objects on the Stack and Heap&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This article is the source of picture above: &lt;a href=&quot;https://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-heap-value-types#Stack%20and%20Heap&quot; rel=&quot;nofollow noreferrer&quot;&gt;Six important .NET concepts: Stack, heap, value types, reference types, boxing, and unboxing - CodeProject&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;but be aware it may contain some inaccuracies.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;The Stack&lt;/strong&gt;\nWhen you call a function the arguments to that function plus some other overhead is put on the stack. Some info (such as where to go on return) is also stored there.\nWhen you declare a variable inside your function, that variable is also allocated on the stack. &lt;/p&gt;\n\n&lt;p&gt;Deallocating the stack is pretty simple because you always deallocate in the reverse order in which you allocate. Stack stuff is added as you enter functions, the corresponding data is removed as you exit them. This means that you tend to stay within a small region of the stack unless you call lots of functions that call lots of other functions (or create a recursive solution).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The Heap&lt;/strong&gt;\nThe heap is a generic name for where you put the data that you create on the fly. If you don&apos;t know how many spaceships your program is going to create, you are likely to use the new (or malloc or equivalent) operator to create each spaceship. This allocation is going to stick around for a while, so it is likely we will free things in a different order than we created them. &lt;/p&gt;\n\n&lt;p&gt;Thus, the heap is far more complex, because there end up being regions of memory that are unused interleaved with chunks that are - memory gets fragmented. Finding free memory of the size you need is a difficult problem. This is why the heap should be avoided (though it is still often used).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;\nImplementation of both the stack and heap is usually down to the runtime / OS. Often games and other applications that are performance critical create their own memory solutions that grab a large chunk of memory from the heap and then dish it out internally to avoid relying on the OS for memory. &lt;/p&gt;\n\n&lt;p&gt;This is only practical if your memory usage is quite different from the norm - i.e for games where you load a level in one huge operation and can chuck the whole lot away in another huge operation.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Physical location in memory&lt;/strong&gt;\nThis is less relevant than you think because of a technology called &lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_memory&quot; rel=&quot;noreferrer&quot;&gt;Virtual Memory&lt;/a&gt; which makes your program think that you have access to a certain address where the physical data is somewhere else (even on the hard disc!). The addresses you get for the stack are in increasing order as your call tree gets deeper. The addresses for the heap are un-predictable (i.e implimentation specific) and frankly not important.&lt;/p&gt;\n    ","\n&lt;p&gt;Other answers just avoid explaining what static allocation means. So I will explain the three main forms of allocation and how they usually relate to the heap, stack, and data segment below. I also will show some examples in both C/C++ and Python to help people understand.&lt;/p&gt;\n&lt;p&gt;&quot;Static&quot; (AKA statically allocated) variables are not allocated on the stack. Do not assume so - many people do only because &quot;static&quot; sounds a lot like &quot;stack&quot;. They actually exist in neither the stack nor the heap. They are part of what&apos;s called the &lt;a href=&quot;http://en.wikipedia.org/wiki/Data_segment&quot; rel=&quot;noreferrer&quot;&gt;data segment&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;However, it is generally better to consider &quot;&lt;strong&gt;scope&lt;/strong&gt;&quot; and &quot;&lt;strong&gt;lifetime&lt;/strong&gt;&quot; rather than &quot;stack&quot; and &quot;heap&quot;.&lt;/p&gt;\n&lt;p&gt;Scope refers to what parts of the code can access a variable. Generally we think of &lt;strong&gt;local scope&lt;/strong&gt; (can only be accessed by the current function) versus &lt;strong&gt;global scope&lt;/strong&gt; (can be accessed anywhere) although scope can get much more complex.&lt;/p&gt;\n&lt;p&gt;Lifetime refers to when a variable is allocated and deallocated during program execution. Usually we think of &lt;strong&gt;static allocation&lt;/strong&gt; (variable will persist through the entire duration of the program, making it useful for storing the same information across several function calls) versus &lt;strong&gt;automatic allocation&lt;/strong&gt; (variable only persists during a single call to a function, making it useful for storing information that is only used during your function and can be discarded once you are done) versus &lt;strong&gt;dynamic allocation&lt;/strong&gt; (variables whose duration is defined at runtime, instead of compile time like static or automatic).&lt;/p&gt;\n&lt;p&gt;Although most compilers and interpreters implement this behavior similarly in terms of using stacks, heaps, etc, a compiler may sometimes break these conventions if it wants as long as behavior is correct. For instance, due to optimization a local variable may only exist in a register or be removed entirely, even though most local variables exist in the stack. As has been pointed out in a few comments, you are free to implement a compiler that doesn&apos;t even use a stack or a heap, but instead some other storage mechanisms (rarely done, since stacks and heaps are great for this).&lt;/p&gt;\n&lt;p&gt;I will provide some simple annotated C code to illustrate all of this. The best way to learn is to run a program under a debugger and watch the behavior. If you prefer to read python, skip to the end of the answer :)&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Statically allocated in the data segment when the program/DLL is first loaded&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Deallocated when the program/DLL exits&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// scope - can be accessed from anywhere in the code&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; someGlobalVariable;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Statically allocated in the data segment when the program is first loaded&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Deallocated when the program/DLL exits&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// scope - can be accessed from anywhere in this particular code file&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; someStaticVariable;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;someArgument&quot; is allocated on the stack each time MyFunction is called&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;someArgument&quot; is deallocated when MyFunction returns&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// scope - can be accessed only within MyFunction()&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyFunction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; someArgument)&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Statically allocated in the data segment when the program is first loaded&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Deallocated when the program/DLL exits&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// scope - can be accessed only within MyFunction()&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; someLocalStaticVariable;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Allocated on the stack each time MyFunction is called&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Deallocated when MyFunction returns&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// scope - can be accessed only within MyFunction()&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; someLocalVariable;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// A *pointer* is allocated on the stack each time MyFunction is called&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This pointer is deallocated when MyFunction returns&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// scope - the pointer can be accessed only within MyFunction()&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* someDynamicVariable;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This line causes space for an integer to be allocated in the heap&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// when this line is executed. Note this is not at the beginning of&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the call to MyFunction(), like the automatic variables&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// scope - only code within MyFunction() can access this space&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// *through this particular variable*.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// However, if you pass the address somewhere else, that code&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// can access it too&lt;/span&gt;\n    someDynamicVariable = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;;\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This line deallocates the space for the integer in the heap.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If we did not write it, the memory would be &quot;leaked&quot;.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Note a fundamental difference between the stack and heap&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the heap must be managed. The stack is managed for us.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; someDynamicVariable;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// In other cases, instead of deallocating this heap space you&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// might store the address somewhere more permanent to use later.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some languages even take care of deallocation for you... but&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// always it needs to be taken care of at runtime by some mechanism.&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// When the function returns, someArgument, someLocalVariable&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// and the pointer someDynamicVariable are deallocated.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// The space pointed to by someDynamicVariable was already&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// deallocated prior to returning.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Note that someGlobalVariable, someStaticVariable and&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// someLocalStaticVariable continue to exist, and are not&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// deallocated until the program exits.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A particularly poignant example of why it&apos;s important to distinguish between lifetime and scope is that a variable can have local scope but static lifetime - for instance, &quot;someLocalStaticVariable&quot; in the code sample above. Such variables can make our common but informal naming habits very confusing. For instance when we say &quot;&lt;em&gt;local&lt;/em&gt;&quot; we usually mean &quot;&lt;em&gt;locally scoped automatically allocated variable&lt;/em&gt;&quot; and when we say global we usually mean &quot;&lt;em&gt;globally scoped statically allocated variable&lt;/em&gt;&quot;. Unfortunately when it comes to things like &quot;&lt;em&gt;file scoped statically allocated variables&lt;/em&gt;&quot; many people just say... &quot;&lt;em&gt;huh???&lt;/em&gt;&quot;.&lt;/p&gt;\n&lt;p&gt;Some of the syntax choices in C/C++ exacerbate this problem - for instance many people think global variables are not &quot;static&quot; because of the syntax shown below.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; var1; &lt;span class=&quot;hljs-comment&quot;&gt;// Has global scope and static allocation&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; var2; &lt;span class=&quot;hljs-comment&quot;&gt;// Has file scope and static allocation&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that putting the keyword &quot;static&quot; in the declaration above prevents var2 from having global scope. Nevertheless, the global var1 has static allocation. This is not intuitive! For this reason, I try to never use the word &quot;static&quot; when describing scope, and instead say something like &quot;file&quot; or &quot;file limited&quot; scope. However many people use the phrase &quot;static&quot; or &quot;static scope&quot; to describe a variable that can only be accessed from one code file. In the context of lifetime, &quot;static&quot; &lt;em&gt;always&lt;/em&gt; means the variable is allocated at program start and deallocated when program exits.&lt;/p&gt;\n&lt;p&gt;Some people think of these concepts as C/C++ specific. They are not. For instance, the Python sample below illustrates all three types of allocation (there are some subtle differences possible in interpreted languages that I won&apos;t get into here).&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Animal&lt;/span&gt;:\n    _FavoriteFood = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Undefined&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# _FavoriteFood is statically allocated&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;PetAnimal&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        curTime = datetime.time(datetime.now()) &lt;span class=&quot;hljs-comment&quot;&gt;# curTime is automatically allocatedion&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Thank you for petting me. But it&apos;s &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(curTime) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, you should feed me. My favorite food is &quot;&lt;/span&gt; + self._FavoriteFood)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Cat&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Animal&lt;/span&gt;):\n    _FavoriteFood = &lt;span class=&quot;hljs-string&quot;&gt;&apos;tuna&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# Note since we override, Cat class has its own statically allocated _FavoriteFood variable, different from Animal&apos;s&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Animal&lt;/span&gt;):\n    _FavoriteFood = &lt;span class=&quot;hljs-string&quot;&gt;&apos;steak&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# Likewise, the Dog class gets its own static variable. Important to note - this one static variable is shared among all instances of Dog, hence it is not dynamic!&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    whiskers = Cat() &lt;span class=&quot;hljs-comment&quot;&gt;# Dynamically allocated&lt;/span&gt;\n    fido = Dog() &lt;span class=&quot;hljs-comment&quot;&gt;# Dynamically allocated&lt;/span&gt;\n    rinTinTin = Dog() &lt;span class=&quot;hljs-comment&quot;&gt;# Dynamically allocated&lt;/span&gt;\n\n    whiskers.PetAnimal()\n    fido.PetAnimal()\n    rinTinTin.PetAnimal()\n\n    Dog._FavoriteFood = &lt;span class=&quot;hljs-string&quot;&gt;&apos;milkbones&apos;&lt;/span&gt;\n    whiskers.PetAnimal()\n    fido.PetAnimal()\n    rinTinTin.PetAnimal()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Output is:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Thank you for petting me. But it&apos;s 13:05:02.255000, you should feed me. My favorite food is tuna&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Thank you for petting me. But it&apos;s 13:05:02.255000, you should feed me. My favorite food is steak&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Thank you for petting me. But it&apos;s 13:05:02.255000, you should feed me. My favorite food is steak&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Thank you for petting me. But it&apos;s 13:05:02.255000, you should feed me. My favorite food is tuna&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Thank you for petting me. But it&apos;s 13:05:02.255000, you should feed me. My favorite food is milkbones&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Thank you for petting me. But it&apos;s 13:05:02.256000, you should feed me. My favorite food is milkbones&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Others have answered the broad strokes pretty well, so I&apos;ll throw in a few details.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Stack and heap need not be singular. A common situation in which you have more than one stack is if you have more than one thread in a process.  In this case each thread has its own stack. You can also have more than one heap, for example some DLL configurations can result in different DLLs allocating from different heaps, which is why it&apos;s generally a bad idea to release memory allocated by a different library.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In C you can get the benefit of variable length allocation through the use of &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?alloca&quot; rel=&quot;noreferrer&quot;&gt;alloca&lt;/a&gt;, which allocates on the stack, as opposed to alloc, which allocates on the heap. This memory won&apos;t survive your return statement, but it&apos;s useful for a scratch buffer.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Making a huge temporary buffer on Windows that you don&apos;t use much of is not free. This is because the compiler will generate a stack probe loop that is called every time your function is entered to make sure the stack exists (because Windows uses a single guard page at the end of your stack to detect when it needs to grow the stack. If you access memory more than one page off the end of the stack you will crash). Example:&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myfunction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; big[&lt;span class=&quot;hljs-number&quot;&gt;10000000&lt;/span&gt;];\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Do something that only uses for first 1K of big 99% of the time.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Others have directly answered your question, but when trying to understand the stack and the heap, I think it is helpful to consider the memory layout of a traditional UNIX process (without threads and &lt;code&gt;mmap()&lt;/code&gt;-based allocators). The &lt;a href=&quot;https://www.memorymanagement.org/glossary/b.html#term-brk&quot; rel=&quot;nofollow noreferrer&quot;&gt;Memory Management Glossary&lt;/a&gt; web page has a diagram of this memory layout.&lt;/p&gt;\n&lt;p&gt;The stack and heap are traditionally located at opposite ends of the process&apos;s virtual address space. The stack grows automatically when accessed, up to a size set by the kernel (which can be adjusted with &lt;code&gt;setrlimit(RLIMIT_STACK, ...)&lt;/code&gt;). The heap grows when the memory allocator invokes the &lt;code&gt;brk()&lt;/code&gt; or &lt;code&gt;sbrk()&lt;/code&gt; system call, mapping more pages of physical memory into the process&apos;s virtual address space.&lt;/p&gt;\n&lt;p&gt;In systems without virtual memory, such as some embedded systems, the same basic layout often applies, except the stack and heap are fixed in size. However, in other embedded systems (such as those based on Microchip PIC microcontrollers), the program stack is a separate block of memory that is not addressable by data movement instructions, and can only be modified or read indirectly through program flow instructions (call, return, etc.). Other architectures, such as Intel Itanium processors, have &lt;a href=&quot;https://devblogs.microsoft.com/oldnewthing/20050421-28/?p=35833&quot; rel=&quot;nofollow noreferrer&quot;&gt;multiple stacks&lt;/a&gt;. In this sense, the stack is an element of the CPU architecture.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;What is a stack?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;A stack is a pile of objects, typically one that is neatly arranged.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/GTa97.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/GTa97.jpg&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Stacks in computing architectures are regions of memory where data is added or removed in a last-in-first-out manner. &lt;br&gt;\nIn a multi-threaded application, each thread will have its own stack.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;What is a heap?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;A heap is an untidy collection of things piled up haphazardly.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/rz43z.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/rz43z.jpg&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In computing architectures the heap is an area of dynamically-allocated memory that is managed automatically by the operating system or the memory manager library. &lt;br&gt;\nMemory on the heap is allocated, deallocated, and resized regularly during program execution, and this can lead to a problem called fragmentation. &lt;br&gt;\nFragmentation occurs when memory objects are allocated with small spaces in between that are too small to hold additional memory objects. &lt;br&gt;\nThe net result is a percentage of the heap space that is not usable for further memory allocations.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Both together&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In a multi-threaded application, each thread will have its own stack. But, all the different threads will share the heap. &lt;br&gt;\nBecause the different threads share the heap in a multi-threaded application, this also means that there has to be some coordination between the threads so that they dont try to access and manipulate the same piece(s) of memory in the heap at the same time.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Which is faster  the stack or the heap? And why?&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The stack is much faster than the heap. &lt;br&gt;\nThis is because of the way that memory is allocated on the stack. &lt;br&gt;\nAllocating memory on the stack is as simple as moving the stack pointer up.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;For people new to programming, its probably a good idea to use the stack since its easier. &lt;br&gt;\nBecause the stack is small, you would want to use it when you know exactly how much memory you will need for your data, or if you know the size of your data is very small. &lt;br&gt;\nIts better to use the heap when you know that you will need a lot of memory for your data, or you just are not sure how much memory you will need (like with a dynamic array).&lt;/p&gt;\n&lt;h3&gt;Java Memory Model&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/yZK6t.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/yZK6t.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The stack is the area of memory where local variables (including method parameters) are stored. When it comes to object variables, these are merely references (pointers) to the actual objects on the heap.&lt;br&gt;\nEvery time an object is instantiated, a chunk of heap memory is set aside to hold the data (state) of that object. Since objects can contain other objects, some of this data can in fact hold references to those nested objects.&lt;/p&gt;\n    ","\n&lt;p&gt;The stack is a portion of memory that can be manipulated via several key assembly language instructions, such as &apos;pop&apos; (remove and return a value from the stack) and &apos;push&apos; (push a value to the stack), but also call (call a subroutine - this pushes the address to return to the stack) and return (return from a subroutine - this pops the address off of the stack and jumps to it).  It&apos;s the region of memory below the stack pointer register, which can be set as needed.  The stack is also used for passing arguments to subroutines, and also for preserving the values in registers before calling subroutines.&lt;/p&gt;\n\n&lt;p&gt;The heap is a portion of memory that is given to an application by the operating system, typically through a syscall like malloc.  On modern OSes this memory is a set of pages that only the calling process has access to.&lt;/p&gt;\n\n&lt;p&gt;The size of the stack is determined at runtime, and generally does not grow after the program launches.  In a C program, the stack needs to be large enough to hold every variable declared within each function.  The heap will grow dynamically as needed, but the OS is ultimately making the call (it will often grow the heap by more than the value requested by malloc, so that at least some future mallocs won&apos;t need to go back to the kernel to get more memory.  This behavior is often customizable)&lt;/p&gt;\n\n&lt;p&gt;Because you&apos;ve allocated the stack before launching the program, you never need to malloc before you can use the stack, so that&apos;s a slight advantage there.  In practice, it&apos;s very hard to predict what will be fast and what will be slow in modern operating systems that have virtual memory subsystems, because how the pages are implemented and where they are stored is an implementation detail.  &lt;/p&gt;\n    ","\n&lt;p&gt;I think many other people have given you mostly correct answers on this matter.&lt;/p&gt;\n\n&lt;p&gt;One detail that has been missed, however, is that the &quot;heap&quot; should in fact probably be called the &quot;free store&quot;.  The reason for this distinction is that the original free store was implemented with a data structure known as a &quot;binomial heap.&quot;  For that reason, allocating from early implementations of malloc()/free() was allocation from a heap.  However, in this modern day, most free stores are implemented with very elaborate data structures that are not binomial heaps.&lt;/p&gt;\n    ","\n&lt;p&gt;You can do some interesting things with the stack.  For instance, you have functions like &lt;a href=&quot;http://everything2.com/title/alloca%2528%2529&quot; rel=&quot;noreferrer&quot;&gt;alloca&lt;/a&gt; (assuming you can get past the copious warnings concerning its use), which is a form of malloc that specifically uses the stack, not the heap, for memory.&lt;/p&gt;\n\n&lt;p&gt;That said, stack-based memory errors are some of the worst I&apos;ve experienced.  If you use heap memory, and you overstep the bounds of your allocated block, you have a decent chance of triggering a segment fault.  (Not 100%: your block may be incidentally contiguous with another that you have previously allocated.)  But since variables created on the stack are always contiguous with each other, writing out of bounds can change the value of another variable.  I have learned that whenever I feel that my program has stopped obeying the laws of logic, it is probably buffer overflow.&lt;/p&gt;\n    ","\n&lt;p&gt;Simply, the stack is where local variables get created. Also, every time you call a subroutine the program counter (pointer to the next machine instruction) and any important registers, and sometimes the parameters get pushed on the stack. Then any local variables inside the subroutine are pushed onto the stack (and used from there). When the subroutine finishes, that stuff all gets popped back off the stack. The PC and register data gets and put back where it was as it is popped, so your program can go on its merry way.&lt;/p&gt;\n\n&lt;p&gt;The heap is the area of memory dynamic memory allocations are made out of (explicit &quot;new&quot; or &quot;allocate&quot; calls). It is a special data structure that can keep track of blocks of memory of varying sizes and their allocation status.&lt;/p&gt;\n\n&lt;p&gt;In &quot;classic&quot; systems RAM was laid out such that the stack pointer started out at the bottom of memory, the heap pointer started out at the top, and they grew towards each other. If they overlap, you are out of RAM. That doesn&apos;t work with modern multi-threaded OSes though. Every thread has to have its own stack, and those can get created dynamicly.&lt;/p&gt;\n    ","\n&lt;p&gt;From WikiAnwser.&lt;/p&gt;\n\n&lt;h3&gt;Stack&lt;/h3&gt;\n\n&lt;p&gt;When a function or a method calls another function which in turns calls another function, etc., the execution of all those functions remains suspended until the very last function returns its value.&lt;/p&gt;\n\n&lt;p&gt;This chain of suspended function calls is the stack, because elements in the stack (function calls) depend on each other.&lt;/p&gt;\n\n&lt;p&gt;The stack is important to consider in exception handling and thread executions.&lt;/p&gt;\n\n&lt;h3&gt;Heap&lt;/h3&gt;\n\n&lt;p&gt;The heap is simply the memory used by programs to store variables.\nElement of the heap (variables) have no dependencies with each other and can always be accessed randomly at any time.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Very fast access&lt;/li&gt;\n&lt;li&gt;Don&apos;t have to explicitly de-allocate variables&lt;/li&gt;\n&lt;li&gt;Space is managed efficiently by CPU, memory will not become fragmented&lt;/li&gt;\n&lt;li&gt;Local variables only&lt;/li&gt;\n&lt;li&gt;Limit on stack size (OS-dependent)&lt;/li&gt;\n&lt;li&gt;Variables cannot be resized&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Heap&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Variables can be accessed globally&lt;/li&gt;\n&lt;li&gt;No limit on memory size&lt;/li&gt;\n&lt;li&gt;(Relatively) slower access&lt;/li&gt;\n&lt;li&gt;No guaranteed efficient use of space, memory may become fragmented over time as blocks of memory are allocated, then freed&lt;/li&gt;\n&lt;li&gt;You must manage memory (you&apos;re in charge of allocating and freeing variables)&lt;/li&gt;\n&lt;li&gt;Variables can be resized using realloc()&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h2&gt;In Short&lt;/h2&gt;\n\n&lt;p&gt;A stack is used for static memory allocation and a heap for dynamic memory allocation, both stored in the computer&apos;s RAM.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;In Detail&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;The Stack&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The stack is a &quot;LIFO&quot; (last in, first out) data structure, that is managed and optimized by the CPU quite closely. Every time a function declares a new variable, it is &quot;pushed&quot; onto the stack. Then every time a function exits, all of the variables pushed onto the stack by that function, are freed (that is to say, they are deleted). Once a stack variable is freed, that region of memory becomes available for other stack variables.&lt;/p&gt;\n\n&lt;p&gt;The advantage of using the stack to store variables, is that memory is managed for you. You don&apos;t have to allocate memory by hand, or free it once you don&apos;t need it any more. What&apos;s more, because the CPU organizes stack memory so efficiently, reading from and writing to stack variables is very fast.&lt;/p&gt;\n\n&lt;p&gt;More can be found &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_(abstract_data_type)&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;The Heap&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The heap is a region of your computer&apos;s memory that is not managed automatically for you, and is not as tightly managed by the CPU. It is a more free-floating region of memory (and is larger). To allocate memory on the heap, you must use malloc() or calloc(), which are built-in C functions. Once you have allocated memory on the heap, you are responsible for using free() to deallocate that memory once you don&apos;t need it any more.&lt;/p&gt;\n\n&lt;p&gt;If you fail to do this, your program will have what is known as a memory leak. That is, memory on the heap will still be set aside (and won&apos;t be available to other processes). As we will see in the debugging section, there is a tool called &lt;a href=&quot;http://en.wikipedia.org/wiki/Valgrind&quot; rel=&quot;noreferrer&quot;&gt;Valgrind&lt;/a&gt; that can help you detect memory leaks.&lt;/p&gt;\n\n&lt;p&gt;Unlike the stack, the heap does not have size restrictions on variable size (apart from the obvious physical limitations of your computer). Heap memory is slightly slower to be read from and written to, because one has to use pointers to access memory on the heap. We will talk about pointers shortly.&lt;/p&gt;\n\n&lt;p&gt;Unlike the stack, variables created on the heap are accessible by any function, anywhere in your program. Heap variables are essentially global in scope.&lt;/p&gt;\n\n&lt;p&gt;More can be found &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_management&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Variables allocated on the stack are stored directly to the memory and access to this memory is very fast, and its allocation is dealt with when the program is compiled. When a function or a method calls another function which in turns calls another function, etc., the execution of all those functions remains suspended until the very last function returns its value. The stack is always reserved in a LIFO order, the most recently reserved block is always the next block to be freed. This makes it really simple to keep track of the stack, freeing a block from the stack is nothing more than adjusting one pointer.&lt;/p&gt;\n\n&lt;p&gt;Variables allocated on the heap have their memory allocated at run time and accessing this memory is a bit slower, but the heap size is only limited by the size of virtual memory. Elements of the heap have no dependencies with each other and can always be accessed randomly at any time. You can allocate a block at any time and free it at any time. This makes it much more complex to keep track of which parts of the heap are allocated or free at any given time.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/KdBPf.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/KdBPf.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You can use the stack if you know exactly how much data you need to allocate before compile time, and it is not too big. You can use the heap if you don&apos;t know exactly how much data you will need at runtime or if you need to allocate a lot of data.&lt;/p&gt;\n\n&lt;p&gt;In a multi-threaded situation each thread will have its own completely independent stack, but they will share the heap. The stack is thread specific and the heap is application specific. The stack is important to consider in exception handling and thread executions.&lt;/p&gt;\n\n&lt;p&gt;Each thread gets a stack, while there&apos;s typically only one heap for the application (although it isn&apos;t uncommon to have multiple heaps for different types of allocation).&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/J0teH.gif&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/J0teH.gif&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;At run-time, if the application needs more heap, it can allocate memory from free memory and if the stack needs memory, it can allocate memory from free memory allocated memory for the application.&lt;/p&gt;\n\n&lt;p&gt;Even, more detail is given &lt;a href=&quot;http://net-informations.com/faq/net/stack-heap.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;http://gribblelab.org/CBootcamp/7_Memory_Stack_vs_Heap.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Now come to &lt;strong&gt;your question&apos;s answers&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;To what extent are they controlled by the OS or language runtime?&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The OS allocates the stack for each system-level thread when the thread is created. Typically the OS is called by the language runtime to allocate the heap for the application.&lt;/p&gt;\n\n&lt;p&gt;More can be found &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap/80113#80113&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;What is their scope?&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Already given in top.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;You can use the stack if you know exactly how much data you need to allocate before compile time, and it is not too big. You can use the heap if you don&apos;t know exactly how much data you will need at runtime or if you need to allocate a lot of data.&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;More can be found in &lt;a href=&quot;https://stackoverflow.com/questions/408670/stack-static-and-heap-in-c&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;What determines the size of each of them?&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The size of the stack is set by &lt;a href=&quot;https://en.wikipedia.org/wiki/Operating_system&quot; rel=&quot;noreferrer&quot;&gt;OS&lt;/a&gt; when a thread is created. The size of the heap is set on application startup, but it can grow as space is needed (the allocator requests more memory from the operating system).&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;What makes one faster?&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Stack allocation is much faster since all it really does is move the stack pointer. Using memory pools, you can get comparable performance out of heap allocation, but that comes with a slight added complexity and its own headaches.&lt;/p&gt;\n\n&lt;p&gt;Also, stack vs. heap is not only a performance consideration; it also tells you a lot about the expected lifetime of objects.&lt;/p&gt;\n\n&lt;p&gt;Details can be found from &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/161053/which-is-faster-stack-allocation-or-heap-allocation&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;OK,&lt;/strong&gt; simply and in short words, they mean &lt;strong&gt;ordered&lt;/strong&gt; and &lt;strong&gt;not ordered&lt;/strong&gt;...!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;: In stack items, things get on the top of each-other, means gonna be faster and more efficient to be processed!... &lt;/p&gt;\n\n&lt;p&gt;So there is always an index to point the specific item, also processing gonna be faster, there is relationship between the items as well!...&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Heap&lt;/strong&gt;: No order, processing gonna be slower and values are messed up together with no specific order or index... there are random and there is no relationship between them... so execution and usage time could be vary...&lt;/p&gt;\n\n&lt;p&gt;I also create the image below to show how they may look like:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/9c2VH.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/9c2VH.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;stack&lt;/strong&gt;, &lt;strong&gt;heap&lt;/strong&gt; and &lt;strong&gt;data&lt;/strong&gt; of each process in virtual memory:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://bayanbox.ir/view/581244719208138556/virtual-memory.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://bayanbox.ir/view/581244719208138556/virtual-memory.jpg&quot; alt=&quot;stack, heap and static data&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In the 1980s, UNIX propagated like bunnies with big companies rolling their own.\nExxon had one as did dozens of brand names lost to history.\nHow memory was laid out was at the discretion of the many implementors.&lt;/p&gt;\n\n&lt;p&gt;A typical C program was laid out flat in memory with\nan opportunity to increase by changing the brk() value.\nTypically, the HEAP was just below this brk value\nand increasing brk increased the amount of available heap.&lt;/p&gt;\n\n&lt;p&gt;The single STACK was typically an area below HEAP which was a tract of memory\ncontaining nothing of value until the top of the next fixed block of memory.\nThis next block was often CODE which could be overwritten by stack data\nin one of the famous hacks of its era.&lt;/p&gt;\n\n&lt;p&gt;One typical memory block was BSS (a block of zero values)\nwhich was accidentally not zeroed in one manufacturer&apos;s offering.\nAnother was DATA containing initialized values, including strings and numbers.\nA third was CODE containing CRT (C runtime), main, functions, and libraries.&lt;/p&gt;\n\n&lt;p&gt;The advent of virtual memory in UNIX changes many of the constraints.\nThere is no objective reason why these blocks need be contiguous,\nor fixed in size, or ordered a particular way now.\nOf course, before UNIX was Multics which didn&apos;t suffer from these constraints.\nHere is a schematic showing one of the memory layouts of that era.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/eeefv.png&quot; alt=&quot;A typical 1980s style UNIX C program memory layout&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A couple of cents: I think, it will be good to draw memory graphical and more simple:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/nlb7A.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/nlb7A.jpg&quot; alt=&quot;This is my vision of process memory construction with simplification for more easy understanding wht happening&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;\nArrows - show where grow stack and heap, process stack size have limit, defined in OS, thread stack size limits by parameters in thread create API usually. Heap usually limiting by process maximum virtual memory size, for 32 bit 2-4&amp;nbsp;GB for example.&lt;/p&gt;\n\n&lt;p&gt;So simple way: process heap is general for process and all threads inside, using for memory allocation in common case with something like &lt;strong&gt;malloc()&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Stack is quick memory for store in common case function return pointers and variables, processed as parameters in function call, local function variables.&lt;/p&gt;\n    ","\n&lt;p&gt;Since some answers went nitpicking, I&apos;m going to contribute my mite.&lt;/p&gt;\n\n&lt;p&gt;Surprisingly, no one has mentioned that multiple (i.e. not related to the number of running OS-level threads) call stacks are to be found not only in exotic languages (PostScript) or platforms (Intel Itanium), but also in &lt;a href=&quot;http://en.wikipedia.org/wiki/Fiber_(computer_science)&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;fibers&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Green_threads&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;green threads&lt;/em&gt;&lt;/a&gt; and some implementations of &lt;a href=&quot;http://en.wikipedia.org/wiki/Coroutine&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;coroutines&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Fibers, green threads and coroutines are in many ways similar, which leads to much confusion.  The difference between fibers and green threads is that the former use cooperative multitasking, while the latter may feature either cooperative or preemptive one (or even both). For the distinction between fibers and coroutines, see &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4024.pdf&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;In any case, the purpose of both fibers, green threads and coroutines is having multiple functions executing concurrently, but &lt;strong&gt;not&lt;/strong&gt; in parallel (see &lt;a href=&quot;https://stackoverflow.com/questions/1050222/concurrency-vs-parallelism-what-is-the-difference&quot;&gt;this SO question&lt;/a&gt; for the distinction) within a single OS-level thread, transferring control back and forth from one another in an organized fashion.&lt;/p&gt;\n\n&lt;p&gt;When using fibers, green threads or coroutines, you &lt;em&gt;usually&lt;/em&gt; have a separate stack per function. (Technically, not just a stack but a whole context of execution is per function. Most importantly, CPU registers.) For every thread there&apos;re as many stacks as there&apos;re concurrently running functions, and the thread is switching between executing each function according to the logic of your program. When a function runs to its end, its stack is destroyed. So, &lt;strong&gt;the number and lifetimes of stacks&lt;/strong&gt; are dynamic and &lt;strong&gt;are not determined by the number of OS-level threads!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Note that I said &quot;&lt;em&gt;usually&lt;/em&gt; have a separate stack per function&quot;. There&apos;re both &lt;em&gt;stackful&lt;/em&gt; and &lt;em&gt;stackless&lt;/em&gt; implementations of couroutines. Most notable stackful C++ implementations are &lt;a href=&quot;http://www.boost.org/doc/libs/1_53_0/libs/coroutine/doc/html/index.html&quot; rel=&quot;noreferrer&quot;&gt;Boost.Coroutine&lt;/a&gt; and &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dd492418.aspx&quot; rel=&quot;noreferrer&quot;&gt;Microsoft PPL&lt;/a&gt;&apos;s &lt;code&gt;async/await&lt;/code&gt;. (However, C++&apos;s &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4134.pdf&quot; rel=&quot;noreferrer&quot;&gt;resumable functions&lt;/a&gt; (a.k.a. &quot;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;&quot;), which were proposed to C++17, are likely to use stackless coroutines.)&lt;/p&gt;\n\n&lt;p&gt;Fibers proposal to the C++ standard library is forthcoming. Also, there&apos;re some third-party &lt;a href=&quot;https://stackoverflow.com/questions/1285714/lightweight-portable-c-fibers-mit-license&quot;&gt;libraries&lt;/a&gt;. Green threads are extremely popular in languages like Python and Ruby.&lt;/p&gt;\n    ","\n&lt;p&gt;I have something to share, although the major points are already covered.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Very fast access.&lt;/li&gt;\n&lt;li&gt;Stored in RAM.&lt;/li&gt;\n&lt;li&gt;Function calls are loaded here along with the local variables and function parameters passed.&lt;/li&gt;\n&lt;li&gt;Space is freed automatically when program goes out of a scope.&lt;/li&gt;\n&lt;li&gt;Stored in sequential memory.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Heap&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Slow access comparatively to Stack.&lt;/li&gt;\n&lt;li&gt;Stored in RAM.&lt;/li&gt;\n&lt;li&gt;Dynamically created variables are stored here, which later requires freeing the allocated memory after use.&lt;/li&gt;\n&lt;li&gt;Stored wherever memory allocation is done, accessed by pointer always.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Interesting note:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Should the function calls had been stored in heap, it would had resulted in 2 messy points:  \n\n&lt;ol&gt;\n&lt;li&gt;Due to sequential storage in stack, execution is faster. Storage in heap would have resulted in huge time consumption thus making the whole program execute slower.&lt;/li&gt;\n&lt;li&gt;If functions were stored in heap (messy storage pointed by pointer), there would have been no way to return to the caller address back (which stack gives due to sequential storage in memory).&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Wow! So many answers and I don&apos;t think one of them got it right...&lt;/p&gt;\n\n&lt;p&gt;1) Where and what are they (physically in a real computer&apos;s memory)?&lt;/p&gt;\n\n&lt;p&gt;The stack is memory that begins as the highest memory address allocated to your program image, and it then decrease in value from there. It is reserved for called function parameters and for all temporary variables used in functions.&lt;/p&gt;\n\n&lt;p&gt;There are two heaps: public and private.&lt;/p&gt;\n\n&lt;p&gt;The private heap begins on a 16-byte boundary (for 64-bit programs) or a 8-byte boundary (for 32-bit programs) after the last byte of code in your program, and then increases in value from there. It is also called the default heap.&lt;/p&gt;\n\n&lt;p&gt;If the private heap gets too large it will overlap the stack area, as will the stack overlap the heap if it gets too big. Because the stack starts at a higher address and works its way down to lower address, with proper hacking you can get make the stack so large that it will overrun the private heap area and overlap the code area. The trick then is to overlap enough of the code area that you can hook into the code. It&apos;s a little tricky to do and you risk a program crash, but it&apos;s easy and very effective.&lt;/p&gt;\n\n&lt;p&gt;The public heap resides in it&apos;s own memory space outside of your program image space. It is this memory that will be siphoned off onto the hard disk if memory resources get scarce.&lt;/p&gt;\n\n&lt;p&gt;2) To what extent are they controlled by the OS or language runtime?&lt;/p&gt;\n\n&lt;p&gt;The stack is controlled by the programmer, the private heap is managed by the OS, and the public heap is not controlled by anyone because it is an OS service -- you make requests and either they are granted or denied.&lt;/p&gt;\n\n&lt;p&gt;2b) What is their scope?&lt;/p&gt;\n\n&lt;p&gt;They are all global to the program, but their contents can be private, public, or global.&lt;/p&gt;\n\n&lt;p&gt;2c) What determines the size of each of them?&lt;/p&gt;\n\n&lt;p&gt;The size of the stack and the private heap are determined by your compiler runtime options. The public heap is initialized at runtime using a size parameter.&lt;/p&gt;\n\n&lt;p&gt;2d) What makes one faster?&lt;/p&gt;\n\n&lt;p&gt;They are not designed to be fast, they are designed to be useful. How the programmer utilizes them determines whether they are &quot;fast&quot; or &quot;slow&quot;&lt;/p&gt;\n\n&lt;p&gt;REF:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://norasandler.com/2019/02/18/Write-a-Compiler-10.html&quot; rel=&quot;noreferrer&quot;&gt;https://norasandler.com/2019/02/18/Write-a-Compiler-10.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-getprocessheap&quot; rel=&quot;noreferrer&quot;&gt;https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-getprocessheap&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-heapcreate&quot; rel=&quot;noreferrer&quot;&gt;https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-heapcreate&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A lot of answers are correct as concepts, but we must note that a stack is needed by the hardware (i.e. microprocessor) to allow calling subroutines (CALL in assembly language..). (OOP guys will call it &lt;em&gt;methods&lt;/em&gt;)&lt;/p&gt;\n\n&lt;p&gt;On the stack you save return addresses and call  push / ret  pop is managed directly in hardware.&lt;/p&gt;\n\n&lt;p&gt;You can use the stack to pass parameters.. even if it is slower than using registers (would a microprocessor guru say or a good 1980s BIOS book...)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Without stack &lt;strong&gt;no&lt;/strong&gt; microprocessor can work. (we can&apos;t imagine a program, even in assembly language, without subroutines/functions)&lt;/li&gt;\n&lt;li&gt;Without the heap it can. (An assembly language program can work without, as the heap is a OS concept, as malloc, that is a OS/Lib call.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Stack usage is faster as:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Is hardware, and even push/pop are very efficient.&lt;/li&gt;\n&lt;li&gt;malloc requires entering kernel mode, use lock/semaphore (or other synchronization primitives) executing some code and manage some structures needed to keep track of allocation.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;Where and what are they (physically in a real computer&apos;s memory)?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;ANSWER:&lt;/strong&gt; &lt;strong&gt;Both are in RAM.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;ASIDE:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;RAM is like a desk and HDDs/SSDs (permanent storage) are like bookshelves. To read anything, you must have a book open on your desk, and you can only have as many books open as fit on your desk. To get a book, you pull it from your bookshelf and open it on your desk. To return a book, you close the book on your desk and return it to its bookshelf.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Stack and heap are names we give to two ways compilers store different kinds of data in the same place (i.e. in RAM).&lt;/em&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;What is their scope?&lt;br&gt;\nWhat determines the size of each of them?&lt;br&gt;\nWhat makes one faster?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;ANSWER:&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;The stack is for static (fixed size) data&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;a. &lt;em&gt;At compile time, the compiler reads the variable types used in your code.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;i. It allocates a fixed amount of memory for these variables.&lt;br&gt;\nii. This size of this memory cannot grow.&lt;/p&gt;\n&lt;p&gt;b. &lt;em&gt;The memory is contiguous (a single block), so access is&lt;/em&gt; &lt;strong&gt;sometimes&lt;/strong&gt; &lt;em&gt;faster than the heap&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;c. &lt;em&gt;An object placed on the stack that grows in memory during runtime beyond the size of the stack causes a&lt;/em&gt; &lt;strong&gt;stack overflow error&lt;/strong&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;The heap is for dynamic (changing size) data&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;a. &lt;em&gt;The amount of memory is limited only by the amount of empty space available in RAM&lt;/em&gt;&lt;br&gt;\ni. The amount used can grow or shrink as needed at runtime&lt;/p&gt;\n&lt;p&gt;b. &lt;em&gt;Since items are allocated on the heap by finding empty space wherever it exists in RAM, data is not always in a contiguous section, which&lt;/em&gt; &lt;strong&gt;sometimes&lt;/strong&gt; &lt;em&gt;makes access slower than the stack&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;c. &lt;em&gt;Programmers manually put items on the heap with the &lt;code&gt;new&lt;/code&gt; keyword and MUST manually deallocate this memory when they are finished using it.&lt;/em&gt;&lt;br&gt;\ni. Code that repeatedly allocates new memory without deallocating it when it is no longer needed leads to a &lt;strong&gt;memory leak.&lt;/strong&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;ASIDE:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The stack and heap were not primarily introduced to improve speed; they were introduced to handle memory overflow. The first concern regarding use of the stack vs. the heap should be whether memory overflow will occur. If an object is intended to grow in size to an unknown amount (like a linked list or an object whose members can hold an arbitrary amount of data), place it on the heap. As far as possible, use the C++ standard library (STL) containers &lt;strong&gt;vector&lt;/strong&gt;, &lt;strong&gt;map&lt;/strong&gt;, and &lt;strong&gt;list&lt;/strong&gt; as they are memory and speed efficient and added to make your life easier (you don&apos;t need to worry about memory allocation/deallocation).&lt;/p&gt;\n&lt;p&gt;After getting your code to run, if you find it is running unacceptably slow, then go back and refactor your code and see if it can be programmed more efficiently. It may turn out the problem has nothing to do with the stack or heap directly at all (e.g. use an iterative algorithm instead of a recursive one, look at I/O vs. CPU-bound tasks, perhaps add multithreading or multiprocessing).&lt;/p&gt;\n&lt;p&gt;I say &lt;em&gt;sometimes&lt;/em&gt; slower/faster above because the speed of the program might not have anything to do with items being allocated on the stack or heap.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;To what extent are they controlled by the OS or language run-time?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;ANSWER:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;The stack size is determined at compile time by the compiler.&lt;/strong&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;The heap size varies during runtime.&lt;/strong&gt; (&lt;em&gt;The heap works with the OS during runtime to allocate memory.&lt;/em&gt;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;ASIDE:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Below is a little more about control and compile-time vs. runtime operations.&lt;/p&gt;\n&lt;p&gt;Each computer has a unique &lt;strong&gt;instruction set architecture (ISA)&lt;/strong&gt;, which are its hardware commands (e.g. &quot;MOVE&quot;, &quot;JUMP&quot;, &quot;ADD&quot;, etc.).&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;An OS is nothing more than a resource manager (controls how/when/ and where to use memory, processors, devices, and information).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The ISA of the OS is called the &lt;strong&gt;bare machine&lt;/strong&gt; and the remaining commands are called the &lt;strong&gt;extended machine&lt;/strong&gt;. The &lt;strong&gt;kernel&lt;/strong&gt; is the first layer of the extended machine. It controls things like&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;determining what tasks get to use a processor (the scheduler),&lt;/li&gt;\n&lt;li&gt;how much memory or how many hardware registers to allocate to a task (the dispatcher), and&lt;/li&gt;\n&lt;li&gt;the order in which tasks should be performed (the traffic controller).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When we say &quot;compiler&quot;, we generally mean the compiler, assembler, and linker together&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The compiler turns source code into assembly language and passes it to the assembler,&lt;/li&gt;\n&lt;li&gt;The assembler turns the assembly language into machine code (ISA commands), and passes it to the linker&lt;/li&gt;\n&lt;li&gt;The linker takes all machine code (possibly generated from multiple source files) and combines it into one program.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The machine code gets passed to the kernel when executed, which determines when it should run and take control, but the machine code itself contains ISA commands for requesting files, requesting memory, etc. So the code issues ISA commands, but everything has to pass by the kernel.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;The stack is essentially an easy-to-access memory that simply manages its items \n  as a - well - stack. Only &lt;strong&gt;items for which the size is known in advance can go onto the stack&lt;/strong&gt;. This is the case for numbers, strings, booleans.&lt;/p&gt;\n  \n  &lt;p&gt;The &lt;strong&gt;heap is a memory for items of which you cant predetermine the\n  exact size and structure&lt;/strong&gt;. Since objects and arrays can be mutated and\n  change at runtime, they have to go into the heap.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;https://academind.com/learn/javascript/reference-vs-primitive-values/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Academind&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;CPU stack and heap are physically related to how CPU and registers works with memory, how machine-assembly language works, not high-level languages themselves, even if these languages can decide little things.&lt;/p&gt;\n&lt;p&gt;All modern CPUs work with the &quot;same&quot; microprocessor theory: they are all based on what&apos;s called &quot;registers&quot; and some are for &quot;stack&quot; to gain performance. All CPUs have stack registers since the beginning and they had been always here, way of talking, as I know. Assembly languages are the same since the beginning, despite variations... up to Microsoft and its Intermediate Language (IL) that changed the paradigm to have a OO virtual machine assembly language. So we&apos;ll be able to have some CLI/CIL CPU in the future (one project of MS).&lt;/p&gt;\n&lt;p&gt;CPUs have stack registers to speed up memories access, but they are limited compared to the use of others registers to get full access to all the available memory for the processus. It why we talked about stack and heap allocations.&lt;/p&gt;\n&lt;p&gt;In summary, and in general, the heap is hudge and slow and is for &quot;global&quot; instances and objects content, as the stack is little and fast and for &quot;local&quot; variables and references (hidden pointers to forget to manage them).&lt;/p&gt;\n&lt;p&gt;So when we use the new keyword in a method, the reference (an int) is created in the stack, but the object and all its content (value-types as well as objects) is created in the heap, if I remember. But local elementary value-types and arrays are created in the stack.&lt;/p&gt;\n&lt;p&gt;The difference in memory access is at the cells referencing level: addressing the heap, the overall memory of the process, requires more complexity in terms of handling CPU registers, than the stack which is &quot;more&quot; locally in terms of addressing because the CPU stack register is used as base address, if I remember.&lt;/p&gt;\n&lt;p&gt;It is why when we have very long or infinite recurse calls or loops, we got stack overflow quickly, without freezing the system on modern computers...&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-i/&quot; rel=&quot;nofollow noreferrer&quot;&gt;C# Heap(ing) Vs Stack(ing) In .NET&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.guru99.com/stack-vs-heap.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Stack vs Heap: Know the Difference &lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/33562199/static-class-memory-allocation-where-it-is-stored-c-sharp&quot;&gt;Static class memory allocation where it is stored C#&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap&quot;&gt;What and where are the stack and heap?&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_management&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://en.wikipedia.org/wiki/Memory_management&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://en.wikipedia.org/wiki/Stack_register&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Assembly language resources:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.tutorialspoint.com/assembly_programming/index.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;Assembly Programming Tutorial&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Intel® 64 and IA-32 Architectures Software Developer Manuals&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Thank you for a really good discussion but as a real noob I wonder where instructions are kept? In the BEGINNING scientists were deciding between two architectures (von NEUMANN where everything is considered DATA and HARVARD where an area of memory was reserved for instructions and another for data). Ultimately, we went with the von Neumann design and now everything is considered &apos;the same&apos;. This made it hard for me when I was learning assembly \n&lt;a href=&quot;https://www.cs.virginia.edu/~evans/cs216/guides/x86.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.cs.virginia.edu/~evans/cs216/guides/x86.html&lt;/a&gt;\nbecause they talk about registers and stack pointers.  &lt;/p&gt;\n\n&lt;p&gt;Everything above talks about DATA. My guess is that since an instruction is a defined thing with a specific memory footprint, it would go on the stack and so all &apos;those&apos; registers discussed in assembly are on the stack. Of course then came object oriented programming with instructions and data comingled into a structure that was dynamic so now instructions would be kept on the heap as well?&lt;/p&gt;\n    ","\n&lt;p&gt;When a process is created then after loading code and data OS setup heap start just after data ends and stack to top of address space based on architecture&lt;/p&gt;\n&lt;p&gt;When more heap is required OS will allocate dynamically and heap chunk is always virtually contiguous&lt;/p&gt;\n&lt;p&gt;Please see &lt;code&gt;brk()&lt;/code&gt;, &lt;code&gt;sbrk()&lt;/code&gt; and &lt;code&gt;alloca()&lt;/code&gt; system call in linux&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;a really good explanation can be found here &lt;a href=&quot;http://www.programmerinterview.com/index.php/data-structures/difference-between-stack-and-heap/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Whats the difference between a stack and a heap?&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/636342/songo&quot; title=&quot;5,433 reputation&quot; class=&quot;comment-user&quot;&gt;Songo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment30840886_79923&quot;&gt;&lt;span title=&quot;2013-12-16 11:32:49Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 16, 2013 at 11:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also (really) good: &lt;a href=&quot;http://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-heap-value-types&quot; rel=&quot;nofollow noreferrer&quot;&gt;codeproject.com/Articles/76153/&lt;/a&gt; (the stack/heap part)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/385273/ben&quot; title=&quot;51,622 reputation&quot; class=&quot;comment-user&quot;&gt;Ben&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment32976354_79923&quot;&gt;&lt;span title=&quot;2014-02-15 05:50:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 15, 2014 at 5:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=clOUdVDDzIM&amp;amp;spfreload=5&quot; rel=&quot;nofollow noreferrer&quot;&gt;youtube.com/watch?v=clOUdVDDzIM&amp;amp;spfreload=5&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1514776/selvamani&quot; title=&quot;7,098 reputation&quot; class=&quot;comment-user&quot;&gt;Selvamani&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment62989769_79923&quot;&gt;&lt;span title=&quot;2016-06-11 05:42:54Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 11, 2016 at 5:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Related, see &lt;a href=&quot;http://www.openwall.com/lists/oss-security/2017/06/19/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;Stack Clash&lt;/a&gt;. The Stack Clash remediations affected some aspects of system variables and behaviors like &lt;code&gt;rlimit_stack&lt;/code&gt;. Also see Red Hat &lt;a href=&quot;https://bugzilla.redhat.com/show_bug.cgi?id=1463241&quot; rel=&quot;nofollow noreferrer&quot;&gt;Issue 1463241&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/608639/jww&quot; title=&quot;91,521 reputation&quot; class=&quot;comment-user&quot;&gt;jww&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment76347195_79923&quot;&gt;&lt;span title=&quot;2017-06-21 16:23:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 21, 2017 at 16:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@mattshane The definitions of stack and heap don&apos;t depend on value and reference types whatsoever.  In other words, the stack and heap can be fully defined even if value and reference types never existed.  Further, when understanding value and reference types, the stack is just an implementation detail.  Per Eric Lippert: &lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2009/04/27/the-stack-is-an-implementation-detail-part-one/&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Stack Is An Implementation Detail, Part One&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/46249/matthew&quot; title=&quot;947 reputation&quot; class=&quot;comment-user&quot;&gt;Matthew&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment81460082_79923&quot;&gt;&lt;span title=&quot;2017-11-12 22:38:03Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 12, 2017 at 22:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Good answer - but I think you should add that while the stack is allocated by the OS when the process starts (assuming the existence of an OS), it is maintained inline by the program.  This is another reason the stack is faster, as well - push and pop operations are typically one machine instruction, and modern machines can do at least 3 of them in one cycle, whereas allocating or freeing heap involves calling into OS code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/929845/sqykly&quot; title=&quot;1,556 reputation&quot; class=&quot;comment-user&quot;&gt;sqykly&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment28483158_80113&quot;&gt;&lt;span title=&quot;2013-10-08 08:31:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 8, 2013 at 8:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;m really confused by the diagram at the end. I thought I got it until I saw that image.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5870336/sina-madani&quot; title=&quot;1,170 reputation&quot; class=&quot;comment-user&quot;&gt;Sina Madani&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65277293_80113&quot;&gt;&lt;span title=&quot;2016-08-15 19:06:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 15, 2016 at 19:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Anarelle the processor runs instructions with or without an os.  An example close to my heart is the SNES, which had no API calls, no OS as we know it today - but it had a stack.  Allocating on a stack is addition and subtraction on these systems and that is fine for variables destroyed when they are popped by returning from the function that created them, but constrast that to, say, a constructor, of which the result can&apos;t just be thrown away.  For that we need the heap, which is not tied to call and return.  Most OS have APIs a heap, no reason to do it on your own&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/929845/sqykly&quot; title=&quot;1,556 reputation&quot; class=&quot;comment-user&quot;&gt;sqykly&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment67326550_80113&quot;&gt;&lt;span title=&quot;2016-10-13 15:06:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 13, 2016 at 15:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;stack is the memory set aside as scratch space&quot;. Cool. But where is it actually &quot;set aside&quot; in terms of Java memory structure?? Is it Heap memory/Non-heap memory/Other (Java memory structure as per  &lt;a href=&quot;https://betsol.com/2017/06/java-memory-management-for-java-virtual-machine-jvm/&quot; rel=&quot;nofollow noreferrer&quot;&gt;betsol.com/2017/06/&lt;/a&gt; )&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4571486/jatin&quot; title=&quot;599 reputation&quot; class=&quot;comment-user&quot;&gt;Jatin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment89894068_80113&quot;&gt;&lt;span title=&quot;2018-07-22 06:22:38Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 22, 2018 at 6:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JatinShashoo Java runtime, as bytecode interpreter, adds one more level of virtualization, so what you referred to is just Java application point of view. From operating system point of view all that is just a heap, where Java runtime process allocates some of its space as &quot;non-heap&quot; memory for processed bytecode. Rest of that OS-level heap is used as application-level heap, where object&apos;s data are stored.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/854291/kbec&quot; title=&quot;3,363 reputation&quot; class=&quot;comment-user&quot;&gt;kbec&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91364782_80113&quot;&gt;&lt;span title=&quot;2018-09-06 15:41:48Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 6, 2018 at 15:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The pointer pBuffer and the value of b are located on the stack, and are mostly likely allocated at the entrance to the function.  Depending on the compiler, buffer may be allocated at the function entrance, as well.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/66542/andy&quot; title=&quot;10,345 reputation&quot; class=&quot;comment-user&quot;&gt;Andy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment473953_79936&quot;&gt;&lt;span title=&quot;2009-03-18 22:48:52Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Mar 18, 2009 at 22:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is a common misconception that the &lt;code&gt;C&lt;/code&gt; language, as defined by the &lt;code&gt;C99&lt;/code&gt; language standard (available at &lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf&lt;/a&gt; ), requires a &quot;stack&quot;.  In fact, the word &apos;stack&apos; does not even appear in the standard. This answers statements wrt/ to &lt;code&gt;C&lt;/code&gt;&apos;s stack usage are true in general, but is in no way required by the language.  See &lt;a href=&quot;http://www.knosof.co.uk/cbook/cbook.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;knosof.co.uk/cbook/cbook.html&lt;/a&gt; for more info, and in particular how &lt;code&gt;C&lt;/code&gt; is implemented on odd-ball architectures such as &lt;a href=&quot;http://en.wikipedia.org/wiki/Burroughs_large_systems&quot; rel=&quot;nofollow noreferrer&quot;&gt;en.wikipedia.org/wiki/Burroughs_large_systems&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/139937/johne&quot; title=&quot;6,750 reputation&quot; class=&quot;comment-user&quot;&gt;johne&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1197881_79936&quot;&gt;&lt;span title=&quot;2009-09-01 04:37:30Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 1, 2009 at 4:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Brian You should explain &lt;i&gt;why&lt;/i&gt; buffer[] and the pBuffer pointer are created on the stack and why pBuffer&apos;s data is created on the heap. I think some ppl might be confused by your answer as they might think the program is specifically instructing that memory be allocated on the stack vs heap but this is not the case. Is it because Buffer is a value type whereas pBuffer is a reference type?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/133247/howiecamp&quot; title=&quot;2,863 reputation&quot; class=&quot;comment-user&quot;&gt;Howiecamp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment2173357_79936&quot;&gt;&lt;span title=&quot;2010-02-08 04:56:47Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 8, 2010 at 4:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;Responsible for memory leaks&quot; - Heaps are not responsible for memory leaks! Lazy/Forgetful/ex-java coders/coders who dont give a crap are!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/344398/laz&quot; title=&quot;5,648 reputation&quot; class=&quot;comment-user&quot;&gt;Laz&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment22139413_79936&quot;&gt;&lt;span title=&quot;2013-03-25 08:22:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 25, 2013 at 8:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also the comments about scope and allocation are wrong - Scope is not connected to the stack or the heap at all. &lt;i&gt;Variables on the heap must be destroyed manually and never fall out of scope.&lt;/i&gt; isn&apos;t correct; it would be more correct to say &quot;Data on the heap isn&apos;t freed when variables that reference them go out of scope. It&apos;s up to you (or the garbage collector) to free them.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/234/orion-edwards&quot; title=&quot;118,109 reputation&quot; class=&quot;comment-user&quot;&gt;Orion Edwards&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39985199_79936&quot;&gt;&lt;span title=&quot;2014-09-01 02:12:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 1, 2014 at 2:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;David I don&apos;t agree that that is a good image or that &quot;push-down stack&quot; is a good term to illustrate the concept.  When you add something to a stack, the other contents of the stack &lt;i&gt;aren&apos;t&lt;/i&gt; pushed down, they remain where they are.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/53212/thomasrutter&quot; title=&quot;110,195 reputation&quot; class=&quot;comment-user&quot;&gt;thomasrutter&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15885688_662454&quot;&gt;&lt;span title=&quot;2012-08-13 03:40:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 13, 2012 at 3:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer includes a big mistake. Static variables are not allocated on the stack. See my answer [link] &lt;a href=&quot;http://stackoverflow.com/a/13326916/1763801&quot;&gt;stackoverflow.com/a/13326916/1763801&lt;/a&gt; for clarification. you are equating &quot;automatic&quot; variables with &quot;static&quot; variables, but they are not at all the same&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1763801/davec&quot; title=&quot;323 reputation&quot; class=&quot;comment-user&quot;&gt;davec&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18181773_662454&quot;&gt;&lt;span title=&quot;2012-11-10 23:07:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 10, 2012 at 23:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Specifically, you say &quot;statically allocated local variables&quot; are allocated on the stack. Actually they are allocated in the data segment. Only automatically allocated variables (which includes most but not all local variables and also things like function parameters passed in by value rather than by reference) are allocated on the stack.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1763801/davec&quot; title=&quot;323 reputation&quot; class=&quot;comment-user&quot;&gt;davec&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18183422_662454&quot;&gt;&lt;span title=&quot;2012-11-11 01:44:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 11, 2012 at 1:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;ve just realised you&apos;re right - in C, &lt;i&gt;static allocation&lt;/i&gt; is its own separate thing rather than a term for anything that&apos;s not &lt;i&gt;dynamic&lt;/i&gt;.  I&apos;ve edited my answer, thanks.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/53212/thomasrutter&quot; title=&quot;110,195 reputation&quot; class=&quot;comment-user&quot;&gt;thomasrutter&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18198902_662454&quot;&gt;&lt;span title=&quot;2012-11-12 00:29:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 12, 2012 at 0:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s not just C. Java, Pascal, Python and many others all have the notions of static versus automatic versus dynamic allocation. Saying &quot;static allocation&quot; means the same thing just about everywhere. In no language does static allocation mean &quot;not dynamic&quot;. You want the term &quot;automatic&quot; allocation for what you are describing (i.e. the things on the stack).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1763801/davec&quot; title=&quot;323 reputation&quot; class=&quot;comment-user&quot;&gt;davec&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18217325_662454&quot;&gt;&lt;span title=&quot;2012-11-12 17:16:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 12, 2012 at 17:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Martin - A very good answer/explanation than the more abstract accepted answer. A sample assembly program showing stack pointers/registers being used vis a vis function calls would be more illustrative.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/211574/bikal-lem&quot; title=&quot;2,383 reputation&quot; class=&quot;comment-user&quot;&gt;Bikal Lem&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment13285723_1213360&quot;&gt;&lt;span title=&quot;2012-04-25 16:42:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 25, 2012 at 16:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Every reference type is composition of value types(int, string etc).  As it is said, that value types are stored in stack than how does it work when they are part of reference type.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/276970/nps&quot; title=&quot;1,608 reputation&quot; class=&quot;comment-user&quot;&gt;Nps&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment32980413_1213360&quot;&gt;&lt;span title=&quot;2014-02-15 10:26:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 15, 2014 at 10:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer was the best in my opinion, because it helped me understand what a return statement really is and how it relates to this &quot;return address&quot; that I come across every now and then, what it means to push a function onto the stack, and why functions are pushed onto stacks. Great answer!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/706853/alex&quot; title=&quot;3,031 reputation&quot; class=&quot;comment-user&quot;&gt;Alex&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34260999_1213360&quot;&gt;&lt;span title=&quot;2014-03-19 19:59:21Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 19, 2014 at 19:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is the best in my opinion, namely for mentioning that the heap/stack are &lt;i&gt;very&lt;/i&gt; implementation specific. The other answers assume a &lt;i&gt;lot&lt;/i&gt; of things about the language and the environment/OS. +1&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/510036/qix-monica-was-mistreated&quot; title=&quot;13,383 reputation&quot; class=&quot;comment-user&quot;&gt;Qix - MONICA WAS MISTREATED&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42880742_1213360&quot;&gt;&lt;span title=&quot;2014-11-29 02:00:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 29, 2014 at 2:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What do you mean &quot;The code in the function is then able to navigate up the stack from the current stack pointer to locate these values.&quot; ? Can you elaborate on this please?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1173112/koray-tugay&quot; title=&quot;21,894 reputation&quot; class=&quot;comment-user&quot;&gt;Koray Tugay&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48142567_1213360&quot;&gt;&lt;span title=&quot;2015-05-03 09:36:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 3, 2015 at 9:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is incorrect. i and cls are not &quot;static&quot; variables. they are called &quot;local&quot; or &quot;automatic&quot; variables. It is a very important distinction. See [link] &lt;a href=&quot;http://stackoverflow.com/a/13326916/1763801&quot;&gt;stackoverflow.com/a/13326916/1763801&lt;/a&gt; for clarification&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1763801/davec&quot; title=&quot;323 reputation&quot; class=&quot;comment-user&quot;&gt;davec&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18181749_13308092&quot;&gt;&lt;span title=&quot;2012-11-10 23:05:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 10, 2012 at 23:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I did not say they were static &lt;i&gt;variables&lt;/i&gt;. I said that int and cls1 are static &lt;i&gt;items&lt;/i&gt;. Their memory is statically allocated and therefore they go on the stack. This is in contrast to an object which requires dynamic memory allocation which therefore goes on the heap.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/343204/snowcrash&quot; title=&quot;74,436 reputation&quot; class=&quot;comment-user&quot;&gt;Snowcrash&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18435070_13308092&quot;&gt;&lt;span title=&quot;2012-11-20 14:38:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 20, 2012 at 14:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I quote &quot;Static items... go on the stack&quot;. This is just flat out wrong. Static items go in the data segment, automatic items go on the stack.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1763801/davec&quot; title=&quot;323 reputation&quot; class=&quot;comment-user&quot;&gt;davec&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18472644_13308092&quot;&gt;&lt;span title=&quot;2012-11-21 16:55:41Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 21, 2012 at 16:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also whoever wrote that codeproject article doesn&apos;t know what he is talking about. For instance, he says &quot;primitive ones needs static type memory&quot; which is completely untrue. Nothing stops you from allocating primitives in the heap dynamically, just write something like &quot;int array[] = new int[num]&quot; and voila, primitives allocated dynamically in .NET. That is just one of several inaccuracies.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1763801/davec&quot; title=&quot;323 reputation&quot; class=&quot;comment-user&quot;&gt;davec&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18472879_13308092&quot;&gt;&lt;span title=&quot;2012-11-21 17:02:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 21, 2012 at 17:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@SnowCrash one question about your picture - how do I access &lt;code&gt;i&lt;/code&gt; after allocating &lt;code&gt;y&lt;/code&gt;? Do I have to pop up &lt;code&gt;y&lt;/code&gt;? Swap them? What if there are a lot of local variables separating them?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3909469/confused00&quot; title=&quot;2,356 reputation&quot; class=&quot;comment-user&quot;&gt;confused00&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment44359878_13308092&quot;&gt;&lt;span title=&quot;2015-01-16 12:53:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 16, 2015 at 12:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;A recommendation to avoid using the heap is pretty strong. Modern systems have good heap managers, and modern dynamic languages use the heap extensively (without the programmer really worrying about it). I&apos;d say use the heap, but with a manual allocator, don&apos;t forget to free!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/893/greg-hewgill&quot; title=&quot;896,126 reputation&quot; class=&quot;comment-user&quot;&gt;Greg Hewgill&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment9652_79988&quot;&gt;&lt;span title=&quot;2008-09-17 04:31:42Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2008 at 4:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you can use the stack or the heap, use the stack. If you can&apos;t use the stack, really no choice. I use both a lot, and of course using std::vector or similar hits the heap. For a novice, you avoid the heap because the stack is simply so easy!!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11440/tom-leys&quot; title=&quot;17,883 reputation&quot; class=&quot;comment-user&quot;&gt;Tom Leys&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment9662_79988&quot;&gt;&lt;span title=&quot;2008-09-17 04:35:51Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2008 at 4:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If your language doesn&apos;t implement garbage collection, Smart pointers (Seporately allocated objects that wrap around a pointer which do reference counting for dynamically allocated chunks of memory) are closely related to garbage collection and are a decent way of managing the heap in a safe and leak free manner.  They are implemented in various frameworks, but are also not that tough to implement for your own programs as well.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2129481/benpen&quot; title=&quot;363 reputation&quot; class=&quot;comment-user&quot;&gt;BenPen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment67248499_79988&quot;&gt;&lt;span title=&quot;2016-10-11 19:10:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 11, 2016 at 19:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;This is why the heap should be avoided (though it is still often used).&quot; I&apos;m not sure what this practically means, especially as memory is managed differently in many high level languages. As this question is tagged language-agnostic, I&apos;d say this particular comment/line is ill-placed and not applicable.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1045493/lintfordpickle&quot; title=&quot;421 reputation&quot; class=&quot;comment-user&quot;&gt;LintfordPickle&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment89999438_79988&quot;&gt;&lt;span title=&quot;2018-07-25 09:34:14Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 25, 2018 at 9:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Good point @JonnoHampson - While you make a valid point, I&apos;d argue that if you&apos;re working in a &quot;high level language&quot; with a GC you probably don&apos;t care about memory allocation mechanisms at all - and so don&apos;t even care what the stack and heap are.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11440/tom-leys&quot; title=&quot;17,883 reputation&quot; class=&quot;comment-user&quot;&gt;Tom Leys&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90064289_79988&quot;&gt;&lt;span title=&quot;2018-07-26 22:22:52Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 26, 2018 at 22:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I would refer to a static variable declared within a function as having only local &lt;i&gt;accessibility&lt;/i&gt;, but would generally not use the term &quot;scope&quot; with it.  Also, it may be worth noting that the one stack/heap aspect with which languages have essentially zero flexibility: a language which saves execution context on a stack cannot use that same stack to hold things which will need to outlive the contexts wherein they are created.  Some languages like &lt;code&gt;PostScript&lt;/code&gt; have multiple stacks, but have a &quot;heap&quot; that behaves more like a stack.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/363751/supercat&quot; title=&quot;73,697 reputation&quot; class=&quot;comment-user&quot;&gt;supercat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment30610045_13326916&quot;&gt;&lt;span title=&quot;2013-12-09 21:53:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 9, 2013 at 21:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@supercat That all makes sense. I defined scope as &quot;what parts of the code can &lt;i&gt;access&lt;/i&gt; a variable&quot; (and feel this is the most standard definition) so I think we agree :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1763801/davec&quot; title=&quot;323 reputation&quot; class=&quot;comment-user&quot;&gt;davec&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment30903183_13326916&quot;&gt;&lt;span title=&quot;2013-12-17 20:28:57Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 17, 2013 at 20:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;you must be kidding. can you really define static variable inside a function ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4905400/zaeem-sattar&quot; title=&quot;980 reputation&quot; class=&quot;comment-user&quot;&gt;Zaeem Sattar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment75024797_13326916&quot;&gt;&lt;span title=&quot;2017-05-16 09:57:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 16, 2017 at 9:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@zaeemsattar absolutely and this is not ususual to see in C code&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1763801/davec&quot; title=&quot;323 reputation&quot; class=&quot;comment-user&quot;&gt;davec&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment76403727_13326916&quot;&gt;&lt;span title=&quot;2017-06-22 22:41:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 22, 2017 at 22:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ZaeemSattar Think of the static function variable like a hidden global or like a private static member variable.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11440/tom-leys&quot; title=&quot;17,883 reputation&quot; class=&quot;comment-user&quot;&gt;Tom Leys&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90064595_13326916&quot;&gt;&lt;span title=&quot;2018-07-26 22:42:00Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 26, 2018 at 22:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Re &quot;as opposed to alloc&quot;: Do you mean &quot;as opposed to malloc&quot;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/63550/peter-mortensen&quot; title=&quot;30,018 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Mortensen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77759068_80094&quot;&gt;&lt;span title=&quot;2017-07-30 11:19:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 30, 2017 at 11:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@PeterMortensen it&apos;s not POSIX, portability not guaranteed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/13097/don-neufeld&quot; title=&quot;22,054 reputation&quot; class=&quot;comment-user&quot;&gt;Don Neufeld&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment81068801_80094&quot;&gt;&lt;span title=&quot;2017-11-01 17:38:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 1, 2017 at 17:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also worth mentioning here that intel heavily optimizes stack accesses, especially things such as predicting where you return from a function.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11440/tom-leys&quot; title=&quot;17,883 reputation&quot; class=&quot;comment-user&quot;&gt;Tom Leys&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment9666_79997&quot;&gt;&lt;span title=&quot;2008-09-17 04:37:38Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2008 at 4:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Another nitpick- most of the answers (lightly) imply that the use of a &quot;stack&quot; is required by the &lt;code&gt;C&lt;/code&gt; language.  This is a common misconception, though it is the (by far) dominate paradigm for implementing &lt;code&gt;C99 6.2.4 automatic storage duration objects&lt;/code&gt; (variables).  In fact, the word &quot;stack&quot; does not even appear in the &lt;code&gt;C99&lt;/code&gt; language standard: &lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/139937/johne&quot; title=&quot;6,750 reputation&quot; class=&quot;comment-user&quot;&gt;johne&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1197950_80142&quot;&gt;&lt;span title=&quot;2009-09-01 05:03:55Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 1, 2009 at 5:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;[@Heath] I have a small comment on your answer. Take a look at the accepted answer to &lt;a href=&quot;http://stackoverflow.com/questions/240212/what-is-the-difference-between-new-delete-and-malloc-free&quot;&gt;this question&lt;/a&gt;. It says that the &lt;b&gt;free store&lt;/b&gt; &lt;i&gt;most probably&lt;/i&gt; is the same as the &lt;b&gt;heap&lt;/b&gt;, though not necessarily is.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/830320/omarothman&quot; title=&quot;1,678 reputation&quot; class=&quot;comment-user&quot;&gt;OmarOthman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment11649991_80142&quot;&gt;&lt;span title=&quot;2012-02-12 06:34:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 12, 2012 at 6:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How portable is &lt;code&gt;alloca&lt;/code&gt;? For instance, does it work on Windows? Is it only for Unix-like operating systems?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/63550/peter-mortensen&quot; title=&quot;30,018 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Mortensen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77759716_662783&quot;&gt;&lt;span title=&quot;2017-07-30 12:00:54Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 30, 2017 at 12:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;concise and clean. nice:)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/927333/ingconti&quot; title=&quot;10,072 reputation&quot; class=&quot;comment-user&quot;&gt;ingconti&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94138010_47314733&quot;&gt;&lt;span title=&quot;2018-12-05 19:14:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 5, 2018 at 19:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What is OPP? Do you mean OOP (&lt;a href=&quot;http://en.wikipedia.org/wiki/Object-oriented_programming&quot; rel=&quot;nofollow noreferrer&quot;&gt;object-oriented_programming&lt;/a&gt;)?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/63550/peter-mortensen&quot; title=&quot;30,018 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Mortensen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77760222_45361888&quot;&gt;&lt;span title=&quot;2017-07-30 12:34:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 30, 2017 at 12:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Do you mean to say that &lt;code&gt;malloc&lt;/code&gt; is a kernel call?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/63550/peter-mortensen&quot; title=&quot;30,018 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Mortensen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77760242_45361888&quot;&gt;&lt;span title=&quot;2017-07-30 12:35:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 30, 2017 at 12:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;1) yes, sorry.. OOP... 2) malloc: I write shortly, sorry ... malloc is in user space.. but can trigger down other calls.... the point is that using heap CAN be very slow...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/927333/ingconti&quot; title=&quot;10,072 reputation&quot; class=&quot;comment-user&quot;&gt;ingconti&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77928408_45361888&quot;&gt;&lt;span title=&quot;2017-08-03 12:18:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 3, 2017 at 12:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;&lt;i&gt;A lot of answers are correct as concepts, but we must note that a stack is needed by the hardware (i.e. microprocessor) to allow calling subroutines (CALL in assembly language..)&lt;/i&gt;&quot;. You&apos;re confusing the CPU stack (if there was one in modern CPU) and the language runtime stacks (one per thread). When programmers talk about a stack, this is the thread execution stack of the runtime, e.g. a NET thread stack), we are not talking about the CPU stack.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/774575/mins&quot; title=&quot;5,274 reputation&quot; class=&quot;comment-user&quot;&gt;mins&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment100342824_45361888&quot;&gt;&lt;span title=&quot;2019-07-05 07:48:17Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 5, 2019 at 7:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;NET thread&quot;  is not a real stack. (the same for JVM) : they are SW concepts. (other call this &quot;activation record&quot;) We must start from real circuits as in history of PCs to get a real comprehension.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/927333/ingconti&quot; title=&quot;10,072 reputation&quot; class=&quot;comment-user&quot;&gt;ingconti&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment111367197_45361888&quot;&gt;&lt;span title=&quot;2020-07-19 06:24:38Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 19, 2020 at 6:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;Programmers manually put items on the stack with the new keyword&quot;, i believe you mean Heap not Stack.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/808438/yazx&quot; title=&quot;421 reputation&quot; class=&quot;comment-user&quot;&gt;YazX&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128097816_70050292&quot;&gt;&lt;span title=&quot;2022-06-06 08:18:40Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 6 at 8:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thank you, yes, this was a mistake on my end (sorry). I corrected it. Thanks for pointing out the error!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8748308/a-hendry&quot; title=&quot;2,750 reputation&quot; class=&quot;comment-user&quot;&gt;A. Hendry&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128571526_70050292&quot;&gt;&lt;span title=&quot;2022-06-28 18:24:22Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28 at 18:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;AFAIK, there still exist many CPUs with the Harvard architecture (typically optimized DSPs), which have separated memory (and bus) for instructions and data. (Some of them even more than 1 data memory). This is to optimize the cycle duration (Instruction fetch, data fetch and execute of previous instruction all in one machine cycle), thus take advantage from what they call pipe-lining. I am not aware, that instructions should by any means be placed in the stack. Anyway, I have a sneaky feeling this answer might go a bit beyond the scope of the original question...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1630736/sold-out&quot; title=&quot;1,053 reputation&quot; class=&quot;comment-user&quot;&gt;Sold Out&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment110870630_61124687&quot;&gt;&lt;span title=&quot;2020-07-02 11:07:34Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 2, 2020 at 11:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":253,"title":"What and where are the stack and heap?","content":"\n                \n&lt;ul&gt;\n&lt;li&gt;What are the stack and heap?&lt;/li&gt;\n&lt;li&gt;Where are they located physically in a computer&apos;s memory?&lt;/li&gt;\n&lt;li&gt;To what extent are they controlled by the OS or language run-time?&lt;/li&gt;\n&lt;li&gt;What is their scope?&lt;/li&gt;\n&lt;li&gt;What determines their sizes?&lt;/li&gt;\n&lt;li&gt;What makes one faster?&lt;/li&gt;\n&lt;/ul&gt;\n    ","slug":"what-and-where-are-the-stack-and-heap-1657387415361","postType":"QUESTION","createdAt":"2022-07-09T17:23:35.000Z","updatedAt":"2022-07-09T17:23:35.000Z","tags":[{"id":1639,"name":"heap-memory","slug":"heap-memory","createdAt":"2022-07-09T17:23:35.000Z","updatedAt":"2022-07-09T17:23:35.000Z","Questions_Tags":{"questionId":253,"tagId":1639}}]}]}},"__N_SSG":true}