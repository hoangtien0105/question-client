{"pageProps":{"data":{"count":1,"rows":[{"id":300,"title":"Int division: Why is the result of 1/3 == 0?","slug":"int-division:-why-is-the-result-of-13-0-1657387547814","postType":"QUESTION","createdAt":"2022-07-09T17:25:47.000Z","updatedAt":"2022-07-09T17:25:47.000Z","tags":[{"id":1800,"name":"integer-division","slug":"integer-division","createdAt":"2022-07-09T17:25:47.000Z","updatedAt":"2022-07-09T17:25:47.000Z","Questions_Tags":{"questionId":300,"tagId":1800}}]}]},"slug":"integer-division","page":1,"answers":{"300":["\n&lt;p&gt;The two operands (1 and 3) are integers, therefore integer arithmetic (division here) is used. Declaring the result variable as double just causes an implicit conversion to occur &lt;em&gt;after division&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Integer division of course returns the true result of division rounded towards zero. The result of &lt;code&gt;0.333...&lt;/code&gt; is thus rounded down to 0 here. (Note that the processor doesn&apos;t actually do any rounding, but you can think of it that way still.)&lt;/p&gt;\n\n&lt;p&gt;Also, note that if &lt;em&gt;both&lt;/em&gt; operands (numbers) are given as floats; 3.0 and 1.0, or even just the &lt;em&gt;first&lt;/em&gt;, then floating-point arithmetic is used, giving you &lt;code&gt;0.333...&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;1/3&lt;/code&gt; uses integer division as both sides are integers.&lt;/p&gt;\n\n&lt;p&gt;You need at least one of them to be &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you are entering the values in the source code like your question, you can do &lt;code&gt;1.0/3&lt;/code&gt; ; the &lt;code&gt;1.0&lt;/code&gt; is a double.&lt;/p&gt;\n\n&lt;p&gt;If you get the values from elsewhere you can use &lt;code&gt;(double)&lt;/code&gt; to turn the &lt;code&gt;int&lt;/code&gt; into a &lt;code&gt;double&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ...;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ...;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ((&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;) x) / y;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Explicitly cast it as a &lt;code&gt;double&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This happens because Java uses the integer division operation for &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; since you entered them as integer constants.&lt;/p&gt;\n    ","\n&lt;p&gt;Because you are doing integer division.&lt;/p&gt;\n\n&lt;p&gt;As @Noldorin says, if both operators are integers, then integer division is used.&lt;/p&gt;\n\n&lt;p&gt;The result 0.33333333 can&apos;t be represented as an integer, therefore only the integer part (0) is assigned to the result.&lt;/p&gt;\n\n&lt;p&gt;If any of the operators is a &lt;code&gt;double&lt;/code&gt; / &lt;code&gt;float&lt;/code&gt;, then floating point arithmetic will take place. But you&apos;ll have the same problem if you do that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The easiest solution is to just do this&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;) &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What this does, since you didn&apos;t enter 1.0 / 3.0, is let you manually convert it to data type double since Java assumed it was Integer division, and it would do it even if it meant narrowing the conversion. This is what is called a cast operator.\nHere we cast only one operand, and this is enough to avoid &lt;em&gt;integer division&lt;/em&gt; (rounding towards zero)&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;The result is 0. Why is this, and how do I solve this problem?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;You can solve it by doing:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;) &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The last of these options is required when you are using variables e.g. &lt;code&gt;int a = 1, b = 3; double g = (double) a / b;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;A more completed answer&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;double g = 1 / 3;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This result in &lt;code&gt;0&lt;/code&gt; because&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;first the dividend &amp;lt; divisor;&lt;/li&gt;\n&lt;li&gt;both variables are of type &lt;code&gt;int&lt;/code&gt; therefore resulting in &lt;code&gt;int&lt;/code&gt; (&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;5.6.2. JLS&lt;/a&gt;) which naturally cannot represent the a floating point value such as &lt;code&gt;0.333333..&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&quot;Integer division rounds toward 0.&quot; &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.17.2&quot; rel=&quot;nofollow noreferrer&quot;&gt;15.17.2 JLS&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Why &lt;code&gt;double g = 1.0/3.0;&lt;/code&gt; and  &lt;code&gt;double g = ((double) 1) / 3;&lt;/code&gt; work?&lt;/p&gt;\n&lt;p&gt;From &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Chapter 5. Conversions and Promotions&lt;/a&gt; one can read:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;One conversion context is the operand of a numeric operator such as +\nor *. The conversion process for such operands is called numeric\npromotion. Promotion is special in that, in the case of binary\noperators, the conversion chosen for one operand may depend in part on\nthe type of the other operand expression.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;and &lt;code&gt;5.6.2. Binary Numeric Promotion&lt;/code&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;When an operator applies binary numeric promotion to a pair of\noperands, each of which must denote a value that is convertible to a\nnumeric type, the following rules apply, in order:&lt;/p&gt;\n&lt;p&gt;If any operand is of a reference type, it is subjected to unboxing\nconversion (ยง5.1.8).&lt;/p&gt;\n&lt;p&gt;Widening primitive conversion (ยง5.1.2) is applied to convert either or\nboth operands as specified by the following rules:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;If either operand is of type double, the other is converted to double.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Otherwise, if either operand is of type float, the other is converted\nto float.&lt;/p&gt;\n&lt;p&gt;Otherwise, if either operand is of type long, the other is converted\nto long.&lt;/p&gt;\n&lt;p&gt;Otherwise, both operands are converted to type int.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;you should use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; g=&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; g=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Integer division returns integer.&lt;/p&gt;\n    ","\n&lt;p&gt;Because it treats 1 and 3 as integers, therefore rounding the result down to 0, so that it is an integer.&lt;/p&gt;\n\n&lt;p&gt;To get the result you are looking for, explicitly tell java that the numbers are doubles like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Make the 1 a float and float division will be used&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String d[])&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; g=&lt;span class=&quot;hljs-number&quot;&gt;1f&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n    System.out.printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%.2f&quot;&lt;/span&gt;,g);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The conversion in JAVA is quite simple but need some understanding. As explain in the JLS for &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.2&quot; rel=&quot;nofollow noreferrer&quot;&gt;integer operations&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If an integer operator other than a shift operator has at least one operand of type long, then the operation is carried out using 64-bit precision, and the result of the numerical operator is of type long. If the other operand is not long, it is first widened (ยง5.1.5) to type long by numeric promotion (ยง5.6). &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;And an example is always the best way to translate the JLS ;) &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; + &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt; + &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Otherwise, the operation is carried out using 32-bit precision, and the result of the numerical operator is of type int. If either operand is not an int, it is first widened to type int by numeric promotion. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; + &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; + &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A small example using Eclipse to show that even an addition of two &lt;code&gt;short&lt;/code&gt;s will not be that easy :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\ns = s + s; &amp;lt;- Compiling error\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//possible loss of precision&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//  required: short&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//  found:    int&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will required a casting with a possible loss of precision.&lt;/p&gt;\n\n&lt;p&gt;The same is true for the &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.4&quot; rel=&quot;nofollow noreferrer&quot;&gt;floating point operators&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If at least one of the operands to a numerical operator is of type double, then the operation is carried out using 64-bit floating-point arithmetic, and the result of the numerical operator is a value of type double. If the other operand is not a double, it is first widened (ยง5.1.5) to type double by numeric promotion (ยง5.6). &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So the promotion is done on the float into double.&lt;/p&gt;\n\n&lt;p&gt;And the mix of both integer and floating value result in floating values as said &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If at least one of the operands to a binary operator is of floating-point type, then the operation is a floating-point operation, even if the other is integral. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is true for binary operators but not for &quot;Assignment Operators&quot; like &lt;code&gt;+=&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;A simple working example is enough to prove this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\ni += &lt;span class=&quot;hljs-number&quot;&gt;1.5f&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The reason is that there is an implicit cast done here, this will be execute like &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;i = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) i + &lt;span class=&quot;hljs-number&quot;&gt;1.5f&lt;/span&gt;\ni = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-number&quot;&gt;2.5f&lt;/span&gt;\ni = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;1 and 3 are integer contants and so Java does an integer division which&apos;s result is 0. If you want to write double constants you have to write &lt;code&gt;1.0&lt;/code&gt; and &lt;code&gt;3.0&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I did this.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;;\nSystem.out.printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%gf&quot;&lt;/span&gt;, g);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Use .0 while doing double calculations or else Java will assume you are using Integers. If a Calculation uses any amount of double values, then the output will be a double value. If the are all Integers, then the output will be an Integer.&lt;/p&gt;\n    ","\n&lt;p&gt;(1/3) means Integer division, thats why you can not get decimal value from this division. To solve this problem use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n        System.out.printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%.2f&quot;&lt;/span&gt;, g);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n    System.out.printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%.2f&quot;&lt;/span&gt;, g);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since both 1 and 3 are ints the result not rounded but it&apos;s truncated. So you ignore fractions and take only wholes.&lt;/p&gt;\n\n&lt;p&gt;To avoid this have at least one of your numbers 1 or 3 as a decimal form 1.0 and/or 3.0.&lt;/p&gt;\n    ","\n&lt;p&gt;Try this out:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; a / b;\n    System.out.printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;+ g);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;My code was:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;enter weight: &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; myObj.nextInt();\n\nSystem.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;enter height: &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; myObj.nextInt();\n\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;BMI&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; weight / (height *height)\nSystem.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;BMI is: &quot;&lt;/span&gt; + BMI);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If user enters  weight(Numerator) = 5, and height (Denominator) = 7,\nBMI is 0 where Denominator &amp;gt; Numerator &amp;amp; it returns interger  (5/7 = 0.71 ) &lt;strong&gt;so result is 0&lt;/strong&gt; ( without decimal values )&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Solution :&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Option 1:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;doubleouble&lt;/span&gt;  &lt;span class=&quot;hljs-variable&quot;&gt;BMI&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;) weight / ((&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)height * (&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)height);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Option 2:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;hljs-variable&quot;&gt;BMI&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;) weight / (height * height);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I noticed that this is somehow not mentioned in the many replies, but you can also do &lt;code&gt;1.0 * 1 / 3&lt;/code&gt; to get floating point division. This is more useful when you have variables that you can&apos;t just add .0 after it, e.g.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Main&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;;\n        System.out.println(&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt; * x / y);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Do &quot;double g=1.0/3.0;&quot; instead.&lt;/p&gt;\n    ","\n&lt;p&gt;Many others have failed to point out the real issue:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;An operation on only integers casts the result of the operation to an integer.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This necessarily means that floating point results, that &lt;em&gt;could&lt;/em&gt; be displayed as an integer, will be truncated (lop off the decimal part).&lt;/p&gt;\n\n&lt;p&gt;What is &lt;em&gt;casting&lt;/em&gt; (typecasting / type conversion) you ask?&lt;/p&gt;\n\n&lt;p&gt;It varies on the implementation of the language, but Wikipedia has a fairly comprehensive view, and it does talk about &lt;em&gt;coercion&lt;/em&gt; as well, which is a pivotal piece of information in answering your question.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Type_conversion&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Type_conversion&lt;/a&gt;&lt;/p&gt;\n    "]},"randomTags":[{"name":"if-statement","slug":"if-statement"},{"name":"alignment","slug":"alignment"},{"name":"xml","slug":"xml"},{"name":"pygame","slug":"pygame"},{"name":"group-by","slug":"group-by"},{"name":"compiler-errors","slug":"compiler-errors"},{"name":"webdriver","slug":"webdriver"},{"name":"smart-pointers","slug":"smart-pointers"},{"name":"bitwise-operators","slug":"bitwise-operators"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"decorator","slug":"decorator"},{"name":"repr","slug":"repr"},{"name":"error-reporting","slug":"error-reporting"},{"name":"facelets","slug":"facelets"},{"name":"boolean-expression","slug":"boolean-expression"},{"name":"threetenbp","slug":"threetenbp"},{"name":"multipartform-data","slug":"multipartform-data"},{"name":"nested","slug":"nested"},{"name":"url","slug":"url"},{"name":"heap-memory","slug":"heap-memory"}]},"__N_SSG":true}