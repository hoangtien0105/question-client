{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;&lt;code&gt;new_list = my_list&lt;/code&gt; doesn&apos;t actually create a second list. The assignment just copies the reference to the list, not the actual list, so both &lt;code&gt;new_list&lt;/code&gt; and &lt;code&gt;my_list&lt;/code&gt; refer to the same list after the assignment.&lt;/p&gt;\n&lt;p&gt;To actually copy the list, you have several options:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;You can use the builtin &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;list.copy()&lt;/code&gt;&lt;/a&gt; method (available since Python 3.3):&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = old_list.copy()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;You can slice it:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = old_list[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Alex_Martelli&quot; rel=&quot;nofollow noreferrer&quot;&gt;Alex Martelli&lt;/a&gt;&apos;s opinion (at least &lt;a href=&quot;https://www.youtube.com/watch?v=g7V89K8QfgQ&quot; rel=&quot;nofollow noreferrer&quot;&gt;back in 2007&lt;/a&gt;) about this is, that &lt;em&gt;it is a weird syntax and it does not make sense to use it ever&lt;/em&gt;. ;) (In his opinion, the next one is more readable).&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;You can use the built in &lt;a href=&quot;https://docs.python.org/2/library/functions.html#list&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;list()&lt;/code&gt;&lt;/a&gt; function:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(old_list)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;You can use generic &lt;a href=&quot;https://docs.python.org/2/library/copy.html#copy.copy&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;copy.copy()&lt;/code&gt;&lt;/a&gt;:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\nnew_list = copy.copy(old_list)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is a little slower than &lt;code&gt;list()&lt;/code&gt; because it has to find out the datatype of &lt;code&gt;old_list&lt;/code&gt; first.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you need to copy the elements of the list as well, use generic &lt;a href=&quot;https://docs.python.org/2/library/copy.html#copy.deepcopy&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;copy.deepcopy()&lt;/code&gt;&lt;/a&gt;:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\nnew_list = copy.deepcopy(old_list)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Obviously the slowest and most memory-needing method, but sometimes unavoidable. This operates recursively; it will handle any number of levels of nested lists (or other containers).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, val&lt;/span&gt;):\n         self.val = val\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;f&apos;Foo(&lt;span class=&quot;hljs-subst&quot;&gt;{self.val!r}&lt;/span&gt;)&apos;&lt;/span&gt;\n\nfoo = Foo(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\na = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, foo]\nb = a.copy()\nc = a[:]\nd = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a)\ne = copy.copy(a)\nf = copy.deepcopy(a)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# edit orignal list and instance &lt;/span&gt;\na.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;)\nfoo.val = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&apos;original: &lt;span class=&quot;hljs-subst&quot;&gt;{a}&lt;/span&gt;\\nlist.copy(): &lt;span class=&quot;hljs-subst&quot;&gt;{b}&lt;/span&gt;\\nslice: &lt;span class=&quot;hljs-subst&quot;&gt;{c}&lt;/span&gt;\\nlist(): &lt;span class=&quot;hljs-subst&quot;&gt;{d}&lt;/span&gt;\\ncopy: &lt;span class=&quot;hljs-subst&quot;&gt;{e}&lt;/span&gt;\\ndeepcopy: &lt;span class=&quot;hljs-subst&quot;&gt;{f}&lt;/span&gt;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Result:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;original: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, Foo(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.copy(): [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, Foo(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n&lt;span class=&quot;hljs-built_in&quot;&gt;slice&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, Foo(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(): [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, Foo(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\ncopy: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, Foo(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\ndeepcopy: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, Foo(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Felix already provided an excellent answer, but I thought I&apos;d do a speed comparison of the various methods:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;10.59 sec (105.9 µs/itn) -  &lt;a href=&quot;http://docs.python.org/library/copy.html#copy.deepcopy&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;copy.deepcopy(old_list)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;10.16 sec (101.6 µs/itn) - pure Python &lt;code&gt;Copy()&lt;/code&gt; method copying classes with deepcopy&lt;/li&gt;\n&lt;li&gt;1.488 sec (14.88 µs/itn) - pure Python &lt;code&gt;Copy()&lt;/code&gt; method not copying classes (only dicts/lists/tuples)&lt;/li&gt;\n&lt;li&gt;0.325 sec (3.25 µs/itn) - &lt;code&gt;for item in old_list: new_list.append(item)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;0.217 sec (2.17 µs/itn) - &lt;code&gt;[i for i in old_list]&lt;/code&gt; (a &lt;a href=&quot;http://docs.python.org/tutorial/datastructures.html#list-comprehensions&quot; rel=&quot;noreferrer&quot;&gt;list comprehension&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;0.186 sec (1.86 µs/itn) - &lt;a href=&quot;http://docs.python.org/library/copy.html#copy.copy&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;copy.copy(old_list)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;0.075 sec (0.75 µs/itn) - &lt;code&gt;list(old_list)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;0.053 sec (0.53 µs/itn) - &lt;code&gt;new_list = []; new_list.extend(old_list)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;0.039 sec (0.39 µs/itn) - &lt;code&gt;old_list[:]&lt;/code&gt; (&lt;a href=&quot;http://docs.python.org/tutorial/introduction.html#lists&quot; rel=&quot;noreferrer&quot;&gt;list slicing&lt;/a&gt;)&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;So the fastest is list slicing. But be aware that &lt;code&gt;copy.copy()&lt;/code&gt;, &lt;code&gt;list[:]&lt;/code&gt; and &lt;code&gt;list(list)&lt;/code&gt;, unlike &lt;code&gt;copy.deepcopy()&lt;/code&gt; and the python version don&apos;t copy any lists, dictionaries and class instances in the list, so if the originals change, they will change in the copied list too and vice versa.&lt;/p&gt;\n&lt;p&gt;(Here&apos;s the script if anyone&apos;s interested or wants to raise any issues:)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; copy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; deepcopy\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;old_class&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.blah = &lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;new_class&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.blah = &lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;\n\ndignore = {&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, unicode: &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;): &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Copy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, use_deepcopy=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;):\n    t = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(obj)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; t == &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# Convert to a list if a tuple to&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;# allow assigning to when copying&lt;/span&gt;\n            is_tuple = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n            obj = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(obj)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# Otherwise just do a quick slice copy&lt;/span&gt;\n            obj = obj[:]\n            is_tuple = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Copy each item recursively&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(obj)):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(obj[x]) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dignore:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n            obj[x] = Copy(obj[x], use_deepcopy)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; is_tuple:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# Convert back into a tuple again&lt;/span&gt;\n            obj = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(obj)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; t == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Use the fast shallow dict copy() method and copy any&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# values which aren&apos;t immutable (like lists, dicts etc)&lt;/span&gt;\n        obj = obj.copy()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(obj[k]) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dignore:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n            obj[k] = Copy(obj[k], use_deepcopy)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dignore:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Numeric or string/unicode?&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# It&apos;s immutable, so ignore it!&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; use_deepcopy:\n        obj = deepcopy(obj)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n\n    num_times = &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;\n    L = [&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;543.4532&lt;/span&gt;,\n         [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], (&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;,), {&lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;},\n         old_class(), new_class()]\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        Copy(L)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Custom Copy:&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        Copy(L, use_deepcopy=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Custom Copy Only Copying Lists/Tuples/Dicts (no classes):&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        copy.copy(L)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy.copy:&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        copy.deepcopy(L)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy.deepcopy:&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        L[:]\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list slicing [:]:&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(L)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list(L):&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        [i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L]\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list expression(L):&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        a = []\n        a.extend(L)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list extend:&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        a = []\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L:\n            a.append(y)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list append:&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        a = []\n        a.extend(i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;generator expression extend:&apos;&lt;/span&gt;, time()-t\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ve &lt;a href=&quot;http://mail.python.org/pipermail/python-ideas/2013-July/022368.html&quot; rel=&quot;noreferrer&quot;&gt;been told&lt;/a&gt; that Python 3.3+ &lt;a href=&quot;http://bugs.python.org/issue10516&quot; rel=&quot;noreferrer&quot;&gt;adds the &lt;code&gt;list.copy()&lt;/code&gt;&lt;/a&gt; method, which should be as fast as slicing:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;newlist = old_list.copy()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;h1&gt;What are the options to clone or copy a list in Python?&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In Python 3, a shallow copy can be made with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a_copy = a_list.copy()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Python 2 and 3, you can get a shallow copy with a full slice of the original:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a_copy = a_list[:]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Explanation&lt;/h2&gt;\n\n&lt;p&gt;There are two semantic ways to copy a list. A shallow copy creates a new list of the same objects, a deep copy creates a new list containing new equivalent objects.&lt;/p&gt;\n\n&lt;h2&gt;Shallow list copy&lt;/h2&gt;\n\n&lt;p&gt;A shallow copy only copies the list itself, which is a container of references to the objects in the list. If the objects contained themselves are mutable and one is changed, the change will be reflected in both lists. &lt;/p&gt;\n\n&lt;p&gt;There are different ways to do this in Python 2 and 3. The Python 2 ways will also work in Python 3.&lt;/p&gt;\n\n&lt;h3&gt;Python 2&lt;/h3&gt;\n\n&lt;p&gt;In Python 2, the idiomatic way of making a shallow copy of a list is with a complete slice of the original:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a_copy = a_list[:]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also accomplish the same thing by passing the list through the list constructor, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a_copy = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a_list)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but using the constructor is less efficient:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;timeit\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: l[:]))\n&lt;span class=&quot;hljs-number&quot;&gt;0.30504298210144043&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(l)))\n&lt;span class=&quot;hljs-number&quot;&gt;0.40698814392089844&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Python 3&lt;/h3&gt;\n\n&lt;p&gt;In Python 3, lists get the &lt;code&gt;list.copy&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a_copy = a_list.copy()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Python 3.5:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: l[:]))\n&lt;span class=&quot;hljs-number&quot;&gt;0.38448613602668047&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(l)))\n&lt;span class=&quot;hljs-number&quot;&gt;0.6309100328944623&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: l.copy()))\n&lt;span class=&quot;hljs-number&quot;&gt;0.38122922903858125&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Making another pointer does &lt;em&gt;not&lt;/em&gt; make a copy&lt;/h2&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Using new_list = my_list then modifies new_list every time my_list changes. Why is this?&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;code&gt;my_list&lt;/code&gt; is just a name that points to the actual list in memory. When you say &lt;code&gt;new_list = my_list&lt;/code&gt; you&apos;re not making a copy, you&apos;re just adding another name that points at that original list in memory. We can have similar issues when we make copies of lists. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = [[], [], []]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_copy = l[:]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_copy\n[[], [], []]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_copy[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_copy\n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], [], []]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l\n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], [], []]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The list is just an array of pointers to the contents, so a shallow copy just copies the pointers, and so you have two different lists, but they have the same contents. To make copies of the contents, you need a deep copy.&lt;/p&gt;\n\n&lt;h2&gt;Deep copies&lt;/h2&gt;\n\n&lt;p&gt;To make a &lt;a href=&quot;https://docs.python.org/library/copy.html&quot; rel=&quot;noreferrer&quot;&gt;deep copy of a list, in Python 2 or 3, use &lt;code&gt;deepcopy&lt;/code&gt; in the &lt;code&gt;copy&lt;/code&gt; module&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\na_deep_copy = copy.deepcopy(a_list)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To demonstrate how this allows us to make new sub-lists:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l\n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], [], []]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_deep_copy = copy.deepcopy(l)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_deep_copy[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].pop()\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_deep_copy\n[[], [], []]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l\n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], [], []]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And so we see that the deep copied list is an entirely different list from the original. You could roll your own function - but don&apos;t. You&apos;re likely to create bugs you otherwise wouldn&apos;t have by using the standard library&apos;s deepcopy function.&lt;/p&gt;\n\n&lt;h2&gt;Don&apos;t use &lt;code&gt;eval&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;You may see this used as a way to deepcopy, but don&apos;t do it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;problematic_deep_copy = &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(a_list))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ol&gt;\n&lt;li&gt;It&apos;s dangerous, particularly if you&apos;re evaluating something from a source you don&apos;t trust.&lt;/li&gt;\n&lt;li&gt;It&apos;s not reliable, if a subelement you&apos;re copying doesn&apos;t have a representation that can be eval&apos;d to reproduce an equivalent element.&lt;/li&gt;\n&lt;li&gt;It&apos;s also less performant. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In 64 bit Python 2.7:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: copy.deepcopy(l)))\n&lt;span class=&quot;hljs-number&quot;&gt;27.55826997756958&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(l))))\n&lt;span class=&quot;hljs-number&quot;&gt;29.04534101486206&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;on 64 bit Python 3.5:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: copy.deepcopy(l)))\n&lt;span class=&quot;hljs-number&quot;&gt;16.84255409205798&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(l))))\n&lt;span class=&quot;hljs-number&quot;&gt;34.813894678023644&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Let&apos;s start from the beginning and explore this question.&lt;/p&gt;\n&lt;p&gt;So let&apos;s suppose you have two lists:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;list_1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]\nlist_2 = [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And we have to copy both lists, now starting from the first list:&lt;/p&gt;\n&lt;p&gt;So first let&apos;s try by setting the variable &lt;code&gt;copy&lt;/code&gt; to our original list, &lt;code&gt;list_1&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy = list_1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now if you are thinking copy copied the &lt;em&gt;list_1&lt;/em&gt;, then you are wrong. The &lt;code&gt;id&lt;/code&gt; function can show us if two variables can point to the same object. Let&apos;s try this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(copy))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(list_1))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;4329485320&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4329485320&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Both variables are the exact same argument. Are you surprised?&lt;/p&gt;\n&lt;p&gt;So as we know, Python doesn&apos;t store anything in a variable, Variables are just referencing to the object and object store the value. Here object is a &lt;code&gt;list&lt;/code&gt; but we created two references to that same object by two different variable names. This means that both variables are pointing to the same object, just with different names.&lt;/p&gt;\n&lt;p&gt;When you do &lt;code&gt;copy = list_1&lt;/code&gt;, it is actually doing:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/vNGqw.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/vNGqw.jpg&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Here in the image &lt;em&gt;list_1&lt;/em&gt; and &lt;em&gt;copy&lt;/em&gt; are two variable names, but the object is same for both variable which is &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;So if you try to modify copied list then it will modify the original list too because the list is only one there, you will modify that list no matter you do from the copied list or from the original list:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;modify&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(copy)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(list_1)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;modify&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;modify&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So it modified the original list:&lt;/p&gt;\n&lt;p&gt;Now let&apos;s move onto a Pythonic method for copying lists.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy_1 = list_1[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This method fixes the first issue we had:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(copy_1))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(list_1))\n\n&lt;span class=&quot;hljs-number&quot;&gt;4338792136&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4338791432&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So as we can see our both list having different id and it means that both variables are pointing to different objects. So what actually going on here is:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/iitLk.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/iitLk.jpg&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Now let&apos;s try to modify the list and let&apos;s see if we still face the previous problem:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy_1[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;modify&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(list_1)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(copy_1)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;modify&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see, it only modified the copied list. That means it worked.&lt;/p&gt;\n&lt;p&gt;Do you think we&apos;re done? No. Let&apos;s try to copy our nested list.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy_2 = list_2[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;list_2&lt;/code&gt; should reference to another object which is copy of &lt;code&gt;list_2&lt;/code&gt;. Let&apos;s check:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;((list_2)), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(copy_2))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We get the output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;4330403592&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4330403528&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now we can assume both lists are pointing different object, so now let&apos;s try to modify it and let&apos;s see it is giving what we want:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy_2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;modify&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(list_2, copy_2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This gives us the output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;modify&apos;&lt;/span&gt;]] [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;modify&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This may seem a little bit confusing, because the same method we previously used worked. Let&apos;s try to understand this.&lt;/p&gt;\n&lt;p&gt;When you do:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy_2 = list_2[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You&apos;re only copying the outer list, not the inside list. We can use the &lt;code&gt;id&lt;/code&gt; function once again to check this.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(copy_2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(list_2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;4329485832&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4329485832&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When we do &lt;code&gt;copy_2 = list_2[:]&lt;/code&gt;, this happens:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/3hPti.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/3hPti.jpg&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;It creates the copy of list, but only outer list copy, not the nested list copy. The nested list is same for both variable, so if you try to modify the nested list then it will modify the original list too as the nested list object is same for both lists.&lt;/p&gt;\n&lt;p&gt;What is the solution? The solution is the &lt;code&gt;deepcopy&lt;/code&gt; function.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; copy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; deepcopy\ndeep = deepcopy(list_2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Let&apos;s check this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;((list_2)), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(deep))\n\n&lt;span class=&quot;hljs-number&quot;&gt;4322146056&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4322148040&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Both outer lists have different IDs. Let&apos;s try this on the inner nested lists.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(deep[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(list_2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;4322145992&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4322145800&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see both IDs are different, meaning we can assume that both nested lists are pointing different object now.&lt;/p&gt;\n&lt;p&gt;This means when you do &lt;code&gt;deep = deepcopy(list_2)&lt;/code&gt; what actually happens:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/O7yoo.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/O7yoo.jpg&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Both nested lists are pointing different object and they have separate copy of nested list now.&lt;/p&gt;\n&lt;p&gt;Now let&apos;s try to modify the nested list and see if it solved the previous issue or not:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;deep[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;modify&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(list_2, deep)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It outputs:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]] [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;modify&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see, it didn&apos;t modify the original nested list, it only modified the copied list.&lt;/p&gt;\n    ","\n&lt;p&gt;There are many answers already that tell you how to make a proper copy, but none of them say why your original &apos;copy&apos; failed. &lt;/p&gt;\n\n&lt;p&gt;Python doesn&apos;t store values in variables; it binds names to objects. Your original assignment took the object referred to by &lt;code&gt;my_list&lt;/code&gt; and bound it to &lt;code&gt;new_list&lt;/code&gt; as well. No matter which name you use there is still only one list, so changes made when referring to it as &lt;code&gt;my_list&lt;/code&gt; will persist when referring to it as &lt;code&gt;new_list&lt;/code&gt;. Each of the other answers to this question give you different ways of creating a new object to bind to &lt;code&gt;new_list&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;Each element of a list acts like a name, in that each element binds non-exclusively to an object. A shallow copy creates a new list whose elements bind to the same objects as before.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(my_list)  &lt;span class=&quot;hljs-comment&quot;&gt;# or my_list[:], but I prefer this syntax&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# is simply a shorter way of:&lt;/span&gt;\nnew_list = [element &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_list]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To take your list copy one step further, copy each object that your list refers to, and bind those element copies to a new list. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy  \n&lt;span class=&quot;hljs-comment&quot;&gt;# each element must have __copy__ defined for this...&lt;/span&gt;\nnew_list = [copy.copy(element) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_list]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is not yet a deep copy, because each element of a list may refer to other objects, just like the list is bound to its elements. To recursively copy every element in the list, and then each other object referred to by each element, and so on: perform a deep copy. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n&lt;span class=&quot;hljs-comment&quot;&gt;# each element must have __deepcopy__ defined for this...&lt;/span&gt;\nnew_list = copy.deepcopy(my_list)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://docs.python.org/3/library/copy.html&quot; rel=&quot;noreferrer&quot;&gt;the documentation&lt;/a&gt; for more information about corner cases in copying.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;thing[:]&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = a[:]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a += [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Python 3.6 Timings&lt;/h2&gt;\n&lt;p&gt;Here are the timing results using Python 3.6.8. Keep in mind these times are relative to one another, not absolute.&lt;/p&gt;\n&lt;p&gt;I stuck to only doing shallow copies, and also added some new methods that weren&apos;t possible in Python&amp;nbsp;2, such as &lt;code&gt;list.copy()&lt;/code&gt; (the Python&amp;nbsp;3 &lt;a href=&quot;https://mail.python.org/pipermail/python-ideas/2013-July/022368.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;slice equivalent&lt;/a&gt;) and two forms of &lt;a href=&quot;https://stackoverflow.com/questions/43190992/understanding-x-lst&quot;&gt;list unpacking&lt;/a&gt; (&lt;code&gt;*new_list, = list&lt;/code&gt; and &lt;code&gt;new_list = [*list]&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;METHOD                TIME TAKEN\nb = [*a]               &lt;span class=&quot;hljs-number&quot;&gt;2.75180600000021&lt;/span&gt;\nb = a * &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;              &lt;span class=&quot;hljs-number&quot;&gt;3.50215399999990&lt;/span&gt;\nb = a[:]               &lt;span class=&quot;hljs-number&quot;&gt;3.78278899999986&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# Python 2 winner (see above)&lt;/span&gt;\nb = a.copy()           &lt;span class=&quot;hljs-number&quot;&gt;4.20556500000020&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# Python 3 &quot;slice equivalent&quot; (see above)&lt;/span&gt;\nb = []; b.extend(a)    &lt;span class=&quot;hljs-number&quot;&gt;4.68069800000012&lt;/span&gt;\nb = a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a)]        &lt;span class=&quot;hljs-number&quot;&gt;6.84498999999959&lt;/span&gt;\n*b, = a                &lt;span class=&quot;hljs-number&quot;&gt;7.54031799999984&lt;/span&gt;\nb = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a)            &lt;span class=&quot;hljs-number&quot;&gt;7.75815899999997&lt;/span&gt;\nb = [i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a]    &lt;span class=&quot;hljs-number&quot;&gt;18.4886440000000&lt;/span&gt;\nb = copy.copy(a)      &lt;span class=&quot;hljs-number&quot;&gt;18.8254879999999&lt;/span&gt;\nb = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a:\n  b.append(item)      &lt;span class=&quot;hljs-number&quot;&gt;35.4729199999997&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can see the Python 2 winner still does well, but doesn&apos;t edge out Python 3 &lt;code&gt;list.copy()&lt;/code&gt; by much, especially considering the superior readability of the latter.&lt;/p&gt;\n&lt;p&gt;The dark horse is the unpacking and repacking method (&lt;code&gt;b = [*a]&lt;/code&gt;), which is ~25% faster than raw slicing, and more than twice as fast as the other unpacking method (&lt;code&gt;*b, = a&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;b = a * 1&lt;/code&gt; also does surprisingly well.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Note that these methods do &lt;em&gt;not&lt;/em&gt; output equivalent results for any input other than lists.&lt;/strong&gt; They all work for sliceable objects, a few work for any iterable, but only &lt;code&gt;copy.copy()&lt;/code&gt; works for more general Python objects.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Here is the testing code for interested parties (&lt;a href=&quot;https://stackoverflow.com/questions/13047895/efficient-ways-to-duplicate-array-list-in-python&quot;&gt;Template from here&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n\nCOUNT = &lt;span class=&quot;hljs-number&quot;&gt;50000000&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Array duplicating. Tests run&quot;&lt;/span&gt;, COUNT, &lt;span class=&quot;hljs-string&quot;&gt;&quot;times&quot;&lt;/span&gt;)\nsetup = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a = [0,1,2,3,4,5,6,7,8,9]; import copy&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = list(a)\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = list(a)&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = copy.copy(a)\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = copy.copy(a)&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = a.copy()\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = a.copy()&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = a[:]\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = a[:]&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = a[0:len(a)]\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = a[0:len(a)]&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*b, = a\\t\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;*b, = a&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = []; b.extend(a)\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = []; b.extend(a)&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = []; for item in a: b.append(item)\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = []\\nfor item in a:  b.append(item)&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = [i for i in a]\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = [i for i in a]&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = [*a]\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = [*a]&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = a * 1\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = a * 1&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Python&apos;s idiom for doing this is &lt;code&gt;newList = oldList[:]&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;All of the other contributors gave &lt;strong&gt;great&lt;/strong&gt; answers, which work when you have a single dimension (leveled) list, however of the methods mentioned so far, only &lt;code&gt;copy.deepcopy()&lt;/code&gt; works to clone/copy a list and not have it point to the nested &lt;code&gt;list&lt;/code&gt; objects when you are working with multidimensional, nested lists (list of lists). While &lt;a href=&quot;https://stackoverflow.com/users/218196/felix-kling&quot;&gt;Felix Kling&lt;/a&gt; refers to it in his answer, there is a little bit more to the issue and possibly a workaround using built-ins that might prove a faster alternative to &lt;code&gt;deepcopy&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;While &lt;code&gt;new_list = old_list[:]&lt;/code&gt;, &lt;code&gt;copy.copy(old_list)&apos;&lt;/code&gt; and for Py3k &lt;code&gt;old_list.copy()&lt;/code&gt; work for single-leveled lists, they revert to pointing at the &lt;code&gt;list&lt;/code&gt; objects nested within the &lt;code&gt;old_list&lt;/code&gt; and the &lt;code&gt;new_list&lt;/code&gt;, and changes to one of the &lt;code&gt;list&lt;/code&gt; objects are perpetuated in the other.&lt;/p&gt;\n&lt;h1&gt;Edit: New information brought to light&lt;/h1&gt;\n&lt;blockquote&gt;\n&lt;p&gt;As was pointed out by both &lt;a href=&quot;https://stackoverflow.com/users/541136/aaron-hall&quot;&gt;Aaron Hall&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/users/4014959/pm-2ring&quot;&gt;PM 2Ring&lt;/a&gt; &lt;strong&gt;using &lt;code&gt;eval()&lt;/code&gt; is not only a bad idea, it is also much slower than &lt;code&gt;copy.deepcopy()&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This means that for multidimensional lists, the only option is &lt;code&gt;copy.deepcopy()&lt;/code&gt;. With that being said, it really isn&apos;t an option as the performance goes way south when you try to use it on a moderately sized multidimensional array.  I tried to &lt;code&gt;timeit&lt;/code&gt; using a 42x42 array, not unheard of or even that large for bioinformatics applications, and I gave up on waiting for a response and just started typing my edit to this post.&lt;/p&gt;\n&lt;p&gt;It would seem that the only real option then is to initialize multiple lists and work on them independently. If anyone has any other suggestions, for how to handle multidimensional list copying, it would be appreciated.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;As others have stated, there  &lt;em&gt;&lt;strong&gt;are significant&lt;/strong&gt;&lt;/em&gt; performance issues using the &lt;code&gt;copy&lt;/code&gt; module and &lt;code&gt;copy.deepcopy&lt;/code&gt; &lt;em&gt;&lt;strong&gt;for multidimensional lists&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It surprises me that this hasn&apos;t been mentioned yet, so for the sake of completeness...&lt;/p&gt;\n\n&lt;p&gt;You can perform list unpacking with the &quot;splat operator&quot;: &lt;code&gt;*&lt;/code&gt;, which will also copy elements of your list.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;old_list = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\nnew_list = [*old_list]\n\nnew_list.append(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\nold_list == [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\nnew_list == [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The obvious downside to this method is that it is only available in Python 3.5+.&lt;/p&gt;\n\n&lt;p&gt;Timing wise though, this appears to perform better than other common methods.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = [random.random() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)]\n\n%timeit a = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(x)\n%timeit a = x.copy()\n%timeit a = x[:]\n\n%timeit a = [*x]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#: 2.47 µs ± 38.1 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#: 2.47 µs ± 54.6 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#: 2.39 µs ± 58.2 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#: 2.22 µs ± 43.2 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = my_list[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;new_list = my_list&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Try to understand this. Let&apos;s say that &lt;em&gt;my_list&lt;/em&gt; is in the heap memory at location X, i.e., &lt;em&gt;my_list&lt;/em&gt; is pointing to the X. Now by assigning &lt;code&gt;new_list = my_list&lt;/code&gt; you&apos;re letting &lt;em&gt;new_list&lt;/em&gt; point to the X. This is known as a &lt;em&gt;shallow copy&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Now if you assign &lt;code&gt;new_list = my_list[:]&lt;/code&gt;, you&apos;re simply copying each object of &lt;em&gt;my_list&lt;/em&gt; to &lt;em&gt;new_list&lt;/em&gt;. This is known as a &lt;em&gt;deep copy&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;The &lt;em&gt;other&lt;/em&gt; ways you can do this are:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(old_list)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\nnew_list = copy.deepcopy(old_list)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;A very simple approach independent of python version was missing in already-given answers which you can use most of the time (at least I do):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = my_list * &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;hljs-comment&quot;&gt;# Solution 1 when you are not using nested lists&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, &lt;em&gt;if&lt;/em&gt; &lt;em&gt;my_list&lt;/em&gt; contains other containers (for example, nested lists) you must use &lt;em&gt;deepcopy&lt;/em&gt; as others suggested in the answers above from the copy library. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\nnew_list = copy.deepcopy(my_list)   &lt;span class=&quot;hljs-comment&quot;&gt;# Solution 2 when you are using nested lists&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;.&lt;strong&gt;Bonus&lt;/strong&gt;: If you don&apos;t want to copy elements use (AKA shallow copy):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = my_list[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Let&apos;s understand difference between solution #1 and solution #2&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = a*&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a,b\n([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;])\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a,b\n([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see, solution #1 worked perfectly when we were not using the nested lists. Let&apos;s check what will happen when we apply solution #1 to nested lists.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; copy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; deepcopy\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(i,i+&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = a*&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c = deepcopy(a)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (a, b, c): &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; i\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;99&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (a, b, c): &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; i\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;]]\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;]]   &lt;span class=&quot;hljs-comment&quot;&gt;# Solution #1 didn&apos;t work in nested list&lt;/span&gt;\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]       &lt;span class=&quot;hljs-comment&quot;&gt;# Solution #2 - DeepCopy worked in nested list&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I wanted to post something a bit different than some of the other answers. Even though this is most likely not the most understandable, or fastest option, it provides a bit of an inside view of how deep copy works, as well as being another alternative option for deep copying. It doesn&apos;t really matter if my function has bugs, since the point of this is to show a way to copy objects like the question answers, but also to use this as a point to explain how deepcopy works at its core.&lt;/p&gt;\n&lt;p&gt;At the core of any deep copy function is way to make a shallow copy. How? Simple. Any deep copy function only duplicates the containers of immutable objects. When you deepcopy a nested list, you are only duplicating the outer lists, not the mutable objects inside of the lists. You are only duplicating the containers. The same works for classes, too. When you deepcopy a class, you deepcopy all of its mutable attributes. So, how? How come you only have to copy the containers, like lists, dicts, tuples, iters, classes, and class instances?&lt;/p&gt;\n&lt;p&gt;It&apos;s simple. A mutable object can&apos;t really be duplicated. It can never be changed, so it is only a single value. That means you never have to duplicate strings, numbers, bools, or any of those. But how would you duplicate the containers? Simple. You make just initialize a new container with all of the values. Deepcopy relies on recursion. It duplicates all the containers, even ones with containers inside of them, until no containers are left. A container is an immutable object.&lt;/p&gt;\n&lt;p&gt;Once you know that, completely duplicating an object without any references is pretty easy. Here&apos;s a function for deepcopying basic data-types (wouldn&apos;t work for custom classes but you could always add that)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepcopy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n  immutables = (&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;)\n  mutables = (&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, immutables):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, mutables):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;):\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(deepcopy(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(x)))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [deepcopy(y) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;):\n      values = [deepcopy(y) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(x.values())]\n      keys = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(x.keys())\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(keys, values))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python&apos;s own built-in deepcopy is based around that example. The only difference is it supports other types, and also supports user-classes by duplicating the attributes into a new duplicate class, and also blocks infinite-recursion with a reference to an object it&apos;s already seen using a memo list or dictionary. And that&apos;s really it for making deep copies. At its core, making a deep copy is just making shallow copies. I hope this answer adds something to the question.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;EXAMPLES&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Say you have this list: &lt;code&gt;[1, 2, 3]&lt;/code&gt;. The immutable numbers cannot be duplicated, but the other layer can. You can duplicate it using a list comprehension: &lt;code&gt;[x for x in [1, 2, 3]]&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Now, imagine you have this list: &lt;code&gt;[[1, 2], [3, 4], [5, 6]]&lt;/code&gt;. This time, you want to make a function, which uses recursion to deep copy all layers of the list. Instead of the previous list comprehension:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It uses a new one for lists:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[deepcopy_list(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And &lt;strong&gt;deepcopy_list&lt;/strong&gt; looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepcopy_list&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, (&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [deepcopy_list(y) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then now you have a function which can deepcopy any list of &lt;strong&gt;strs, bools, floast, ints&lt;/strong&gt; and even &lt;strong&gt;lists&lt;/strong&gt; to infinitely many layers using recursion. And there you have it, deepcopying.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;: Deepcopy uses recursion to duplicate objects, and merely returns the same immutable objects as before, as immutable objects cannot be duplicated. However, it deepcopies the most inner layers of mutable objects until it reaches the outermost mutable layer of an object.&lt;/p&gt;\n    ","\n&lt;p&gt;Note that there are some cases where if you have defined your own custom class and you want to keep the attributes then you should use &lt;code&gt;copy.copy()&lt;/code&gt; or &lt;code&gt;copy.deepcopy()&lt;/code&gt; rather than the alternatives, for example in Python 3:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyList&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;list&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\nlst = MyList([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n\nlst.name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;custom list&apos;&lt;/span&gt;\n\nd = {\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;original&apos;&lt;/span&gt;: lst,\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;slicecopy&apos;&lt;/span&gt; : lst[:],\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;lstcopy&apos;&lt;/span&gt; : lst.copy(),\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;copycopy&apos;&lt;/span&gt;: copy.copy(lst),\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;deepcopy&apos;&lt;/span&gt;: copy.deepcopy(lst)\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k,v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;lst: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(k), end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;, &apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        name = v.name\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; AttributeError:\n        name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;NA&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(name))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Outputs:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lst: original, name: custom &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;\nlst: slicecopy, name: NA\nlst: lstcopy, name: NA\nlst: copycopy, name: custom &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;\nlst: deepcopy, name: custom &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Remember that in Python when you do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    list1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;apples&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;bananas&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapples&apos;&lt;/span&gt;]\n    list2 = list1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;List2 isn&apos;t storing the actual list, but a reference to list1. So when you do anything to list1, list2 changes as well. use the copy module (not default, download on pip) to make an original copy of the list(&lt;code&gt;copy.copy()&lt;/code&gt; for simple lists, &lt;code&gt;copy.deepcopy()&lt;/code&gt; for nested ones). This makes a copy that doesn&apos;t change with the first list.&lt;/p&gt;\n    ","\n&lt;p&gt;A slight practical perspective to look into memory through id and gc. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = a = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(b), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(c)\n(&lt;span class=&quot;hljs-number&quot;&gt;4424020872&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424020872&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4423979272&lt;/span&gt;) \n     |           |\n      -----------\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(b[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(c[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n(&lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# all referring to same &apos;hell&apos;&lt;/span&gt;\n     |           |           |\n      -----------------------\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(b[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(c[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n(&lt;span class=&quot;hljs-number&quot;&gt;4422785208&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4422785208&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4422785208&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# all referring to same &apos;h&apos;&lt;/span&gt;\n     |           |           |\n      -----------------------\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] += &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a,b,c\n([&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;])  &lt;span class=&quot;hljs-comment&quot;&gt;# b changed too&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(b[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(c[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n(&lt;span class=&quot;hljs-number&quot;&gt;4424018384&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424018384&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# augmented assignment changed a[0],b[0]&lt;/span&gt;\n     |           |\n      -----------\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = a = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(b[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(c[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n(&lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# the same hell&lt;/span&gt;\n     |           |           |\n      -----------------------\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; gc\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;gc.get_referrers(a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) \n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;]]  &lt;span class=&quot;hljs-comment&quot;&gt;# one copy belong to a,b, the another for c&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;gc.get_referrers((&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;))\n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;], (&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)] &lt;span class=&quot;hljs-comment&quot;&gt;# (&apos;hello&apos;, None) &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is another way of copying a list that was not listed until now: adding an empty list: &lt;code&gt;l2 = l + []&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;I tested it with Python 3.8:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;l = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\nl2 = l + []\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(l,l2)\nl[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(l,l2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is not the best answer, but it works.&lt;/p&gt;\n    ","\n&lt;p&gt;The deepcopy option is the only method that works for me:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; copy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; deepcopy\n\na = [   [ &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ]   ]\nb = deepcopy(a)\nb[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Deep:&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------&apos;&lt;/span&gt;)\na = [   [ &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ]   ]\nb = a*&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nb[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;*1:&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------&apos;&lt;/span&gt;)\na = [   [ &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ] ]\nb = a[:]\nb[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Vector copy:&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------&apos;&lt;/span&gt;)\na = [   [ &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ]  ]\nb = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a)\nb[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;List copy:&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------&apos;&lt;/span&gt;)\na = [   [ &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ]  ]\nb = a.copy()\nb[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.copy():&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------&apos;&lt;/span&gt;)\na = [   [ &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ]  ]\nb = a\nb[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Shallow:&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;leads to output of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Deep:\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n-----------------------------\n*&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n-----------------------------\nVector copy:\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n-----------------------------\n&lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; copy:\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n-----------------------------\n.copy():\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n-----------------------------\nShallow:\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n-----------------------------\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is because, the line &lt;code&gt;new_list = my_list&lt;/code&gt; assigns a new reference to the variable &lt;code&gt;my_list&lt;/code&gt; which is &lt;code&gt;new_list&lt;/code&gt;\nThis is similar to the &lt;code&gt;C&lt;/code&gt; code given below,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; my_list[] = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *new_list;\nnew_list = my_list;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You should use the copy module to create a new list by&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\nnew_list = copy.deepcopy(my_list)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The method to use depends on the contents of the list being copied. If the list contains nested &lt;code&gt;dicts&lt;/code&gt; than deepcopy is the only method that works, otherwise most of the methods listed in the answers (slice, loop [for], copy, extend, combine, or unpack) will work and execute in similar time (except for loop and deepcopy, which preformed the worst).&lt;/p&gt;\n&lt;h3&gt;Script&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; random &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; randint\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n\nitem_count = &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copy_type&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l1: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, l2: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; l1 == l2:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;shallow&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;deep&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run_time&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;start, end&lt;/span&gt;):\n  run = end - start\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(run * &lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_combine&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = [] + l1\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;combine&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_extend&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = []\n  l2.extend(l1)\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;extend&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_unpack&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = [*l1]\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;unpack&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_deepcopy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = copy.deepcopy(l1)\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;deepcopy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_copy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.copy(l1)\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_slice&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = l1[:]\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;slice&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_loop&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = []\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l1)):\n    l2.append(l1[i])\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;loop&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_list&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(l1)\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;list()&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n  list_type = [{&lt;span class=&quot;hljs-string&quot;&gt;&apos;list[dict]&apos;&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]}}, \n          {&lt;span class=&quot;hljs-string&quot;&gt;&apos;list[list]&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]}]\n  store = []\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list_type:\n    key = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(data.keys())[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n    store.append({key: [list_unpack(data[key]), list_extend(data[key]), \n                list_combine(data[key]), list_deepcopy(data[key]), \n                list_copy(data[key]), list_slice(data[key]),           \n                list_loop(data[key])]})\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(store)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Results&lt;/h3&gt;\n&lt;pre class=&quot;lang-json s-code-block&quot;&gt;&lt;code class=&quot;hljs language-json&quot;&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;list[dict]&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;unpack&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;shallow&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;56149&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;extend&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;shallow&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;52991&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;combine&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;shallow&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;53726&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deepcopy&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2702616&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;copy&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;shallow&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;52204&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;slice&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;shallow&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;52223&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;loop&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;shallow&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;836928&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;list[list]&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;unpack&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;52313&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;extend&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;52550&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;combine&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;53203&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deepcopy&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2608560&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;copy&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;53210&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;slice&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;52937&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;loop&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;834774&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;new_list = my_list&lt;/code&gt; just assigns the name &lt;code&gt;new_list&lt;/code&gt; to the object &lt;code&gt;my_list&lt;/code&gt; refers to.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/371334/andrew&quot; title=&quot;1,049 reputation&quot; class=&quot;comment-user&quot;&gt;Andrew&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment123683957_2612802&quot;&gt;&lt;span title=&quot;2021-11-15 00:52:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 15, 2021 at 0:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See the &lt;a href=&quot;https://docs.python.org/3/faq/programming.html#why-did-changing-list-y-also-change-list-x&quot; rel=&quot;nofollow noreferrer&quot;&gt;Python FAQ&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1658617/bharel&quot; title=&quot;20,426 reputation&quot; class=&quot;comment-user&quot;&gt;Bharel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125187420_2612802&quot;&gt;&lt;span title=&quot;2022-01-22 14:11:09Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 22 at 14:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See also: &lt;a href=&quot;https://stackoverflow.com/questions/240178&quot;&gt;stackoverflow.com/questions/240178&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/523612/karl-knechtel&quot; title=&quot;57,128 reputation&quot; class=&quot;comment-user&quot;&gt;Karl Knechtel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128071906_2612802&quot;&gt;&lt;span title=&quot;2022-06-04 12:39:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 4 at 12:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Related: &lt;a href=&quot;https://stackoverflow.com/q/2322068/6064933&quot;&gt;this post&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/q/15377050/6064933&quot;&gt;this&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6064933/jdhao&quot; title=&quot;18,762 reputation&quot; class=&quot;comment-user&quot;&gt;jdhao&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128097571_2612802&quot;&gt;&lt;span title=&quot;2022-06-06 08:04:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 6 at 8:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;As @Georgy points out correctly in the answer below, any changes to the new_list values will also change the values in my_list. So actually the copy.deepcopy() method is the only real copy without reference to the original list and it&apos;s values.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4688965/moojen&quot; title=&quot;847 reputation&quot; class=&quot;comment-user&quot;&gt;moojen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115618926_2612815&quot;&gt;&lt;span title=&quot;2020-12-21 17:27:56Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 21, 2020 at 17:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You&apos;re right, it was edited by you, but posted by @cryo Sorry for the mixup!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4688965/moojen&quot; title=&quot;847 reputation&quot; class=&quot;comment-user&quot;&gt;moojen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115619599_2612815&quot;&gt;&lt;span title=&quot;2020-12-21 17:52:36Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 21, 2020 at 17:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Which one is fastest?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/194305/uuu777&quot; title=&quot;667 reputation&quot; class=&quot;comment-user&quot;&gt;uuu777&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment119114774_2612815&quot;&gt;&lt;span title=&quot;2021-05-04 18:10:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 4, 2021 at 18:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I was having the same issue with a list of json (each element of a list was a json) and the only one that worked was new_list = copy.deepcopy(old_list) ; I&apos;m writing this since anyone can encounter the same issue. Thanks!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/13427588/tom&quot; title=&quot;372 reputation&quot; class=&quot;comment-user&quot;&gt;Tom&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment119289354_2612815&quot;&gt;&lt;span title=&quot;2021-05-11 15:23:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 11, 2021 at 15:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1 for slicing &lt;code&gt;[:]&lt;/code&gt; it is a simple and compact syntax and it does make sense to use it every time you need to copy a list and can avoid a &lt;code&gt;deepcopy&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5069105/raf&quot; title=&quot;1,323 reputation&quot; class=&quot;comment-user&quot;&gt;Raf&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122593045_2612815&quot;&gt;&lt;span title=&quot;2021-09-28 11:02:53Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 28, 2021 at 11:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Does it mean that append and list comprehension are the best options?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/194305/uuu777&quot; title=&quot;667 reputation&quot; class=&quot;comment-user&quot;&gt;uuu777&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment119115083_2612990&quot;&gt;&lt;span title=&quot;2021-05-04 18:24:27Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 4, 2021 at 18:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I have a cache containing a list of classes, I want to take lock, copy out the list, release lock. I hope that it is enough to use built-in copy to protect copied out list from changing when cached copy is changed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/194305/uuu777&quot; title=&quot;667 reputation&quot; class=&quot;comment-user&quot;&gt;uuu777&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment119115278_2612990&quot;&gt;&lt;span title=&quot;2021-05-04 18:32:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 4, 2021 at 18:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I keep on coming back to this answer to make sure that I am using the most efficient method. What is the easiest way to test this? Or is there a database with all of the best ways to minimise run time?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11855891/klim-yadrintsev&quot; title=&quot;71 reputation&quot; class=&quot;comment-user&quot;&gt;Klim Yadrintsev&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124242121_2612990&quot;&gt;&lt;span title=&quot;2021-12-09 00:34:02Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 9, 2021 at 0:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yes, and as per docs &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs.python.org/3/library/stdtypes.html#mutable-sequence-types&lt;/a&gt;, &lt;code&gt;s.copy()&lt;/code&gt; creates a shallow copy of &lt;code&gt;s&lt;/code&gt; (same as &lt;code&gt;s[:]&lt;/code&gt;).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/321629/cybermew&quot; title=&quot;903 reputation&quot; class=&quot;comment-user&quot;&gt;CyberMew&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91949096_17810305&quot;&gt;&lt;span title=&quot;2018-09-25 18:07:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 25, 2018 at 18:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Actually it seems that currently, &lt;code&gt;python3.8&lt;/code&gt;, &lt;code&gt;.copy()&lt;/code&gt; is &lt;b&gt;slightly faster&lt;/b&gt; than slicing. See below @AaronsHall answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4428520/loved-by-jesus&quot; title=&quot;1,847 reputation&quot; class=&quot;comment-user&quot;&gt;loved.by.Jesus&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment108624099_17810305&quot;&gt;&lt;span title=&quot;2020-04-24 08:11:09Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 24, 2020 at 8:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@loved.by.Jesus: Yeah, they &lt;a href=&quot;https://bugs.python.org/issue26110&quot; rel=&quot;nofollow noreferrer&quot;&gt;added optimizations for Python level method calls in 3.7&lt;/a&gt; that were extended to &lt;a href=&quot;https://www.python.org/dev/peps/pep-0590/&quot; rel=&quot;nofollow noreferrer&quot;&gt;C extension method calls in 3.8 by PEP 590&lt;/a&gt; that remove the overhead of creating a bound method each time you call a method, so the cost to call &lt;code&gt;alist.copy()&lt;/code&gt; is now a &lt;code&gt;dict&lt;/code&gt; lookup on the &lt;code&gt;list&lt;/code&gt; type, then a relatively cheap no-arg function call that ultimately invokes the same thing as slicing. Slicing still has to build a &lt;code&gt;slice&lt;/code&gt; object, then go through type checks and unpacking to do the same thing.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/364696/shadowranger&quot; title=&quot;127,504 reputation&quot; class=&quot;comment-user&quot;&gt;ShadowRanger&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115053799_17810305&quot;&gt;&lt;span title=&quot;2020-11-30 18:33:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 30, 2020 at 18:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Of course, they&apos;re working on &lt;a href=&quot;https://bugs.python.org/issue42454&quot; rel=&quot;nofollow noreferrer&quot;&gt;optimizing out the repeated builds of constant slices&lt;/a&gt;, so in 3.10 slicing might win again. It&apos;s all pretty meaningless though; the asymptotic performance is identical, and the fixed overhead relatively small, so it doesn&apos;t really matter which approach you use.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/364696/shadowranger&quot; title=&quot;127,504 reputation&quot; class=&quot;comment-user&quot;&gt;ShadowRanger&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115053871_17810305&quot;&gt;&lt;span title=&quot;2020-11-30 18:36:02Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 30, 2020 at 18:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You don&apos;t need a deepcopy if the list is 2D. If it is a list of lists, and those lists don&apos;t have lists inside of them, you can use a for loop. Presently, I am using   &lt;code&gt;list_copy=[]&lt;/code&gt; &lt;code&gt;for item in list:     list_copy.append(copy(item))&lt;/code&gt; and it is much faster.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10136347/john-locke&quot; title=&quot;185 reputation&quot; class=&quot;comment-user&quot;&gt;John Locke&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95089106_26562235&quot;&gt;&lt;span title=&quot;2019-01-10 12:44:59Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 10, 2019 at 12:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Can confirm still a similar story on 3.8 &lt;code&gt;b=[*a]&lt;/code&gt; - the one obvious way to do it;).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6560549/supershoot&quot; title=&quot;8,653 reputation&quot; class=&quot;comment-user&quot;&gt;SuperShoot&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106994593_43220129&quot;&gt;&lt;span title=&quot;2020-03-02 00:02:40Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 2, 2020 at 0:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Some of these timing comparisons aren&apos;t particularly meaningful when copying such tiny lists. It would be more informative to test with a range of list lengths (including some very large ones).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/984421/ekhumoro&quot; title=&quot;108,217 reputation&quot; class=&quot;comment-user&quot;&gt;ekhumoro&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114824554_43220129&quot;&gt;&lt;span title=&quot;2020-11-21 20:15:28Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 21, 2020 at 20:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The timing numbers ought to rounded to the appropriate number of significant digits. 15 significant digits do not make any sense.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/63550/peter-mortensen&quot; title=&quot;30,018 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Mortensen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment119298412_43220129&quot;&gt;&lt;span title=&quot;2021-05-11 21:43:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 11, 2021 at 21:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;ve essentially just pasted the raw output of the timing code here. Seems like your gripe is more about how &lt;a href=&quot;https://docs.python.org/3/library/timeit.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;timeit&lt;/a&gt; displays timings, which I have little control over.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3745896/river&quot; title=&quot;8,070 reputation&quot; class=&quot;comment-user&quot;&gt;River&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment119447900_43220129&quot;&gt;&lt;span title=&quot;2021-05-18 00:38:32Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 18, 2021 at 0:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Is the &lt;code&gt;a * 1&lt;/code&gt; method really not possible in 2.x?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/523612/karl-knechtel&quot; title=&quot;57,128 reputation&quot; class=&quot;comment-user&quot;&gt;Karl Knechtel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128722434_43220129&quot;&gt;&lt;span title=&quot;2022-07-06 05:33:16Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 6 at 5:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This won&apos;t always work, since there&apos;s no guarantee that the string returned by &lt;code&gt;repr()&lt;/code&gt; is sufficient to re-create the object. Also, &lt;code&gt;eval()&lt;/code&gt; is a tool of last resort; see &lt;a href=&quot;http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Eval really is dangerous&lt;/a&gt; by SO veteran Ned Batchelder for details. So when you advocate the use &lt;code&gt;eval()&lt;/code&gt; you &lt;i&gt;really&lt;/i&gt; should mention that it can be dangerous.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4014959/pm-2ring&quot; title=&quot;52,419 reputation&quot; class=&quot;comment-user&quot;&gt;PM 2Ring&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50671649_31332158&quot;&gt;&lt;span title=&quot;2015-07-10 14:51:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 10, 2015 at 14:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Fair point. Though I think that Batchelder&apos;s point is that the having the &lt;code&gt;eval()&lt;/code&gt; function in Python in general is a risk. It isn&apos;t so much whether or not you make use of the function in code but that it is a security hole in Python in and of itself.  My example isn&apos;t using it with a function that receives input from &lt;code&gt;input()&lt;/code&gt;, &lt;code&gt;sys.agrv&lt;/code&gt;, or even a text file. It is more along the lines of initializing a blank multidimensional list once, and then just having a way of copying it in a loop instead of reinitializing at each iteration of the loop.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4418502/amr&quot; title=&quot;564 reputation&quot; class=&quot;comment-user&quot;&gt;AMR&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50675773_31332158&quot;&gt;&lt;span title=&quot;2015-07-10 16:41:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 10, 2015 at 16:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;As @AaronHall has pointed out, there is likely a significant performance issue to using &lt;code&gt;new_list = eval(repr(old_list))&lt;/code&gt;, so besides it being a bad idea, it probably is also way too slow to work.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4418502/amr&quot; title=&quot;564 reputation&quot; class=&quot;comment-user&quot;&gt;AMR&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50676956_31332158&quot;&gt;&lt;span title=&quot;2015-07-10 17:19:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 10, 2015 at 17:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How does this method behave when modifying copies?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1147688/not2qubit&quot; title=&quot;12,170 reputation&quot; class=&quot;comment-user&quot;&gt;not2qubit&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91902477_48980683&quot;&gt;&lt;span title=&quot;2018-09-24 13:35:16Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 24, 2018 at 13:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@not2qubit do you mean appending to or editing elements of the new list. In the example &lt;code&gt;old_list&lt;/code&gt; and &lt;code&gt;new_list&lt;/code&gt; are two different lists, editing one will not change the other (unless youre directly mutating the elements themselves (such as list of list), none-of these methods are deep copies).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1112586/scb&quot; title=&quot;5,411 reputation&quot; class=&quot;comment-user&quot;&gt;SCB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91940819_48980683&quot;&gt;&lt;span title=&quot;2018-09-25 14:07:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 25, 2018 at 14:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Technically, &lt;code&gt;my_list[:]&lt;/code&gt; is a shallow copy. The only way to deepcopy a list is using &lt;code&gt;copy.deepcopy()&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/17369291/2pichar&quot; title=&quot;1,173 reputation&quot; class=&quot;comment-user&quot;&gt;2pichar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125710533_44768652&quot;&gt;&lt;span title=&quot;2022-02-14 16:33:48Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 14 at 16:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This works and, in my testing, is as fast as the fastest options for longer lists, and only slightly worse than &lt;code&gt;b = [*a]&lt;/code&gt; for short lists.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/523612/karl-knechtel&quot; title=&quot;57,128 reputation&quot; class=&quot;comment-user&quot;&gt;Karl Knechtel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128722772_62716254&quot;&gt;&lt;span title=&quot;2022-07-06 06:02:00Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 6 at 6:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;deepcopy must be used only when needed and one should be aware of what it really does.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6451573/jean-fran%c3%a7ois-fabre&quot; title=&quot;132,267 reputation&quot; class=&quot;comment-user&quot;&gt;Jean-François Fabre&lt;/a&gt;\n&lt;span class=&quot;mod-flair &quot; title=&quot;Moderator&quot;&gt;&lt;/span&gt;                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114764971_61155939&quot;&gt;&lt;span title=&quot;2020-11-19 13:43:05Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 19, 2020 at 13:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":53,"title":"How do I clone a list so that it doesn't change unexpectedly after assignment?","content":"\n                \n&lt;p&gt;While using &lt;code&gt;new_list = my_list&lt;/code&gt;, any modifications to &lt;code&gt;new_list&lt;/code&gt; changes &lt;code&gt;my_list&lt;/code&gt; every time. Why is this, and how can I clone or copy the list to prevent it?&lt;/p&gt;\n    ","slug":"how-do-i-clone-a-list-so-that-it-doesn't-change-unexpectedly-after-assignment-1657384423195","postType":"QUESTION","createdAt":"2022-07-09T16:33:43.000Z","updatedAt":"2022-07-09T16:33:43.000Z","tags":[{"id":190,"name":"reference","slug":"reference","createdAt":"2022-07-09T16:33:43.000Z","updatedAt":"2022-07-09T16:33:43.000Z","Questions_Tags":{"questionId":53,"tagId":190}}]}]}},"__N_SSG":true}