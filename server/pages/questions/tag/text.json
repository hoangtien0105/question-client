{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;If you don&apos;t care about escaping comma and newline,&lt;br&gt;\nAND you can&apos;t embed comma and newline in quotes (If you can&apos;t escape then...)&lt;br&gt;\nthen its only about three lines of code (OK 14 -&amp;gt;But its only 15 to read the whole file).&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getNextLineAndSplitIntoTokens&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::istream&amp;amp; str)&lt;/span&gt;\n&lt;/span&gt;{\n    std::vector&amp;lt;std::string&amp;gt;   result;\n    std::string                line;\n    std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(str,line);\n\n    &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream          &lt;span class=&quot;hljs-title&quot;&gt;lineStream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(line)&lt;/span&gt;&lt;/span&gt;;\n    std::string                cell;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(lineStream,cell, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;))\n    {\n        result.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(cell);\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This checks for a trailing comma with no data after it.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!lineStream &amp;amp;&amp;amp; cell.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;())\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// If there was a trailing comma then add an empty element.&lt;/span&gt;\n        result.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I would just create a class representing a row.&lt;br&gt;\nThen stream into that object:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CSVRow&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n        std::string_view &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;[](std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; index) &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;string_view&lt;/span&gt;(&amp;amp;m_line[m_data[index] + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], m_data[index + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] -  (m_data[index] + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n        }\n        &lt;span class=&quot;hljs-function&quot;&gt;std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;\n        &lt;/span&gt;{\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; m_data.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;readNextRow&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::istream&amp;amp; str)&lt;/span&gt;\n        &lt;/span&gt;{\n            std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(str, m_line);\n\n            m_data.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n            m_data.&lt;span class=&quot;hljs-built_in&quot;&gt;emplace_back&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;);\n            std::string::size_type pos = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((pos = m_line.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, pos)) != std::string::npos)\n            {\n                m_data.&lt;span class=&quot;hljs-built_in&quot;&gt;emplace_back&lt;/span&gt;(pos);\n                ++pos;\n            }\n            &lt;span class=&quot;hljs-comment&quot;&gt;// This checks for a trailing comma with no data after it.&lt;/span&gt;\n            pos   = m_line.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();\n            m_data.&lt;span class=&quot;hljs-built_in&quot;&gt;emplace_back&lt;/span&gt;(pos);\n        }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n        std::string         m_line;\n        std::vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;    m_data;\n};\n\nstd::istream&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;&amp;gt;&amp;gt;(std::istream&amp;amp; str, CSVRow&amp;amp; data)\n{\n    data.&lt;span class=&quot;hljs-built_in&quot;&gt;readNextRow&lt;/span&gt;(str);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n}   \n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::ifstream       &lt;span class=&quot;hljs-title&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;plop.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n    CSVRow              row;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(file &amp;gt;&amp;gt; row)\n    {\n        std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;4th Element(&quot;&lt;/span&gt; &amp;lt;&amp;lt; row[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;)\\n&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But with a little work we could technically create an iterator:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CSVIterator&lt;/span&gt;\n{   \n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::input_iterator_tag     iterator_category;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; CSVRow                      value_type;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt;                 difference_type;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; CSVRow*                     pointer;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; CSVRow&amp;amp;                     reference;\n\n        &lt;span class=&quot;hljs-built_in&quot;&gt;CSVIterator&lt;/span&gt;(std::istream&amp;amp; str)  :&lt;span class=&quot;hljs-built_in&quot;&gt;m_str&lt;/span&gt;(str.&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;()?&amp;amp;str:&lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;) { ++(*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;); }\n        &lt;span class=&quot;hljs-built_in&quot;&gt;CSVIterator&lt;/span&gt;()                   :&lt;span class=&quot;hljs-built_in&quot;&gt;m_str&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;) {}\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Pre Increment&lt;/span&gt;\n        CSVIterator&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;++()               {&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (m_str) { &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!((*m_str) &amp;gt;&amp;gt; m_row)){m_str = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;;}}&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;}\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Post increment&lt;/span&gt;\n        CSVIterator &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;++(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)             {&lt;span class=&quot;hljs-function&quot;&gt;CSVIterator    &lt;span class=&quot;hljs-title&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;++(*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; tmp;}\n        CSVRow &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;*()   &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;       {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; m_row;}\n        CSVRow &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;* &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;-&amp;gt;()  &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;       {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;m_row;}\n\n        &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;==(CSVIterator &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; rhs) {&lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt; ((&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; == &amp;amp;rhs) || ((&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;m_str == &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;) &amp;amp;&amp;amp; (rhs.m_str == &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;)));}\n        &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;!=(CSVIterator &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; rhs) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !((*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;) == rhs);}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n        std::istream*       m_str;\n        CSVRow              m_row;\n};\n\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::ifstream       &lt;span class=&quot;hljs-title&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;plop.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(CSVIterator &lt;span class=&quot;hljs-built_in&quot;&gt;loop&lt;/span&gt;(file); loop != &lt;span class=&quot;hljs-built_in&quot;&gt;CSVIterator&lt;/span&gt;(); ++loop)\n    {\n        std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;4th Element(&quot;&lt;/span&gt; &amp;lt;&amp;lt; (*loop)[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;)\\n&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now that we are in 2020 lets add a CSVRange object:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CSVRange&lt;/span&gt;\n{\n    std::istream&amp;amp;   stream;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;CSVRange&lt;/span&gt;(std::istream&amp;amp; str)\n            : &lt;span class=&quot;hljs-built_in&quot;&gt;stream&lt;/span&gt;(str)\n        {}\n        &lt;span class=&quot;hljs-function&quot;&gt;CSVIterator &lt;span class=&quot;hljs-title&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; CSVIterator{stream};}\n        &lt;span class=&quot;hljs-function&quot;&gt;CSVIterator &lt;span class=&quot;hljs-title&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; CSVIterator{};}\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::ifstream       &lt;span class=&quot;hljs-title&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;plop.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;&amp;amp; row: &lt;span class=&quot;hljs-built_in&quot;&gt;CSVRange&lt;/span&gt;(file))\n    {\n        std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;4th Element(&quot;&lt;/span&gt; &amp;lt;&amp;lt; row[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;)\\n&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My version is not using anything but the standard C++11 library. It copes well with Excel CSV quotation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;spam eggs,&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo,bar&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;fizz buzz&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1.23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4.567&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;-8.00E+09&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The code is written as a finite-state machine and is consuming one character at a time. I think it&apos;s easier to reason about.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;istream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;enum class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CSVState&lt;/span&gt; {\n    UnquotedField,\n    QuotedField,\n    QuotedQuote\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;readCSVRow&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string &amp;amp;row)&lt;/span&gt; &lt;/span&gt;{\n    CSVState state = CSVState::UnquotedField;\n    std::vector&amp;lt;std::string&amp;gt; fields {&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;};\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// index of the current field&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c : row) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (state) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; CSVState::UnquotedField:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (c) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-comment&quot;&gt;// end of field&lt;/span&gt;\n                              fields.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;); i++;\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;: state = CSVState::QuotedField;\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:  fields[i].&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(c);\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;; }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; CSVState::QuotedField:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (c) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;: state = CSVState::QuotedQuote;\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:  fields[i].&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(c);\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;; }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; CSVState::QuotedQuote:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (c) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-comment&quot;&gt;// , after closing quote&lt;/span&gt;\n                              fields.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;); i++;\n                              state = CSVState::UnquotedField;\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;&quot; -&amp;gt; &quot;&lt;/span&gt;\n                              fields[i].&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;);\n                              state = CSVState::QuotedField;\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:  &lt;span class=&quot;hljs-comment&quot;&gt;// end of quote&lt;/span&gt;\n                              state = CSVState::UnquotedField;\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;; }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fields;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/// Read CSV file, Excel dialect. Accept &quot;quoted fields &quot;&quot;with quotes&quot;&quot;&quot;&lt;/span&gt;\nstd::vector&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;readCSV&lt;/span&gt;(std::istream &amp;amp;in) {\n    std::vector&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt; table;\n    std::string row;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!in.&lt;span class=&quot;hljs-built_in&quot;&gt;eof&lt;/span&gt;()) {\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(in, row);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (in.&lt;span class=&quot;hljs-built_in&quot;&gt;bad&lt;/span&gt;() || in.&lt;span class=&quot;hljs-built_in&quot;&gt;fail&lt;/span&gt;()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; fields = &lt;span class=&quot;hljs-built_in&quot;&gt;readCSVRow&lt;/span&gt;(row);\n        table.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(fields);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; table;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Solution using Boost Tokenizer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::vector&amp;lt;std::string&amp;gt; vec;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; boost;\ntokenizer&amp;lt;escaped_list_separator&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt; &amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tk&lt;/span&gt;(\n   line, &lt;span class=&quot;hljs-built_in&quot;&gt;escaped_list_separator&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&quot;&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (tokenizer&amp;lt;escaped_list_separator&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt; &amp;gt;::iterator &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;(tk.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;());\n   i!=tk.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;();++i) \n{\n   vec.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(*i);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;http://www.partow.net/programming/strtk/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++ String Toolkit Library (StrTk)&lt;/a&gt; has a token grid class that allows you to load data either from &lt;b&gt;text files, strings or char buffers&lt;/b&gt;, and to parse/process them in a row-column fashion.&lt;/p&gt;\n\n&lt;p&gt;You can specify the row delimiters and column delimiters or just use the defaults.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n   std::string data = &lt;span class=&quot;hljs-string&quot;&gt;&quot;1,2,3,4,5\\n&quot;&lt;/span&gt;\n                      &lt;span class=&quot;hljs-string&quot;&gt;&quot;0,2,4,6,8\\n&quot;&lt;/span&gt;\n                      &lt;span class=&quot;hljs-string&quot;&gt;&quot;1,3,5,7,9\\n&quot;&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-function&quot;&gt;strtk::token_grid &lt;span class=&quot;hljs-title&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(data,data.size(),&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; grid.&lt;span class=&quot;hljs-built_in&quot;&gt;row_count&lt;/span&gt;(); ++i)\n   {\n      strtk::token_grid::row_type r = grid.&lt;span class=&quot;hljs-built_in&quot;&gt;row&lt;/span&gt;(i);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; r.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); ++j)\n      {\n         std::cout &amp;lt;&amp;lt; r.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;(j) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t&quot;&lt;/span&gt;;\n      }\n      std::cout &amp;lt;&amp;lt; std::endl;\n   }\n   std::cout &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More examples can be found &lt;a href=&quot;http://www.partow.net/programming/strtk/index.html#tutorial&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;You can use Boost Tokenizer with escaped_list_separator.&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;escaped_list_separator&lt;/strong&gt; parses a superset of the csv. &lt;a href=&quot;https://www.boost.org/doc/libs/release/libs/tokenizer/doc/escaped_list_separator.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;Boost::tokenizer&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This only uses Boost tokenizer header files, no linking to boost libraries required.&lt;/p&gt;\n&lt;p&gt;Here is an example, (see &lt;a href=&quot;http://mybyteofcode.blogspot.com/2010/02/parse-csv-file-with-boost-tokenizer-in.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Parse CSV File With Boost Tokenizer In C++&lt;/a&gt; for details or &lt;code&gt;Boost::tokenizer&lt;/code&gt; ):&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;// cout, endl&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;      &lt;span class=&quot;hljs-comment&quot;&gt;// fstream&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// copy&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;// ostream_operator&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/tokenizer.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; boost;\n    &lt;span class=&quot;hljs-function&quot;&gt;string &lt;span class=&quot;hljs-title&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;ifstream &lt;span class=&quot;hljs-title&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(data.c_str())&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!in.&lt;span class=&quot;hljs-built_in&quot;&gt;is_open&lt;/span&gt;()) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; tokenizer&amp;lt; escaped_list_separator&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt; &amp;gt; Tokenizer;\n    vector&amp;lt; string &amp;gt; vec;\n    string line;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(in,line))\n    {\n        &lt;span class=&quot;hljs-function&quot;&gt;Tokenizer &lt;span class=&quot;hljs-title&quot;&gt;tok&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(line)&lt;/span&gt;&lt;/span&gt;;\n        vec.&lt;span class=&quot;hljs-built_in&quot;&gt;assign&lt;/span&gt;(tok.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(),tok.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;());\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// vector now contains strings from one row, output to cout here&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(vec.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), vec.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(), &lt;span class=&quot;hljs-built_in&quot;&gt;ostream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(cout, &lt;span class=&quot;hljs-string&quot;&gt;&quot;|&quot;&lt;/span&gt;));\n\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n----------------------&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It is not overkill to use Spirit for parsing CSVs. Spirit is well suited for micro-parsing tasks. For instance, with Spirit 2.1, it is as easy as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; r = &lt;span class=&quot;hljs-built_in&quot;&gt;phrase_parse&lt;/span&gt;(first, last,\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//  Begin grammar&lt;/span&gt;\n    (\n        double_ % &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;\n    )\n    ,\n    &lt;span class=&quot;hljs-comment&quot;&gt;//  End grammar&lt;/span&gt;\n\n    space, v);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The vector, v, gets stuffed with the values. &lt;a href=&quot;http://www.boost.org/doc/libs/1_41_0/libs/spirit/doc/html/spirit/qi/tutorials.html&quot; rel=&quot;noreferrer&quot;&gt;There is a series of tutorials&lt;/a&gt; touching on this in the new Spirit 2.1 docs that&apos;s just been released with Boost 1.41.&lt;/p&gt;\n\n&lt;p&gt;The tutorial progresses from simple to complex. The CSV parsers are presented somewhere in the middle and touches on various techniques in using Spirit. The generated code is as tight as hand written code. Check out the assembler generated!&lt;/p&gt;\n    ","\n&lt;p&gt;If you &lt;strong&gt;DO&lt;/strong&gt; care about parsing CSV correctly, this will do it...relatively slowly as it works one char at a time.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ParseCSV&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; csvSource, vector&amp;lt;vector&amp;lt;string&amp;gt; &amp;gt;&amp;amp; lines)&lt;/span&gt;\n    &lt;/span&gt;{\n       &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;inQuote&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n       &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;newLine&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n       string field;\n       lines.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n       vector&amp;lt;string&amp;gt; line;\n\n       string::const_iterator aChar = csvSource.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;();\n       &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (aChar != csvSource.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;())\n       {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (*aChar)\n          {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;:\n             newLine = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n             inQuote = !inQuote;\n             &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;:\n             newLine = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n             &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (inQuote == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n             {\n                field += *aChar;\n             }\n             &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n             {\n                line.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(field);\n                field.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n             }\n             &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;:\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\r&apos;&lt;/span&gt;:\n             &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (inQuote == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n             {\n                field += *aChar;\n             }\n             &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n             {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (newLine == &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n                {\n                   line.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(field);\n                   lines.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(line);\n                   field.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n                   line.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n                   newLine = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                }\n             }\n             &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:\n             newLine = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n             field.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(*aChar);\n             &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n          }\n\n          aChar++;\n       }\n\n       &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (field.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;())\n          line.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(field);\n\n       &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (line.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;())\n          lines.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(line);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When using the Boost Tokenizer escaped_list_separator for CSV files, then one should be aware of the following:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;It requires an escape-character (default back-slash - \\)&lt;/li&gt;\n&lt;li&gt;It requires a splitter/seperator-character (default comma - ,)&lt;/li&gt;\n&lt;li&gt;It requires an quote-character (default quote - &quot;)&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The CSV format specified by wiki states that data fields can contain separators in quotes (supported):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;1997,Ford,E350,&quot;Super, luxurious truck&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The CSV format specified by wiki states that single quotes should be handled with double-quotes (escaped_list_separator will strip away all quote characters):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;1997,Ford,E350,&quot;Super &quot;&quot;luxurious&quot;&quot; truck&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The CSV format doesn&apos;t specify that any back-slash characters should be stripped away (escaped_list_separator will strip away all escape characters).&lt;/p&gt;\n\n&lt;p&gt;A possible work-around to fix the default behavior of the boost escaped_list_separator:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;First replace all back-slash characters (\\) with two back-slash characters (\\\\) so they are not stripped away.&lt;/li&gt;\n&lt;li&gt;Secondly replace all double-quotes (&quot;&quot;) with a single back-slash character and a quote (\\&quot;)&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This work-around has the side-effect that empty data-fields that are represented by a double-quote, will be transformed into a single-quote-token. When iterating through the tokens, then one must check if the token is a single-quote, and treat it like an empty string.&lt;/p&gt;\n\n&lt;p&gt;Not pretty but it works, as long there are not newlines within the quotes.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://github.com/AriaFallah/csv-parser&quot; rel=&quot;noreferrer&quot;&gt;I wrote a header-only, C++11 CSV parser&lt;/a&gt;. It&apos;s well tested, fast, supports the entire CSV spec (quoted fields, delimiter/terminator in quotes, quote escaping, etc.), and is configurable to account for the CSVs that don&apos;t adhere to the specification.&lt;/p&gt;\n\n&lt;p&gt;Configuration is done through a fluent interface:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// constructor accepts any input stream&lt;/span&gt;\nCsvParser parser = &lt;span class=&quot;hljs-built_in&quot;&gt;CsvParser&lt;/span&gt;(std::cin)\n  .&lt;span class=&quot;hljs-built_in&quot;&gt;delimiter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;)    &lt;span class=&quot;hljs-comment&quot;&gt;// delimited by ; instead of ,&lt;/span&gt;\n  .&lt;span class=&quot;hljs-built_in&quot;&gt;quote&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&apos;&lt;/span&gt;)       &lt;span class=&quot;hljs-comment&quot;&gt;// quoted fields use &apos; instead of &quot;&lt;/span&gt;\n  .&lt;span class=&quot;hljs-built_in&quot;&gt;terminator&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// terminated by \\0 instead of by \\r\\n, \\n, or \\r&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Parsing is just a range based for loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;../parser.hpp&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; aria::csv;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-function&quot;&gt;std::ifstream &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;some_file.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-function&quot;&gt;CsvParser &lt;span class=&quot;hljs-title&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(f)&lt;/span&gt;&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;&amp;amp; row : parser) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;&amp;amp; field : row) {\n      std::cout &amp;lt;&amp;lt; field &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; | &quot;&lt;/span&gt;;\n    }\n    std::cout &amp;lt;&amp;lt; std::endl;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As all the CSV questions seem to get redirected here, I thought I&apos;d post my answer here.  This answer does not directly address the asker&apos;s question. I wanted to be able to read in a stream that is known to be in CSV format, and also the types of each field was already known. Of course, the method below could be used to treat every field to be a string type.&lt;/p&gt;\n\n&lt;p&gt;As an example of how I wanted to be able to use a CSV input stream, consider the following input (taken from &lt;a href=&quot;http://en.wikipedia.org/wiki/Comma-separated_values&quot; rel=&quot;nofollow noreferrer&quot;&gt;wikipedia&apos;s page on CSV&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[] =\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;Year,Make,Model,Description,Price\\n&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;1997,Ford,E350,\\&quot;ac, abs, moon\\&quot;,3000.00\\n&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;1999,Chevy,\\&quot;Venture \\&quot;\\&quot;Extended Edition\\&quot;\\&quot;\\&quot;,\\&quot;\\&quot;,4900.00\\n&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;1999,Chevy,\\&quot;Venture \\&quot;\\&quot;Extended Edition, Very Large\\&quot;\\&quot;\\&quot;,\\&quot;\\&quot;,5000.00\\n&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;1996,Jeep,Grand Cherokee,\\&quot;MUST SELL!\\n\\\nair, moon roof, loaded\\&quot;,4799.00\\n&quot;&lt;/span&gt;\n;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, I wanted to be able to read in the data like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::istringstream &lt;span class=&quot;hljs-title&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(input)&lt;/span&gt;&lt;/span&gt;;\nstd::string title[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; year;\nstd::string make, model, desc;\n&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; price;\n&lt;span class=&quot;hljs-built_in&quot;&gt;csv_istream&lt;/span&gt;(ss)\n    &amp;gt;&amp;gt; title[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &amp;gt;&amp;gt; title[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &amp;gt;&amp;gt; title[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &amp;gt;&amp;gt; title[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;gt;&amp;gt; title[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;csv_istream&lt;/span&gt;(ss)\n       &amp;gt;&amp;gt; year &amp;gt;&amp;gt; make &amp;gt;&amp;gt; model &amp;gt;&amp;gt; desc &amp;gt;&amp;gt; price) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//...do something with the record...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This was the solution I ended up with.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;csv_istream&lt;/span&gt; {\n    std::istream &amp;amp;is_;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;csv_istream&lt;/span&gt; (std::istream &amp;amp;is) : &lt;span class=&quot;hljs-built_in&quot;&gt;is_&lt;/span&gt;(is) {}\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;scan_ws&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (is_.&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;()) {\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = is_.&lt;span class=&quot;hljs-built_in&quot;&gt;peek&lt;/span&gt;();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c != &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; &amp;amp;&amp;amp; c != &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\t&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            is_.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;();\n        }\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;scan&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(std::string *s = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n        std::string ws;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = is_.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (is_.&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s) {\n                    ws += c;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c != &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; &amp;amp;&amp;amp; c != &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\t&apos;&lt;/span&gt;) {\n                        *s += ws;\n                        ws.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n                    }\n                }\n                c = is_.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;();\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (is_.&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;());\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (is_.&lt;span class=&quot;hljs-built_in&quot;&gt;eof&lt;/span&gt;()) is_.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;set_value&lt;/span&gt; {\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(std::string in, T &amp;amp;v)&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n            std::&lt;span class=&quot;hljs-built_in&quot;&gt;istringstream&lt;/span&gt;(in) &amp;gt;&amp;gt; v;\n        }\n    };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;set_value&lt;/span&gt;&amp;lt;T, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&amp;gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; SIGNED&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;convert&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(std::string in, T &amp;amp;v)&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (SIGNED) v = ::&lt;span class=&quot;hljs-built_in&quot;&gt;strtoll&lt;/span&gt;(in.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;(), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; v = ::&lt;span class=&quot;hljs-built_in&quot;&gt;strtoull&lt;/span&gt;(in.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;(), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(std::string in, T &amp;amp;v)&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n            convert&amp;lt;is_signed_int&amp;lt;T&amp;gt;::val&amp;gt;(in, v);\n        }\n    };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; csv_istream &amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt; &amp;gt;&amp;gt; (T &amp;amp;v) &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; {\n        std::string tmp;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;scan&lt;/span&gt;(&amp;amp;tmp);\n        set_value&amp;lt;T, is_int&amp;lt;T&amp;gt;::val&amp;gt;()(tmp, v);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; csv_istream &amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt; &amp;gt;&amp;gt; (std::string &amp;amp;v) &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; {\n        v.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n        &lt;span class=&quot;hljs-built_in&quot;&gt;scan_ws&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (is_.&lt;span class=&quot;hljs-built_in&quot;&gt;peek&lt;/span&gt;() != &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-built_in&quot;&gt;scan&lt;/span&gt;(&amp;amp;v);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            std::string tmp;\n            is_.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;();\n            std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(is_, tmp, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (is_.&lt;span class=&quot;hljs-built_in&quot;&gt;peek&lt;/span&gt;() == &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;) {\n                v += tmp;\n                v += is_.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;();\n                std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(is_, tmp, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;);\n            }\n            v += tmp;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;scan&lt;/span&gt;();\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; csv_istream &amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt; &amp;gt;&amp;gt; (T &amp;amp;(*manip)(T &amp;amp;)) &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; {\n        is_ &amp;gt;&amp;gt; manip;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !is_.&lt;span class=&quot;hljs-built_in&quot;&gt;fail&lt;/span&gt;(); }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With the following helpers that may be simplified by the new integral traits templates in C++11:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_signed_int&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; }; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_signed_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_signed_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_signed_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_signed_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_unsigned_int&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; }; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_unsigned_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_unsigned_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_unsigned_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_unsigned_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_int&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = (is_signed_int&amp;lt;T&amp;gt;::val || is_unsigned_int&amp;lt;T&amp;gt;::val) };\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://tio.run/##rVZtT@NGEP7uXzG4UrDpFuXK0VNev/ToqRVUlaAnVQRFxt6EFc6u5d2YIi6/nc6sHbKOHTig5iWb3Zlnnnn1xln20zyOH38QMk6XCYehUNrkPFqMvc2eXm95hi@yNDK4Z@4zLqMFh4sx4PEyNiD0VIu55MlUSAMPwOVygR9FlMIIZlGqOawG@OugtOsO9Y3KzXgbAiX5dwLg33vUUyXn79WHF0BejOVSviearvZw/QXeFth2rLfEuB3pTeHeDfXuyNuAe4BPDSGoJ/li3O/TwbdvDTrVUUjWVoPHCjnWxVSUrVTBa5P0@@utDqIM7LYrGGzLhNAnewGtHlZWvlACUxtHcnqnIQghVlKvPaDn7kak3NI/nCuVBGHoHNJDDsfoIUlknN8G4aB@PoMghr0R7ONPpwPlemL2Q7hGXrdb0mSHGxek5LnFtvINXROYtAONBLpN8q7Mnd5Aupy3rBHd3c4mamtj4@EIvWL7lNFyPZHtHq41dNgCZSOu4ccRxIPWw2ei2Y5Gz4FFdAPQtHkYpzzKt5NXz8HzOzsCaoVbyqhZJXTI1YyiTssGIbcQ2tqQwbVS6VMzam6m2EhL7kTG1o/KeB4ZlVO518pISAYX0CmahVRrOBQtWyoQMoTxGIoGx8FOkk16QyROA2bs2Ntokktw/vuXP08@j0v6yK3guXkNdYpuiRFCgWmyakalKXpwGE/xSxAy6OLvVlo4vSocjeXzKqv/JdCVg8PWkTkOSLkIXxXy0oo7GjsbcpjAoJ2MS9ksso1JmkBBB7ccGrV8li@CDecwQOE67ZybZS7hwNyIqjFLR17k6rJqY100O6ea721zrhzZdor4OERKz1yetgRaOqEtLjsm@JMO7qdCcjLMwEaEjNYFnUlRcRtV3JoDrqC51mDwdLKDyqvo1Odcu0EbtNY22JXk1jL9vvRjqQYHi0iKLKR12CwAdIckrczL9fYEbifN5gawVtijKM4ikaKHqIJXEnp7LiIhSfjBqwjfRDm2dbY0l1cw8vx/sALZWXTL2ZlKeMo@cx3nIjNCSfZXLmI@kb7nf@j1PrHfVJ6wk6PjLpv4UcwgutYMFkrJic@Out3uYbe7Fu6xX294cY@CX7lEdhwm/sQ/@ddwmeAF7iQRZID2UNf@@9h7AwCDrzy/h9Mon3MX7LjO5hf2B@cZ@5JHMgHEzdUt5yh59vf5BZyfnJ7uTeTEi0ReugO5UjOGF8wITRG1T71ehYb3yubbBbQObESxsmodJ0zKL4@vBh4l4h4DXT9fUNTRIoUdEoz7wJuhUQMZxX3gObUVaB3aIsByKWG7V5v1B2f9s7M@ctYfkUbVsW24JTRxLCvylttP4kYLYkefllnoXmxjtTQwHILfJ@XRpU9fLA5tXvlbDW0lCb6StJaekSQCa1FLZrcscaxELd3dktaLStSuS1lMMN7kPW/1@B8&quot; rel=&quot;nofollow noreferrer&quot; title=&quot;C++ (gcc)  Try It Online&quot;&gt;Try it online!&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You might want to look at my FOSS project &lt;a href=&quot;http://code.google.com/p/csvfix/&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSVfix&lt;/a&gt; (&lt;a href=&quot;https://bitbucket.org/neilb/csvfix/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;updated link&lt;/em&gt;&lt;/a&gt;), which is a CSV stream editor written in C++. The CSV parser is no prize, but does the job and the whole package may do what you need without you writing any code.&lt;/p&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://bitbucket.org/neilb/csvfix/src/default/alib/src/a_csv.cpp?fileviewer=file-view-default&quot; rel=&quot;nofollow noreferrer&quot;&gt;alib/src/a_csv.cpp&lt;/a&gt; for the CSV parser, and &lt;a href=&quot;https://bitbucket.org/neilb/csvfix/src/default/csvfix/src/csved_ioman.cpp?fileviewer=file-view-default#csved_ioman.cpp-348&quot; rel=&quot;nofollow noreferrer&quot;&gt;csvlib/src/csved_ioman.cpp&lt;/a&gt; (&lt;code&gt;IOManager::ReadCSV&lt;/code&gt;) for a usage example.&lt;/p&gt;\n    ","\n&lt;p&gt;Another CSV I/O library can be found here:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/fast-cpp-csv-parser/&quot; rel=&quot;noreferrer&quot;&gt;http://code.google.com/p/fast-cpp-csv-parser/&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;csv.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{\n  &lt;span class=&quot;hljs-function&quot;&gt;io::CSVReader&amp;lt;3&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ram.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n  in.&lt;span class=&quot;hljs-built_in&quot;&gt;read_header&lt;/span&gt;(io::ignore_extra_column, &lt;span class=&quot;hljs-string&quot;&gt;&quot;vendor&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;size&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;speed&quot;&lt;/span&gt;);\n  std::string vendor; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; size; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; speed;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(in.&lt;span class=&quot;hljs-built_in&quot;&gt;read_row&lt;/span&gt;(vendor, size, speed)){\n    &lt;span class=&quot;hljs-comment&quot;&gt;// do stuff with the data&lt;/span&gt;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another solution similar to &lt;a href=&quot;https://stackoverflow.com/a/1120224/1749822&quot;&gt;Loki Astari&apos;s answer&lt;/a&gt;, in C++11. Rows here are &lt;code&gt;std::tuple&lt;/code&gt;s of a given type. The code scans one line, then scans until each delimiter, and then converts and dumps the value directly into the tuple (with a bit of template code).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; row : &lt;span class=&quot;hljs-built_in&quot;&gt;csv&lt;/span&gt;&amp;lt;std::string, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&amp;gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)) {\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;first col: &quot;&lt;/span&gt; &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&amp;gt;(row) &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Advanges:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;quite clean and simple to use, only C++11.&lt;/li&gt;\n&lt;li&gt;automatic type conversion into &lt;code&gt;std::tuple&amp;lt;t1, ...&amp;gt;&lt;/code&gt; via &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;What&apos;s missing:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;escaping and quoting&lt;/li&gt;\n&lt;li&gt;no error handling in case of malformed CSV.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The main code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; csvtools {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Read the last element of the tuple without calling recursively&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; idx, &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;... fields&amp;gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::enable_if&amp;lt;idx &amp;gt;= std::tuple_size&amp;lt;std::tuple&amp;lt;fields...&amp;gt;&amp;gt;::value - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;::type\n    &lt;span class=&quot;hljs-built_in&quot;&gt;read_tuple&lt;/span&gt;(std::istream &amp;amp;in, std::tuple&amp;lt;fields...&amp;gt; &amp;amp;out, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delimiter) {\n        std::string cell;\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(in, cell, delimiter);\n        &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream &lt;span class=&quot;hljs-title&quot;&gt;cell_stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(cell)&lt;/span&gt;&lt;/span&gt;;\n        cell_stream &amp;gt;&amp;gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;&amp;lt;idx&amp;gt;(out);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Read the @p idx-th element of the tuple and then calls itself with @p idx + 1 to&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// read the next element of the tuple. Automatically falls in the previous case when&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// reaches the last element of the tuple thanks to enable_if&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; idx, &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;... fields&amp;gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::enable_if&amp;lt;idx &amp;lt; std::tuple_size&amp;lt;std::tuple&amp;lt;fields...&amp;gt;&amp;gt;::value - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;::&lt;span class=&quot;hljs-function&quot;&gt;type\n    &lt;span class=&quot;hljs-title&quot;&gt;read_tuple&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::istream &amp;amp;in, std::tuple&amp;lt;fields...&amp;gt; &amp;amp;out, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delimiter)&lt;/span&gt; &lt;/span&gt;{\n        std::string cell;\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(in, cell, delimiter);\n        &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream &lt;span class=&quot;hljs-title&quot;&gt;cell_stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(cell)&lt;/span&gt;&lt;/span&gt;;\n        cell_stream &amp;gt;&amp;gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;&amp;lt;idx&amp;gt;(out);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;read_tuple&lt;/span&gt;&amp;lt;idx + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, fields...&amp;gt;(in, out, delimiter);\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/// Iterable csv wrapper around a stream. @p fields the list of types that form up a row.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;... fields&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;csv&lt;/span&gt; {\n    std::istream &amp;amp;_in;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; _delim;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::tuple&amp;lt;fields...&amp;gt; value_type;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;iterator&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Construct from a stream.&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::istream &amp;amp;in, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim)&lt;/span&gt; : _in(in), _delim(delim) {&lt;/span&gt;}\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Status of the underlying stream&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// @{&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;good&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _in.&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;();\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::istream &amp;amp;&lt;span class=&quot;hljs-title&quot;&gt;underlying_stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _in;\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// @}&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; iterator &lt;span class=&quot;hljs-title&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; iterator &lt;span class=&quot;hljs-title&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Reads a line into a stringstream, and then reads the line into a tuple, that is returned&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; value_type &lt;span class=&quot;hljs-title&quot;&gt;read_row&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n        std::string line;\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(_in, line);\n        &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream &lt;span class=&quot;hljs-title&quot;&gt;line_stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(line)&lt;/span&gt;&lt;/span&gt;;\n        std::tuple&amp;lt;fields...&amp;gt; retval;\n        csvtools::&lt;span class=&quot;hljs-built_in&quot;&gt;read_tuple&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, fields...&amp;gt;(line_stream, retval, _delim);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; retval;\n    }\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/// Iterator; just calls recursively @ref csv::read_row and stores the result.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;... fields&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;csv&lt;/span&gt;&amp;lt;fields...&amp;gt;::iterator {\n    csv::value_type _row;\n    csv *_parent;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::input_iterator_tag iterator_category;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; csv::value_type         value_type;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt;             difference_type;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; csv::value_type *       pointer;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; csv::value_type &amp;amp;       reference;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Construct an empty/end iterator&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; : _parent(nullptr) {&lt;/span&gt;}\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Construct an iterator at the beginning of the @p parent csv object.&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(csv &amp;amp;parent)&lt;/span&gt; : _parent(parent.good() ? &amp;amp;parent : nullptr) {&lt;/span&gt;\n        ++(*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Read one row, if possible. Set to end if parent is not good anymore.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; iterator &amp;amp;&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;++() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (_parent != &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;) {\n            _row = _parent-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;read_row&lt;/span&gt;();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!_parent-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;()) {\n                _parent = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; iterator &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;++(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) {\n        iterator copy = *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n        ++(*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; csv::value_type &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &amp;amp;&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;*() &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _row;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; csv::value_type &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;-&amp;gt;() &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;_row;\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;==(iterator &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &amp;amp;other) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; == &amp;amp;other) &lt;span class=&quot;hljs-built_in&quot;&gt;or&lt;/span&gt; (_parent == &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; other._parent == &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;!=(iterator &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &amp;amp;other) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;not&lt;/span&gt; (*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; == other);\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;... fields&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; csv&amp;lt;fields...&amp;gt;::iterator csv&amp;lt;fields...&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;iterator&lt;/span&gt;(*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;... fields&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; csv&amp;lt;fields...&amp;gt;::iterator csv&amp;lt;fields...&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;iterator&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I put a tiny working example on &lt;a href=&quot;https://github.com/LizardM4/ballin-octo-tribble/tree/master/csv&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;; I&apos;ve been using it for parsing some numerical data and it served its purpose.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is another implementation of a Unicode CSV parser (works with wchar_t). I wrote part of it, while Jonathan Leffler wrote the rest.&lt;/p&gt;\n\n&lt;p&gt;Note: This parser is aimed at replicating Excel&apos;s behavior as closely as possible, specifically when importing &lt;strong&gt;broken or malformed&lt;/strong&gt; CSV files.&lt;/p&gt;\n\n&lt;p&gt;This is the original question - &lt;a href=&quot;https://stackoverflow.com/questions/15520113/parsing-csv-file-with-multiline-fields-and-escaped-double-quotes&quot;&gt;Parsing CSV file with multiline fields and escaped double quotes&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This is the code as a SSCCE (Short, Self-Contained, Correct Example).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;wchar.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;wctype.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;nextCsvField&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *p, &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; sep, &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; *newline)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Returns a pointer to the start of the next field,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// or zero if this is the last field in the CSV&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// p is the start position of the field&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// sep is the separator used, i.e. comma or semicolon&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// newline says whether the field ends with a newline or with a comma&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;nextCsvField&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *p, &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; sep, &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; *newline)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Parse quoted sequences&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt; == p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) {\n        p++;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Find next double-quote&lt;/span&gt;\n            p = &lt;span class=&quot;hljs-built_in&quot;&gt;wcschr&lt;/span&gt;(p, &lt;span class=&quot;hljs-string&quot;&gt;L&apos;&quot;&apos;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-comment&quot;&gt;// If we don&apos;t find it or it&apos;s the last symbol&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// then this is the last field&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!p || !p[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Check for &quot;&quot;, it is an escaped double-quote&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] != &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Skip the escaped double-quote&lt;/span&gt;\n            p += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Find next newline or comma.&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; newline_or_sep[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;L&quot;\\n\\r &quot;&lt;/span&gt;;\n    newline_or_sep[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = sep;\n    p = &lt;span class=&quot;hljs-built_in&quot;&gt;wcspbrk&lt;/span&gt;(p, newline_or_sep);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If no newline or separator, this is the last field.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!p)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Check if we had newline.&lt;/span&gt;\n    *newline = (p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\r&apos;&lt;/span&gt; || p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle &quot;\\r\\n&quot;, otherwise just increment&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\r&apos;&lt;/span&gt; &amp;amp;&amp;amp; p[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n        p += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        p++;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; p;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;csvFieldData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *fld_s, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *fld_e, &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *buffer, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; buflen)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *dst = buffer;\n    &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *end = buffer + buflen - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *src = fld_s;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*src == &lt;span class=&quot;hljs-string&quot;&gt;L&apos;&quot;&apos;&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *p = src + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (p &amp;lt; fld_e &amp;amp;&amp;amp; dst &amp;lt; end)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;L&apos;&quot;&apos;&lt;/span&gt; &amp;amp;&amp;amp; p+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt; fld_s &amp;amp;&amp;amp; p[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;L&apos;&quot;&apos;&lt;/span&gt;)\n            {\n                *dst++ = p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n                p += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;L&apos;&quot;&apos;&lt;/span&gt;)\n            {\n                p++;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                *dst++ = *p++;\n        }\n        src = p;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (src &amp;lt; fld_e &amp;amp;&amp;amp; dst &amp;lt; end)\n        *dst++ = *src++;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dst &amp;gt;= end)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    *dst = &lt;span class=&quot;hljs-string&quot;&gt;L&apos;\\0&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(buffer);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dissect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *line)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *start = line;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *next;\n    &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt;     eol;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;wprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;L&quot;Input %3zd: [%.*ls]\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;wcslen&lt;/span&gt;(line), &lt;span class=&quot;hljs-built_in&quot;&gt;wcslen&lt;/span&gt;(line)&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, line);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((next = &lt;span class=&quot;hljs-built_in&quot;&gt;nextCsvField&lt;/span&gt;(start, &lt;span class=&quot;hljs-string&quot;&gt;L&apos;,&apos;&lt;/span&gt;, &amp;amp;eol)) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; buffer[&lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;];\n        &lt;span class=&quot;hljs-built_in&quot;&gt;wprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;L&quot;Raw Field: [%.*ls] (eol = %d)\\n&quot;&lt;/span&gt;, (next - start - eol), start, eol);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;csvFieldData&lt;/span&gt;(start, next&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, buffer, &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(buffer)/&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(buffer[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            &lt;span class=&quot;hljs-built_in&quot;&gt;wprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;L&quot;Field %3zd: [%ls]\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;wcslen&lt;/span&gt;(buffer), buffer);\n        start = next;\n    }\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; multiline[] =\n   &lt;span class=&quot;hljs-string&quot;&gt;L&quot;First field of first row,\\&quot;This field is multiline\\n&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;but that&apos;s OK because it&apos;s enclosed in double quotes, and this\\n&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;is an escaped \\&quot;\\&quot; double quote\\&quot; but this one \\&quot;\\&quot; is not\\n&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;   \\&quot;This is second field of second row, but it is not multiline\\n&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;   because it doesn&apos;t start \\n&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;   with an immediate double quote\\&quot;\\n&quot;&lt;/span&gt;\n    ;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; line[&lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;fgetws&lt;/span&gt;(line, &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(line)/&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(line[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), stdin))\n        &lt;span class=&quot;hljs-built_in&quot;&gt;dissect&lt;/span&gt;(line);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;dissect&lt;/span&gt;(multiline);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is an old thread but its still at the top of search results, so I&apos;m adding my solution using std::stringstream and a simple string replace method by Yves Baumes I found here.  &lt;/p&gt;\n\n&lt;p&gt;The following example will read a file line by line, ignore comment lines starting with // and parse the other lines into a combination of strings, ints and doubles. Stringstream does the parsing, but expects fields to be delimited by whitespace, so I use stringreplace to turn commas into spaces first. It handles tabs ok, but doesn&apos;t deal with quoted strings.&lt;/p&gt;\n\n&lt;p&gt;Bad or missing input is simply ignored, which may or may not be good, depending on your circumstance.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringReplace&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::string&amp;amp; str, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; oldStr, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; newStr)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// code by  Yves Baumes&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// http://stackoverflow.com/questions/1494399/how-do-i-search-find-and-replace-in-a-standard-string&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; pos = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((pos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(oldStr, pos)) != std::string::npos)\n  {\n     str.&lt;span class=&quot;hljs-built_in&quot;&gt;replace&lt;/span&gt;(pos, oldStr.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;(), newStr);\n     pos += newStr.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;();\n  }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LoadCSV&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::string &amp;amp;filename)&lt;/span&gt; &lt;/span&gt;{\n   &lt;span class=&quot;hljs-function&quot;&gt;std::ifstream &lt;span class=&quot;hljs-title&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(filename)&lt;/span&gt;&lt;/span&gt;;\n   std::string in_line;\n   std::string Field;\n   std::string Chan;\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ChanType;\n   &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; Scale;\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; Import;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(stream, in_line)) {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;StringReplace&lt;/span&gt;(in_line, &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n      &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream &lt;span class=&quot;hljs-title&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(in_line)&lt;/span&gt;&lt;/span&gt;;\n      line &amp;gt;&amp;gt; Field &amp;gt;&amp;gt; Chan &amp;gt;&amp;gt; ChanType &amp;gt;&amp;gt; Scale &amp;gt;&amp;gt; Import;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (Field.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)!=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//&quot;&lt;/span&gt;) {\n         &lt;span class=&quot;hljs-comment&quot;&gt;// do your stuff &lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;// this is CBuilder code for demonstration, sorry&lt;/span&gt;\n         &lt;span class=&quot;hljs-built_in&quot;&gt;ShowMessage&lt;/span&gt;((String)Field.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt; + Chan.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;IntToStr&lt;/span&gt;(ChanType) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt; +&lt;span class=&quot;hljs-built_in&quot;&gt;FloatToStr&lt;/span&gt;(Scale) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt; +&lt;span class=&quot;hljs-built_in&quot;&gt;IntToStr&lt;/span&gt;(Import));\n      }\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I needed an easy-to-use C++ library for parsing CSV files but couldn&apos;t find any available, so I ended up building one.\n&lt;a href=&quot;https://github.com/d99kris/rapidcsv/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rapidcsv&lt;/a&gt; is a C++11 header-only library which gives direct access to parsed columns (or rows) as vectors, in datatype of choice. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;rapidcsv.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-function&quot;&gt;rapidcsv::Document &lt;span class=&quot;hljs-title&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;../tests/msft.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n  std::vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&amp;gt; close = doc.&lt;span class=&quot;hljs-built_in&quot;&gt;GetColumn&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Close&quot;&lt;/span&gt;);\n  std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Read &quot;&lt;/span&gt; &amp;lt;&amp;lt; close.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; values.&quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use the header-only &lt;a href=&quot;https://github.com/ashaduri/csv-parser&quot; rel=&quot;nofollow noreferrer&quot;&gt;Csv::Parser&lt;/a&gt; library.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;It fully supports RFC 4180, including quoted values, escaped quotes, and newlines in field values.&lt;/li&gt;\n&lt;li&gt;It requires only standard C++ (C++17).&lt;/li&gt;\n&lt;li&gt;It supports reading CSV data from &lt;code&gt;std::string_view&lt;/code&gt; at compile-time.&lt;/li&gt;\n&lt;li&gt;It&apos;s extensively tested using &lt;a href=&quot;https://github.com/catchorg/Catch2&quot; rel=&quot;nofollow noreferrer&quot;&gt;Catch2&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Here is code for reading a matrix, note you also have a csvwrite function in matlab&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;loadFromCSV&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; filename )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::ifstream       &lt;span class=&quot;hljs-title&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( filename.c_str() )&lt;/span&gt;&lt;/span&gt;;\n    std::vector&amp;lt; std::vector&amp;lt;std::string&amp;gt; &amp;gt;   matrix;\n    std::vector&amp;lt;std::string&amp;gt;   row;\n    std::string                line;\n    std::string                cell;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( file )\n    {\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(file,line);\n        &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream &lt;span class=&quot;hljs-title&quot;&gt;lineStream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(line)&lt;/span&gt;&lt;/span&gt;;\n        row.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;( lineStream, cell, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt; ) )\n            row.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;( cell );\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( !row.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;() )\n            matrix.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;( row );\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(matrix.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;()); i++ )\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(matrix[i].&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;()); j++ )\n            std::cout &amp;lt;&amp;lt; matrix[i][j] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;;\n\n        std::cout &amp;lt;&amp;lt; std::endl;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Excuse me, but this all seems like a great deal of elaborate syntax to hide a few lines of code.&lt;/p&gt;\n\n&lt;p&gt;Why not this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n\n  Read line from a CSV file\n\n  @param[in] fp file pointer to open file\n  @param[in] vls reference to vector of strings to hold next line\n\n  */&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;readCSV&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( FILE *fp, std::vector&amp;lt;std::string&amp;gt;&amp;amp; vls )&lt;/span&gt;\n&lt;/span&gt;{\n    vls.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( ! fp )\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( ! &lt;span class=&quot;hljs-built_in&quot;&gt;fgets&lt;/span&gt;( buf,&lt;span class=&quot;hljs-number&quot;&gt;999&lt;/span&gt;,fp) )\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    std::string s = buf;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; p,q;\n    q = &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// loop over columns&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ) {\n        p = q;\n        q = s.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,\\n&quot;&lt;/span&gt;,p+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( q == &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; ) \n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        vls.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;( s.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(p+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,q-p&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) );\n    }\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; _tmain(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, _TCHAR* argv[])\n{\n    std::vector&amp;lt;std::string&amp;gt; vls;\n    FILE * fp = &lt;span class=&quot;hljs-built_in&quot;&gt;fopen&lt;/span&gt;( argv[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt; );\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( ! fp )\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;readCSV&lt;/span&gt;( fp, vls );\n    &lt;span class=&quot;hljs-built_in&quot;&gt;readCSV&lt;/span&gt;( fp, vls );\n    &lt;span class=&quot;hljs-built_in&quot;&gt;readCSV&lt;/span&gt;( fp, vls );\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;row 3, col 4 is &quot;&lt;/span&gt; &amp;lt;&amp;lt; vls[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can open and read .csv file using fopen ,fscanf functions ,but the important thing is to parse the data.Simplest way to parse the data using delimiter.In case of .csv , delimiter is &apos;,&apos;.&lt;/p&gt;\n\n&lt;p&gt;Suppose your data1.csv file is as follows : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;A,&lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;76&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;\nB,&lt;span class=&quot;hljs-number&quot;&gt;77&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;02&lt;/span&gt;\nC,&lt;span class=&quot;hljs-number&quot;&gt;63&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;76&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;\nD,&lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you can tokenize data and store in char array and later use atoi() etc function for appropriate conversions  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;FILE *fp;\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; str1[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;], str2[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;], str3[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;], str4[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n\nfp = &lt;span class=&quot;hljs-built_in&quot;&gt;fopen&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;G:\\\\data1.csv&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; == fp)\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nError in opening file.&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(EOF != &lt;span class=&quot;hljs-built_in&quot;&gt;fscanf&lt;/span&gt;(fp, &lt;span class=&quot;hljs-string&quot;&gt;&quot; %[^,], %[^,], %[^,], %s, %s, %s, %s &quot;&lt;/span&gt;, str1, str2, str3, str4))\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n%s %s %s %s&quot;&lt;/span&gt;, str1, str2, str3, str4);\n}\n&lt;span class=&quot;hljs-built_in&quot;&gt;fclose&lt;/span&gt;(fp);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;[^,], ^ -it inverts logic , means match any string that does not contain comma then last , says to match comma that terminated previous string. &lt;/p&gt;\n    ","\n&lt;p&gt;The first thing you need to do is make sure the file exists. To accomplish\nthis you just need to try and open the file stream at the path. After you\nhave opened the file stream use stream.fail() to see if it worked as expected,\nor not.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;fileExists&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string fileName)&lt;/span&gt;\n&lt;/span&gt;{\n\nifstream test;\n\ntest.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(fileName.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (test.&lt;span class=&quot;hljs-built_in&quot;&gt;fail&lt;/span&gt;())\n{\n    test.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n{\n    test.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You must also verify that the file provided is the correct type of file.\nTo accomplish this you need to look through the file path provided until \nyou find the file extension. Once you have the file extension make sure\nthat it is a .csv file.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;verifyExtension&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string filename)&lt;/span&gt;\n&lt;/span&gt;{\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; period = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; filename.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;(); i++)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (filename[i] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n        period = i;\n}\n\nstring extension;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = period; i &amp;lt; filename.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;(); i++)\n    extension += filename[i];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (extension == &lt;span class=&quot;hljs-string&quot;&gt;&quot;.csv&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This function will return the file extension which is used later in an error message.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;string &lt;span class=&quot;hljs-title&quot;&gt;getExtension&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string filename)&lt;/span&gt;\n&lt;/span&gt;{\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; period = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; filename.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;(); i++)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (filename[i] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n        period = i;\n}\n\nstring extension;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (period != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = period; i &amp;lt; filename.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;(); i++)\n        extension += filename[i];\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    extension = &lt;span class=&quot;hljs-string&quot;&gt;&quot;NO FILE&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; extension;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This function will actually call the error checks created above and then parse through the file.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;parseFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string fileName)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;fileExists&lt;/span&gt;(fileName) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;verifyExtension&lt;/span&gt;(fileName))\n    {\n        ifstream fs;\n        fs.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(fileName.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;());\n        string fileCommand;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (fs.&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;())\n        {\n            string temp;\n\n            &lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(fs, fileCommand, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;);\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; fileCommand.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;(); i++)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fileCommand[i] != &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n                    temp += fileCommand[i];\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                    temp += &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;;\n            }\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp != &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\0&quot;&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// Place your code here to run the file.&lt;/span&gt;\n            }\n        }\n        fs.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;fileExists&lt;/span&gt;(fileName))\n    {\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Error: The provided file does not exist: &quot;&lt;/span&gt; &amp;lt;&amp;lt; fileName &amp;lt;&amp;lt; endl;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;verifyExtension&lt;/span&gt;(fileName))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;getExtension&lt;/span&gt;(fileName) != &lt;span class=&quot;hljs-string&quot;&gt;&quot;NO FILE&quot;&lt;/span&gt;)\n                cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\tCheck the file extension.&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\tThere is no file in the provided path.&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;verifyExtension&lt;/span&gt;(fileName)) \n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;getExtension&lt;/span&gt;(fileName) != &lt;span class=&quot;hljs-string&quot;&gt;&quot;NO FILE&quot;&lt;/span&gt;)\n            cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Incorrect file extension provided: &quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;getExtension&lt;/span&gt;(fileName) &amp;lt;&amp;lt; endl;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;There is no file in the following path: &quot;&lt;/span&gt; &amp;lt;&amp;lt; fileName &amp;lt;&amp;lt; endl;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Since i&apos;m not used to boost right now, I will suggest a more simple solution. Lets suppose that your .csv file has 100 lines with 10 numbers in each line separated by a &apos;,&apos;. You could load this data in the form of an array with the following code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; A[&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n    ifstream ifs;\n    ifs.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name_of_file.csv&quot;&lt;/span&gt;);\n    string s1;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; k=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; k&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;; k++)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(ifs,s1);\n        &lt;span class=&quot;hljs-function&quot;&gt;stringstream &lt;span class=&quot;hljs-title&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s1)&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        {\n            stream &amp;gt;&amp;gt;A[k][j];\n            stream &amp;gt;&amp;gt; c;\n            j++;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!stream) {&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;}\n        }\n    }\n\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use this library:\n&lt;a href=&quot;https://github.com/vadamsky/csvworker&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/vadamsky/csvworker&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Code for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;csvworker.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n    CsvWorker csv;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;loadFromFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;example.csv&quot;&lt;/span&gt;);\n    cout &amp;lt;&amp;lt; csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getRowsNumber&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;  &quot;&lt;/span&gt; &amp;lt;&amp;lt; csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getColumnsNumber&lt;/span&gt;() &amp;lt;&amp;lt; endl;\n\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getRowsNumber&lt;/span&gt;();++i)\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//cout &amp;lt;&amp;lt; csv.getRow(i) &amp;lt;&amp;lt; endl;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;j&amp;lt;csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getColumnsNumber&lt;/span&gt;();++j)\n        {\n            cout &amp;lt;&amp;lt; csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getField&lt;/span&gt;(i, j) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;;\n        }\n        cout &amp;lt;&amp;lt; endl;\n    }\n\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;saveToFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test.csv&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;CsvWorker &lt;span class=&quot;hljs-title&quot;&gt;csv2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;;\n\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;saveToFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test2.csv&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You gotta feel proud when you use something so beautiful as &lt;code&gt;boost::spirit&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Here my attempt of a parser (almost) complying with the CSV specifications on this link &lt;a href=&quot;http://www.ietf.org/rfc/rfc4180.txt&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSV specs&lt;/a&gt; (I didn&apos;t need line breaks within fields. Also the spaces around the commas are dismissed).&lt;/p&gt;\n\n&lt;p&gt;After you overcome the shocking experience of waiting 10 seconds for compiling this code :), you can sit back and enjoy.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// csvparser.cpp&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/spirit/include/qi.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/spirit/include/phoenix_operator.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; qi = boost::spirit::qi;\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; bascii = boost::spirit::ascii;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Iterator&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;csv_parser&lt;/span&gt; : qi::grammar&amp;lt;Iterator, std::&lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;std::string&amp;gt;(), \n    bascii::space_type&amp;gt;\n{\n    qi::rule&amp;lt;Iterator, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;()                                           &amp;gt; COMMA;\n    qi::rule&amp;lt;Iterator, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;()                                           &amp;gt; DDQUOTE;\n    qi::rule&amp;lt;Iterator, std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(),               bascii::space_type  &amp;gt; non_escaped;\n    qi::rule&amp;lt;Iterator, std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(),               bascii::space_type  &amp;gt; escaped;\n    qi::rule&amp;lt;Iterator, std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(),               bascii::space_type  &amp;gt; field;\n    qi::rule&amp;lt;Iterator, std::&lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;std::string&amp;gt;(),  bascii::space_type  &amp;gt; start;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;csv_parser&lt;/span&gt;() : csv_parser::&lt;span class=&quot;hljs-built_in&quot;&gt;base_type&lt;/span&gt;(start)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; qi;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; qi::lit;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; qi::lexeme;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; bascii::char_;\n\n        start       = field % &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;;\n        field       = escaped | non_escaped;\n        escaped     = lexeme[&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt; &amp;gt;&amp;gt; *( char_ -(&lt;span class=&quot;hljs-built_in&quot;&gt;char_&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;) | &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) | COMMA | DDQUOTE)  &amp;gt;&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;];\n        non_escaped = lexeme[       *( char_ -(&lt;span class=&quot;hljs-built_in&quot;&gt;char_&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;) | &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)                  )        ];\n        DDQUOTE     = &lt;span class=&quot;hljs-built_in&quot;&gt;lit&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\&quot;\\&quot;&quot;&lt;/span&gt;)       [_val = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;];\n        COMMA       = &lt;span class=&quot;hljs-built_in&quot;&gt;lit&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;)          [_val = &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;];\n    }\n\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter CSV lines [empty] to quit\\n&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; bascii::space;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::string::const_iterator iterator_type;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; csv_parser&amp;lt;iterator_type&amp;gt; csv_parser;\n\n    csv_parser grammar;\n    std::string str;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; fid;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(std::cin, str))\n    {\n        fid = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (str.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;())\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n        std::vector&amp;lt;std::string&amp;gt; csv;\n        std::string::const_iterator it_beg = str.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;();\n        std::string::const_iterator it_end = str.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; r = &lt;span class=&quot;hljs-built_in&quot;&gt;phrase_parse&lt;/span&gt;(it_beg, it_end, grammar, space, csv);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (r &amp;amp;&amp;amp; it_beg == it_end)\n        {\n            std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Parsing succeeded\\n&quot;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;&amp;amp; field: csv)\n            {\n                std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;field &quot;&lt;/span&gt; &amp;lt;&amp;lt; ++fid &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;/span&gt; &amp;lt;&amp;lt; field &amp;lt;&amp;lt; std::endl;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Parsing failed\\n&quot;&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Compile:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;make csvparser\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test (example stolen from &lt;a href=&quot;https://en.wikipedia.org/wiki/Comma-separated_values#Example&quot; rel=&quot;nofollow noreferrer&quot;&gt;Wikipedia&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;./csvparser\nEnter CSV lines [empty] to quit\n\n1999,Chevy,&quot;Venture &quot;&quot;Extended Edition, Very Large&quot;&quot;&quot;,,5000.00\nParsing succeeded\nfield 1: 1999\nfield 2: Chevy\nfield 3: Venture &quot;Extended Edition, Very Large&quot;\nfield 4: \nfield 5: 5000.00\n\n1999,Chevy,&quot;Venture &quot;&quot;Extended Edition, Very Large&quot;&quot;&quot;,,5000.00&quot;\nParsing failed\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This solution detects these 4 cases&lt;/p&gt;\n\n&lt;p&gt;complete class is at&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/pedro-vicente/csv-parser&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/pedro-vicente/csv-parser&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,field &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,field &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,field &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;field 3 quoted, with separator&quot;&lt;/span&gt;,\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,field &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;field 3\nwith newline&quot;&lt;/span&gt;,\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,field &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;field 3\nwith newline and separator,&quot;&lt;/span&gt;,\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It reads the file character by character, and reads 1 row at a time to a vector (of strings), therefore suitable for very large files.&lt;/p&gt;\n\n&lt;p&gt;Usage is&lt;/p&gt;\n\n&lt;p&gt;Iterate until an empty row is returned (end of file). A row is a vector where each entry is a CSV column.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;read_csv_t&lt;/span&gt; csv;\ncsv.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;../test.csv&quot;&lt;/span&gt;);\nstd::vector&amp;lt;std::string&amp;gt; row;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n{\n  row = csv.&lt;span class=&quot;hljs-built_in&quot;&gt;read_row&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (row.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;() == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the class declaration&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;read_csv_t&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-built_in&quot;&gt;read_csv_t&lt;/span&gt;();\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string &amp;amp;file_name)&lt;/span&gt;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;read_row&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n  std::ifstream m_ifs;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the implementation&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;read_csv_t::read_row&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; quote_mode = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  std::vector&amp;lt;std::string&amp;gt; row;\n  std::string column;\n  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (m_ifs.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;(c))\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (c)\n    {\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//separator &apos;,&apos; detected. &lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//in quote mode add character to column&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//push column if not in quote mode&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (quote_mode == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n      {\n        column += c;\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n      {\n        row.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(column);\n        column.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//quote &apos;&quot;&apos; detected. &lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//toggle quote mode&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;:\n      quote_mode = !quote_mode;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//line end detected&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//in quote mode add character to column&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//return row if not in quote mode&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\r&apos;&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (quote_mode == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n      {\n        column += c;\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n      {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; row;\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//default, add character to column&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:\n      column += c;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    }\n  }\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;//return empty vector if end of file detected &lt;/span&gt;\n  m_ifs.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n  std::vector&amp;lt;std::string&amp;gt; v;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Parsing CSV file lines with Stream&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I wrote a small example of parsing CSV file lines, it can be developed with for and while loops if desired:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n\n\n&lt;span class=&quot;hljs-function&quot;&gt;ifstream &lt;span class=&quot;hljs-title&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Infile.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;ofstream &lt;span class=&quot;hljs-title&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;OutFile.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\nstring strline, strremain, strCol1 , strout;\n\nstring delimeter =&lt;span class=&quot;hljs-string&quot;&gt;&quot;;&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; d1;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to continue until the end of the file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!fin.&lt;span class=&quot;hljs-built_in&quot;&gt;eof&lt;/span&gt;()){ \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;get first line from InFile :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(fin,strline,&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;);      \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;find delimeter position in line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    d1 = strline.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and parse first column:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    strCol1 = strline.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,d1); &lt;span class=&quot;hljs-comment&quot;&gt;// parse first Column&lt;/span&gt;\n    d1++;\n    strremain = strline.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(d1); &lt;span class=&quot;hljs-comment&quot;&gt;// remaining line&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;create output line in CSV format:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    strout.&lt;span class=&quot;hljs-built_in&quot;&gt;append&lt;/span&gt;(strCol1);\n    strout.&lt;span class=&quot;hljs-built_in&quot;&gt;append&lt;/span&gt;(delimeter);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;write line to Out File:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    fout &amp;lt;&amp;lt; strout &amp;lt;&amp;lt; endl; &lt;span class=&quot;hljs-comment&quot;&gt;//out file line&lt;/span&gt;\n\n} \n\nfin.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\nfout.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This code is compiled and running. Good luck!&lt;/p&gt;\n    ","\n&lt;p&gt;You could also take a look at capabilities of &lt;code&gt;Qt&lt;/code&gt; library.&lt;/p&gt;\n\n&lt;p&gt;It has regular expressions support and QString class has nice methods, e.g. &lt;code&gt;split()&lt;/code&gt; returning QStringList, list of strings obtained by splitting the original string with a provided delimiter. Should suffice for csv file.. &lt;/p&gt;\n\n&lt;p&gt;To get a column with a given header name I use following: &lt;a href=&quot;https://stackoverflow.com/questions/970330/c-inheritance-qt-problem-qstring/1011601#1011601&quot;&gt;c++ inheritance Qt problem qstring&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you don&apos;t want to deal with including boost in your project (it is considerably large if all you are going to use it for is CSV parsing...)&lt;/p&gt;\n\n&lt;p&gt;I have had luck with the CSV parsing here:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.zedwood.com/article/112/cpp-csv-parser&quot; rel=&quot;nofollow&quot;&gt;http://www.zedwood.com/article/112/cpp-csv-parser&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It handles quoted fields - but does not handle inline \\n characters (which is probably fine for most uses).&lt;/p&gt;\n    ","\n&lt;p&gt;For what it is worth, here is my implementation. It deals with wstring input, but could be adjusted to string easily. It does not handle newline in fields (as my application does not either, but adding its support isn&apos;t too difficult) and it does not comply with &quot;\\r\\n&quot; end of line as per RFC (assuming you use std::getline), but it does handle whitespace trimming and double-quotes correctly (hopefully).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// trim whitespaces around field or double-quotes, remove double-quotes and replace escaped double-quotes (double double-quotes)&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;wstring &lt;span class=&quot;hljs-title&quot;&gt;trimquote&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; wstring&amp;amp; str, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; wstring&amp;amp; whitespace, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; quotChar)&lt;/span&gt;\n&lt;/span&gt;{\n    wstring ws;\n    wstring::size_type strBegin = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(whitespace);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (strBegin == wstring::npos)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;L&quot;&quot;&lt;/span&gt;;\n\n    wstring::size_type strEnd = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_last_not_of&lt;/span&gt;(whitespace);\n    wstring::size_type strRange = strEnd - strBegin + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((str[strBegin] == quotChar) &amp;amp;&amp;amp; (str[strEnd] == quotChar))\n    {\n        ws = str.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(strBegin+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, strRange&lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt;);\n        strBegin = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((strEnd = ws.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(quotChar, strBegin)) != wstring::npos)\n        {\n            ws.&lt;span class=&quot;hljs-built_in&quot;&gt;erase&lt;/span&gt;(strEnd, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n            strBegin = strEnd+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        ws = str.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(strBegin, strRange);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ws;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;pair&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;nextCSVQuotePair&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; wstring&amp;amp; line, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; quotChar, &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; ofs = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    pair&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;&amp;gt; r;\n    r.first = line.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(quotChar, ofs);\n    r.second = wstring::npos;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(r.first != wstring::npos)\n    {\n        r.second = r.first;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(((r.second = line.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(quotChar, r.second+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) != wstring::npos)\n            &amp;amp;&amp;amp; (line[r.second+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == quotChar)) &lt;span class=&quot;hljs-comment&quot;&gt;// WARNING: assumes null-terminated string such that line[r.second+1] always exist&lt;/span&gt;\n            r.second++;\n\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;parseLine&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(vector&amp;lt;wstring&amp;gt;&amp;amp; fields, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; wstring&amp;amp; line)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; ofs, ofs0, np;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; delim = &lt;span class=&quot;hljs-string&quot;&gt;L&apos;,&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; wstring whitespace = &lt;span class=&quot;hljs-string&quot;&gt;L&quot; \\t\\xa0\\x3000\\x2000\\x2001\\x2002\\x2003\\x2004\\x2005\\x2006\\x2007\\x2008\\x2009\\x200a\\x202f\\x205f&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; quotChar = &lt;span class=&quot;hljs-string&quot;&gt;L&apos;\\&quot;&apos;&lt;/span&gt;;\n    pair&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;&amp;gt; quot;\n\n    fields.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n\n    ofs = ofs0 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    quot = &lt;span class=&quot;hljs-built_in&quot;&gt;nextCSVQuotePair&lt;/span&gt;(line, quotChar);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((np = line.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(delim, ofs)) != wstring::npos)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((np &amp;gt; quot.first) &amp;amp;&amp;amp; (np &amp;lt; quot.second))\n        { &lt;span class=&quot;hljs-comment&quot;&gt;// skip delimiter inside quoted field&lt;/span&gt;\n            ofs = quot.second+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            quot = &lt;span class=&quot;hljs-built_in&quot;&gt;nextCSVQuotePair&lt;/span&gt;(line, quotChar, ofs);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n        }\n        fields.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;trimquote&lt;/span&gt;(line.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(ofs0, np-ofs0), whitespace, quotChar) );\n        ofs = ofs0 = np+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    fields.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;trimquote&lt;/span&gt;(line.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(ofs0), whitespace, quotChar) );\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fields.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a ready-to use function if all you need is to load a data file of doubles (no integers, no text).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Parse a CSV data file and fill the 2d STL vector &quot;data&quot;.\n * Limits: only &quot;pure datas&quot; of doubles, not encapsulated by &quot; and without \\n inside.\n * Further no formatting in the data (e.g. scientific notation)\n * It however handles both dots and commas as decimal separators and removes thousand separator.\n * \n * returnCodes[0]: file access 0-&amp;gt; ok 1-&amp;gt; not able to read; 2-&amp;gt; decimal separator equal to comma separator\n * returnCodes[1]: number of records\n * returnCodes[2]: number of fields. -1 If rows have different field size\n * \n */&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-title&quot;&gt;readCsvData&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(vector &amp;lt;vector &amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; data, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; filename, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; delimiter, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; decseparator)&lt;/span&gt;&lt;/span&gt;{\n\n &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; vv[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = { &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; };\n &lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;returnCodes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&amp;amp;vv[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &amp;amp;vv[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]+&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n string rowstring, stringtoken;\n &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; doubletoken;\n &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; rowcount=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; fieldcount=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n data.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n\n &lt;span class=&quot;hljs-function&quot;&gt;ifstream &lt;span class=&quot;hljs-title&quot;&gt;iFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(filename, ios_base::in)&lt;/span&gt;&lt;/span&gt;;\n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!iFile.&lt;span class=&quot;hljs-built_in&quot;&gt;is_open&lt;/span&gt;()){\n   returnCodes[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; returnCodes;\n }\n &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(iFile, rowstring)) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rowstring==&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// empty line&lt;/span&gt;\n    rowcount ++; &lt;span class=&quot;hljs-comment&quot;&gt;//let&apos;s start with 1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(delimiter == decseparator){\n      returnCodes[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; returnCodes;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(decseparator != &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;){\n     &lt;span class=&quot;hljs-comment&quot;&gt;// remove dots (used as thousand separators)&lt;/span&gt;\n     string::iterator end_pos = &lt;span class=&quot;hljs-built_in&quot;&gt;remove&lt;/span&gt;(rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(), &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n     rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;erase&lt;/span&gt;(end_pos, rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;());\n     &lt;span class=&quot;hljs-comment&quot;&gt;// replace decimal separator with dots.&lt;/span&gt;\n     &lt;span class=&quot;hljs-built_in&quot;&gt;replace&lt;/span&gt;(rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(),decseparator.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;()[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;); \n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n     &lt;span class=&quot;hljs-comment&quot;&gt;// remove commas (used as thousand separators)&lt;/span&gt;\n     string::iterator end_pos = &lt;span class=&quot;hljs-built_in&quot;&gt;remove&lt;/span&gt;(rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(), &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;);\n     rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;erase&lt;/span&gt;(end_pos, rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;());\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// tokenize..&lt;/span&gt;\n    vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;&amp;gt; tokens;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Skip delimiters at beginning.&lt;/span&gt;\n    string::size_type lastPos = rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(delimiter, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Find first &quot;non-delimiter&quot;.&lt;/span&gt;\n    string::size_type pos     = rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiter, lastPos);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (string::npos != pos || string::npos != lastPos){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Found a token, convert it to double add it to the vector.&lt;/span&gt;\n        stringtoken = rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(lastPos, pos - lastPos);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (stringtoken == &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) {\n      tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n          istringstream &lt;span class=&quot;hljs-built_in&quot;&gt;totalSString&lt;/span&gt;(stringtoken);\n      totalSString &amp;gt;&amp;gt; doubletoken;\n      tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(doubletoken);\n    }     \n        &lt;span class=&quot;hljs-comment&quot;&gt;// Skip delimiters.  Note the &quot;not_of&quot;&lt;/span&gt;\n        lastPos = rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(delimiter, pos);\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Find next &quot;non-delimiter&quot;&lt;/span&gt;\n        pos = rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiter, lastPos);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(rowcount == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n      fieldcount = tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();\n      returnCodes[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;() != fieldcount){\n    returnCodes[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;\n      }\n    }\n    data.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(tokens);\n }\n iFile.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n returnCodes[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = rowcount;\n &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; returnCodes;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I have looked at &lt;code&gt;boost::spirit&lt;/code&gt; for parsing.  It is more for parsing grammars thank parsing a simple file format.  Someone on my team was trying to use it to parse XML and it was a pain to debug.  Stay away from &lt;code&gt;boost::spirit&lt;/code&gt; if possible.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/35577/chrish&quot; title=&quot;2,274 reputation&quot; class=&quot;comment-user&quot;&gt;chrish&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment938051_1120140&quot;&gt;&lt;span title=&quot;2009-07-13 19:30:27Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 13, 2009 at 19:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Sorry chrish, but that&apos;s terrible advice.  Spirit isn&apos;t always an appropriate solution but I&apos;ve used it - and continue to use it - successfully in a number of projects.  Compared to similar tools (Antlr, Lex/yacc etc) it has significant advantages.  Now, for parsing CSV it&apos;s probably overkill...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7405/mattyt&quot; title=&quot;6,341 reputation&quot; class=&quot;comment-user&quot;&gt;MattyT&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment941839_1120140&quot;&gt;&lt;span title=&quot;2009-07-14 12:09:26Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 14, 2009 at 12:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MattyT IMHO &lt;code&gt;spirit&lt;/code&gt; is pretty hard to use for a parser combinator library. Having had some (very pleasant) experience with Haskells &lt;code&gt;(atto)parsec&lt;/code&gt; libraries I expected it (spirit) to work similarly well, but gave up on it after fighting with 600 line compiler errors.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/383508/fho&quot; title=&quot;6,658 reputation&quot; class=&quot;comment-user&quot;&gt;fho&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment38375206_1120140&quot;&gt;&lt;span title=&quot;2014-07-14 13:24:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 14, 2014 at 13:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;C CSV Parser: &lt;a href=&quot;http://sourceforge.net/projects/cccsvparser&quot; rel=&quot;nofollow noreferrer&quot;&gt;sourceforge.net/projects/cccsvparser&lt;/a&gt; C CSV Writer: &lt;a href=&quot;http://sourceforge.net/projects/cccsvwriter&quot; rel=&quot;nofollow noreferrer&quot;&gt;sourceforge.net/projects/cccsvwriter&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3322273/somethingsomething&quot; title=&quot;10,494 reputation&quot; class=&quot;comment-user&quot;&gt;SomethingSomething&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39740979_1120140&quot;&gt;&lt;span title=&quot;2014-08-23 21:22:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 23, 2014 at 21:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why don&apos;t you want to escape commas and new lines! Every search links to this question and I could not find one answer that considers the escaping! :|&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9495110/shafquat&quot; title=&quot;647 reputation&quot; class=&quot;comment-user&quot;&gt;Shafquat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment119468174_1120140&quot;&gt;&lt;span title=&quot;2021-05-18 15:58:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 18, 2021 at 15:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;first() next(). What is this Java! Only Joking.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14065/martin-york&quot; title=&quot;247,789 reputation&quot; class=&quot;comment-user&quot;&gt;Martin York&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment940356_1120224&quot;&gt;&lt;span title=&quot;2009-07-14 05:15:08Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 14, 2009 at 5:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@DarthVader: An overlay broad statement that by its broadness is silly. If you would like to clarify why it is bad and then why this badness applies in this context.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14065/martin-york&quot; title=&quot;247,789 reputation&quot; class=&quot;comment-user&quot;&gt;Martin York&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment11041441_1120224&quot;&gt;&lt;span title=&quot;2012-01-12 20:10:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 12, 2012 at 20:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@DarthVader: I think it is silly to make broad generalizations. The code above works correctly so I can actually see anything wrong with it. But if you have any specific comment on the above I will definitely consider in in this context. But I can see how you can come to that conclusion by mindlessly following a set of generalized rules for C# and applying it to another language.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14065/martin-york&quot; title=&quot;247,789 reputation&quot; class=&quot;comment-user&quot;&gt;Martin York&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment11042955_1120224&quot;&gt;&lt;span title=&quot;2012-01-12 21:29:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 12, 2012 at 21:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;also, if you run into weird linking problems with the above code because another library somewhere defines &lt;code&gt;istream::operator&amp;gt;&amp;gt;&lt;/code&gt; (like Eigen), add an &lt;code&gt;inline&lt;/code&gt; before the operator declaration to fix it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/629578/sk29910&quot; title=&quot;2,266 reputation&quot; class=&quot;comment-user&quot;&gt;sk29910&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25184802_1120224&quot;&gt;&lt;span title=&quot;2013-06-28 00:58:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2013 at 0:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The parsing part is missing, one still ends up with strings. This is just an over-engineered line splitter.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/412080/maxim-egorushkin&quot; title=&quot;126,374 reputation&quot; class=&quot;comment-user&quot;&gt;Maxim Egorushkin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment38019998_1120224&quot;&gt;&lt;span title=&quot;2014-07-03 09:16:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 3, 2014 at 9:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;this nested vector of strings is a no-go for modern processors. Throws away their caching ability&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1148542/nikos-yotis&quot; title=&quot;271 reputation&quot; class=&quot;comment-user&quot;&gt;Nikos Yotis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86341638_30338543&quot;&gt;&lt;span title=&quot;2018-04-05 06:56:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 5, 2018 at 6:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;plus you got all those switch statements&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1148542/nikos-yotis&quot; title=&quot;271 reputation&quot; class=&quot;comment-user&quot;&gt;Nikos Yotis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86341943_30338543&quot;&gt;&lt;span title=&quot;2018-04-05 07:05:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 5, 2018 at 7:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The top answer didn&apos;t work for me, as I am on an older compiler. This answer worked, vector initialisation may require this: &lt;code&gt;const char *vinit[] = {&quot;&quot;};             vector&amp;lt;string&amp;gt; fields(vinit, end(vinit)); &lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1205019/dr-rk&quot; title=&quot;4,137 reputation&quot; class=&quot;comment-user&quot;&gt;dr_rk&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86390126_30338543&quot;&gt;&lt;span title=&quot;2018-04-06 09:16:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 6, 2018 at 9:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Looks like a great solution and the best solution. Thank you. I think that you could avoid using the counter i by using the method back on your vector called fields.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/738419/mark-s&quot; title=&quot;155 reputation&quot; class=&quot;comment-user&quot;&gt;Mark S.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120034317_30338543&quot;&gt;&lt;span title=&quot;2021-06-09 19:52:50Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 9, 2021 at 19:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Very clean solution, this is a better answer than the &lt;b&gt;topmost&lt;/b&gt; answer !&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1177403/jgx&quot; title=&quot;107 reputation&quot; class=&quot;comment-user&quot;&gt;jgx&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121370928_30338543&quot;&gt;&lt;span title=&quot;2021-08-06 07:19:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 6, 2021 at 7:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The boost tokenizer doesn&apos;t fully support the complete CSV standard, but there are some quick workarounds. See &lt;a href=&quot;http://stackoverflow.com/questions/1120140/csv-parser-in-c/1595366#1595366&quot; title=&quot;csv parser in c&quot;&gt;stackoverflow.com/questions/1120140/csv-parser-in-c/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/193178/rolf-kristensen&quot; title=&quot;14,988 reputation&quot; class=&quot;comment-user&quot;&gt;Rolf Kristensen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment2647582_1122720&quot;&gt;&lt;span title=&quot;2010-04-13 23:03:15Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 13, 2010 at 23:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Do you have to have the whole boost library on your machine, or can you just use a subset of their code to do this? 256mb seems like a lot for CSV parsing..&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/289182/npike&quot; title=&quot;12,827 reputation&quot; class=&quot;comment-user&quot;&gt;NPike&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6667997_1122720&quot;&gt;&lt;span title=&quot;2011-04-27 23:28:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 27, 2011 at 23:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@NPike : You can use the &lt;a href=&quot;http://www.boost.org/doc/libs/release/tools/bcp/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;bcp&lt;/a&gt; utility that comes with boost to extract only the headers you actually need.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/636019/ildjarn&quot; title=&quot;61,074 reputation&quot; class=&quot;comment-user&quot;&gt;ildjarn&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7097183_1122720&quot;&gt;&lt;span title=&quot;2011-05-24 23:06:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 24, 2011 at 23:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Though &lt;a href=&quot;http://www.partow.net/programming/strtk/index.html#ParsingCSVFilesWithEmbeddedDoubleQuotes&quot; rel=&quot;nofollow noreferrer&quot;&gt;strtk supports doublequoted fields&lt;/a&gt;, and even stripping the surrounding quotes (via &lt;code&gt;options.trim_dquotes = true&lt;/code&gt;), it doesn&apos;t support removing doubled doublequotes (e.g. the field &lt;code&gt;&quot;She said &quot;&quot;oh no&quot;&quot;, and left.&quot;&lt;/code&gt; as the c-string &lt;code&gt;&quot;She said \\&quot;oh no\\&quot;, and left.&quot;&lt;/code&gt;).  You&apos;ll have to do that yourself.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9859/rampion&quot; title=&quot;84,720 reputation&quot; class=&quot;comment-user&quot;&gt;rampion&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment78812417_1475104&quot;&gt;&lt;span title=&quot;2017-08-28 20:29:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 28, 2017 at 20:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;When using &lt;code&gt;strtk&lt;/code&gt;, you&apos;ll also have to manually handle double-quoted fields that contain newline characters.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9859/rampion&quot; title=&quot;84,720 reputation&quot; class=&quot;comment-user&quot;&gt;rampion&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment78851506_1475104&quot;&gt;&lt;span title=&quot;2017-08-29 19:02:33Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 29, 2017 at 19:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;And if you want to be able to parse embedded new lines &lt;a href=&quot;http://mybyteofcode.blogspot.com/2010/11/parse-csv-file-with-embedded-new-lines.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;mybyteofcode.blogspot.com/2010/11/&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/45654/stefanb&quot; title=&quot;73,557 reputation&quot; class=&quot;comment-user&quot;&gt;stefanB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment5152775_2322735&quot;&gt;&lt;span title=&quot;2011-01-12 22:35:23Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jan 12, 2011 at 22:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;While this technique works, I have found it to have very poor performance. Parsing a 90000 line CSV file with ten fields per line takes around 8 seconds on my 2 GHz Xeon. The Python Standard Library csv module parses the same file in about 0.3 seconds.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/107907/rob-smallshire&quot; title=&quot;1,310 reputation&quot; class=&quot;comment-user&quot;&gt;Rob Smallshire&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment14737600_2322735&quot;&gt;&lt;span title=&quot;2012-06-27 07:59:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 27, 2012 at 7:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Rob that&apos;s interesting - what does the Python csv do differently?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/339843/tofutim&quot; title=&quot;21,424 reputation&quot; class=&quot;comment-user&quot;&gt;tofutim&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15103816_2322735&quot;&gt;&lt;span title=&quot;2012-07-12 05:48:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 12, 2012 at 5:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@RobSmallshire it&apos;s a simple example code not a high performance one. This code makes copies of all the fields per line. For higher performance you would use different options and return just references to fields in buffer instead of making copies.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/45654/stefanb&quot; title=&quot;73,557 reputation&quot; class=&quot;comment-user&quot;&gt;stefanB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15187859_2322735&quot;&gt;&lt;span title=&quot;2012-07-16 00:43:41Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 16, 2012 at 0:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Actually it is overkill, the compilation time hit is enormous and makes using Spirit for simple &quot;micro-parsing tasks&quot; unreasonable.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/765234/gerdiner&quot; title=&quot;1,295 reputation&quot; class=&quot;comment-user&quot;&gt;Gerdiner&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18755196_1764367&quot;&gt;&lt;span title=&quot;2012-12-02 00:37:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2012 at 0:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also I&apos;d like to point out that the code above does not parse CSV, it just parses a range of the type of the vector delimited by commas. It doesn&apos;t handle quotes, varying types of columns etc. In short 19 votes for something that does answer the question at all seems a bit suspicious to me.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/765234/gerdiner&quot; title=&quot;1,295 reputation&quot; class=&quot;comment-user&quot;&gt;Gerdiner&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18755225_1764367&quot;&gt;&lt;span title=&quot;2012-12-02 00:40:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2012 at 0:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Gerdiner Nonsense. The compilation time hit for small parsers isnt that big, but its also irrelevant because you stuff the code into its own compilation unit and compile it &lt;i&gt;once&lt;/i&gt;. Then you only need to link it and thats as efficient as it gets. And as for your other comment, there are as many dialects of CSV as there are processors for it. This one certainly isnt a very useful dialect but it can be trivially extended to handle quoted values.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1968/konrad-rudolph&quot; title=&quot;508,410 reputation&quot; class=&quot;comment-user&quot;&gt;Konrad Rudolph&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18884476_1764367&quot;&gt;&lt;span title=&quot;2012-12-06 12:04:49Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 6, 2012 at 12:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@konrad: Simply including &quot;#include &amp;lt;boost/spirit/include/qi.hpp&amp;gt;&quot; in an empty file with only a main and nothing else takes 9.7sec with MSVC 2012 on a corei7 running at 2.ghz. It&apos;s needless bloat. The accepted answer compiles in under 2secs on the same machine, I&apos;d hate to imagine how long the &apos;proper&apos; Boost.Spirit example would take to compile.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/765234/gerdiner&quot; title=&quot;1,295 reputation&quot; class=&quot;comment-user&quot;&gt;Gerdiner&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment19809513_1764367&quot;&gt;&lt;span title=&quot;2013-01-11 00:31:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 11, 2013 at 0:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Gerdiner I have to agree with you the overhead in using spirit for something as simple as cvs processing is far too great.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user1781730&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment33347891_1764367&quot;&gt;&lt;span title=&quot;2014-02-25 00:48:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 25, 2014 at 0:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;AFAICT this won&apos;t handle embedded quote marks correctly (e.g. &quot;This string has &quot;&quot;embedded quote marks&quot;&quot;&quot;,&quot;foo&quot;,1))&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/131930/jeremy-friesner&quot; title=&quot;64,271 reputation&quot; class=&quot;comment-user&quot;&gt;Jeremy Friesner&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment37547427_2481126&quot;&gt;&lt;span title=&quot;2014-06-19 00:42:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 19, 2014 at 0:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Nice work, but you need to add three more things: (1) read header (2) provide fields indexing by name (3) don&apos;t reallocate memory in loop by reusing the same vector of strings&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/737904/maksym-ganenko&quot; title=&quot;1,200 reputation&quot; class=&quot;comment-user&quot;&gt;Maksym Ganenko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77490787_44248193&quot;&gt;&lt;span title=&quot;2017-07-23 10:14:57Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 23, 2017 at 10:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MaksymGanenko I do #3. Could you elaborate on #2?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3772221/m0meni&quot; title=&quot;15,296 reputation&quot; class=&quot;comment-user&quot;&gt;m0meni&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77500154_44248193&quot;&gt;&lt;span title=&quot;2017-07-23 18:48:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 23, 2017 at 18:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s very useful to get fields not by position in a row, but by name given in the header (in the first row of CSV table). For example, I expect CSV table with &quot;Date&quot; field, but I don&apos;t know what&apos;s &quot;Date&quot; field index in a row.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/737904/maksym-ganenko&quot; title=&quot;1,200 reputation&quot; class=&quot;comment-user&quot;&gt;Maksym Ganenko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77512332_44248193&quot;&gt;&lt;span title=&quot;2017-07-24 07:50:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 24, 2017 at 7:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MaksymGanenko ah I see what you mean. There&apos;s &lt;a href=&quot;https://github.com/ben-strasser/fast-cpp-csv-parser&quot; rel=&quot;nofollow noreferrer&quot;&gt;github.com/ben-strasser/fast-cpp-csv-parser&lt;/a&gt; for when you know the columns of your CSV at compile time, and it&apos;s probably better than mine. What I wanted was a CSV parser for the cases where you wanted to use the same code for many different CSVs and don&apos;t know what they look like ahead of time. So I probably won&apos;t add #2, but I will add #1 sometime in the future.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3772221/m0meni&quot; title=&quot;15,296 reputation&quot; class=&quot;comment-user&quot;&gt;m0meni&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77532890_44248193&quot;&gt;&lt;span title=&quot;2017-07-24 16:12:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 24, 2017 at 16:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Seems great ... What about the status beta / production ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/135549/neuro&quot; title=&quot;14,448 reputation&quot; class=&quot;comment-user&quot;&gt;neuro&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment936502_1120165&quot;&gt;&lt;span title=&quot;2009-07-13 15:30:57Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 13, 2009 at 15:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The status is &quot;in development&quot;, as suggested by the version numbers. I really need more feed back from users before going to version 1.0. Plus I have a couple more features I want to add, to do with XML production from CSV.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;anon&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment936535_1120165&quot;&gt;&lt;span title=&quot;2009-07-13 15:36:35Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 13, 2009 at 15:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Bookmarking it, and will give it a try next time I have to deal with those wonderful standard CSV files ...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/135549/neuro&quot; title=&quot;14,448 reputation&quot; class=&quot;comment-user&quot;&gt;neuro&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment936581_1120165&quot;&gt;&lt;span title=&quot;2009-07-13 15:44:00Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 13, 2009 at 15:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Nice, but it forces you to choose the number of columns at compile time. Not very useful for many applications.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/59557/quant-dev&quot; title=&quot;6,081 reputation&quot; class=&quot;comment-user&quot;&gt;quant_dev&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment56691543_13924244&quot;&gt;&lt;span title=&quot;2015-12-26 20:30:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 26, 2015 at 20:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The github link to the same repository: &lt;a href=&quot;https://github.com/ben-strasser/fast-cpp-csv-parser&quot; rel=&quot;nofollow noreferrer&quot;&gt;github.com/ben-strasser/fast-cpp-csv-parser&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1047213/hari&quot; title=&quot;1,073 reputation&quot; class=&quot;comment-user&quot;&gt;Hari&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122650976_13924244&quot;&gt;&lt;span title=&quot;2021-09-30 13:11:51Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 30, 2021 at 13:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You may not care about inlining, because most of compilers decide it on its own. At least I am sure in Visual C++. It can inline method independently of your method specification.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2627487/mrpisarik&quot; title=&quot;1,159 reputation&quot; class=&quot;comment-user&quot;&gt;MrPisarik&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment57899272_34109317&quot;&gt;&lt;span title=&quot;2016-01-29 15:56:47Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 29, 2016 at 15:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;That&apos;s precisely why I marked them explicitly. Gcc and Clang, the ones I mostly use, have as well their own conventions. A &quot;inline&quot; keyword should be just an incentive.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1749822/pietro-saccardi&quot; title=&quot;2,562 reputation&quot; class=&quot;comment-user&quot;&gt;Pietro Saccardi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment57899402_34109317&quot;&gt;&lt;span title=&quot;2016-01-29 15:59:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 29, 2016 at 15:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Nice work, but the library doesn&apos;t work properly if header has empty labels. That&apos;s typical for Excel/LibreOffice NxN table. Also, it may skip the last line of data. Unfortunately, your lib is not robust.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/737904/maksym-ganenko&quot; title=&quot;1,200 reputation&quot; class=&quot;comment-user&quot;&gt;Maksym Ganenko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77491251_44244394&quot;&gt;&lt;span title=&quot;2017-07-23 10:46:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 23, 2017 at 10:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks for the feedback @MaksymGanenko I&apos;ve fixed the &quot;last line of data&quot; bug for final lines w/o trailing line break. As for the other issue mentioned - &quot;headers with empty labels&quot; - I&apos;m not sure what it refers to? The library should handle empty labels (both quoted and non-quoted). It can also read CSV without header row/column, but then it requires the user to specify this (col title id -1 and row title id -1). Please provide some more details or report a bug at the GitHub page if you have some specific use-case you&apos;d like to see supported. Thanks!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/485047/d99kris&quot; title=&quot;405 reputation&quot; class=&quot;comment-user&quot;&gt;d99kris&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77527994_44244394&quot;&gt;&lt;span title=&quot;2017-07-24 14:10:49Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 24, 2017 at 14:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Erm, why would there be &lt;code&gt;&quot;,\\n&quot;&lt;/code&gt; in the string?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/265521/timmmm&quot; title=&quot;79,027 reputation&quot; class=&quot;comment-user&quot;&gt;Timmmm&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42536576_1125863&quot;&gt;&lt;span title=&quot;2014-11-18 20:36:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 18, 2014 at 20:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Timmmm look up the substr method of the String class, and you&apos;ll see that it takes multiple characters, \\n is the newline character, so it counts as a single character, in this instance. It doesn&apos;t search for the entire value as a whole. It&apos;s searching for each individual character; namely comma or newline. substr will return the position of the first character it finds, and -1 if it finds neither, which means it&apos;s finished reading the line. fp keeps track of the position in the file internally, so each call to readCSV moves it one row at a time.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1777235/martyn-shutt&quot; title=&quot;1,623 reputation&quot; class=&quot;comment-user&quot;&gt;Martyn Shutt&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49410266_1125863&quot;&gt;&lt;span title=&quot;2015-06-05 19:23:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 5, 2015 at 19:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Another interesting library is &lt;a href=&quot;https://github.com/roman-kashitsyn/text-csv&quot; rel=&quot;nofollow noreferrer&quot;&gt;github.com/roman-kashitsyn/text-csv&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7471760/ferdymercury&quot; title=&quot;466 reputation&quot; class=&quot;comment-user&quot;&gt;ferdymercury&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113219752_44836669&quot;&gt;&lt;span title=&quot;2020-09-23 11:19:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2020 at 11:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;this won&apos;t handle commas in quotes&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3847691/ezee&quot; title=&quot;4,096 reputation&quot; class=&quot;comment-user&quot;&gt;Ezee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46744812_1443710&quot;&gt;&lt;span title=&quot;2015-03-26 06:41:24Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 26, 2015 at 6:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Shouldn&apos;t the compiler strip out everything that is non-essential?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/339843/tofutim&quot; title=&quot;21,424 reputation&quot; class=&quot;comment-user&quot;&gt;tofutim&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15103785_5836370&quot;&gt;&lt;span title=&quot;2012-07-12 05:46:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 12, 2012 at 5:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":402,"title":"How can I read and parse CSV files in C++?","content":"\n                \n&lt;p&gt;I need to load and use CSV file data in C++.  At this point it can really just be a comma-delimited parser (ie don&apos;t worry about escaping new lines and commas).  The main need is a line-by-line parser that will return a vector for the next line each time the method is called.&lt;/p&gt;\n\n&lt;p&gt;I found this article which looks quite promising:\n&lt;a href=&quot;http://www.boost.org/doc/libs/1_35_0/libs/spirit/example/fundamental/list_parser.cpp&quot; rel=&quot;noreferrer&quot;&gt;http://www.boost.org/doc/libs/1_35_0/libs/spirit/example/fundamental/list_parser.cpp&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I&apos;ve never used Boost&apos;s Spirit, but am willing to try it. But only if there isn&apos;t a more straightforward solution I&apos;m overlooking.&lt;/p&gt;\n    ","slug":"how-can-i-read-and-parse-csv-files-in-c++-1657387869219","postType":"QUESTION","createdAt":"2022-07-09T17:31:09.000Z","updatedAt":"2022-07-09T17:31:09.000Z","tags":[{"id":2159,"name":"text","slug":"text","createdAt":"2022-07-09T17:31:09.000Z","updatedAt":"2022-07-09T17:31:09.000Z","Questions_Tags":{"questionId":402,"tagId":2159}}]}]}},"__N_SSG":true}