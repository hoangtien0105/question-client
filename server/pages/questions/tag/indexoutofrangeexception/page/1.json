{"pageProps":{"data":{"count":1,"rows":[{"id":125,"title":"What is an IndexOutOfRangeException / ArgumentOutOfRangeException and how do I fix it?","slug":"what-is-an-indexoutofrangeexception-argumentoutofrangeexception-and-how-do-i-fix-it-1657384697159","postType":"QUESTION","createdAt":"2022-07-09T16:38:17.000Z","updatedAt":"2022-07-09T16:38:17.000Z","tags":[{"id":457,"name":"indexoutofrangeexception","slug":"indexoutofrangeexception","createdAt":"2022-07-09T16:38:17.000Z","updatedAt":"2022-07-09T16:38:17.000Z","Questions_Tags":{"questionId":125,"tagId":457}}]}]},"slug":"indexoutofrangeexception","page":"1","answers":{"125":["\n&lt;h2&gt;What Is It?&lt;/h2&gt;\n\n&lt;p&gt;This exception means that you&apos;re trying to access a collection item by index, using an invalid index. An index is invalid when it&apos;s lower than the collection&apos;s lower bound or greater than or equal to the number of elements it contains.&lt;/p&gt;\n\n&lt;h2&gt;When It Is Thrown&lt;/h2&gt;\n\n&lt;p&gt;Given an array declared as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can access this array from 0 to 3, values outside this range will cause &lt;code&gt;IndexOutOfRangeException&lt;/code&gt; to be thrown. Remember this when you create and access an array. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Array Length&lt;/strong&gt;&lt;br&gt;\nIn C#, usually, arrays are 0-based. It means that first element has index 0 and last element has index &lt;code&gt;Length - 1&lt;/code&gt; (where &lt;code&gt;Length&lt;/code&gt; is total number of items in the array) so this code doesn&apos;t work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;array[array.Length] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Moreover please note that if you have a multidimensional array then you can&apos;t use &lt;code&gt;Array.Length&lt;/code&gt; for both dimension, you have to use &lt;code&gt;Array.GetLength()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[,] data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; data.GetLength(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); ++i) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; data.GetLength(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); ++j) {\n        data[i, j] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Upper Bound Is Not Inclusive&lt;/strong&gt;&lt;br&gt;\nIn the following example we create a raw bidimensional array of &lt;code&gt;Color&lt;/code&gt;. Each item represents a pixel, indices are from &lt;code&gt;(0, 0)&lt;/code&gt; to &lt;code&gt;(imageWidth - 1, imageHeight - 1)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Color[,] pixels = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Color[imageWidth, imageHeight];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; x &amp;lt;= imageWidth; ++x) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; y &amp;lt;= imageHeight; ++y) {\n        pixels[x, y] = backgroundColor;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This code will then fail because array is 0-based and last (bottom-right) pixel in the image is &lt;code&gt;pixels[imageWidth - 1, imageHeight - 1]&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;pixels[imageWidth, imageHeight] = Color.Black;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In another scenario you may get &lt;code&gt;ArgumentOutOfRangeException&lt;/code&gt; for this code (for example if you&apos;re using &lt;code&gt;GetPixel&lt;/code&gt; method on a &lt;code&gt;Bitmap&lt;/code&gt; class).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Arrays Do Not Grow&lt;/strong&gt;&lt;br&gt;\nAn array is fast. Very fast in linear search compared to every other collection. It is because items are contiguous in memory so memory address can be calculated (and increment is just an addition). No need to follow a node list, simple math! You pay this with a limitation: they can&apos;t grow, if you need more elements you need to reallocate that array (this may take a relatively long time if old items must be copied to a new block). You resize them with &lt;code&gt;Array.Resize&amp;lt;T&amp;gt;()&lt;/code&gt;, this example adds a new entry to an existing array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Array.Resize(&lt;span class=&quot;hljs-keyword&quot;&gt;ref&lt;/span&gt; array, array.Length + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Don&apos;t forget that valid indices are from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;Length - 1&lt;/code&gt;. If you simply try to assign an item at &lt;code&gt;Length&lt;/code&gt; you&apos;ll get &lt;code&gt;IndexOutOfRangeException&lt;/code&gt; (this behavior may confuse you if you think they may increase with a syntax similar to &lt;code&gt;Insert&lt;/code&gt; method of other collections).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Special&lt;/em&gt; Arrays With Custom Lower Bound&lt;/strong&gt;&lt;br&gt;\n&lt;em&gt;First item in arrays has always index 0&lt;/em&gt;. This is not always true because you can create an array with a custom lower bound:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array = Array.CreateInstance(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] { &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; }, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In that example, array indices are valid from 1 to 4. Of course, upper bound cannot be changed. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Wrong Arguments&lt;/strong&gt;&lt;br&gt;\nIf you access an array using unvalidated arguments (from user input or from function user) you may get this error:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] RomanNumbers =\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] { &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;II&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;III&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;IV&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;V&quot;&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Romanize&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; number&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; RomanNumbers[number];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Unexpected Results&lt;/strong&gt;&lt;br&gt;\nThis exception may be thrown for another reason too: by convention, many &lt;em&gt;search functions&lt;/em&gt; will return -1 (nullables has been introduced with .NET 2.0 and anyway it&apos;s also a well-known convention in use from many years) if they didn&apos;t find anything. Let&apos;s imagine you have an array of objects comparable with a string. You may think to write this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Items comparable with a string&lt;/span&gt;\nConsole.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;First item equals to &apos;Debug&apos; is &apos;{0}&apos;.&quot;&lt;/span&gt;,\n    myArray[Array.IndexOf(myArray, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Debug&quot;&lt;/span&gt;)]);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Arbitrary objects&lt;/span&gt;\nConsole.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;First item equals to &apos;Debug&apos; is &apos;{0}&apos;.&quot;&lt;/span&gt;,\n    myArray[Array.FindIndex(myArray, x =&amp;gt; x.Type == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Debug&quot;&lt;/span&gt;)]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will fail if no items in &lt;code&gt;myArray&lt;/code&gt; will satisfy search condition because &lt;code&gt;Array.IndexOf()&lt;/code&gt; will return -1 and then array access will throw. &lt;/p&gt;\n\n&lt;p&gt;Next example is a naive example to calculate occurrences of a given set of numbers (knowing maximum number and returning an array where item at index 0 represents number 0, items at index 1 represents number 1 and so on):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;CountOccurences&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; maximum, IEnumerable&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; numbers&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[maximum + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// Includes 0&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; number &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; numbers)\n        ++result[number];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course, it&apos;s a pretty terrible implementation but what I want to show is that it&apos;ll fail for negative numbers and numbers above &lt;code&gt;maximum&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;How it applies to &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6sh2ey19%28v=vs.110%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Same cases as array - range of valid indexes - 0 (&lt;code&gt;List&lt;/code&gt;&apos;s indexes always start with 0) to &lt;code&gt;list.Count&lt;/code&gt; - accessing elements outside of this range will cause the exception.&lt;/p&gt;\n\n&lt;p&gt;Note that &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; throws &lt;code&gt;ArgumentOutOfRangeException&lt;/code&gt; for the same cases where arrays use &lt;code&gt;IndexOutOfRangeException&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Unlike arrays, &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; starts empty - so trying to access items of just created list lead to this exception.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Common case is to populate list with indexing (similar to &lt;code&gt;Dictionary&amp;lt;int, T&amp;gt;&lt;/code&gt;) will cause exception:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;list[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// exception&lt;/span&gt;\nlist.Add(&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// correct&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;IDataReader and Columns&lt;/strong&gt;&lt;br&gt;\nImagine you&apos;re trying to read data from a database with this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; connection = CreateConnection()) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; command = connection.CreateCommand()) {\n        command.CommandText = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT MyColumn1, MyColumn2 FROM MyTable&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reader = command.ExecuteReader()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (reader.Read()) {\n                ProcessData(reader.GetString(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// Throws!&lt;/span&gt;\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;GetString()&lt;/code&gt; will throw &lt;code&gt;IndexOutOfRangeException&lt;/code&gt; because you&apos;re dataset has only two columns but you&apos;re trying to get a value from 3rd one (indices are &lt;em&gt;always&lt;/em&gt; 0-based).&lt;/p&gt;\n\n&lt;p&gt;Please note that this behavior is shared with most &lt;code&gt;IDataReader&lt;/code&gt; implementations (&lt;code&gt;SqlDataReader&lt;/code&gt;, &lt;code&gt;OleDbDataReader&lt;/code&gt; and so on).   &lt;/p&gt;\n\n&lt;p&gt;You can get the same exception also if you use the IDataReader overload of the indexer operator that takes a column name and pass an invalid column name.&lt;br&gt;\nSuppose for example that you have retrieved a column named &lt;em&gt;Column1&lt;/em&gt; but then you try to retrieve the value of that field with&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = dr[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Colum1&quot;&lt;/span&gt;];  &lt;span class=&quot;hljs-comment&quot;&gt;// Missing the n in Column1.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This happens because the indexer operator is implemented trying to retrieve the index of a &lt;em&gt;Colum1&lt;/em&gt; field that doesn&apos;t exist. The GetOrdinal method will throw this exception when its internal helper code returns a -1 as the index of &quot;Colum1&quot;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Others&lt;/strong&gt;&lt;br&gt;\nThere is another (documented) case when this exception is thrown: if, in &lt;code&gt;DataView&lt;/code&gt;, data column name being supplied to the &lt;code&gt;DataViewSort&lt;/code&gt; property is not valid.&lt;/p&gt;\n\n&lt;h2&gt;How to Avoid&lt;/h2&gt;\n\n&lt;p&gt;In this example, let me assume, for simplicity, that arrays are always monodimensional and 0-based. If you want to be strict (or you&apos;re developing a library), you may need to replace &lt;code&gt;0&lt;/code&gt; with &lt;code&gt;GetLowerBound(0)&lt;/code&gt; and &lt;code&gt;.Length&lt;/code&gt; with &lt;code&gt;GetUpperBound(0)&lt;/code&gt; (of course if you have parameters of type &lt;code&gt;System.Arra&lt;/code&gt;y, it doesn&apos;t apply for &lt;code&gt;T[]&lt;/code&gt;). Please note that in this case, upper bound is inclusive then this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.Length; ++i) { }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Should be rewritten like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=array.GetLowerBound(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); i &amp;lt;= array.GetUpperBound(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); ++i) { }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please note that this is not allowed (it&apos;ll throw &lt;code&gt;InvalidCastException&lt;/code&gt;), that&apos;s why if your parameters are &lt;code&gt;T[]&lt;/code&gt; you&apos;re safe about custom lower bound arrays:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T[] array&lt;/span&gt;)&lt;/span&gt; { }\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This will throw InvalidCastException, cannot convert Int32[] to Int32[*]&lt;/span&gt;\n    foo((&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)Array.CreateInstance(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; }, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; }));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Validate Parameters&lt;/strong&gt;&lt;br&gt;\nIf index comes from a parameter you should always validate them (throwing appropriate &lt;code&gt;ArgumentException&lt;/code&gt; or &lt;code&gt;ArgumentOutOfRangeException&lt;/code&gt;). In the next example, wrong parameters may cause &lt;code&gt;IndexOutOfRangeException&lt;/code&gt;, users of this function may expect this because they&apos;re passing an array but it&apos;s not always so obvious. I&apos;d suggest to always validate parameters for public functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetRange&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T[] array, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; length, Func&amp;lt;i, T&amp;gt; function&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;&amp;gt;= array.Length)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentOutOfRangeException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;from&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (length &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentOutOfRangeException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;length&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; + length &amp;gt; array.Length)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;...&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; + length; ++i)\n        array[i] = function(i);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If function is private you may simply replace &lt;code&gt;if&lt;/code&gt; logic with &lt;code&gt;Debug.Assert()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Debug.Assert(&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &amp;lt; array.Length);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Check Object State&lt;/strong&gt;&lt;br&gt;\nArray index may not come directly from a parameter. It may be part of object state. In general is always a good practice to validate object state (by itself and with function parameters, if needed). You can use &lt;code&gt;Debug.Assert()&lt;/code&gt;, throw a proper exception (more descriptive about the problem) or handle that like in this example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Table&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; SelectedIndex { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Row[] Rows { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Row SelectedRow {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (Rows == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;...&quot;&lt;/span&gt;);\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// No or wrong selection, here we just return null for&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// this case (it may be the reason we use this property&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// instead of direct access)&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (SelectedIndex &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || SelectedIndex &amp;gt;= Rows.Length)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Rows[SelectedIndex];\n        }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Validate Return Values&lt;/strong&gt;&lt;br&gt;\nIn one of previous examples we directly used &lt;code&gt;Array.IndexOf()&lt;/code&gt; return value. If we know it may fail then it&apos;s better to handle that case:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; index = myArray[Array.IndexOf(myArray, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Debug&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index != &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) { } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;How to Debug&lt;/h2&gt;\n\n&lt;p&gt;In my opinion, most of the questions, here on SO, about this error can be simply avoided. The time you spend to write a proper question (with a small working example and a small explanation) could easily much more than the time you&apos;ll need to debug your code. First of all, read this Eric Lippert&apos;s blog post about &lt;a href=&quot;http://ericlippert.com/2014/03/05/how-to-debug-small-programs/&quot; rel=&quot;noreferrer&quot;&gt;debugging of small programs&lt;/a&gt;, I won&apos;t repeat his words here but it&apos;s absolutely a &lt;em&gt;must read&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;You have source code, you have exception message with a stack trace. Go there, pick right line number and you&apos;ll see:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;array[index] = newValue;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You found your error, check how &lt;code&gt;index&lt;/code&gt; increases. Is it right? Check how array is allocated, is coherent with how &lt;code&gt;index&lt;/code&gt; increases? Is it right according to your specifications? If you answer &lt;em&gt;yes&lt;/em&gt; to all these questions, then you&apos;ll find good help here on StackOverflow but please first check for that by yourself. You&apos;ll save your own time!&lt;/p&gt;\n\n&lt;p&gt;A good start point is to always use assertions and to validate inputs. You may even want to use code contracts. When something went wrong and you can&apos;t figure out what happens with a quick look at your code then you have to resort to an old friend: &lt;strong&gt;debugger&lt;/strong&gt;. Just run your application in debug inside Visual Studio (or your favorite IDE), you&apos;ll see exactly which line throws this exception, which array is involved and which index you&apos;re trying to use. Really, 99% of the times you&apos;ll solve it by yourself in a few minutes.&lt;/p&gt;\n\n&lt;p&gt;If this happens in production then you&apos;d better to add assertions in incriminated code, probably we won&apos;t see in your code what you can&apos;t see by yourself (but you can always bet).&lt;/p&gt;\n\n&lt;h2&gt;The VB.NET side of the story&lt;/h2&gt;\n\n&lt;p&gt;Everything that we have said in the C# answer is valid for VB.NET with the obvious syntax differences but there is an important point to consider when you deal with VB.NET arrays.&lt;/p&gt;\n\n&lt;p&gt;In VB.NET, arrays are declared setting the maximum valid index value for the array. It is not the count of the elements that we want to store in the array.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&apos; declares an array with space for 5 integer &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos; 4 is the maximum valid index starting from 0 to 4&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; myArray(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So this loop will fill the array with 5 integers without causing any &lt;strong&gt;IndexOutOfRangeException&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n    myArray(i) = i\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;The VB.NET rule&lt;/h2&gt;\n\n&lt;p&gt;This exception means that you&apos;re trying to access a collection item by index, using an invalid index. An index is invalid when it&apos;s lower than the collection&apos;s lower bound or greater than &lt;del&gt;equal to the number of elements it contains.&lt;/del&gt; the maximum allowed index defined in the array declaration&lt;/p&gt;\n    ","\n&lt;p&gt;Simple explanation about what a Index out of bound exception is:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Just think one train is there its compartments are D1,D2,D3.\nOne passenger came to enter the train and he have the ticket for D4.\nnow what will happen. the passenger want to enter a compartment that does not exist so obviously problem will arise.&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;Same scenario: whenever we try to access an array list, etc. we can only access the existing indexes in the array. &lt;code&gt;array[0]&lt;/code&gt; and &lt;code&gt;array[1]&lt;/code&gt; are existing. If we try to access &lt;code&gt;array[3]&lt;/code&gt;, it&apos;s not there actually, so an index out of bound exception will arise.&lt;/p&gt;\n    ","\n&lt;p&gt;To easily understand the problem, imagine we wrote this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] test = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n    test[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]= &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello1&quot;&lt;/span&gt;;\n    test[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]= &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello2&quot;&lt;/span&gt;;\n    test[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]= &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello3&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++)\n    {\n        Console.WriteLine(test[i].ToString());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Result will be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;hello1\nhello2\nhello3\n\nUnhandled Exception: System.IndexOutOfRangeException: Index was outside the bounds of the array.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Size of array is 3 (indices 0, 1 and 2), but the for-loop loops 4 times (0, 1, 2 and 3). &lt;br&gt;So when it tries to access outside the bounds with (3) it throws the exception.&lt;/p&gt;\n    ","\n&lt;p&gt;A side from the very long complete accepted answer there is an important point to make about &lt;code&gt;IndexOutOfRangeException&lt;/code&gt; compared with many other exception types, and that is:  &lt;/p&gt;\n\n&lt;p&gt;Often there is complex program state that maybe difficult to have control over at a particular point in code e.g a DB connection goes down so data for an input cannot be retrieved etc... This kind of issue often results in an Exception of some kind that has to bubble up to a higher level because where it occurs has no way of dealing with it at that point.  &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;IndexOutOfRangeException&lt;/code&gt; is generally different in that it in most cases it is pretty trivial to check for at the point where the exception is being raised.  Generally this kind of exception get thrown by some code that could very easily deal with the issue at the place it is occurring - just by checking the actual length of the array.  You don&apos;t want to &apos;fix&apos; this by handling this exception higher up - but instead by ensuring its not thrown in the first instance - which in most cases is easy to do by checking the array length.  &lt;/p&gt;\n\n&lt;p&gt;Another way of putting this is that other exceptions can arise due to genuine lack of control over input or program state BUT &lt;code&gt;IndexOutOfRangeException&lt;/code&gt; more often than not is simply just pilot (programmer) error.&lt;/p&gt;\n    ","\n&lt;p&gt;These two exceptions are common in various programming languages and as others said it&apos;s when you access an element with an index greater than the size of the array. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-comment&quot;&gt;/* var lastElement = array[3] this will throw an exception, because indices \nstart from zero, length of the array is 3, but its last index is 2. */&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;The main reason behind this is compilers usually don&apos;t check this stuff, hence they will only express themselves at runtime.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n    "]},"randomTags":[{"name":"symbols","slug":"symbols"},{"name":"string-aggregation","slug":"string-aggregation"},{"name":"platform-detection","slug":"platform-detection"},{"name":"servlets","slug":"servlets"},{"name":"strcmp","slug":"strcmp"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"scope","slug":"scope"},{"name":"return-value-optimization","slug":"return-value-optimization"},{"name":"prop","slug":"prop"},{"name":"webdriver","slug":"webdriver"},{"name":"haversine","slug":"haversine"},{"name":"unique","slug":"unique"},{"name":"aggregation-framework","slug":"aggregation-framework"},{"name":"multidimensional-array","slug":"multidimensional-array"},{"name":"eclipse","slug":"eclipse"},{"name":"awk","slug":"awk"},{"name":"asp.net-mvc-4","slug":"asp.net-mvc-4"},{"name":"c89","slug":"c89"},{"name":"array-difference","slug":"array-difference"},{"name":"slice","slug":"slice"}]},"__N_SSG":true}