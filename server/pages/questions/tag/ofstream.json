{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;First, make an &lt;code&gt;ifstream&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;std::ifstream &lt;span class=&quot;hljs-title&quot;&gt;infile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;thefile.txt&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The two standard methods are:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Assume that every line consists of two numbers and read token by token:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, b;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (infile &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b)\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// process pair (a,b)&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Line-based parsing, using string streams:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\nstd::string line;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(infile, line))\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::istringstream &lt;span class=&quot;hljs-title&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(line)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, b;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(iss &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b)) { &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;; } &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// process pair (a,b)&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You shouldn&apos;t mix (1) and (2), since the token-based parsing doesn&apos;t gobble up newlines, so you may end up with spurious empty lines if you use &lt;code&gt;getline()&lt;/code&gt; after token-based extraction got you to the end of a line already.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;ifstream&lt;/code&gt; to read data from a file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::ifstream &lt;span class=&quot;hljs-title&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;filename.ext&quot;&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you really need to read line by line, then do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( std::string line; &lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;( input, line ); )\n{\n    ...&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; each line in input...\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But you probably just need to extract coordinate pairs:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x, y;\ninput &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In your code you use &lt;code&gt;ofstream myfile;&lt;/code&gt;, however the &lt;code&gt;o&lt;/code&gt; in &lt;code&gt;ofstream&lt;/code&gt; stands for &lt;code&gt;output&lt;/code&gt;. If you want to read from the file (input) use &lt;code&gt;ifstream&lt;/code&gt;. If you want to both read and write use &lt;code&gt;fstream&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Reading a file line by line in C++ can be done in some different ways.&lt;/p&gt;\n\n&lt;h2&gt;[Fast] Loop with std::getline()&lt;/h2&gt;\n\n&lt;p&gt;The simplest approach is to open an std::ifstream and loop using std::getline() calls. The code is clean and easy to understand.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;std::ifstream &lt;span class=&quot;hljs-title&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(FILENAME)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (file.&lt;span class=&quot;hljs-built_in&quot;&gt;is_open&lt;/span&gt;()) {\n    std::string line;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(file, line)) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// using printf() in all tests for consistency&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, line.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;());\n    }\n    file.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;[Fast] Use Boost&apos;s file_description_source&lt;/h2&gt;\n\n&lt;p&gt;Another possibility is to use the Boost library, but the code gets a bit more verbose. The performance is quite similar to the code above (Loop with std::getline()).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/iostreams/device/file_descriptor.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/iostreams/stream.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; io = boost::iostreams;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;readLineByLineBoost&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; fdr = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(FILENAME, O_RDONLY);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fdr &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-function&quot;&gt;io::file_descriptor_source &lt;span class=&quot;hljs-title&quot;&gt;fdDevice&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(fdr, io::file_descriptor_flags::close_handle)&lt;/span&gt;&lt;/span&gt;;\n        io::stream &amp;lt;io::file_descriptor_source&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;in&lt;/span&gt;(fdDevice);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fdDevice.&lt;span class=&quot;hljs-built_in&quot;&gt;is_open&lt;/span&gt;()) {\n            std::string line;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(in, line)) {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// using printf() in all tests for consistency&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, line.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;());\n            }\n            fdDevice.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;[Fastest] Use C code&lt;/h2&gt;\n\n&lt;p&gt;If performance is critical for your software, you may consider using the C language. This code can be 4-5 times faster than the C++ versions above, see benchmark below&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;FILE* fp = &lt;span class=&quot;hljs-built_in&quot;&gt;fopen&lt;/span&gt;(FILENAME, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fp == &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(EXIT_FAILURE);\n\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* line = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(&amp;amp;line, &amp;amp;len, fp)) != &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// using printf() in all tests for consistency&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, line);\n}\n&lt;span class=&quot;hljs-built_in&quot;&gt;fclose&lt;/span&gt;(fp);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (line)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(line);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Benchmark -- Which one is faster?&lt;/h2&gt;\n\n&lt;p&gt;I have done some performance benchmarks with the code above and the results are interesting. I have tested the code with ASCII files that contain 100,000 lines, 1,000,000 lines and 10,000,000 lines of text. Each line of text contains 10 words in average. The program is compiled with &lt;code&gt;-O3&lt;/code&gt; optimization and its output is forwarded to &lt;code&gt;/dev/null&lt;/code&gt; in order to remove the logging time variable from the measurement. Last, but not least, each piece of code logs each line with the &lt;code&gt;printf()&lt;/code&gt; function for consistency.&lt;/p&gt;\n\n&lt;p&gt;The results show the time (in ms) that each piece of code took to read the files.&lt;/p&gt;\n\n&lt;p&gt;The performance difference between the two C++ approaches is minimal and shouldn&apos;t make any difference in practice. The performance of the C code is what makes the benchmark impressive and can be a game changer in terms of speed.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;                             &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;K lines     &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;K lines     &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;K lines\nLoop with &lt;span class=&quot;hljs-title&quot;&gt;std::getline&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;         105ms          894ms          9773ms\nBoost code                       106ms          968ms          9561ms\nC code                            23ms          243ms          2397ms\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/fKKqc.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/fKKqc.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Since your coordinates belong together as pairs, why not write a struct for them?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CoordinatePair&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you can write an overloaded extraction operator for istreams:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::istream&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;&amp;gt;&amp;gt;(std::istream&amp;amp; is, CoordinatePair&amp;amp; coordinates)\n{\n    is &amp;gt;&amp;gt; coordinates.x &amp;gt;&amp;gt; coordinates.y;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; is;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And then you can read a file of coordinates straight into a vector like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; filename[] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;coordinates.txt&quot;&lt;/span&gt;;\n    std::vector&amp;lt;CoordinatePair&amp;gt; v;\n    &lt;span class=&quot;hljs-function&quot;&gt;std::ifstream &lt;span class=&quot;hljs-title&quot;&gt;ifs&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(filename)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ifs) {\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;istream_iterator&lt;/span&gt;&amp;lt;CoordinatePair&amp;gt;(ifs), \n                std::&lt;span class=&quot;hljs-built_in&quot;&gt;istream_iterator&lt;/span&gt;&amp;lt;CoordinatePair&amp;gt;(),\n                std::&lt;span class=&quot;hljs-built_in&quot;&gt;back_inserter&lt;/span&gt;(v));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        std::cerr &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Couldn&apos;t open &quot;&lt;/span&gt; &amp;lt;&amp;lt; filename &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; for reading\\n&quot;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Now you can work with the contents of v&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Expanding on the accepted answer, if the input is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,NYC\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,ABQ\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you will still be able to apply the same logic, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;std::ifstream &lt;span class=&quot;hljs-title&quot;&gt;infile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;thefile.txt&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (infile.&lt;span class=&quot;hljs-built_in&quot;&gt;is_open&lt;/span&gt;()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; number;\n    std::string str;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (infile &amp;gt;&amp;gt; number &amp;gt;&amp;gt; c &amp;gt;&amp;gt; str &amp;amp;&amp;amp; c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n        std::cout &amp;lt;&amp;lt; number &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; &amp;lt;&amp;lt; str &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n}\ninfile.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This answer is for visual studio 2017 and if you want to read from text file which location is relative to your compiled console application.&lt;/p&gt;\n\n&lt;p&gt;first put your textfile (test.txt in this case) into your solution folder. After compiling keep text file in same folder with applicationName.exe&lt;/p&gt;\n\n&lt;p&gt;C:\\Users\\&quot;username&quot;\\source\\repos\\&quot;solutionName&quot;\\&quot;solutionName&quot;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    ifstream inFile;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// open the file stream&lt;/span&gt;\n    inFile.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.\\\\test.txt&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// check if opening a file failed&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (inFile.&lt;span class=&quot;hljs-built_in&quot;&gt;fail&lt;/span&gt;()) {\n        cerr &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Error opeing a file&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        inFile.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n        &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    }\n    string line;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(inFile, line))\n    {\n        cout &amp;lt;&amp;lt; line &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// close the file stream&lt;/span&gt;\n    inFile.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Although there is no need to close the file manually but it is good idea to do so if the scope of the file variable is bigger:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;ifstream &lt;span class=&quot;hljs-title&quot;&gt;infile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(szFilePath)&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (string line = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(infile, line); )\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//do something with the line&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(infile.&lt;span class=&quot;hljs-built_in&quot;&gt;is_open&lt;/span&gt;())\n        infile.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is a general solution to loading data into a C++ program, and uses the readline function. This could be modified for CSV files, but the delimiter is a space here. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, p = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; X[n][p];\n\nifstream myfile;\n\nmyfile.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data.txt&quot;&lt;/span&gt;);\n\nstring line;\nstring temp = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// row index &lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(myfile, line)) { &lt;span class=&quot;hljs-comment&quot;&gt;//while there is a line&lt;/span&gt;\n     &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// column index&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; line.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); i++) { &lt;span class=&quot;hljs-comment&quot;&gt;// for each character in rowstring&lt;/span&gt;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;isblank&lt;/span&gt;(line[i])) { &lt;span class=&quot;hljs-comment&quot;&gt;// if it is not blank, do this&lt;/span&gt;\n              &lt;span class=&quot;hljs-function&quot;&gt;string &lt;span class=&quot;hljs-title&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, line[i])&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// convert character to string&lt;/span&gt;\n              temp.&lt;span class=&quot;hljs-built_in&quot;&gt;append&lt;/span&gt;(d); &lt;span class=&quot;hljs-comment&quot;&gt;// append the two strings&lt;/span&gt;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n              X[a][b] = &lt;span class=&quot;hljs-built_in&quot;&gt;stod&lt;/span&gt;(temp);  &lt;span class=&quot;hljs-comment&quot;&gt;// convert string to double&lt;/span&gt;\n              temp = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// reset the capture&lt;/span&gt;\n              b++; &lt;span class=&quot;hljs-comment&quot;&gt;// increment b cause we have a new number&lt;/span&gt;\n        }\n    }\n\n  X[a][b] = &lt;span class=&quot;hljs-built_in&quot;&gt;stod&lt;/span&gt;(temp);\n  temp = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n  a++; &lt;span class=&quot;hljs-comment&quot;&gt;// onto next row&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@EdwardKarak: I don&apos;t understand what &quot;commas as the token&quot; means. Commas don&apos;t represent integers.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/596781/kerrek-sb&quot; title=&quot;448,945 reputation&quot; class=&quot;comment-user&quot;&gt;Kerrek SB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41524863_7868998&quot;&gt;&lt;span title=&quot;2014-10-18 14:22:37Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 18, 2014 at 14:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;the OP used a space to delimit the two integers. I wanted to know if while (infile &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b) would work if the OP used a as a comma a delimiter, because that is the scenario in my own program&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2469027/edward-karak&quot; title=&quot;10,708 reputation&quot; class=&quot;comment-user&quot;&gt;Edward Karak&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41525246_7868998&quot;&gt;&lt;span title=&quot;2014-10-18 14:46:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 18, 2014 at 14:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@EdwardKarak: Ah, so when you said &quot;token&quot; you meant &quot;delimiter&quot;. Right. With a comma, you&apos;d say: &lt;code&gt;int a, b; char c; while ((infile &amp;gt;&amp;gt; a &amp;gt;&amp;gt; c &amp;gt;&amp;gt; b) &amp;amp;&amp;amp; (c == &apos;,&apos;))&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/596781/kerrek-sb&quot; title=&quot;448,945 reputation&quot; class=&quot;comment-user&quot;&gt;Kerrek SB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41525843_7868998&quot;&gt;&lt;span title=&quot;2014-10-18 15:25:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 18, 2014 at 15:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@KerrekSB: Huh. I was wrong. I didn&apos;t know it could do that. I might have some code of my own to rewrite.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2156537/mark-h&quot; title=&quot;518 reputation&quot; class=&quot;comment-user&quot;&gt;Mark H&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment44011171_7868998&quot;&gt;&lt;span title=&quot;2015-01-06 15:00:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 6, 2015 at 15:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For an explanation of the &lt;code&gt;while(getline(f, line)) { }&lt;/code&gt; construct and regarding error handling please have a look at this (my) article: &lt;a href=&quot;http://gehrcke.de/2011/06/reading-files-in-c-using-ifstream-dealing-correctly-with-badbit-failbit-eofbit-and-perror/&quot; rel=&quot;nofollow noreferrer&quot;&gt;gehrcke.de/2011/06/&lt;/a&gt;  (I think I do not need to have bad conscience posting this here, it even slightly pre-dates this answer).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/145400/dr-jan-philip-gehrcke&quot; title=&quot;29,897 reputation&quot; class=&quot;comment-user&quot;&gt;Dr. Jan-Philip Gehrcke&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment44408850_7868998&quot;&gt;&lt;span title=&quot;2015-01-18 14:15:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 18, 2015 at 14:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Your solution is a bit improved: your line variable is not visible after file read-in in contrast to Kerrek SB&apos;s second solution which is good and simple solution too.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1837006/danieltuzes&quot; title=&quot;2,066 reputation&quot; class=&quot;comment-user&quot;&gt;DanielTuzes&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25992059_7868986&quot;&gt;&lt;span title=&quot;2013-07-23 14:24:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 23, 2013 at 14:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;getline&lt;/code&gt; is in &lt;code&gt;string&lt;/code&gt; &lt;a href=&quot;http://www.cplusplus.com/reference/string/string/getline/&quot; rel=&quot;nofollow noreferrer&quot;&gt;see&lt;/a&gt;, so don&apos;t forget the &lt;code&gt;#include &amp;lt;string&amp;gt;&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2191065/mxmlnkn&quot; title=&quot;1,722 reputation&quot; class=&quot;comment-user&quot;&gt;mxmlnkn&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77110924_7868986&quot;&gt;&lt;span title=&quot;2017-07-12 23:02:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 12, 2017 at 23:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What happens if you remove C++&apos;s synchronization with C on the console outputs? You might be measuring a known disadvantage of the default behavior of &lt;code&gt;std::cout&lt;/code&gt; vs &lt;code&gt;printf&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4581301/user4581301&quot; title=&quot;31,599 reputation&quot; class=&quot;comment-user&quot;&gt;user4581301&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90170066_51572325&quot;&gt;&lt;span title=&quot;2018-07-30 20:41:05Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 30, 2018 at 20:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks for bringing this concern. I&apos;ve redone the tests and the performance is still the same. I have edited the code to use the &lt;code&gt;printf()&lt;/code&gt; function in all cases for consistency. I have also tried using &lt;code&gt;std::cout&lt;/code&gt; in all cases and this made absolutely no difference. As I have just described in the text, the output of the program goes to &lt;code&gt;/dev/null&lt;/code&gt; so the time to print the lines is not measured.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4289700/hugoteixeira&quot; title=&quot;4,294 reputation&quot; class=&quot;comment-user&quot;&gt;HugoTeixeira&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90174765_51572325&quot;&gt;&lt;span title=&quot;2018-07-31 02:11:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 31, 2018 at 2:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Groovy. Thanks. Wonder where the slowdown is.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4581301/user4581301&quot; title=&quot;31,599 reputation&quot; class=&quot;comment-user&quot;&gt;user4581301&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90176368_51572325&quot;&gt;&lt;span title=&quot;2018-07-31 04:34:34Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 31, 2018 at 4:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Hi @HugoTeixeira I know this is an old thread, I tried to replicate your results and could not see any significant difference between c and c++  &lt;a href=&quot;https://github.com/simonsso/readfile_benchmarks&quot; rel=&quot;nofollow noreferrer&quot;&gt;github.com/simonsso/readfile_benchmarks&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/391691/simson&quot; title=&quot;3,086 reputation&quot; class=&quot;comment-user&quot;&gt;Simson&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95805157_51572325&quot;&gt;&lt;span title=&quot;2019-02-03 05:24:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 3, 2019 at 5:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Fareanor That&apos;s not correct. It only affects the &lt;i&gt;standard&lt;/i&gt; C++ streams, &lt;code&gt;std::ifstream file&lt;/code&gt; is not one of them. &lt;a href=&quot;https://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio&quot; rel=&quot;nofollow noreferrer&quot;&gt;en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5267751/user202729&quot; title=&quot;2,832 reputation&quot; class=&quot;comment-user&quot;&gt;user202729&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment110324706_51572325&quot;&gt;&lt;span title=&quot;2020-06-15 01:16:11Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 15, 2020 at 1:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What happens when it&apos;s not possible to read two &lt;code&gt;int&lt;/code&gt; tokens from the stream in &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;? How can one make it work with a backtracking parser (i.e. when &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; fails, roll back the stream to previous position end return false or something like that)?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1044117/fferri&quot; title=&quot;17,025 reputation&quot; class=&quot;comment-user&quot;&gt;fferri&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment69036028_39056648&quot;&gt;&lt;span title=&quot;2016-12-01 13:31:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 1, 2016 at 13:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If it&apos;s not possible to read two &lt;code&gt;int&lt;/code&gt; tokens, then the &lt;code&gt;is&lt;/code&gt; stream will evaluate to &lt;code&gt;false&lt;/code&gt; and the reading loop will terminate at that point. You can detect this within &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; by checking the return value of the individual reads. If you want to roll back the stream, you would call &lt;code&gt;is.clear()&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/325117/martin-broadhurst&quot; title=&quot;8,993 reputation&quot; class=&quot;comment-user&quot;&gt;Martin Broadhurst&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment70250432_39056648&quot;&gt;&lt;span title=&quot;2017-01-07 14:10:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 7, 2017 at 14:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;in the &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; it is more correct to say &lt;code&gt;is &amp;gt;&amp;gt; std::ws &amp;gt;&amp;gt; coordinates.x &amp;gt;&amp;gt; std::ws &amp;gt;&amp;gt; coordinates.y &amp;gt;&amp;gt; std::ws;&lt;/code&gt; since otherwise you are assuming that your input stream is in the whitespace-skipping mode.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/933219/darko-veberic&quot; title=&quot;428 reputation&quot; class=&quot;comment-user&quot;&gt;Darko Veberic&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment73190943_39056648&quot;&gt;&lt;span title=&quot;2017-03-27 17:55:22Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 27, 2017 at 17:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Not sure this deserved a down vote. OP asked for a way to get each line. This answer does that and gives a great tip of making sure the file closes. For a simple program it may not be needed but at minimum a GREAT habit to form. It could maybe be improved by adding in a few lines of code to process the individual lines it pulls but overall is the simplest answer to the OPs question.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1163705/xandor&quot; title=&quot;438 reputation&quot; class=&quot;comment-user&quot;&gt;Xandor&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102403429_50123151&quot;&gt;&lt;span title=&quot;2019-09-18 18:22:42Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 18, 2019 at 18:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":511,"title":"Read file line by line using ifstream in C++","content":"\n                \n&lt;p&gt;The contents of file.txt are:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Where &lt;code&gt;5 3&lt;/code&gt; is a coordinate pair.\nHow do I process this data line by line in C++?&lt;/p&gt;\n&lt;p&gt;I am able to get the first line, but how do I get the next line of the file?&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;ifstream myfile;\nmyfile.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;file.txt&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"read-file-line-by-line-using-ifstream-in-c++-1657388236966","postType":"QUESTION","createdAt":"2022-07-09T17:37:17.000Z","updatedAt":"2022-07-09T17:37:17.000Z","tags":[{"id":2537,"name":"ofstream","slug":"ofstream","createdAt":"2022-07-09T17:37:17.000Z","updatedAt":"2022-07-09T17:37:17.000Z","Questions_Tags":{"questionId":511,"tagId":2537}}]}]}},"__N_SSG":true}