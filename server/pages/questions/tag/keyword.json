{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;If you&apos;re in the global scope then there&apos;s not much difference. Read &lt;a href=&quot;https://stackoverflow.com/a/1471738/1541051&quot;&gt;Kangax&apos;s&lt;/a&gt; answer for explanation&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re in a function then &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; will create a local variable, &quot;no var&quot; will look up the scope chain until it finds the variable or hits the global scope (at which point it will create it):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// These are both globals&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\nbar = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Local&lt;/span&gt;\n    bar = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;     &lt;span class=&quot;hljs-comment&quot;&gt;// Global&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Execute an anonymous function&lt;/span&gt;\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; wibble = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Local&lt;/span&gt;\n        foo = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Inherits from scope above (creating a closure)&lt;/span&gt;\n        moo = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Global&lt;/span&gt;\n    }())\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you&apos;re not doing an assignment then you need to use &lt;code&gt;var&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x; &lt;span class=&quot;hljs-comment&quot;&gt;// Declare x&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;There&apos;s a difference&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;var x = 1&lt;/code&gt; &lt;strong&gt;declares variable&lt;/strong&gt; &lt;code&gt;x&lt;/code&gt; in current scope (aka execution context). If the declaration appears in a function - a local variable is declared; if it&apos;s in global scope - a global variable is declared.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;x = 1&lt;/code&gt;, on the other hand, is merely a property assignment. It first tries to resolve &lt;code&gt;x&lt;/code&gt; against scope chain. If it finds it anywhere in that scope chain, it performs assignment; if it doesn&apos;t find &lt;code&gt;x&lt;/code&gt;, only then does &lt;strong&gt;it creates &lt;code&gt;x&lt;/code&gt; property on a global object&lt;/strong&gt; (which is a top level object in a scope chain). &lt;/p&gt;\n\n&lt;p&gt;Now, notice that it doesn&apos;t declare a global variable, it creates a global property.&lt;/p&gt;\n\n&lt;p&gt;The difference between the two is subtle and might be confusing unless you understand that &lt;strong&gt;variable declarations also create properties&lt;/strong&gt; (only on a Variable Object) and that every property in Javascript (well, ECMAScript) have certain flags that describe their properties - ReadOnly, DontEnum and DontDelete.&lt;/p&gt;\n\n&lt;p&gt;Since variable declaration creates property with the DontDelete flag, the difference between &lt;code&gt;var x = 1&lt;/code&gt; and &lt;code&gt;x = 1&lt;/code&gt; (when executed in global scope) is that the former one - variable declaration - creates the DontDelete&apos;able property, and latter one doesn&apos;t. As a consequence, the property created via this implicit assignment can then be deleted from the global object, and the former one - the one created via variable declaration - cannot be deleted.&lt;/p&gt;\n\n&lt;p&gt;But this is just theory of course, and &lt;strong&gt;in practice there are even more differences between the two&lt;/strong&gt;, due to various bugs in implementations (such as those from IE).&lt;/p&gt;\n\n&lt;p&gt;Hope it all makes sense : )&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;[Update 2010/12/16]&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In ES5 (ECMAScript 5; recently standardized, 5th edition of the language) there&apos;s a so-called &quot;strict mode&quot;  an opt-in language mode, which slightly changes the behavior of undeclared assignments. In strict mode, assignment to an undeclared identifier is a &lt;strong&gt;ReferenceError&lt;/strong&gt;. The rationale for this was to catch accidental assignments, preventing creation of undesired global properties. Some of the newer browsers have already started rolling support for strict mode. See, for example, &lt;a href=&quot;http://kangax.github.com/es5-compat-table&quot; rel=&quot;noreferrer&quot;&gt;my compat table&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Saying it&apos;s the difference between &quot;&lt;strong&gt;local&lt;/strong&gt; and &lt;strong&gt;global&lt;/strong&gt;&quot; isn&apos;t entirely accurate.&lt;/p&gt;\n\n&lt;p&gt;It might be better to think of it as the difference between &quot;&lt;strong&gt;local&lt;/strong&gt; and &lt;strong&gt;nearest&lt;/strong&gt;&quot;. The nearest can surely be global, but that won&apos;t always be the case.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* global scope */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outer&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* local scope */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* nearest scope = outer */&lt;/span&gt;\n    local = !&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;/* nearest scope = outer */&lt;/span&gt;\n        local = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;/* nearest scope = undefined */&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;/* defaults to defining a global */&lt;/span&gt;\n        public = &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When Javascript is executed in a browser, all your code is surrounded by a with statement, like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Your code&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More info on &lt;a href=&quot;https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Statements/with&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;with&lt;/code&gt; - MDN&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Since &lt;code&gt;var&lt;/code&gt; declares a variable &lt;em&gt;in the current scope&lt;/em&gt; , there is no difference between declaring &lt;code&gt;var&lt;/code&gt; &lt;strong&gt;inside window&lt;/strong&gt; and not declaring it at all.&lt;/p&gt;\n\n&lt;p&gt;The difference comes when you&apos;re not directly inside the window, e.g. inside a function or inside a block.&lt;/p&gt;\n\n&lt;p&gt;Using &lt;code&gt;var&lt;/code&gt; lets you hide external variables that have the same name. In this way you can simulate a &quot;private&quot; variable, but that&apos;s another topic.&lt;/p&gt;\n\n&lt;p&gt;A rule of thumb is to always use &lt;code&gt;var&lt;/code&gt;, because otherwise you run the risk of introducing subtle bugs.&lt;/p&gt;\n\n&lt;p&gt;EDIT:\nAfter the critiques I received, I would like to emphasize the following:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;var&lt;/code&gt; declares a variable &lt;em&gt;in the current scope&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;The global scope is &lt;code&gt;window&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Not using &lt;code&gt;var&lt;/code&gt; implicitly declares &lt;code&gt;var&lt;/code&gt; in the global scope (window)&lt;/li&gt;\n&lt;li&gt;Declaring a variable in the global scope (window) using &lt;code&gt;var&lt;/code&gt; is the same as omitting it.&lt;/li&gt;\n&lt;li&gt;Declaring a variable in scopes different from window using &lt;code&gt;var&lt;/code&gt; &lt;strong&gt;is not the same thing&lt;/strong&gt; as declaring a variable without &lt;code&gt;var&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Always declare &lt;code&gt;var&lt;/code&gt; explicitly because it&apos;s good practice&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Always use the &lt;code&gt;var&lt;/code&gt; keyword to declare variables. Why? Good coding practice should be enough of a reason in itself, but omitting it means it is declared in the &lt;strong&gt;global&lt;/strong&gt; scope (a variable like this is called an &quot;implied&quot; global). Douglas Crockford &lt;a href=&quot;http://javascript.crockford.com/code.html#variable%20declarations&quot; rel=&quot;noreferrer&quot;&gt;recommends never using implied globals&lt;/a&gt;, and according to the &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/ScriptingAutomation/Conceptual/JSCodingGuide/Advanced/Advanced.html#//apple_ref/doc/uid/TP40006541&quot; rel=&quot;noreferrer&quot;&gt;Apple JavaScript Coding Guidelines&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Any variable created without the &lt;code&gt;var&lt;/code&gt;\n  keyword is created at the global scope\n  and is not garbage collected when the\n  function returns (because it doesnt\n  go out of scope), presenting the\n  opportunity for a memory leak.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Here&apos;s quite a good example of how you can get caught out from not declaring local variables with &lt;code&gt;var&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;one&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;one&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;i++)\n    {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;two&lt;/span&gt;();\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(i);\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;two&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;(&lt;code&gt;i&lt;/code&gt; is reset at every iteration of the loop, as it&apos;s not declared locally in the &lt;code&gt;for&lt;/code&gt; loop but globally) eventually resulting in infinite loop&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I would say it&apos;s better to use &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; in most situations.&lt;/p&gt;\n\n&lt;p&gt;Local variables are always faster than the variables in global scope.&lt;/p&gt;\n\n&lt;p&gt;If you do not use &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; to declare a variable, the variable will be in global scope.&lt;/p&gt;\n\n&lt;p&gt;For more information, you can search &quot;scope chain JavaScript&quot; in Google.&lt;/p&gt;\n    ","\n&lt;h1&gt;Don&apos;t use &lt;code&gt;var&lt;/code&gt;!&lt;/h1&gt;\n&lt;p&gt;&lt;code&gt;var&lt;/code&gt; was the pre-ES6 way to declare a variable. We are now &lt;em&gt;in the future&lt;/em&gt;, and you should be coding as such.&lt;/p&gt;\n&lt;h2&gt;Use &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;&lt;code&gt;const&lt;/code&gt; should be used for ~95% of cases. It makes it so the variable reference can&apos;t change, thus array, object, and DOM node properties can change and should likely be &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;let&lt;/code&gt; should be be used for any variable expecting to be reassigned. This includes within a for loop. If you ever write &lt;code&gt;varName =&lt;/code&gt; beyond the initialization, use &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Both have block level scoping, as expected in most other languages.&lt;/p&gt;\n    ","\n&lt;p&gt;another difference \ne.g&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = a || [] ; &lt;span class=&quot;hljs-comment&quot;&gt;// works &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;while &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = a || [] ; &lt;span class=&quot;hljs-comment&quot;&gt;// a is undefined error.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;var&lt;/code&gt; is always a good idea to prevent variables from cluttering the global scope and variables from conflicting with each other, causing unwanted overwriting.&lt;/p&gt;\n    ","\n&lt;p&gt;Without &lt;code&gt;var&lt;/code&gt; - global variable.&lt;/p&gt;\n\n&lt;p&gt;Strongly recommended to &lt;strong&gt;ALWAYS&lt;/strong&gt; use &lt;code&gt;var&lt;/code&gt; statement, because init global variable in local context - is evil. But, if you need this dirty trick, you should write comment at start of page:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* global: varname1, varname2... */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is example code I have written for you to understand this concept:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; \nbar = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;     \nfooba = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Execute an anonymous function&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {    \n    bar = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;             &lt;span class=&quot;hljs-comment&quot;&gt;//overwrites global scope bar&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;           &lt;span class=&quot;hljs-comment&quot;&gt;//a new foo variable is created in this&apos; function&apos;s scope&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fooba = &lt;span class=&quot;hljs-number&quot;&gt;900&lt;/span&gt;;       &lt;span class=&quot;hljs-comment&quot;&gt;//same as above&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(foo);   &lt;span class=&quot;hljs-comment&quot;&gt;//prints 4&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(bar);   &lt;span class=&quot;hljs-comment&quot;&gt;//prints 100&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(fooba); &lt;span class=&quot;hljs-comment&quot;&gt;//prints 900&lt;/span&gt;\n})();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br/&amp;gt;&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br/&amp;gt;&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(foo);       &lt;span class=&quot;hljs-comment&quot;&gt;//prints 5&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(bar);       &lt;span class=&quot;hljs-comment&quot;&gt;//prints 100&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(fooba);     &lt;span class=&quot;hljs-comment&quot;&gt;//prints 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;@Chris S gave a nice example showcasing the practical difference (and danger) between &lt;code&gt;var&lt;/code&gt; and no &lt;code&gt;var&lt;/code&gt;. Here&apos;s another one, I find this one particularly dangerous because the difference is only visible in an asynchronous environment so it can easily slip by during testing.&lt;/p&gt;\n\n&lt;p&gt;As you&apos;d expect the following snippet outputs &lt;code&gt;[&quot;text&quot;]&lt;/code&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; array = []\n  array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;())&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;So does the following snippet (note the missing &lt;code&gt;let&lt;/code&gt; before &lt;code&gt;array&lt;/code&gt;):&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  array = []\n  array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;())&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Executing the data manipulation asynchronously still produces the same result with a single executor:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  array = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n  })\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result)})&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;But behaves differently with multiple ones:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  array = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n  })\n}\n\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result)})\n})&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Using let however:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; array = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n  })\n}\n\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result)})\n})&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As someeone trying to learn this this is how I see it. The above examples were maybe a bit overly complicated for a beginner. &lt;/p&gt;\n\n&lt;p&gt;If you run this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(local)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(local);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output will read as:  false, false, true, true&lt;/p&gt;\n\n&lt;p&gt;Because it sees the variables in the function as seperate from those outside of it, hence the term local variable and this was because we used var in the assignment. If you take away the var in the function so it now reads like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  local = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(local)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(local);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output is false, false, false, false&lt;/p&gt;\n\n&lt;p&gt;This is because rather than creating a new variable in the local scope or function it simply uses the global variables and reassigns them to false. &lt;/p&gt;\n    ","\n&lt;p&gt;I see people are confused when declaring variables with or without &lt;strong&gt;var&lt;/strong&gt; and inside or outside the function. Here is a deep example that will walk you through these steps:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/ozkantarik/L0avu6vh/&quot; rel=&quot;noreferrer&quot;&gt;See the script below in action here at jsfiddle&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined outside the function without var&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined outside the function with var&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting outside of all functions... \\n \\n a, b defined but c, d not defined yet: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n \\n (If I try to show the value of the undefined c or d, console.log would throw &apos;Uncaught ReferenceError: c is not defined&apos; error and script would stop running!)&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testVar1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined inside the function without var&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined inside the function with var&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Now inside the 1. function: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n d:&quot;&lt;/span&gt; + d);\n\n    a = a + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    b = b + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    d = d + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;After added values inside the 1. function: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n d:&quot;&lt;/span&gt; + d);\n};\n\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;testVar1&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Run the 1. function again...&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;testVar1&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testVar2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined inside the function with var&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Now inside the 2. function: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n d:&quot;&lt;/span&gt; + d);\n\n    a = a + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    b = b + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    d = d + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;After added values inside the 2. function: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n d:&quot;&lt;/span&gt; + d);\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;testVar2&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Now outside of all functions... \\n \\n Final Values: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n You will not be able to see d here because then the value is requested, console.log would throw error &apos;Uncaught ReferenceError: d is not defined&apos; and script would stop. \\n &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;**************\\n Conclusion \\n ************** \\n \\n 1. No matter declared with or without var (like a, b) if they get their value outside the function, they will preserve their value and also any other values that are added inside various functions through the script are preserved.\\n 2. If the variable is declared without var inside a function (like c), it will act like the previous rule, it will preserve its value across all functions from now on. Either it got its first value in function testVar1() it still preserves the value and get additional value in function testVar2() \\n 3. If the variable is declared with var inside a function only (like d in testVar1 or testVar2) it will will be undefined whenever the function ends. So it will be temporary variable in a function.&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Now check console.log for the error when value d is requested next:&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(d);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt; &lt;/p&gt;\n  \n  &lt;ol&gt;\n  &lt;li&gt;No matter declared with or without var (like a, b) if they get their value outside the function, they will preserve their value and also any other values that are added inside various functions through the script are preserved.&lt;/li&gt;\n  &lt;li&gt;If the variable is declared without var inside a function (like c), it will act like the previous rule, it will preserve its value across all functions from now on. Either it got its first value in function testVar1() it still preserves the value and get additional value in function testVar2() &lt;/li&gt;\n  &lt;li&gt;If the variable is declared with var inside a function only (like d in testVar1 or testVar2) it will will be undefined whenever the function ends. So it will be temporary variable in a function.&lt;/li&gt;\n  &lt;/ol&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Inside a code you if you use a variable without using var, then what happens is the automatically var var_name is placed in the global scope eg:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;someFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = some_value; &lt;span class=&quot;hljs-comment&quot;&gt;/*a has local scope and it cannot be accessed when this\n    function is not active*/&lt;/span&gt;\n    b = a; &lt;span class=&quot;hljs-comment&quot;&gt;/*here it places &quot;var b&quot; at top of script i.e. gives b global scope or\n    uses already defined global variable b */&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Besides scopes issue, some folks also mention &lt;a href=&quot;https://www.w3schools.com/js/js_hoisting.asp&quot; rel=&quot;nofollow noreferrer&quot;&gt;hoisting&lt;/a&gt;, but no one gave an example. Here&apos;s one for global scope:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(noErrorCase);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; noErrorCase = &lt;span class=&quot;hljs-string&quot;&gt;&quot;you will reach that point&quot;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(runTimeError);\nrunTimeError = &lt;span class=&quot;hljs-string&quot;&gt;&quot;you won&apos;t reach that point&quot;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Without using &quot;var&quot; variables can only define when set a value. In example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;my_var;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;cannot work in &lt;strong&gt;global scope&lt;/strong&gt; or &lt;strong&gt;any other scope&lt;/strong&gt;. It should be with value like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;my_var = &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On the other hand you can define a vaiable like;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; my_var;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Its value is &lt;code&gt;undefined&lt;/code&gt; ( Its value is not &lt;code&gt;null&lt;/code&gt; and it is not equal to &lt;code&gt;null&lt;/code&gt; interestingly.).&lt;/p&gt;\n    ","\n&lt;p&gt;You should use var keyword unless you intend to have the variable attached to window object in browser. &lt;a href=&quot;http://www.yourtechchick.com/javascript/difference-between-javascript-variables-with-var-and-without-var/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&apos;s a link that explains scoping and difference between glocal scoping and local scoping with and wihtout var keyword.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;When variables get defined without the use of var keyword, what it looks like is a simple assignment operation.&lt;/p&gt;\n\n&lt;p&gt;When the value is assigned to a variable in javascript, the interpreter first tries to find the variable declaration in the same context/scope as that of assignment. When the interpreter executes &lt;code&gt;dummyVariable = 20&lt;/code&gt;, it looks up for the declaration of dummyVariable at beginning of the function. \n(Since all Variable declarations are moved to the beginning of the context by javascript interpreter and this is called hoisting)&lt;/p&gt;\n\n&lt;p&gt;You may also want to look at &lt;a href=&quot;http://www.yourtechchick.com/javascript/what-is-hoisting-in-javascript-javascript-hoisting-explained/&quot; rel=&quot;nofollow noreferrer&quot;&gt;hoisting in javascript&lt;/a&gt;&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;When chaining var declarations, does putting a newline after a comma affects the behavior? var x=1, y=2, [return]z=3;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/236345/alfabravo&quot; title=&quot;7,374 reputation&quot; class=&quot;comment-user&quot;&gt;Alfabravo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10076492_1470488&quot;&gt;&lt;span title=&quot;2011-11-20 04:35:47Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 20, 2011 at 4:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Failing to use &quot;var&quot; also leaves you exposed in case the variable name you chose happens to be a previously defined global variable.   See my journey of grief here: &lt;a href=&quot;http://stackoverflow.com/questions/16704014/why-do-chrome-and-firefox-handle-javascript-variable-set-inside-jquery-ajax-ca&quot; title=&quot;why do chrome and firefox handle javascript variable set inside jquery ajax ca&quot;&gt;stackoverflow.com/questions/16704014/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/319741/scott-c-wilson&quot; title=&quot;17,974 reputation&quot; class=&quot;comment-user&quot;&gt;Scott C Wilson&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment24069577_1470488&quot;&gt;&lt;span title=&quot;2013-05-23 15:49:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 23, 2013 at 15:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Ray Toal&apos;s meloncard blog post (definitely worth a read) has moved to &lt;a href=&quot;http://blog.safeshepherd.com/23/how-one-missing-var-ruined-our-launch/&quot; rel=&quot;nofollow noreferrer&quot;&gt;blog.safeshepherd.com/23/how-one-missing-var-ruined-our-launch&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1337498/hephaestus&quot; title=&quot;1,882 reputation&quot; class=&quot;comment-user&quot;&gt;Hephaestus&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment33579065_1470488&quot;&gt;&lt;span title=&quot;2014-03-02 17:57:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 2, 2014 at 17:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;d never imagined a poem could inspire me consideration for a programmatic problem&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/576767/f%c3%a9lix-adriyel-gagnon-grenier&quot; title=&quot;7,943 reputation&quot; class=&quot;comment-user&quot;&gt;Félix Adriyel Gagnon-Grenier&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46353780_1470488&quot;&gt;&lt;span title=&quot;2015-03-15 08:22:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 15, 2015 at 8:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Gibolt but look at the question date, it&apos;s a kinda unfair summon a 2009 question to tell that. Even though, it&apos;s still valid as in current date for maintainability, there are out there a bunch of not &quot;modern JS&quot; code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/986862/andre-figueiredo&quot; title=&quot;12,114 reputation&quot; class=&quot;comment-user&quot;&gt;Andre Figueiredo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment85627514_1470488&quot;&gt;&lt;span title=&quot;2018-03-16 03:53:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 16, 2018 at 3:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Is &quot;not really much difference&quot; == &quot;No Difference&quot;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/114916/alex&quot; title=&quot;73,929 reputation&quot; class=&quot;comment-user owner&quot;&gt;Alex&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1319876_1470494&quot;&gt;&lt;span title=&quot;2009-09-24 08:56:43Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 24, 2009 at 8:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Well, actually yes, there&apos;s difference :) Whether that difference is important is another question. See my answer further down: &lt;a href=&quot;http://stackoverflow.com/questions/1470488/difference-between-using-var-and-not-using-var-in-javascript#answer-1471738&quot; title=&quot;difference between using var and not using var in javascript%23answer 1471738&quot;&gt;stackoverflow.com/questions/1470488/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/130652/kangax&quot; title=&quot;38,421 reputation&quot; class=&quot;comment-user&quot;&gt;kangax&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1325184_1470494&quot;&gt;&lt;span title=&quot;2009-09-25 04:11:29Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 25, 2009 at 4:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I think that may be Alex&apos;s point, which is why he&apos;s written it using the &quot;is equal to&quot; operator!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/407757/james-bedford&quot; title=&quot;28,153 reputation&quot; class=&quot;comment-user&quot;&gt;James Bedford&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment16682006_1470494&quot;&gt;&lt;span title=&quot;2012-09-13 17:52:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 13, 2012 at 17:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s like shooting oneself with a railgun... Forget to put a &apos;var&apos; before one&apos;s variable, and end up modifying a variable &lt;i&gt;somewhere&lt;/i&gt; in the scope chain... Try convincing a Java/C/Python/etc. developer that JavaScript is worthwhile. Ha! C/C++ pitfalls look nice by contrast. Imagine having to debug JavaScript... And some people do that, of course. And there&apos;s so much code (and not simple code, mind you) written in JavaScript...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/348183/albus-dumbledore&quot; title=&quot;12,010 reputation&quot; class=&quot;comment-user&quot;&gt;Albus Dumbledore&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment21159644_1470494&quot;&gt;&lt;span title=&quot;2013-02-24 12:33:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 24, 2013 at 12:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;i&gt;If you&apos;re in the global scope then there&apos;s no difference.&lt;/i&gt; &amp;gt;&amp;gt; there is a difference which is explained in the answer below&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2545680/max-koretskyi&quot; title=&quot;94,600 reputation&quot; class=&quot;comment-user&quot;&gt;Max Koretskyi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27697954_1470494&quot;&gt;&lt;span title=&quot;2013-09-13 11:39:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 13, 2013 at 11:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If I recall correctly, I think I once found a way to be able to &lt;code&gt;delete&lt;/code&gt; a var-declared variable with some &lt;code&gt;eval&lt;/code&gt; hack. If I remember the exact trick I&apos;ll post here.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/283055/tower&quot; title=&quot;94,235 reputation&quot; class=&quot;comment-user&quot;&gt;Tower&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7698113_1471738&quot;&gt;&lt;span title=&quot;2011-06-30 14:51:22Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 30, 2011 at 14:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Mageek He might be taking about eval-declared variables which are deletable. I wrote a &lt;a href=&quot;http://perfectionkills.com/understanding-delete/&quot; rel=&quot;nofollow noreferrer&quot;&gt;blog post about this&lt;/a&gt; once.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/130652/kangax&quot; title=&quot;38,421 reputation&quot; class=&quot;comment-user&quot;&gt;kangax&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment14566397_1471738&quot;&gt;&lt;span title=&quot;2012-06-20 11:06:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 20, 2012 at 11:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Little bit out of topic, but mentioning it here for reference. &quot;let&quot; is very similar to &quot;var&quot; and is supported in Mozilla. The main difference is that the scope of a var variable is the entire enclosing function where as &quot;let&quot; is restricted to its block&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/815944/mac&quot; title=&quot;617 reputation&quot; class=&quot;comment-user&quot;&gt;mac&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17100116_1471738&quot;&gt;&lt;span title=&quot;2012-10-01 11:16:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 1, 2012 at 11:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@kangax what if the last two lines of Alex&apos;s examples were mixed: &lt;code&gt;var someObject = {}&lt;/code&gt; and &lt;code&gt;someObject.someProperty = 5&lt;/code&gt; ? Would &lt;code&gt;someProperty&lt;/code&gt; become global, while the object it is a property of remains local?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/882146/snapfractalpop&quot; title=&quot;1,926 reputation&quot; class=&quot;comment-user&quot;&gt;snapfractalpop&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18637186_1471738&quot;&gt;&lt;span title=&quot;2012-11-28 00:43:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 28, 2012 at 0:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The spec name for what @kangax calls the &lt;i&gt;DontDelete&lt;/i&gt; flag is &lt;i&gt;configurable (= &lt;code&gt;false&lt;/code&gt;)&lt;/i&gt;, you can read about this in regards to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1615483/paul-s&quot; title=&quot;61,879 reputation&quot; class=&quot;comment-user&quot;&gt;Paul S.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31556253_1471738&quot;&gt;&lt;span title=&quot;2014-01-08 14:55:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 8, 2014 at 14:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Isn&apos;t the nearest scope &lt;code&gt;outer&lt;/code&gt; where you define &lt;code&gt;var global = false;&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/378151/snekse&quot; title=&quot;15,025 reputation&quot; class=&quot;comment-user&quot;&gt;Snekse&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment22998618_1470719&quot;&gt;&lt;span title=&quot;2013-04-19 13:33:29Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 19, 2013 at 13:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Snekse:  &apos;nearest&apos; doesn&apos;t apply when &amp;lt;code&amp;gt;var global = false;&amp;lt;/code&amp;gt; is declared.  In that declaration, &apos;global&apos; is placed in the scope of outer() because &apos;var&apos; is used in the declaration.  Because &apos;var&apos; is not used in inner(), it will change the value in the next level up, which is outer().&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1724352/mitch&quot; title=&quot;623 reputation&quot; class=&quot;comment-user&quot;&gt;Mitch&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment53134336_1470719&quot;&gt;&lt;span title=&quot;2015-09-18 02:56:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 18, 2015 at 2:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I wonder if you comment would change if you changed that line to &lt;code&gt;var global = local;&lt;/code&gt; in which case the nears scope of local would be the &quot;local&quot; outer scope that is actively being defined.  Though it gets strange if you would change that same line to &lt;code&gt;var global = global&lt;/code&gt; in which case the nearest scope when searching for the value of &lt;code&gt;global&lt;/code&gt; would be up a level at the global window scope.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/378151/snekse&quot; title=&quot;15,025 reputation&quot; class=&quot;comment-user&quot;&gt;Snekse&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment53341724_1470719&quot;&gt;&lt;span title=&quot;2015-09-23 22:34:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 23, 2015 at 22:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I didn&apos;t downvote you, but scope is probably a better word than window.  You&apos;re whole explanation is a bit obtuse.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/102937/robert-harvey&quot; title=&quot;174,053 reputation&quot; class=&quot;comment-user&quot;&gt;Robert Harvey&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1324476_1470588&quot;&gt;&lt;span title=&quot;2009-09-24 23:12:12Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 24, 2009 at 23:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I simply call things with it&apos;s name, you want to call it &quot;global scope&quot;, it&apos;s ok, but client-side, by convention, is the window object, that is the last element of the scope chain, that why you can call every function and every object in window without write &quot;window.&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/27340/kentaromiura&quot; title=&quot;6,379 reputation&quot; class=&quot;comment-user&quot;&gt;kentaromiura&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1325366_1470588&quot;&gt;&lt;span title=&quot;2009-09-25 05:19:24Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 25, 2009 at 5:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1 this is a really nice explanation--i have not heard the var/no var issue framed (no pun intended) like this before.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/66549/doug&quot; title=&quot;67,634 reputation&quot; class=&quot;comment-user&quot;&gt;doug&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment12908370_1470588&quot;&gt;&lt;span title=&quot;2012-04-09 23:49:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 9, 2012 at 23:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Most of this answer is deprecated with &lt;code&gt;let&lt;/code&gt; in ES6.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/124486/evan-carroll&quot; title=&quot;72,361 reputation&quot; class=&quot;comment-user&quot;&gt;Evan Carroll&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment32002903_1470588&quot;&gt;&lt;span title=&quot;2014-01-20 21:12:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 20, 2014 at 21:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@EvanCarroll This answer is also technically incorrect since omitting var doesn&apos;t declare any variable, instead it creates a deletable property on the global object, besides with ES5 &quot;use strict&quot; mode most of the answer is obviously not correct, also let wasn&apos;t even considered in this answer since at the time of the question there wasn&apos;t any reference to the javascript version (added yesterday) which imply that the standard of reference (at that time) was ECMA 262 3rd Edition.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/27340/kentaromiura&quot; title=&quot;6,379 reputation&quot; class=&quot;comment-user&quot;&gt;kentaromiura&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment32077363_1470588&quot;&gt;&lt;span title=&quot;2014-01-22 15:30:48Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 22, 2014 at 15:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;Good coding practice&quot; should never be sufficient reason in itself.  It amounts to &quot;some guys on the internet said this is how my code should look&quot;.  That&apos;s even less valid than &quot;my teacher said&quot;, unless one at least vaguely understands the reason behind the rule.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/319403/chao&quot; title=&quot;82,536 reputation&quot; class=&quot;comment-user&quot;&gt;cHao&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment24087159_1470722&quot;&gt;&lt;span title=&quot;2013-05-24 04:34:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 24, 2013 at 4:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@cHao I think &lt;code&gt;good coding practice&lt;/code&gt; is always sufficient reason if it&apos;s a recommended best practice, which this is and by several Javascript authors.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/21574/chris-s&quot; title=&quot;63,694 reputation&quot; class=&quot;comment-user&quot;&gt;Chris S&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31379878_1470722&quot;&gt;&lt;span title=&quot;2014-01-03 13:58:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 3, 2014 at 13:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ChrisS: No, &quot;good coding practice&quot; is not reason in itself.  The &lt;i&gt;reason&lt;/i&gt; it&apos;s considered good practice is what matters.  Unless those authors tell you why they recommend it, their recommendation should carry no weight whatsoever.  If you don&apos;t agree with the reasons, then you are free to consider it bad advice.  And if you follow it without ever asking why, that is how cargo cultism starts.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/319403/chao&quot; title=&quot;82,536 reputation&quot; class=&quot;comment-user&quot;&gt;cHao&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31389637_1470722&quot;&gt;&lt;span title=&quot;2014-01-03 18:16:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 3, 2014 at 18:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yikes!  I can just imagine all the bugs that could be caused by that typo.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3769905/bonsaioak&quot; title=&quot;25,131 reputation&quot; class=&quot;comment-user&quot;&gt;BonsaiOak&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41322800_1470646&quot;&gt;&lt;span title=&quot;2014-10-12 20:07:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 12, 2014 at 20:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;i&apos;m curious, why you are passing i as an argument to two()? (inside the for loop) is that redundant?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3448561/kalin&quot; title=&quot;155 reputation&quot; class=&quot;comment-user&quot;&gt;kalin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment66938255_1470646&quot;&gt;&lt;span title=&quot;2016-10-03 03:03:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 3, 2016 at 3:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The argument is ignored in two() function encapsulated in one() function, since the function two()  was defined without an parameter.  You are quite correct, It is not needed since it plays not role.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3701666/kk&quot; title=&quot;653 reputation&quot; class=&quot;comment-user&quot;&gt;KK.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment72009809_1470646&quot;&gt;&lt;span title=&quot;2017-02-24 06:54:37Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 24, 2017 at 6:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Bug or feature?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8404453/themaster&quot; title=&quot;38,481 reputation&quot; class=&quot;comment-user&quot;&gt;TheMaster&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment101735862_1470646&quot;&gt;&lt;span title=&quot;2019-08-24 23:07:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 24, 2019 at 23:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you declare a variable by using var keyword, it will be created at runtime so shouldnt it be slower ? Because other one is created at parsed time.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/735259/bar%c4%b1%c5%9f-velio%c4%9flu&quot; title=&quot;5,523 reputation&quot; class=&quot;comment-user&quot;&gt;Barış Velioğlu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15912832_1470517&quot;&gt;&lt;span title=&quot;2012-08-14 01:12:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 14, 2012 at 1:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@RyuKaplan - hey, is that true?  I tried googling and couldn&apos;t get any info on the subject!  Do you have a source authority for that assertion?  Thx&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/595305/mike-rodent&quot; title=&quot;12,425 reputation&quot; class=&quot;comment-user&quot;&gt;mike rodent&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment22775457_1470517&quot;&gt;&lt;span title=&quot;2013-04-12 17:24:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 12, 2013 at 17:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@RyuKaplan Parsing/compiling is different from actually running the code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6303733/gcampbell&quot; title=&quot;1,242 reputation&quot; class=&quot;comment-user&quot;&gt;gcampbell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63948102_1470517&quot;&gt;&lt;span title=&quot;2016-07-08 10:19:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 8, 2016 at 10:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Replace all you &apos;var&apos; by &apos;const&apos; (replace all). You will quickly notice where are your re-assigned variables. If you have too many of them, you probably code anti-patternly: most reassignable variables can be embedded in closures or as object-properties. If you have a few: use &apos;let&apos; for them. Finally, if some variables where not delared at all with &apos;var&apos;, they will stay undeclared, and are still present in the global space, beware. About @Gibolt comment &apos;within a for loop&apos;, it is also recommended to avoid such loops in &quot;95% of cases&quot; ;-): array methods are great.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4958027/allez-lom&quot; title=&quot;507 reputation&quot; class=&quot;comment-user&quot;&gt;allez l&apos;OM&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment92741804_45699533&quot;&gt;&lt;span title=&quot;2018-10-21 13:40:56Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 21, 2018 at 13:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;By saying that const should be used in 95% of cases, it seems like we are going away from good practice and into dogma.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1136569/agamemnus&quot; title=&quot;1,339 reputation&quot; class=&quot;comment-user&quot;&gt;Agamemnus&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94745862_45699533&quot;&gt;&lt;span title=&quot;2018-12-28 04:48:33Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 28, 2018 at 4:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Having a big, bold, &quot;Don&apos;t use var&quot; on a question where the alternative is to use &lt;i&gt;no keyword whatsoever&lt;/i&gt; is a dangerous way to structure and format your answer.  Don&apos;t underestimate a person&apos;s disinterest in reading your second paragraph.  Some people may be in a lazy mood or in a hurry and may get the wrong idea from this answer just because of the way it is structured and formatted.  You don&apos;t explicitly mention that you&apos;re not advocating putting variables in the global scope.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1563833/wyck&quot; title=&quot;8,383 reputation&quot; class=&quot;comment-user&quot;&gt;Wyck&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment123928010_45699533&quot;&gt;&lt;span title=&quot;2021-11-25 04:43:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 25, 2021 at 4:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Could You explain why it works in case of variable defined with &apos;var&apos; and variable not defined with var? Is variable created before evaluation of right side of assignment in case of &lt;code&gt;var&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/760851/matt&quot; title=&quot;4,524 reputation&quot; class=&quot;comment-user&quot;&gt;matt&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment30464364_18156435&quot;&gt;&lt;span title=&quot;2013-12-05 13:11:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 5, 2013 at 13:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Lucek because &lt;code&gt;var a&lt;/code&gt; is hoisted to the top of the scope and set to null which declares but does not initialize the variable, then in assignment you have a reference to an undefined null variable which evaluates to false, and set the assignment to &lt;code&gt;[]&lt;/code&gt;. In the latter, you have an assignment to the property &lt;code&gt;a&lt;/code&gt; of the property &lt;code&gt;a&lt;/code&gt;. You can assign to a property that does not exist -- creating it on assignment, but you can&apos;t read from a property that does not exist without a getting a &lt;code&gt;ReferenceError&lt;/code&gt; thrown at you.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/124486/evan-carroll&quot; title=&quot;72,361 reputation&quot; class=&quot;comment-user&quot;&gt;Evan Carroll&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment32000128_18156435&quot;&gt;&lt;span title=&quot;2014-01-20 19:43:12Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 20, 2014 at 19:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@EvanCarroll : it gets hoisted to top of scope and gets set to undefined instead of null.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/674374/mithun-satheesh&quot; title=&quot;26,337 reputation&quot; class=&quot;comment-user&quot;&gt;Mithun Satheesh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment40778138_18156435&quot;&gt;&lt;span title=&quot;2014-09-25 07:40:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 25, 2014 at 7:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The function is by no means &quot;anonymous&quot;. In fact, it is about as visibly named as it can possibly be.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1675492/ingo-b%c3%bcrk&quot; title=&quot;17,923 reputation&quot; class=&quot;comment-user&quot;&gt;Ingo Bürk&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment32092040_19619146&quot;&gt;&lt;span title=&quot;2014-01-22 22:12:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 22, 2014 at 22:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thank you for editing your answer, in response to Ingo Bürk&apos;s comment, to make the &quot;anonymous function&quot; actually anonymous.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/562862/dave-burton&quot; title=&quot;2,776 reputation&quot; class=&quot;comment-user&quot;&gt;Dave Burton&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment66133609_19619146&quot;&gt;&lt;span title=&quot;2016-09-09 04:58:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 9, 2016 at 4:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks for the example @thisismydesign! In regard to the last two examples, why does the penultimate example log an array of 3 elements with text written thrice whereas the ultimate example only logs &quot;text&quot; once per element within the array?  (I understand that the last one declares &quot;array&quot; as a variable and is therefore in the local scope, whereas the penultimate example omits this, making &quot;array&quot; a part of the implied global scope.) But, why how does this affect the output? Is it because the forEach &quot;i&quot; iterates over the function and all global variables?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6390152/brad-ahrens&quot; title=&quot;4,408 reputation&quot; class=&quot;comment-user&quot;&gt;Brad Ahrens&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102495913_48016128&quot;&gt;&lt;span title=&quot;2019-09-22 11:12:43Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 22, 2019 at 11:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks for taking the time to create an example to demonstrate this topic. The code above is missing the part below so you might want to edit your answer:                                             a = 1;// Defined outside the function without var var b = 1;// Defined outside the function with var alert(&quot;Starting outside of all functions... \\n \\n a, b defined but c, d not defined yet: \\n a:&quot; + a + &quot;\\n b:&quot; + b + &quot;\\n \\n (If I try to show the value of the undefined c or d, console.log would throw &apos;Uncaught ReferenceError: c is not defined&apos; error and script would stop running!)&quot;);&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4301532/sankofa&quot; title=&quot;550 reputation&quot; class=&quot;comment-user&quot;&gt;Sankofa&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment92451831_40701471&quot;&gt;&lt;span title=&quot;2018-10-11 16:05:17Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 11, 2018 at 16:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;my_var;&lt;/code&gt; is actually a valid expression statement.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/303810/lexicore&quot; title=&quot;41,310 reputation&quot; class=&quot;comment-user&quot;&gt;lexicore&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42834130_23319401&quot;&gt;&lt;span title=&quot;2014-11-27 13:23:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 27, 2014 at 13:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is valid statement if variable is defined before. Otherwise it throw an error &quot;... is not defined&quot;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1622341/umut&quot; title=&quot;986 reputation&quot; class=&quot;comment-user&quot;&gt;umut&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42834363_23319401&quot;&gt;&lt;span title=&quot;2014-11-27 13:31:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 27, 2014 at 13:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is a valid statement &lt;i&gt;regardless&lt;/i&gt; of if a variable was defined before or not. :) A valid statement can throw an eror it does not make the &lt;i&gt;statement&lt;/i&gt; invalid.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/303810/lexicore&quot; title=&quot;41,310 reputation&quot; class=&quot;comment-user&quot;&gt;lexicore&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42836389_23319401&quot;&gt;&lt;span title=&quot;2014-11-27 14:37:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 27, 2014 at 14:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I am confused about it. What is valid statement? And can you give me an invalid statement example?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1622341/umut&quot; title=&quot;986 reputation&quot; class=&quot;comment-user&quot;&gt;umut&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42837078_23319401&quot;&gt;&lt;span title=&quot;2014-11-27 14:59:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 27, 2014 at 14:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;ll have to apologize - too much ECMAScript grammar lately.  &lt;code&gt;my_var;&lt;/code&gt; is a valid &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/#sec-12.4&quot; rel=&quot;nofollow noreferrer&quot;&gt;expression statement&lt;/a&gt;. &lt;code&gt;/my_var;&lt;/code&gt; would be a invalid statement. But as I said, this is grammar casuistics, I apologize, my comment was actually not appropriate.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/303810/lexicore&quot; title=&quot;41,310 reputation&quot; class=&quot;comment-user&quot;&gt;lexicore&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42837286_23319401&quot;&gt;&lt;span title=&quot;2014-11-27 15:05:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 27, 2014 at 15:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":292,"title":"What is the purpose of the var keyword and when should I use it (or omit it)?","content":"\n                \n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;: This question was asked from the viewpoint of ECMAScript version 3 or 5. The answers might become outdated with the introduction of new features in the release of ECMAScript 6.&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;What exactly is the function of the &lt;code&gt;var&lt;/code&gt; keyword in JavaScript, and what is the difference between&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someNumber = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someFunction = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { doSomething; }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someObject = { }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someObject.&lt;span class=&quot;hljs-property&quot;&gt;someProperty&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;someNumber = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\nsomeFunction = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { doSomething; }\nsomeObject = { }\nsomeObject.&lt;span class=&quot;hljs-property&quot;&gt;someProperty&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;?&lt;/p&gt;\n\n&lt;p&gt;When would you use either one, and why/what does it do?&lt;/p&gt;\n    ","slug":"what-is-the-purpose-of-the-var-keyword-and-when-should-i-use-it-(or-omit-it)-1657387525538","postType":"QUESTION","createdAt":"2022-07-09T17:25:25.000Z","updatedAt":"2022-07-09T17:25:25.000Z","tags":[{"id":1769,"name":"keyword","slug":"keyword","createdAt":"2022-07-09T17:25:25.000Z","updatedAt":"2022-07-09T17:25:25.000Z","Questions_Tags":{"questionId":292,"tagId":1769}}]}]}},"__N_SSG":true}