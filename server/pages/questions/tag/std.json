{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;Consider two libraries called Foo and Bar:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; foo;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; bar;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Everything works fine, and you can call &lt;code&gt;Blah()&lt;/code&gt; from Foo and &lt;code&gt;Quux()&lt;/code&gt; from Bar without problems. But one day you upgrade to a new version of Foo 2.0, which now offers a function called &lt;code&gt;Quux()&lt;/code&gt;. Now you&apos;ve got a conflict: Both Foo 2.0 and Bar import &lt;code&gt;Quux()&lt;/code&gt; into your global namespace. This is going to take some effort to fix, especially if the function parameters happen to match.&lt;/p&gt;\n&lt;p&gt;If you had used &lt;code&gt;foo::Blah()&lt;/code&gt; and &lt;code&gt;bar::Quux()&lt;/code&gt;, then the introduction of &lt;code&gt;foo::Quux()&lt;/code&gt; would have been a non-event.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;It can get worse&lt;/strong&gt; than what &lt;a href=&quot;https://stackoverflow.com/questions/1452721/1452738#1452738&quot;&gt;Greg wrote&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Library Foo 2.0 could introduce a function, &lt;code&gt;Quux()&lt;/code&gt;, that is an unambiguously better match for some of your calls to &lt;code&gt;Quux()&lt;/code&gt; than the &lt;code&gt;bar::Quux()&lt;/code&gt; your code called for years. Then your &lt;em&gt;&lt;strong&gt;code still compiles&lt;/strong&gt;&lt;/em&gt;, but &lt;em&gt;&lt;strong&gt;it silently calls the wrong function&lt;/strong&gt;&lt;/em&gt; and does god-knows-what. That&apos;s about as bad as things can get.&lt;/p&gt;\n&lt;p&gt;Keep in mind that the &lt;code&gt;std&lt;/code&gt; namespace has tons of identifiers, many of which are &lt;em&gt;very&lt;/em&gt; common ones (think &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;iterator&lt;/code&gt;, etc.) which are very likely to appear in other code, too.&lt;/p&gt;\n&lt;p&gt;If you consider this unlikely: There was &lt;a href=&quot;https://stackoverflow.com/a/2712125/140719&quot;&gt;a question asked&lt;/a&gt; here on Stack Overflow where pretty much exactly this happened (wrong function called due to omitted &lt;code&gt;std::&lt;/code&gt; prefix) about half a year after I gave this answer. &lt;a href=&quot;https://stackoverflow.com/questions/13402789/&quot;&gt;Here&lt;/a&gt; is another, more recent example of such a question.\nSo this is a real problem.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Here&apos;s one more data point: Many, many years ago, I also used to find it annoying having to prefix everything from the standard library with &lt;code&gt;std::&lt;/code&gt;. Then I worked in a project where it was decided at the start that both &lt;code&gt;using&lt;/code&gt; directives and declarations are banned except for function scopes. Guess what? It took most of us very few weeks to get used to writing the prefix, and after a few more weeks most of us even agreed that it actually made the code &lt;em&gt;more readable&lt;/em&gt;. There&apos;s a reason for that: &lt;em&gt;&lt;strong&gt;Whether you like shorter or longer prose is subjective, but the prefixes objectively add clarity to the code.&lt;/strong&gt;&lt;/em&gt; Not only the compiler, but you, too, find it easier to see which identifier is referred to.&lt;/p&gt;\n&lt;p&gt;In a decade, that project grew to have several million lines of code. Since these discussions come up again and again, I once was curious how often the (allowed) function-scope &lt;code&gt;using&lt;/code&gt; actually was used in the project. I grep&apos;d the sources for it and only found one or two dozen places where it was used. To me this indicates that, once tried, developers don&apos;t find &lt;code&gt;std::&lt;/code&gt; painful enough to employ using directives even once every 100 kLoC even where it was allowed to be used.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Bottom line: Explicitly prefixing everything doesn&apos;t do any harm, takes very little getting used to, and has objective advantages. In particular, it makes the code easier to interpret by the compiler and by human readers  and that should probably be the main goal when writing code.&lt;/p&gt;\n    ","\n&lt;p&gt;The problem with putting &lt;code&gt;using namespace&lt;/code&gt; in the header files of your classes is that it forces anyone who wants to use your classes (by including your header files) to also be &apos;using&apos; (i.e. seeing everything in) those other namespaces.&lt;/p&gt;\n\n&lt;p&gt;However, you may feel free to put a using statement in your (private) *.cpp files.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Beware that some people disagree with my saying &quot;feel free&quot; like this -- because although a &lt;code&gt;using&lt;/code&gt; statement in a cpp file is &lt;em&gt;better&lt;/em&gt; than in a header (because it doesn&apos;t affect people who include your header file), they think it&apos;s still not &lt;em&gt;good&lt;/em&gt; (because depending on the code it could make the implementation of the class more difficult to maintain). &lt;a href=&quot;https://isocpp.org/wiki/faq/coding-standards#using-namespace-std&quot; rel=&quot;noreferrer&quot;&gt;This C++ Super-FAQ entry&lt;/a&gt; says,&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The using-directive exists for legacy C++ code and to ease the transition to namespaces, but you probably shouldnt use it on a regular basis, at least not in your new C++ code.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The FAQ suggests two alternatives:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A using-declaration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; std::cout; &lt;span class=&quot;hljs-comment&quot;&gt;// a using-declaration lets you use cout without qualification&lt;/span&gt;\ncout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Values:&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Just typing std::&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Values:&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I recently ran into a complaint about &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_2010&quot; rel=&quot;noreferrer&quot;&gt;Visual&amp;nbsp;Studio&amp;nbsp;2010&lt;/a&gt;. It turned out that pretty much all the source files had these two lines:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; boost;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A lot of &lt;a href=&quot;http://en.wikipedia.org/wiki/Boost_%28C%2B%2B_libraries%29&quot; rel=&quot;noreferrer&quot;&gt;Boost&lt;/a&gt; features are going into the C++0x standard, and Visual&amp;nbsp;Studio&amp;nbsp;2010 has a lot of C++0x features, so suddenly these programs were not compiling.&lt;/p&gt;\n\n&lt;p&gt;Therefore, avoiding &lt;code&gt;using namespace X;&lt;/code&gt; is a form of future-proofing, a way of making sure a change to the libraries and/or header files in use is not going to break a program.&lt;/p&gt;\n    ","\n&lt;p&gt;Short version: don&apos;t use global &lt;code&gt;using&lt;/code&gt; declarations or directives in header files. Feel free to use them in implementation files. Here&apos;s what &lt;a href=&quot;https://en.wikipedia.org/wiki/Herb_Sutter&quot; rel=&quot;noreferrer&quot;&gt;Herb Sutter&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Andrei_Alexandrescu&quot; rel=&quot;noreferrer&quot;&gt;Andrei Alexandrescu&lt;/a&gt; have to say about this issue in &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321113586&quot; rel=&quot;noreferrer&quot;&gt;C++ Coding Standards&lt;/a&gt; (bolding for emphasis is mine):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;h2&gt;Summary&lt;/h2&gt;\n&lt;p&gt;Namespace usings are for your convenience, not for you to inflict on others: Never write a using declaration or a using directive before an #include directive.&lt;/p&gt;\n&lt;p&gt;Corollary: In header files, dont write namespace-level using directives or using declarations; instead, explicitly namespace-qualify all names. (The second rule follows from the first, because headers can never know what other header #includes might appear after them.)&lt;/p&gt;\n&lt;h2&gt;Discussion&lt;/h2&gt;\n&lt;p&gt;In short: You can and should use namespace using declarations and directives liberally in your implementation files after #include directives and feel good about it. &lt;strong&gt;Despite repeated assertions to the contrary, namespace using declarations and directives are not evil and they do not defeat the purpose of namespaces. Rather, they are what make namespaces usable&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;One shouldn&apos;t use the &lt;code&gt;using&lt;/code&gt; directive at the global scope, especially in headers. However, there are situations where it is appropriate even in a header file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; FloatType&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt;\nFloatType &lt;span class=&quot;hljs-title&quot;&gt;compute_something&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(FloatType x)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std; &lt;span class=&quot;hljs-comment&quot;&gt;// No problem since scope is limited&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;exp&lt;/span&gt;(x) * (&lt;span class=&quot;hljs-built_in&quot;&gt;sin&lt;/span&gt;(x) - &lt;span class=&quot;hljs-built_in&quot;&gt;cos&lt;/span&gt;(x * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;hljs-built_in&quot;&gt;sin&lt;/span&gt;(x * &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) - &lt;span class=&quot;hljs-built_in&quot;&gt;cos&lt;/span&gt;(x * &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is better than explicit qualification (&lt;code&gt;std::sin&lt;/code&gt;, &lt;code&gt;std::cos&lt;/code&gt;...), because it is shorter and has the ability to work with user defined floating point types (via &lt;a href=&quot;https://en.wikipedia.org/wiki/Argument-dependent_name_lookup&quot; rel=&quot;noreferrer&quot;&gt;argument-dependent lookup&lt;/a&gt; (ADL)).&lt;/p&gt;\n    ","\n&lt;h1&gt;Do not use it globally&lt;/h1&gt;\n&lt;p&gt;It is considered &quot;bad&quot; only when &lt;strong&gt;used globally&lt;/strong&gt;. Because:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;You clutter the namespace you are programming in.&lt;/li&gt;\n&lt;li&gt;Readers will have difficulty seeing where a particular identifier comes from, when you use many &lt;code&gt;using namespace xyz;&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Whatever is true for &lt;em&gt;other&lt;/em&gt; readers of your source code is even more true for the most frequent reader of it: yourself. Come back in a year or two and take a look...&lt;/li&gt;\n&lt;li&gt;If you only talk about &lt;code&gt;using namespace std;&lt;/code&gt; you might not be aware of all the stuff you grab -- and when you add another &lt;code&gt;#include&lt;/code&gt; or move to a new C++ revision you might get name conflicts you were not aware of.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;You may use it locally&lt;/h1&gt;\n&lt;p&gt;Go ahead and use it locally (almost) freely. This, of course, prevents you from repetition of &lt;code&gt;std::&lt;/code&gt; -- and repetition is also bad.&lt;/p&gt;\n&lt;h1&gt;An idiom for using it locally&lt;/h1&gt;\n&lt;p&gt;In &lt;strong&gt;C++03&lt;/strong&gt; there was an idiom &lt;em&gt;-- boilerplate code --&lt;/em&gt; for implementing a &lt;code&gt;swap&lt;/code&gt; function for your classes. It was suggested that you actually use a local &lt;code&gt;using namespace std;&lt;/code&gt; -- or at least &lt;code&gt;using std::swap;&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Thing&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;    value_;\n    Child  child_;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;friend&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Thing &amp;amp;a, Thing &amp;amp;b)&lt;/span&gt;&lt;/span&gt;;\n};\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Thing &amp;amp;a, Thing &amp;amp;b)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;      &lt;span class=&quot;hljs-comment&quot;&gt;// make `std::swap` available&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// swap all members&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;swap&lt;/span&gt;(a.value_, b.value_); &lt;span class=&quot;hljs-comment&quot;&gt;// `std::stwap(int, int)`&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;swap&lt;/span&gt;(a.child_, b.child_); &lt;span class=&quot;hljs-comment&quot;&gt;// `swap(Child&amp;amp;,Child&amp;amp;)` or `std::swap(...)`&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This does the following magic:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The compiler will choose the &lt;code&gt;std::swap&lt;/code&gt; for &lt;code&gt;value_&lt;/code&gt;, i.e. &lt;code&gt;void std::swap(int, int)&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;If you have an overload &lt;code&gt;void swap(Child&amp;amp;, Child&amp;amp;)&lt;/code&gt; implemented the compiler will choose it.&lt;/li&gt;\n&lt;li&gt;If you do &lt;em&gt;not&lt;/em&gt; have that overload the compiler will use &lt;code&gt;void std::swap(Child&amp;amp;,Child&amp;amp;)&lt;/code&gt; and try its best swapping these.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;With &lt;strong&gt;C++11&lt;/strong&gt; there is no reason to use this pattern any more. The implementation of &lt;code&gt;std::swap&lt;/code&gt; was changed to find a potential overload and choose it.&lt;/p&gt;\n    ","\n&lt;p&gt;If you import the right header files you suddenly have names like &lt;a href=&quot;http://en.cppreference.com/w/cpp/io/manip/hex&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;hex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://en.cppreference.com/w/cpp/io/manip/left&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;left&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://en.cppreference.com/w/cpp/utility/functional/plus&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;plus&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://en.cppreference.com/w/cpp/algorithm/count&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; in your global scope. This might be surprising if you are not aware that &lt;code&gt;std::&lt;/code&gt; contains these names. If you also try to use these names locally it can lead to quite some confusion.&lt;/p&gt;\n\n&lt;p&gt;If all the standard stuff is in its own namespace you don&apos;t have to worry about name collisions with your code or other libraries.&lt;/p&gt;\n    ","\n&lt;p&gt;Another reason is surprise.&lt;/p&gt;\n\n&lt;p&gt;If I see &lt;code&gt;cout &amp;lt;&amp;lt; blah&lt;/code&gt;, instead of &lt;code&gt;std::cout &amp;lt;&amp;lt; blah&lt;/code&gt; I think: What is this &lt;code&gt;cout&lt;/code&gt;? Is it the normal &lt;code&gt;cout&lt;/code&gt;? Is it something special?&lt;/p&gt;\n    ","\n&lt;p&gt;Experienced programmers use whatever solves their problems and avoid whatever creates new problems, and they avoid header-file-level using-directives for this exact reason.&lt;/p&gt;\n\n&lt;p&gt;Experienced programmers also try to avoid full qualification of names inside their source files. A minor reason for this is that it&apos;s not elegant to write more code when less code is sufficient &lt;em&gt;unless there are good reasons&lt;/em&gt;. A major reason for this is turning off argument-dependent lookup (ADL).&lt;/p&gt;\n\n&lt;p&gt;What are these &lt;em&gt;good reasons&lt;/em&gt;? Sometimes programmers explicitly want to turn off ADL, other times they want to disambiguate.&lt;/p&gt;\n\n&lt;p&gt;So the following are OK:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Function-level using-directives and using-declarations inside functions&apos; implementations&lt;/li&gt;\n&lt;li&gt;Source-file-level using-declarations inside source files&lt;/li&gt;\n&lt;li&gt;(Sometimes) source-file-level using-directives&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;I agree that it should not be used globally, but it&apos;s not so evil to use locally, like in a &lt;code&gt;namespace&lt;/code&gt;. Here&apos;s an example from &lt;em&gt;&quot;The C++ Programming Language&quot;&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; My_lib {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; His_lib; &lt;span class=&quot;hljs-comment&quot;&gt;// Everything from His_lib&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; Her_lib; &lt;span class=&quot;hljs-comment&quot;&gt;// Everything from Her_lib&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; His_lib::String; &lt;span class=&quot;hljs-comment&quot;&gt;// Resolve potential clash in favor of His_lib&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Her_lib::Vector; &lt;span class=&quot;hljs-comment&quot;&gt;// Resolve potential clash in favor of Her_lib&lt;/span&gt;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this example, we resolved potential name clashes and ambiguities arising from their composition.&lt;/p&gt;\n\n&lt;p&gt;Names explicitly declared there (including names declared by using-declarations like &lt;code&gt;His_lib::String&lt;/code&gt;) take priority over names made accessible in another scope by a using-directive (&lt;code&gt;using namespace Her_lib&lt;/code&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;I also consider it a bad practice. Why? Just one day I thought that the function of a namespace is to divide stuff, so I shouldn&apos;t spoil it with throwing everything into one global bag.&lt;/p&gt;\n\n&lt;p&gt;However, if I often use &apos;cout&apos; and &apos;cin&apos;, I write: &lt;code&gt;using std::cout; using std::cin;&lt;/code&gt; in the .cpp file (never in the header file as it propagates with &lt;code&gt;#include&lt;/code&gt;). I think that no one sane will ever name a stream &lt;code&gt;cout&lt;/code&gt; or &lt;code&gt;cin&lt;/code&gt;. ;)&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s nice to see code and know what it does. If I see &lt;code&gt;std::cout&lt;/code&gt; I know that&apos;s the &lt;code&gt;cout&lt;/code&gt; stream of the &lt;code&gt;std&lt;/code&gt; library. If I see &lt;code&gt;cout&lt;/code&gt; then I don&apos;t know. It &lt;em&gt;could&lt;/em&gt; be the &lt;code&gt;cout&lt;/code&gt; stream of the &lt;code&gt;std&lt;/code&gt; library. Or there could be an &lt;code&gt;int cout = 0;&lt;/code&gt; ten lines higher in the same function. Or a &lt;code&gt;static&lt;/code&gt; variable named &lt;code&gt;cout&lt;/code&gt; in that file. It could be anything. &lt;/p&gt;\n\n&lt;p&gt;Now take a million line code base, which isn&apos;t particularly big, and you&apos;re searching for a bug, which means you know there is one line in this one million lines that doesn&apos;t do what it is supposed to do. &lt;code&gt;cout &amp;lt;&amp;lt; 1;&lt;/code&gt; could read a &lt;code&gt;static int&lt;/code&gt; named &lt;code&gt;cout&lt;/code&gt;, shift it to the left by one bit, and throw away the result. Looking for a bug, I&apos;d have to check that. Can you see how I really really prefer to see &lt;code&gt;std::cout&lt;/code&gt;?&lt;/p&gt;\n\n&lt;p&gt;It&apos;s one of these things that seem a really good idea if you are a teacher and never had to write and maintain any code for a living. I love seeing code where (1) I know what it does; and, (2) I&apos;m confident that the person writing it knew what it does.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s all about managing complexity. Using the namespace will pull things in that you don&apos;t want, and thus possibly make it harder to debug (I say possibly). Using std:: all over the place is harder to read (more text and all that).&lt;/p&gt;\n\n&lt;p&gt;Horses for courses - manage your complexity how you best can and feel able.&lt;/p&gt;\n    ","\n&lt;p&gt;Consider&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// myHeader.h&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// someoneElses.cpp/h&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;myHeader.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;stringstream&lt;/span&gt; {  &lt;span class=&quot;hljs-comment&quot;&gt;// Uh oh&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that this is a simple example. If you have files with 20 includes and other imports, you&apos;ll have a ton of dependencies to go through to figure out the problem. The worse thing about it is that you can get unrelated errors in other modules depending on the definitions that conflict.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s not horrible, but you&apos;ll save yourself headaches by not using it in header files or the global namespace. It&apos;s probably all right to do it in very limited scopes, but I&apos;ve never had a problem typing the extra five characters to clarify where my functions are coming from.&lt;/p&gt;\n    ","\n&lt;p&gt;A concrete example to clarify the concern. Imagine you have a situation where you have two libraries, &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;, each with their own namespace:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; foo {\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-comment&quot;&gt;/* Does something */&lt;/span&gt; }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; bar {\n    ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now let&apos;s say you use &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; together in your own program as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; foo;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; bar;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;At this point everything is fine. When you run your program it &apos;Does something&apos;. But later you update &lt;code&gt;bar&lt;/code&gt; and let&apos;s say it has changed to be like:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; bar {\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-comment&quot;&gt;/* Does something completely different */&lt;/span&gt; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;At this point you&apos;ll get a compiler error:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; foo;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; bar;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// error: call to &apos;a&apos; is ambiguous, should be foo::a(42)&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So you&apos;ll need to do some maintenance to clarify that &apos;a&apos; meant &lt;code&gt;foo::a&lt;/code&gt;. That&apos;s undesirable, but fortunately it is pretty easy (just add &lt;code&gt;foo::&lt;/code&gt; in front of all calls to &lt;code&gt;a&lt;/code&gt; that the compiler marks as ambiguous).&lt;/p&gt;\n&lt;p&gt;But imagine an alternative scenario where bar changed instead to look like this instead:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; bar {\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-comment&quot;&gt;/* Does something completely different */&lt;/span&gt; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;At this point your call to &lt;code&gt;a(42)&lt;/code&gt; suddenly binds to &lt;code&gt;bar::a&lt;/code&gt; instead of &lt;code&gt;foo::a&lt;/code&gt; and instead of doing &apos;something&apos; it does &apos;something completely different&apos;.  No compiler warning or anything. Your program just silently starts doing something completely different than before.&lt;/p&gt;\n&lt;p&gt;When you use a namespace you&apos;re risking a scenario like this, which is why people are uncomfortable using namespaces. The more things in a namespace, the greater the risk of conflict, so people might be even more uncomfortable using namespace &lt;code&gt;std&lt;/code&gt; (due to the number of things in that namespace) than other namespaces.&lt;/p&gt;\n&lt;p&gt;Ultimately this is a trade-off between writability vs. reliability/maintainability. Readability may factor in also, but I could see arguments for that going either way. Normally I would say reliability and maintainability are more important, but in this case you&apos;ll constantly pay the writability cost for an fairly rare reliability/maintainability impact. The &apos;best&apos; trade-off will determine on your project and your priorities.&lt;/p&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;You need to be able to read code written by people who have different style and best practices opinions than you.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you&apos;re only using &lt;code&gt;cout&lt;/code&gt;, nobody gets confused.  But when you have lots of namespaces flying around and you see this class and you aren&apos;t exactly sure what it does, having the namespace explicit acts as a comment of sorts. You can see at first glance, &quot;oh, this is a filesystem operation&quot; or &quot;that&apos;s doing network stuff&quot;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Using many namespaces at the same time is obviously a recipe for disaster, but using JUST namespace &lt;code&gt;std&lt;/code&gt; and only namespace &lt;code&gt;std&lt;/code&gt; is not that big of a deal in my opinion because redefinition can only occur by your own code... &lt;/p&gt;\n\n&lt;p&gt;So just consider them functions as reserved names like &quot;int&quot; or &quot;class&quot; and that is it.&lt;/p&gt;\n\n&lt;p&gt;People should stop being so anal about it. Your teacher was right all along. Just use ONE namespace; that is the whole point of using namespaces the first place. You are not supposed to use more than one at the same time. Unless it is your own. So again, redefinition will not happen.&lt;/p&gt;\n    ","\n&lt;p&gt;I agree with the others here, but I would like to address the concerns regarding readability - you can avoid all of that by simply using typedefs at the top of your file, function or class declaration.&lt;/p&gt;\n\n&lt;p&gt;I usually use it in my class declaration as methods in a class tend to deal with similar data types (the members) and a typedef is an opportunity to assign a name that is meaningful in the context of the class. This actually aids readability in the definitions of the class methods.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Header&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;File&lt;/span&gt;\n{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::vector&amp;lt;std::string&amp;gt; Lines;\n   &lt;span class=&quot;hljs-function&quot;&gt;Lines &lt;span class=&quot;hljs-title&quot;&gt;ReadLines&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and in the implementation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// .cpp&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;Lines &lt;span class=&quot;hljs-title&quot;&gt;File::ReadLines&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    Lines lines;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Get them...&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; lines;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;as opposed to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// .cpp&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;File::ReadLines&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    vector&amp;lt;string&amp;gt; lines;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Get them...&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; lines;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// .cpp&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;File::ReadLines&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    std::vector&amp;lt;std::string&amp;gt; lines;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Get them...&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; lines;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A namespace is a named scope. Namespaces are used to group related declarations and to keep separate\nitems separate. For example, two separately developed libraries may use the same name to refer to different\nitems, but a user can still use both:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; Mylib{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Stack&lt;/span&gt;{ &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; };\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; Yourlib{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Stack&lt;/span&gt;{ &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; };\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;Mylib::Stack&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(max)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Use my stack&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;Yourlib::Stack    &lt;span class=&quot;hljs-title&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(max)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Use your stack&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Repeating a namespace name can be a distraction for both readers and writers. Consequently, it is possible\nto state that names from a particular namespace are available without explicit qualification. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; max)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; Mylib; &lt;span class=&quot;hljs-comment&quot;&gt;// Make names from Mylib accessible&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;Stack&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(max)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Use my stack&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;Yourlib::Stack &lt;span class=&quot;hljs-title&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(max)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Use your stack&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Namespaces provide a powerful tool for the management of different libraries and of different versions of code. In particular, they offer the programmer alternatives of how explicit to make a reference to a nonlocal name.&lt;/p&gt;\n\n&lt;p&gt;Source: &lt;em&gt;An Overview of the C++ Programming Language&lt;/em&gt;\nby Bjarne Stroustrup&lt;/p&gt;\n    ","\n&lt;p&gt;An example where &lt;code&gt;using namespace std&lt;/code&gt; throws a compilation error because of the ambiguity of count, which is also a function in algorithm library.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s case by case. We want to minimize the &quot;total cost of ownership&quot; of the software over its lifespan. Stating &quot;using namespace std&quot; has some costs, but &lt;em&gt;not&lt;/em&gt; using it also has a cost in legibility.&lt;/p&gt;\n\n&lt;p&gt;People correctly point out that when using it, when the standard library introduces new symbols and definitions, your code ceases to compile, and you may be forced to rename variables. And yet this is probably good long-term, since future maintainers will be momentarily confused or distracted if you&apos;re using a keyword for some surprising purpose.&lt;/p&gt;\n\n&lt;p&gt;You don&apos;t &lt;em&gt;want&lt;/em&gt; to have a template called vector, say, which isn&apos;t the vector known by everyone else. And the number of new definitions thus introduced in the C++ library is small enough it may simply not come up.  There &lt;em&gt;is&lt;/em&gt; a cost to having to do this kind of change, but the cost is not high and is offset by the clarity gained by not using &lt;code&gt;std&lt;/code&gt; symbol names for other purposes.&lt;/p&gt;\n\n&lt;p&gt;Given the number of classes, variables, and functions, stating &lt;code&gt;std::&lt;/code&gt; on every one might fluff up your code by 50% and make it harder to get your head around. An algorithm or step in a method that could be taken in on one screenful of code now requires scrolling back and forth to follow. This is a real cost. Arguably it may not be a high cost, but people who deny it even exists are inexperienced, dogmatic, or simply wrong.&lt;/p&gt;\n\n&lt;p&gt;I&apos;d offer the following rules:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;std&lt;/code&gt; is different from all other libraries. It is the one library everyone basically needs to know, and in my view is best thought of as part of the language.  Generally speaking there is an excellent case for &lt;code&gt;using namespace std&lt;/code&gt; even if there isn&apos;t for other libraries.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Never force the decision onto the author of a compilation unit (a .cpp file) by putting this &lt;code&gt;using&lt;/code&gt; in a header. &lt;em&gt;Always&lt;/em&gt; defer the decision to the compilation unit author. Even in a project that has decided to use &lt;code&gt;using namespace std&lt;/code&gt; everywhere may fine a few modules that are best handled as exceptions to that rule.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Even though the namespace feature lets you have many modules with symbols defined the same, it&apos;s going to be confusing to do so. Keep the names different to the extent possible. Even if not using the namespace feature, if you have a class named &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;std&lt;/code&gt; introduces a class named &lt;code&gt;foo&lt;/code&gt;, it&apos;s probably better long-run to rename your class anyway.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;An alternative to using namespaces is to manually namespace symbols by prefixing them. I have two libraries I&apos;ve used for decades, both starting as C libraries, actually, where &lt;em&gt;every&lt;/em&gt; symbol is prefixed with &quot;AK&quot; or &quot;SCWin&quot;. Generally speaking, this is like avoiding the &quot;using&quot; construct, but you don&apos;t write the twin colons. &lt;code&gt;AK::foo()&lt;/code&gt; is instead &lt;code&gt;AKFoo()&lt;/code&gt;. It makes code 5-10% denser and less verbose, and the only downside is that you&apos;ll be in big trouble if you have to use two such libraries that have the same prefixing.  Note the X Window libraries are excellent in this regard, except they forgot to do so with a few #defines: TRUE and FALSE should have been XTRUE and XFALSE, and this set up a namespace clash with Sybase or Oracle that likewise used TRUE and FALSE with different values! (ASCII 0 and 1 in the case of the database!) One special advantage of this is that it applies seemlessly to preprocessor definitions, whereas the C++ &lt;code&gt;using&lt;/code&gt;/&lt;code&gt;namespace&lt;/code&gt; system doesn&apos;t handle them. A nice benefit of this is that it gives an organic slope from being part of a project to eventually being a library.  In a large application of mine, all window classes are prefixed &lt;code&gt;Win&lt;/code&gt;, all signal-processing modules Mod, and so on.  There&apos;s little chance of any of these being reused so there&apos;s no practical benefit to making each group into a library, but it makes obvious in a few seconds how the project breaks into sub-projects.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;It doesn&apos;t make your software or project performance worse. The inclusion of the namespace at the beginning of your source code isn&apos;t bad. The inclusion of the &lt;code&gt;using namespace std&lt;/code&gt; instruction varies according to your needs and the way you are developing the software or project.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;namespace std&lt;/code&gt; contains the C++ standard functions and variables. This namespace is useful when you often would use the C++ standard functions.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;As is mentioned in this &lt;a href=&quot;https://www.geeksforgeeks.org/using-namespace-std-considered-bad-practice/&quot; rel=&quot;nofollow noreferrer&quot;&gt;page&lt;/a&gt;:&lt;/p&gt;\n  \n  &lt;p&gt;The statement using namespace std is generally considered bad\n  practice. The alternative to this statement is to specify the\n  namespace to which the identifier belongs using the scope operator(::)\n  each time we declare a type.&lt;/p&gt;\n  \n  &lt;p&gt;And see &lt;a href=&quot;https://www.sololearn.com/Discuss/187690/is-using-namespace-std-a-bad-practice/&quot; rel=&quot;nofollow noreferrer&quot;&gt;this opinion&lt;/a&gt;:&lt;/p&gt;\n  \n  &lt;p&gt;There is no problem using &quot;using namespace std&quot; in your source file\n  when you make heavy use of the namespace and know for sure that\n  nothing will collide.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Some people had said that is a bad practice to include the &lt;code&gt;using namespace std&lt;/code&gt; in your source files because you&apos;re invoking from that namespace all the functions and variables. When you would like to define a new function with the same name as another function contained in the &lt;code&gt;namespace std&lt;/code&gt; you would overload the function and it could produce problems due to compile or execute. It will not compile or executing as you expect.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;As is mentioned in this &lt;a href=&quot;https://www.geeksforgeeks.org/using-namespace-std-considered-bad-practice/&quot; rel=&quot;nofollow noreferrer&quot;&gt;page&lt;/a&gt;:&lt;/p&gt;\n  \n  &lt;p&gt;Although the statement saves us from typing std:: whenever\n  we wish to access a class or type defined in the std namespace, it\n  imports the entirety of the std namespace into the current namespace\n  of the program. Let us take a few examples to understand why this\n  might not be such a good thing&lt;/p&gt;\n  \n  &lt;p&gt;...&lt;/p&gt;\n  \n  &lt;p&gt;Now at a later stage of development, we wish to use another version of\n  cout that is custom implemented in some library called foo (for\n  example)&lt;/p&gt;\n  \n  &lt;p&gt;...&lt;/p&gt;\n  \n  &lt;p&gt;Notice how there is an ambiguity, to which library does cout point to?\n  The compiler may detect this and not compile the program. In the worst\n  case, the program may still compile but call the wrong function, since\n  we never specified to which namespace the identifier belonged.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I agree with others  it is asking for name clashes, ambiguities and then the fact is it is less explicit. While I can see the use of &lt;code&gt;using&lt;/code&gt;, my personal preference is to limit it. I would also strongly consider what some others pointed out:&lt;/p&gt;\n\n&lt;p&gt;If you want to find a function name that might be a fairly common name, but you only want to find it in the &lt;code&gt;std&lt;/code&gt; namespace (or the reverse  you want to change all calls that are &lt;em&gt;not&lt;/em&gt; in namespace &lt;code&gt;std&lt;/code&gt;, namespace &lt;code&gt;X&lt;/code&gt;, ...), then how do you propose to do this?&lt;/p&gt;\n\n&lt;p&gt;You could write a program to do it, but wouldn&apos;t it be better to spend time working on your project itself rather than writing a program to maintain your project?&lt;/p&gt;\n\n&lt;p&gt;Personally, I actually don&apos;t mind the &lt;code&gt;std::&lt;/code&gt; prefix. I like the look more than not having it. I don&apos;t know if that is because it is explicit and says to me &quot;this isn&apos;t my code... I am using the standard library&quot; or if it is something else, but I think it looks nicer. This might be odd given that I only recently got into C++ (used and still do C and other languages for much longer and C is my favourite language of all time, right above assembly).&lt;/p&gt;\n\n&lt;p&gt;There is one other thing although it is somewhat related to the above and what others point out. While this might be bad practise, I sometimes reserve &lt;code&gt;std::name&lt;/code&gt; for the standard library version and name for program-specific implementation. Yes, indeed this could bite you and bite you hard, but it all comes down to that I started this project from scratch, and I&apos;m the only programmer for it. Example: I overload &lt;code&gt;std::string&lt;/code&gt; and call it &lt;code&gt;string&lt;/code&gt;. I have helpful additions. I did it in part because of my C and Unix (+ Linux) tendency towards lower-case names.&lt;/p&gt;\n\n&lt;p&gt;Besides that, you can have namespace aliases. Here is an example of where it is useful that might not have been referred to. I use the C++11 standard and specifically with libstdc++. Well, it doesn&apos;t have complete &lt;code&gt;std::regex&lt;/code&gt; support. Sure, it compiles, but it throws an exception along the lines of it being an error on the programmer&apos;s end. But it is lack of implementation.&lt;/p&gt;\n\n&lt;p&gt;So here&apos;s how I solved it. Install Boost&apos;s regex, and link it in. Then, I do the following so that when libstdc++ has it implemented entirely, I need only remove this block and the code remains the same:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; boost::regex;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; boost::regex_error;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; boost::regex_replace;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; boost::regex_search;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; boost::regex_match;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; boost::smatch;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; regex_constants = boost::regex_constants;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I won&apos;t argue on whether that is a bad idea or not. I will however argue that it keeps it clean for &lt;em&gt;my&lt;/em&gt; project and at the same time makes it specific: True, I have to use Boost, &lt;em&gt;but&lt;/em&gt; I&apos;m using it like the libstdc++ will eventually have it. Yes, starting your own project and starting with a standard (...) at the very beginning goes a very long way with helping maintenance, development and everything involved with the project!&lt;/p&gt;\n\n&lt;p&gt;Just to clarify something: I don&apos;t actually think it is a good idea to use a name of a class/whatever in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Standard_Template_Library&quot; rel=&quot;nofollow noreferrer&quot;&gt;STL&lt;/a&gt; deliberately and more specifically in place of. The string is the exception (ignore the first, above, or second here, pun if you must) for me as I didn&apos;t like the idea of &apos;String&apos;.&lt;/p&gt;\n\n&lt;p&gt;As it is, I am still very biased towards C and biased against C++. Sparing details, much of what I work on fits C more (but it was a good exercise and a good way to make myself a. learn another language and b. try not be less biased against object/classes/etc which is maybe better stated as less closed-minded, less arrogant, and more accepting.). But what &lt;em&gt;is&lt;/em&gt; useful is what some already suggested: I do indeed use list (it is fairly generic, is it not ?), and sort (same thing) to name two that would cause a name clash if I were to do &lt;code&gt;using namespace std;&lt;/code&gt;, and so to that end I prefer being specific, in control and knowing that if I intend it to be the standard use then I will have to specify it. Put simply: no assuming allowed.&lt;/p&gt;\n\n&lt;p&gt;And as for making Boost&apos;s regex part of &lt;code&gt;std&lt;/code&gt;. I do that for future integration and  again, I admit fully this is bias - I don&apos;t think it is as ugly as &lt;code&gt;boost::regex:: ...&lt;/code&gt;. Indeed, that is another thing for me. There are many things in C++ that I still have yet to come to fully accept in looks and methods (another example: variadic templates versus var arguments [though I admit variadic templates are very very useful!]). Even those that I do accept it was difficult, &lt;em&gt;and&lt;/em&gt; I still have issues with them.&lt;/p&gt;\n    ","\n&lt;p&gt;From my experiences, if you have multiple libraries that uses say, &lt;code&gt;cout&lt;/code&gt;, but for a different purpose you may use the wrong &lt;code&gt;cout&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;For example, if I type in, &lt;code&gt;using namespace std;&lt;/code&gt; and &lt;code&gt;using namespace otherlib;&lt;/code&gt; and type just &lt;code&gt;cout&lt;/code&gt; (which happens to be in both), rather than &lt;code&gt;std::cout&lt;/code&gt; (or &lt;code&gt;&apos;otherlib::cout&apos;&lt;/code&gt;), you might use the wrong one, and get errors. It&apos;s much more effective and efficient to use &lt;code&gt;std::cout&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I do not think it is necessarily bad practice under all conditions, but you need to be careful when you use it.  If you&apos;re writing a library, you probably should use the scope resolution operators with the namespace to keep your library from butting heads with other libraries.  For application level code, I don&apos;t see anything wrong with it.&lt;/p&gt;\n    ","\n&lt;p&gt;With unqualified imported identifiers you need external search tools like &lt;em&gt;grep&lt;/em&gt; to find out where identifiers are declared. This makes reasoning about program correctness harder.&lt;/p&gt;\n    ","\n&lt;p&gt;This is a bad practice, often known as global namespace pollution. Problems may occur when more than one namespace has the same function name with signature, then it will be ambiguous for the compiler to decide which one to call and this all can be avoided when you are specifying the namespace with your function call like &lt;code&gt;std::cout&lt;/code&gt; . Hope this helps. :)   &lt;/p&gt;\n    ","\n&lt;p&gt;&quot;Why is &apos;using namespace std;&apos; considered a bad practice in C++?&quot;&lt;/p&gt;\n\n&lt;p&gt;I put it the other way around: Why is typing five extra characters considered cumbersome by some?&lt;/p&gt;\n\n&lt;p&gt;Consider e.g. writing a piece of numerical software. Why would I even consider polluting my global namespace by cutting general &quot;std::vector&quot; down to &quot;vector&quot; when &quot;vector&quot; is one of the problem domain&apos;s most important concepts?&lt;/p&gt;\n    ","\n&lt;p&gt;To answer your question I look at it this way practically:  a lot of programmers (not all) invoke namespace std.  Therefore one should be in the habit of NOT using things that impinge or use the same names as what is in the namespace std.  That is a great deal granted, but not so much compared to the number of possible coherent words and pseudonyms that can be come up with strictly speaking.&lt;/p&gt;\n\n&lt;p&gt;I mean really... saying &quot;don&apos;t rely on this being present&quot; is just setting you up to rely on it NOT being present.  You are constantly going to have issues borrowing code snippets and constantly repairing them.  Just keep your user-defined and borrowed stuff in limited scope as they should be and be VERY sparing with globals (honestly globals should almost always be a last resort for purposes of &quot;compile now, sanity later&quot;). Truly I think it is bad advice from your teacher because using std will work for both &quot;cout&quot; and &quot;std::cout&quot; but NOT using std will only work for &quot;std::cout&quot;.  You will not always be fortunate enough to write all your own code.&lt;/p&gt;\n\n&lt;p&gt;NOTE: Don&apos;t focus too much on efficiency issues until you actually learn a little about how compilers work.  With a little experience coding you don&apos;t have to learn that much about them before you realize how much they are able to generalize good code into something something simple.  Every bit as simple as if you wrote the whole thing in C.  Good code is only as complex as it needs to be.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Don&apos;t forget you can do: &quot;using std::cout;&quot; which means you don&apos;t have to type std::cout, but don&apos;t bring in the entire std namespace at the same time.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/102/bill&quot; title=&quot;13,877 reputation&quot; class=&quot;comment-user&quot;&gt;Bill&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1302620_1452721&quot;&gt;&lt;span title=&quot;2009-09-21 15:29:56Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2009 at 15:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is particularly bad to use &apos;using namespace std&apos; at file scope in header files. Using it in source files (*.cpp) at file scope after all includes is not quite as bad, as its effect is limited to a single translation unit. Even less problematic is using it inside functions or classes, because its effect is limited to the function or class scope.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4968963/sh&quot; title=&quot;771 reputation&quot; class=&quot;comment-user&quot;&gt;sh-&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment76475590_1452721&quot;&gt;&lt;span title=&quot;2017-06-25 14:37:57Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 25, 2017 at 14:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I would discourage to use using directive but for specific namespaces like &lt;code&gt;std::literals::chrono_literals&lt;/code&gt;, &lt;code&gt;Poco::Data:Keywords&lt;/code&gt;,&lt;code&gt;Poco::Units&lt;/code&gt; and stuff that will deal with literals or readability tricks. Whenever it is in header or implementation files. It might be OK in a function scope I guess, but apart from literals and stuff, it is not useful.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4429146/ludovic-zenohate-lagouardette&quot; title=&quot;187 reputation&quot; class=&quot;comment-user&quot;&gt;Ludovic Zenohate Lagouardette&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77340408_1452721&quot;&gt;&lt;span title=&quot;2017-07-19 09:33:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 19, 2017 at 9:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Jon: It&apos;s got nothing to do with namespace std in particular. My emphasis was meant to be on &quot;at file scope in header files&quot;. To put it as an advice: Do not use &quot;using namespace&quot; (std or other) at file scope in header files. It is OK to use it in implementation files. Sorry for the ambiguity.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4968963/sh&quot; title=&quot;771 reputation&quot; class=&quot;comment-user&quot;&gt;sh-&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86483836_1452721&quot;&gt;&lt;span title=&quot;2018-04-09 14:10:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 9, 2018 at 14:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s only considered bad practice in headers. It&apos;s OK in source files which aren&apos;t included elsewhere (i.e. cpp files). See @mattnewport &apos;s answer below. &lt;a href=&quot;https://stackoverflow.com/a/26722134/125997&quot;&gt;stackoverflow.com/a/26722134/125997&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/125997/danra&quot; title=&quot;9,236 reputation&quot; class=&quot;comment-user&quot;&gt;Danra&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment101373953_1452721&quot;&gt;&lt;span title=&quot;2019-08-11 10:55:29Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 11, 2019 at 10:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;ve always liked Python&apos;s &quot;import big_honkin_name as bhn&quot; so you can then just use &quot;bhn.something&quot; rather than &quot;big_honkin_name.something&quot;- really cuts down on the typing. Does C++ have something like that?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14860/paxdiablo&quot; title=&quot;818,480 reputation&quot; class=&quot;comment-user&quot;&gt;paxdiablo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1299902_1452738&quot;&gt;&lt;span title=&quot;2009-09-21 03:18:02Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2009 at 3:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Pax namespace io = boost::filesystem;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/127893/khaled-alshaya&quot; title=&quot;91,624 reputation&quot; class=&quot;comment-user&quot;&gt;Khaled Alshaya&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1299906_1452738&quot;&gt;&lt;span title=&quot;2009-09-21 03:19:37Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2009 at 3:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I think it&apos;s overstating things to say it&apos;s &quot;some effort to fix&quot;.  You&apos;ll have no instances of the new foo::Quux so just disambiguate all your current uses with bar::Quux.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7405/mattyt&quot; title=&quot;6,341 reputation&quot; class=&quot;comment-user&quot;&gt;MattyT&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1301991_1452738&quot;&gt;&lt;span title=&quot;2009-09-21 13:44:57Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2009 at 13:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Would any sensible person create a library with types whose unqualified name collide with the std types?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/47161/erikkallen&quot; title=&quot;32,889 reputation&quot; class=&quot;comment-user&quot;&gt;erikkallen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1303908_1452738&quot;&gt;&lt;span title=&quot;2009-09-21 19:14:06Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2009 at 19:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@erikkallen: That the std lib has taken hundreds (or even thousands) of names, many of which are very popular and common (&lt;code&gt;error&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;), was, IIRC, an important reason for putting it into its own namespace.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140719/sbi&quot; title=&quot;213,029 reputation&quot; class=&quot;comment-user&quot;&gt;sbi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1308049_1452738&quot;&gt;&lt;span title=&quot;2009-09-22 12:42:00Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 22, 2009 at 12:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Disagree about interpretation by reader as foo::bar() can mean function bar from namespace foo or a static function from class foo.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/17743893/convert&quot; title=&quot;147 reputation&quot; class=&quot;comment-user&quot;&gt;convert&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125611045_1453605&quot;&gt;&lt;span title=&quot;2022-02-09 21:15:34Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 9 at 21:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@convert And why would anyone call a class &lt;code&gt;foo&lt;/code&gt; instead of &lt;code&gt;Foo&lt;/code&gt;? And static methods should also be called &lt;code&gt;Foo::Bar&lt;/code&gt; and not &lt;code&gt;Foo::bar&lt;/code&gt;. That&apos;s why people thought conventions are a good thing.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/13134034/stefan-riedel&quot; title=&quot;676 reputation&quot; class=&quot;comment-user&quot;&gt;Stefan Riedel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125703200_1453605&quot;&gt;&lt;span title=&quot;2022-02-14 11:20:43Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 14 at 11:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Stefan Riedel Don´t know but it´s comon practice in C++. For example it´s string and vector and not String and Vector.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/17743893/convert&quot; title=&quot;147 reputation&quot; class=&quot;comment-user&quot;&gt;convert&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125703624_1453605&quot;&gt;&lt;span title=&quot;2022-02-14 11:41:17Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 14 at 11:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@convert it&apos;s common practice in the standard lib. Most (all I know of) C++ coding conventions recommend capitalized classes. More than half the conventions I know recommend capitalized static methods. And even if you have some voodoo coding convention that does neither, having &lt;code&gt;foo::bar&lt;/code&gt; as a static method is still no argument against the interpretation point. It&apos;s still clearer where that function/method belongs to and if you give your class a good name it&apos;s still clear that a class is meant and not a namespace.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/13134034/stefan-riedel&quot; title=&quot;676 reputation&quot; class=&quot;comment-user&quot;&gt;Stefan Riedel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125705427_1453605&quot;&gt;&lt;span title=&quot;2022-02-14 13:04:50Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 14 at 13:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@convert: &lt;i&gt;&quot;stop playing necromancer&quot;&lt;/i&gt; This is not a chat box, or a forum for organizing a festival, where calendar time is a factor on its own right. This is a &lt;i&gt;knowledge base&lt;/i&gt;, where dates alone are irrelevant, and things like &lt;i&gt;relevance&lt;/i&gt; and &lt;i&gt;consistency&lt;/i&gt; matters. This topic (question) has both, as well as the answer. So, &quot;we should stop&quot; misunderstanding what SO is. (Note: you are actually &lt;i&gt;rewarded&lt;/i&gt; here to go and update an old item in a useful way.)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1479945/sz&quot; title=&quot;2,842 reputation&quot; class=&quot;comment-user&quot;&gt;Sz.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125739063_1453605&quot;&gt;&lt;span title=&quot;2022-02-15 18:15:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 15 at 18:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Of course you should never assume the state of the global cout either, lest someone has std:cout &amp;lt;&amp;lt; std::hex and failed to std::restore_cout_state afterwards. But that is a whole other fatberg.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2411937/m%c3%b3%c5%bc&quot; title=&quot;303 reputation&quot; class=&quot;comment-user&quot;&gt;Móż&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103641404_1452759&quot;&gt;&lt;span title=&quot;2019-11-02 09:13:56Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 2, 2019 at 9:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;However, you may feel free to put a using statement in your (private) *.cpp files.&quot; And what if a future developer team decides to change the translation unit scheme, for instance via UnityBuilds? In doubt, you&apos;ll end up with horrible undefined behavior.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14569106/secundi&quot; title=&quot;1,110 reputation&quot; class=&quot;comment-user&quot;&gt;Secundi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115487461_1452759&quot;&gt;&lt;span title=&quot;2020-12-16 14:05:37Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 16, 2020 at 14:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;While the concerns regarding header files can be justifiable, because of the way includes can have side effects, I feel that they are not in the case of cpp files. Let us look what happens in practically every other programming language. E.g., when you code in Java you nearly always import every symbol from the packages you use - especially the standard ones. That means you almost never expect a competing and conflicting implementation of String, List, Map, etc. The same happens for other languages that I know. It is reasonable IMO and we should make life easy not hard.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/359364/dimitrios-menounos&quot; title=&quot;505 reputation&quot; class=&quot;comment-user&quot;&gt;Dimitrios Menounos&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115616192_1452759&quot;&gt;&lt;span title=&quot;2020-12-21 15:51:52Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 21, 2020 at 15:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If a team migrates to unity build, it will have to remove using keywords and cry because using stdlib without using is a pain. However, if you depend on Qt this is ok, because Qt doesn&apos;t use namespace (bless them). Still, unity builds is an edge case.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3412316/kiruahxh&quot; title=&quot;825 reputation&quot; class=&quot;comment-user&quot;&gt;Kiruahxh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117678088_1452759&quot;&gt;&lt;span title=&quot;2021-03-10 16:18:57Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 10, 2021 at 16:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;to you. To the vast majority of the C++ ecosystem on the other hand, including the C++ committee, common wisdom of experienced C++ developers and the creator of C++ language himself, not only that is an option, but it is also the recommended one.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3212865/spectras&quot; title=&quot;12,299 reputation&quot; class=&quot;comment-user&quot;&gt;spectras&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118465282_1452759&quot;&gt;&lt;span title=&quot;2021-04-09 11:22:20Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 9, 2021 at 11:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This. Boost and std have a &lt;i&gt;lot&lt;/i&gt; of overlap - especially since C++11.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1593077/einpoklum&quot; title=&quot;103,988 reputation&quot; class=&quot;comment-user&quot;&gt;einpoklum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment58900052_4045605&quot;&gt;&lt;span title=&quot;2016-02-24 16:40:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 24, 2016 at 16:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I did that once and learned a lesson the hard way. Now I never use &lt;code&gt;using&lt;/code&gt; outside of a function definition and rarely use &lt;code&gt;using namespace&lt;/code&gt; at all.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4086/ferruccio&quot; title=&quot;96,506 reputation&quot; class=&quot;comment-user&quot;&gt;Ferruccio&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86525489_4045605&quot;&gt;&lt;span title=&quot;2018-04-10 13:45:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 10, 2018 at 13:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I personaly would never use boost, as it´s the worst C++ API I ever seen. Which problems I could still have then if using namespace std?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/17743893/convert&quot; title=&quot;147 reputation&quot; class=&quot;comment-user&quot;&gt;convert&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125611195_4045605&quot;&gt;&lt;span title=&quot;2022-02-09 21:21:58Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 9 at 21:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@convert Any library could in theory clash with std now or in the future. As mentioned in other answers std contains many common names like list and error. Boost just highlights the issue as it is affected now. Invoking using undoes what namespaces were supposed to fix. Be careful with it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2105784/wheredidthatnamecomefrom&quot; title=&quot;445 reputation&quot; class=&quot;comment-user&quot;&gt;wheredidthatnamecomefrom&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126399857_4045605&quot;&gt;&lt;span title=&quot;2022-03-17 15:53:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 17 at 15:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Just one more programmer&apos;s opinion here, but while I agree 100% with the statement that the word &lt;code&gt;using&lt;/code&gt; should never appear in a header, I&apos;m not as convinced about the free license to place &lt;code&gt;using namespace xyz;&lt;/code&gt; anywhere in your code, especially if &lt;code&gt;xyz&lt;/code&gt; is &lt;code&gt;std&lt;/code&gt;.  I use the &lt;code&gt;using std::vector;&lt;/code&gt; form, since that only pulls a single element from the namespace into pseudo-global scope, therefore leading to far less risk of a collision.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4022617/dgnuff&quot; title=&quot;2,832 reputation&quot; class=&quot;comment-user&quot;&gt;dgnuff&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment58867435_26722134&quot;&gt;&lt;span title=&quot;2016-02-23 23:51:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 23, 2016 at 23:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Lightness Races in Orbit  you are of course entitled to your opinion. Would have been more helpful if there had been some attempt at explanation why you do not agree with advice given in this answer. Especially would be interesting to understand what is the point of namespaces if &apos;using&apos; them is bad? Why not just name things std_cout instead of std::cout ... the creators of C++/namespace must have had some idea when they bothered to create them.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1074117/nyholku&quot; title=&quot;436 reputation&quot; class=&quot;comment-user&quot;&gt;nyholku&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63298312_26722134&quot;&gt;&lt;span title=&quot;2016-06-20 13:36:29Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 20, 2016 at 13:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@nyholku: No need - the majority of the other answers give the same reasons I would. Also please do no hesitate to note the &quot;:)&quot; I appended to my comment! And that I didn&apos;t say namespaces are bad.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/560648/lightness-races-in-orbit&quot; title=&quot;369,871 reputation&quot; class=&quot;comment-user&quot;&gt;Lightness Races in Orbit&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63299494_26722134&quot;&gt;&lt;span title=&quot;2016-06-20 14:03:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 20, 2016 at 14:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I can&apos;t help but feel that &lt;code&gt;using namespace&lt;/code&gt; is evil like &lt;code&gt;goto&lt;/code&gt; is evil. Both have valid uses, but 999 times out of 1000 they will be used wrong. So, yeah, with &lt;code&gt;using namespace&lt;/code&gt; in the source you won&apos;t pollute the namespace of other includes, neat. But it still won&apos;t protect you against the &lt;b&gt;&quot;fun&quot;&lt;/b&gt; that arises from &lt;code&gt;using namespace Foo&lt;/code&gt; + &lt;code&gt;using namespace Bar&lt;/code&gt; with you calling (implicit Foo::) &lt;code&gt;baz(xyz)&lt;/code&gt; and suddenly the code breaking (without related changes) just because because &lt;code&gt;Bar::baz()&lt;/code&gt; got added somewhere, which just happens to be a better match (and thus now gets called instead)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9103250/charonx&quot; title=&quot;1,903 reputation&quot; class=&quot;comment-user&quot;&gt;CharonX&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105480338_26722134&quot;&gt;&lt;span title=&quot;2020-01-09 08:58:03Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 9, 2020 at 8:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AdmiralAdama Yes, of course that header needs to be included - but this can be done indirectly (headers include other headers etc.). So this bug is of the rarer kind... but &lt;b&gt;when&lt;/b&gt; it strikes it can be very nasty (the function you call changes), very hard to detect (trigged by adding a function &lt;i&gt;somewhere&lt;/i&gt;, so the risk of it making into release is high) and horrible to track down (the code &quot;looks&quot; 100% correct). I gave a more detailed example in an &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/141317/use-using-in-c-or-avoid-it/388604#388604&quot;&gt;answer over at software engineering&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9103250/charonx&quot; title=&quot;1,903 reputation&quot; class=&quot;comment-user&quot;&gt;CharonX&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113627696_26722134&quot;&gt;&lt;span title=&quot;2020-10-08 07:23:20Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 8, 2020 at 7:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Billy: There is no other way to support calling userlib::cos(userlib::superint). Every feature has a use.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/13422/zan-lynx&quot; title=&quot;51,313 reputation&quot; class=&quot;comment-user&quot;&gt;Zan Lynx&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7609018_1455227&quot;&gt;&lt;span title=&quot;2011-06-24 23:42:32Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 24, 2011 at 23:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Zan: Of course there is. &lt;code&gt;using std::cos;&lt;/code&gt; , &lt;code&gt;using std::sin&lt;/code&gt;, etc. The issue though is that any well designed &lt;code&gt;userlib&lt;/code&gt; is going to have their &lt;code&gt;sin&lt;/code&gt; and &lt;code&gt;cos&lt;/code&gt; inside their own namespace as well, so this really doesn&apos;t help you. (Unless there&apos;s a &lt;code&gt;using namespace userlib&lt;/code&gt; before this template and that&apos;s just as bad as &lt;code&gt;using namespace std&lt;/code&gt; -- and the scope there is not limited.) Furthermore, the only function like this I ever see this happen to is &lt;code&gt;swap&lt;/code&gt;, and in such cases I would recommend just creating a template specialization of &lt;code&gt;std::swap&lt;/code&gt; and avoiding the whole problem.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/82320/billy-oneal&quot; title=&quot;101,337 reputation&quot; class=&quot;comment-user&quot;&gt;Billy ONeal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7609055_1455227&quot;&gt;&lt;span title=&quot;2011-06-24 23:48:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 24, 2011 at 23:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@BillyONeal: &lt;code&gt;template&amp;lt;typename T&amp;gt; void swap(MyContainer&amp;lt;T&amp;gt;&amp;amp;, MyContainer&amp;lt;T&amp;gt;&amp;amp;)&lt;/code&gt; (There&apos;s no function template partial specialization (FTPS), so sometimes you need to resort to overloading instead.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140719/sbi&quot; title=&quot;213,029 reputation&quot; class=&quot;comment-user&quot;&gt;sbi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment14081553_1455227&quot;&gt;&lt;span title=&quot;2012-05-30 14:56:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 30, 2012 at 14:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@BillyONeal: Your (7-times-upvoted!) comment is wrong -- the situation you describe is &lt;i&gt;exactly&lt;/i&gt; what ADL was designed to cover.  Briefly, if &lt;code&gt;x&lt;/code&gt; has one or more &quot;associated namespaces&quot; (e.g. if it was defined in &lt;code&gt;namespace userlib&lt;/code&gt;) then any function call that looks like &lt;code&gt;cos(x)&lt;/code&gt; will &lt;i&gt;additionally&lt;/i&gt; look in those namespaces -- &lt;i&gt;without&lt;/i&gt; any &lt;code&gt;using namespace userlib;&lt;/code&gt; beforehand being necessary.  Zan Lynx is right (and C++ name lookup is byzantine...)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/47984/j-random-hacker&quot; title=&quot;49,399 reputation&quot; class=&quot;comment-user&quot;&gt;j_random_hacker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment52671618_1455227&quot;&gt;&lt;span title=&quot;2015-09-04 15:31:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 4, 2015 at 15:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Instead of &lt;code&gt;using namespace std;&lt;/code&gt;, I would prefer &lt;code&gt;using std::sin; using std::cos; using std::exp;&lt;/code&gt;. You get the same benefit without any of the risks of dumping  &lt;code&gt;std::*&lt;/code&gt; into a function.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4086/ferruccio&quot; title=&quot;96,506 reputation&quot; class=&quot;comment-user&quot;&gt;Ferruccio&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment61837690_1455227&quot;&gt;&lt;span title=&quot;2016-05-10 22:18:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 10, 2016 at 22:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;i&gt;&quot;The implementation of std::swap was changed to find a potential overload and choose it.&quot;&lt;/i&gt; - What? Are you sure about that? Though it is true that providing a custom &lt;code&gt;swap&lt;/code&gt; in the first place isn&apos;t that much important in C++11 anymore, since the &lt;code&gt;std::swap&lt;/code&gt; itself is more flexible (uses move semantics). But &lt;code&gt;std::swap&lt;/code&gt; automatically chosing your own custom swap, that is absolutely new to me (and I don&apos;t really believe it).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/743214/christian-rau&quot; title=&quot;44,335 reputation&quot; class=&quot;comment-user&quot;&gt;Christian Rau&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment21553789_14395960&quot;&gt;&lt;span title=&quot;2013-03-07 17:09:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 7, 2013 at 17:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ChristianRau I think so, yes. I read this on SO somewhere. We can always ask &lt;a href=&quot;http://stackoverflow.com/questions/9170247/does-c11-change-the-behavior-of-explicitly-calling-stdswap-to-ensure-adl-loc&quot;&gt;Howard&lt;/a&gt;, he should know. I am &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2979.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;digging&lt;/a&gt; and &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2584.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;digging&lt;/a&gt; now...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/472245/towi&quot; title=&quot;21,318 reputation&quot; class=&quot;comment-user&quot;&gt;towi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment21575710_14395960&quot;&gt;&lt;span title=&quot;2013-03-08 08:44:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 8, 2013 at 8:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Even in the swap case, the clearer (and thankfully more common) idiom is to write &lt;code&gt;using std::swap;&lt;/code&gt; rather than &lt;code&gt;using namespace std;&lt;/code&gt;.  The more specific idiom has fewer side effects and therefore makes the code more maintainable.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1386054/adrian-mccarthy&quot; title=&quot;43,460 reputation&quot; class=&quot;comment-user&quot;&gt;Adrian McCarthy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment33478314_14395960&quot;&gt;&lt;span title=&quot;2014-02-27 17:24:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 27, 2014 at 17:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The final sentence is wrong. In C++11 the &lt;a href=&quot;http://ericniebler.com/2014/10/21/customization-point-design-in-c11-and-beyond/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Std Swap Two Step&lt;/a&gt; was officially blessed as the &lt;i&gt;right&lt;/i&gt; way to call &lt;code&gt;swap&lt;/code&gt;, and various other places in the standard were changed to say they call &lt;code&gt;swap&lt;/code&gt; like that (N.B. as stated above, &lt;code&gt;using std::swap&lt;/code&gt; is the right way, not &lt;code&gt;using namespace std&lt;/code&gt;). But &lt;code&gt;std::swap&lt;/code&gt; itself was emphatically &lt;b&gt;not&lt;/b&gt; changed to find some other &lt;code&gt;swap&lt;/code&gt; and use it. If &lt;code&gt;std::swap&lt;/code&gt; gets called, then &lt;code&gt;std::swap&lt;/code&gt; gets used.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/981959/jonathan-wakely&quot; title=&quot;160,851 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Wakely&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50872067_14395960&quot;&gt;&lt;span title=&quot;2015-07-16 10:59:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 16, 2015 at 10:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It might be wiser to just type &lt;code&gt;using std::swap&lt;/code&gt; locally though, to reduce the local namespace while at the same time creating self-documenting code. You are rarely ever interested in the whole std namespace, so just out pick out the parts you are interested in.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/584518/lundin&quot; title=&quot;175,730 reputation&quot; class=&quot;comment-user&quot;&gt;Lundin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment54483770_14395960&quot;&gt;&lt;span title=&quot;2015-10-26 11:02:03Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 26, 2015 at 11:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1 not to mention &lt;code&gt;distance&lt;/code&gt;. still i prefer non-qualified names whereever practically possibility, since that increases readability for me. plus, i think the fact that we usually don&apos;t qualify things in oral speech, and are willing to spend time resolving possible ambiguities, means that it has value to be able to understand what one is talking about without qualifications, and applied to source code that means it&apos;s structured in such a way that it&apos;s clear what it&apos;s all about even without qualifications.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/464581/cheers-and-hth-alf&quot; title=&quot;139,259 reputation&quot; class=&quot;comment-user&quot;&gt;Cheers and hth. - Alf&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment19134953_1452763&quot;&gt;&lt;span title=&quot;2012-12-15 05:49:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 15, 2012 at 5:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;To be fair, though, you don&apos;t have most of those if you don&apos;t include &lt;code&gt;&amp;lt;iomanip&amp;gt;&lt;/code&gt;. Still, good point.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1593077/einpoklum&quot; title=&quot;103,988 reputation&quot; class=&quot;comment-user&quot;&gt;einpoklum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment58900121_1452763&quot;&gt;&lt;span title=&quot;2016-02-24 16:42:12Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 24, 2016 at 16:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@einpoklum You usually don&apos;t have to include &lt;code&gt;&amp;lt;iomanip&amp;gt;&lt;/code&gt; to get those. Including &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; is sufficient for all those in GCC for ex &lt;a href=&quot;https://gcc.godbolt.org/z/Kqx9q1&quot; rel=&quot;nofollow noreferrer&quot;&gt;gcc.godbolt.org/z/Kqx9q1&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10147399/ayxan-haqverdili&quot; title=&quot;23,605 reputation&quot; class=&quot;comment-user&quot;&gt;Ayxan Haqverdili&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment111673118_1452763&quot;&gt;&lt;span title=&quot;2020-07-29 10:48:12Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 29, 2020 at 10:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Pretty sure you only need &lt;code&gt;&amp;lt;iomanip&amp;gt;&lt;/code&gt; for the manipulators that take parameters, such as &lt;code&gt;setw&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1502810/celticminstrel&quot; title=&quot;1,577 reputation&quot; class=&quot;comment-user&quot;&gt;celticminstrel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121384261_1452763&quot;&gt;&lt;span title=&quot;2021-08-06 17:08:00Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 6, 2021 at 17:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Is this a joke? I genuinely can not tell. If not then I personally would assume it&apos;s the normal &apos;cout&apos; unless you don&apos;t trust the code since otherwise that would be a BEYOND MAJOR code smell, IMO. ... And if you don&apos;t trust the code then why are you using it in the first place? Note that I&apos;m not saying &quot;TRUST EvERYThING!!&quot; but this also seems a bit far fetched if you&apos;re, say, dealing with some well known library from GitHub or something.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2499090/brent-rittenhouse&quot; title=&quot;817 reputation&quot; class=&quot;comment-user&quot;&gt;Brent Rittenhouse&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment85246841_1452737&quot;&gt;&lt;span title=&quot;2018-03-05 22:43:25Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 5, 2018 at 22:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@BrentRittenhouse &lt;code&gt;cout&lt;/code&gt; is a bad example because everyone recognizes it. But imagine &lt;code&gt;future&lt;/code&gt; in a financial app. Is it a contract to buy or sell something at a specified date? No it isn&apos;t. If the code said &lt;code&gt;std::future&lt;/code&gt; you would not be so easily confused.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7107666/james-hollis&quot; title=&quot;176 reputation&quot; class=&quot;comment-user&quot;&gt;James Hollis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86373544_1452737&quot;&gt;&lt;span title=&quot;2018-04-05 20:20:38Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 5, 2018 at 20:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@BrentRittenhouse maybe a little bad example, there are at least four different libraries that have cout. May be &quot;is it standard library? libstdc++? stl? something else?&quot; And no, not everyone knows std::cout, at least inherently, 6 of 7 new workers we receive don&apos;t. Because curricula of education doesn&apos;t use those in education. I have to chase away printfs. Or debugs() - from Qt.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2742717/swift-friday-pie&quot; title=&quot;11,123 reputation&quot; class=&quot;comment-user&quot;&gt;Swift - Friday Pie&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment87034262_1452737&quot;&gt;&lt;span title=&quot;2018-04-24 18:49:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 24, 2018 at 18:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Really? It&apos;s pretty much in the first example of the first chapter of sooo many books on C++,  if anything it (with insertion operator usage) is the &lt;i&gt;only&lt;/i&gt; C++ some new bods know.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1734032/mckenzm&quot; title=&quot;1,187 reputation&quot; class=&quot;comment-user&quot;&gt;mckenzm&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment100995300_1452737&quot;&gt;&lt;span title=&quot;2019-07-29 05:07:19Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 29, 2019 at 5:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@mckenzm I might put it in a book or lecture notes to reduce clutter, but not in code&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10897/martin-beckett&quot; title=&quot;92,965 reputation&quot; class=&quot;comment-user&quot;&gt;Martin Beckett&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment101058165_1452737&quot;&gt;&lt;span title=&quot;2019-07-30 22:48:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 30, 2019 at 22:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;interesting how most other answers forget to define the scope of namespace by just using curly brackets &lt;code&gt;{..}&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1443038/ol-sen&quot; title=&quot;2,949 reputation&quot; class=&quot;comment-user&quot;&gt;Ol Sen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118841908_18507477&quot;&gt;&lt;span title=&quot;2021-04-23 17:21:51Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 23, 2021 at 17:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;That&apos;s a local using &lt;i&gt;declaration&lt;/i&gt;, a very different thing from a using &lt;i&gt;directive&lt;/i&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140719/sbi&quot; title=&quot;213,029 reputation&quot; class=&quot;comment-user&quot;&gt;sbi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment13992831_1453630&quot;&gt;&lt;span title=&quot;2012-05-26 06:41:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 26, 2012 at 6:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How do you know &quot;std::cout &amp;lt;&amp;lt; 1&quot; isn&apos;t reading a static int named cout in std namespace shifting it by one and throwing away result? Also how do you know what &quot;&amp;lt;&amp;lt;&quot; does ;) ??? ... seems like this answer is not good data point to avoid &apos;using&apos;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1074117/nyholku&quot; title=&quot;436 reputation&quot; class=&quot;comment-user&quot;&gt;nyholku&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49612218_22386211&quot;&gt;&lt;span title=&quot;2015-06-11 12:43:12Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 11, 2015 at 12:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If someone has redefined std::cout to be an integer, then your problem isn&apos;t technical, but social -- someone has it in for you.  (and you should probably also check all of the headers for things like #define true false, etc)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/131930/jeremy-friesner&quot; title=&quot;64,271 reputation&quot; class=&quot;comment-user&quot;&gt;Jeremy Friesner&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment63896265_22386211&quot;&gt;&lt;span title=&quot;2016-07-07 04:33:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 7, 2016 at 4:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;When I see cout I know it&apos;s std::cout, always. If I&apos;m wrong, it&apos;s problem of person who wrote this code, not me :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/108616/tien-do&quot; title=&quot;9,343 reputation&quot; class=&quot;comment-user&quot;&gt;Tien Do&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91167876_22386211&quot;&gt;&lt;span title=&quot;2018-08-31 04:52:20Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 31, 2018 at 4:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;Using the namespace will pull things in that you don&apos;t want, and thus possibly make it harder to debug (I say possibly).&quot;  Using the namespace doesn&apos;t &quot;pull in&quot; anything. Debugging is unaffected.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3454889/metamorphosis&quot; title=&quot;1,756 reputation&quot; class=&quot;comment-user&quot;&gt;metamorphosis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117259276_1452741&quot;&gt;&lt;span title=&quot;2021-02-23 02:33:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 23, 2021 at 2:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It depends upon how you define pull things in. In the context above, using it meant that everything in the std:: namespace was considered to be with the scope. Any identifier could come from that namespace, so you have to consider that when reading code. It creates an ambiguity that simply doesn&apos;t exist if you refer to something with namespace only where needed. Anything that reduced cognitive load for the reader (eg. the vast majority of the life of the code) is a good thing and conversely anything that increases it is a bad thing. Hence my disclaimer at the end.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/30225/preet-sangha&quot; title=&quot;63,021 reputation&quot; class=&quot;comment-user&quot;&gt;Preet Sangha&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117294901_1452741&quot;&gt;&lt;span title=&quot;2021-02-24 07:42:42Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 24, 2021 at 7:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Using &quot;pull things in&quot; in this context gives the wrong impression - it gives the impression that additional namespace&apos;d declarations will be included in the program, regardless of how you meant it. I agree with what you&apos;ve said regarding cognitive load.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3454889/metamorphosis&quot; title=&quot;1,756 reputation&quot; class=&quot;comment-user&quot;&gt;metamorphosis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117381738_1452741&quot;&gt;&lt;span title=&quot;2021-02-27 07:32:37Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 27, 2021 at 7:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;in headers for sure, but what if &lt;code&gt;using namespace std&lt;/code&gt; is present only in the implementation files?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4929809/mercury0114&quot; title=&quot;1,178 reputation&quot; class=&quot;comment-user&quot;&gt;mercury0114&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114464100_1452750&quot;&gt;&lt;span title=&quot;2020-11-08 13:26:57Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 8, 2020 at 13:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The second scenario clinches the deal for me. No namespaces again. Cannot have such subtle changes in functionality going undetected under the hood.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1199517/safe-malloc&quot; title=&quot;802 reputation&quot; class=&quot;comment-user&quot;&gt;safe_malloc&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103705397_39299987&quot;&gt;&lt;span title=&quot;2019-11-05 06:01:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 5, 2019 at 6:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;A fix for that problem would be to allow namespace members to be tagged with versions, and have a means by which a &lt;code&gt;using&lt;/code&gt; directive could specify that it should bring in members that are tagged with older version numbers, but not those that are tagged with newer ones.  If at the time a programmer writes a &lt;code&gt;using&lt;/code&gt; directive, the latest version of the library is 147, the program includes that version number in the using directive, and any functions that get added later get tagged with higher numbers, the code which specifies version 147 would continue to work the same way as it always had.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/363751/supercat&quot; title=&quot;73,697 reputation&quot; class=&quot;comment-user&quot;&gt;supercat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118355073_39299987&quot;&gt;&lt;span title=&quot;2021-04-05 17:27:51Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 5, 2021 at 17:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Creating collisions isn&apos;t that hard - short strings like &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt; and &lt;code&gt;less&lt;/code&gt; appear in the &lt;code&gt;std::&lt;/code&gt; namespace. But more, now that &lt;code&gt;std::&lt;/code&gt; has thousands of symbols in it, it&apos;s useful for the reader to know where a new symbol they might not know comes from.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/43839/tom-swirly&quot; title=&quot;2,680 reputation&quot; class=&quot;comment-user&quot;&gt;Tom Swirly&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment62356212_19877456&quot;&gt;&lt;span title=&quot;2016-05-24 23:32:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 24, 2016 at 23:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The std namespace exists because people, either you, your colleagues, or people writing middleware you use, are not always wise about putting functions inside of namespaces.  Thus you may import all of std:: and nothing else, while still invoking a collision between, say, std::min and someone else&apos;s legacy ::min() from before the time when it was in std.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3308532/aiken-drum&quot; title=&quot;561 reputation&quot; class=&quot;comment-user&quot;&gt;Aiken Drum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment78642353_19877456&quot;&gt;&lt;span title=&quot;2017-08-23 14:22:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 23, 2017 at 14:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Just a minor comment, while typedef is useful I&apos;d consider making a class that represents Lines instead of using typedef.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1539277/eyal-alon&quot; title=&quot;2,010 reputation&quot; class=&quot;comment-user&quot;&gt;Eyal Alon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59529329_28467315&quot;&gt;&lt;span title=&quot;2016-03-11 09:23:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 11, 2016 at 9:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Very interesting that a this answer that is based on guidance from no other that Bjarne Stroustrup has earned -2... boy Bjarne must have been a poor and inexperienced programmer when he introduced this feature into C++&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1074117/nyholku&quot; title=&quot;436 reputation&quot; class=&quot;comment-user&quot;&gt;nyholku&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49612473_29457507&quot;&gt;&lt;span title=&quot;2015-06-11 12:48:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 11, 2015 at 12:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@nyholku: See &lt;a href=&quot;https://stackoverflow.com/questions/31450129/using-stdtype-v-s-using-std-namespace/31450605#comment50876963_31450605&quot;&gt;this&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140719/sbi&quot; title=&quot;213,029 reputation&quot; class=&quot;comment-user&quot;&gt;sbi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment51553572_29457507&quot;&gt;&lt;span title=&quot;2015-08-04 16:01:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 4, 2015 at 16:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;::count&lt;/code&gt;--problem solved. Usually you&apos;ll have more stuff from the std namespaced than from elsewhere, ergo keeping the using namespace directive might save you typing.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1084774/pskocik&quot; title=&quot;55,249 reputation&quot; class=&quot;comment-user&quot;&gt;PSkocik&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50702566_27718061&quot;&gt;&lt;span title=&quot;2015-07-11 19:12:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 11, 2015 at 19:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The real problem here is that C++ still has namespace-less globals.  This, and the fact that &apos;this&apos; is implicit in methods, causes so many bugs and problems I can&apos;t even count them, even with the right &apos;count&apos; variable. ;)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3308532/aiken-drum&quot; title=&quot;561 reputation&quot; class=&quot;comment-user&quot;&gt;Aiken Drum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment78642645_27718061&quot;&gt;&lt;span title=&quot;2017-08-23 14:27:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 23, 2017 at 14:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Finally, thanks! Saving time at every code you write vs. time to &quot;maybe&quot; repair a legacy code at least with the std library.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12078969/ingo-mi&quot; title=&quot;911 reputation&quot; class=&quot;comment-user&quot;&gt;Ingo Mi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment104514645_56265602&quot;&gt;&lt;span title=&quot;2019-12-02 17:55:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2019 at 17:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;a href=&quot;https://en.cppreference.com/w/cpp/language/extending_std&quot; rel=&quot;nofollow noreferrer&quot;&gt;Extending the &lt;code&gt;std&lt;/code&gt; namespace is undefined behaviour&lt;/a&gt; and thus should never be done.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2176813/tambre&quot; title=&quot;4,165 reputation&quot; class=&quot;comment-user&quot;&gt;tambre&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment88973132_26345624&quot;&gt;&lt;span title=&quot;2018-06-22 13:42:31Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 22, 2018 at 13:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s not just 5 extra chars; its 5 extra chars every time you reference any object type in the standard library.  Which, if you&apos;re using the standard library very much, will be often.  So it&apos;s more realistically thousands of extra chars in a decent sized program.  Presumably the &apos;using&apos; directive was added to the language so that it could be used...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/131930/jeremy-friesner&quot; title=&quot;64,271 reputation&quot; class=&quot;comment-user&quot;&gt;Jeremy Friesner&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27346548_16525556&quot;&gt;&lt;span title=&quot;2013-09-03 03:42:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 3, 2013 at 3:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Its not 5 extra chars every time, it is 5 chars and probably a couple mouse clicks to pull down a menu and do a Find and Replace in the editor of your choice.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/985690/davewalley&quot; title=&quot;797 reputation&quot; class=&quot;comment-user&quot;&gt;DaveWalley&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment33725872_16525556&quot;&gt;&lt;span title=&quot;2014-03-06 01:54:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 6, 2014 at 1:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Readability. &lt;code&gt;cout &amp;lt;&amp;lt; hex &amp;lt;&amp;lt; setw(4) &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;&lt;/code&gt; is easier to read than &lt;code&gt;std::cout &amp;lt;&amp;lt; std::hex &amp;lt;&amp;lt; std::setw(4) &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/919705/oz1cz&quot; title=&quot;5,174 reputation&quot; class=&quot;comment-user&quot;&gt;oz1cz&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41714137_16525556&quot;&gt;&lt;span title=&quot;2014-10-24 09:47:48Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 24, 2014 at 9:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;And even worse: &lt;code&gt;std::map&amp;lt;std::string,std::pair&amp;lt;std::string,std::string&amp;gt;&amp;gt;&lt;/code&gt; is horrible compared to &lt;code&gt;map&amp;lt;string,pair&amp;lt;string,string&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/919705/oz1cz&quot; title=&quot;5,174 reputation&quot; class=&quot;comment-user&quot;&gt;oz1cz&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41715548_16525556&quot;&gt;&lt;span title=&quot;2014-10-24 10:41:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 24, 2014 at 10:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It&apos;s a good practice is to typedef your STL containers anyway so std:: there really doesn&apos;t matter. And C++11 brought us the auto keyword which makes things even easier when e.g. using iterators.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2153571/juzzlin&quot; title=&quot;41,951 reputation&quot; class=&quot;comment-user&quot;&gt;juzzlin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment57490505_16525556&quot;&gt;&lt;span title=&quot;2016-01-19 12:04:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 19, 2016 at 12:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Given how many folk seem unaware of useful standard library functions (reinventing things from &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;, for example), it seems a bit of a stretch to imagine that the same people could reliably avoid those identifiers.  Look through your own code and tell me you never have a variable or function called &lt;code&gt;count&lt;/code&gt;.  Or &lt;code&gt;distance&lt;/code&gt;, or &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;destroy&lt;/code&gt;, &lt;code&gt;launch&lt;/code&gt;, &lt;code&gt;visit&lt;/code&gt;, &lt;code&gt;beta&lt;/code&gt;, &lt;code&gt;sample&lt;/code&gt;, &lt;code&gt;messages&lt;/code&gt;, &lt;code&gt;clamp&lt;/code&gt;, &lt;code&gt;erase&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;modulus&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, etc.  Not to mention all the identifiers not yet in &lt;code&gt;std&lt;/code&gt; that will break your code when C++35 comes out...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4850040/toby-speight&quot; title=&quot;25,310 reputation&quot; class=&quot;comment-user&quot;&gt;Toby Speight&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment87980168_17352642&quot;&gt;&lt;span title=&quot;2018-05-23 08:37:00Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 23, 2018 at 8:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":21,"title":"Why is \"using namespace std;\" considered bad practice?","content":"\n                \n&lt;p&gt;I have heard &lt;code&gt;using namespace std;&lt;/code&gt; is bad practice, and that I should use &lt;code&gt;std::cout&lt;/code&gt; and &lt;code&gt;std::cin&lt;/code&gt; directly instead.\nWhy is this? Does it risk declaring variables that share the same name as something in the &lt;code&gt;std&lt;/code&gt; namespace?&lt;/p&gt;\n    ","slug":"why-is-\"using-namespace-std\"-considered-bad-practice-1657384296377","postType":"QUESTION","createdAt":"2022-07-09T16:31:36.000Z","updatedAt":"2022-07-09T16:31:36.000Z","tags":[{"id":68,"name":"std","slug":"std","createdAt":"2022-07-09T16:31:36.000Z","updatedAt":"2022-07-09T16:31:36.000Z","Questions_Tags":{"questionId":21,"tagId":68}}]}]}},"__N_SSG":true}