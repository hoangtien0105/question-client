{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions&quot; rel=&quot;noreferrer&quot;&gt;From &lt;strong&gt;the documentation&lt;/strong&gt;:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;About your question, the list comprehension does the same thing as the following &quot;plain&quot; Python code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = [] \n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    l.append(x**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l\n[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How do you write it in one line? Hmm...we can...probably...use &lt;a href=&quot;https://docs.python.org/3/library/functions.html#map&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;lambda&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)))\n[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But isn&apos;t it clearer and simpler to just use a list comprehension?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[x**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)]\n[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Basically, we can do anything with &lt;code&gt;x&lt;/code&gt;. Not only &lt;code&gt;x**2&lt;/code&gt;. For example, run a method of &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[x.strip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo\\n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar\\n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz\\n&apos;&lt;/span&gt;)]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or use &lt;code&gt;x&lt;/code&gt; as another function&apos;s argument:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;)]\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can also, for example, use &lt;code&gt;x&lt;/code&gt; as the key of a &lt;code&gt;dict&lt;/code&gt; object. Let&apos;s see:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;20&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;30&apos;&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[d[x] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;]]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;30&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How about a combination?  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;20&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;30&apos;&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(d[x].rstrip(&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;]]\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And so on.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;You can also use &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;if...else&lt;/code&gt; in a list comprehension. For example, you only want odd numbers in &lt;code&gt;range(10)&lt;/code&gt;. You can do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x%&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        l.append(x)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Ah that&apos;s too complex. What about the following version?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x%&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To use an &lt;code&gt;if...else&lt;/code&gt; ternary expression, you need put the &lt;code&gt;if ... else ...&lt;/code&gt; after &lt;code&gt;x&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt; after &lt;code&gt;range(10)&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[i &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i%&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)]\n[&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Have you heard about &lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;nested list comprehension&lt;/strong&gt;&lt;/a&gt;? You can put &lt;em&gt;two or more &lt;code&gt;for&lt;/code&gt;s in one list comprehension&lt;/em&gt;. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x]\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[j &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]], [[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]]] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; i]\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&apos;s talk about the first part, &lt;code&gt;for x in [[1, 2, 3], [4, 5, 6]]&lt;/code&gt; which gives &lt;code&gt;[1, 2, 3]&lt;/code&gt; and &lt;code&gt;[4, 5, 6]&lt;/code&gt;. Then, &lt;code&gt;for i in x&lt;/code&gt; gives &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; You always need put &lt;code&gt;for x in [[1, 2, 3], [4, 5, 6]]&lt;/code&gt; &lt;strong&gt;before&lt;/strong&gt; &lt;code&gt;for i in x&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[j &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]]]\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;input&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nNameError: name &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; defined\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;We also have &lt;em&gt;set comprehensions&lt;/em&gt;, &lt;em&gt;dict comprehensions&lt;/em&gt;, and &lt;em&gt;generator expressions&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;set comprehensions&lt;/strong&gt; and list comprehensions are basically the same, but the former returns a &lt;em&gt;set&lt;/em&gt; instead of a &lt;em&gt;list&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;{x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]}\n{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s the same as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;([i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]])\n{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A &lt;a href=&quot;https://www.python.org/dev/peps/pep-0274/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;dict comprehension&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;looks like&lt;/em&gt; a set comprehension, but it uses &lt;code&gt;{key: value for key, value in ...}&lt;/code&gt; or &lt;code&gt;{i: i for i in ...}&lt;/code&gt; instead of  &lt;code&gt;{i for i in ...}&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;{i: i**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)}\n{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And it equals:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d = {}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    d[i] = i**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d\n{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Does &lt;code&gt;(i for i in range(5))&lt;/code&gt; give a &lt;em&gt;tuple&lt;/em&gt;? No!, it&apos;s a &lt;a href=&quot;https://www.python.org/dev/peps/pep-0289/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;generator expression&lt;/strong&gt;&lt;/a&gt;. Which returns a &lt;strong&gt;generator&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))\n&amp;lt;generator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; &amp;lt;genexpr&amp;gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x7f52703fbca8&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s the same as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;gen&lt;/span&gt;():\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; i\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;gen()\n&amp;lt;generator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; gen at &lt;span class=&quot;hljs-number&quot;&gt;0x7f5270380db0&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And you can use it as a generator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;gen = (i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(gen)\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(gen)\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(gen)\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(gen)\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;input&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nStopIteration\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you use a list comprehension &lt;em&gt;inside a function&lt;/em&gt;, you don&apos;t need the &lt;code&gt;[]&lt;/code&gt; if that function could loop over a generator. For example, &lt;a href=&quot;https://docs.python.org/3/library/functions.html#sum&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;sum()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(i**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))\n&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Related&lt;/strong&gt; (about generators): &lt;a href=&quot;https://stackoverflow.com/questions/1756096/understanding-generators-in-python&quot;&gt;Understanding Generators in Python&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;There are list, dictionary, and set comprehensions, but no tuple comprehensions (though do explore &quot;generator expressions&quot;).&lt;/p&gt;\n\n&lt;p&gt;They address the problem that traditional loops in Python are statements (don&apos;t return anything) not expressions which return a value.&lt;/p&gt;\n\n&lt;p&gt;They are not the solution to every problem and can be rewritten as traditional loops. They become awkward when state needs to be maintained &amp;amp; updated between iterations.&lt;/p&gt;\n\n&lt;p&gt;They typically consist of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&amp;lt;output expr&amp;gt; &amp;lt;loop expr &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt; expr&amp;gt;&amp;gt; &amp;lt;optional predicate expr&amp;gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but can be twisted in lots of interesting and bizarre ways.&lt;/p&gt;\n\n&lt;p&gt;They can be analogous to the traditional &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt; operations which still exist in Python and continue to be used.&lt;/p&gt;\n\n&lt;p&gt;When done well, they have a high satisfaction quotient.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;ve seen a lot of confusion lately (on other SO questions and from coworkers) about how list comprehensions work. A wee bit of math education can help with &lt;em&gt;why&lt;/em&gt; the syntax is like this, and what list comprehensions really mean.&lt;/p&gt;\n\n&lt;h2&gt;The syntax&lt;/h2&gt;\n\n&lt;p&gt;It&apos;s best to think of list comprehensions as predicates over a set/collection, like we would in mathematics by using set builder notation. The notation actually feels pretty natural to me, because I hold an undergrad degree in Mathematics. But forget about me, Guido van Rossum (inventor of Python) holds a masters in Mathematics and has a math background.&lt;/p&gt;\n\n&lt;h2&gt;Set builder notation crash course&lt;/h2&gt;\n\n&lt;p&gt;Here&apos;s the (very basics) of how set builder notation works:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/MRPIy.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/MRPIy.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;So, this set builder notation represents the set of numbers that are strictly positive (i.e. &lt;code&gt;[1,2,3,4,...]&lt;/code&gt;).&lt;/p&gt;\n\n&lt;h2&gt;Points of confusion&lt;/h2&gt;\n\n&lt;p&gt;1) &lt;strong&gt;The predicate filter in set builder notation only specifies which items we want to keep, and list comprehension predicates do the same thing.&lt;/strong&gt; You don&apos;t have to include special logic for omitting items, they are omitted unless included by the predicate. The empty predicate (i.e. no conditional at the end) includes all items in the given collection.&lt;/p&gt;\n\n&lt;p&gt;2) &lt;strong&gt;The predicate filter in set builder notation goes at the end, and similarly in list comprehensions.&lt;/strong&gt; (some) Beginners think something like &lt;code&gt;[x &amp;lt; 5 for x in range(10)]&lt;/code&gt; will give them the list &lt;code&gt;[0,1,2,3,4]&lt;/code&gt;, when in fact it outputs &lt;code&gt;[True, True, True, True, True, False, False, False, False, False]&lt;/code&gt;. We get the output &lt;code&gt;[True, True, True, True, True, False, False, False, False, False]&lt;/code&gt; because we asked Python to evaluate &lt;code&gt;x &amp;lt; 5&lt;/code&gt; for &lt;em&gt;all&lt;/em&gt; items in &lt;code&gt;range(10)&lt;/code&gt;. No predicate implies that we get everything from the set (just like in set builder notation).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;If you keep set builder notation in the back of your mind while using list comprehensions, they&apos;re a bit easier to swallow.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;HTH!&lt;/p&gt;\n    ","\n&lt;p&gt;If you prefer a more visual way of figuring out what&apos;s going on then maybe this will help:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# for the example in the question...&lt;/span&gt;\n\ny = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    y += [x**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# is equivalent to...&lt;/span&gt;\n\ny = [x**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# for a slightly more complex example, it is useful&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# to visualize  where the various x&apos;s end up...&lt;/span&gt;\n\na = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\nb = [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\nc = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a:\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; b:\n                  c += [x]\n&lt;span class=&quot;hljs-comment&quot;&gt;#   \\         \\        /&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#    \\    _____\\______/&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#     \\  /      \\&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#      \\/        \\&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#      /\\         \\&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#     /  \\         \\&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#    /    \\         \\&lt;/span&gt;\nc = [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; b]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(c)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...produces the output &lt;code&gt;[3, 4]&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A list comprehension is a high level, declarative way to create a list in Python. The main benefits of comprehensions are readability and maintainability. A lot of people find them very readable, and even developers who have never seen them before can usually guess correctly what it means.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Snippet 1&lt;/span&gt;\nsquares = [n ** &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Snippet 2&lt;/span&gt;\nsquares = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n    squares.append(n ** &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both snippets of code will produce &lt;code&gt;squares&lt;/code&gt; to be equal to &lt;code&gt;[0, 1, 4, 9, 16]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Notice that in the first snippet, what you type is declaring what kind of list you want, while the second is specifying how to create it. This is why a comprehension is a high-level and declarative.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[EXPRESSION &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; VARIABLE &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; SEQUENCE]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;EXPRESSION&lt;/code&gt; is any Python expression, but it is typical to have some variable in it. This variable is stated in &lt;code&gt;VARIABLE&lt;/code&gt; field. &lt;code&gt;SEQUENCE&lt;/code&gt; defines the source of values the variable enumerates through.&lt;/p&gt;\n\n&lt;p&gt;Considering Snippet 1, &lt;code&gt;[n ** 2 for n in range(5)]&lt;/code&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;EXPRESSION&lt;/code&gt; is &lt;code&gt;n ** 2&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;VARIABLE&lt;/code&gt; is &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;SEQUENCE&lt;/code&gt; is &lt;code&gt;range(5)&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Notice that if you check the type of &lt;code&gt;squares&lt;/code&gt; you will get that the list comprehension is just a regular list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(squares)\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list&apos;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;More about EXPRESSION&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The expression can be anything that reduces to a value:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Arithmetic expressions such as &lt;code&gt;n ** 2 + 3 * n + 1&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;A function call like &lt;code&gt;f(n)&lt;/code&gt; using &lt;code&gt;n&lt;/code&gt; as variable&lt;/li&gt;\n&lt;li&gt;A slice operation like &lt;code&gt;s[::-1]&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Method calls &lt;code&gt;bar.foo()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;...&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Some examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * x + &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[&lt;span class=&quot;hljs-built_in&quot;&gt;abs&lt;/span&gt;(num) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; num &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;animals = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;lion&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tiger&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[animal.upper() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; animal &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; animals]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;DOG&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;CAT&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;LION&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;TIGER&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Filtering:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The order of elements in the final list is determined by the order of &lt;code&gt;SEQUENCE&lt;/code&gt;. However, you can filter out elements adding an &lt;code&gt;if&lt;/code&gt; clause:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[EXPRESSION &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; VARIABLE &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; SEQUENCE &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; CONDITION]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;CONDITION&lt;/code&gt; is an expression that evaluates to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Technically, the condition doesn&apos;t have to depend upon &lt;code&gt;VARIABLE&lt;/code&gt;, but it typically uses it.&lt;/p&gt;\n\n&lt;p&gt;Examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[n ** &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;animals = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;lion&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tiger&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[animal &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; animal &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; animals &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(animal) == &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, remember that Python allows you to write other kinds of comprehensions other than lists:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;dictionary comprehensions&lt;/li&gt;\n&lt;li&gt;set comprehensions&lt;/li&gt;\n&lt;/ul&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The ternary expression &lt;code&gt;x if cond else y&lt;/code&gt; really doesn&apos;t have anything specifically to do with list comprehensions - any valid expression can be used inside a list compression - the ternary expression is one of many python expressions.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2750492/achampion&quot; title=&quot;28,416 reputation&quot; class=&quot;comment-user&quot;&gt;AChampion&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment57412936_34835952&quot;&gt;&lt;span title=&quot;2016-01-17 07:11:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 17, 2016 at 7:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AChampion: Yeah, I mentioned that in my answer because I tried &lt;code&gt;[i for i in x if i else y]&lt;/code&gt; when I was learning list comprehensions and it doesn&apos;t work. After some research I understand that I must use &lt;code&gt;[i if i else y for i in x]&lt;/code&gt; instead. So I think if I mention it here then others can avoid the issue which I had before.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5299236/remi-guan&quot; title=&quot;20,252 reputation&quot; class=&quot;comment-user owner&quot;&gt;Remi Guan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment57412958_34835952&quot;&gt;&lt;span title=&quot;2016-01-17 07:14:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 17, 2016 at 7:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This made my day: &lt;code&gt;When done well, they have a high satisfaction quotient.&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5741172/sohaib-farooqi&quot; title=&quot;5,049 reputation&quot; class=&quot;comment-user&quot;&gt;Sohaib Farooqi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment83311575_34932520&quot;&gt;&lt;span title=&quot;2018-01-09 10:37:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 9, 2018 at 10:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":444,"title":"What does \"list comprehension\" and similar mean? How does it work and how can I use it?","content":"\n                \n&lt;p&gt;I have the following code:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[x ** &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When I run it in the Python shell, it returns:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I&apos;ve searched and it seems this is called a &lt;strong&gt;list comprehension&lt;/strong&gt; and similarly there seem to be set/dict comprehensions and generator expressions. But how does it work?&lt;/p&gt;\n    ","slug":"what-does-\"list-comprehension\"-and-similar-mean-how-does-it-work-and-how-can-i-use-it-1657387996940","postType":"QUESTION","createdAt":"2022-07-09T17:33:16.000Z","updatedAt":"2022-07-09T17:33:16.000Z","tags":[{"id":2304,"name":"list-comprehension","slug":"list-comprehension","createdAt":"2022-07-09T17:33:17.000Z","updatedAt":"2022-07-09T17:33:17.000Z","Questions_Tags":{"questionId":444,"tagId":2304}}]}]}},"__N_SSG":true}