{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/users/20860/bill-karwin&quot;&gt;@Bill Karwin&lt;/a&gt; describes three inheritance models in his &lt;a href=&quot;http://pragprog.com/titles/bksqla/sql-antipatterns&quot; rel=&quot;noreferrer&quot;&gt;SQL Antipatterns&lt;/a&gt; book, when proposing solutions to the SQL &lt;a href=&quot;http://en.wikipedia.org/wiki/Entity-attribute-value_model&quot; rel=&quot;noreferrer&quot;&gt;Entity-Attribute-Value&lt;/a&gt; antipattern. This is a brief overview:&lt;/p&gt;\n&lt;h2&gt;Single Table Inheritance (aka Table Per Hierarchy Inheritance):&lt;/h2&gt;\n&lt;p&gt;Using a single table as in your first option is probably the simplest design. As you mentioned, many attributes that are subtype-specific will have to be given a &lt;code&gt;NULL&lt;/code&gt; value on rows where these attributes do not apply. With this model, you would have one policies table, which would look something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+----------+----------------+------------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; id   &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; date_issued         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; type     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; vehicle_reg_no &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; property_address &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+----------+----------------+------------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; MOTOR    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;A&lt;span class=&quot;hljs-number&quot;&gt;-04004&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;             &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; MOTOR    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;B&lt;span class=&quot;hljs-number&quot;&gt;-01010&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;             &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; PROPERTY &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;           &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Oxford Street    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; MOTOR    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;C&lt;span class=&quot;hljs-number&quot;&gt;-02020&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;             &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+----------+----------------+------------------+&lt;/span&gt;\n\n\\&lt;span class=&quot;hljs-comment&quot;&gt;------ COMMON FIELDS -------/          \\----- SUBTYPE SPECIFIC FIELDS -----/&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Keeping the design simple is a plus, but the main problems with this approach are the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;When it comes to adding new subtypes, you would have to alter the table to accommodate the attributes that describe these new objects. This can quickly become problematic when you have many subtypes, or if you plan to add subtypes on a regular basis.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The database will not be able to enforce which attributes apply and which don&apos;t, since there is no metadata to define which attributes belong to which subtypes.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You also cannot enforce &lt;code&gt;NOT NULL&lt;/code&gt; on attributes of a subtype that should be mandatory. You would have to handle this in your application, which in general is not ideal.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Concrete Table Inheritance:&lt;/h2&gt;\n&lt;p&gt;Another approach to tackle inheritance is to create a new table for each subtype, repeating all the common attributes in each table. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--// Table: policies_motor&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+----------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; id   &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; date_issued         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; vehicle_reg_no &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+----------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;A&lt;span class=&quot;hljs-number&quot;&gt;-04004&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;B&lt;span class=&quot;hljs-number&quot;&gt;-01010&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;C&lt;span class=&quot;hljs-number&quot;&gt;-02020&lt;/span&gt;     &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+----------------+&lt;/span&gt;\n                          \n&lt;span class=&quot;hljs-comment&quot;&gt;--// Table: policies_property    &lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+------------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; id   &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; date_issued         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; property_address &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+------------------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-08&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Oxford Street    &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;   \n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;------+---------------------+------------------+&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This design will basically solve the problems identified for the single table method:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Mandatory attributes can now be enforced with &lt;code&gt;NOT NULL&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Adding a new subtype requires adding a new table instead of adding columns to an existing one.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;There is also no risk that an inappropriate attribute is set for a particular subtype, such as the &lt;code&gt;vehicle_reg_no&lt;/code&gt; field for a property policy.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;There is no need for the &lt;code&gt;type&lt;/code&gt; attribute as in the single table method. The type is now defined by the metadata: the table name.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;However this model also comes with a few disadvantages:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The common attributes are mixed with the subtype specific attributes, and there is no easy way to identify them. The database will not know either.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When defining the tables, you would have to repeat the common attributes for each subtype table. That&apos;s definitely not &lt;a href=&quot;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot; rel=&quot;noreferrer&quot;&gt;DRY&lt;/a&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Searching for all the policies regardless of the subtype becomes difficult, and would require a bunch of &lt;code&gt;UNION&lt;/code&gt;s.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;This is how you would have to query all the policies regardless of the type:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;     date_issued, other_common_fields, &lt;span class=&quot;hljs-string&quot;&gt;&apos;MOTOR&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; type\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;       policies_motor\n&lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;     date_issued, other_common_fields, &lt;span class=&quot;hljs-string&quot;&gt;&apos;PROPERTY&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; type\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;       policies_property;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note how adding new subtypes would require the above query to be modified with an additional &lt;code&gt;UNION ALL&lt;/code&gt; for each subtype. This can easily lead to bugs in your application if this operation is forgotten.&lt;/p&gt;\n&lt;h2&gt;Class Table Inheritance (aka Table Per Type Inheritance):&lt;/h2&gt;\n&lt;p&gt;This is the solution that &lt;a href=&quot;https://stackoverflow.com/questions/3579079/how-can-you-represent-inheritance-in-a-database/3579139#3579139&quot;&gt;@David mentions in the other answer&lt;/a&gt;. You create a single table for your base class, which includes all the common attributes. Then you would create specific tables for each subtype, whose primary key also serves as a &lt;a href=&quot;http://en.wikipedia.org/wiki/Foreign_key&quot; rel=&quot;noreferrer&quot;&gt;foreign key&lt;/a&gt; to the base table. Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; policies (\n   policy_id          &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;,\n   date_issued        datetime,\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;-- // other common attributes ...&lt;/span&gt;\n);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; policy_motor (\n    policy_id         &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;,\n    vehicle_reg_no    &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;-- // other attributes specific to motor insurance ...&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FOREIGN&lt;/span&gt; KEY (policy_id) &lt;span class=&quot;hljs-keyword&quot;&gt;REFERENCES&lt;/span&gt; policies (policy_id)\n);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; policy_property (\n    policy_id         &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;,\n    property_address  &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;-- // other attributes specific to property insurance ...&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FOREIGN&lt;/span&gt; KEY (policy_id) &lt;span class=&quot;hljs-keyword&quot;&gt;REFERENCES&lt;/span&gt; policies (policy_id)\n);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This solution solves the problems identified in the other two designs:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Mandatory attributes can be enforced with &lt;code&gt;NOT NULL&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Adding a new subtype requires adding a new table instead of adding columns to an existing one.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;No risk that an inappropriate attribute is set for a particular subtype.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;No need for the &lt;code&gt;type&lt;/code&gt; attribute.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Now the common attributes are not mixed with the subtype specific attributes anymore.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;We can stay DRY, finally. There is no need to repeat the common attributes for each subtype table when creating the tables.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Managing an auto incrementing &lt;code&gt;id&lt;/code&gt; for the policies becomes easier, because this can be handled by the base table, instead of each subtype table generating them independently.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Searching for all the policies regardless of the subtype now becomes very easy: No &lt;code&gt;UNION&lt;/code&gt;s needed - just a &lt;code&gt;SELECT * FROM policies&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;I consider the class table approach as the most suitable in most situations.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The names of these three models come from &lt;a href=&quot;http://martinfowler.com/&quot; rel=&quot;noreferrer&quot;&gt;Martin Fowler&apos;s&lt;/a&gt; book &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321127420&quot; rel=&quot;noreferrer&quot;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The 3rd option is to create a &quot;Policy&quot; table, then a &quot;SectionsMain&quot; table that stores all of the fields that are in common across the types of sections.  Then create other tables for each type of section that only contain the fields that are not in common.&lt;/p&gt;\n\n&lt;p&gt;Deciding which is best depends mostly on how many fields you have and how you want to write your SQL.  They would all work.  If you have just a few fields then I would probably go with #1.  With &quot;lots&quot; of fields I would lean towards #2 or #3.&lt;/p&gt;\n    ","\n&lt;p&gt;With the information provided, I&apos;d model the database to have the following:&lt;/p&gt;\n\n&lt;h2&gt;POLICIES&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;POLICY_ID (primary key)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;LIABILITIES&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;LIABILITY_ID (primary key)&lt;/li&gt;\n&lt;li&gt;POLICY_ID (foreign key)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;PROPERTIES&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;PROPERTY_ID (primary key)&lt;/li&gt;\n&lt;li&gt;POLICY_ID (foreign key)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;...and so on, because I&apos;d expect there to be different attributes associated with each section of the policy.  Otherwise, there could be a single &lt;code&gt;SECTIONS&lt;/code&gt; table and in addition to the &lt;code&gt;policy_id&lt;/code&gt;, there&apos;d be a &lt;code&gt;section_type_code&lt;/code&gt;...&lt;/p&gt;\n\n&lt;p&gt;Either way, this would allow you to support optional sections per policy...&lt;/p&gt;\n\n&lt;p&gt;I don&apos;t understand what you find unsatisfactory about this approach - this is how you store data while maintaining referential integrity and not duplicating data.  The term is &quot;normalized&quot;...&lt;/p&gt;\n\n&lt;p&gt;Because SQL is SET based, it&apos;s rather alien to procedural/OO programming concepts &amp;amp; requires code to transition from one realm to the other.  ORMs are often considered, but they don&apos;t work well in high volume, complex systems.&lt;/p&gt;\n    ","\n&lt;p&gt;In addition at the Daniel Vassallo solution, if you use SQL Server 2016+, there is another solution that I used in some cases without considerable lost of performances.&lt;/p&gt;\n\n&lt;p&gt;You can create just a table with only the common field and add a single column with the &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/json/json-data-sql-server&quot; rel=&quot;noreferrer&quot;&gt;JSON&lt;/a&gt; string that contains all the subtype specific fields.&lt;/p&gt;\n\n&lt;p&gt;I have tested this design for manage inheritance and I am very happy for the flexibility that I can use in the relative application.&lt;/p&gt;\n    ","\n&lt;p&gt;The another way to do it, is using the &lt;code&gt;INHERITS&lt;/code&gt; component. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; person (\n    id &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ,\n    name &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),\n    &lt;span class=&quot;hljs-keyword&quot;&gt;CONSTRAINT&lt;/span&gt; pessoa_pkey &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY (id)\n);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; natural_person (\n    social_security_number &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;),\n    &lt;span class=&quot;hljs-keyword&quot;&gt;CONSTRAINT&lt;/span&gt; pessoaf_pkey &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY (id)\n) INHERITS (person);\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; juridical_person (\n    tin_number &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;),\n    &lt;span class=&quot;hljs-keyword&quot;&gt;CONSTRAINT&lt;/span&gt; pessoaj_pkey &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY (id)\n) INHERITS (person);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Thus it&apos;s possible to define a inheritance between tables.&lt;/p&gt;\n    ","\n&lt;p&gt;I lean towards method #1 (a unified Section table), for the sake of efficiently retrieving entire policies with all their sections (which I assume your system will be doing a lot).&lt;/p&gt;\n\n&lt;p&gt;Further, I don&apos;t know what version of SQL Server you&apos;re using, but in 2008+ &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc280604(v=SQL.100).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sparse Columns&lt;/a&gt; help optimize performance in situations where many of the values in a column will be NULL. &lt;/p&gt;\n\n&lt;p&gt;Ultimately, you&apos;ll have to decide just how &quot;similar&quot; the policy sections are. Unless they differ substantially, I think a more-normalized solution might be more trouble than it&apos;s worth... but only you can make that call. :)&lt;/p&gt;\n    ","\n&lt;p&gt;Alternatively, consider using a document databases (such as MongoDB) which natively support rich data structures and nesting.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Possible duplicate of &lt;a href=&quot;https://stackoverflow.com/questions/190296/how-do-you-effectively-model-inheritance-in-a-database&quot;&gt;How do you effectively model inheritance in a database?&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3404097/philipxy&quot; title=&quot;14,480 reputation&quot; class=&quot;comment-user&quot;&gt;philipxy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment100236065_3579079&quot;&gt;&lt;span title=&quot;2019-07-01 20:30:35Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 1, 2019 at 20:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I am using this design, too, but you don&apos;t mention the drawbacks. Specifically: 1) you say you don&apos;t need the type; true but you cannot identify the actual type of a row unless you look at all subtypes tables to find a match. 2) It&apos;s hard to keep the master table and the subtype tables in sync (one can e.g. remove the row in the subtype table and not in the master table). 3) You can have more than one subtype for each master row. I use triggers to work around 1, but 2 and 3 are very hard problems. Actually 3 is not a problem if you model composition, but is for strict inheritance.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user948581&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment20815392_3579462&quot;&gt;&lt;span title=&quot;2013-02-13 10:51:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 13, 2013 at 10:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1 for @Tibo&apos;s comment, that&apos;s a grave problem. Class Table inheritance actually yields an unnormalized schema. Where as Concrete Table inheritance doesn&apos;t, and I don&apos;t agree with the argument that Concrete Table Inheritance hinders DRY. &lt;i&gt;SQL&lt;/i&gt; hinders DRY, because it has no metaprogramming facilities. The solution is to use a Database Toolkit (or write your own) to do the heavy lifting, instead of writing SQL directly (remember, it is actually only a DB interface language). After all, you also don&apos;t write your enterprise application in assembly.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1073695/jo-so&quot; title=&quot;23,116 reputation&quot; class=&quot;comment-user&quot;&gt;Jo So&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment30678164_3579462&quot;&gt;&lt;span title=&quot;2013-12-11 13:25:32Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 11, 2013 at 13:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Tibo, about point 3, you can use the approach explained here: &lt;a href=&quot;http://www.sqlteam.com/article/implementing-table-inheritance-in-sql-server&quot; rel=&quot;nofollow noreferrer&quot;&gt;sqlteam.com/article/&lt;/a&gt;, Check the &lt;i&gt;Modeling One-to-Either Constraints&lt;/i&gt; section.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2321042/andrew&quot; title=&quot;7,089 reputation&quot; class=&quot;comment-user&quot;&gt;Andrew&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment44932308_3579462&quot;&gt;&lt;span title=&quot;2015-02-03 00:20:38Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 3, 2015 at 0:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@DanielVassallo Firstly thanks for stunning answer, 1 doubt if a person has a policyId how to know whether its policy_motor or policy_property? One way is to search policyId in all sub Tables but I guess this is the bad way isn&apos;t it, What should be the correct approach?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2902769/thomasbecker&quot; title=&quot;346 reputation&quot; class=&quot;comment-user&quot;&gt;ThomasBecker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45935096_3579462&quot;&gt;&lt;span title=&quot;2015-03-03 13:16:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 3, 2015 at 13:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I really like your third option. However, I&apos;m confused how SELECT will work. If you SELECT * FROM policies, you&apos;ll get back policy ids but you still won&apos;t know which subtype table the policy belongs to. Won&apos;t you still have to do a JOIN with all of the subtypes in order to get all of the policy details?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1108811/adam&quot; title=&quot;948 reputation&quot; class=&quot;comment-user&quot;&gt;Adam&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59372381_3579462&quot;&gt;&lt;span title=&quot;2016-03-07 20:26:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 7, 2016 at 20:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;+1: 3rd option is the closest to the inheritance model, and most normalized IMO&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/39430/darcy-rittich&quot; title=&quot;161,365 reputation&quot; class=&quot;comment-user&quot;&gt;D&apos;Arcy Rittich&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3753993_3579139&quot;&gt;&lt;span title=&quot;2010-08-26 20:29:39Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Aug 26, 2010 at 20:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Your option #3 is really just what I meant by option #2. There are many fields and some Section would have child entities too.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/393851/steve-jones&quot; title=&quot;3,177 reputation&quot; class=&quot;comment-user owner&quot;&gt;Steve Jones&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3754276_3579139&quot;&gt;&lt;span title=&quot;2010-08-26 20:58:15Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Aug 26, 2010 at 20:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yeah, I get the normalisation thing ;-)  For such a complex structure, with some sections being simple and some having their own complex sub-structure, it seems unlikely that an ORM would work, although it would be nice.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/393851/steve-jones&quot; title=&quot;3,177 reputation&quot; class=&quot;comment-user owner&quot;&gt;Steve Jones&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3754328_3579176&quot;&gt;&lt;span title=&quot;2010-08-26 21:02:59Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Aug 26, 2010 at 21:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;That&apos;s an interesting idea. I haven&apos;t used JSON in SQL Server yet, but use it a lot elsewhere. Thanks for the heads up.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/393851/steve-jones&quot; title=&quot;3,177 reputation&quot; class=&quot;comment-user owner&quot;&gt;Steve Jones&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment78961828_46000140&quot;&gt;&lt;span title=&quot;2017-09-01 12:55:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 1, 2017 at 12:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;That&apos;s great for data you don&apos;t intend to index...  If you intend to use the columns in WHERE clauses, etc, you&apos;ll want to index them, and the JSON pattern inhibits you there.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/53341/matbailie&quot; title=&quot;78,334 reputation&quot; class=&quot;comment-user&quot;&gt;MatBailie&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121930557_46000140&quot;&gt;&lt;span title=&quot;2021-08-30 22:04:47Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 30, 2021 at 22:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Does other DBs support &lt;code&gt;INHERITS&lt;/code&gt; besides &lt;i&gt;PostgreSQL&lt;/i&gt; ? &lt;i&gt;MySQL&lt;/i&gt; for example ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/839554/giannis-christofakis&quot; title=&quot;7,785 reputation&quot; class=&quot;comment-user&quot;&gt;giannis christofakis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59528531_20380287&quot;&gt;&lt;span title=&quot;2016-03-11 09:00:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 11, 2016 at 9:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@giannischristofakis: MySQL is only a relational database, whereas Postgres is an object-relational database. So, no MySQL does not support this. In fact, I think that Postgres is the only current DBMS that supports this type of inheritance.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/330315/a-horse-with-no-name&quot; title=&quot;502,896 reputation&quot; class=&quot;comment-user&quot;&gt;a_horse_with_no_name&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment68353295_20380287&quot;&gt;&lt;span title=&quot;2016-11-11 23:15:33Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 11, 2016 at 23:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@marco-paulo-ollivier, the OP&apos;s question is about SQL Server, so I don&apos;t understand why you provide a solution that only works with Postgres. Obviously, not addressing the problem.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1827854/mapto&quot; title=&quot;585 reputation&quot; class=&quot;comment-user&quot;&gt;mapto&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment99191044_20380287&quot;&gt;&lt;span title=&quot;2019-05-24 09:00:19Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 24, 2019 at 9:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@mapto this question has become something of a &quot;how does one do OO style inheritance in a database&quot; dupe target; that it was originally about sql server is likely now irrelevant&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1410664/caius-jard&quot; title=&quot;69,892 reputation&quot; class=&quot;comment-user&quot;&gt;Caius Jard&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105797257_20380287&quot;&gt;&lt;span title=&quot;2020-01-20 20:24:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 20, 2020 at 20:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It seems that &lt;code&gt;INHERITS&lt;/code&gt; pg functionality allows much more elegant querying, however the table/columns themselves are still set up exactly in concrete inheritance fashion: repeating all common attributes.  I don&apos;t think this removes any of the flaws already raised with concrete inheritance&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9466397/defraggled&quot; title=&quot;700 reputation&quot; class=&quot;comment-user&quot;&gt;defraggled&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120596617_20380287&quot;&gt;&lt;span title=&quot;2021-07-03 10:31:53Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 3, 2021 at 10:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;There will be way too much information to present the whole Policy in one go, so it&apos;d never be necessary to retrieve the whole record. I think it is 2005, although I have used 2008&apos;s sparse in other projects.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/393851/steve-jones&quot; title=&quot;3,177 reputation&quot; class=&quot;comment-user owner&quot;&gt;Steve Jones&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3754294_3579174&quot;&gt;&lt;span title=&quot;2010-08-26 20:59:55Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Aug 26, 2010 at 20:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Where is the term &quot;unified section table&quot; coming from? Google shows almost no results for it and there are enough confusing terms here already.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2294225/stephan-v&quot; title=&quot;17,533 reputation&quot; class=&quot;comment-user&quot;&gt;Stephan-v&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment97650448_3579174&quot;&gt;&lt;span title=&quot;2019-04-02 08:03:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 2, 2019 at 8:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":465,"title":"How can you represent inheritance in a database?","content":"\n                \n&lt;p&gt;I&apos;m thinking about how to represent a complex structure in a SQL Server database.&lt;/p&gt;\n\n&lt;p&gt;Consider an application that needs to store details of a family of objects, which share some attributes, but have many others not common. For example, a commercial insurance package may include liability, motor, property and indemnity cover within the same policy record.&lt;/p&gt;\n\n&lt;p&gt;It is trivial to implement this in C#, etc, as you can create a Policy with a collection of Sections, where Section is inherited as required for the various types of cover. However, relational databases don&apos;t seem to allow this easily.&lt;/p&gt;\n\n&lt;p&gt;I can see that there are two main choices:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Create a Policy table, then a Sections table, with all the fields required, for all possible variations, most of which would be null.  &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Create a Policy table and numerous Section tables, one for each kind of cover.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Both of these alternatives seem unsatisfactory, especially as it is necessary to write queries across all Sections, which would involve numerous joins, or numerous null-checks.&lt;/p&gt;\n\n&lt;p&gt;What is the best practice for this scenario?&lt;/p&gt;\n    ","slug":"how-can-you-represent-inheritance-in-a-database-1657388076553","postType":"QUESTION","createdAt":"2022-07-09T17:34:36.000Z","updatedAt":"2022-07-09T17:34:36.000Z","tags":[{"id":2371,"name":"class-table-inheritance","slug":"class-table-inheritance","createdAt":"2022-07-09T17:34:36.000Z","updatedAt":"2022-07-09T17:34:36.000Z","Questions_Tags":{"questionId":465,"tagId":2371}}]}]}},"__N_SSG":true}