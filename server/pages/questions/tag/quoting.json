{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;In all of the cases above, the variable is correctly set, but not correctly read! The right way is to &lt;strong&gt;use double quotes &lt;em&gt;when referencing&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This gives the expected value in all the examples given. Always quote variable references!&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Why? &lt;/p&gt;\n\n&lt;p&gt;When a variable is &lt;strong&gt;unquoted&lt;/strong&gt;, it will:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Undergo &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_05&quot;&gt;field splitting&lt;/a&gt; where the value is split into multiple words on whitespace (by default):&lt;/p&gt;\n\n&lt;p&gt;Before: &lt;code&gt;/* Foobar is free software */&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;After: &lt;code&gt;/*&lt;/code&gt;, &lt;code&gt;Foobar&lt;/code&gt;, &lt;code&gt;is&lt;/code&gt;, &lt;code&gt;free&lt;/code&gt;, &lt;code&gt;software&lt;/code&gt;, &lt;code&gt;*/&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Each of these words will undergo &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_06&quot;&gt;pathname expansion&lt;/a&gt;, where patterns are expanded into matching files:&lt;/p&gt;\n\n&lt;p&gt;Before: &lt;code&gt;/*&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;After: &lt;code&gt;/bin&lt;/code&gt;, &lt;code&gt;/boot&lt;/code&gt;, &lt;code&gt;/dev&lt;/code&gt;, &lt;code&gt;/etc&lt;/code&gt;, &lt;code&gt;/home&lt;/code&gt;, ...&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Finally, all the arguments are passed to echo, which writes them out &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/echo.html#tag_20_37_10&quot;&gt;separated by single spaces&lt;/a&gt;, giving&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;/bin /boot /dev /etc /home Foobar is free software Desktop/ Downloads/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;instead of the variable&apos;s value.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;When the variable is &lt;strong&gt;quoted&lt;/strong&gt; it will:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Be substituted for its value.&lt;/li&gt;\n&lt;li&gt;There is no step 2.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This is why you should &lt;strong&gt;always quote all variable references&lt;/strong&gt;, unless you specifically require word splitting and pathname expansion. Tools like &lt;a href=&quot;http://www.shellcheck.net&quot;&gt;shellcheck&lt;/a&gt; are there to help, and will warn about missing quotes in all the cases above.&lt;/p&gt;\n    ","\n&lt;p&gt;You may want to know why this is happening. Together with &lt;a href=&quot;https://stackoverflow.com/a/29378567/1983854&quot;&gt;the great explanation by that other guy&lt;/a&gt;, find a reference of &lt;a href=&quot;https://unix.stackexchange.com/a/131767/40596&quot;&gt;Why does my shell script choke on whitespace or other special characters?&lt;/a&gt; written by &lt;a href=&quot;https://unix.stackexchange.com/users/885/gilles&quot;&gt;Gilles&lt;/a&gt; in &lt;a href=&quot;https://unix.stackexchange.com/&quot;&gt;Unix &amp;amp; Linux&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h2&gt;Why do I need to write &lt;code&gt;&quot;$foo&quot;&lt;/code&gt;? What happens without the quotes?&lt;/h2&gt;\n  \n  &lt;p&gt;&lt;code&gt;$foo&lt;/code&gt; does not mean take the value of the variable &lt;code&gt;foo&lt;/code&gt;. It means\n  something much more complex:&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;First, take the value of the variable.  &lt;/li&gt;\n  &lt;li&gt;Field splitting: treat that value as a whitespace-separated list of fields, and build the resulting list. For example, if the variable\n  contains &lt;code&gt;foo *  bar &lt;/code&gt; then the result of this step is the 3-element\n  list &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;.  &lt;/li&gt;\n  &lt;li&gt;Filename generation: treat each field as a glob, i.e. as a wildcard pattern, and replace it by the list of file names that match this\n  pattern. If the pattern doesn&apos;t match any files, it is left\n  unmodified. In our example, this results in the list containing &lt;code&gt;foo&lt;/code&gt;,\n  following by the list of files in the current directory, and finally\n  &lt;code&gt;bar&lt;/code&gt;. If the current directory is empty, the result is &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;,\n  &lt;code&gt;bar&lt;/code&gt;.&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;p&gt;Note that the result is a list of strings. There are two contexts in\n  shell syntax: list context and string context. Field splitting and\n  filename generation only happen in list context, but that&apos;s most of\n  the time. Double quotes delimit a string context: the whole\n  double-quoted string is a single string, not to be split. (Exception:\n  &lt;code&gt;&quot;$@&quot;&lt;/code&gt; to expand to the list of positional parameters, e.g. &lt;code&gt;&quot;$@&quot;&lt;/code&gt; is\n  equivalent to &lt;code&gt;&quot;$1&quot; &quot;$2&quot; &quot;$3&quot;&lt;/code&gt; if there are three positional\n  parameters. See &lt;a href=&quot;https://unix.stackexchange.com/questions/41571/what-is-the-difference-between-and/94200#94200&quot;&gt;What is the difference between $* and $@?&lt;/a&gt;)&lt;/p&gt;\n  \n  &lt;p&gt;The same happens to command substitution with &lt;code&gt;$(foo)&lt;/code&gt; or with &lt;code&gt;\n  `foo`&lt;/code&gt;. On a side note, don&apos;t use &lt;code&gt;`foo`&lt;/code&gt;: its quoting rules are\n  weird and non-portable, and all modern shells support &lt;code&gt;$(foo)&lt;/code&gt; which\n  is absolutely equivalent except for having intuitive quoting rules.&lt;/p&gt;\n  \n  &lt;p&gt;The output of arithmetic substitution also undergoes the same\n  expansions, but that isn&apos;t normally a concern as it only contains\n  non-expandable characters (assuming &lt;code&gt;IFS&lt;/code&gt; doesn&apos;t contain digits or\n  &lt;code&gt;-&lt;/code&gt;).&lt;/p&gt;\n  \n  &lt;p&gt;See &lt;a href=&quot;https://unix.stackexchange.com/questions/68694/when-is-double-quoting-necessary&quot;&gt;When is double-quoting necessary?&lt;/a&gt; for more details about the\n  cases when you can leave out the quotes.&lt;/p&gt;\n  \n  &lt;p&gt;Unless you mean for all this rigmarole to happen, just remember to\n  always use double quotes around variable and command substitutions. Do\n  take care: leaving out the quotes can lead not just to errors but to\n  &lt;a href=&quot;https://unix.stackexchange.com/questions/171346/security-implications-of-forgetting-to-quote-a-variable-in-bash-posix-shells/171347#171347&quot;&gt;security\n  holes&lt;/a&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;In addition to other issues caused by failing to quote, &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-e&lt;/code&gt; can be consumed by &lt;code&gt;echo&lt;/code&gt; as arguments. (Only the former is legal per the POSIX spec for &lt;code&gt;echo&lt;/code&gt;, but several common implementations violate the spec and consume &lt;code&gt;-e&lt;/code&gt; as well).&lt;/p&gt;\n&lt;p&gt;To avoid this, &lt;strong&gt;use &lt;code&gt;printf&lt;/code&gt; instead of &lt;code&gt;echo&lt;/code&gt; when details matter.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Thus:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ vars=&lt;span class=&quot;hljs-string&quot;&gt;&quot;-e -n -a&quot;&lt;/span&gt;\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$vars&lt;/span&gt;      &lt;span class=&quot;hljs-comment&quot;&gt;# breaks because -e and -n can be treated as arguments to echo&lt;/span&gt;\n-a\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$vars&lt;/span&gt;&quot;&lt;/span&gt;\n-e -n -a\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, correct quoting won&apos;t always save you when using &lt;code&gt;echo&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ vars=&lt;span class=&quot;hljs-string&quot;&gt;&quot;-n&quot;&lt;/span&gt;\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$vars&lt;/span&gt;&quot;&lt;/span&gt;\n$ &lt;span class=&quot;hljs-comment&quot;&gt;## not even an empty line was printed&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;...whereas it &lt;strong&gt;will&lt;/strong&gt; save you with &lt;code&gt;printf&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ vars=&lt;span class=&quot;hljs-string&quot;&gt;&quot;-n&quot;&lt;/span&gt;\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%s\\n&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$vars&lt;/span&gt;&quot;&lt;/span&gt;\n-n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;user double quote to get the exact value. like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${var}&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and it will read your value correctly.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;echo $var&lt;/code&gt; output highly depends on the value of &lt;code&gt;IFS&lt;/code&gt; variable. By default it contains space, tab, and newline characters:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;[ks@localhost ~]$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$IFS&lt;/span&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; -vte\n ^I$\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This means that when shell is doing field splitting (or word splitting) it uses all these characters as word separators. This is what happens when referencing a variable without double quotes to echo it (&lt;code&gt;$var&lt;/code&gt;) and thus expected output is altered.&lt;/p&gt;\n\n&lt;p&gt;One way to prevent word splitting (besides using double quotes) is to set &lt;code&gt;IFS&lt;/code&gt; to null. See &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_05&quot; rel=&quot;nofollow&quot;&gt;http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_05&lt;/a&gt; :&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If the value of IFS is null, no field splitting shall be performed.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Setting to null means setting to empty \nvalue:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;IFS=\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Test:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;[ks@localhost ~]$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$IFS&lt;/span&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; -vte\n ^I$\n[ks@localhost ~]$ var=$&lt;span class=&quot;hljs-string&quot;&gt;&apos;key\\nvalue&apos;&lt;/span&gt;\n[ks@localhost ~]$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;\nkey value\n[ks@localhost ~]$ IFS=\n[ks@localhost ~]$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;\nkey\nvalue\n[ks@localhost ~]$ \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;https://stackoverflow.com/questions/29378566/i-just-assigned-a-variable-but-echo-variable-shows-something-else/33719549#33719549&quot;&gt;answer from ks1322&lt;/a&gt; helped me to identify the issue while using &lt;code&gt;docker-compose exec&lt;/code&gt;:&lt;/p&gt;\n\n&lt;p&gt;If you omit the &lt;code&gt;-T&lt;/code&gt; flag, &lt;code&gt;docker-compose exec&lt;/code&gt; add a special character that break output, we see &lt;code&gt;b&lt;/code&gt; instead of &lt;code&gt;1b&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;=$(/usr/local/bin/docker-compose &lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt; db bash -c &lt;span class=&quot;hljs-string&quot;&gt;&quot;echo 1&quot;&lt;/span&gt;)\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${test}&lt;/span&gt;b&quot;&lt;/span&gt;\nb\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${test}&lt;/span&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; -vte\n1^M$\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With &lt;code&gt;-T&lt;/code&gt; flag, &lt;code&gt;docker-compose exec&lt;/code&gt; works as expected:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;=$(/usr/local/bin/docker-compose &lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt; -T db bash -c &lt;span class=&quot;hljs-string&quot;&gt;&quot;echo 1&quot;&lt;/span&gt;)\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${test}&lt;/span&gt;b&quot;&lt;/span&gt;\n1b\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Additional to putting the variable in quotation, one could also translate the output of the variable using &lt;code&gt;tr&lt;/code&gt; and converting spaces to newlines.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; | &lt;span class=&quot;hljs-built_in&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;\nfoo\nbar\nbaz\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although this is a little more convoluted, it does add more diversity with the output as you can substitute any character as the separator between array variables.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks for doing this. I encounter the line feeds one often. So &lt;code&gt;var=$(cat file)&lt;/code&gt; is fine, but &lt;code&gt;echo &quot;$var&quot;&lt;/code&gt; is needed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3430492/userabc123&quot; title=&quot;1,423 reputation&quot; class=&quot;comment-user&quot;&gt;userABC123&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46941032_29378566&quot;&gt;&lt;span title=&quot;2015-04-01 00:07:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 1, 2015 at 0:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;BTW, this is also BashPitfalls #14: &lt;a href=&quot;http://mywiki.wooledge.org/BashPitfalls#echo_.24foo&quot; rel=&quot;nofollow noreferrer&quot;&gt;mywiki.wooledge.org/BashPitfalls#echo_.24foo&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14122/charles-duffy&quot; title=&quot;259,605 reputation&quot; class=&quot;comment-user&quot;&gt;Charles Duffy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48803621_29378566&quot;&gt;&lt;span title=&quot;2015-05-20 16:47:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 20, 2015 at 16:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See also &lt;a href=&quot;http://stackoverflow.com/questions/10067266/when-to-wrap-quotes-around-a-variable&quot; title=&quot;when to wrap quotes around a variable&quot;&gt;stackoverflow.com/questions/10067266/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874188/tripleee&quot; title=&quot;159,777 reputation&quot; class=&quot;comment-user&quot;&gt;tripleee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50628483_29378566&quot;&gt;&lt;span title=&quot;2015-07-09 14:39:41Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 9, 2015 at 14:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also, see also &lt;a href=&quot;http://stackoverflow.com/questions/2414150/how-do-i-preserve-newlines-in-a-quoted-string-in-bash&quot; title=&quot;how do i preserve newlines in a quoted string in bash&quot;&gt;stackoverflow.com/questions/2414150/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874188/tripleee&quot; title=&quot;159,777 reputation&quot; class=&quot;comment-user&quot;&gt;tripleee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment56461404_29378566&quot;&gt;&lt;span title=&quot;2015-12-18 16:21:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 18, 2015 at 16:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;it&apos;s not always working. I can give an example: &lt;a href=&quot;https://paste.ubuntu.com/p/8RjR6CS668/&quot; rel=&quot;nofollow noreferrer&quot;&gt;paste.ubuntu.com/p/8RjR6CS668&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7295761/recolic&quot; title=&quot;476 reputation&quot; class=&quot;comment-user&quot;&gt;recolic&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98625556_29378567&quot;&gt;&lt;span title=&quot;2019-05-05 03:08:06Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 5, 2019 at 3:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yup, &lt;code&gt;$(..)&lt;/code&gt; strips trailing linefeeds. You can use &lt;code&gt;var=$(cat file; printf x); var=&quot;${var%x}&quot;&lt;/code&gt; to work around it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1899640/that-other-guy&quot; title=&quot;110,463 reputation&quot; class=&quot;comment-user owner&quot;&gt;that other guy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment99557818_29378567&quot;&gt;&lt;span title=&quot;2019-06-06 19:17:14Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 6, 2019 at 19:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yay, we need a good dedup for this! I agree this fits the question title, but I don&apos;t think it&apos;ll get the visibility it deserves here. How about a new question à la &quot;Why is my &lt;code&gt;-e&lt;/code&gt;/&lt;code&gt;-n&lt;/code&gt;/backslash not showing up?&quot;  We can add links from here as appropriate.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1899640/that-other-guy&quot; title=&quot;110,463 reputation&quot; class=&quot;comment-user owner&quot;&gt;that other guy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91847544_52451742&quot;&gt;&lt;span title=&quot;2018-09-21 23:24:32Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2018 at 23:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Did you mean &lt;i&gt;consume &lt;code&gt;-n&lt;/code&gt; as well&lt;/i&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6176817/pesathe&quot; title=&quot;6,942 reputation&quot; class=&quot;comment-user&quot;&gt;PesaThe&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94987804_52451742&quot;&gt;&lt;span title=&quot;2019-01-07 15:32:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 7, 2019 at 15:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@PesaThe, no, I meant &lt;code&gt;-e&lt;/code&gt;. The standard for &lt;code&gt;echo&lt;/code&gt; does not specify output when its first argument is &lt;code&gt;-n&lt;/code&gt;, making any/all possible output legal in that case; there is no such provision for &lt;code&gt;-e&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14122/charles-duffy&quot; title=&quot;259,605 reputation&quot; class=&quot;comment-user&quot;&gt;Charles Duffy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94988285_52451742&quot;&gt;&lt;span title=&quot;2019-01-07 15:46:32Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 7, 2019 at 15:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;root@ubuntu:/home/qgb# var_a=100 echo ${var_a}&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6239815/cs-qgb&quot; title=&quot;306 reputation&quot; class=&quot;comment-user&quot;&gt;CS QGB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120069856_51665500&quot;&gt;&lt;span title=&quot;2021-06-11 05:10:10Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 11, 2021 at 5:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You would also have to &lt;code&gt;set -f&lt;/code&gt; to prevent globbing&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1899640/that-other-guy&quot; title=&quot;110,463 reputation&quot; class=&quot;comment-user owner&quot;&gt;that other guy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55216206_33719549&quot;&gt;&lt;span title=&quot;2015-11-15 18:31:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 15, 2015 at 18:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@thatotherguy, is it really necessary for your 1-st example with path expansion? With &lt;code&gt;IFS&lt;/code&gt; set to null, &lt;code&gt;echo $var&lt;/code&gt; will be expanded to &lt;code&gt;echo &apos;/* Foobar is free software */&apos;&lt;/code&gt; and path expansion is not performed inside single quoted strings.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/72178/ks1322&quot; title=&quot;31,753 reputation&quot; class=&quot;comment-user&quot;&gt;ks1322&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55231913_33719549&quot;&gt;&lt;span title=&quot;2015-11-16 09:02:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 16, 2015 at 9:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yes. If you &lt;code&gt;mkdir &quot;/this thing called Foobar is free software etc/&quot;&lt;/code&gt; you&apos;ll see that it still expands. It&apos;s obviously more practical for the &lt;code&gt;[a-z]&lt;/code&gt; example.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1899640/that-other-guy&quot; title=&quot;110,463 reputation&quot; class=&quot;comment-user owner&quot;&gt;that other guy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55249827_33719549&quot;&gt;&lt;span title=&quot;2015-11-16 17:05:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 16, 2015 at 17:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I see, this makes sense for &lt;code&gt;[a-z]&lt;/code&gt; example.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/72178/ks1322&quot; title=&quot;31,753 reputation&quot; class=&quot;comment-user&quot;&gt;ks1322&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55272466_33719549&quot;&gt;&lt;span title=&quot;2015-11-17 08:42:33Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 17, 2015 at 8:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;root@ubuntu:/home/qgb# var=32321 echo $var  root@ubuntu:/home/qgb# var=3231; echo $var 3231&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6239815/cs-qgb&quot; title=&quot;306 reputation&quot; class=&quot;comment-user&quot;&gt;CS QGB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120069902_33719549&quot;&gt;&lt;span title=&quot;2021-06-11 05:12:52Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 11, 2021 at 5:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;But this substitutes &lt;i&gt;all&lt;/i&gt; spaces to newlines. Quoting preserves the existing newlines and spaces.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/828193/user000001&quot; title=&quot;30,569 reputation&quot; class=&quot;comment-user&quot;&gt;user000001&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48806325_30355520&quot;&gt;&lt;span title=&quot;2015-05-20 18:06:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 20, 2015 at 18:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;True, yes. I suppose it depends on what is within the variable. I actually use &lt;code&gt;tr&lt;/code&gt; the other way around to create arrays from text files.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4921139/alek&quot; title=&quot;169 reputation&quot; class=&quot;comment-user&quot;&gt;Alek&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48808189_30355520&quot;&gt;&lt;span title=&quot;2015-05-20 19:00:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 20, 2015 at 19:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Creating a problem by not quoting the variable properly and then working around it with a hamfisted extra process is not good programming.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874188/tripleee&quot; title=&quot;159,777 reputation&quot; class=&quot;comment-user&quot;&gt;tripleee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment57968512_30355520&quot;&gt;&lt;span title=&quot;2016-02-01 06:22:54Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 1, 2016 at 6:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Alek, ...err, what? There&apos;s no &lt;code&gt;tr&lt;/code&gt; needed to properly/correctly create an array from a text file -- you can specify whatever separator you want by setting IFS. For instance: &lt;code&gt;IFS=$&apos;\\n&apos; read -r -d &apos;&apos; -a arrayname &amp;lt; &amp;lt;(cat file.txt &amp;amp;&amp;amp; printf &apos;\\0&apos;)&lt;/code&gt; works all the way back through bash 3.2 (the oldest version in wide circulation), and correctly sets exit status to false if your &lt;code&gt;cat&lt;/code&gt; failed. And if you wanted, say, tabs instead newlines, you&apos;d just replace the &lt;code&gt;$&apos;\\n&apos;&lt;/code&gt; with &lt;code&gt;$&apos;\\t&apos;&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14122/charles-duffy&quot; title=&quot;259,605 reputation&quot; class=&quot;comment-user&quot;&gt;Charles Duffy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment70820574_30355520&quot;&gt;&lt;span title=&quot;2017-01-23 21:43:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 23, 2017 at 21:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Alek, ...if you&apos;re doing something like &lt;code&gt;arrayname=( $( cat file | tr &apos;\\n&apos; &apos; &apos; ) )&lt;/code&gt;, then that&apos;s broken on multiple layers: It&apos;s globbing your results (so a &lt;code&gt;*&lt;/code&gt; turns into a list of files in the current directory), and &lt;i&gt;it would work just as well without the &lt;code&gt;tr&lt;/code&gt;&lt;/i&gt; (or the &lt;code&gt;cat&lt;/code&gt;, for that matter; one could just use &lt;code&gt;arrayname=$( $(&amp;lt;file) )&lt;/code&gt; and it would be broken in the same ways, but less inefficiently so).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14122/charles-duffy&quot; title=&quot;259,605 reputation&quot; class=&quot;comment-user&quot;&gt;Charles Duffy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment70820627_30355520&quot;&gt;&lt;span title=&quot;2017-01-23 21:45:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 23, 2017 at 21:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":308,"title":"I just assigned a variable, but echo $variable shows something else","content":"\n                \n&lt;p&gt;Here are a series of cases where &lt;code&gt;echo $var&lt;/code&gt; can show a different value than what was just assigned. This happens regardless of whether the assigned value was &quot;double quoted&quot;, &apos;single quoted&apos; or unquoted. &lt;/p&gt;\n\n&lt;p&gt;How do I get the shell to set my variable correctly?&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Asterisks&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The expected output is &lt;code&gt;/* Foobar is free software */&lt;/code&gt;, but instead I get a list of filenames:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/* Foobar is free software */&quot;&lt;/span&gt;\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; \n/bin /boot /dev /etc /home /initrd.img /lib /lib64 /media /mnt /opt /proc ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Square brackets&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The expected value is &lt;code&gt;[a-z]&lt;/code&gt;, but sometimes I get a single letter instead!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ var=[a-z]\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;\nc\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Line feeds (newlines)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The expected value is a  a list of separate lines, but instead all the values are on one line!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; file\nfoo\nbar\nbaz\n\n$ var=$(&lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; file)\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;\nfoo bar baz\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Multiple spaces&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I expected a carefully aligned table header, but instead multiple spaces either disappear or are collapsed into one!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;       title     |    count&quot;&lt;/span&gt;\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;\ntitle | count\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Tabs&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I expected two tab separated values, but instead I get two space separated values!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ var=$&lt;span class=&quot;hljs-string&quot;&gt;&apos;key\\tvalue&apos;&lt;/span&gt;\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;\nkey value\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"i-just-assigned-a-variable-but-echo-dollarvariable-shows-something-else-1657387574561","postType":"QUESTION","createdAt":"2022-07-09T17:26:14.000Z","updatedAt":"2022-07-09T17:26:14.000Z","tags":[{"id":1827,"name":"quoting","slug":"quoting","createdAt":"2022-07-09T17:26:14.000Z","updatedAt":"2022-07-09T17:26:14.000Z","Questions_Tags":{"questionId":308,"tagId":1827}}]}]}},"__N_SSG":true}