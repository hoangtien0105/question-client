{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;&quot;Slicing&quot; is where you assign an object of a derived class to an instance of a base class, thereby losing part of the information - some of it is &quot;sliced&quot; away.&lt;/p&gt;\n\n&lt;p&gt;For example, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; {\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; foo;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; A {\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; bar;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So an object of type &lt;code&gt;B&lt;/code&gt; has two data members, &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Then if you were to write this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;B b;\n\nA a = b;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then the information in &lt;code&gt;b&lt;/code&gt; about member &lt;code&gt;bar&lt;/code&gt; is lost in &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Most answers here fail to explain what the actual problem with slicing is. They only explain the benign cases of slicing, not the treacherous ones. Assume, like the other answers, that you&apos;re dealing with two classes &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; derives (publicly) from &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In this situation, C++ lets you pass an instance of &lt;code&gt;B&lt;/code&gt; to  &lt;code&gt;A&lt;/code&gt;&apos;s assignment operator (and also to the copy constructor). This works because an instance of &lt;code&gt;B&lt;/code&gt; can be converted to a &lt;code&gt;const A&amp;amp;&lt;/code&gt;, which is what assignment operators and copy-constructors expect their arguments to be.&lt;/p&gt;\n\n&lt;h3&gt;The benign case&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;B b;\nA a = b;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Nothing bad happens there - you asked for an instance of &lt;code&gt;A&lt;/code&gt; which is a copy of &lt;code&gt;B&lt;/code&gt;, and that&apos;s exactly what you get. Sure, &lt;code&gt;a&lt;/code&gt; won&apos;t contain some of &lt;code&gt;b&lt;/code&gt;&apos;s members, but how should it? It&apos;s an &lt;code&gt;A&lt;/code&gt;, after all, not a &lt;code&gt;B&lt;/code&gt;, so it hasn&apos;t even &lt;em&gt;heard&lt;/em&gt; about these members, let alone would be able to store them.&lt;/p&gt;\n\n&lt;h3&gt;The treacherous case&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;B b1;\nB b2;\nA&amp;amp; a_ref = b2;\na_ref = b1;\n&lt;span class=&quot;hljs-comment&quot;&gt;//b2 now contains a mixture of b1 and b2!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You might think that &lt;code&gt;b2&lt;/code&gt; will be a copy of &lt;code&gt;b1&lt;/code&gt; afterward. But, alas, it&apos;s &lt;strong&gt;not&lt;/strong&gt;! If you inspect it, you&apos;ll discover that &lt;code&gt;b2&lt;/code&gt; is a Frankensteinian creature, made from some chunks of &lt;code&gt;b1&lt;/code&gt; (the chunks that &lt;code&gt;B&lt;/code&gt; inherits from &lt;code&gt;A&lt;/code&gt;), and some chunks of &lt;code&gt;b2&lt;/code&gt; (the chunks that only &lt;code&gt;B&lt;/code&gt; contains). Ouch!&lt;/p&gt;\n\n&lt;p&gt;What happened? Well, C++ by default doesn&apos;t treat assignment operators as &lt;code&gt;virtual&lt;/code&gt;. Thus, the line &lt;code&gt;a_ref = b1&lt;/code&gt; will call the assignment operator of &lt;code&gt;A&lt;/code&gt;, not that of &lt;code&gt;B&lt;/code&gt;. This is because, for non-virtual functions, the &lt;strong&gt;declared&lt;/strong&gt; (formally: &lt;em&gt;static&lt;/em&gt;) type (which is &lt;code&gt;A&amp;amp;&lt;/code&gt;) determines which function is called, as opposed to the &lt;strong&gt;actual&lt;/strong&gt; (formally: &lt;em&gt;dynamic&lt;/em&gt;) type (which would be &lt;code&gt;B&lt;/code&gt;, since &lt;code&gt;a_ref&lt;/code&gt; references an instance of &lt;code&gt;B&lt;/code&gt;). Now, &lt;code&gt;A&lt;/code&gt;&apos;s assignment operator obviously knows only about the members declared in &lt;code&gt;A&lt;/code&gt;, so it will copy only those, leaving the members added in &lt;code&gt;B&lt;/code&gt; unchanged.&lt;/p&gt;\n\n&lt;h3&gt;A solution&lt;/h3&gt;\n\n&lt;p&gt;Assigning only to parts of an object usually makes little sense, yet C++, unfortunately, provides no built-in way to forbid this. You can, however, roll your own. The first step is making the assignment operator &lt;em&gt;virtual&lt;/em&gt;. This will guarantee that it&apos;s always the &lt;strong&gt;actual&lt;/strong&gt; type&apos;s assignment operator which is called, not the &lt;strong&gt;declared&lt;/strong&gt; type&apos;s. The second step is to use &lt;code&gt;dynamic_cast&lt;/code&gt; to verify that the assigned object has a compatible type. The third step is to do the actual assignment in a (protected!) member &lt;code&gt;assign()&lt;/code&gt;, since &lt;code&gt;B&lt;/code&gt;&apos;s &lt;code&gt;assign()&lt;/code&gt; will probably want to use &lt;code&gt;A&lt;/code&gt;&apos;s &lt;code&gt;assign()&lt;/code&gt; to copy &lt;code&gt;A&lt;/code&gt;&apos;s, members.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; A&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;= (&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; A&amp;amp; a) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;assign&lt;/span&gt;(a);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n  }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt;:\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; A&amp;amp; a)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// copy members of A from a to this&lt;/span&gt;\n  }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; A {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; B&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;= (&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; A&amp;amp; a) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; B* b = &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; B*&amp;gt;(&amp;amp;a))\n      &lt;span class=&quot;hljs-built_in&quot;&gt;assign&lt;/span&gt;(*b);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bad_assignment&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n  }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt;:\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; B&amp;amp; b)&lt;/span&gt; &lt;/span&gt;{\n    A::&lt;span class=&quot;hljs-built_in&quot;&gt;assign&lt;/span&gt;(b); &lt;span class=&quot;hljs-comment&quot;&gt;// Let A&apos;s assign() copy members of A from b to this&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// copy members of B from b to this&lt;/span&gt;\n  }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that, for pure convenience, &lt;code&gt;B&lt;/code&gt;&apos;s &lt;code&gt;operator=&lt;/code&gt; covariantly overrides the return type, since it &lt;strong&gt;knows&lt;/strong&gt; that it&apos;s returning an instance of &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If You have a base class &lt;code&gt;A&lt;/code&gt; and a derived class &lt;code&gt;B&lt;/code&gt;, then You can do the following.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;wantAnA&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(A myA)&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-comment&quot;&gt;// work with myA&lt;/span&gt;\n}\n\nB derived;\n&lt;span class=&quot;hljs-comment&quot;&gt;// work with the object &quot;derived&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;wantAnA&lt;/span&gt;(derived);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now the method &lt;code&gt;wantAnA&lt;/code&gt; needs a copy of &lt;code&gt;derived&lt;/code&gt;. However, the object &lt;code&gt;derived&lt;/code&gt; cannot be copied completely, as the class &lt;code&gt;B&lt;/code&gt; could invent additional member variables which are not in its base class &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Therefore, to call &lt;code&gt;wantAnA&lt;/code&gt;, the compiler will &quot;slice off&quot; all additional members of the derived class. The result might be an object you did not want to create, because&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;it may be incomplete,&lt;/li&gt;\n&lt;li&gt;it behaves like an &lt;code&gt;A&lt;/code&gt;-object (all special behaviour of the class &lt;code&gt;B&lt;/code&gt; is lost).&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;These are all good answers. I would just like to add an execution example when passing objects by value vs by reference:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Base class&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;() {}\n    &lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; A&amp;amp; a) {\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;A&apos; copy constructor&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{ cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;I am an &apos;A&apos;&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl; }\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Derived class&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; A {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;():&lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;() {}\n    &lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; B&amp;amp; a):&lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;(a) {\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;B&apos; copy constructor&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{ cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;I am a &apos;B&apos;&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl; }\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; A &amp;amp; a)&lt;/span&gt; &lt;/span&gt;{\n    a.&lt;span class=&quot;hljs-built_in&quot;&gt;run&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; A a)&lt;/span&gt; &lt;/span&gt;{\n    a.&lt;span class=&quot;hljs-built_in&quot;&gt;run&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Call by reference&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;());\n    cout &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Call by copy&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Call by reference\nI am a &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;\n\nCall by copy\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt; copy constructor\nI am an &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Third match in google for &quot;C++ slicing&quot; gives me this Wikipedia article &lt;a href=&quot;http://en.wikipedia.org/wiki/Object_slicing&quot; rel=&quot;noreferrer&quot;&gt;http://en.wikipedia.org/wiki/Object_slicing&lt;/a&gt; and this (heated, but the first few posts define the problem) : &lt;a href=&quot;http://bytes.com/forum/thread163565.html&quot; rel=&quot;noreferrer&quot;&gt;http://bytes.com/forum/thread163565.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;So it&apos;s when you assign an object of a subclass to the super class. The superclass knows nothing of the additional information in the subclass, and hasn&apos;t got room to store it, so the additional information gets &quot;sliced off&quot;.&lt;/p&gt;\n\n&lt;p&gt;If those links don&apos;t give enough info for a &quot;good answer&quot; please edit your question to let us know what more you&apos;re looking for.&lt;/p&gt;\n    ","\n&lt;p&gt;The slicing problem is serious because it can result in memory corruption, and it is very difficult to guarantee a program does not suffer from it. To design it out of the language, classes that support inheritance should be accessible by reference only (not by value). The D programming language has this property.&lt;/p&gt;\n\n&lt;p&gt;Consider class A, and class B derived from A. Memory corruption can happen if the A part has a pointer p, and a B instance that points p to B&apos;s additional data. Then, when the additional data gets sliced off, p is pointing to garbage.&lt;/p&gt;\n    ","\n&lt;p&gt;In C++, a derived class object can be assigned to a base class object, but the other way is not possible.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Base&lt;/span&gt; { &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x, y; };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Derived&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Base { &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; z, w; };\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; \n&lt;/span&gt;{\n    Derived d;\n    Base b = d; &lt;span class=&quot;hljs-comment&quot;&gt;// Object Slicing,  z and w of d are sliced off&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Object slicing happens when a derived class object is assigned to a base class object, additional attributes of a derived class object are sliced off to form the base class object.&lt;/p&gt;\n    ","\n&lt;p&gt;I see all the answers mention when object slicing happens when data members are sliced. Here I give an example that the methods are not overridden:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Say&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{\n        std::cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am A&quot;&lt;/span&gt;&amp;lt;&amp;lt;std::endl;\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; A{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Say&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt;&lt;/span&gt;{\n        std::cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am B&quot;&lt;/span&gt;&amp;lt;&amp;lt;std::endl;\n    }\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{\n   B b;\n   A a1;\n   A a2=b;\n\n   b.&lt;span class=&quot;hljs-built_in&quot;&gt;Say&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// I am B&lt;/span&gt;\n   a1.&lt;span class=&quot;hljs-built_in&quot;&gt;Say&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// I am A&lt;/span&gt;\n   a2.&lt;span class=&quot;hljs-built_in&quot;&gt;Say&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// I am A   why???&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;B (object b) is derived from A (object a1 and a2). b and a1, as we expect, call their member function. But from polymorphism viewpoint we dont expect a2, which is assigned by b, to not be overridden. Basically, a2 only saves A-class part of b and that is object slicing in C++.&lt;/p&gt;\n&lt;p&gt;To solve this problem, a reference or pointer should be used&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt; A&amp;amp; a2=b;\n a2.&lt;span class=&quot;hljs-built_in&quot;&gt;Say&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// I am B&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;A* a2 = &amp;amp;b;\na2-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Say&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// I am B&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;So ... Why is losing the derived information bad? ... because the author of the derived class may have changed the representation such that slicing off the extra information changes the value being represented by the object.  This can happen if the derived class if used to cache a representation that is more efficient for certain operations, but expensive to transform back to the base representation.&lt;/p&gt;\n\n&lt;p&gt;Also thought someone should also mention what you should do to avoid slicing...\nGet a copy of C++ Coding Standards, 101 rules guidlines, and best practices.  Dealing with slicing is #54.&lt;/p&gt;\n\n&lt;p&gt;It suggests a somewhat sophisticated pattern to fully deal with the issue:  have a protected copy constructor, a protected pure virtual DoClone, and a public Clone with an assert which will tell you if a (further) derived class failed to implement DoClone correctly.  (The Clone method makes a proper deep copy of the polymorphic object.)&lt;/p&gt;\n\n&lt;p&gt;You can also mark the copy constructor on the base explicit which allows for explicit slicing if it is desired.&lt;/p&gt;\n    ","\n&lt;p&gt;The slicing problem in C++ arises from the value semantics of its objects, which remained mostly due to compatibility with C structs. You need to use explicit reference or pointer syntax to achieve &quot;normal&quot; object behavior found in most other languages that do objects, i.e., objects are always passed around by reference.&lt;/p&gt;\n\n&lt;p&gt;The short answers is that you slice the object by assigning a derived object to a base object &lt;em&gt;by value&lt;/em&gt;, i.e. the remaining object is only a part of the derived object. In order to preserve value semantics, slicing is a reasonable behavior and has its relatively rare uses, which doesn&apos;t exist in most other languages. Some people consider it a feature of C++, while many considered it one of the quirks/misfeatures of C++.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;1. THE DEFINITION OF SLICING PROBLEM&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If D is a derived class of the base class B, then you can assign an object of type Derived to a variable (or parameter) of type Base. &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;EXAMPLE&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Pet&lt;/span&gt;\n{\n &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    string name;\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Pet\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    string breed;\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{   \n    Dog dog;\n    Pet pet;\n\n    dog.name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Tommy&quot;&lt;/span&gt;;\n    dog.breed = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kangal Dog&quot;&lt;/span&gt;;\n    pet = dog;\n    cout &amp;lt;&amp;lt; pet.breed; &lt;span class=&quot;hljs-comment&quot;&gt;//ERROR&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although the above assignment is allowed, the value that is assigned to the variable pet loses its breed field. This is called the &lt;strong&gt;slicing problem&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;2. HOW TO FIX THE SLICING PROBLEM&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To defeat the problem, we use pointers to dynamic variables.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;EXAMPLE&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Pet *ptrP;\nDog *ptrD;\nptrD = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Dog;         \nptrD-&amp;gt;name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Tommy&quot;&lt;/span&gt;;\nptrD-&amp;gt;breed = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Kangal Dog&quot;&lt;/span&gt;;\nptrP = ptrD;\ncout &amp;lt;&amp;lt; ((Dog *)ptrP)-&amp;gt;breed; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case, none of the data members or member functions of the dynamic variable\nbeing pointed to by ptrD (descendant class object) will be lost. In addition,  if you need to use functions, the function must be a virtual function.&lt;/p&gt;\n    ","\n&lt;p&gt;It seems to me, that slicing isn&apos;t so much a problem other than when your own classes and program are poorly architected/designed.&lt;/p&gt;\n\n&lt;p&gt;If I pass a subclass object in as a parameter to a method, which takes a parameter of type superclass, I should certainly be aware of that and know the internally, the called method will be working with the superclass (aka baseclass) object only.&lt;/p&gt;\n\n&lt;p&gt;It seems to me only the unreasonable expectation that providing a subclass where a baseclass is requested, would somehow result in subclass specific results, would cause slicing to be a problem.  Its either poor design in the use of the method or a poor subclass implementation.  I&apos;m guessing its usually the result of sacrificing good OOP design in favor of expediency or performance gains.&lt;/p&gt;\n    ","\n&lt;p&gt;OK, I&apos;ll give it a try after reading many posts explaining object slicing but not how it becomes problematic. &lt;/p&gt;\n\n&lt;p&gt;The vicious scenario that can result in memory corruption is the following:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Class provides (accidentally, possibly compiler-generated) assignment on a polymorphic base class.&lt;/li&gt;\n&lt;li&gt;Client copies and slices an instance of a derived class.&lt;/li&gt;\n&lt;li&gt;Client calls a virtual member function that accesses the sliced-off state.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Slicing means that the data added by a subclass are discarded when an object of the subclass is passed or returned by value or from a function expecting a base class object.    &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;\nConsider the following class declaration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;           &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;baseclass&lt;/span&gt;\n          {\n                 ...\n                 baseclass &amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt; =(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; baseclass&amp;amp;);\n                 &lt;span class=&quot;hljs-built_in&quot;&gt;baseclass&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; baseclass&amp;amp;);\n          }\n          &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( )&lt;/span&gt;\n          &lt;/span&gt;{\n                baseclass obj1=m;\n                obj1=m;\n          }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As baseclass copy functions don&apos;t know anything about the derived only the base part of the derived is copied. This is commonly referred to as slicing. &lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; \n{ \n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x; \n};  \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt; \n{ \n    &lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;( ) : &lt;span class=&quot;hljs-built_in&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;) { } \n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x; \n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c; \n};  \n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( )&lt;/span&gt; \n&lt;/span&gt;{ \n    A a; \n    B b; \n    a = b;     &lt;span class=&quot;hljs-comment&quot;&gt;// b.c == &apos;a&apos; is &quot;sliced&quot; off&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;when a derived class object is assigned to a base class object, additional attributes of a derived class object are sliced off (discard)  form the base class object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Base&lt;/span&gt; { \n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x;\n };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Derived&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Base { \n &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; z; \n };\n\n &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; \n&lt;/span&gt;{\nDerived d;\nBase b = d; &lt;span class=&quot;hljs-comment&quot;&gt;// Object Slicing,  z of d is sliced off&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When a Derived class Object is assigned to Base class Object, all the members of derived class object is copied to base class object except the members which are not present in the base class. These members are Sliced away by the compiler.\nThis is called Object Slicing.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Here is an Example:&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Base&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;Base&lt;/span&gt;()\n        {\n            a=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n            b=&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n            c=&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;;\n        }\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Derived&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Base\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; d;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; e;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;Derived&lt;/span&gt;()\n        {\n            d=&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;;\n            e=&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;;\n        }\n};\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    Derived d;\n    cout&amp;lt;&amp;lt;d.a&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    cout&amp;lt;&amp;lt;d.b&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    cout&amp;lt;&amp;lt;d.c&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    cout&amp;lt;&amp;lt;d.d&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    cout&amp;lt;&amp;lt;d.e&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n\n\n    Base b = d;\n    cout&amp;lt;&amp;lt;b.a&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    cout&amp;lt;&amp;lt;b.b&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    cout&amp;lt;&amp;lt;b.c&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    cout&amp;lt;&amp;lt;b.d&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    cout&amp;lt;&amp;lt;b.e&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;It will generate:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;[Error] &lt;span class=&quot;hljs-string&quot;&gt;&apos;class Base&apos;&lt;/span&gt; has no member named &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;\n[Error] &lt;span class=&quot;hljs-string&quot;&gt;&apos;class Base&apos;&lt;/span&gt; has no member named &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I just ran across the slicing problem and promptly landed here. So let me add my two cents to this.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s have an example from &quot;production code&quot; (or something that comes kind of close):&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Let&apos;s say we have something that dispatches actions. A control center UI for example.&lt;br&gt;\nThis UI needs to get a list of things that are currently able to be dispatched. So we define a class that contains the dispatch-information. Let&apos;s call it &lt;code&gt;Action&lt;/code&gt;. So an &lt;code&gt;Action&lt;/code&gt; has some member variables. For simplicity we just have 2, being a &lt;code&gt;std::string name&lt;/code&gt; and a &lt;code&gt;std::function&amp;lt;void()&amp;gt; f&lt;/code&gt;. Then it has an &lt;code&gt;void activate()&lt;/code&gt; which just executes the &lt;code&gt;f&lt;/code&gt; member.&lt;/p&gt;\n\n&lt;p&gt;So the UI gets a &lt;code&gt;std::vector&amp;lt;Action&amp;gt;&lt;/code&gt; supplied. Imagine some functions like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Action toAdd)&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Now we have established how it looks from the UI&apos;s perspective. No problem so far. But some other guy who works on this project suddenly decides that there are specialized actions that need more information in the &lt;code&gt;Action&lt;/code&gt; object. For what reason ever. That could also be solved with lambda captures.  This example is not taken 1-1 from the code.&lt;/p&gt;\n\n&lt;p&gt;So the guy derives from &lt;code&gt;Action&lt;/code&gt; to add his own flavour.&lt;br&gt;\nHe passes an instance of his home-brewed class to the &lt;code&gt;push_back&lt;/code&gt; but then the program goes haywire.&lt;/p&gt;\n\n&lt;p&gt;So what happened?&lt;br&gt;\nAs you &lt;em&gt;might&lt;/em&gt; have guessed: the object has been sliced.&lt;/p&gt;\n\n&lt;p&gt;The extra information from the instance has been lost, and &lt;code&gt;f&lt;/code&gt; is now prone to undefined behaviour.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I hope this example brings light about for those people who can&apos;t really imagine things when talking about &lt;code&gt;A&lt;/code&gt;s and &lt;code&gt;B&lt;/code&gt;s being derived in some manner.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Very informative, but see &lt;a href=&quot;http://stackoverflow.com/questions/274626#274636&quot;&gt;stackoverflow.com/questions/274626#274636&lt;/a&gt; for an example of how slicing occurs during method calls (which underscores the danger a little better than the plain assignment example).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1199/blair-conrad&quot; title=&quot;220,812 reputation&quot; class=&quot;comment-user&quot;&gt;Blair Conrad&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127698_274634&quot;&gt;&lt;span title=&quot;2008-11-08 13:53:18Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 8, 2008 at 13:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Interesting.  I&apos;ve been programming in C++ for 15 years and this issue never occurred to me, as I&apos;ve always passed objects by reference as a matter of efficiency and personal style.  Goes to show how good habits can help you.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/389146/karl-bielefeldt&quot; title=&quot;45,230 reputation&quot; class=&quot;comment-user&quot;&gt;Karl Bielefeldt&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment5414719_274634&quot;&gt;&lt;span title=&quot;2011-02-02 03:48:44Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 2, 2011 at 3:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Felix Thanks but I don&apos;t think casting back (since not a pointer arithmetic) will work , &lt;code&gt;A a = b;&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; is now object of type &lt;code&gt;A&lt;/code&gt; which has copy of &lt;code&gt;B::foo&lt;/code&gt;. It will be mistake to cast it back now i think.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user72424&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8412787_274634&quot;&gt;&lt;span title=&quot;2011-08-12 12:27:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 12, 2011 at 12:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This isn&apos;t &quot;slicing&quot;, or at least a benign variant of it. The real problem occurs if you do &lt;code&gt;B b1; B b2; A&amp;amp; b2_ref = b2; b2 = b1&lt;/code&gt;. You might think you have copied &lt;code&gt;b1&lt;/code&gt; to &lt;code&gt;b2&lt;/code&gt;, but you haven&apos;t! You have copied a &lt;i&gt;part&lt;/i&gt; of &lt;code&gt;b1&lt;/code&gt; to &lt;code&gt;b2&lt;/code&gt; (the part of &lt;code&gt;b1&lt;/code&gt; that &lt;code&gt;B&lt;/code&gt; inherited from &lt;code&gt;A&lt;/code&gt;), and left the other parts of &lt;code&gt;b2&lt;/code&gt; unchanged. &lt;code&gt;b2&lt;/code&gt; is now a frankensteinian creature consisting of a few bits of &lt;code&gt;b1&lt;/code&gt; followed by some chunks of &lt;code&gt;b2&lt;/code&gt;. Ugh! Downvoting because I think the answer is very missleading.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1582403/fgp&quot; title=&quot;7,708 reputation&quot; class=&quot;comment-user&quot;&gt;fgp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment20140437_274634&quot;&gt;&lt;span title=&quot;2013-01-22 14:07:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 22, 2013 at 14:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@fgp Your comment should read &lt;code&gt;B b1; B b2; A&amp;amp; b2_ref = b2; b2_ref = b1&lt;/code&gt; &quot;&lt;i&gt;The real problem occurs if you&lt;/i&gt;&quot; ... derive from a class with a non-virtual assignment operator. Is &lt;code&gt;A&lt;/code&gt; even intended for derivation? It has no virtual functions. If you derive from a type, you have to deal with the fact that its member functions can be called!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/963864/curiousguy&quot; title=&quot;7,758 reputation&quot; class=&quot;comment-user&quot;&gt;curiousguy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25231091_274634&quot;&gt;&lt;span title=&quot;2013-06-29 14:54:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 29, 2013 at 14:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;IMHO, the problem is that there are two different kinds of substitutability that may be implied by inheritance: either any &lt;code&gt;derived&lt;/code&gt; value may be given to code expecting a &lt;code&gt;base&lt;/code&gt; value, or any derived reference may be used as a base reference.  I would like to see a language with a type system which addresses both concepts separately.  There are many cases where a derived reference should be substitutable for a base reference, but derived instances should not be substitutable for base ones; there are also many cases where instances should be convertible but references should not substitute.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/363751/supercat&quot; title=&quot;73,697 reputation&quot; class=&quot;comment-user&quot;&gt;supercat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment26658068_14461532&quot;&gt;&lt;span title=&quot;2013-08-12 16:11:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 12, 2013 at 16:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I don&apos;t understand what is so bad in your &quot;treacherous&quot; case. You stated that you want to: 1) get a reference to an object of class A and 2) cast the object b1 to class A and copy its stuff to a reference of the class A. What is actually wrong here is the proper logic behind the given code. In other words, you took a small image frame (A), placed it over a bigger image (B) and you painted through that frame, complaining later that your bigger image now looks ugly :) But if we just consider that framed area, it looks pretty good, just as the painter wanted, right? :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2428861/mladen-b&quot; title=&quot;2,598 reputation&quot; class=&quot;comment-user&quot;&gt;Mladen B.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29740595_14461532&quot;&gt;&lt;span title=&quot;2013-11-14 13:05:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 14, 2013 at 13:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The problem is, differently put, that C++ by default assumes a very strong kind of &lt;i&gt;substitutability&lt;/i&gt; - it requires the base class&apos;es operations to workly correctly on subclass instances. And that even for operations which the compiler autogenerated like assignment. So it&apos;s not enough to not screw up your own operations in this regard, you also have to explicitly disable the wrong ones generated by the compiler. Or of course, stay away from public inheritance, which usually is a good suggestion anway ;-)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1582403/fgp&quot; title=&quot;7,708 reputation&quot; class=&quot;comment-user&quot;&gt;fgp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29812895_14461532&quot;&gt;&lt;span title=&quot;2013-11-16 16:31:03Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 16, 2013 at 16:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Another common approach is to simply disable the copy and assignment operator. For classes within inheritance hierarchy, usually there is no reason to use value instead of reference or pointer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/832878/siyuan-ren&quot; title=&quot;7,181 reputation&quot; class=&quot;comment-user&quot;&gt;Siyuan Ren&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39700380_14461532&quot;&gt;&lt;span title=&quot;2014-08-22 10:48:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 22, 2014 at 10:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What the? I had no idea operators could be marked virtual&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1124744/paulm&quot; title=&quot;5,428 reputation&quot; class=&quot;comment-user&quot;&gt;paulm&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment45898479_14461532&quot;&gt;&lt;span title=&quot;2015-03-02 15:23:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 2, 2015 at 15:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;C++ is &lt;b&gt;not&lt;/b&gt; Java! If &lt;code&gt;wantAnA&lt;/code&gt; (as its name implies!) wants an &lt;code&gt;A&lt;/code&gt;, then that&apos;s what it gets. And an instance of &lt;code&gt;A&lt;/code&gt;, will, uh, behave like an &lt;code&gt;A&lt;/code&gt;. How is that surprising?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1582403/fgp&quot; title=&quot;7,708 reputation&quot; class=&quot;comment-user&quot;&gt;fgp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment20145814_274636&quot;&gt;&lt;span title=&quot;2013-01-22 16:39:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 22, 2013 at 16:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@fgp: It&apos;s surprising, because you &lt;b&gt;don&apos;t pass an A&lt;/b&gt; to the function.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/25234/black&quot; title=&quot;4,860 reputation&quot; class=&quot;comment-user&quot;&gt;Black&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment21389243_274636&quot;&gt;&lt;span title=&quot;2013-03-03 07:03:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 3, 2013 at 7:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@fgp: The behaviour is similar. However, to the average C++ programmer it might be less obvious. As far as I understood the question, nobody is &quot;complaining&quot;. It&apos;s just about how the compiler handles the situation. Imho, it is better to avoid slicing at all by passing (const) references.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/25234/black&quot; title=&quot;4,860 reputation&quot; class=&quot;comment-user&quot;&gt;Black&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment22577037_274636&quot;&gt;&lt;span title=&quot;2013-04-07 12:13:33Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 7, 2013 at 12:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ThomasW No, I would not throw out inheritance, but use references. If the signature of wantAnA would be &lt;b&gt;void wantAnA(const A &amp;amp; myA)&lt;/b&gt;, then there had been not slicing. Instead, a read-only reference to the caller&apos;s object is passed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/25234/black&quot; title=&quot;4,860 reputation&quot; class=&quot;comment-user&quot;&gt;Black&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment24188927_274636&quot;&gt;&lt;span title=&quot;2013-05-28 07:44:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 28, 2013 at 7:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;the problem is mostly on the automatic casting that the compiler performs from &lt;code&gt;derived&lt;/code&gt; to the type &lt;code&gt;A&lt;/code&gt;. Implicit casting is always a source of unexpected behavior in C++, because it is often hard to understand from looking at the code locally that a cast took place.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/686184/pqnet&quot; title=&quot;5,347 reputation&quot; class=&quot;comment-user&quot;&gt;pqnet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39192298_274636&quot;&gt;&lt;span title=&quot;2014-08-06 23:15:24Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 6, 2014 at 23:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Hello. Great answer but I have one question. If I do something like this **\tdev d; base* b = &amp;amp;d;** The slicing also takes place?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5605546/adrian&quot; title=&quot;794 reputation&quot; class=&quot;comment-user&quot;&gt;Adrian&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment89496282_25453490&quot;&gt;&lt;span title=&quot;2018-07-10 06:58:48Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 10, 2018 at 6:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Adrian If you introduce some new member functions or member variables in the derived class then those are not accessible from the base class pointer directly. However you can still access them from inside the overloaded base class virtual functions. See  this: &lt;a href=&quot;https://godbolt.org/z/LABx33&quot; rel=&quot;nofollow noreferrer&quot;&gt;godbolt.org/z/LABx33&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5701173/vishal-sharma&quot; title=&quot;1,530 reputation&quot; class=&quot;comment-user&quot;&gt;Vishal Sharma&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105135400_25453490&quot;&gt;&lt;span title=&quot;2019-12-25 14:20:41Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 25, 2019 at 14:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Please explain how the memory corruption can occur.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/27596/foraidt&quot; title=&quot;5,439 reputation&quot; class=&quot;comment-user&quot;&gt;foraidt&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127655_274654&quot;&gt;&lt;span title=&quot;2008-11-08 12:48:51Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 8, 2008 at 12:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I forgot that the copy ctor will reset the vptr, my mistake. But you can still get corruption if A has a pointer, and B sets that to point into B&apos;s section that gets sliced off.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/33949/walter-bright&quot; title=&quot;4,191 reputation&quot; class=&quot;comment-user&quot;&gt;Walter Bright&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment131226_274654&quot;&gt;&lt;span title=&quot;2008-11-11 02:21:25Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 11, 2008 at 2:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This problem isn&apos;t just limited to slicing. Any classes that contain pointers are going to have dubious behaviour with a default assignment operator and copy-constructor.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2283/weeble&quot; title=&quot;16,043 reputation&quot; class=&quot;comment-user&quot;&gt;Weeble&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment348944_274654&quot;&gt;&lt;span title=&quot;2009-02-11 11:54:47Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 11, 2009 at 11:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Weeble - Which is why you override the default destructor, assignment operator and copy-constructor in these cases.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/81398/bjarke-freund-hansen&quot; title=&quot;26,352 reputation&quot; class=&quot;comment-user&quot;&gt;Bjarke Freund-Hansen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1000931_274654&quot;&gt;&lt;span title=&quot;2009-07-24 19:55:59Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 24, 2009 at 19:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Weeble: What makes object slicing worse than general pointer fixups is that to be certain you have prevented slicing from happening, a base class must provide converting constructors &lt;i&gt;for every derived class&lt;/i&gt;.  (Why?  Any derived classes that are missed are susceptible to being picked up by the base class&apos;s copy ctor, since &lt;code&gt;Derived&lt;/code&gt; is implicitly convertible to &lt;code&gt;Base&lt;/code&gt;.)  This is obviously counter to the Open-Closed Principle, and a big maintenance burden.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/47984/j-random-hacker&quot; title=&quot;49,399 reputation&quot; class=&quot;comment-user&quot;&gt;j_random_hacker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17719248_274654&quot;&gt;&lt;span title=&quot;2012-10-24 12:30:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 24, 2012 at 12:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;&lt;i&gt;You can also mark the copy constructor on the base explicit&lt;/i&gt;&quot; which does &lt;b&gt;not&lt;/b&gt; help at all.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/963864/curiousguy&quot; title=&quot;7,758 reputation&quot; class=&quot;comment-user&quot;&gt;curiousguy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment15699737_274977&quot;&gt;&lt;span title=&quot;2012-08-04 22:25:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 4, 2012 at 22:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;&lt;i&gt;&quot;normal&quot; object behavior&lt;/i&gt;&quot; that&apos;s not &quot;normal object behaviour&quot;, that&apos;s &lt;b&gt;reference semantic&lt;/b&gt;. And it relates &lt;b&gt;in no way&lt;/b&gt; with C &lt;code&gt;struct&lt;/code&gt;, compatibility, or other non-sense the any random OOP priest told you.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/963864/curiousguy&quot; title=&quot;7,758 reputation&quot; class=&quot;comment-user&quot;&gt;curiousguy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10203112_275428&quot;&gt;&lt;span title=&quot;2011-11-27 11:27:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 27, 2011 at 11:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@curiousguy Amen, brother. It&apos;s sad to see how often C++ get bashed from not being Java, when value semantics is one of the things that makes C++ so insanely powerfull.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1582403/fgp&quot; title=&quot;7,708 reputation&quot; class=&quot;comment-user&quot;&gt;fgp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment20145903_275428&quot;&gt;&lt;span title=&quot;2013-01-22 16:42:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 22, 2013 at 16:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This  is not a feature, not a quirk/misfeature. It is normal on-stack-copying behavior, since calling a function with an arg or (same) allocating stack variable of type &lt;code&gt;Base&lt;/code&gt; must take exactly &lt;code&gt;sizeof(Base)&lt;/code&gt; bytes in memory, with possible alignment, maybe, that&apos;s why &quot;assignment&quot; (on-stack-copy) will not copy derived class members, their offsets are outside sizeof. To avoid &quot;losing data&quot;, just use pointer, like anyone else, since pointer memory is fixed in place and size, whereas stack is very volitile&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3367446/croll&quot; title=&quot;3,401 reputation&quot; class=&quot;comment-user&quot;&gt;Croll&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93568998_275428&quot;&gt;&lt;span title=&quot;2018-11-16 20:32:51Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 16, 2018 at 20:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 6 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Definitely a misfeature of C++. Assigning a derived object to a base object should be banned, while binding a derived object to a reference or a pointer of the base class should be OK.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6156470/john-z-li&quot; title=&quot;1,753 reputation&quot; class=&quot;comment-user&quot;&gt;John Z. Li&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98550780_275428&quot;&gt;&lt;span title=&quot;2019-05-02 09:11:27Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 2, 2019 at 9:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I understand the &quot;slicing&quot; part, but I don&apos;t understand &quot;problem&quot;. How is it a problem that some state of &lt;code&gt;dog&lt;/code&gt; that isn&apos;t part of class &lt;code&gt;Pet&lt;/code&gt; (the &lt;code&gt;breed&lt;/code&gt; data member) isn&apos;t copied in the variable &lt;code&gt;pet&lt;/code&gt;? The code is is only interested in the &lt;code&gt;Pet&lt;/code&gt; data members - apparently. Slicing is definitely a &quot;problem&quot; if it is unwanted, but I don&apos;t see that here.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/963864/curiousguy&quot; title=&quot;7,758 reputation&quot; class=&quot;comment-user&quot;&gt;curiousguy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment11786426_9047531&quot;&gt;&lt;span title=&quot;2012-02-18 04:18:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 18, 2012 at 4:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;&lt;code&gt;((Dog *)ptrP)&lt;/code&gt;&quot; I suggest using &lt;code&gt;static_cast&amp;lt;Dog*&amp;gt;(ptrP)&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/963864/curiousguy&quot; title=&quot;7,758 reputation&quot; class=&quot;comment-user&quot;&gt;curiousguy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment11786443_9047531&quot;&gt;&lt;span title=&quot;2012-02-18 04:20:21Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 18, 2012 at 4:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I suggest pointing out that you will make the string &apos;breed&apos; eventually leak memory without a virtual destructor (the destructor of &apos;string&apos; will not be called) when deleting through &apos;ptrP&apos;... Why is what you show problematic? The fix is mostly proper class design. The problem in this case is that writing down constructors to control visibility when inheriting is tedious and easily forgotten. You won&apos;t get anywhere near the danger zone with your code as there is no polymorphism involved or even mentioned (slicing will truncate your object but not make your program crash, here).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1634073/dude&quot; title=&quot;583 reputation&quot; class=&quot;comment-user&quot;&gt;Dude&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17548976_9047531&quot;&gt;&lt;span title=&quot;2012-10-18 02:58:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 18, 2012 at 2:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;-1 This completely fails to explain the actual problem. C++ has value semantics, &lt;b&gt;not&lt;/b&gt; reference semantics like Java, so this is all entirely to be expected. And the &quot;fix&quot; really is an example of truely &lt;i&gt;horrible&lt;/i&gt; C++ code. &quot;Fixing&quot; non-existing problems like this type of slicing by resorting to dynamic allocation is a recipe for buggy code, leaked memory and horrible performance. Note that there &lt;i&gt;are&lt;/i&gt; cases where slicing is bad, but this answer failes to point them out. Hint: the trouble starts if you assign through &lt;i&gt;references&lt;/i&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1582403/fgp&quot; title=&quot;7,708 reputation&quot; class=&quot;comment-user&quot;&gt;fgp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment20145662_9047531&quot;&gt;&lt;span title=&quot;2013-01-22 16:35:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 22, 2013 at 16:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Have to give a -1, This is a compile-time error, not a run-time error, Pet::breed does not exist.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2574612/nicholas-pipitone&quot; title=&quot;3,834 reputation&quot; class=&quot;comment-user&quot;&gt;Nicholas Pipitone&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113045981_9047531&quot;&gt;&lt;span title=&quot;2020-09-16 22:20:18Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 16, 2020 at 22:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;But remember, Minok, that you&apos;re NOT passing in a reference of that object. You&apos;re passing a NEW copy of that object, but using the base class to copy it in the process.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/52273/arafangion&quot; title=&quot;11,054 reputation&quot; class=&quot;comment-user&quot;&gt;Arafangion&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment4935237_1179794&quot;&gt;&lt;span title=&quot;2010-12-22 11:06:31Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Dec 22, 2010 at 11:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;protected copy/assignment on the base class and this problem is solved.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1634073/dude&quot; title=&quot;583 reputation&quot; class=&quot;comment-user&quot;&gt;Dude&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17548901_1179794&quot;&gt;&lt;span title=&quot;2012-10-18 02:51:41Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 18, 2012 at 2:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You&apos;re right. Good practice is to use abstract base classes or to restrict the access to copy/assignment. However, it&apos;s not so easy to spot once it&apos;s there and easy to forget to take care of. Calling virtual methods with sliced *this can make mysterious things happen if you get away without an access violation.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1634073/dude&quot; title=&quot;583 reputation&quot; class=&quot;comment-user&quot;&gt;Dude&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17549057_1179794&quot;&gt;&lt;span title=&quot;2012-10-18 03:06:38Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 18, 2012 at 3:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I recall from my C++ programming courses in university that there were standing best practices that for every class we created, we were required to write default constructors, copy constructors and assignment operators, as well as a destructor.  This way you made sure that copy construction and the like happened the way you needed it to, while writing the class... rather than later on some odd behavior showing up.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/144719/minok&quot; title=&quot;522 reputation&quot; class=&quot;comment-user&quot;&gt;Minok&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment38797258_1179794&quot;&gt;&lt;span title=&quot;2014-07-25 17:24:54Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 25, 2014 at 17:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Would you mind giving some extra details? How does your answer differ from the already posted ones?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1065525/alexis-pigeon&quot; title=&quot;7,243 reputation&quot; class=&quot;comment-user&quot;&gt;Alexis Pigeon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18687530_13625934&quot;&gt;&lt;span title=&quot;2012-11-29 12:55:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 29, 2012 at 12:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I guess that more explanation wouldn&apos;t be bad.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1582846/looper&quot; title=&quot;1,861 reputation&quot; class=&quot;comment-user&quot;&gt;looper&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18687543_13625934&quot;&gt;&lt;span title=&quot;2012-11-29 12:55:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 29, 2012 at 12:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Downvoted because that&apos;s not a good example. It wouldn&apos;t work either if instead of copying d to b, you would use a pointer in which case d and e would still exist but Base doesn&apos;t have those members. Your example only shows that you can&apos;t access members that the class doesn&apos;t have.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3314225/stefan-fabian&quot; title=&quot;468 reputation&quot; class=&quot;comment-user&quot;&gt;Stefan Fabian&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment97553997_45184425&quot;&gt;&lt;span title=&quot;2019-03-29 12:33:50Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 29, 2019 at 12:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;a href=&quot;https://stackoverflow.com/q/31816095&quot;&gt;Why should I not #include &amp;lt;bits/stdc++.h&amp;gt;?&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/q/1452721&quot;&gt;Why is using namespace std; considered bad practice?&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/995714/phuclv&quot; title=&quot;32,962 reputation&quot; class=&quot;comment-user&quot;&gt;phuclv&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118689466_45184425&quot;&gt;&lt;span title=&quot;2021-04-18 11:06:55Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 18, 2021 at 11:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":78,"title":"What is object slicing?","content":"\n                \n&lt;p&gt;In c++ what is object slicing and when does it occur?&lt;/p&gt;\n    ","slug":"what-is-object-slicing-1657384506425","postType":"QUESTION","createdAt":"2022-07-09T16:35:06.000Z","updatedAt":"2022-07-09T16:35:06.000Z","tags":[{"id":285,"name":"inheritance","slug":"inheritance","createdAt":"2022-07-09T16:35:06.000Z","updatedAt":"2022-07-09T16:35:06.000Z","Questions_Tags":{"questionId":78,"tagId":285}}]}]}},"__N_SSG":true}