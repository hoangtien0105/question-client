{"pageProps":{"data":{"count":1,"rows":[{"id":82,"title":"The useState set method is not reflecting a change immediately","slug":"the-usestate-set-method-is-not-reflecting-a-change-immediately-1657384524775","postType":"QUESTION","createdAt":"2022-07-09T16:35:24.000Z","updatedAt":"2022-07-09T16:35:24.000Z","tags":[{"id":303,"name":"reactjs","slug":"reactjs","createdAt":"2022-07-09T16:35:24.000Z","updatedAt":"2022-07-09T16:35:24.000Z","Questions_Tags":{"questionId":82,"tagId":303}}]}]},"slug":"reactjs","page":1,"answers":{"82":["\n&lt;p&gt;Much &lt;a href=&quot;https://stackoverflow.com/q/30782948/1048572&quot;&gt;like &lt;code&gt;.setState()&lt;/code&gt; in class components&lt;/a&gt; created by extending &lt;code&gt;React.Component&lt;/code&gt; or &lt;code&gt;React.PureComponent&lt;/code&gt;, the state update using the updater provided by &lt;code&gt;useState&lt;/code&gt; hook is also asynchronous, and will not be reflected immediately.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Also, the main issue here is not just the asynchronous nature but the fact that state values are used by functions based on their current closures, and state updates will reflect in the next re-render by which the existing closures are not affected, but new ones are created&lt;/strong&gt;. Now in the current state, the values within hooks are obtained by existing closures, and when a re-render happens, the closures are updated based on whether the function is recreated again or not.&lt;/p&gt;\n&lt;p&gt;Even if you add a &lt;code&gt;setTimeout&lt;/code&gt; the function, though the timeout will run after some time by which the re-render would have happened, the &lt;code&gt;setTimeout&lt;/code&gt; will still use the value from its previous closure and not the updated one.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;setMovies&lt;/span&gt;(result);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(movies) &lt;span class=&quot;hljs-comment&quot;&gt;// movies here will not be updated&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to perform an action on state update, you need to use the &lt;code&gt;useEffect&lt;/code&gt; hook, much like using &lt;code&gt;componentDidUpdate&lt;/code&gt; in class components since the setter returned by &lt;code&gt;useState&lt;/code&gt; doesn&apos;t have a callback pattern&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// action on update of movies&lt;/span&gt;\n}, [movies]);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As far as the syntax to update state is concerned, &lt;code&gt;setMovies(result)&lt;/code&gt; will replace the previous &lt;code&gt;movies&lt;/code&gt; value in the state with those available from the async request.&lt;/p&gt;\n&lt;p&gt;However, if you want to merge the response with the previously existing values, you must use the callback syntax of state updation along with the correct use of spread syntax like&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;setMovies&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;prevMovies&lt;/span&gt; =&amp;gt;&lt;/span&gt; ([...prevMovies, ...result]));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;sub&gt;&lt;em&gt;Additional details to the &lt;a href=&quot;https://stackoverflow.com/a/54069332/1176601&quot;&gt;previous answer&lt;/a&gt;:&lt;/em&gt;&lt;/sub&gt;&lt;/p&gt;\n&lt;p&gt;While React&apos;s &lt;code&gt;setState&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; asynchronous (both classes and hooks), and it&apos;s tempting to use that fact to explain the observed behavior, it is not the &lt;em&gt;&lt;strong&gt;reason why&lt;/strong&gt;&lt;/em&gt; it happens.&lt;/p&gt;\n&lt;p&gt;TLDR: The reason is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot; rel=&quot;noreferrer&quot;&gt;closure&lt;/a&gt; scope around an immutable &lt;code&gt;const&lt;/code&gt; value.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;em&gt;Solutions:&lt;/em&gt;&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;read the value in render function (not inside nested functions):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-title function_&quot;&gt;setMovies&lt;/span&gt;(result) }, [])\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(movies)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;add the variable into dependencies (and use the &lt;a href=&quot;https://reactjs.org/docs/hooks-rules.html#eslint-plugin&quot; rel=&quot;noreferrer&quot;&gt;react-hooks/exhaustive-deps&lt;/a&gt; eslint rule):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-title function_&quot;&gt;setMovies&lt;/span&gt;(result) }, [])\n  &lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(movies) }, [movies])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;use a temporary variable:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newMovies = result\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newMovies)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;setMovies&lt;/span&gt;(newMovies)\n  }, [])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;use a mutable reference (if we don&apos;t need a state and only want to remember the value - updating a ref doesn&apos;t trigger re-render):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; moviesRef = &lt;span class=&quot;hljs-title function_&quot;&gt;useRef&lt;/span&gt;(initialValue)\n  &lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    moviesRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt; = result\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(moviesRef.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;)\n  }, [])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;em&gt;Explanation why it happens:&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;If async was the only reason, it would be possible to &lt;code&gt;await setState()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;However, both &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt; are &lt;a href=&quot;https://reactjs.org/docs/react-component.html#state&quot; rel=&quot;noreferrer&quot;&gt;assumed to be unchanging during 1 render&lt;/a&gt;.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Treat &lt;code&gt;this.state&lt;/code&gt; as if it were immutable.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;With hooks, this assumption is enhanced by using &lt;strong&gt;constant values&lt;/strong&gt; with the &lt;code&gt;const&lt;/code&gt; keyword:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [state, setState] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;initial&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The value might be different between 2 renders, but remains a constant inside the render itself and inside any &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot; rel=&quot;noreferrer&quot;&gt;closures&lt;/a&gt; (functions that live longer even after render is finished, e.g. &lt;code&gt;useEffect&lt;/code&gt;, event handlers, inside any Promise or  setTimeout).&lt;/p&gt;\n&lt;p&gt;Consider following fake, but &lt;strong&gt;synchronous&lt;/strong&gt;, React-like implementation:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// sync implementation:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; internalState\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; renderAgain\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setState&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;updateFn&lt;/span&gt;) =&amp;gt; {\n  internalState = &lt;span class=&quot;hljs-title function_&quot;&gt;updateFn&lt;/span&gt;(internalState)\n  &lt;span class=&quot;hljs-title function_&quot;&gt;renderAgain&lt;/span&gt;()\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;defaultState&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!internalState) {\n    internalState = defaultState\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [internalState, setState]\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;render&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;component, node&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; {html, handleClick} = &lt;span class=&quot;hljs-title function_&quot;&gt;component&lt;/span&gt;()\n  node.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = html\n  renderAgain = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;render&lt;/span&gt;(component, node)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; handleClick\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// test:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyComponent&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [x, setX] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;in render:&apos;&lt;/span&gt;, x) &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;/span&gt;\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleClick&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;setX&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;current&lt;/span&gt; =&amp;gt;&lt;/span&gt; current + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;in handler/effect/Promise/setTimeout:&apos;&lt;/span&gt;, x) &lt;span class=&quot;hljs-comment&quot;&gt;//  NOT updated&lt;/span&gt;\n  }\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;html&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;button&amp;gt;&lt;span class=&quot;hljs-subst&quot;&gt;${x}&lt;/span&gt;&amp;lt;/button&amp;gt;`&lt;/span&gt;,\n    handleClick\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; triggerClick = &lt;span class=&quot;hljs-title function_&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;MyComponent&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;root&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-title function_&quot;&gt;triggerClick&lt;/span&gt;()\n&lt;span class=&quot;hljs-title function_&quot;&gt;triggerClick&lt;/span&gt;()\n&lt;span class=&quot;hljs-title function_&quot;&gt;triggerClick&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;root&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I know that there are already very good answers. But I want to give another idea how to solve the same issue, and access the latest &apos;movie&apos; state, using my module &lt;a href=&quot;https://www.npmjs.com/package/react-usestateref&quot; rel=&quot;noreferrer&quot;&gt;react-useStateRef&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;As you understand by using React state you can render the page every time the state change. But by using React ref, you can always get the latest values.&lt;/p&gt;\n&lt;p&gt;So the module &lt;code&gt;react-useStateRef&lt;/code&gt; let you use state&apos;s and ref&apos;s together. It&apos;s backward compatible with &lt;code&gt;React.useState&lt;/code&gt;, so you can just replace the &lt;code&gt;import&lt;/code&gt; statement&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { useEffect } = &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { useState } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;react-usestateref&apos;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [movies, setMovies] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(initialValue);\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = [\n          {\n            &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1546514491119&quot;&lt;/span&gt;,\n          },\n        ];\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;result =&quot;&lt;/span&gt;, result);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;setMovies&lt;/span&gt;(result);\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;movies =&quot;&lt;/span&gt;, movies.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// will give you the latest results&lt;/span&gt;\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(e);\n      }\n    })();\n  }, []);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;More information:&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/react-usestateref&quot; rel=&quot;noreferrer&quot;&gt;react-usestsateref&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I just finished a rewrite with useReducer, following @kentcdobs article (ref below) which really gave me a solid result that suffers not one bit from these closure problems.&lt;/p&gt;\n&lt;p&gt;See: &lt;a href=&quot;https://kentcdodds.com/blog/how-to-use-react-context-effectively&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://kentcdodds.com/blog/how-to-use-react-context-effectively&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;I condensed his readable boilerplate to my preferred level of DRYness -- reading his sandbox implementation will show you how it actually works.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;react&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ref: https://kentcdodds.com/blog/how-to-use-react-context-effectively&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ApplicationDispatch&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createContext&lt;/span&gt;()\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ApplicationContext&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createContext&lt;/span&gt;()\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;stateReducer&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;state, action&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (state.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(action.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;)) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; { ...state, [action.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;]: state[action.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;] = action.&lt;span class=&quot;hljs-property&quot;&gt;newValue&lt;/span&gt; };\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Unhandled action type: &lt;span class=&quot;hljs-subst&quot;&gt;${action.type}&lt;/span&gt;`&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; initialState = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;keyCode&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;testCode&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;testMode&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;phoneNumber&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;resultCode&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;mobileInfo&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;configName&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;appConfig&lt;/span&gt;: {},\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;DispatchProvider&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ children }&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [state, dispatch] = &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;useReducer&lt;/span&gt;(stateReducer, initialState);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ApplicationDispatch.Provider&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{dispatch}&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ApplicationContext.Provider&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{state}&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        {children}\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ApplicationContext.Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ApplicationDispatch.Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n  )\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useDispatchable&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;stateName&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; context = &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;useContext&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;ApplicationContext&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; dispatch = &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;useContext&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;ApplicationDispatch&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [context[stateName], &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;newValue&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dispatch&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: stateName, newValue })];\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useKeyCode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useDispatchable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;keyCode&apos;&lt;/span&gt;); }\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useTestCode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useDispatchable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;testCode&apos;&lt;/span&gt;); }\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useTestMode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useDispatchable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;testMode&apos;&lt;/span&gt;); }\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;usePhoneNumber&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useDispatchable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;phoneNumber&apos;&lt;/span&gt;); }\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useResultCode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useDispatchable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;resultCode&apos;&lt;/span&gt;); }\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useMobileInfo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useDispatchable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mobileInfo&apos;&lt;/span&gt;); }\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useConfigName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useDispatchable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;configName&apos;&lt;/span&gt;); }\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useAppConfig&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useDispatchable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;appConfig&apos;&lt;/span&gt;); }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title class_&quot;&gt;DispatchProvider&lt;/span&gt;,\n  useKeyCode,\n  useTestCode,\n  useTestMode,\n  usePhoneNumber,\n  useResultCode,\n  useMobileInfo,\n  useConfigName,\n  useAppConfig,\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;With a usage similar to this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { useHistory } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;react-router-dom&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// https://react-bootstrap.github.io/components/alerts&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;hljs-title class_&quot;&gt;Container&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Row&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;react-bootstrap&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { useAppConfig, useKeyCode, usePhoneNumber } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;../../ApplicationDispatchProvider&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;hljs-title class_&quot;&gt;ControlSet&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;../../components/control-set&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { keypadClass } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;../../utils/style-utils&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;hljs-title class_&quot;&gt;MaskedEntry&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;../../components/masked-entry&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;hljs-title class_&quot;&gt;Messaging&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;../../components/messaging&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;hljs-title class_&quot;&gt;SimpleKeypad&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;HandleKeyPress&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;ALT_ID&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;../../components/simple-keypad&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;AltIdPage&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; history = &lt;span class=&quot;hljs-title function_&quot;&gt;useHistory&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [keyCode, setKeyCode] = &lt;span class=&quot;hljs-title function_&quot;&gt;useKeyCode&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [phoneNumber, setPhoneNumber] = &lt;span class=&quot;hljs-title function_&quot;&gt;usePhoneNumber&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [appConfig, setAppConfig] = &lt;span class=&quot;hljs-title function_&quot;&gt;useAppConfig&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;keyPressed&lt;/span&gt; = btn =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; maxLen = appConfig.&lt;span class=&quot;hljs-property&quot;&gt;phoneNumberEntry&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;entryLen&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newValue = &lt;span class=&quot;hljs-title class_&quot;&gt;HandleKeyPress&lt;/span&gt;(btn, phoneNumber).&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, maxLen);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;setPhoneNumber&lt;/span&gt;(newValue);\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSubmit&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n    history.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;);\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; disableBtns = phoneNumber.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;lt; appConfig.&lt;span class=&quot;hljs-property&quot;&gt;phoneNumberEntry&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;entryLen&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;fluid&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text-center&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Row&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Messaging&lt;/span&gt; {&lt;span class=&quot;hljs-attr&quot;&gt;...&lt;/span&gt;{ &lt;span class=&quot;hljs-attr&quot;&gt;msgColors:&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;appConfig.pageColors&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;msgLines:&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;appConfig.entryMsgs.altIdMsgs&lt;/span&gt; }} /&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Row&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Row&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;MaskedEntry&lt;/span&gt; {&lt;span class=&quot;hljs-attr&quot;&gt;...&lt;/span&gt;{ &lt;span class=&quot;hljs-attr&quot;&gt;...appConfig.phoneNumberEntry&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;entryColors:&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;appConfig.pageColors&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;entryLine:&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;phoneNumber&lt;/span&gt; }} /&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Row&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Row&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;SimpleKeypad&lt;/span&gt; {&lt;span class=&quot;hljs-attr&quot;&gt;...&lt;/span&gt;{ &lt;span class=&quot;hljs-attr&quot;&gt;keyboardName:&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ALT_ID&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;themeName:&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;appConfig.keyTheme&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;keyPressed&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;styleClass:&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;keypadClass&lt;/span&gt; }} /&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Row&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Row&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ControlSet&lt;/span&gt; {&lt;span class=&quot;hljs-attr&quot;&gt;...&lt;/span&gt;{ &lt;span class=&quot;hljs-attr&quot;&gt;btnColors:&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;appConfig.buttonColors&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;disabled:&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;disableBtns&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;btns:&lt;/span&gt; [{ &lt;span class=&quot;hljs-attr&quot;&gt;text:&lt;/span&gt; &apos;&lt;span class=&quot;hljs-attr&quot;&gt;Submit&lt;/span&gt;&apos;, &lt;span class=&quot;hljs-attr&quot;&gt;click:&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;doSubmit&lt;/span&gt; }] }} /&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Row&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Container&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n  );\n};\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;AltIdPage&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;propTypes&lt;/span&gt; = {};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now everything persists smoothly everywhere across all my pages&lt;/p&gt;\n    ","\n&lt;p&gt;React&apos;s useEffect has its own state/lifecycle. It&apos;s related to mutation of state, and it will not update the state until the effect is destroyed.&lt;/p&gt;\n&lt;p&gt;Just pass a single argument in parameters state or leave it a black array and it will work perfectly.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;effect&quot;&lt;/span&gt;);\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/query/countries&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; res = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; result.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result1 = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/query/projects&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; res1 = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; result1.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result11 = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/query/regions&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; res11 = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; result11.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;();\n            &lt;span class=&quot;hljs-title function_&quot;&gt;setData&lt;/span&gt;({\n                &lt;span class=&quot;hljs-attr&quot;&gt;countries&lt;/span&gt;: res,\n                &lt;span class=&quot;hljs-attr&quot;&gt;projects&lt;/span&gt;: res1,\n                &lt;span class=&quot;hljs-attr&quot;&gt;regions&lt;/span&gt;: res11\n            });\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {}\n    })(data)\n}, [setData])\n# or use &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;([\n                &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/query/countries&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) =&amp;gt;&lt;/span&gt; response.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;()),\n                &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/query/projects&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) =&amp;gt;&lt;/span&gt; response.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;()),\n                &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/query/regions&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) =&amp;gt;&lt;/span&gt; response.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;())\n            ]).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[country, project, region]&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// console.log(country, project, region);&lt;/span&gt;\n                &lt;span class=&quot;hljs-title function_&quot;&gt;setData&lt;/span&gt;({\n                    &lt;span class=&quot;hljs-attr&quot;&gt;countries&lt;/span&gt;: country,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;projects&lt;/span&gt;: project,\n                    &lt;span class=&quot;hljs-attr&quot;&gt;regions&lt;/span&gt;: region\n                });\n            })\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data fetch error&quot;&lt;/span&gt;)\n        }\n    })()\n}, [setData]);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively, you can try React.useRef() for instant change in the React hook.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; movies = &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;useRef&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\nmovies.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;values&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(movies.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;)\n}, [])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The closure is not the only reason.&lt;/p&gt;\n&lt;p&gt;Based on the source code of &lt;code&gt;useState&lt;/code&gt; (simplified below). Seems to me the value is never assigned right away.&lt;/p&gt;\n&lt;p&gt;What happens is that an update action is queued when you invoke &lt;code&gt;setValue&lt;/code&gt;. And after the schedule kicks in and only when you get to the next render, these update action then is applied to that state.&lt;/p&gt;\n&lt;p&gt;Which means even we don&apos;t have closure issue, react version of &lt;code&gt;useState&lt;/code&gt; is not going to give you the new value right away. The new value doesn&apos;t even exist until next render.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;initialState&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; hook;\n    ...\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; baseState = hook.&lt;span class=&quot;hljs-property&quot;&gt;memoizedState&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (hook.&lt;span class=&quot;hljs-property&quot;&gt;queue&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pending&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; firstUpdate = hook.&lt;span class=&quot;hljs-property&quot;&gt;queue&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pending&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;next&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; action = firstUpdate.&lt;span class=&quot;hljs-property&quot;&gt;action&lt;/span&gt;;\n        baseState = &lt;span class=&quot;hljs-title function_&quot;&gt;action&lt;/span&gt;(baseState);            &lt;span class=&quot;hljs-comment&quot;&gt;// setValue HERE&lt;/span&gt;\n        firstUpdate = firstUpdate.&lt;span class=&quot;hljs-property&quot;&gt;next&lt;/span&gt;;\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (firstUpdate !== hook.&lt;span class=&quot;hljs-property&quot;&gt;queue&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pending&lt;/span&gt;);\n\n      hook.&lt;span class=&quot;hljs-property&quot;&gt;queue&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pending&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n    hook.&lt;span class=&quot;hljs-property&quot;&gt;memoizedState&lt;/span&gt; = baseState;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [baseState, dispatchAction.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, hook.&lt;span class=&quot;hljs-property&quot;&gt;queue&lt;/span&gt;)];\n  }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dispatchAction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;queue, action&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; update = {\n    action,\n    &lt;span class=&quot;hljs-attr&quot;&gt;next&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n  };\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (queue.&lt;span class=&quot;hljs-property&quot;&gt;pending&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n    update.&lt;span class=&quot;hljs-property&quot;&gt;next&lt;/span&gt; = update;\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    update.&lt;span class=&quot;hljs-property&quot;&gt;next&lt;/span&gt; = queue.&lt;span class=&quot;hljs-property&quot;&gt;pending&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;next&lt;/span&gt;;\n    queue.&lt;span class=&quot;hljs-property&quot;&gt;pending&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;next&lt;/span&gt; = update;\n  }\n  queue.&lt;span class=&quot;hljs-property&quot;&gt;pending&lt;/span&gt; = update;\n\n  isMount = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  workInProgressHook = fiber.&lt;span class=&quot;hljs-property&quot;&gt;memoizedState&lt;/span&gt;;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;schedule&lt;/span&gt;();\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There&apos;s also an article explaining the above in the similar way, &lt;a href=&quot;https://dev.to/adamklein/we-don-t-know-how-react-state-hook-works-1lp8&quot; rel=&quot;noreferrer&quot;&gt;https://dev.to/adamklein/we-don-t-know-how-react-state-hook-works-1lp8&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I found this to be good. Instead of defining state (approach 1) as, example,&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; initialValue = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [state,setState] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(initialValue)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Try this approach (approach 2),&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [state = initialValue,setState] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;()\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This resolved the rerender issue without using useEffect since we are not concerned with its internal closure approach with this case.&lt;/p&gt;\n&lt;p&gt;P.S.: If you are concerned with using old state for any use case then useState with useEffect needs to be used since it will need to have that state, so approach 1 shall be used in this situation.&lt;/p&gt;\n    ","\n&lt;p&gt;I too was stuck with the same problem. As other answers above have clarified the error here, which is that useState is asynchronous and you are trying to use the value just after setState. It is not updating on the console.log() part because of the asynchronous nature of setState, it lets your further code to execute, while the value updating happens on the background. Thus you are getting the previous value. When the setState is completed on the background it will update the value and you will have access to that value on the next render.&lt;/p&gt;\n&lt;p&gt;If anyone is interested to understand this in detail. Here is a really good Conference talk on the topic.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.youtube.com/watch?v=8aGhZQkoFbQ&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If we have to update state only, then a better way can be if we use the push method to do so.&lt;/p&gt;\n&lt;p&gt;Here is my code. I want to store URLs from &lt;a href=&quot;https://en.wikipedia.org/wiki/Firebase&quot; rel=&quot;nofollow noreferrer&quot;&gt;Firebase&lt;/a&gt; in state.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [imageUrl, setImageUrl] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;([]);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [reload, setReload] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (reload === &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;downloadUrl1&lt;/span&gt;();\n    }\n}, [reload]);\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;downloadUrl&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;setImages&lt;/span&gt;([]);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; images.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;storage&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;ref&lt;/span&gt;(urls[i].&lt;span class=&quot;hljs-property&quot;&gt;path&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;getDownloadURL&lt;/span&gt;();\n            imageUrl.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(url);\n            &lt;span class=&quot;hljs-title function_&quot;&gt;setImageUrl&lt;/span&gt;([...imageUrl]);\n\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(url, &lt;span class=&quot;hljs-string&quot;&gt;&apos;check&apos;&lt;/span&gt;, urls.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;length&apos;&lt;/span&gt;, imageUrl.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;);\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(e);\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleSubmit&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;setReload&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;downloadUrl&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(imageUrl);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;post submitted&apos;&lt;/span&gt;);\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code works to put URLs in state as an array. This might also work for you.&lt;/p&gt;\n    ","\n&lt;p&gt;With custom hooks from my library, you can wait for the state values to update:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;useAsyncWatcher(...values):watcherFn(peekPrevValue: boolean)=&amp;gt;Promise&lt;/code&gt; - is a promise wrapper around useEffect that can wait for updates and return a new value and possibly a previous one if the optional &lt;code&gt;peekPrevValue&lt;/code&gt; argument is set to true.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;(&lt;a href=&quot;https://codesandbox.io/s/use-async-watcher-njuoc?file=/src/TestComponent.js&quot; rel=&quot;nofollow noreferrer&quot;&gt;Live Demo&lt;/a&gt;)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;, { useState, useEffect, useCallback } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;react&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { useAsyncWatcher } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;use-async-effect2&quot;&lt;/span&gt;;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;TestComponent&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;props&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [counter, setCounter] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [text, setText] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n    \n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; textWatcher = &lt;span class=&quot;hljs-title function_&quot;&gt;useAsyncWatcher&lt;/span&gt;(text);\n    \n      &lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;setText&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Counter: &lt;span class=&quot;hljs-subst&quot;&gt;${counter}&lt;/span&gt;`&lt;/span&gt;);\n      }, [counter]);\n    \n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; inc = &lt;span class=&quot;hljs-title function_&quot;&gt;useCallback&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n        (&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(resolve, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;));\n          &lt;span class=&quot;hljs-title function_&quot;&gt;setCounter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;counter&lt;/span&gt;) =&amp;gt;&lt;/span&gt; counter + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; updatedText = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;textWatcher&lt;/span&gt;();\n          &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(updatedText);\n        })();\n      }, []);\n    \n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (\n        &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;component&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;caption&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;useAsyncEffect demo&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;{counter}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{inc}&lt;/span&gt;&amp;gt;&lt;/span&gt;Inc counter&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n      );\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TestComponent&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;code&gt;useAsyncDeepState&lt;/code&gt; is a deep state implementation (similar to this.setState (patchObject)) whose setter can return a promise synchronized with the internal effect. If the setter is called with no arguments, it does not change the state values, but simply subscribes to state updates. In this case, you can get the state value from anywhere inside your component, since function closures are no longer a hindrance.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;(&lt;a href=&quot;https://codesandbox.io/s/use-async-deep-state-5c9d0?file=/src/TestComponent.js&quot; rel=&quot;nofollow noreferrer&quot;&gt;Live Demo&lt;/a&gt;)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;, { useCallback, useEffect } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;react&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { useAsyncDeepState } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;use-async-effect2&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;TestComponent&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;props&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [state, setState] = &lt;span class=&quot;hljs-title function_&quot;&gt;useAsyncDeepState&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;counter&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;computedCounter&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n  });\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ counter }&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({\n      &lt;span class=&quot;hljs-attr&quot;&gt;computedCounter&lt;/span&gt;: counter * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n    }));\n  }, [state.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt;]);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; inc = &lt;span class=&quot;hljs-title function_&quot;&gt;useCallback&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(resolve, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;));\n      &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{ counter }&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({ &lt;span class=&quot;hljs-attr&quot;&gt;counter&lt;/span&gt;: counter + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; }));\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;computedCounter=&quot;&lt;/span&gt;, state.&lt;span class=&quot;hljs-property&quot;&gt;computedCounter&lt;/span&gt;);\n    })();\n  });\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;component&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;caption&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;useAsyncDeepState demo&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;state.counter : {state.counter}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;state.computedCounter : {state.computedCounter}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; inc()}&amp;gt;Inc counter&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n  );\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; [state,setState]=&lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(defaultValue)\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;useEffect&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; updatedState\n   &lt;span class=&quot;hljs-title function_&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;currentState&lt;/span&gt;=&amp;gt;&lt;/span&gt;{    &lt;span class=&quot;hljs-comment&quot;&gt;// Do not change the state by get the updated state&lt;/span&gt;\n      updateState=currentState\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; currentState\n   })\n   &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(updateState) &lt;span class=&quot;hljs-comment&quot;&gt;// the current state.&lt;/span&gt;\n})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Without any addtional NPM package&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;BackendPageListing&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [ myData, setMyData] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;( {\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;\n    })\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myFunction&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt; x &lt;/span&gt;) =&amp;gt; {\n        \n        &lt;span class=&quot;hljs-title function_&quot;&gt;setPagenateInfo&lt;/span&gt;({\n        ...myData,\n        &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: x\n        })\n\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myData) &lt;span class=&quot;hljs-comment&quot;&gt;// not reflecting change immediately&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; myDataNew = {...myData, &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: x };\n        \n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myDataNew) &lt;span class=&quot;hljs-comment&quot;&gt;// Reflecting change immediately&lt;/span&gt;\n\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (\n        &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{()&lt;/span&gt;=&amp;gt;&lt;/span&gt;{ myFunction(&quot;New Content&quot;)} }&amp;gt;Update MyData&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    )\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Not saying to do this, but it isn&apos;t hard to do what the OP asked without useEffect.&lt;/p&gt;\n&lt;p&gt;Use a promise to resolve the new state in the body of the setter function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; getState = &amp;lt;T&amp;gt;(\n  &lt;span class=&quot;hljs-attr&quot;&gt;setState&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Dispatch&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;SetStateAction&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;\n): &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;&amp;lt;T&amp;gt; =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;currentState: T&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(currentState);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; currentState;\n    });\n  });\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And this is how you use it (example shows the comparison between &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;outOfSyncCount&lt;/code&gt;/&lt;code&gt;syncCount&lt;/code&gt; in the UI rendering):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;App&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;FC&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [count, setCount] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [outOfSyncCount, setOutOfSyncCount] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [syncCount, setSyncCount] = &lt;span class=&quot;hljs-title function_&quot;&gt;useState&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleOnClick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;setCount&lt;/span&gt;(count + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Doesn&apos;t work&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;setOutOfSyncCount&lt;/span&gt;(count);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Works&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newCount = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getState&lt;/span&gt;(setCount);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;setSyncCount&lt;/span&gt;(newCount);\n  };\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;Count = {count}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;Synced count = {syncCount}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;Out of sync count = {outOfSyncCount}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{handleOnClick}&lt;/span&gt;&amp;gt;&lt;/span&gt;Increment&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;\n  );\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use the &lt;a href=&quot;https://github.com/ocetnik/react-native-background-timer&quot; rel=&quot;nofollow noreferrer&quot;&gt;Background Timer&lt;/a&gt; library. It solved my problem.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timeoutId = &lt;span class=&quot;hljs-title class_&quot;&gt;BackgroundTimer&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This will be executed once after 1 seconds&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// even when the application is the background&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;tac&apos;&lt;/span&gt;);\n}, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// replace&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;hello&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// with&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;{JSON.stringify(movies)}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you should see, that your code actually &lt;strong&gt;does&lt;/strong&gt; work. What does not work is the &lt;code&gt;console.log(movies)&lt;/code&gt;. This is because &lt;code&gt;movies&lt;/code&gt; points to the &lt;em&gt;old state&lt;/em&gt;. If you move your &lt;code&gt;console.log(movies)&lt;/code&gt; outside of &lt;code&gt;useEffect&lt;/code&gt;, right above the return, you will see the updated movies object.&lt;/p&gt;\n    "]},"randomTags":[{"name":"protractor","slug":"protractor"},{"name":"grouping","slug":"grouping"},{"name":"jquery","slug":"jquery"},{"name":"unity3d","slug":"unity3d"},{"name":"layout","slug":"layout"},{"name":"compiler-errors","slug":"compiler-errors"},{"name":"spring","slug":"spring"},{"name":"oracle","slug":"oracle"},{"name":"c-preprocessor","slug":"c-preprocessor"},{"name":"lifetime","slug":"lifetime"},{"name":"int","slug":"int"},{"name":"syntax","slug":"syntax"},{"name":"http","slug":"http"},{"name":"this","slug":"this"},{"name":"javafx","slug":"javafx"},{"name":"storage","slug":"storage"},{"name":"c89","slug":"c89"},{"name":"object-notation","slug":"object-notation"},{"name":"include","slug":"include"},{"name":"centering","slug":"centering"}]},"__N_SSG":true}