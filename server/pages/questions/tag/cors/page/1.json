{"pageProps":{"data":{"count":1,"rows":[{"id":108,"title":"Why does my JavaScript code receive a \"No 'Access-Control-Allow-Origin' header is present on the requested resource\" error, while Postman does not?","slug":"why-does-my-javascript-code-receive-a-\"no-'access-control-allow-origin'-header-is-present-on-the-requested-resource\"-error-while-postman-does-not-1657384636363","postType":"QUESTION","createdAt":"2022-07-09T16:37:16.000Z","updatedAt":"2022-07-09T16:37:16.000Z","tags":[{"id":396,"name":"cors","slug":"cors","createdAt":"2022-07-09T16:37:16.000Z","updatedAt":"2022-07-09T16:37:16.000Z","Questions_Tags":{"questionId":108,"tagId":396}}]}]},"slug":"cors","page":"1","answers":{"108":["\n&lt;p&gt;If I understood it right you are doing an &lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot; rel=&quot;noreferrer&quot;&gt;XMLHttpRequest&lt;/a&gt; to a different domain than your page is on. So the browser is blocking it as it usually allows a request in the same origin for security reasons. You need to do something different when you want to do a cross-domain request. A tutorial about how to achieve that is &lt;em&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/&quot; rel=&quot;noreferrer&quot;&gt;Using CORS&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;When you are using Postman they are not restricted by this policy. Quoted from &lt;em&gt;&lt;a href=&quot;https://developer.chrome.com/docs/extensions/mv2/xhr/&quot; rel=&quot;noreferrer&quot;&gt;Cross-Origin XMLHttpRequest&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Regular web pages can use the XMLHttpRequest object to send and receive data from remote servers, but they&apos;re limited by the same origin policy. Extensions aren&apos;t so limited. An extension can talk to remote servers outside of its origin, as long as it first requests cross-origin permissions.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; Using &lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt; can make your API/website vulnerable to &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery&quot; rel=&quot;noreferrer&quot;&gt;cross-site request forgery&lt;/a&gt; (CSRF) attacks. Make certain you &lt;a href=&quot;https://stackoverflow.com/questions/43154170/is-it-safe-to-enable-cors-to-for-a-public-and-readonly-webservice&quot;&gt;understand the risks&lt;/a&gt; before using this code.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&apos;s very simple to solve if you are using &lt;a href=&quot;http://en.wikipedia.org/wiki/PHP&quot; rel=&quot;noreferrer&quot;&gt;PHP&lt;/a&gt;. Just add the following script in the beginning of your PHP page which handles the request:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;?php &lt;span class=&quot;hljs-title function_&quot;&gt;header&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Access-Control-Allow-Origin: *&apos;&lt;/span&gt;); ?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you are using &lt;a href=&quot;https://en.wikipedia.org/wiki/Node-RED&quot; rel=&quot;noreferrer&quot;&gt;Node-red&lt;/a&gt; you have to allow &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot; rel=&quot;noreferrer&quot;&gt;CORS&lt;/a&gt; in the &lt;code&gt;node-red/settings.js&lt;/code&gt; file by un-commenting the following lines:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// The following property can be used to configure cross-origin resource sharing&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// in the HTTP nodes.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// See https://github.com/troygoode/node-cors#configuration-options for&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// details on its contents. The following is a basic permissive set of options:&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;httpNodeCors&lt;/span&gt;: {\n &lt;span class=&quot;hljs-attr&quot;&gt;origin&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;,\n &lt;span class=&quot;hljs-attr&quot;&gt;methods&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;GET,PUT,POST,DELETE&quot;&lt;/span&gt;\n},\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you are using &lt;a href=&quot;http://flask.pocoo.org/&quot; rel=&quot;noreferrer&quot;&gt;Flask&lt;/a&gt; same as the question; you have first to install &lt;code&gt;flask-cors&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$ pip install -U flask-cors\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then include the Flask cors in your application.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask_cors &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;CORS&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A simple application will look like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Flask&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask_cors &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;CORS&lt;/span&gt;\n\napp = &lt;span class=&quot;hljs-title class_&quot;&gt;Flask&lt;/span&gt;(__name__)\n&lt;span class=&quot;hljs-title function_&quot;&gt;CORS&lt;/span&gt;(app)\n\n@app.&lt;span class=&quot;hljs-title function_&quot;&gt;route&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;)\ndef &lt;span class=&quot;hljs-title function_&quot;&gt;helloWorld&lt;/span&gt;():\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello, cross-origin-world!&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more details, you can check the &lt;a href=&quot;https://flask-cors.readthedocs.io/en/latest/&quot; rel=&quot;noreferrer&quot;&gt;Flask documentation&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Because &lt;br&gt;\n&lt;strong&gt;$.ajax({type: &quot;POST&quot;&lt;/strong&gt; - calls &lt;strong&gt;OPTIONS&lt;/strong&gt; &lt;br&gt;\n&lt;strong&gt;$.post(&lt;/strong&gt; - Calls &lt;strong&gt;POST&lt;/strong&gt; &lt;br&gt;&lt;/p&gt;\n&lt;p&gt;Both are different. Postman calls &quot;POST&quot; properly, but when we call it, it will be &quot;OPTIONS&quot;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;For C# web services - &lt;a href=&quot;https://en.wikipedia.org/wiki/ASP.NET_MVC_Framework#Apache_License_2.0_release&quot; rel=&quot;noreferrer&quot;&gt;Web API&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Please add the following code in your &lt;em&gt;web.config&lt;/em&gt; file under &amp;lt;system.webServer&amp;gt; tag. This will work:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;httpProtocol&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;customHeaders&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access-Control-Allow-Origin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;customHeaders&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&amp;lt;/httpProtocol&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Please make sure you are not doing any mistake in the Ajax call&lt;/p&gt;\n&lt;h3&gt;jQuery&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;http://mysite.microsoft.sample.xyz.com/api/mycall&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;headers&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;Content-Type&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;application/x-www-form-urlencoded&apos;&lt;/span&gt;\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;/* or type:&quot;GET&quot; or type:&quot;PUT&quot; */&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;dataType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;json&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: {\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result);\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;error&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;error&quot;&lt;/span&gt;);\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are looking for downloading content &lt;strong&gt;from a third-party website&lt;/strong&gt; then &lt;strong&gt;this will not help you&lt;/strong&gt;.  You can try the following code, but not JavaScript.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Net&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;WebClient&lt;/span&gt; wc = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Net&lt;/span&gt;.&lt;span class=&quot;hljs-title class_&quot;&gt;WebClient&lt;/span&gt;();\nstring str = wc.&lt;span class=&quot;hljs-title class_&quot;&gt;DownloadString&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://mysite.microsoft.sample.xyz.com/api/mycall&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Deep&lt;/h1&gt;\n&lt;p&gt;In the below investigation as API, I use &lt;a href=&quot;http://example.com&quot; rel=&quot;noreferrer&quot;&gt;http://example.com&lt;/a&gt; instead of http://myApiUrl/login from your question, because this first one working. I assume that your page is on &lt;a href=&quot;http://my-site.local:8088&quot; rel=&quot;noreferrer&quot;&gt;http://my-site.local:8088&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The API and your page have different domains!&lt;/p&gt;\n&lt;p&gt;The reason why you see different results is that Postman:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;set header &lt;code&gt;Host=example.com&lt;/code&gt; (your API)&lt;/li&gt;\n&lt;li&gt;NOT set header &lt;code&gt;Origin&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Postman actually not use your website url at all (you only type your API address into Postman) - he only send request to API, so he assume that website has same address as API (browser not assume this)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;This is similar to browsers&apos; way of sending requests when the site and API has the same domain (browsers also set the header item &lt;code&gt;Referer=http://my-site.local:8088&lt;/code&gt;, however I don&apos;t see it in Postman). &lt;strong&gt;When &lt;code&gt;Origin&lt;/code&gt; header is &lt;em&gt;not&lt;/em&gt; set, usually servers allow such requests by default.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/XLrRg.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/XLrRg.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This is the standard way how Postman sends requests. But a browser sends requests differently when &lt;strong&gt;your site and API have different domains&lt;/strong&gt;, and then &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot; rel=&quot;noreferrer&quot;&gt;CORS&lt;/a&gt; occurs and the browser automatically:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;sets header &lt;code&gt;Host=example.com&lt;/code&gt; (yours as API)&lt;/li&gt;\n&lt;li&gt;sets header &lt;code&gt;Origin=http://my-site.local:8088&lt;/code&gt; (your site)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;(The header &lt;code&gt;Referer&lt;/code&gt; has the same value as &lt;code&gt;Origin&lt;/code&gt;). And now in Chrome&apos;s &lt;em&gt;Console &amp;amp; Networks&lt;/em&gt; tab you will see:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/oZkcL.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/oZkcL.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/8ITev.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/8ITev.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;When you have &lt;strong&gt;&lt;code&gt;Host != Origin&lt;/code&gt;&lt;/strong&gt; this is CORS, and when the server detects such a request, it usually &lt;strong&gt;blocks it by default&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;Origin=null&lt;/code&gt; is set when you open HTML content from a local directory, and it sends a request. The same situation is when you send a request inside an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, like in the below snippet (but here the &lt;code&gt;Host&lt;/code&gt; header is not set at all) - in general, everywhere the HTML specification says opaque origin, you can translate that to &lt;code&gt;Origin=null&lt;/code&gt;. More information about this you can find &lt;a href=&quot;https://stackoverflow.com/questions/42239643/when-do-browsers-send-the-origin-header-when-do-browsers-set-the-origin-to-null/42242802#42242802&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://example.com/api&apos;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;Look on chrome-console &amp;gt; network tab&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;If you do not use a simple CORS request, usually the browser automatically also sends an OPTIONS request before sending the main request - more information is &lt;a href=&quot;https://stackoverflow.com/questions/10093053/access-control-request-headers-is-added-to-header-in-ajax-request-with-jquery/55584963#55584963&quot;&gt;here&lt;/a&gt;. The snippet below shows it:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://example.com/api&apos;&lt;/span&gt;, {\n  &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;headers&lt;/span&gt;: { &lt;span class=&quot;hljs-string&quot;&gt;&apos;Content-Type&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;application/json&apos;&lt;/span&gt;}\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;Look in chrome-console -&amp;gt; network tab to &apos;api&apos; request.\nThis is the OPTIONS request (the server does not allow sending a POST request)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;You can change the configuration of your server to allow CORS requests.&lt;/p&gt;\n&lt;p&gt;Here is an example configuration which turns on &lt;strong&gt;CORS on nginx&lt;/strong&gt; (nginx.conf file) - be very careful with setting &lt;code&gt;always/&quot;$http_origin&quot;&lt;/code&gt; for nginx and &lt;code&gt;&quot;*&quot;&lt;/code&gt; for Apache - this will unblock CORS from any domain (in production instead of stars use your concrete page adres which consume your api)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;location ~ ^/index\\.php(/|$) {\n   ...\n    add_header &apos;Access-Control-Allow-Origin&apos; &quot;$http_origin&quot; always;\n    add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos; always;\n    if ($request_method = OPTIONS) {\n        add_header &apos;Access-Control-Allow-Origin&apos; &quot;$http_origin&quot;; # DO NOT remove THIS LINES (doubled with outside &apos;if&apos; above)\n        add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;\n        add_header &apos;Access-Control-Max-Age&apos; 1728000; # cache preflight value for 20 days\n        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;\n        add_header &apos;Access-Control-Allow-Headers&apos; &apos;My-First-Header,My-Second-Header,Authorization,Content-Type,Accept,Origin&apos;;\n        add_header &apos;Content-Length&apos; 0;\n        add_header &apos;Content-Type&apos; &apos;text/plain charset=UTF-8&apos;;\n        return 204;\n    }\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Here is an example configuration which turns on &lt;strong&gt;CORS on Apache&lt;/strong&gt; (.htaccess file)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;# ------------------------------------------------------------------------------\n# | Cross-domain Ajax requests                                                 |\n# ------------------------------------------------------------------------------\n\n# Enable cross-origin Ajax requests.\n# http://code.google.com/p/html5security/wiki/CrossOriginRequestSecurity\n# http://enable-cors.org/\n\n# &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;IfModule&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;mod_headers.c&lt;/span&gt;&amp;gt;&lt;/span&gt;\n#    Header set Access-Control-Allow-Origin &quot;*&quot;\n# &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;IfModule&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n# Header set Header set Access-Control-Allow-Origin &quot;*&quot;\n# Header always set Access-Control-Allow-Credentials &quot;true&quot;\n\nAccess-Control-Allow-Origin &quot;http://your-page.com:80&quot;\nHeader always set Access-Control-Allow-Methods &quot;POST, GET, OPTIONS, DELETE, PUT&quot;\nHeader always set Access-Control-Allow-Headers &quot;My-First-Header,My-Second-Header,Authorization, content-type, csrf-token&quot;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Applying a CORS restriction is a security feature defined by a server and implemented by a &lt;strong&gt;browser&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The browser looks at the CORS policy of the server and respects it.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;However, the Postman tool does not bother about the CORS policy of the server.&lt;/p&gt;\n\n&lt;p&gt;That is why the CORS error appears in the browser, but not in Postman.&lt;/p&gt;\n    ","\n&lt;p&gt;The error you get is due to the CORS standard, which sets some restrictions on how JavaScript can perform ajax requests.&lt;/p&gt;\n&lt;p&gt;The CORS standard is a client-side standard, implemented in the browser. So it is the browser which prevent the call from completing and generates the error message - not the server.&lt;/p&gt;\n&lt;p&gt;Postman does not implement the CORS restrictions, which is why you don&apos;t see the same error when making the same call from Postman.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Why&lt;/em&gt; doesn&apos;t Postman implement CORS? CORS defines the restrictions relative to the origin (URL domain) of the page which initiates the request. But in Postman the requests doesn&apos;t originate from a page with an URL so CORS does not apply.&lt;/p&gt;\n    ","\n&lt;h2&gt;Solution &amp;amp; Issue Origins&lt;/h2&gt;\n&lt;p&gt;You are making a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot; rel=&quot;noreferrer&quot;&gt;XMLHttpRequest&lt;/a&gt; to different domains, example:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Domain one: &lt;code&gt;some-domain.com&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Domain Two: &lt;code&gt;some-different-domain.com&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;This difference in domain names triggers &lt;strong&gt;CORS&lt;/strong&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot; rel=&quot;noreferrer&quot;&gt;Cross-Origin Resource Sharing&lt;/a&gt;) policy called &lt;strong&gt;SOP&lt;/strong&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot; rel=&quot;noreferrer&quot;&gt;Same-Origin Policy&lt;/a&gt;) that enforces the use of same domains (hence &lt;em&gt;Origin&lt;/em&gt;) in &lt;a href=&quot;https://api.jquery.com/jquery.ajax&quot; rel=&quot;noreferrer&quot;&gt;Ajax&lt;/a&gt;, XMLHttpRequest and other HTTP requests.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Why did it work when I made the request via the Chrome extension\nPostman?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;A client (most &lt;strong&gt;Browsers&lt;/strong&gt; and &lt;strong&gt;Development Tools&lt;/strong&gt;) has a choice to enforce the Same-Origin Policy.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Most browsers enforce the policy of Same-Origin Policy to prevent issues related to &lt;strong&gt;CSRF&lt;/strong&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/CSRF&quot; rel=&quot;noreferrer&quot;&gt;Cross-Site Request Forgery&lt;/a&gt;) attack.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Postman&lt;/strong&gt; as a development tool chooses not to enforce SOP while some browsers enforce, this is why you can send requests via Postman that you cannot send with XMLHttpRequest via JS using the browser.&lt;/p&gt;\n    ","\n&lt;p&gt;For browser testing purposes:\nWindows - Run:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;chrome.&lt;span class=&quot;hljs-property&quot;&gt;exe&lt;/span&gt; --user-data-dir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;C://Chrome dev session&quot;&lt;/span&gt; --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You might also get this error if your gateway timeout is too short and the resource you are accessing takes longer to process than the timeout. This may be the case for complex database queries etc. Thus, the above error code can be disguishing this problem. Just check if the error code is 504 instead of 404 as in Kamils answer above or something else. If it is 504, then increasing the gateway timeout might fix the problem.&lt;/p&gt;\n&lt;p&gt;In my case the CORS error could be removed by disabling the same origin policy (CORS) in the IE browser, see &lt;a href=&quot;https://stackoverflow.com/questions/20947359/how-to-disable-same-origin-policy-internet-explorer&quot;&gt;How to disable same origin policy Internet Explorer&lt;/a&gt;. After doing this it was a pure 504 error in the log.&lt;/p&gt;\n    ","\n&lt;p&gt;To resolve this issue write this line of code in your &lt;code&gt;doGet()&lt;/code&gt; or &lt;code&gt;doPost()&lt;/code&gt; function whichever you are using in backend.\n&lt;code&gt;response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Your IP is not whitelisted so you are getting this error.\nAsk the backend staff to whitelist your ip for the service you are accessing\n&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&quot;The quickest fix you can make is to install the &lt;em&gt;&lt;strong&gt;moesif CORS&lt;/strong&gt;&lt;/em&gt; extension:\n&lt;a href=&quot;https://chrome.google.com/webstore/detail/moesif-origin-cors-change/digfbfaphojjndkpccljibejjbppifbc/related?hl=en-US&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://chrome.google.com/webstore/detail/moesif-origin-cors-change/digfbfaphojjndkpccljibejjbppifbc/related?hl=en-US&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Once installed, click it in your browser to activate the extension. Make sure the icons label goes from off to on:&lt;/p&gt;\n&lt;p&gt;Then &lt;strong&gt;refresh&lt;/strong&gt; your application, and your API requests should now work!&quot;&lt;/p&gt;\n    "]},"randomTags":[{"name":"language-agnostic","slug":"language-agnostic"},{"name":"data.table","slug":"data.table"},{"name":"jakarta-mail","slug":"jakarta-mail"},{"name":"layout-manager","slug":"layout-manager"},{"name":"symbols","slug":"symbols"},{"name":"int","slug":"int"},{"name":"lapply","slug":"lapply"},{"name":"sql-function","slug":"sql-function"},{"name":"formatting","slug":"formatting"},{"name":"automatic-semicolon-insertion","slug":"automatic-semicolon-insertion"},{"name":"header-files","slug":"header-files"},{"name":"c99","slug":"c99"},{"name":"template-meta-programming","slug":"template-meta-programming"},{"name":"abi","slug":"abi"},{"name":"architecture","slug":"architecture"},{"name":"webdriverwait","slug":"webdriverwait"},{"name":"terminology","slug":"terminology"},{"name":"cross-browser","slug":"cross-browser"},{"name":"http-redirect","slug":"http-redirect"},{"name":"max","slug":"max"}]},"__N_SSG":true}