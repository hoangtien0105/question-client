{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;p&gt;It&apos;s a common misconception that user input can be filtered. PHP even has a (now deprecated) &quot;feature&quot;, called &lt;a href=&quot;https://www.php.net/manual/en/security.magicquotes.php&quot; rel=&quot;noreferrer&quot;&gt;magic-quotes&lt;/a&gt;, that builds on this idea. It&apos;s nonsense. Forget about filtering (or cleaning, or whatever people call it).&lt;/p&gt;\n&lt;p&gt;What you should do, to avoid problems, is quite simple: whenever you embed a a piece of data within a foreign code, you must treat it according to the formatting rules of that code. But you must understand that such rules could be too complicated to try to follow them all manually. For example, in SQL, rules for strings, numbers and identifiers are all different. For your convenience, in most cases there is a dedicated tool for such an embedding. For example, when you need to use a PHP variable in the SQL query, you have to use a prepared statement, that will take care of all the proper formatting/treatment.&lt;/p&gt;\n&lt;p&gt;Another example is HTML: If you embed strings within HTML markup, you must escape it with &lt;a href=&quot;http://php.net/manual/function.htmlspecialchars.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;htmlspecialchars&lt;/code&gt;&lt;/a&gt;. This means that every single &lt;code&gt;echo&lt;/code&gt; or &lt;code&gt;print&lt;/code&gt; statement should use &lt;code&gt;htmlspecialchars&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;A third example could be shell commands: If you are going to embed strings (such as arguments) to external commands, and call them with &lt;a href=&quot;http://php.net/manual/function.exec.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt;, then you must use &lt;a href=&quot;http://php.net/manual/function.escapeshellcmd.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;escapeshellcmd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://php.net/manual/function.escapeshellarg.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;escapeshellarg&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Also, a very compelling example is JSON. The rules are so numerous and complicated that you would never be able to follow them all manually. That&apos;s why you should never ever create a JSON string manually, but always use a dedicated function, &lt;a href=&quot;https://www.php.net/json_encode&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;json_encode()&lt;/code&gt;&lt;/a&gt; that will correctly format every bit of data.&lt;/p&gt;\n&lt;p&gt;And so on and so forth ...&lt;/p&gt;\n&lt;p&gt;The &lt;em&gt;only&lt;/em&gt; case where you need to actively filter data, is if you&apos;re accepting preformatted input. For example, if you let your users post HTML markup, that you plan to display on the site. However, you should be wise to avoid this at all cost, since no matter how well you filter it, it will always be a potential security hole.&lt;/p&gt;\n    ","\n&lt;p&gt;Do not try to prevent SQL injection by sanitizing input data.&lt;/p&gt;\n\n&lt;p&gt;Instead, &lt;strong&gt;do not allow data to be used in creating your SQL code&lt;/strong&gt;.  Use Prepared Statements (i.e. using parameters in a template query) that uses bound variables.  It is the only way to be guaranteed against SQL injection.&lt;/p&gt;\n\n&lt;p&gt;Please see my website &lt;a href=&quot;http://bobby-tables.com/&quot; rel=&quot;noreferrer&quot;&gt;http://bobby-tables.com/&lt;/a&gt; for more about preventing SQL injection.&lt;/p&gt;\n    ","\n&lt;p&gt;No.  You can&apos;t generically filter data without any context of what it&apos;s for.  Sometimes you&apos;d want to take a SQL query as input and sometimes you&apos;d want to take HTML as input.&lt;/p&gt;\n\n&lt;p&gt;You need to filter input on a whitelist -- ensure that the data matches some specification of what you expect.  Then you need to escape it before you use it, depending on the context in which you are using it.&lt;/p&gt;\n\n&lt;p&gt;The process of escaping data for SQL - to prevent SQL injection - is very different from the process of escaping data for (X)HTML, to prevent XSS.&lt;/p&gt;\n    ","\n&lt;p&gt;PHP has the new nice &lt;a href=&quot;https://www.php.net/manual/en/function.filter-input.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;filter_input&lt;/code&gt;&lt;/a&gt; functions now, that for instance liberate you from finding &apos;the ultimate e-mail regex&apos; now that there is a built-in &lt;code&gt;FILTER_VALIDATE_EMAIL&lt;/code&gt; type&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;My own filter class (uses JavaScript to highlight faulty fields) can be initiated by either an ajax request or normal form post. (see the example below)\n&amp;lt;?\n/**\n*  Pork Formvalidator. validates fields by regexes and can sanitize them. Uses PHP filter_var built-in functions and extra regexes\n*  @package pork\n*/&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n *  Pork.FormValidator\n *  Validates arrays or properties by setting up simple arrays. \n *  Note that some of the regexes are for dutch input!\n *  Example:\n * \n *  $validations = array(&apos;name&apos; =&amp;gt; &apos;anything&apos;,&apos;email&apos; =&amp;gt; &apos;email&apos;,&apos;alias&apos; =&amp;gt; &apos;anything&apos;,&apos;pwd&apos;=&amp;gt;&apos;anything&apos;,&apos;gsm&apos; =&amp;gt; &apos;phone&apos;,&apos;birthdate&apos; =&amp;gt; &apos;date&apos;);\n *  $required = array(&apos;name&apos;, &apos;email&apos;, &apos;alias&apos;, &apos;pwd&apos;);\n *  $sanitize = array(&apos;alias&apos;);\n *\n *  $validator = new FormValidator($validations, $required, $sanitize);\n *                  \n *  if($validator-&amp;gt;validate($_POST))\n *  {\n *      $_POST = $validator-&amp;gt;sanitize($_POST);\n *      // now do your saving, $_POST has been sanitized.\n *      die($validator-&amp;gt;getScript().&quot;&amp;lt;script type=&apos;text/javascript&apos;&amp;gt;alert(&apos;saved changes&apos;);&amp;lt;/script&amp;gt;&quot;);\n *  }\n *  else\n *  {\n *      die($validator-&amp;gt;getScript());\n *  }   \n *  \n * To validate just one element:\n * $validated = new FormValidator()-&amp;gt;validate(&apos;blah&lt;span class=&quot;hljs-doctag&quot;&gt;@bla&lt;/span&gt;.&apos;, &apos;email&apos;);\n * \n * To sanitize just one element:\n * $sanitized = new FormValidator()-&amp;gt;sanitize(&apos;&amp;lt;b&amp;gt;blah&amp;lt;/b&amp;gt;&apos;, &apos;string&apos;);\n * \n * &lt;span class=&quot;hljs-doctag&quot;&gt;@package&lt;/span&gt; pork\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@author&lt;/span&gt; SchizoDuckie\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@copyright&lt;/span&gt; SchizoDuckie 2008\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@version&lt;/span&gt; 1.0\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@access&lt;/span&gt; public\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;FormValidator&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$regexes&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt;(\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;date&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^[0-9]{1,2}[-/][0-9]{1,2}[-/][0-9]{4}\\$&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;amount&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^[-]?[0-9]+\\$&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;number&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^[-]?[0-9,]+\\$&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;alfanum&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^[0-9a-zA-Z ,.-_\\\\s\\?\\!]+\\$&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;not_empty&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;[a-z0-9A-Z]+&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;words&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^[A-Za-z]+[A-Za-z \\\\s]*\\$&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;phone&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^[0-9]{10,11}\\$&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;zipcode&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^[1-9][0-9]{3}[a-zA-Z]{2}\\$&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;plate&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^([0-9a-zA-Z]{2}[-]){2}[0-9a-zA-Z]{2}\\$&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;price&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^[0-9.,]*(([.,][-])|([.,][0-9]{2}))?\\$&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;2digitopt&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^\\d+(\\,\\d{2})?\\$&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;2digitforce&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^\\d+\\,\\d\\d\\$&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;anything&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^[\\d\\D]{1,}\\$&quot;&lt;/span&gt;\n    );\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$validations&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sanatations&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$mandatories&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$errors&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$corrects&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$fields&lt;/span&gt;;\n    \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__construct&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$validations&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;), &lt;span class=&quot;hljs-variable&quot;&gt;$mandatories&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;), &lt;span class=&quot;hljs-variable&quot;&gt;$sanatations&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;)\n    &lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;validations = &lt;span class=&quot;hljs-variable&quot;&gt;$validations&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;sanitations = &lt;span class=&quot;hljs-variable&quot;&gt;$sanitations&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;mandatories = &lt;span class=&quot;hljs-variable&quot;&gt;$mandatories&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;errors = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;corrects = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Validates an array of items (if needed) and returns true or false\n     *\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;validate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$items&lt;/span&gt;&lt;/span&gt;)\n    &lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;fields = &lt;span class=&quot;hljs-variable&quot;&gt;$items&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$havefailures&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$items&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_search&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;validations) === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_search&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;mandatories) === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) \n            {\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;corrects[] = &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;validateItem&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;validations[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;]);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$havefailures&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;addError&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;validations[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;]);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            {\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;corrects[] = &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;;\n            }\n        }\n    \n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(!&lt;span class=&quot;hljs-variable&quot;&gt;$havefailures&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     *\n     *  Adds unvalidated class to thos elements that are not validated. Removes them from classes that are.\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getScript&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;errors))\n        {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$errors&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;errors &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;) { &lt;span class=&quot;hljs-variable&quot;&gt;$errors&lt;/span&gt;[] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;INPUT[name=&lt;span class=&quot;hljs-subst&quot;&gt;{$key}&lt;/span&gt;]&apos;&quot;&lt;/span&gt;; }\n\n            &lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;$$(&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;implode&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$errors&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&apos;).addClass(&quot;unvalidated&quot;);&apos;&lt;/span&gt;; \n            &lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt; .= &lt;span class=&quot;hljs-string&quot;&gt;&quot;new FormValidator().showMessage();&quot;&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;corrects))\n        {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$corrects&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;corrects &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;) { &lt;span class=&quot;hljs-variable&quot;&gt;$corrects&lt;/span&gt;[] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;INPUT[name=&lt;span class=&quot;hljs-subst&quot;&gt;{$key}&lt;/span&gt;]&apos;&quot;&lt;/span&gt;; }\n            &lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt; .= &lt;span class=&quot;hljs-string&quot;&gt;&apos;$$(&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;implode&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$corrects&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&apos;).removeClass(&quot;unvalidated&quot;);&apos;&lt;/span&gt;;   \n        }\n        &lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;script type=&apos;text/javascript&apos;&amp;gt;&lt;span class=&quot;hljs-subst&quot;&gt;{$output}&lt;/span&gt; &amp;lt;/script&amp;gt;&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt;);\n    }\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     *\n     * Sanitizes an array of items according to the $this-&amp;gt;sanitations\n     * sanitations will be standard of type string, but can also be specified.\n     * For ease of use, this syntax is accepted:\n     * $sanitations = array(&apos;fieldname&apos;, &apos;otherfieldname&apos;=&amp;gt;&apos;float&apos;);\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sanitize&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$items&lt;/span&gt;&lt;/span&gt;)\n    &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$items&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_search&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;sanitations) === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_key_exists&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;sanitations)) &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$items&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;] = &lt;span class=&quot;hljs-built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sanitizeItem&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;validations[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;]);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$items&lt;/span&gt;);\n    }\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     *\n     * Adds an error to the errors array.\n     */&lt;/span&gt; \n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;addError&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;&lt;/span&gt;)\n    &lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;errors[&lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     *\n     * Sanitize a single var according to $type.\n     * Allows for static calling to allow simple sanitization\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sanitizeItem&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;&lt;/span&gt;)\n    &lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable&quot;&gt;$flags&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;url&apos;&lt;/span&gt;:\n                &lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt; = FILTER_SANITIZE_URL;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;int&apos;&lt;/span&gt;:\n                &lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt; = FILTER_SANITIZE_NUMBER_INT;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;float&apos;&lt;/span&gt;:\n                &lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt; = FILTER_SANITIZE_NUMBER_FLOAT;\n                &lt;span class=&quot;hljs-variable&quot;&gt;$flags&lt;/span&gt; = FILTER_FLAG_ALLOW_FRACTION | FILTER_FLAG_ALLOW_THOUSAND;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;email&apos;&lt;/span&gt;:\n                &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;254&lt;/span&gt;);\n                &lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt; = FILTER_SANITIZE_EMAIL;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:\n                &lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt; = FILTER_SANITIZE_STRING;\n                &lt;span class=&quot;hljs-variable&quot;&gt;$flags&lt;/span&gt; = FILTER_FLAG_NO_ENCODE_QUOTES;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n             \n        }\n        &lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;filter_var&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$flags&lt;/span&gt;);        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt;);\n    }\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;/** \n     *\n     * Validates a single var according to $type.\n     * Allows for static calling to allow simple validation.\n     *\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;validateItem&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;&lt;/span&gt;)\n    &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_key_exists&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;hljs-variable&quot;&gt;$regexes&lt;/span&gt;))\n        {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$returnval&lt;/span&gt; =  &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;filter_var&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;, FILTER_VALIDATE_REGEXP, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;options&quot;&lt;/span&gt;=&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;regexp&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;!&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;hljs-variable&quot;&gt;$regexes&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&apos;!i&apos;&lt;/span&gt;))) !== &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$returnval&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;email&apos;&lt;/span&gt;:\n                &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;254&lt;/span&gt;);\n                &lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt; = FILTER_VALIDATE_EMAIL;    \n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;int&apos;&lt;/span&gt;:\n                &lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt; = FILTER_VALIDATE_INT;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;boolean&apos;&lt;/span&gt;:\n                &lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt; = FILTER_VALIDATE_BOOLEAN;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ip&apos;&lt;/span&gt;:\n                &lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt; = FILTER_VALIDATE_IP;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;url&apos;&lt;/span&gt;:\n                &lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt; = FILTER_VALIDATE_URL;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; : &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;filter_var&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$filter&lt;/span&gt;) !== &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }       \n    \n\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Of course, keep in mind that you need to do your sql query escaping too depending on what type of db your are using (mysql_real_escape_string() is useless for an sql server for instance). You probably want to handle this automatically at your appropriate application layer like an ORM. Also, as mentioned above: for outputting to html use the other php dedicated functions like htmlspecialchars ;)&lt;/p&gt;\n&lt;p&gt;For really allowing HTML input with like stripped classes and/or tags depend on one of the dedicated xss validation packages. DO NOT WRITE YOUR OWN REGEXES TO PARSE HTML!&lt;/p&gt;\n    ","\n&lt;p&gt;No, there is not.&lt;/p&gt;\n&lt;p&gt;First of all, SQL injection is an input filtering problem, and XSS is an output escaping one - so you wouldn&apos;t even execute these two operations at the same time in the code lifecycle.&lt;/p&gt;\n&lt;p&gt;Basic rules of thumb&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;For SQL query, bind parameters&lt;/li&gt;\n&lt;li&gt;Use &lt;a href=&quot;https://www.php.net/manual/en/function.strip-tags.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;strip_tags()&lt;/code&gt;&lt;/a&gt; to filter out unwanted HTML&lt;/li&gt;\n&lt;li&gt;Escape all other output with &lt;a href=&quot;https://www.php.net/manual/en/function.htmlspecialchars.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;htmlspecialchars()&lt;/code&gt;&lt;/a&gt; and be mindful of the 2nd and 3rd parameters here.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;To address the XSS issue, take a look at &lt;a href=&quot;http://www.htmlpurifier.org&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML Purifier&lt;/a&gt;. It is fairly configurable and has a decent track record.&lt;/p&gt;\n&lt;p&gt;As for the SQL injection attacks, the solution is to use prepared statements. The &lt;a href=&quot;http://www.php.net/pdo&quot; rel=&quot;nofollow noreferrer&quot;&gt;PDO library&lt;/a&gt; and mysqli extension support these.&lt;/p&gt;\n    ","\n&lt;p&gt;PHP 5.2 introduced the &lt;a href=&quot;http://php.net/manual/en/function.filter-var.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;filter_var&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;\n&lt;p&gt;It supports a great deal of &lt;code&gt;SANITIZE&lt;/code&gt;, &lt;code&gt;VALIDATE&lt;/code&gt; filters.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;h2&gt; Methods for sanitizing user input with PHP:&lt;/h2&gt;\n&lt;/blockquote&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;h3&gt;Use Modern Versions of MySQL and PHP.&lt;/h3&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Set charset explicitly:&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;pre&gt;$mysqli-&amp;gt;set_charset(&quot;utf8&quot;);&lt;/pre&gt;&lt;sup&gt;&lt;a href=&quot;http://php.net/manual/en/mysqli.set-charset.php&quot; rel=&quot;noreferrer&quot;&gt;manual&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;\n&lt;li&gt;&lt;pre&gt;$pdo = new PDO(&apos;mysql:host=localhost;dbname=testdb;charset=UTF8&apos;, $user, $password);&lt;/pre&gt;&lt;sup&gt;&lt;a href=&quot;http://php.net/manual/en/pdo.construct.php&quot; rel=&quot;noreferrer&quot;&gt;manual&lt;/a&gt;&lt;/sup&gt; &lt;/li&gt;\n&lt;li&gt;&lt;pre&gt;$pdo-&amp;gt;exec(&quot;set names utf8&quot;);&lt;/pre&gt;&lt;sup&gt;&lt;a href=&quot;http://php.net/manual/en/pdo.exec.php&quot; rel=&quot;noreferrer&quot;&gt;manual&lt;/a&gt;&lt;/sup&gt;  &lt;/li&gt;\n&lt;li&gt;&lt;pre&gt;$pdo = new PDO(\n&quot;mysql:host=$host;dbname=$db&quot;, $user, $pass, \narray(\nPDO::ATTR_ERRMODE =&amp;gt; PDO::ERRMODE_EXCEPTION,\nPDO::MYSQL_ATTR_INIT_COMMAND =&amp;gt; &quot;SET NAMES utf8&quot;\n)\n);&lt;/pre&gt;&lt;sup&gt;&lt;a href=&quot;http://php.net/manual/en/ref.pdo-mysql.php&quot; rel=&quot;noreferrer&quot;&gt;manual&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;\n&lt;li&gt;&lt;pre&gt;&lt;s&gt;mysql_set_charset(&apos;utf8&apos;)&lt;/s&gt;&lt;/pre&gt;  &lt;sup&gt;[deprecated in PHP 5.5.0, removed in PHP 7.0.0].&lt;/sup&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Use secure charsets:&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Select utf8, latin1, ascii.., dont use vulnerable charsets big5, cp932, gb2312, gbk, sjis.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Use spatialized function:&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/mysqli.prepare.php&quot; rel=&quot;noreferrer&quot;&gt;MySQLi prepared statements:&lt;/a&gt;&lt;br&gt;\n\n&lt;pre&gt;$stmt = $mysqli-&amp;gt;prepare(&apos;SELECT * FROM test WHERE name = ? LIMIT 1&apos;); &lt;br&gt;$param = &quot;&apos; OR 1=1 /*&quot;;&lt;br&gt;$stmt-&amp;gt;bind_param(&apos;s&apos;, $param);&lt;br&gt;$stmt-&amp;gt;execute();&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/class.pdo.php&quot; rel=&quot;noreferrer&quot;&gt;PDO::quote()&lt;/a&gt; - places quotes around the input string (if required) and escapes special characters within the input string, using a quoting style appropriate to the underlying driver:&lt;br&gt;&lt;/p&gt;&lt;pre&gt;$pdo = new PDO(&apos;mysql:host=localhost;dbname=testdb;charset=UTF8&apos;, $user, $password);&lt;sup&gt;explicit set the character set&lt;/sup&gt;&lt;br&gt;$pdo-&amp;gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false);&lt;sup&gt;disable emulating prepared statements to prevent  fallback to emulating statements that MySQL can&apos;t prepare natively (to prevent injection)&lt;/sup&gt;&lt;br&gt;$var  = $pdo-&amp;gt;quote(&quot;&apos; OR 1=1 /*&quot;);&lt;sup&gt;not only escapes the literal, but also quotes it (in single-quote &apos; characters)&lt;/sup&gt;\n$stmt = $pdo-&amp;gt;query(&quot;SELECT * FROM test WHERE name = $var LIMIT 1&quot;);\n&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/pdo.prepare.php&quot; rel=&quot;noreferrer&quot;&gt;PDO Prepared Statements&lt;/a&gt;: vs MySQLi prepared statements supports more database drivers and named parameters: &lt;br&gt;&lt;/p&gt;&lt;pre&gt;$pdo = new PDO(&apos;mysql:host=localhost;dbname=testdb;charset=UTF8&apos;, $user, $password);&lt;sup&gt;explicit set the character set&lt;/sup&gt;&lt;br&gt;$pdo-&amp;gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false);&lt;sup&gt;disable emulating prepared statements to prevent  fallback to emulating statements that MySQL can&apos;t prepare natively (to prevent injection)&lt;/sup&gt;\n$stmt = $pdo-&amp;gt;prepare(&apos;SELECT * FROM test WHERE name = ? LIMIT 1&apos;);\n$stmt-&amp;gt;execute([&quot;&apos; OR 1=1 /*&quot;]);&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/function.mysql-real-escape-string.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;s&gt;mysql_real_escape_string&lt;/s&gt;&lt;/a&gt; &lt;sup&gt;[deprecated in PHP 5.5.0, removed in PHP 7.0.0].&lt;/sup&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/mysqli.real-escape-string.php&quot; rel=&quot;noreferrer&quot;&gt;mysqli_real_escape_string&lt;/a&gt; Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection. But recommended to use Prepared Statements because they are not simply escaped strings, a statement comes up with a complete query execution plan, including which tables and indexes it would use, it is a optimized way.&lt;/li&gt;\n&lt;li&gt;Use single quotes (&apos; &apos;) around your variables inside your query.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Check the variable contains what you are expecting for:&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you are expecting an integer, use:\n\n&lt;pre&gt;ctype_digit  Check for numeric character(s);&lt;br&gt;$value = (int) $value;&lt;br&gt;$value = intval($value);&lt;br&gt;$var = filter_var(&apos;0755&apos;, FILTER_VALIDATE_INT, $options);&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;For Strings use:\n&lt;pre&gt;is_string()  Find whether the type of a variable is string&lt;/pre&gt;&lt;br&gt;Use &lt;a href=&quot;http://php.net/manual/en/ref.filter.php&quot; rel=&quot;noreferrer&quot;&gt;Filter Function&lt;/a&gt; filter_var()  filters a variable with a specified filter:&lt;br&gt;&lt;pre&gt;$email = filter_var($email, FILTER_SANITIZE_EMAIL);&lt;br&gt;$newstr = filter_var($str, FILTER_SANITIZE_STRING);&lt;/pre&gt;&lt;a href=&quot;https://secure.php.net/manual/en/filter.filters.sanitize.php&quot; rel=&quot;noreferrer&quot;&gt;more predefined filters&lt;/a&gt;&lt;br&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/function.filter-input.php&quot; rel=&quot;noreferrer&quot;&gt;filter_input()&lt;/a&gt;  Gets a specific external variable by name and optionally filters it:&lt;pre&gt;$search_html = filter_input(INPUT_GET, &apos;search&apos;, FILTER_SANITIZE_SPECIAL_CHARS);&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/function.preg-match.php&quot; rel=&quot;noreferrer&quot;&gt;preg_match()&lt;/a&gt;  Perform a regular expression match;&lt;br&gt;&lt;/li&gt;\n&lt;li&gt;Write Your own validation function.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;One trick that can help in the specific circumstance where you have a page like &lt;code&gt;/mypage?id=53&lt;/code&gt; and you use the id in a WHERE clause is to ensure that id definitely is an integer, like so:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;])) {\n  &lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;];\n  &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;settype&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;integer&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM mytable WHERE id = &apos;&lt;span class=&quot;hljs-subst&quot;&gt;$id&lt;/span&gt;&apos;&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-comment&quot;&gt;# now use the result&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But of course that only cuts out one specific attack, so read all the other answers. (And yes I know that the code above isn&apos;t great, but it shows the specific defence.)&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s no catchall function, because there are multiple concerns to be addressed.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;SQL Injection&lt;/strong&gt; - Today, generally, every PHP project should be using &lt;a href=&quot;http://php.net/manual/en/pdo.prepared-statements.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;prepared statements via PHP Data Objects (PDO)&lt;/a&gt; as a best practice, &lt;em&gt;preventing an error from a stray quote as well as a full-featured solution against injection&lt;/em&gt;. It&apos;s also the most flexible &amp;amp; secure way to access your database.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Check out &lt;a href=&quot;https://phpdelusions.net/pdo&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;(The only proper) PDO tutorial&lt;/em&gt;&lt;/a&gt; for pretty much everything you need to know about PDO. (Sincere thanks to top SO contributor, @YourCommonSense, for this great resource on the subject.)&lt;/p&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;strong&gt;XSS - Sanitize data on the way in...&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://htmlpurifier.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML Purifier&lt;/a&gt; has been around a long time and is still actively updated. You can use it to sanitize malicious input, while still allowing a generous &amp;amp; configurable whitelist of tags. Works great with many WYSIWYG editors, but it might be heavy for some use cases.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In other instances, where we don&apos;t want to accept HTML/Javascript at all, I&apos;ve found this simple function useful (and has passed multiple audits against XSS):&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Prevent XSS input */&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sanitizeXSS&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;   = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;filter_input_array&lt;/span&gt;(INPUT_GET, FILTER_SANITIZE_STRING);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;  = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;filter_input_array&lt;/span&gt;(INPUT_POST, FILTER_SANITIZE_STRING);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$_REQUEST&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;)&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt; + (&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;)&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt; + (&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;)&lt;span class=&quot;hljs-variable&quot;&gt;$_REQUEST&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;&lt;strong&gt;XSS - Sanitize data on the way out...&lt;/strong&gt; unless you guarantee the data was properly sanitized before you add it to your database, you&apos;ll need to sanitize it before displaying it to your user, we can leverage these useful PHP functions:&lt;/li&gt;\n&lt;/ol&gt;\n&lt;ul&gt;\n&lt;li&gt;When you call &lt;code&gt;echo&lt;/code&gt; or &lt;code&gt;print&lt;/code&gt; to display user-supplied values, use &lt;a href=&quot;http://php.net/manual/function.htmlspecialchars.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;htmlspecialchars&lt;/code&gt;&lt;/a&gt; unless the data was properly sanitized safe and is allowed to display HTML.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/function.json-encode.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;json_encode&lt;/code&gt;&lt;/a&gt; is a safe way to provide user-supplied values from PHP to Javascript&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ol start=&quot;5&quot;&gt;\n&lt;li&gt;&lt;strong&gt;Do you call external shell commands using &lt;a href=&quot;http://php.net/manual/en/function.exec.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://php.net/manual/en/function.system.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;system()&lt;/code&gt;&lt;/a&gt; functions, or to the &lt;a href=&quot;http://php.net/manual/en/language.operators.execution.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;backtick&lt;/code&gt;&lt;/a&gt; operator?&lt;/strong&gt; If so, in addition to SQL Injection &amp;amp; XSS you might have an additional concern to address, &lt;em&gt;users running malicious commands on your server&lt;/em&gt;. You need to use &lt;a href=&quot;http://php.net/manual/en/function.escapeshellcmd.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;escapeshellcmd&lt;/code&gt;&lt;/a&gt; if you&apos;d like to escape the entire command OR &lt;a href=&quot;http://php.net/manual/en/function.escapeshellarg.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;escapeshellarg&lt;/code&gt;&lt;/a&gt; to escape individual arguments.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;What you are describing here is two separate issues: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Sanitizing / filtering of user input data.&lt;/li&gt;\n&lt;li&gt;Escaping output.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;1) User input should always be assumed to be bad.&lt;/p&gt;\n\n&lt;p&gt;Using prepared statements, or/and filtering with mysql_real_escape_string is definitely a must.\nPHP also has filter_input built in which is a good place to start.&lt;/p&gt;\n\n&lt;p&gt;2) This is a large topic, and it depends on the context of the data being output. For HTML there are solutions such as htmlpurifier out there.\nas a rule of thumb, always escape anything you output.&lt;/p&gt;\n\n&lt;p&gt;Both issues are far too big to go into in a single post, but there are lots of posts which go into more detail:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://shiflett.org/articles&quot; rel=&quot;noreferrer&quot;&gt;Methods PHP output&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.lazycat.org/php-output-escaping.html&quot; rel=&quot;noreferrer&quot;&gt;Safer PHP output&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re using PostgreSQL, the input from PHP can be escaped with &lt;code&gt;pg_escape_literal()&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$username&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pg_escape_literal&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;username&apos;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;From the &lt;a href=&quot;https://php.net/manual/es/function.pg-escape-literal.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;pg_escape_literal()&lt;/code&gt; escapes a literal for querying the PostgreSQL database. It returns an escaped literal in the PostgreSQL format.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;h1&gt;You never sanitize input.&lt;/h1&gt;\n&lt;h1&gt;You always sanitize output.&lt;/h1&gt;\n&lt;p&gt;The transforms you apply to data to make it safe for inclusion in an SQL statement are completely different from those you apply for inclusion in HTML are completely different from those you apply for inclusion in Javascript are completely different from those you apply for inclusion in LDIF are completely different from those you apply to inclusion in CSS are completely different from those you apply to inclusion in an Email....&lt;/p&gt;\n&lt;p&gt;By all means &lt;a href=&quot;http://symcbean.blogspot.co.uk/2017/07/validate-input-escape-output.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;validate input&lt;/a&gt; - decide whether you should accept it for further processing or tell the user it is unacceptable. But don&apos;t apply any change to representation of the data until it is about to leave PHP land.&lt;/p&gt;\n&lt;p&gt;A long time ago someone tried to invent a one-size fits all mechanism for escaping data and we ended up with &quot;&lt;a href=&quot;http://php.net/manual/en/security.magicquotes.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;magic_quotes&lt;/a&gt;&quot; which didn&apos;t properly escape data for all output targets and resulted in different installation requiring different code to work.&lt;/p&gt;\n    ","\n&lt;p&gt;Easiest way to avoid mistakes in sanitizing input and escaping data is using PHP framework like &lt;a href=&quot;http://symfony.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Symfony&lt;/a&gt;, &lt;a href=&quot;http://nette.org/en/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Nette&lt;/a&gt; etc. or part of that framework (templating engine, database layer, ORM).&lt;/p&gt;\n\n&lt;p&gt;Templating engine like &lt;a href=&quot;http://twig.sensiolabs.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Twig&lt;/a&gt; or Latte has output escaping on by default - you don&apos;t have to solve manually if you have properly escaped your output depending on context (HTML or Javascript part of web page).&lt;/p&gt;\n\n&lt;p&gt;Framework is automatically sanitizing input and you should&apos;t use $_POST, $_GET or $_SESSION variables directly, but through mechanism like routing, session handling etc.&lt;/p&gt;\n\n&lt;p&gt;And for database (model) layer there are ORM frameworks like Doctrine or wrappers around PDO like Nette Database.&lt;/p&gt;\n\n&lt;p&gt;You can read more about it here - &lt;a href=&quot;https://stackoverflow.com/questions/2964140/what-is-a-framework-what-does-it-do-why-do-we-need-a-framework&quot;&gt;What is a software framework?&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Just wanted to add that on the subject of output escaping, if you use php DOMDocument to make your html output it will automatically escape in the right context. An attribute (value=&quot;&quot;) and the inner text of a &amp;lt;span&amp;gt; are not equal.\nTo be safe against XSS read this:\n&lt;a href=&quot;https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet&quot; rel=&quot;nofollow&quot;&gt;OWASP XSS Prevention Cheat Sheet&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;There is the filter extension (&lt;a href=&quot;http://devolio.com/blog/archives/413-Data-Filtering-Using-PHPs-Filter-Functions-Part-one.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;howto-link&lt;/a&gt;, &lt;a href=&quot;http://php.net/filter&quot; rel=&quot;nofollow noreferrer&quot;&gt;manual&lt;/a&gt;), which works pretty well with all GPC variables. It&apos;s not a magic-do-it-all thing though, you will still have to use it.&lt;/p&gt;\n    ","\n&lt;p&gt;Use This trim white space and remove non-printable character&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt; = trim(preg_replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/[[:^print:]]/&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Using PDO or MySQLi isn&apos;t enough.  If you build your SQL statements with untrusted data, like &lt;code&gt;select * from users where name=&apos;$name&apos;&lt;/code&gt;, then it doesn&apos;t matter if you use PDO or MySQLi or MySQL.  You are still in danger.  You must use parametrized queries or, if you must, use escaping mechanisms on your data, but that is much less preferable.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8454/andy-lester&quot; title=&quot;87,286 reputation&quot; class=&quot;comment-user&quot;&gt;Andy Lester&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31018541_129677&quot;&gt;&lt;span title=&quot;2013-12-20 17:01:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 20, 2013 at 17:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AndyLester Are you implying that someone uses PDO without prepared statements? :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user1537415&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34668289_129677&quot;&gt;&lt;span title=&quot;2014-03-30 14:20:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 30, 2014 at 14:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;m saying that &quot;Use PDO or MySQLi&quot; is not information enough to explain to novices on how to safely use them.  You and I know that prepared statements matter, but I do not assume that everyone who reads this question will know it.  That is why I added the explicit instructions.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8454/andy-lester&quot; title=&quot;87,286 reputation&quot; class=&quot;comment-user&quot;&gt;Andy Lester&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34678575_129677&quot;&gt;&lt;span title=&quot;2014-03-30 22:10:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 30, 2014 at 22:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Andy&apos;s comment is entirely valid. I converted my mysql website to PDO recently thinking that I was now somehow safe from injection attacks. It was only during the process I realised that some of my sql statements were still built using user input. I then fixed that using prepared statements. To a complete novice, it&apos;s not fully clear that there is a distinction as many experts throw out the comment about using PDO but don&apos;t specify the need for prepared statements. The assumption being that this is obvious. But not to a novice.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2576839/ghostrider&quot; title=&quot;2,025 reputation&quot; class=&quot;comment-user&quot;&gt;GhostRider&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment36710174_129677&quot;&gt;&lt;span title=&quot;2014-05-25 08:15:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 25, 2014 at 8:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Christian: GhostRider and AndyLester are right. Let this be a lesson in communication. I was a novice once and it sucked because experts flat out don&apos;t know how to communicate.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/508558/ocdev&quot; title=&quot;2,181 reputation&quot; class=&quot;comment-user&quot;&gt;OCDev&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42058469_129677&quot;&gt;&lt;span title=&quot;2014-11-04 13:17:57Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 4, 2014 at 13:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;This means that every single echo or print statement should use htmlspecialchars&quot; - of course, you mean &quot;every ... statement outputting user input&quot;; htmlspecialchars()-ifying &quot;echo &apos;Hello, world!&apos;;&quot; would be crazy ;)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5058/bobby-jack&quot; title=&quot;15,252 reputation&quot; class=&quot;comment-user&quot;&gt;Bobby Jack&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment87791_130323&quot;&gt;&lt;span title=&quot;2008-10-20 13:32:42Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 20, 2008 at 13:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;There&apos;s one case where I think filtering is the right solution: UTF-8. You don&apos;t want invalid UTF-8 sequences all over your application (you might get different error recovery depending on code path), and UTF-8 can be filtered (or rejected) easily.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/27009/kornel&quot; title=&quot;94,731 reputation&quot; class=&quot;comment-user&quot;&gt;Kornel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1243538_130323&quot;&gt;&lt;span title=&quot;2009-09-09 21:33:44Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 9, 2009 at 21:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@jbyrd - no, LIKE uses a specialised regexp language. You will have to escape your input string twice - once for the regexp and once for the mysql string encoding. It&apos;s code within code within code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/18180/troelskn&quot; title=&quot;111,411 reputation&quot; class=&quot;comment-user&quot;&gt;troelskn&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment9703718_130323&quot;&gt;&lt;span title=&quot;2011-10-29 20:02:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 29, 2011 at 20:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;At this moment &lt;code&gt;mysql_real_escape_string&lt;/code&gt; is deprecated. It&apos;s considered good practice nowadays to use &lt;a href=&quot;http://bobby-tables.com/php.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;prepared statements&lt;/a&gt; to prevent SQL injection. So switch to either MySQLi or PDO.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/258127/marcel-korpel&quot; title=&quot;21,315 reputation&quot; class=&quot;comment-user&quot;&gt;Marcel Korpel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment24457842_130323&quot;&gt;&lt;span title=&quot;2013-06-05 12:46:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 5, 2013 at 12:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Because you limit the attack surface. If you sanitize early (when input), you have to be certain that there are no other holes in the application where bad data could enter through. Whereas if you do it late, then your output function doesn&apos;t have to &quot;trust&quot; that it is given safe data - it simply assumes that everything is unsafe.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/18180/troelskn&quot; title=&quot;111,411 reputation&quot; class=&quot;comment-user&quot;&gt;troelskn&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment38425719_130323&quot;&gt;&lt;span title=&quot;2014-07-15 17:33:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 15, 2014 at 17:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Or visit the &lt;a href=&quot;http://php.net/manual/en/pdo.prepared-statements.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;official documentation&lt;/a&gt; and learn PDO and prepared statements.  Tiny learning curve, but if you know SQL pretty well, you&apos;ll have no trouble adapting.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/721073/a-coder&quot; title=&quot;7,134 reputation&quot; class=&quot;comment-user&quot;&gt;a coder&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment42353527_186129&quot;&gt;&lt;span title=&quot;2014-11-13 02:49:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 13, 2014 at 2:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For the specific case of SQL Injection, &lt;i&gt;this&lt;/i&gt; is the correct answer!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2224584/scott-arciszewski&quot; title=&quot;32,368 reputation&quot; class=&quot;comment-user&quot;&gt;Scott Arciszewski&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49156130_186129&quot;&gt;&lt;span title=&quot;2015-05-30 02:04:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 30, 2015 at 2:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that prepared statements don&apos;t add any security, parameterised queries do. They just happen to be very easy to use together in PHP.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/156755/basic&quot; title=&quot;25,765 reputation&quot; class=&quot;comment-user&quot;&gt;Basic&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment51964131_186129&quot;&gt;&lt;span title=&quot;2015-08-16 03:01:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 16, 2015 at 3:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Its not the only guaranteed way. Hex the input and unhex in query will prevent also. Also hex attacks are not possible if you use hexing right.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4346951/ramon-bakker&quot; title=&quot;1,063 reputation&quot; class=&quot;comment-user&quot;&gt;Ramon Bakker&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment58804099_186129&quot;&gt;&lt;span title=&quot;2016-02-22 15:50:47Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 22, 2016 at 15:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What if you&apos;re inputting something specialized, like email addresses or usernames?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1067120/abraham-brookes&quot; title=&quot;1,550 reputation&quot; class=&quot;comment-user&quot;&gt;Abraham Brookes&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment70292310_186129&quot;&gt;&lt;span title=&quot;2017-01-09 08:34:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 9, 2017 at 8:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This looks like it might be a handy script for validating inputs, but it is &lt;i&gt;completely&lt;/i&gt; irrelevant to the question.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3408/rjmunro&quot; title=&quot;26,105 reputation&quot; class=&quot;comment-user&quot;&gt;rjmunro&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8215311_130534&quot;&gt;&lt;span title=&quot;2011-08-01 14:50:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 1, 2011 at 14:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I dont agree with using ORM , its over engineering imo.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4034825/mercury&quot; title=&quot;1,803 reputation&quot; class=&quot;comment-user&quot;&gt;mercury&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122904103_130534&quot;&gt;&lt;span title=&quot;2021-10-12 01:40:56Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 12, 2021 at 1:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@PHP &amp;gt;= 8.0 gives error &lt;code&gt;Parse error: syntax error, unexpected &apos;-&amp;gt;&apos; (T_OBJECT_OPERATOR)&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/893513/reham-fahmy&quot; title=&quot;4,803 reputation&quot; class=&quot;comment-user&quot;&gt;Reham Fahmy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124172242_130534&quot;&gt;&lt;span title=&quot;2021-12-06 10:33:32Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 6, 2021 at 10:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Reham Fahmy: This code is from 2008. It&apos;s 2022 now. Don&apos;t Use this. Use a framework.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/18077/schizoduckie&quot; title=&quot;9,313 reputation&quot; class=&quot;comment-user&quot;&gt;SchizoDuckie&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128727816_130534&quot;&gt;&lt;span title=&quot;2022-07-06 10:10:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 6 at 10:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;So you only use strip_tags() or htmlspecialchars() when you know that the input has HTML that you want to get rid of or escape respectively - you are not using it for any security purpose right? Also, when you do the bind, what does it do for stuff like Bobby Tables? &quot;Robert&apos;); DROP TABLE Students;--&quot; Does it just escape the quotes?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/257233/robert-mark-bram&quot; title=&quot;6,374 reputation&quot; class=&quot;comment-user&quot;&gt;Robert Mark Bram&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17830457_129767&quot;&gt;&lt;span title=&quot;2012-10-29 01:16:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 29, 2012 at 1:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you have user data that will go into a database and later be displayed on web pages, isn&apos;t it usually read a lot more than it&apos;s written?  To me, it makes more sense to filter it once (as input) before you store it, instead of having to filter it every time you display it.  Am I missing something or did a bunch of people vote for needless performance overhead in this and the accepted answer?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/861178/jbo5112&quot; title=&quot;815 reputation&quot; class=&quot;comment-user&quot;&gt;jbo5112&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment35833848_129767&quot;&gt;&lt;span title=&quot;2014-04-30 14:07:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 30, 2014 at 14:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Best answer for me. It&apos;s short and addresses the question well if you ask me. Is it possible to attack PHP somehow via $_POST or $_GET with some injection or is this impossible?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1286942/jo-smo&quot; title=&quot;6,475 reputation&quot; class=&quot;comment-user&quot;&gt;Jo Smo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment38373342_129767&quot;&gt;&lt;span title=&quot;2014-07-14 12:26:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 14, 2014 at 12:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;oh yes,  the $post and $get arrays accept all characters, but some of those characters can be used against you if the character is allowed to be enumerated in the posted php page. so if you don&apos;t escape encapsulating characters ( like &quot;, &apos; and `  ) it could open up an attack vector. the ` character is often missed, and can be used to form command line execution hacks. Sanitation will prevent user input hacking, but will not help you with web application firewall hacks.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6797108/drtechno&quot; title=&quot;278 reputation&quot; class=&quot;comment-user&quot;&gt;drtechno&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102401125_129767&quot;&gt;&lt;span title=&quot;2019-09-18 16:43:38Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 18, 2019 at 16:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;there is no &quot;best way&quot; to do something like sanitizing input.. Use some library, html purifier is good. These libraries have been pounded on many times. So it is much more bulletproof than anything ou can come up yourself&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2976/paan&quot; title=&quot;6,996 reputation&quot; class=&quot;comment-user&quot;&gt;paan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31910_129760&quot;&gt;&lt;span title=&quot;2008-09-24 22:29:19Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 24, 2008 at 22:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See also &lt;a href=&quot;http://www.bioinformatics.org/phplabware/internal_utilities/htmLawed/&quot; rel=&quot;nofollow noreferrer&quot;&gt;bioinformatics.org/phplabware/internal_utilities/htmLawed&lt;/a&gt; . From my understanding WordPress uses an older version, &lt;a href=&quot;http://core.trac.wordpress.org/browser/tags/2.9.2/wp-includes/kses.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;core.trac.wordpress.org/browser/tags/2.9.2/wp-includes/kses.php&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3779/steve-clay&quot; title=&quot;8,370 reputation&quot; class=&quot;comment-user&quot;&gt;Steve Clay&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3047308_129760&quot;&gt;&lt;span title=&quot;2010-06-06 18:09:51Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jun 6, 2010 at 18:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The problem with wordpress is that its not necessarily a php-sql injection attack that causes database breaches. Miss programmed plugins that store data that an xml query reveals secrets is more problematic.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6797108/drtechno&quot; title=&quot;278 reputation&quot; class=&quot;comment-user&quot;&gt;drtechno&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102759306_129760&quot;&gt;&lt;span title=&quot;2019-10-01 17:44:20Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 1, 2019 at 17:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I use $id = intval($id) instead :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/617146/duc-tran&quot; title=&quot;5,608 reputation&quot; class=&quot;comment-user&quot;&gt;Duc Tran&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25936548_2405536&quot;&gt;&lt;span title=&quot;2013-07-22 06:58:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 22, 2013 at 6:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Casting integer is a good way to ensure only numerical data is inserted.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/272501/test&quot; title=&quot;16,680 reputation&quot; class=&quot;comment-user&quot;&gt;test&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment43615984_2405536&quot;&gt;&lt;span title=&quot;2014-12-22 03:03:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 22, 2014 at 3:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;$id = (int)$_GET[&apos;id&apos;]&lt;/code&gt; and &lt;code&gt;$que = sprintf(&apos;SELECT ... WHERE id=&quot;%d&quot;&apos;, $id)&lt;/code&gt; is good too&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1713660/vladkras&quot; title=&quot;15,463 reputation&quot; class=&quot;comment-user&quot;&gt;vladkras&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment68672400_2405536&quot;&gt;&lt;span title=&quot;2016-11-21 14:40:21Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 21, 2016 at 14:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;perhaps &lt;code&gt;if (isset($_GET[&apos;id&apos;]) { if !( (int) $_GET[&apos;id&apos;] === intval($_GET[&apos;id&apos;] ) ) { throw new \\InvalidArgumentException(&apos;Invalid page id format&apos;); } /* use a prepared statement for insert here */ };&lt;/code&gt; might suit you. I prefer to make no database call at all if I can identify that a parameter is definitely not valid based on known schema it is being handed to.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1288121/mopsyd&quot; title=&quot;1,819 reputation&quot; class=&quot;comment-user&quot;&gt;mopsyd&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115905151_2405536&quot;&gt;&lt;span title=&quot;2021-01-04 02:31:03Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 4, 2021 at 2:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;could mb_encode_numericentity be used instead? Since it encodes everything?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6797108/drtechno&quot; title=&quot;278 reputation&quot; class=&quot;comment-user&quot;&gt;drtechno&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102759061_47858335&quot;&gt;&lt;span title=&quot;2019-10-01 17:33:04Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 1, 2019 at 17:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@drtechno - &lt;code&gt;mb_encode_numericentity&lt;/code&gt; is discussed in the &lt;code&gt;htmlspecialchars&lt;/code&gt; link on #3 XSS&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1296209/webaholik&quot; title=&quot;1,400 reputation&quot; class=&quot;comment-user&quot;&gt;webaholik&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102796569_47858335&quot;&gt;&lt;span title=&quot;2019-10-02 21:11:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 2, 2019 at 21:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;From what I know, XSS is an output concern, not an input one.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11294698/bam&quot; title=&quot;83 reputation&quot; class=&quot;comment-user&quot;&gt;bam&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113725588_47858335&quot;&gt;&lt;span title=&quot;2020-10-12 07:46:48Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 12, 2020 at 7:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@bam - you are correct, just don&apos;t miss a spot! Luckily most frameworks will handle for us when used properly.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1296209/webaholik&quot; title=&quot;1,400 reputation&quot; class=&quot;comment-user&quot;&gt;webaholik&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113778838_47858335&quot;&gt;&lt;span title=&quot;2020-10-13 21:30:48Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 13, 2020 at 21:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://php.net/manual/es/function.pg-escape-literal.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;pg_escape_literal()&lt;/a&gt;&lt;/b&gt; is the recommended function to use for PostgreSQL.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1592648/cryptic-%e3%83%84&quot; title=&quot;14,925 reputation&quot; class=&quot;comment-user&quot;&gt;cryptic &lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49160706_30487039&quot;&gt;&lt;span title=&quot;2015-05-30 08:24:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 30, 2015 at 8:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;one problem with that is that its not always a database attack, and all user input should be protected from the system. not just one language type. So on your sites, when you enumerate your $_POST data, even with using binding, it could escape out enough to execute shell or even other php code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6797108/drtechno&quot; title=&quot;278 reputation&quot; class=&quot;comment-user&quot;&gt;drtechno&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102758972_48865993&quot;&gt;&lt;span title=&quot;2019-10-01 17:29:45Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 1, 2019 at 17:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;its not always a database attack&quot; : &quot;The transforms you apply to data to make it safe for inclusion in an SQL statement are completely different from those....&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/223992/symcbean&quot; title=&quot;46,700 reputation&quot; class=&quot;comment-user&quot;&gt;symcbean&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102778059_48865993&quot;&gt;&lt;span title=&quot;2019-10-02 10:55:12Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 2, 2019 at 10:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;all user input should be protected from the system&quot; : no the system should be protected from user input.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/223992/symcbean&quot; title=&quot;46,700 reputation&quot; class=&quot;comment-user&quot;&gt;symcbean&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102778074_48865993&quot;&gt;&lt;span title=&quot;2019-10-02 10:55:36Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 2, 2019 at 10:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;well I ran out of words, but yes the input needs to be prevented from effecting the system operation. to clarify this...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6797108/drtechno&quot; title=&quot;278 reputation&quot; class=&quot;comment-user&quot;&gt;drtechno&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102846994_48865993&quot;&gt;&lt;span title=&quot;2019-10-04 13:09:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 4, 2019 at 13:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Both input and output should be sanitized.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7082164/jsowa&quot; title=&quot;6,798 reputation&quot; class=&quot;comment-user&quot;&gt;Jsowa&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109025633_48865993&quot;&gt;&lt;span title=&quot;2020-05-06 12:56:05Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 6, 2020 at 12:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":410,"title":"How can I sanitize user input with PHP?","content":"\n                \n&lt;p&gt;Is there a catchall function somewhere that works well for sanitizing user input for SQL injection and XSS attacks, while still allowing certain types of HTML tags?&lt;/p&gt;\n    ","slug":"how-can-i-sanitize-user-input-with-php-1657387892329","postType":"QUESTION","createdAt":"2022-07-09T17:31:32.000Z","updatedAt":"2022-07-09T17:31:32.000Z","tags":[{"id":2186,"name":"xss","slug":"xss","createdAt":"2022-07-09T17:31:32.000Z","updatedAt":"2022-07-09T17:31:32.000Z","Questions_Tags":{"questionId":410,"tagId":2186}}]}]}},"__N_SSG":true}