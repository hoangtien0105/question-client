{"pageProps":{"data":{"count":1,"rows":[{"answer":["\n&lt;h3&gt;TL;DR&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;while(!feof)&lt;/code&gt; is wrong because it tests for something that is irrelevant and fails to test for something that you need to know. The result is that you are erroneously executing code that assumes that it is accessing data that was read successfully, when in fact this never happened.&lt;/p&gt;\n&lt;p&gt;I&apos;d like to provide an abstract, high-level perspective. So continue reading if you&apos;re interested in what &lt;code&gt;while(!feof)&lt;/code&gt; actually does.&lt;/p&gt;\n&lt;h3&gt;Concurrency and simultaneity&lt;/h3&gt;\n&lt;p&gt;I/O operations interact with the environment. The environment is not part of your program, and not under your control. The environment truly exists &quot;concurrently&quot; with your program. As with all things concurrent, questions about the &quot;current state&quot; don&apos;t make sense: There is no concept of &quot;simultaneity&quot; across concurrent events. Many properties of state simply don&apos;t &lt;em&gt;exist&lt;/em&gt; concurrently.&lt;/p&gt;\n&lt;p&gt;Let me make this more precise: Suppose you want to ask, &quot;do you have more data&quot;. You could ask this of a concurrent container, or of your I/O system. But the answer is generally unactionable, and thus meaningless. So what if the container says &quot;yes&quot;  by the time you try reading, it may no longer have data. Similarly, if the answer is &quot;no&quot;, by the time you try reading, data may have arrived. The conclusion is that there simply &lt;em&gt;is&lt;/em&gt; no property like &quot;I have data&quot;, since you cannot act meaningfully in response to any possible answer. (The situation is slightly better with buffered input, where you might conceivably get a &quot;yes, I have data&quot; that constitutes some kind of guarantee, but you would still have to be able to deal with the opposite case. And with output the situation is certainly just as bad as I described: you never know if that disk or that network buffer is full.)&lt;/p&gt;\n&lt;p&gt;So we conclude that it is impossible, and in fact un&lt;em&gt;reasonable&lt;/em&gt;, to ask an I/O system whether it &lt;em&gt;will be&lt;/em&gt; able to perform an I/O operation. The only possible way we can interact with it (just as with a concurrent container) is to &lt;em&gt;attempt&lt;/em&gt; the operation and check whether it succeeded or failed. At that moment where you interact with the environment, then and only then can you know whether the interaction was actually possible, and at that point you must commit to performing the interaction. (This is a &quot;synchronisation point&quot;, if you will.)&lt;/p&gt;\n&lt;h3&gt;EOF&lt;/h3&gt;\n&lt;p&gt;Now we get to EOF. EOF is the &lt;em&gt;response&lt;/em&gt; you get from an &lt;em&gt;attempted&lt;/em&gt; I/O operation. It means that you were trying to read or write something, but when doing so you failed to read or write any data, and instead the end of the input or output was encountered. This is true for essentially all the I/O APIs, whether it be the C standard library, C++ iostreams, or other libraries. As long as the I/O operations succeed, you simply &lt;em&gt;cannot know&lt;/em&gt; whether further, future operations will succeed. You &lt;em&gt;must&lt;/em&gt; always first try the operation and then respond to success or failure.&lt;/p&gt;\n&lt;h3&gt;Examples&lt;/h3&gt;\n&lt;p&gt;In each of the examples, note carefully that we &lt;em&gt;first&lt;/em&gt; attempt the I/O operation and &lt;em&gt;then&lt;/em&gt; consume the result if it is valid. Note further that we &lt;em&gt;always&lt;/em&gt; must use the result of the I/O operation, though the result takes different shapes and forms in each example.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;C stdio, read from a file:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;;) {\n      &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; n = fread(buf, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, bufsize, infile);\n      consume(buf, n);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;; }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result we must use is &lt;code&gt;n&lt;/code&gt;, the number of elements that were read (which may be as little as zero).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C stdio, &lt;code&gt;scanf&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, b, c; &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %d %d&quot;&lt;/span&gt;, &amp;amp;a, &amp;amp;b, &amp;amp;c) == &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; ) {\n      consume(a, b, c);\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result we must use is the return value of &lt;code&gt;scanf&lt;/code&gt;, the number of elements converted.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C++, iostreams formatted extraction:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n; &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; n; ) {\n      consume(n);\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result we must use is &lt;code&gt;std::cin&lt;/code&gt; itself, which can be evaluated in a boolean context and tells us whether the stream is still in the &lt;code&gt;good()&lt;/code&gt; state.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C++, iostreams getline:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; line; &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::getline(&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;cin&lt;/span&gt;, line); ) {\n      consume(line);\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result we must use is again &lt;code&gt;std::cin&lt;/code&gt;, just as before.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;POSIX, &lt;code&gt;write(2)&lt;/code&gt; to flush a buffer:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; * p = buf;\n  &lt;span class=&quot;hljs-type&quot;&gt;ssize_t&lt;/span&gt; n = bufsize;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;ssize_t&lt;/span&gt; k = bufsize; (k = write(fd, p, n)) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; p += k, n -= k) {}\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (n != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* error, failed to write complete buffer */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result we use here is &lt;code&gt;k&lt;/code&gt;, the number of bytes written. The point here is that we can only know how many bytes were written &lt;em&gt;after&lt;/em&gt; the write operation.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/getline.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getline()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *buffer = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; bufsiz = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;ssize_t&lt;/span&gt; nbytes;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((nbytes = getline(&amp;amp;buffer, &amp;amp;bufsiz, fp)) != &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;)\n  {\n      &lt;span class=&quot;hljs-comment&quot;&gt;/* Use nbytes of data in buffer */&lt;/span&gt;\n  }\n  &lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(buffer);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result we must use is &lt;code&gt;nbytes&lt;/code&gt;, the number of bytes up to and including the newline (or EOF if the file did not end with a newline).&lt;/p&gt;\n&lt;p&gt;Note that the function explicitly returns &lt;code&gt;-1&lt;/code&gt; (and not EOF!) when an error occurs or it reaches EOF.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;You may notice that we very rarely spell out the actual word &quot;EOF&quot;. We usually detect the error condition in some other way that is more immediately interesting to us (e.g. failure to perform as much I/O as we had desired). In every example there is some API feature that could tell us explicitly that the EOF state has been encountered, but this is in fact not a terribly useful piece of information. It is much more of a detail than we often care about. What matters is whether the I/O succeeded, more-so than how it failed.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A final example that actually queries the EOF state: Suppose you have a string and want to test that it represents an integer in its entirety, with no extra bits at the end except whitespace. Using C++ iostreams, it goes like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;   123   &quot;&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;// example&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;istringstream&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(input)&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; value;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (iss &amp;gt;&amp;gt; value &amp;gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::ws &amp;amp;&amp;amp; iss.get() == EOF) {\n      consume(value);\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// error, &quot;input&quot; is not parsable as an integer&lt;/span&gt;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;We use two results here. The first is &lt;code&gt;iss&lt;/code&gt;, the stream object itself, to check that the formatted extraction to &lt;code&gt;value&lt;/code&gt; succeeded. But then, after also consuming whitespace, we perform another I/O/ operation, &lt;code&gt;iss.get()&lt;/code&gt;, and expect it to fail as EOF, which is the case if the entire string has already been consumed by the formatted extraction.&lt;/p&gt;\n&lt;p&gt;In the C standard library you can achieve something similar with the &lt;code&gt;strto*l&lt;/code&gt; functions by checking that the end pointer has reached the end of the input string.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s wrong because (in the absence of a read error) it enters the loop one more time than the author expects.  If there is a read error, the loop never terminates.&lt;/p&gt;\n&lt;p&gt;Consider the following code:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* WARNING: demonstration of bad coding technique!! */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\nFILE *&lt;span class=&quot;hljs-title function_&quot;&gt;Fopen&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *path, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *mode)&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;\n{\n    FILE *in;\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; count;\n\n    in = argc &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ? Fopen(argv[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;) : &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;;\n    count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* WARNING: this is a bug */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( !feof(in) ) {  &lt;span class=&quot;hljs-comment&quot;&gt;/* This is WRONG! */&lt;/span&gt;\n        fgetc(in);\n        count++;\n    }\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Number of characters read: %u\\n&quot;&lt;/span&gt;, count);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; EXIT_SUCCESS;\n}\n\nFILE * &lt;span class=&quot;hljs-title function_&quot;&gt;Fopen&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *path, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *mode)&lt;/span&gt;\n{\n    FILE *f = fopen(path, mode);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( f == &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; ) {\n        perror(path);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(EXIT_FAILURE);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This program will consistently print one greater than the number of characters in the input stream (assuming no read errors).  Consider the case where the input stream is empty:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;$ ./a.out &amp;lt; /dev/null\nNumber of characters read: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In this case, &lt;code&gt;feof()&lt;/code&gt; is called before any data has been read, so it returns false.  The loop is entered, &lt;code&gt;fgetc()&lt;/code&gt; is called (and returns &lt;code&gt;EOF&lt;/code&gt;), and count is incremented.  Then &lt;code&gt;feof()&lt;/code&gt; is called and returns true, causing the loop to abort.&lt;/p&gt;\n&lt;p&gt;This happens in all such cases.  &lt;code&gt;feof()&lt;/code&gt; does not return true until &lt;strong&gt;after&lt;/strong&gt; a read on the stream encounters the end of file.  The purpose of &lt;code&gt;feof()&lt;/code&gt; is NOT to check if the next read will reach the end of file.  The purpose of &lt;code&gt;feof()&lt;/code&gt; is to determine the status of a previous read function\nand distinguish between an error condition and the end of the data stream.  If &lt;code&gt;fread()&lt;/code&gt; returns 0, you must use &lt;code&gt;feof&lt;/code&gt;/&lt;code&gt;ferror&lt;/code&gt; to decide whether an error occurred or if all of the data was consumed.  Similarly if &lt;code&gt;fgetc&lt;/code&gt; returns &lt;code&gt;EOF&lt;/code&gt;.  &lt;code&gt;feof()&lt;/code&gt; is only useful &lt;strong&gt;after&lt;/strong&gt; fread has returned zero or &lt;code&gt;fgetc&lt;/code&gt; has returned &lt;code&gt;EOF&lt;/code&gt;.  Before that happens, &lt;code&gt;feof()&lt;/code&gt; will always return 0.&lt;/p&gt;\n&lt;p&gt;It is always necessary to check the return value of a read (either an &lt;code&gt;fread()&lt;/code&gt;, or an &lt;code&gt;fscanf()&lt;/code&gt;, or an &lt;code&gt;fgetc()&lt;/code&gt;) before calling &lt;code&gt;feof()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Even worse, consider the case where a read error occurs.  In that case, &lt;code&gt;fgetc()&lt;/code&gt; returns &lt;code&gt;EOF&lt;/code&gt;, &lt;code&gt;feof()&lt;/code&gt; returns false, and the loop never terminates.  In all cases where &lt;code&gt;while(!feof(p))&lt;/code&gt; is used, there must be at least a check inside the loop for &lt;code&gt;ferror()&lt;/code&gt;, or at the very least the while condition should be replaced with &lt;code&gt;while(!feof(p) &amp;amp;&amp;amp; !ferror(p))&lt;/code&gt; or there is a very real possibility of an infinite loop, probably spewing all sorts of garbage as invalid data is being processed.&lt;/p&gt;\n&lt;p&gt;So, in summary, although I cannot state with certainty that there is never a situation in which it may be semantically correct to write &quot;&lt;code&gt;while(!feof(f))&lt;/code&gt;&quot; (although there &lt;strong&gt;must&lt;/strong&gt; be another check inside the loop with a break to avoid a infinite loop on a read error), it is the case that it is almost certainly always wrong.  And even if a case ever arose where it would be correct, it is so idiomatically wrong that it would not be the right way to write the code.  Anyone seeing that code should immediately hesitate and say, &quot;that&apos;s a bug&quot;.  And possibly slap the author (unless the author is your boss in which case discretion is advised.)&lt;/p&gt;\n    ","\n&lt;p&gt;No it&apos;s not always wrong. If your loop condition is &quot;while we haven&apos;t tried to read past end of file&quot; then you use &lt;code&gt;while (!feof(f))&lt;/code&gt;. This is however not a common loop condition - usually you want to test for something else (such as &quot;can I read more&quot;). &lt;code&gt;while (!feof(f))&lt;/code&gt; isn&apos;t wrong, it&apos;s just &lt;em&gt;used&lt;/em&gt; wrong.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;feof()&lt;/code&gt; indicates if one has tried to read past the end of file. That means it has little predictive effect: if it is true, you are sure that the next input operation will fail (you aren&apos;t sure the previous one failed BTW), but if it is false, you aren&apos;t sure the next input operation will succeed.  More over, input operations may fail for other reasons than the end of file (a format error for formatted input, a pure IO failure -- disk failure, network timeout -- for all input kinds), so even if you could be predictive about the end of file (and anybody who has tried to implement Ada one, which is predictive, will tell you it can complex if you need to skip spaces, and that it has undesirable effects on interactive devices -- sometimes forcing the input of the next line before starting the handling of the previous one), you would have to be able to handle a failure.&lt;/p&gt;\n\n&lt;p&gt;So the correct idiom in C is to loop with the IO operation success as loop condition, and then test the cause of the failure.  For instance:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (fgets(line, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(line), file)) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* note that fgets don&apos;t strip the terminating \\n, checking its\n       presence allow to handle lines longer that sizeof(line), not showed here */&lt;/span&gt;\n    ...\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ferror(file)) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;/* IO failure */&lt;/span&gt;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (feof(file)) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;/* format error (not possible with fgets, but would be with fscanf) or end of file */&lt;/span&gt;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n   &lt;span class=&quot;hljs-comment&quot;&gt;/* format error (not possible with fgets, but would be with fscanf) */&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;feof()&lt;/code&gt; is not very intuitive. In my very humble opinion, the &lt;code&gt;FILE&lt;/code&gt;&apos;s end-of-file state should be set to &lt;code&gt;true&lt;/code&gt; if any read operation results in the end of file being reached. Instead, you have to manually check if the end of file has been reached after each read operation. For example, something like this will work if reading from a text file using &lt;code&gt;fgetc()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n{\n  FILE *in = fopen(&lt;span class=&quot;hljs-string&quot;&gt;&quot;testfile.txt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c = fgetc(in);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (feof(in)) &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;, c);\n  }\n\n  fclose(in);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It would be great if something like this would work instead:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n{\n  FILE *in = fopen(&lt;span class=&quot;hljs-string&quot;&gt;&quot;testfile.txt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(!feof(in)) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;, fgetc(in));\n  }\n\n  fclose(in);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;a href=&quot;http://faq.cprogramming.com/cgi-bin/smartfaq.cgi?id=1043284351&amp;amp;answer=1046476070&quot; rel=&quot;nofollow noreferrer&quot;&gt;Why it&apos;s bad to use &lt;code&gt;feof()&lt;/code&gt; to control a loop&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1673391/grijesh-chauhan&quot; title=&quot;55,347 reputation&quot; class=&quot;comment-user&quot;&gt;Grijesh Chauhan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment28813351_5431941&quot;&gt;&lt;span title=&quot;2013-10-17 18:25:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 17, 2013 at 18:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;a href=&quot;http://stackoverflow.com/q/5605125/981959&quot;&gt;Why is iostream::eof inside a loop condition considered wrong?&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/981959/jonathan-wakely&quot; title=&quot;160,851 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Wakely&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment43046920_5431941&quot;&gt;&lt;span title=&quot;2014-12-04 09:30:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 4, 2014 at 9:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@CiaPan: I don&apos;t think that&apos;s true. Both C99 and C11 allow this.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/596781/kerrek-sb&quot; title=&quot;448,935 reputation&quot; class=&quot;comment-user&quot;&gt;Kerrek SB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment44792366_26557243&quot;&gt;&lt;span title=&quot;2015-01-29 12:10:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 29, 2015 at 12:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JonathanMee: It&apos;s bad for all the reasons I mention: you cannot look into the future. You cannot tell what will happen in the future.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/596781/kerrek-sb&quot; title=&quot;448,935 reputation&quot; class=&quot;comment-user&quot;&gt;Kerrek SB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment44967869_26557243&quot;&gt;&lt;span title=&quot;2015-02-03 20:52:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 3, 2015 at 20:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JonathanMee: Yes, that would be appropriate, though usually you can combine this check into the operation (since most iostreams operations return the stream object, which itself has a boolean conversion), and that way you make it obvious that you&apos;re not ignoring the return value.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/596781/kerrek-sb&quot; title=&quot;448,935 reputation&quot; class=&quot;comment-user&quot;&gt;Kerrek SB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment44968264_26557243&quot;&gt;&lt;span title=&quot;2015-02-03 21:02:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 3, 2015 at 21:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Third paragraph is remarkably misleading/inaccurate for an accepted and highly upvoted answer. &lt;code&gt;feof()&lt;/code&gt; does not &quot;ask the I/O system whether it has more data&quot;. &lt;code&gt;feof()&lt;/code&gt;, according to the (Linux) &lt;i&gt;manpage&lt;/i&gt;: &quot;tests the end-of-file indicator for the stream pointed to by stream, returning nonzero if it is set.&quot; (also, an explicit call to &lt;code&gt;clearerr()&lt;/code&gt; is the only way to reset this indicator); In this respect, William Pursell&apos;s answer is much better.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4083309/arne-vogel&quot; title=&quot;6,036 reputation&quot; class=&quot;comment-user&quot;&gt;Arne Vogel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91461523_26557243&quot;&gt;&lt;span title=&quot;2018-09-10 11:53:43Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 10, 2018 at 11:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MinhNghĩa: That&apos;s a blocking method, right? That&apos;s basically just a convenience wrapper around &quot;try to read (blocking if necessary), then report the success state, and if successful store the read result in a special buffer&quot;. You can implement the same in C and in C++ if you like.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/596781/kerrek-sb&quot; title=&quot;448,935 reputation&quot; class=&quot;comment-user&quot;&gt;Kerrek SB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment99383497_26557243&quot;&gt;&lt;span title=&quot;2019-05-31 09:30:50Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 31, 2019 at 9:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You should add an example of correct code, as I imagine lots of people will come here looking for a quick fix.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1310220/jleahy&quot; title=&quot;15,220 reputation&quot; class=&quot;comment-user&quot;&gt;jleahy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25649185_5432517&quot;&gt;&lt;span title=&quot;2013-07-12 16:27:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 12, 2013 at 16:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Is this different from &lt;code&gt;file.eof()&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3469725/thomas&quot; title=&quot;5,523 reputation&quot; class=&quot;comment-user&quot;&gt;Thomas&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39834351_5432517&quot;&gt;&lt;span title=&quot;2014-08-26 22:48:54Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 26, 2014 at 22:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Thomas:  I&apos;m not a C++ expert, but I believe file.eof() returns effectively the same result as &lt;code&gt;feof(file) || ferror(file)&lt;/code&gt;, so it is very different.  But this question is not intended to be applicable to C++.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140750/william-pursell&quot; title=&quot;191,413 reputation&quot; class=&quot;comment-user owner&quot;&gt;William Pursell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39835126_5432517&quot;&gt;&lt;span title=&quot;2014-08-26 23:36:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 26, 2014 at 23:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@m-ric that&apos;s not right either, because you&apos;ll still try to process a read that failed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5987/mark-ransom&quot; title=&quot;287,628 reputation&quot; class=&quot;comment-user&quot;&gt;Mark Ransom&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment47243784_5432517&quot;&gt;&lt;span title=&quot;2015-04-09 18:25:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 9, 2015 at 18:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;this is the actual correct answer. feof() is used to know the outcome of previous read attempt. Thus probably you don&apos;t want to use it as your loop break condition. +1&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1654526/jack&quot; title=&quot;1,401 reputation&quot; class=&quot;comment-user&quot;&gt;Jack&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment71004881_5432517&quot;&gt;&lt;span title=&quot;2017-01-28 16:06:29Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 28, 2017 at 16:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I wonder ... &lt;code&gt;f = fopen(&quot;A:\\\\bigfile&quot;); while (!feof(f)) { /* remove diskette */ }&lt;/code&gt; or (going to test this) &lt;code&gt;f = fopen(NETWORK_FILE); while (!feof(f)) { /* unplug network cable */ }&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/25324/pmg&quot; title=&quot;103,914 reputation&quot; class=&quot;comment-user&quot;&gt;pmg&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6149834_5432004&quot;&gt;&lt;span title=&quot;2011-03-25 11:53:26Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Mar 25, 2011 at 11:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@pmg: As said, &quot;not a common loop condition&quot; hehe. I can&apos;t really think of any case I&apos;ve needed it, usually I&apos;m interested in &quot;could I read what I wanted&quot; with all that implies of error handling&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/616700/erik&quot; title=&quot;85,188 reputation&quot; class=&quot;comment-user&quot;&gt;Erik&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6149866_5432004&quot;&gt;&lt;span title=&quot;2011-03-25 11:56:03Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Mar 25, 2011 at 11:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@pmg: As said, you rarely want &lt;code&gt;while(!eof(f))&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/616700/erik&quot; title=&quot;85,188 reputation&quot; class=&quot;comment-user&quot;&gt;Erik&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6150491_5432004&quot;&gt;&lt;span title=&quot;2011-03-25 12:41:07Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Mar 25, 2011 at 12:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;More accurately, the condition is &quot;while we haven&apos;t tried to read past the end of the file and there was no read error&quot;  &lt;code&gt;feof&lt;/code&gt; is not about detecting end of file; it is about determining whether a read was short because of an error or because the input is exhausted.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140750/william-pursell&quot; title=&quot;191,413 reputation&quot; class=&quot;comment-user owner&quot;&gt;William Pursell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25354945_5432004&quot;&gt;&lt;span title=&quot;2013-07-03 15:18:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 3, 2013 at 15:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Getting to the end of a file is not an error, so I question the phrasing &quot;input operations may fail for other reasons than the end of file&quot;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140750/william-pursell&quot; title=&quot;191,413 reputation&quot; class=&quot;comment-user owner&quot;&gt;William Pursell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17067852_9226199&quot;&gt;&lt;span title=&quot;2012-09-29 12:59:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 29, 2012 at 12:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@WilliamPursell, reaching the eof isn&apos;t necessarily an error, but being unable to do an input operation because of eof is one. And it is impossible in C to detect reliably the eof without having made an input operation fails.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/136208/aprogrammer&quot; title=&quot;49,714 reputation&quot; class=&quot;comment-user&quot;&gt;AProgrammer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17069404_9226199&quot;&gt;&lt;span title=&quot;2012-09-29 15:12:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 29, 2012 at 15:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Agree last &lt;code&gt;else&lt;/code&gt; not possible with &lt;code&gt;sizeof(line) &amp;gt;= 2&lt;/code&gt; and &lt;code&gt;fgets(line, sizeof(line), file)&lt;/code&gt; but possible with pathological &lt;code&gt;size &amp;lt;= 0&lt;/code&gt; and &lt;code&gt;fgets(line, size, file)&lt;/code&gt;.  Maybe even possible with &lt;code&gt;sizeof(line) == 1&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,312 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46775365_9226199&quot;&gt;&lt;span title=&quot;2015-03-26 21:21:03Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 26, 2015 at 21:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;All that &quot;predictive value&quot; talk... I never thought about it that way. In my world, &lt;code&gt;feof(f)&lt;/code&gt; does not PREDICT anything. It states that a PREVIOUS operation has hit the end of the file. Nothing more, nothing less. And if there was no previous operation (just opened it), it does not report end of file even if the file was empty to start with. So, apart of the concurrency explanation in another answer above, I do not think there is any reason not to loop on &lt;code&gt;feof(f)&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2225104/bittickler&quot; title=&quot;9,525 reputation&quot; class=&quot;comment-user&quot;&gt;BitTickler&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79746487_9226199&quot;&gt;&lt;span title=&quot;2017-09-24 20:36:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 24, 2017 at 20:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AProgrammer: A &quot;read up to N bytes&quot; request that yields zero, whether because of a &quot;permanent&quot; EOF or because no more data is available &lt;i&gt;yet&lt;/i&gt;, is not an error.  While feof() may not reliably predict that future requests will yield data, it may reliably indicate that future requests &lt;i&gt;won&apos;t&lt;/i&gt;.  Perhaps there should be a status function that would indicate &quot;It is plausible that future read requests will succeed&quot;, with semantics that after reading to the end of an ordinary file, a quality implementation should say future reads are unlikely to succeed &lt;i&gt;absent some reason to believe they might&lt;/i&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/363751/supercat&quot; title=&quot;73,697 reputation&quot; class=&quot;comment-user&quot;&gt;supercat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95812944_9226199&quot;&gt;&lt;span title=&quot;2019-02-03 15:49:48Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 3, 2019 at 15:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;printf(&quot;%c&quot;, fgetc(in));&lt;/code&gt;?  That&apos;s undefined behavior.  &lt;code&gt;fgetc()&lt;/code&gt; returns &lt;code&gt;int&lt;/code&gt;, not &lt;code&gt;char&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4756299/andrew-henle&quot; title=&quot;29,612 reputation&quot; class=&quot;comment-user&quot;&gt;Andrew Henle&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment110100280_62253295&quot;&gt;&lt;span title=&quot;2020-06-08 00:25:03Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 8, 2020 at 0:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AndrewHenle You&apos;re right! Changing &lt;code&gt;char c&lt;/code&gt; to &lt;code&gt;int c&lt;/code&gt; works! Thanks!!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/288271/scott-deagan&quot; title=&quot;187 reputation&quot; class=&quot;comment-user&quot;&gt;Scott Deagan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment110147138_62253295&quot;&gt;&lt;span title=&quot;2020-06-09 10:12:08Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 9, 2020 at 10:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The first example does &lt;i&gt;not&lt;/i&gt; work reliably when reading from a text file.  If you ever encounter a read error, the process will be stuck in an infinite loop with c constantly being set to EOF and feof constantly returning false.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140750/william-pursell&quot; title=&quot;191,413 reputation&quot; class=&quot;comment-user owner&quot;&gt;William Pursell&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment111681723_62253295&quot;&gt;&lt;span title=&quot;2020-07-29 15:01:57Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 29, 2020 at 15:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AndrewHenle Which part of &lt;code&gt;&quot;%c&quot;&lt;/code&gt; expects a &lt;code&gt;int&lt;/code&gt;, and not a &lt;code&gt;char&lt;/code&gt;, is hard to understand? Read the manpage or the C standard, any of them.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6082851/12431234123412341234123&quot; title=&quot;1,981 reputation&quot; class=&quot;comment-user&quot;&gt;12431234123412341234123&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113487829_62253295&quot;&gt;&lt;span title=&quot;2020-10-02 20:02:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 2, 2020 at 20:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AndrewHenle: It is not even possible pass a &lt;code&gt;char&lt;/code&gt; argument to &lt;code&gt;printf&lt;/code&gt;, because an argument of type &lt;code&gt;char&lt;/code&gt; will &lt;a href=&quot;https://en.cppreference.com/w/c/language/conversion&quot; rel=&quot;nofollow noreferrer&quot;&gt;get promoted&lt;/a&gt; to an &lt;code&gt;int&lt;/code&gt; anyway.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12149471/andreas-wenzel&quot; title=&quot;13,574 reputation&quot; class=&quot;comment-user&quot;&gt;Andreas Wenzel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114416025_62253295&quot;&gt;&lt;span title=&quot;2020-11-06 07:25:05Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 6, 2020 at 7:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":39,"title":"Why is “while( !feof(file) )” always wrong?","content":"\n                \n&lt;p&gt;What is wrong with using &lt;code&gt;feof()&lt;/code&gt; to control a read loop?  For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *path = &lt;span class=&quot;hljs-string&quot;&gt;&quot;stdin&quot;&lt;/span&gt;;\n    FILE *fp = argc &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ? fopen(path=argv[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;) : &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( fp == &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; ){\n        perror(path);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; EXIT_FAILURE;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( !feof(fp) ){  &lt;span class=&quot;hljs-comment&quot;&gt;/* THIS IS WRONG */&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;/* Read and process data from file… */&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( fclose(fp) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ){\n        perror(path);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; EXIT_FAILURE;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; EXIT_SUCCESS;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What is wrong with this loop?&lt;/p&gt;\n    ","slug":"why-is-\"while(-!feof(file)-)\"-always-wrong-1657384367349","postType":"QUESTION","createdAt":"2022-07-09T16:32:47.000Z","updatedAt":"2022-07-09T16:32:47.000Z","tags":[{"id":142,"name":"feof","slug":"feof","createdAt":"2022-07-09T16:32:47.000Z","updatedAt":"2022-07-09T16:32:47.000Z","Questions_Tags":{"questionId":39,"tagId":142}}]}]}},"__N_SSG":true}