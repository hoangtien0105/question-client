{"pageProps":{"data":{"answer":["\n&lt;p&gt;You can use &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.isin.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pd.Series.isin&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;For &quot;IN&quot; use: &lt;code&gt;something.isin(somewhere)&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Or for &quot;NOT IN&quot;: &lt;code&gt;~something.isin(somewhere)&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;As a worked example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;df\n  country\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;        US\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;        UK\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   Germany\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;     China\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;countries_to_keep\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;UK&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;China&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;df.country.isin(countries_to_keep)\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\nName: country, dtype: &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;df[df.country.isin(countries_to_keep)]\n  country\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;        UK\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;     China\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;df[~df.country.isin(countries_to_keep)]\n  country\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;        US\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   Germany\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Alternative solution that uses &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#the-query-method&quot; rel=&quot;noreferrer&quot;&gt;.query()&lt;/a&gt; method:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]: df.query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;countries in @countries_to_keep&quot;&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]:\n  countries\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;        UK\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;     China\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]: df.query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;countries not in @countries_to_keep&quot;&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]:\n  countries\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;        US\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   Germany\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;h2&gt;How to implement &apos;in&apos; and &apos;not in&apos; for a pandas DataFrame?&lt;/h2&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Pandas offers two methods: &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.isin.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;Series.isin&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.isin.html#pandas.DataFrame.isin&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;DataFrame.isin&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; for Series and DataFrames, respectively.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Filter DataFrame Based on ONE Column (also applies to Series)&lt;/h2&gt;\n\n&lt;p&gt;The most common scenario is applying an &lt;code&gt;isin&lt;/code&gt; condition on a specific column to filter rows in a DataFrame.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;countries&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;US&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;UK&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Germany&apos;&lt;/span&gt;, np.nan, &lt;span class=&quot;hljs-string&quot;&gt;&apos;China&apos;&lt;/span&gt;]})\ndf\n  countries\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;        US\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;        UK\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   Germany\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;     China\n\nc1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;UK&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;China&apos;&lt;/span&gt;]             &lt;span class=&quot;hljs-comment&quot;&gt;# list&lt;/span&gt;\nc2 = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;Germany&apos;&lt;/span&gt;}                 &lt;span class=&quot;hljs-comment&quot;&gt;# set&lt;/span&gt;\nc3 = pd.Series([&lt;span class=&quot;hljs-string&quot;&gt;&apos;China&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;US&apos;&lt;/span&gt;])  &lt;span class=&quot;hljs-comment&quot;&gt;# Series&lt;/span&gt;\nc4 = np.array([&lt;span class=&quot;hljs-string&quot;&gt;&apos;US&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;UK&apos;&lt;/span&gt;])      &lt;span class=&quot;hljs-comment&quot;&gt;# array&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Series.isin&lt;/code&gt; accepts various types as inputs. The following are all valid ways of getting what you want:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;countries&apos;&lt;/span&gt;].isin(c1)\n\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\nName: countries, dtype: &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# `in` operation&lt;/span&gt;\ndf[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;countries&apos;&lt;/span&gt;].isin(c1)]\n\n  countries\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;        UK\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;     China\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# `not in` operation&lt;/span&gt;\ndf[~df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;countries&apos;&lt;/span&gt;].isin(c1)]\n\n  countries\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;        US\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   Germany\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;       NaN\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Filter with `set` (tuples work too)&lt;/span&gt;\ndf[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;countries&apos;&lt;/span&gt;].isin(c2)]\n\n  countries\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   Germany\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Filter with another Series&lt;/span&gt;\ndf[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;countries&apos;&lt;/span&gt;].isin(c3)]\n\n  countries\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;        US\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;     China\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Filter with array&lt;/span&gt;\ndf[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;countries&apos;&lt;/span&gt;].isin(c4)]\n\n  countries\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;        US\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;        UK\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Filter on MANY Columns&lt;/h2&gt;\n\n&lt;p&gt;Sometimes, you will want to apply an &apos;in&apos; membership check with some search terms over multiple columns,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df2 = pd.DataFrame({\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;q&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;w&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, np.nan, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;: np.arange(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)})\ndf2\n\n   A    B  C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  x    w  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  y    a  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  z  NaN  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  q    x  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n\nc1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;w&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To apply the &lt;code&gt;isin&lt;/code&gt; condition to both columns &quot;A&quot; and &quot;B&quot;, use &lt;code&gt;DataFrame.isin&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df2[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;]].isin(c1)\n\n      A      B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;   &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;   &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;From this, &lt;strong&gt;to retain rows where at least one column is &lt;code&gt;True&lt;/code&gt;&lt;/strong&gt;, we can use &lt;code&gt;any&lt;/code&gt; along the first axis:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df2[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;]].isin(c1).&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\ndtype: &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;\n\ndf2[df2[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;]].isin(c1).&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n\n   A  B  C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  x  w  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  q  x  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that if you want to search every column, you&apos;d just omit the column selection step and do &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df2.isin(c1).&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Similarly, &lt;strong&gt;to retain rows where ALL columns are &lt;code&gt;True&lt;/code&gt;&lt;/strong&gt;, use &lt;code&gt;all&lt;/code&gt; in the same manner as before.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df2[df2[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;]].isin(c1).&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;(axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n\n   A  B  C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  x  w  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Notable Mentions: &lt;code&gt;numpy.isin&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt;, list comprehensions (string data)&lt;/h2&gt;\n\n&lt;p&gt;In addition to the methods described above, you can also use the numpy equivalent: &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.isin.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;numpy.isin&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# `in` operation&lt;/span&gt;\ndf[np.isin(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;countries&apos;&lt;/span&gt;], c1)]\n\n  countries\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;        UK\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;     China\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# `not in` operation&lt;/span&gt;\ndf[np.isin(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;countries&apos;&lt;/span&gt;], c1, invert=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)]\n\n  countries\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;        US\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   Germany\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;       NaN\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Why is it worth considering? NumPy functions are usually a bit faster than their pandas equivalents because of lower overhead. Since this is an elementwise operation that does not depend on index alignment, there are very few situations where this method is not an appropriate replacement for pandas&apos; &lt;code&gt;isin&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Pandas routines are usually iterative when working with strings, because string operations are hard to vectorise. &lt;a href=&quot;https://stackoverflow.com/questions/54028199/for-loops-with-pandas-when-should-i-care&quot;&gt;There is a lot of evidence to suggest that list comprehensions will be faster here.&lt;/a&gt;.\nWe resort to an &lt;code&gt;in&lt;/code&gt; check now. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;c1_set = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(c1) &lt;span class=&quot;hljs-comment&quot;&gt;# Using `in` with `sets` is a constant time operation... &lt;/span&gt;\n                 &lt;span class=&quot;hljs-comment&quot;&gt;# This doesn&apos;t matter for pandas because the implementation differs.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# `in` operation&lt;/span&gt;\ndf[[x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; c1_set &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;countries&apos;&lt;/span&gt;]]]\n\n  countries\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;        UK\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;     China\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# `not in` operation&lt;/span&gt;\ndf[[x &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; c1_set &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;countries&apos;&lt;/span&gt;]]]\n\n  countries\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;        US\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   Germany\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;       NaN\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is a lot more unwieldy to specify, however, so don&apos;t use it unless you know what you&apos;re doing.&lt;/p&gt;\n\n&lt;p&gt;Lastly, there&apos;s also &lt;code&gt;DataFrame.query&lt;/code&gt; which has been covered in &lt;a href=&quot;https://stackoverflow.com/a/45190397/4909087&quot;&gt;this answer&lt;/a&gt;. numexpr FTW!&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;ve been usually doing generic filtering over rows like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;criterion = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; row: row[&lt;span class=&quot;hljs-string&quot;&gt;&apos;countries&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; countries\nnot_in = df[df.apply(criterion, axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Collating possible solutions from the answers:&lt;/p&gt;\n\n&lt;p&gt;For IN: &lt;code&gt;df[df[&apos;A&apos;].isin([3, 6])]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;For NOT IN:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;df[-df[&quot;A&quot;].isin([3, 6])]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;df[~df[&quot;A&quot;].isin([3, 6])]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;df[df[&quot;A&quot;].isin([3, 6]) == False]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;df[np.logical_not(df[&quot;A&quot;].isin([3, 6]))]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;I wanted to filter out dfbc rows that had a BUSINESS_ID that was also in the BUSINESS_ID of dfProfilesBusIds&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;dfbc = dfbc[~dfbc[&lt;span class=&quot;hljs-string&quot;&gt;&apos;BUSINESS_ID&apos;&lt;/span&gt;].isin(dfProfilesBusIds[&lt;span class=&quot;hljs-string&quot;&gt;&apos;BUSINESS_ID&apos;&lt;/span&gt;])]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Why is no one talking about the performance of various filtering methods? In fact, this topic often pops up here (see the example). I did my own performance test for a large data set. It is very interesting and instructive.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;animals&apos;&lt;/span&gt;: np.random.choice([&lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;mouse&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;birds&apos;&lt;/span&gt;], size=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;), \n                   &lt;span class=&quot;hljs-string&quot;&gt;&apos;number&apos;&lt;/span&gt;: np.random.randint(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, size=(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,))})\n\ndf.info()\n\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;pandas.core.frame.DataFrame&apos;&lt;/span&gt;&amp;gt;\nRangeIndex: &lt;span class=&quot;hljs-number&quot;&gt;10000000&lt;/span&gt; entries, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; to &lt;span class=&quot;hljs-number&quot;&gt;9999999&lt;/span&gt;\nData columns (total &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; columns):\n &lt;span class=&quot;hljs-comment&quot;&gt;#   Column   Dtype &lt;/span&gt;\n---  ------   ----- \n &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   animals  &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   number   int64 \ndtypes: int64(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\nmemory usage: &lt;span class=&quot;hljs-number&quot;&gt;152.6&lt;/span&gt;+ MB\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%%timeit\n&lt;span class=&quot;hljs-comment&quot;&gt;# .isin() by one column&lt;/span&gt;\nconditions = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;]\ndf[df.animals.isin(conditions)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;367&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;2.34&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%%timeit\n&lt;span class=&quot;hljs-comment&quot;&gt;# .query() by one column&lt;/span&gt;\nconditions = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;]\ndf.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;animals in @conditions&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;395&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;3.9&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%%timeit\n&lt;span class=&quot;hljs-comment&quot;&gt;# .loc[]&lt;/span&gt;\ndf.loc[(df.animals==&lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;)|(df.animals==&lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;987&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;5.17&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%%timeit\ndf[df.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;animals&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;], axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;41.9&lt;/span&gt; s ± &lt;span class=&quot;hljs-number&quot;&gt;490&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%%timeit\nnew_df = df.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;animals&apos;&lt;/span&gt;)\nnew_df.loc[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;], :]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;3.64&lt;/span&gt; s ± &lt;span class=&quot;hljs-number&quot;&gt;62.5&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%%timeit\nnew_df = df.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;animals&apos;&lt;/span&gt;)\nnew_df[new_df.index.isin([&lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;])]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;469&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;8.98&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%%timeit\ns = pd.Series([&lt;span class=&quot;hljs-string&quot;&gt;&apos;cat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog&apos;&lt;/span&gt;], name=&lt;span class=&quot;hljs-string&quot;&gt;&apos;animals&apos;&lt;/span&gt;)\ndf.merge(s, on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;animals&apos;&lt;/span&gt;, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;inner&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;796&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;30.9&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Thus, the &lt;code&gt;isin&lt;/code&gt; method turned out to be the fastest and the method with &lt;code&gt;apply()&lt;/code&gt; was the slowest, which is not surprising.&lt;/p&gt;\n    ","\n&lt;p&gt;You can also use &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.isin.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;.isin()&lt;/code&gt;&lt;/a&gt; inside &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;.query()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;country.isin(@countries_to_keep).values&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Or alternatively:&lt;/span&gt;\ndf.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;country.isin([&quot;UK&quot;, &quot;China&quot;]).values&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To negate your query, use &lt;code&gt;~&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;~country.isin(@countries_to_keep).values&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Another way is to use comparison operators:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;country == @countries_to_keep&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Or alternatively:&lt;/span&gt;\ndf.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;country == [&quot;UK&quot;, &quot;China&quot;]&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And to negate the query, use &lt;code&gt;!=&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;country != @countries_to_keep&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;countries&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-string&quot;&gt;&apos;US&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;UK&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Germany&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;China&apos;&lt;/span&gt;]})\ncountries = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;UK&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;China&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;implement in&lt;/strong&gt;:    &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[df.countries.isin(countries)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;implement not in&lt;/strong&gt; as in of rest countries:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[df.countries.isin([x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; np.unique(df.countries) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; countries])]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A trick if you want to keep the order of the list:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;country&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;US&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;UK&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Germany&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;China&apos;&lt;/span&gt;]})\ncountries_to_keep = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Germany&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;US&apos;&lt;/span&gt;]\n\n\nind=[df.index[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;country&apos;&lt;/span&gt;]==i].tolist() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; countries_to_keep]\nflat_ind=[item &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; sublist &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ind &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sublist]\n\ndf.reindex(flat_ind)\n\n   country\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  Germany\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;       US\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My 2c worth:\nI needed a combination of in and ifelse statements for a dataframe, and this worked for me.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;sale_method = pd.DataFrame(model_data[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sale Method&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.upper())\nsale_method[&lt;span class=&quot;hljs-string&quot;&gt;&quot;sale_classification&quot;&lt;/span&gt;] = np.where(\n    sale_method[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sale Method&quot;&lt;/span&gt;].isin([&lt;span class=&quot;hljs-string&quot;&gt;&quot;PRIVATE&quot;&lt;/span&gt;]),\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;private&quot;&lt;/span&gt;,\n    np.where(\n        sale_method[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sale Method&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;AUCTION&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;auction&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;other&quot;&lt;/span&gt;\n    ),\n)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Related (performance / pandas internals): &lt;a href=&quot;https://stackoverflow.com/a/50881584/9209546&quot;&gt;Pandas pd.Series.isin performance with set versus array&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9209546/jpp&quot; title=&quot;148,786 reputation&quot; class=&quot;comment-user&quot;&gt;jpp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment89135565_19960077&quot;&gt;&lt;span title=&quot;2018-06-28 00:06:38Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 28, 2018 at 0:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;a href=&quot;https://stackoverflow.com/q/12096252/7758804&quot;&gt;Use a list of values to select rows from a pandas dataframe&lt;/a&gt; is similar, but the negation &lt;code&gt;~&lt;/code&gt; was added as an edit in 2019.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7758804/trenton-mckinney&quot; title=&quot;45,036 reputation&quot; class=&quot;comment-user&quot;&gt;Trenton McKinney&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115748356_19960077&quot;&gt;&lt;span title=&quot;2020-12-27 20:18:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 27, 2020 at 20:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you&apos;re actually dealing with 1-dimensional arrays (like in you&apos;re example) then on you&apos;re first line use a Series instead of a DataFrame, like @DSM used: &lt;code&gt;df = pd.Series({&apos;countries&apos;:[&apos;US&apos;,&apos;UK&apos;,&apos;Germany&apos;,&apos;China&apos;]})&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1889400/tomaugspurger&quot; title=&quot;26,427 reputation&quot; class=&quot;comment-user&quot;&gt;TomAugspurger&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29714037_19960116&quot;&gt;&lt;span title=&quot;2013-11-13 19:41:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 13, 2013 at 19:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@TomAugspurger: like usual, I&apos;m probably missing something.  &lt;code&gt;df&lt;/code&gt;, both mine and his, is a &lt;code&gt;DataFrame&lt;/code&gt;.  &lt;code&gt;countries&lt;/code&gt; is a list.  &lt;code&gt;df[~df.countries.isin(countries)]&lt;/code&gt; produces a &lt;code&gt;DataFrame&lt;/code&gt;, not a &lt;code&gt;Series&lt;/code&gt;, and seems to work even back in 0.11.0.dev-14a04dd.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/487339/dsm&quot; title=&quot;321,450 reputation&quot; class=&quot;comment-user&quot;&gt;DSM&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29747942_19960116&quot;&gt;&lt;span title=&quot;2013-11-14 16:10:41Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 14, 2013 at 16:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer is confusing because you keep reusing the &lt;code&gt;countries&lt;/code&gt; variable. Well, the OP does it, and that&apos;s inherited, but that something is done badly before does not justify doing it badly now.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2741091/ifly6&quot; title=&quot;4,251 reputation&quot; class=&quot;comment-user&quot;&gt;ifly6&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment87855266_19960116&quot;&gt;&lt;span title=&quot;2018-05-18 22:20:18Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 18, 2018 at 22:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ifly6 : Agreed, I made the same mistake and realized it when I got a error : &quot;&apos;DataFrame&apos; object has no attribute &apos;countries&apos;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5122949/le-llama&quot; title=&quot;143 reputation&quot; class=&quot;comment-user&quot;&gt;le_llama&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment108599103_19960116&quot;&gt;&lt;span title=&quot;2020-04-23 13:54:01Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 23, 2020 at 13:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For people who are confused by the tilde (like me): &lt;a href=&quot;https://stackoverflow.com/questions/8305199/the-tilde-operator-in-python&quot; title=&quot;the tilde operator in python&quot;&gt;stackoverflow.com/questions/8305199/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1622035/bmurauer&quot; title=&quot;909 reputation&quot; class=&quot;comment-user&quot;&gt;bmurauer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118083299_19960116&quot;&gt;&lt;span title=&quot;2021-03-25 14:00:45Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 25, 2021 at 14:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;.query is so much more readable. Especially for the &quot;not in&quot; scenario, vs a distant tilde. Thanks!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1787137/mike-honey&quot; title=&quot;14,035 reputation&quot; class=&quot;comment-user&quot;&gt;Mike Honey&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment112681283_45190397&quot;&gt;&lt;span title=&quot;2020-09-03 10:48:43Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 3, 2020 at 10:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What is @countries ? Another dataframe ? A list ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6213883/it%c3%a9ration-122442&quot; title=&quot;1,943 reputation&quot; class=&quot;comment-user&quot;&gt;Itération 122442&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122096421_45190397&quot;&gt;&lt;span title=&quot;2021-09-07 06:10:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 7, 2021 at 6:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@FlorianCastelain countries are the column you want to check on, OP called this column&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8770778/norwegianclassic&quot; title=&quot;663 reputation&quot; class=&quot;comment-user&quot;&gt;NorwegianClassic&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122127585_45190397&quot;&gt;&lt;span title=&quot;2021-09-08 09:06:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 8, 2021 at 9:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@FlorianCastelain, somebody has renamed a variable in the original question: &lt;code&gt;countries&lt;/code&gt; -&amp;gt; &lt;code&gt;countries_to_keep&lt;/code&gt;, so my answer has become invalid. I&apos;ve updated my answer correspondingly. &lt;code&gt;countries_to_keep&lt;/code&gt; - is a list.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5741205/maxu-stop-genocide-of-ua&quot; title=&quot;193,183 reputation&quot; class=&quot;comment-user&quot;&gt;MaxU - stop genocide of UA&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122129378_45190397&quot;&gt;&lt;span title=&quot;2021-09-08 10:17:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 8, 2021 at 10:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The most readable solution indeed. I wonder if syntax exists to avoid creating &lt;code&gt;countries_to_keep&lt;/code&gt;. Is it possible to specify the list of values inside the query directly?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1908612/maxim-k&quot; title=&quot;4,040 reputation&quot; class=&quot;comment-user&quot;&gt;Maxim.K&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124255455_45190397&quot;&gt;&lt;span title=&quot;2021-12-09 14:10:02Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 9, 2021 at 14:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I like it, but what if I want to compare a column in df3 that isin df1 column?  What would that look like?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4487782/arthur-d-howland&quot; title=&quot;3,651 reputation&quot; class=&quot;comment-user&quot;&gt;Arthur D. Howland&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103289706_55554709&quot;&gt;&lt;span title=&quot;2019-10-21 01:24:00Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 21, 2019 at 1:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;FYI, this is much slower than @DSM soln which is vectorized&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/644898/jeff&quot; title=&quot;118,630 reputation&quot; class=&quot;comment-user&quot;&gt;Jeff&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29710214_19960136&quot;&gt;&lt;span title=&quot;2013-11-13 17:47:58Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 13, 2013 at 17:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Jeff I&apos;d expect that, but that&apos;s what I fall back to when I need to filter over something unavailable in pandas directly. (I was about to say &quot;like .startwith or regex matching, but just found out about Series.str that has all of that!)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/399317/kos&quot; title=&quot;68,155 reputation&quot; class=&quot;comment-user&quot;&gt;Kos&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29730160_19960136&quot;&gt;&lt;span title=&quot;2013-11-14 07:42:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 14, 2013 at 7:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This mostly repeats information from other answers. Using &lt;code&gt;logical_not&lt;/code&gt; is a mouthful equivalent of the &lt;code&gt;~&lt;/code&gt; operator.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4909087/cs95&quot; title=&quot;335,167 reputation&quot; class=&quot;comment-user&quot;&gt;cs95&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment99414948_56407969&quot;&gt;&lt;span title=&quot;2019-06-01 17:18:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 1, 2019 at 17:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You can negate the isin (as done in the accepted answer)  rather than comparing to False&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2308683/onecricketeer&quot; title=&quot;153,507 reputation&quot; class=&quot;comment-user&quot;&gt;OneCricketeer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77347669_45070797&quot;&gt;&lt;span title=&quot;2017-07-19 12:17:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 19, 2017 at 12:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Good to know, although this is a bit less readable than &lt;a href=&quot;https://stackoverflow.com/a/45190397/2071807&quot;&gt;this answer&lt;/a&gt; which uses &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;not in&lt;/code&gt; inside &lt;code&gt;query&lt;/code&gt;. Interesting that &lt;code&gt;query&lt;/code&gt; supports both!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2071807/londonrob&quot; title=&quot;64,156 reputation&quot; class=&quot;comment-user owner&quot;&gt;LondonRob&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126028674_71227998&quot;&gt;&lt;span title=&quot;2022-02-28 17:39:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 28 at 17:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":239,"title":"How to filter Pandas dataframe using 'in' and 'not in' like in SQL","content":"\n                \n&lt;p&gt;How can I achieve the equivalents of SQL&apos;s &lt;code&gt;IN&lt;/code&gt; and &lt;code&gt;NOT IN&lt;/code&gt;?&lt;/p&gt;\n&lt;p&gt;I have a list with the required values.\nHere&apos;s the scenario:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;country&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;US&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;UK&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Germany&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;China&apos;&lt;/span&gt;]})\ncountries_to_keep = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;UK&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;China&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# pseudo-code:&lt;/span&gt;\ndf[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;country&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; countries_to_keep]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;My current way of doing this is as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;country&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;US&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;UK&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Germany&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;China&apos;&lt;/span&gt;]})\ndf2 = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;country&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;UK&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;China&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;matched&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;})\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# IN&lt;/span&gt;\ndf.merge(df2, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;inner&apos;&lt;/span&gt;, on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;country&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# NOT IN&lt;/span&gt;\nnot_in = df.merge(df2, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;, on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;country&apos;&lt;/span&gt;)\nnot_in = not_in[pd.isnull(not_in[&lt;span class=&quot;hljs-string&quot;&gt;&apos;matched&apos;&lt;/span&gt;])]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But this seems like a horrible kludge. Can anyone improve on it?&lt;/p&gt;\n    ","slug":"how-to-filter-pandas-dataframe-using-'in'-and-'not-in'-like-in-sql-1657387371355","postType":"QUESTION","createdAt":"2022-07-09T17:22:51.000Z","updatedAt":"2022-07-09T17:22:51.000Z","tags":[{"id":1583,"name":"sql-function","slug":"sql-function","createdAt":"2022-07-09T17:22:51.000Z","updatedAt":"2022-07-09T17:22:51.000Z","Questions_Tags":{"questionId":239,"tagId":1583}}]}},"__N_SSG":true}