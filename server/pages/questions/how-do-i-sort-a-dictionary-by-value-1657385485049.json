{"pageProps":{"data":{"answer":["\n&lt;h3&gt;Python 3.7+ or CPython 3.6&lt;/h3&gt;\n&lt;p&gt;Dicts preserve insertion order in Python 3.7+. Same in CPython 3.6, but &lt;a href=&quot;https://stackoverflow.com/q/39980323/4518341&quot;&gt;it&apos;s an implementation detail&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;{k: v &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; item: item[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])}\n{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; item: item[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Older Python&lt;/h3&gt;\n&lt;p&gt;It is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a listprobably a list of tuples.&lt;/p&gt;\n&lt;p&gt;For instance,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\nx = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;sorted_x&lt;/code&gt; will be a list of tuples sorted by the second element in each tuple. &lt;code&gt;dict(sorted_x) == x&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;And for those wishing to sort on keys instead of values:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\nx = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In Python3 since &lt;a href=&quot;https://stackoverflow.com/a/15712231/4293057&quot;&gt;unpacking is not allowed&lt;/a&gt; we can use&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; kv: kv[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want the output as a dict, you can use &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.OrderedDict&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;collections.OrderedDict&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; collections\n\nsorted_dict = collections.OrderedDict(sorted_x)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;As simple as: &lt;code&gt;sorted(dict1, key=dict1.get)&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;Well, it is actually possible to do a &quot;sort by dictionary values&quot;. Recently I had to do that in a Code Golf (Stack Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3169051/code-golf-word-frequency-chart#3170549&quot;&gt;Code golf: Word frequency chart&lt;/a&gt;&lt;/em&gt;). Abridged, the problem was of the kind: given a text, count how often each word is encountered and display a list of the top words, sorted by decreasing frequency. &lt;/p&gt;\n\n&lt;p&gt;If you construct a dictionary with the words as keys and the number of occurrences of each word as value, simplified here as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; defaultdict\nd = defaultdict(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; w &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; text.split():\n    d[w] += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then you can get a list of the words, ordered by frequency of use with &lt;a href=&quot;https://docs.python.org/library/functions.html#sorted&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;sorted(d, key=d.get)&lt;/code&gt;&lt;/a&gt; - the sort iterates over the dictionary keys, using the number of word occurrences as a sort key . &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; w &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d, key=d.get, reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(w, d[w])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am writing this detailed explanation to illustrate what people often mean by &quot;I can easily sort a dictionary by key, but how do I sort by value&quot; - and I think the original post was trying to address such an issue. And the solution is to do sort of list of the keys, based on the values, as shown above.&lt;/p&gt;\n    ","\n&lt;p&gt;You could use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will sort the dictionary by the values of each entry within the dictionary from smallest to largest.&lt;/p&gt;\n\n&lt;p&gt;To sort it in descending order just add &lt;code&gt;reverse=True&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;five&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;four&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\na = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])    \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;four&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;five&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Dicts can&apos;t be sorted, but you can build a sorted list from them.&lt;/p&gt;\n\n&lt;p&gt;A sorted list of dict values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.values())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A list of (key, value) pairs, sorted by value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itemgetter\n&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In recent Python 2.7, we have the new &lt;a href=&quot;http://docs.python.org/dev/whatsnew/2.7.html#pep-372-adding-an-ordered-dictionary-to-collections&quot; rel=&quot;noreferrer&quot;&gt;OrderedDict&lt;/a&gt; type, which remembers the order in which the items were added.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;third&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;fourth&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;second&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s: %s&quot;&lt;/span&gt; % (k, v)\n...\nsecond: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nfourth: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\nthird: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nfirst: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;fourth&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;third&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;first&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To make a new ordered dictionary from the original, sorting by the values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d_sorted_by_value = OrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The OrderedDict behaves like a normal dict:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d_sorted_by_value.items():\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s: %s&quot;&lt;/span&gt; % (k, v)\n...\nfirst: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nsecond: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nthird: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nfourth: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d_sorted_by_value\nOrderedDict([(&lt;span class=&quot;hljs-string&quot;&gt;&apos;first&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;third&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;fourth&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;UPDATE: 5 DECEMBER 2015 using Python 3.5&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Whilst I found the accepted answer useful, I was also surprised that it hasn&apos;t been updated to reference &lt;strong&gt;&lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.OrderedDict&quot; rel=&quot;noreferrer&quot;&gt;OrderedDict&lt;/a&gt;&lt;/strong&gt; from the standard library &lt;strong&gt;collections&lt;/strong&gt; module as a viable, modern alternative - designed to solve exactly this type of problem.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itemgetter\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n\nx = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = OrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# OrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The official &lt;strong&gt;&lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.OrderedDict&quot; rel=&quot;noreferrer&quot;&gt;OrderedDict&lt;/a&gt;&lt;/strong&gt; documentation offers a very similar example too, but using a lambda for the sort function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# regular unsorted dictionary&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# dictionary sorted by value&lt;/span&gt;\nOrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; t: t[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n&lt;span class=&quot;hljs-comment&quot;&gt;# OrderedDict([(&apos;pear&apos;, 1), (&apos;orange&apos;, 2), (&apos;banana&apos;, 3), (&apos;apple&apos;, 4)])&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Pretty much the same as &lt;a href=&quot;https://stackoverflow.com/a/613207/11044033&quot;&gt;Hank Gay&apos;s answer&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([(value,key) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (key,value) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mydict.items()])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or optimized slightly as suggested by John Fouhy:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;((value,key) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (key,value) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mydict.items())\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;As of &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.6.html&quot; rel=&quot;noreferrer&quot;&gt;Python 3.6&lt;/a&gt; the built-in dict will be ordered&lt;/h1&gt;\n\n&lt;p&gt;Good news, so the OP&apos;s original use case of mapping pairs retrieved from a database with unique string ids as keys and numeric values as values into a built-in Python v3.6+ dict, should now respect the insert order.&lt;/p&gt;\n\n&lt;p&gt;If say the resulting two column table expressions from a database query like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;SELECT a_key, a_value FROM a_table ORDER BY a_value;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;would be stored in two Python tuples, k_seq and v_seq (aligned by numerical index and with the same length of course), then:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;k_seq = (&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;)\nv_seq = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;)\nordered_map = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(k_seq, v_seq))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Allow to output later as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ordered_map.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(k, v)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yielding in this case (for the new Python 3.6+ built-in dict!):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;foo &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nbar &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nbaz &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in the same ordering per value of v.&lt;/p&gt;\n\n&lt;p&gt;Where in the Python 3.5 install on my machine it currently yields:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;bar &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nfoo &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nbaz &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Details:&lt;/h2&gt;\n\n&lt;p&gt;As proposed in 2012 by Raymond Hettinger (cf. mail on python-dev with subject &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2012-December/123028.html&quot; rel=&quot;noreferrer&quot;&gt;&quot;More compact dictionaries with faster iteration&quot;&lt;/a&gt;) and now (in 2016) announced in a mail by Victor Stinner to python-dev with subject &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2016-September/146327.html&quot; rel=&quot;noreferrer&quot;&gt;&quot;Python 3.6 dict becomes compact and gets a private version; and keywords become ordered&quot;&lt;/a&gt; due to the fix/implementation of issue 27350 &lt;a href=&quot;http://bugs.python.org/issue27350&quot; rel=&quot;noreferrer&quot;&gt;&quot;Compact and ordered dict&quot;&lt;/a&gt; in Python 3.6 we will now be able, to use a built-in dict to maintain insert order!!&lt;/p&gt;\n\n&lt;p&gt;Hopefully this will lead to a thin layer OrderedDict implementation as a first step. As @JimFasarakis-Hilliard indicated, some see use cases for the OrderedDict type also in the future. I think the Python community at large will carefully inspect, if this will stand the test of time, and what the next steps will be.&lt;/p&gt;\n\n&lt;p&gt;Time to rethink our coding habits to not miss the possibilities opened by stable ordering of:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Keyword arguments and&lt;/li&gt;\n&lt;li&gt;(intermediate) dict storage&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The first because it eases dispatch in the implementation of functions and methods in some cases.&lt;/p&gt;\n\n&lt;p&gt;The second as it encourages to more easily use &lt;code&gt;dict&lt;/code&gt;s as intermediate storage in processing pipelines.&lt;/p&gt;\n\n&lt;p&gt;Raymond Hettinger kindly provided documentation explaining &quot;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/3967849/sfmu2/_build/html/goal.html&quot; rel=&quot;noreferrer&quot; title=&quot;The Tech Behind Python 3.6 Dictionaries&quot;&gt;The Tech Behind Python 3.6 Dictionaries&lt;/a&gt;&quot; - from his San Francisco Python Meetup Group presentation 2016-DEC-08.&lt;/p&gt;\n\n&lt;p&gt;And maybe quite some Stack Overflow high decorated question and answer pages will receive variants of this information and many high quality answers will require a per version update too.&lt;/p&gt;\n\n&lt;h3&gt;Caveat Emptor (but also see below update 2017-12-15):&lt;/h3&gt;\n\n&lt;p&gt;As @ajcr rightfully notes: &quot;The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon.&quot; (from the &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.6.html&quot; rel=&quot;noreferrer&quot;&gt;whatsnew36&lt;/a&gt;) not nit picking, &lt;strong&gt;but&lt;/strong&gt; the citation was cut a bit pessimistic ;-). It continues as &quot; (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5).&quot;&lt;/p&gt;\n\n&lt;p&gt;So as in some human languages (e.g. German), usage shapes the language, and the will now has been declared ... in &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.6.html&quot; rel=&quot;noreferrer&quot;&gt;whatsnew36&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Update 2017-12-15:&lt;/h3&gt;\n\n&lt;p&gt;In a &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2017-December/151283.html&quot; rel=&quot;noreferrer&quot;&gt;mail to the python-dev list&lt;/a&gt;, Guido van Rossum declared:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Make it so. &quot;Dict keeps insertion order&quot; is the ruling. Thanks! &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So, the version 3.6 CPython side-effect of dict insertion ordering is now becoming part of the language spec (and not anymore only an implementation detail). That mail thread also surfaced some distinguishing design goals for &lt;code&gt;collections.OrderedDict&lt;/code&gt; as reminded by Raymond Hettinger during discussion.&lt;/p&gt;\n    ","\n&lt;p&gt;It can often be very handy to use &lt;b&gt;&lt;a href=&quot;http://docs.python.org/library/collections.html#collections.namedtuple&quot; rel=&quot;noreferrer&quot;&gt;namedtuple&lt;/a&gt;&lt;/b&gt;. For example, you have a dictionary of &apos;name&apos; as keys and &apos;score&apos; as values and you want to sort on &apos;score&apos;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; collections\nPlayer = collections.namedtuple(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Player&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;score name&apos;&lt;/span&gt;)\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Alex&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Richard&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;sorting with lowest score first:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;worst = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(Player(v,k) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (k,v) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;sorting with highest score first:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;best = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([Player(v,k) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (k,v) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items()], reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can get the name and score of, let&apos;s say the second-best player (index=1) very Pythonically like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;player = best[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\nplayer.name\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;Richard&apos;&lt;/span&gt;\nplayer.score\n    &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had the same problem, and I solved it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;WantedOutput = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(MyDict, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x : MyDict[x]) \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(People who answer &quot;It is not possible to sort a dict&quot; did not read the question! In fact, &quot;I can sort on the keys, but how can I sort based on the values?&quot; clearly means that he wants a list of the keys sorted according to the value of their values.)&lt;/p&gt;\n\n&lt;p&gt;Please notice that the order is not well defined (keys with the same value will be in an arbitrary order in the output list).&lt;/p&gt;\n    ","\n&lt;p&gt;If values are numeric you may also use &lt;a href=&quot;https://docs.python.org/library/collections.html#collections.Counter&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Counter&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;https://docs.python.org/library/collections.html&quot; rel=&quot;noreferrer&quot;&gt;collections&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n\nx = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\nc = Counter(x)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(c.most_common())\n\n&amp;gt;&amp;gt; [(&lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]    \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Python 2.7, simply do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n&lt;span class=&quot;hljs-comment&quot;&gt;# regular unsorted dictionary&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# dictionary sorted by key&lt;/span&gt;\nOrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; t: t[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\nOrderedDict([(&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)])\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# dictionary sorted by value&lt;/span&gt;\nOrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; t: t[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\nOrderedDict([(&lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;copy-paste from : &lt;a href=&quot;http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes&quot;&gt;http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Enjoy ;-)&lt;/p&gt;\n    ","\n&lt;p&gt;This is the code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\norigin_list = [\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Silly&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Baa&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Zoo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Penguin&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;}\n]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;&amp;gt; Original &amp;gt;&amp;gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; foo &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; origin_list:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; foo\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&amp;gt;&amp;gt; Rofl sort &amp;gt;&amp;gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; foo &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(origin_list, key=operator.itemgetter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; foo\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&amp;gt;&amp;gt; Rank sort &amp;gt;&amp;gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; foo &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(origin_list, key=operator.itemgetter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; foo\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here are the results:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Original&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Silly&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Baa&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zoo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Penguin&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Rofl&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Baa&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zoo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Silly&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Penguin&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Rank&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Penguin&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zoo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Silly&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Baa&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try the following approach. Let us define a dictionary called mydict with the following data:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mydict = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;carl&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;,\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;alan&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;bob&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;danny&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If one wanted to sort the dictionary by keys, one could do something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(mydict.iterkeys()):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s: %s&quot;&lt;/span&gt; % (key, mydict[key])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This should return the following output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;alan: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nbob: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ncarl: &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;\ndanny: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On the other hand, if one wanted to sort a dictionary by value (as is asked in the question), one could do the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(mydict.iteritems(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; (k,v): (v,k)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s: %s&quot;&lt;/span&gt; % (key, value)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The result of this command (sorting the dictionary by value) should return the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;bob: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nalan: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\ndanny: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\ncarl: &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Starting from Python 3.6, &lt;code&gt;dict&lt;/code&gt; objects are now ordered by insertion order. It&apos;s officially in the specs of Python 3.7.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;words = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;python&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;blah&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;alice&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(words.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;alice&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Before that, you had to use &lt;code&gt;OrderedDict&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3.7/library/stdtypes.html#typesmapping&quot; rel=&quot;noreferrer&quot;&gt;Python 3.7 documentation&lt;/a&gt; says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Changed in version 3.7: Dictionary order is guaranteed to be insertion\n  order. This behavior was implementation detail of CPython from 3.6. &lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;You can create an &quot;inverted index&quot;, also&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; defaultdict\ninverse= defaultdict( &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; )\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; originalDict.items():\n    inverse[v].append( k )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now your inverse has the values; each value has a list of applicable keys.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(inverse):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; k, inverse[k]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use the &lt;a href=&quot;http://docs.python.org/2/library/collections.html#collections.Counter&quot;&gt;collections.Counter&lt;/a&gt;. Note, this will work for both numeric and non-numeric values.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To sort in reverse order&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Counter(x).most_common()\n[(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To sort in ascending order&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Counter(x).most_common()[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To get a dictionary sorted by values&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;OrderedDict(Counter(x).most_common()[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\nOrderedDict([(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use a &lt;a href=&quot;https://pypi.python.org/pypi/skipdict/1.0&quot;&gt;skip dict&lt;/a&gt; which is a dictionary that&apos;s permanently sorted by value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;SkipDict(data)\n{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4.0&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you use &lt;code&gt;keys()&lt;/code&gt;, &lt;code&gt;values()&lt;/code&gt; or &lt;code&gt;items()&lt;/code&gt; then you&apos;ll iterate in sorted order by value.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s implemented using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Skip_list&quot;&gt;skip list&lt;/a&gt; datastructure.&lt;/p&gt;\n    ","\n&lt;p&gt;You can also use custom function that can be passed to key.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dict_val&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\nx = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=dict_val)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Of course, remember, you need to use &lt;code&gt;OrderedDict&lt;/code&gt; because regular Python dictionaries don&apos;t keep the original order. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\na = OrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(originalDict.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you do not have Python 2.7 or higher, the best you can do is iterate over the values in a generator function. (There is an &lt;code&gt;OrderedDict&lt;/code&gt; for 2.4 and 2.6  &lt;a href=&quot;https://pypi.python.org/pypi/ordereddict&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;, but &lt;/p&gt;\n\n&lt;p&gt;a) I don&apos;t know about how well it works &lt;/p&gt;\n\n&lt;p&gt;and &lt;/p&gt;\n\n&lt;p&gt;b) You have to download and install it of course. If you do not have administrative access, then I&apos;m afraid the option&apos;s out.)&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;gen&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;originalDict&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x, y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(originalDict.keys(), originalDict.values()), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; z: z[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; (x, y)\n    &lt;span class=&quot;hljs-comment&quot;&gt;#Yields as a tuple with (key, value). You can iterate with conditional clauses to get what you want. &lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; bleh, meh &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; gen(myDict):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; bleh == &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(myDict[bleh])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;You can also print out every value&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; bleh, meh &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; gen(myDict):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(bleh, meh)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please remember to remove the parentheses after print if not using Python 3.0 or above&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; django.utils.datastructures &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; SortedDict\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortedDictByKey&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self,data&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Sorted dictionary order by key&quot;&quot;&quot;&lt;/span&gt;\n    sortedDict = SortedDict()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; data:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(data, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;):\n            sortedKey = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(data.keys())\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sortedKey:\n                sortedDict[k] = data[k]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sortedDict\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The collections solution mentioned in another answer is absolutely superb, because you retain a connection between the key and value which in the case of dictionaries is extremely important.&lt;/p&gt;\n&lt;p&gt;I don&apos;t agree with the number one choice presented in another answer, because it throws away the keys.&lt;/p&gt;\n&lt;p&gt;I used the solution mentioned above (code shown below) and retained access to both keys and values and in my case the ordering was on the values, but the importance was the ordering of the keys after ordering the values.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n\nx = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\nc=Counter(x)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( c.most_common() )\n\n\n&amp;gt;&amp;gt; [(&lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a solution using zip on &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#dictionary-view-objects&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;d.values()&lt;/code&gt; and &lt;code&gt;d.keys()&lt;/code&gt;&lt;/a&gt;.  A few lines down this link (on Dictionary view objects) is:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This allows the creation of (value, key) pairs using zip(): pairs = zip(d.values(), d.keys()).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So we can do the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;key1&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;874.7&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;key2&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;key3&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8.1&lt;/span&gt;}\n\nd_sorted = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(d.values(), d.keys()))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; d_sorted \n&lt;span class=&quot;hljs-comment&quot;&gt;# prints: [(5, &apos;key2&apos;), (8.1, &apos;key3&apos;), (874.7, &apos;key1&apos;)]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/39424969/1150683&quot;&gt;As pointed out by Dilettant&lt;/a&gt;, Python 3.6 will now &lt;em&gt;keep the order&lt;/em&gt;! I thought I&apos;d share a function I wrote that eases the sorting of an iterable (tuple, list, dict). In the latter case, you can sort either on keys or values, and it can take numeric comparison into account. &lt;strong&gt;Only for &amp;gt;= 3.6!&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;When you try using sorted on an iterable that holds e.g. strings as well as ints, sorted() will fail. Of course you can force string comparison with str(). However, in some cases you want to do &lt;em&gt;actual&lt;/em&gt; numeric comparison where &lt;code&gt;12&lt;/code&gt; is smaller than &lt;code&gt;20&lt;/code&gt; (which is not the case in string comparison). So I came up with the following. When you want explicit numeric comparison you can use the flag &lt;code&gt;num_as_num&lt;/code&gt; which will try to do explicit numeric sorting by trying to convert all values to floats. If that succeeds, it will do numeric sorting, otherwise it&apos;ll resort to string comparison.&lt;/p&gt;\n&lt;p&gt;Comments for improvement welcome.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sort_iterable&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable, sort_on=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, reverse=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, num_as_num=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_sort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;):\n      &lt;span class=&quot;hljs-comment&quot;&gt;# sort by 0 = keys, 1 values, None for lists and tuples&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; num_as_num:\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n            _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(iterable, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; v: &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;(v), reverse=reverse)\n          &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(iterable.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; v: &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;(v[i]), reverse=reverse))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n          &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; TypeError\n      &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; (TypeError, ValueError):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n          _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(iterable, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; v: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(v), reverse=reverse)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n          _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(iterable.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; v: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(v[i]), reverse=reverse))\n      \n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;\n      \n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(iterable, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n      sorted_list = _sort(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sorted_list\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(iterable, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;):\n      sorted_list = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(_sort(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;))\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sorted_list\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(iterable, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;):\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; sort_on == &lt;span class=&quot;hljs-string&quot;&gt;&apos;keys&apos;&lt;/span&gt;:\n        sorted_dict = _sort(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sorted_dict\n      &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; sort_on == &lt;span class=&quot;hljs-string&quot;&gt;&apos;values&apos;&lt;/span&gt;:\n        sorted_dict = _sort(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sorted_dict\n      &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; sort_on &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; ValueError(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;Unexpected value &lt;span class=&quot;hljs-subst&quot;&gt;{sort_on}&lt;/span&gt; for sort_on. When sorting a dict, use key or values&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; TypeError(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;Unexpected type &lt;span class=&quot;hljs-subst&quot;&gt;{&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(iterable)}&lt;/span&gt; for iterable. Expected a list, tuple, or dict&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just learned relevant skill from &lt;a href=&quot;https://www.coursera.org/learn/python-data/lecture/0ou0N/10-tuples&quot; rel=&quot;noreferrer&quot;&gt;Python for Everybody&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;You may use a temporary list to help you to sort the dictionary:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Assume dictionary to be:&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;500.1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1500.2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapple&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;789.0&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# create a temporary list&lt;/span&gt;\ntmp = []\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# iterate through the dictionary and append each tuple into the temporary list &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    tmptuple = (value, key)\n    tmp.append(tmptuple)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# sort the list in ascending order&lt;/span&gt;\ntmp = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(tmp)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (tmp)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to sort the list in descending order, simply change the original sorting line to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;tmp = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(tmp, reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using list comprehension, the one liner would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Assuming the dictionary looks like&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;500.1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1500.2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapple&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;789.0&lt;/span&gt;}\n&lt;span class=&quot;hljs-comment&quot;&gt;#One liner for sorting in ascending order&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([(v, k) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items()]))\n&lt;span class=&quot;hljs-comment&quot;&gt;#One liner for sorting in descending order&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([(v, k) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items()], reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sample Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Asending order&lt;/span&gt;\n[(&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;500.1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;789.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapple&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1500.2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;)]\n&lt;span class=&quot;hljs-comment&quot;&gt;#Descending order&lt;/span&gt;\n[(&lt;span class=&quot;hljs-number&quot;&gt;1500.2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;789.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapple&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;500.1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use &lt;strong&gt;ValueSortedDict&lt;/strong&gt; from &lt;a href=&quot;http://pypi.python.org/pypi/dicts&quot; rel=&quot;noreferrer&quot;&gt;dicts&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dicts.sorteddict &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ValueSortedDict\nd = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_dict = ValueSortedDict(d)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; sorted_dict.items() \n\n[(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Iterate through a dict and sort it by its values in descending order:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python --version\nPython &lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;\n\n$ cat sort_dict_by_val_desc.py \ndictionary = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(siis = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, sana = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, joka = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, tuli = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, aina = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; word &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(dictionary, key=dictionary.get, reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;):\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(word, dictionary[word])\n\n$ python sort_dict_by_val_desc.py \naina &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\ntuli &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\njoka &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nsana &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nsiis &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If your values are integers, and you use Python 2.7 or newer, you can use &lt;a href=&quot;http://docs.python.org/py3k/library/collections.html#collections.Counter&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;collections.Counter&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;dict&lt;/code&gt;. The &lt;code&gt;most_common&lt;/code&gt; method will give you all items, sorted by the value.&lt;/p&gt;\n    ","\n&lt;p&gt;This works in 3.1.x:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\nslovar_sorted=&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(slovar.items(), key=operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(slovar_sorted)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For the sake of completeness, I am posting a solution using &lt;a href=&quot;http://docs.python.org/2/library/heapq.html&quot; rel=&quot;noreferrer&quot;&gt;heapq&lt;/a&gt;. Note, this method will work for both numeric and non-numeric values&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x_items = x.items()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;heapq.heapify(x_items)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To sort in reverse order&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;heapq.nlargest(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(x_items),x_items, operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n[(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To sort in ascending order&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;heapq.nsmallest(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(x_items),x_items, operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n[(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The dictionary data structure does not have inherent order. You can iterate through it but there&apos;s nothing to guarantee that the iteration will follow any particular order. This is by design, so your best bet is probaly using anohter data structure for representation.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/42345/daishiman&quot; title=&quot;804 reputation&quot; class=&quot;comment-user&quot;&gt;Daishiman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3270272_613183&quot;&gt;&lt;span title=&quot;2010-07-05 02:08:19Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 5, 2010 at 2:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&quot;sorted()&quot; can operate on dictionaries (and returns a list of sorted keys), so I think he&apos;s aware of this. Without knowing his program, it&apos;s absurd to tell someone they&apos;re using the wrong data structure. If fast lookups are what you need 90% of the time, then a dict is probably what you want.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/308709/bobpaul&quot; title=&quot;349 reputation&quot; class=&quot;comment-user&quot;&gt;bobpaul&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment20901347_613183&quot;&gt;&lt;span title=&quot;2013-02-15 19:04:51Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 15, 2013 at 19:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;All three outputs (keys, values, both) for sorting dictionaries are covered here in a clear and concise style: &lt;a href=&quot;http://stackoverflow.com/questions/16772071/sort-dict-by-value-python&quot; title=&quot;sort dict by value python&quot;&gt;stackoverflow.com/questions/16772071/sort-dict-by-value-python&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/139271/jstrahl&quot; title=&quot;422 reputation&quot; class=&quot;comment-user&quot;&gt;JStrahl&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59347975_613183&quot;&gt;&lt;span title=&quot;2016-03-07 10:14:49Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 7, 2016 at 10:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Daishiman The base class might not be ordered but &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.OrderedDict&quot; rel=&quot;nofollow noreferrer&quot;&gt;OrderedDict&lt;/a&gt; is of course.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/149428/taylor-d-edmiston&quot; title=&quot;10,706 reputation&quot; class=&quot;comment-user&quot;&gt;Taylor D. Edmiston&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79215136_613183&quot;&gt;&lt;span title=&quot;2017-09-09 01:10:20Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 9, 2017 at 1:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In Python 3.6+ dictionaries preserve insertion order. This is, of course, not the same as possibility of sorting them by value, but on the other hand it is no longer valid to say that &quot;dictionary data structure does not have inherent order&quot;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3530913/konrad-kocik&quot; title=&quot;64 reputation&quot; class=&quot;comment-user&quot;&gt;Konrad Kocik&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94813348_613183&quot;&gt;&lt;span title=&quot;2018-12-31 13:30:40Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 31, 2018 at 13:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;for timings on various dictionary sorting by value schemes:  &lt;a href=&quot;http://writeonly.wordpress.com/2008/08/30/sorting-dictionaries-by-value-in-python-improved/&quot; rel=&quot;nofollow noreferrer&quot;&gt;writeonly.wordpress.com/2008/08/30/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15842/gregg-lind&quot; title=&quot;20,004 reputation&quot; class=&quot;comment-user&quot;&gt;Gregg Lind&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment459741_613218&quot;&gt;&lt;span title=&quot;2009-03-14 17:55:50Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Mar 14, 2009 at 17:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;sorted_x.reverse()&lt;/code&gt; will give you a descending ordering (by the second tuple element)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/234966/saidimu-apale&quot; title=&quot;1,041 reputation&quot; class=&quot;comment-user&quot;&gt;saidimu apale&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment2787661_613218&quot;&gt;&lt;span title=&quot;2010-05-03 05:24:35Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;May 3, 2010 at 5:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;saidimu: Since we&apos;re already using &lt;code&gt;sorted()&lt;/code&gt;, it&apos;s much more efficient to pass in the &lt;code&gt;reverse=True&lt;/code&gt; argument.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/326176/rmh&quot; title=&quot;4,636 reputation&quot; class=&quot;comment-user&quot;&gt;rmh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3270439_613218&quot;&gt;&lt;span title=&quot;2010-07-05 02:59:42Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 5, 2010 at 2:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In python3 I used a lambda: &lt;code&gt;sorted(d.items(), key=lambda x: x[1])&lt;/code&gt;. Will this work in python 2.x?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/181637/keyo&quot; title=&quot;13,197 reputation&quot; class=&quot;comment-user&quot;&gt;Keyo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment5594141_613218&quot;&gt;&lt;span title=&quot;2011-02-15 15:05:11Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Feb 15, 2011 at 15:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Where can I read more about the usage of &lt;code&gt;key=lambda item :item[1]&lt;/code&gt; please? The part I don&apos;t quite understand is the &lt;code&gt;item[1]&lt;/code&gt;, is it because when we do &lt;code&gt;x.items()&lt;/code&gt; it returns the key-value pairs and with this we can tap into the value by doing &lt;code&gt;item[1]&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7613480/udonn00dle&quot; title=&quot;652 reputation&quot; class=&quot;comment-user&quot;&gt;UdonN00dle&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment123505096_613218&quot;&gt;&lt;span title=&quot;2021-11-06 23:56:04Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 6, 2021 at 23:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is also good but &lt;i&gt;&lt;code&gt;key=operator.itemgetter(1)&lt;/code&gt;&lt;/i&gt; should be more scalable for efficiency than &lt;i&gt;&lt;code&gt;key=d.get&lt;/code&gt;&lt;/i&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/202229/smci&quot; title=&quot;29,887 reputation&quot; class=&quot;comment-user&quot;&gt;smci&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10448097_3177911&quot;&gt;&lt;span title=&quot;2011-12-09 21:18:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 9, 2011 at 21:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@bli &lt;code&gt;sorted_keys = sorted(d.items(), key=itemgetter(1), reverse=True)&lt;/code&gt; and &lt;code&gt;for key, val in sorted_keys: print &quot;%s: %d&quot; % (key, val)&lt;/code&gt; - itemgetter creates a function when it&apos;s called, you don&apos;t use it directly like in your example.  And a plain iteration on a dict uses the keys without the values&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/500202/izkata&quot; title=&quot;8,672 reputation&quot; class=&quot;comment-user&quot;&gt;Izkata&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39602912_3177911&quot;&gt;&lt;span title=&quot;2014-08-19 20:21:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 19, 2014 at 20:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;i have come from the future to tell you of &lt;code&gt;collections.Counter&lt;/code&gt;, which has a &lt;code&gt;most_common&lt;/code&gt; method that might interest you  :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/17875/eevee&quot; title=&quot;45,606 reputation&quot; class=&quot;comment-user&quot;&gt;Eevee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment76481868_3177911&quot;&gt;&lt;span title=&quot;2017-06-25 20:47:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 25, 2017 at 20:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;From what I&apos;ve seen (&lt;a href=&quot;http://docs.python.org/2/library/collections.html?highlight=ordereddict#ordereddict-examples-and-recipes&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs.python.org/2/library/&lt;/a&gt;), there is a class called OrderedDict which can be sorted and retain order whilst still being a dictionary. From the code examples, you can use lambda to sort it, but I haven&apos;t tried it out personally :P&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1582976/usandrufus&quot; title=&quot;347 reputation&quot; class=&quot;comment-user&quot;&gt;UsAndRufus&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment21031477_2258273&quot;&gt;&lt;span title=&quot;2013-02-20 10:38:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 20, 2013 at 10:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;d prefer &lt;code&gt;key=lambda (k, v): v&lt;/code&gt; personally&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15055/claudiu&quot; title=&quot;216,607 reputation&quot; class=&quot;comment-user&quot;&gt;Claudiu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment47252672_2258273&quot;&gt;&lt;span title=&quot;2015-04-09 23:08:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 9, 2015 at 23:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Keyo shouldn&apos;t that be it returns an ordered list of keys (sorted by values) not &lt;code&gt;(k,v)&lt;/code&gt; tuples? That&apos;s what I get with Python 2.7.10.   @Nyxynyx add the parameter reverse=True to sort in descending order.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1259706/dhj&quot; title=&quot;502 reputation&quot; class=&quot;comment-user&quot;&gt;dhj&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55249296_2258273&quot;&gt;&lt;span title=&quot;2015-11-16 16:49:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 16, 2015 at 16:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Claudiu I like that &lt;code&gt;(k, v)&lt;/code&gt; syntax too, but it&apos;s not available in Python 3 where &lt;a href=&quot;https://www.python.org/dev/peps/pep-3113/&quot; rel=&quot;nofollow noreferrer&quot;&gt;tuple parameter unpacking&lt;/a&gt; was removed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/673991/bob-stein&quot; title=&quot;14,659 reputation&quot; class=&quot;comment-user&quot;&gt;Bob Stein&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment58175437_2258273&quot;&gt;&lt;span title=&quot;2016-02-05 17:53:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 5, 2016 at 17:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you wrap this in an &lt;code&gt;OrderedDict()&lt;/code&gt; instance you will get a (ordered) dict instead of list of tuples!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4137497/tsveti-iko&quot; title=&quot;5,250 reputation&quot; class=&quot;comment-user&quot;&gt;tsveti_iko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment97286619_2258273&quot;&gt;&lt;span title=&quot;2019-03-21 10:30:54Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 21, 2019 at 10:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What order are keys with the same value placed in? I sorted the list by keys first, then by values, but the order of the keys with the same value does not remain.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/580010/sabrewolfy&quot; title=&quot;5,126 reputation&quot; class=&quot;comment-user&quot;&gt;SabreWolfy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment14505868_613228&quot;&gt;&lt;span title=&quot;2012-06-18 10:04:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 18, 2012 at 10:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Dicts can now be sorted, starting with CPython 3.6 and all other Python implementations starting with 3.7&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3064538/boris-verkhovskiy&quot; title=&quot;11,089 reputation&quot; class=&quot;comment-user&quot;&gt;Boris Verkhovskiy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment108645446_613228&quot;&gt;&lt;span title=&quot;2020-04-24 19:38:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 24, 2020 at 19:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;True at the time, but now python dictionaries preserve the order in which items were inserted already by default. And therefore they can be sorted.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11803687/c8999c-3f964f64&quot; title=&quot;1,246 reputation&quot; class=&quot;comment-user&quot;&gt;c8999c 3f964f64&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126263725_613228&quot;&gt;&lt;span title=&quot;2022-03-11 08:21:00Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 11 at 8:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is not what the question is about - it is not about maintaining order of keys but about &quot;sorting by value&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/226086/nas-banov&quot; title=&quot;27,415 reputation&quot; class=&quot;comment-user&quot;&gt;Nas Banov&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3271246_3177025&quot;&gt;&lt;span title=&quot;2010-07-05 07:07:53Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 5, 2010 at 7:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Nas Banov: it is NOT sorting by the key. it is sorting in the order, we create the items. in our case, we sort by the value. unfortunately, the 3-item dict was unfortunately chosen so the order was the same, when sorted voth by value and key, so i expanded the sample dict.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/234248/mykhal&quot; title=&quot;18,325 reputation&quot; class=&quot;comment-user&quot;&gt;mykhal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3272707_3177025&quot;&gt;&lt;span title=&quot;2010-07-05 10:56:20Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 5, 2010 at 10:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;sorted(d.items(), key=lambda x: x[1])&lt;/code&gt; Can you explain what the &lt;code&gt;x&lt;/code&gt; means, why it can take &lt;code&gt;x[1]&lt;/code&gt; to lambda? Why does it can&apos;t be &lt;code&gt;x[0]&lt;/code&gt;? Thank you very much!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2156457/jzau&quot; title=&quot;3,502 reputation&quot; class=&quot;comment-user&quot;&gt;JZAU&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29524413_3177025&quot;&gt;&lt;span title=&quot;2013-11-08 05:12:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 8, 2013 at 5:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Boern &lt;code&gt;d.items()&lt;/code&gt; returns a list-like container of &lt;code&gt;(key, value)&lt;/code&gt; tuples. &lt;code&gt;[0]&lt;/code&gt; accesses the first element of the tuple -- the key -- and &lt;code&gt;[1]&lt;/code&gt; accesses the second element -- the value.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5496433/ballpointben&quot; title=&quot;7,337 reputation&quot; class=&quot;comment-user&quot;&gt;BallpointBen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86527438_3177025&quot;&gt;&lt;span title=&quot;2018-04-10 14:29:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 10, 2018 at 14:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note: As of 3.6 (as a CPython/PyPy implementation detail) and as of 3.7 (as a Python language guarantee), plain &lt;code&gt;dict&lt;/code&gt; is insertion ordered as well, so you can just replace &lt;code&gt;OrderedDict&lt;/code&gt; with &lt;code&gt;dict&lt;/code&gt; for code running on modern Python. &lt;code&gt;OrderedDict&lt;/code&gt; isn&apos;t really needed anymore unless you need to rearrange the order of an existing &lt;code&gt;dict&lt;/code&gt; (with &lt;code&gt;move_to_end&lt;/code&gt;/&lt;code&gt;popitem&lt;/code&gt;) or need equality comparisons to be order-sensitive. It uses a lot more memory than plain &lt;code&gt;dict&lt;/code&gt;, so if you can, &lt;code&gt;dict&lt;/code&gt; is the way to go.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/364696/shadowranger&quot; title=&quot;127,504 reputation&quot; class=&quot;comment-user&quot;&gt;ShadowRanger&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102011442_3177025&quot;&gt;&lt;span title=&quot;2019-09-04 13:09:56Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 4, 2019 at 13:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;can you explain what itemgetter does in this example? otherwise this seems just as cryptic as using a lamba&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11803687/c8999c-3f964f64&quot; title=&quot;1,246 reputation&quot; class=&quot;comment-user&quot;&gt;c8999c 3f964f64&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126263884_34103440&quot;&gt;&lt;span title=&quot;2022-03-11 08:29:34Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 11 at 8:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;..and as with Hank Gay&apos;s answer, you don&apos;t need the square brackets.  sorted() will happily take any iterable, such as a generator expression.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15154/john-fouhy&quot; title=&quot;39,501 reputation&quot; class=&quot;comment-user&quot;&gt;John Fouhy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment426122_613230&quot;&gt;&lt;span title=&quot;2009-03-05 01:45:48Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Mar 5, 2009 at 1:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You may still need to swap the (value,key) tuple elements to end up with the (key, value). Another list comprehension is then needed.  &lt;code&gt;[(key, value) for (value, key) in sorted_list_of_tuples]&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/234966/saidimu-apale&quot; title=&quot;1,041 reputation&quot; class=&quot;comment-user&quot;&gt;saidimu apale&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment2787653_613230&quot;&gt;&lt;span title=&quot;2010-05-03 05:22:24Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;May 3, 2010 at 5:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;no, it&apos;s better to leave square brackets, because &lt;code&gt;sorted&lt;/code&gt; will have to rebuild the list anyway, and rebuilding from gencomp will be faster. Good for codegolfing, bad for speed. Keep the ugly &lt;code&gt;([])&lt;/code&gt; version.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6451573/jean-fran%c3%a7ois-fabre&quot; title=&quot;132,267 reputation&quot; class=&quot;comment-user&quot;&gt;Jean-François Fabre&lt;/a&gt;\n&lt;span class=&quot;mod-flair &quot; title=&quot;Moderator&quot;&gt;&lt;/span&gt;                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment82368076_613230&quot;&gt;&lt;span title=&quot;2017-12-07 21:21:54Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 7, 2017 at 21:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;m confused, this returns an array of tuples not a dict. IMO you are missing the dict comprehension part:  &lt;code&gt;{x: v for x, v in sorted((value, key) for (key, value) in mydict.items())}&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5412273/melmass&quot; title=&quot;2,687 reputation&quot; class=&quot;comment-user&quot;&gt;melMass&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128345565_613230&quot;&gt;&lt;span title=&quot;2022-06-17 12:15:51Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 17 at 12:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ajcr thanks for the caveat, very appreciated -  as smileys and maybe&apos;s were weaved into my response,these should indicated, the change is massive but of course, only available for CPython (reference implementation) and PyPy. For something completely different ... I rarely talk to non-implementation details when coding man-machine instructions. If it would only have been Jython ;-) ... I might not have had the courage to write it.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/378826/dilettant&quot; title=&quot;3,159 reputation&quot; class=&quot;comment-user&quot;&gt;Dilettant&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment66183881_39424969&quot;&gt;&lt;span title=&quot;2016-09-10 20:22:56Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 10, 2016 at 20:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;OrderedDict&lt;/code&gt; definitely won&apos;t be dropped; instead, it will become a thin wrapper around the current dict implementation (so you might add that it will become more compact, too). Adding that snippet with the &lt;code&gt;ImportError&lt;/code&gt; isn&apos;t quite the best idea due to it misleading readers that &lt;code&gt;OrderedDict&lt;/code&gt; has no use.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4952130/dimitris-fasarakis-hilliard&quot; title=&quot;137,482 reputation&quot; class=&quot;comment-user&quot;&gt;Dimitris Fasarakis Hilliard&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment69358529_39424969&quot;&gt;&lt;span title=&quot;2016-12-10 13:33:02Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 10, 2016 at 13:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In a response to this answer, and structured dicts, I posted &lt;a href=&quot;https://stackoverflow.com/questions/613183/how-do-i-sort-a-dictionary-by-value/49073645#49073645&quot;&gt;a new answer&lt;/a&gt;. Feedback welcome!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1150683/bram-vanroy&quot; title=&quot;25,192 reputation&quot; class=&quot;comment-user&quot;&gt;Bram Vanroy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment85153020_39424969&quot;&gt;&lt;span title=&quot;2018-03-02 16:49:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 2, 2018 at 16:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How could I convert it back to a dictionary?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6223051/rowana&quot; title=&quot;698 reputation&quot; class=&quot;comment-user&quot;&gt;rowana&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment71369022_7237524&quot;&gt;&lt;span title=&quot;2017-02-07 20:31:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 7, 2017 at 20:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;as_list=[Player(v,k) for (k,v) in d.items()]       as_dict=dict((p.name,p.score) for p in as_list)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/847331/remi&quot; title=&quot;19,607 reputation&quot; class=&quot;comment-user&quot;&gt;Remi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment71976890_7237524&quot;&gt;&lt;span title=&quot;2017-02-23 12:31:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 23, 2017 at 12:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that you&apos;re both iterating the dictionary and fetching values by their key, so performance wise this is not an optimal solution.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/17772/ron-klein&quot; title=&quot;8,940 reputation&quot; class=&quot;comment-user&quot;&gt;Ron Klein&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment66528932_4215710&quot;&gt;&lt;span title=&quot;2016-09-21 08:00:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2016 at 8:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Dejell: as the contributor says, he interprets the question as &quot;can I get the list of keys sorted according to the values&quot;. We don&apos;t need the values in the result, we have them in the dictionary.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7470921/max&quot; title=&quot;343 reputation&quot; class=&quot;comment-user&quot;&gt;Max&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95143642_4215710&quot;&gt;&lt;span title=&quot;2019-01-12 03:19:58Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 12, 2019 at 3:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;what about if you dictionary is &amp;gt;&amp;gt;&amp;gt; x={&apos;hello&apos;:1,&apos;python&apos;:5, &apos;world&apos;:300}&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2062973/james&quot; title=&quot;14,873 reputation&quot; class=&quot;comment-user&quot;&gt;James&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31210677_11230132&quot;&gt;&lt;span title=&quot;2013-12-28 13:17:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 28, 2013 at 13:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@yopy &lt;code&gt;Counter({&apos;hello&apos;:1, &apos;python&apos;:5, &apos;world&apos;:300}).most_common()&lt;/code&gt; gives &lt;code&gt;[(&apos;world&apos;, 300), (&apos;python&apos;, 5), (&apos;hello&apos;, 1)]&lt;/code&gt;. This actually works for any sortable value type (although many &lt;i&gt;other&lt;/i&gt; Counter operations do require values to be comparable to ints).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/779200/lvc&quot; title=&quot;32,965 reputation&quot; class=&quot;comment-user&quot;&gt;lvc&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31211363_11230132&quot;&gt;&lt;span title=&quot;2013-12-28 13:58:26Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 28, 2013 at 13:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Awesome! &lt;code&gt;for key, value in sorted(mydict.iteritems(), key=lambda (k,v): v[&quot;score&quot;]):&lt;/code&gt; allows you to sort by a subkey&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/50552/andomar&quot; title=&quot;225,816 reputation&quot; class=&quot;comment-user&quot;&gt;Andomar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment76931274_22903797&quot;&gt;&lt;span title=&quot;2017-07-07 19:08:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 7, 2017 at 19:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;this doesn&apos;t work in later versions of python that dont support tuple unpacking and where dicts no longer have iteritems()&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9242508/lb-so&quot; title=&quot;88 reputation&quot; class=&quot;comment-user&quot;&gt;lb_so&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment119924329_22903797&quot;&gt;&lt;span title=&quot;2021-06-05 10:30:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 5, 2021 at 10:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;works great! &lt;code&gt;dict(sorted(words.items(), key=lambda x: x[1], reverse=True))&lt;/code&gt; for DESC&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1738895/vizyourdata&quot; title=&quot;1,219 reputation&quot; class=&quot;comment-user&quot;&gt;vizyourdata&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93639658_52345214&quot;&gt;&lt;span title=&quot;2018-11-19 20:10:53Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 19, 2018 at 20:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How is this different from &lt;a href=&quot;http://stackoverflow.com/questions/613183/python-sort-a-dictionary-by-value/11230132#11230132&quot;&gt;Ivan Sas&apos;s answer&lt;/a&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/63550/peter-mortensen&quot; title=&quot;30,018 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Mortensen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34847147_15310681&quot;&gt;&lt;span title=&quot;2014-04-03 17:07:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 3, 2014 at 17:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;can we change the order of sort, right now, it is asending, but I want decsending.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6304394/suleman-elahi&quot; title=&quot;159 reputation&quot; class=&quot;comment-user&quot;&gt;Suleman Elahi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106284747_26049456&quot;&gt;&lt;span title=&quot;2020-02-06 12:15:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 6, 2020 at 12:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;afaik you would have to negate your values in order to reverse the ordering&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/647151/malthe&quot; title=&quot;925 reputation&quot; class=&quot;comment-user&quot;&gt;malthe&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106286713_26049456&quot;&gt;&lt;span title=&quot;2020-02-06 13:14:41Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 6, 2020 at 13:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is the only answer that worked so far in python 2.7&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2073909/rkochev&quot; title=&quot;63 reputation&quot; class=&quot;comment-user&quot;&gt;rkochev&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment116323245_44187197&quot;&gt;&lt;span title=&quot;2021-01-19 12:44:14Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 19, 2021 at 12:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;i&gt;regular Python dictionaries don&apos;t keep the original order&lt;/i&gt;  as of Python 3.7, they do.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/974555/gerrit&quot; title=&quot;20,927 reputation&quot; class=&quot;comment-user&quot;&gt;gerrit&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94560075_31741215&quot;&gt;&lt;span title=&quot;2018-12-19 17:13:36Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 19, 2018 at 17:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;question was: sort by value, not by keys... I like seeing a function. You can import collections and of course use sorted(data.values())&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/847331/remi&quot; title=&quot;19,607 reputation&quot; class=&quot;comment-user&quot;&gt;Remi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment8703854_4068769&quot;&gt;&lt;span title=&quot;2011-08-30 00:38:21Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 30, 2011 at 0:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If you want to print it in the initial format you should do:print ([(k,v) for v,k in sorted([(v,k) for k,v in d.items()])]) . The output is: [(&apos;orange&apos;, 1.0), (&apos;apple&apos;, 500.1), (&apos;pineapple&apos;, 789.0), (&apos;banana&apos;, 1500.2)]. With [(k,v) for v,k in sorted([(v,k) for k,v in d.items()], reverse = True)]  the output is: [(&apos;banana&apos;, 1500.2), (&apos;pineapple&apos;, 789.0), (&apos;apple&apos;, 500.1), (&apos;orange&apos;, 1.0)]&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10049735/hermes-morales&quot; title=&quot;507 reputation&quot; class=&quot;comment-user&quot;&gt;Hermes Morales&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment108965274_50554874&quot;&gt;&lt;span title=&quot;2020-05-04 20:14:01Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 4, 2020 at 20:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":201,"title":"How do I sort a dictionary by value?","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                    &lt;div class=&quot;flex--item mr8&quot;&gt;\n                        &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLock&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M16 9a2 2 0 0 0-2-2V6A5 5 0 0 0 4 6v1a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V9Zm-7 5a2 2 0 1 1 0-4 2 2 0 0 1 0 4Zm3.1-7H5.9V6a3.1 3.1 0 0 1 6.2 0v1Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;This question&apos;s answers are a &lt;a href=&quot;/help/privileges/edit-community-wiki&quot;&gt;community effort&lt;/a&gt;&lt;/b&gt;. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;I have a dictionary of values read from two fields in a database: a string field and a numeric field. The string field is unique, so that is the key of the dictionary.&lt;/p&gt;\n\n&lt;p&gt;I can sort on the keys, but how can I sort based on the values?&lt;/p&gt;\n\n&lt;p&gt;Note: I have read Stack Overflow question here &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/72899&quot;&gt;How do I sort a list of dictionaries by a value of the dictionary?&lt;/a&gt;&lt;/em&gt; and probably could change my code to have a list of dictionaries, but since I do not really need a list of dictionaries I wanted to know if there is a simpler solution to sort either in ascending or descending order.&lt;/p&gt;\n    ","slug":"how-do-i-sort-a-dictionary-by-value-1657385485049","postType":"QUESTION","createdAt":"2022-07-09T16:51:25.000Z","updatedAt":"2022-07-09T16:51:25.000Z","tags":[{"id":1439,"name":"dictionary","slug":"dictionary","createdAt":"2022-07-09T16:51:25.000Z","updatedAt":"2022-07-09T16:51:25.000Z","Questions_Tags":{"questionId":201,"tagId":1439}}]}},"__N_SSG":true}