{"pageProps":{"data":{"answer":["\n&lt;p&gt;Yes, it was &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2005-September/056846.html&quot; rel=&quot;noreferrer&quot; title=&quot;[Python-Dev] Conditional Expression Resolution&quot;&gt;added&lt;/a&gt; in version 2.5. The expression syntax is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; condition &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; b\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;First &lt;code&gt;condition&lt;/code&gt; is evaluated, then exactly one of either &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; is evaluated and returned based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Boolean_data_type&quot; rel=&quot;noreferrer&quot; title=&quot;Boolean data type&quot;&gt;Boolean&lt;/a&gt; value of &lt;code&gt;condition&lt;/code&gt;. If &lt;code&gt;condition&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt;, then &lt;code&gt;a&lt;/code&gt; is evaluated and returned but &lt;code&gt;b&lt;/code&gt; is ignored, or else when &lt;code&gt;b&lt;/code&gt; is evaluated and returned but &lt;code&gt;a&lt;/code&gt; is ignored.&lt;/p&gt;\n&lt;p&gt;This allows short-circuiting because when &lt;code&gt;condition&lt;/code&gt; is true only &lt;code&gt;a&lt;/code&gt; is evaluated and &lt;code&gt;b&lt;/code&gt; is not evaluated at all, but when &lt;code&gt;condition&lt;/code&gt; is false only &lt;code&gt;b&lt;/code&gt; is evaluated and &lt;code&gt;a&lt;/code&gt; is not evaluated at all.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;true&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;false&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;true&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;true&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;false&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;false&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that conditionals are an &lt;em&gt;expression&lt;/em&gt;, not a &lt;em&gt;statement&lt;/em&gt;. This means you can&apos;t use assignment statements or &lt;code&gt;pass&lt;/code&gt; or other &lt;strong&gt;statements&lt;/strong&gt; within a conditional &lt;strong&gt;expression&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n          ^\nSyntaxError: invalid syntax\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can, however, use conditional expressions to assign a variable like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = a &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; b\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Think of the conditional expression as switching between two values. It is very useful when you&apos;re in a &apos;one value or another&apos; situation, but it doesn&apos;t do much else.&lt;/p&gt;\n&lt;p&gt;If you need to use statements, you have to use a normal &lt;code&gt;if&lt;/code&gt; &lt;strong&gt;statement&lt;/strong&gt; instead of a conditional &lt;strong&gt;expression&lt;/strong&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Keep in mind that it&apos;s frowned upon by some Pythonistas for several reasons:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The order of the arguments is different from those of the classic &lt;code&gt;condition ? a : b&lt;/code&gt; ternary operator from many other languages (such as &lt;a href=&quot;https://en.wikipedia.org/wiki/C_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;C&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B&quot; rel=&quot;noreferrer&quot;&gt;C++&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Go_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Go&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Perl&quot; rel=&quot;noreferrer&quot;&gt;Perl&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Ruby_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Ruby&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/JavaScript&quot; rel=&quot;noreferrer&quot;&gt;JavaScript&lt;/a&gt;, etc.), which may lead to bugs when people unfamiliar with Python&apos;s &quot;surprising&quot; behaviour use it (they may reverse the argument order).&lt;/li&gt;\n&lt;li&gt;Some find it &quot;unwieldy&quot;, since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).&lt;/li&gt;\n&lt;li&gt;Stylistic reasons. (Although the &apos;inline &lt;code&gt;if&lt;/code&gt;&apos; can be &lt;em&gt;really&lt;/em&gt; useful, and make your script more concise, it really does complicate your code)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If you&apos;re having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, &lt;code&gt;x = 4 if b &amp;gt; 8 else 9&lt;/code&gt; is read aloud as &lt;code&gt;x will be 4 if b is greater than 8 otherwise 9&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Official documentation:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#conditional-expressions&quot; rel=&quot;noreferrer&quot; title=&quot;Conditional expressions&quot;&gt;Conditional expressions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator&quot; rel=&quot;noreferrer&quot; title=&quot;Is there an equivalent of Cs ?: ternary operator?&quot;&gt;Is there an equivalent of Cs ?: ternary operator?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;You can index into a tuple:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(falseValue, trueValue)[test]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;test&lt;/code&gt; needs to return &lt;em&gt;True&lt;/em&gt; or &lt;em&gt;False&lt;/em&gt;.&lt;br&gt;\nIt might be safer to always implement it as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(falseValue, trueValue)[test == &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or you can use the built-in &lt;a href=&quot;https://docs.python.org/3.3/library/functions.html#bool&quot; rel=&quot;noreferrer&quot; title=&quot;bool&quot;&gt;&lt;code&gt;bool()&lt;/code&gt;&lt;/a&gt; to assure a &lt;a href=&quot;https://en.wikipedia.org/wiki/Boolean_data_type&quot; rel=&quot;noreferrer&quot; title=&quot;Boolean data type&quot;&gt;Boolean&lt;/a&gt; value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(falseValue, trueValue)[&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(&amp;lt;expression&amp;gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For versions prior to 2.5, there&apos;s the trick:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[expression] &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; [on_true] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; [on_false]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It can give wrong results when &lt;code&gt;on_true&lt;/code&gt; has a false Boolean value.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;Although it does have the benefit of evaluating expressions left to right, which is clearer in my opinion.&lt;/p&gt;\n&lt;p&gt;&lt;sub&gt;1. &lt;a href=&quot;http://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator&quot; rel=&quot;noreferrer&quot;&gt;Is there an equivalent of Cs ?: ternary operator?&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt; &lt;i&gt;&amp;lt;expression 1&amp;gt;&lt;/i&gt; &lt;b&gt;if&lt;/b&gt; &lt;i&gt;&amp;lt;condition&amp;gt;&lt;/i&gt; &lt;b&gt;else&lt;/b&gt; &lt;i&gt;&amp;lt;expression 2&amp;gt;&lt;/i&gt; &lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nb = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; \n&lt;span class=&quot;hljs-comment&quot;&gt;# Output is -1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;lt; b &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Output is -1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;From &lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#conditional-expressions&quot; rel=&quot;noreferrer&quot; title=&quot;Conditional expressions&quot;&gt;the documentation&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Conditional expressions (sometimes called a ternary operator) have the lowest priority of all Python operations.&lt;/p&gt;\n  \n  &lt;p&gt;The expression &lt;code&gt;x if C else y&lt;/code&gt; first evaluates the condition, &lt;em&gt;C&lt;/em&gt; (&lt;em&gt;not x&lt;/em&gt;); if &lt;em&gt;C&lt;/em&gt; is true, &lt;em&gt;x&lt;/em&gt; is evaluated and its value is returned; otherwise, &lt;em&gt;y&lt;/em&gt; is evaluated and its value is returned.&lt;/p&gt;\n  \n  &lt;p&gt;See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0308/&quot; rel=&quot;noreferrer&quot; title=&quot;PEP 308 -- Conditional Expressions&quot;&gt;PEP 308&lt;/a&gt; for more details about conditional expressions.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;New since version 2.5.&lt;/p&gt;\n    ","\n&lt;p&gt;An operator for a conditional expression in Python was added in 2006 as part of &lt;a href=&quot;https://www.python.org/dev/peps/pep-0308/&quot; rel=&quot;noreferrer&quot;&gt;Python Enhancement Proposal 308&lt;/a&gt;. Its form differ from common &lt;code&gt;?:&lt;/code&gt; operator and it&apos;s:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;expression1&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &amp;lt;condition&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &amp;lt;expression2&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which is equivalent to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &amp;lt;condition&amp;gt;: &amp;lt;expression1&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;: &amp;lt;expression2&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is an example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;result = x &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; y\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another syntax which can be used (compatible with versions before 2.5):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;result = (&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;:y, &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;:x)[a &amp;gt; b]()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where operands are &lt;a href=&quot;https://en.wikipedia.org/wiki/Lazy_evaluation&quot; rel=&quot;noreferrer&quot;&gt;lazily evaluated&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Another way is by indexing a tuple (which isn&apos;t consistent with the conditional operator of most other languages):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;result = (y, x)[a &amp;gt; b]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or explicitly constructed dictionary:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;result = {&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;: x, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;: y}[a &amp;gt; b]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another (less reliable), but simpler method is to use &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; operators:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;result = (a &amp;gt; b) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;however this won&apos;t work if &lt;code&gt;x&lt;/code&gt; would be &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;A possible workaround is to make &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; lists or tuples as in the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;result = ((a &amp;gt; b) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; [x] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; [y])[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;result = ((a &amp;gt; b) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; (x,) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (y,))[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you&apos;re working with dictionaries, instead of using a ternary conditional, you can take advantage of &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.get&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;get(key, default)&lt;/code&gt;&lt;/a&gt;, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;shell = os.environ.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SHELL&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;sup&gt;Source: &lt;a href=&quot;https://en.wikipedia.org/wiki/%3F:#Python&quot; rel=&quot;noreferrer&quot;&gt;?: in Python at Wikipedia&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Unfortunately, the&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(falseValue, trueValue)[test]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;solution doesn&apos;t have short-circuit behaviour; thus both &lt;code&gt;falseValue&lt;/code&gt; and &lt;code&gt;trueValue&lt;/code&gt; are evaluated regardless of the condition. This could be suboptimal or even buggy (i.e. both &lt;code&gt;trueValue&lt;/code&gt; and &lt;code&gt;falseValue&lt;/code&gt; could be methods and have side effects).&lt;/p&gt;\n&lt;p&gt;One solution to this would be&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: falseValue, &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: trueValue)[test]()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(execution delayed until the winner is known ;)), but it introduces inconsistency between callable and non-callable objects. In addition, it doesn&apos;t solve the case when using properties.&lt;/p&gt;\n&lt;p&gt;And so the story goes - choosing between three mentioned solutions is a trade-off between having the short-circuit feature, using at least Python 2.5 (IMHO, not a problem anymore) and not being prone to &quot;&lt;code&gt;trueValue&lt;/code&gt;-evaluates-to-false&quot; errors.&lt;/p&gt;\n    ","\n&lt;h2&gt;&lt;strong&gt;Ternary operator in different programming languages&lt;/strong&gt;&lt;/h2&gt;\n&lt;p&gt;Here I just try to show some important differences in the &lt;a href=&quot;https://en.wikipedia.org/wiki/%3F:&quot; rel=&quot;nofollow noreferrer&quot;&gt;ternary operator&lt;/a&gt; between a couple of programming languages.&lt;/p&gt;\n&lt;h3&gt;&lt;em&gt;Ternary operator in &lt;a href=&quot;https://en.wikipedia.org/wiki/JavaScript&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript&lt;/a&gt;&lt;/em&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;var a = true ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1&lt;/span&gt;\nvar b = false ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;&lt;em&gt;Ternary operator in &lt;a href=&quot;https://en.wikipedia.org/wiki/Ruby_%28programming_language%29&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ruby&lt;/a&gt;&lt;/em&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = true ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1&lt;/span&gt;\nb = false ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;&lt;em&gt;Ternary operator in &lt;a href=&quot;https://en.wikipedia.org/wiki/Scala_%28programming_language%29&quot; rel=&quot;nofollow noreferrer&quot;&gt;Scala&lt;/a&gt;&lt;/em&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;val a = true ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1&lt;/span&gt;\nval b = false ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;&lt;em&gt;Ternary operator in &lt;a href=&quot;https://en.wikipedia.org/wiki/R_%28programming_language%29&quot; rel=&quot;nofollow noreferrer&quot;&gt;R&lt;/a&gt; programming&lt;/em&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a &amp;lt;- &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (TRUE) &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1&lt;/span&gt;\nb &amp;lt;- &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (FALSE) &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;&lt;em&gt;Ternary operator in Python&lt;/em&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1&lt;/span&gt;\nb = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For Python 2.5 and newer there is a specific syntax:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[on_true] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; [cond] &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [on_false]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In older Pythons a ternary operator is not implemented but it&apos;s possible to simulate it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;cond &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; on_true &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; on_false\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Though, there is a potential problem, which if &lt;code&gt;cond&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;on_true&lt;/code&gt; evaluates to &lt;code&gt;False&lt;/code&gt; then &lt;code&gt;on_false&lt;/code&gt; is returned instead of &lt;code&gt;on_true&lt;/code&gt;. If you want this behavior the method is OK, otherwise use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;: on_true, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;: on_false}[cond &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# is True, not == True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which can be wrapped by:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;q&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cond, on_true, on_false&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;: on_true, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;: on_false}[cond &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and used this way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;q(cond, on_true, on_false)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is compatible with all Python versions.&lt;/p&gt;\n    ","\n&lt;p&gt;You might often find&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;cond &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; on_true &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; on_false\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;but this leads to a problem when on_true == 0&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; x == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; x == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Where you would expect this result for a normal ternary operator:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n&lt;h1&gt;Does Python have a ternary conditional operator?&lt;/h1&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Yes. From the &lt;a href=&quot;https://docs.python.org/reference/grammar.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;grammar file&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;test: or_test [&lt;span class=&quot;hljs-string&quot;&gt;&apos;if&apos;&lt;/span&gt; or_test &lt;span class=&quot;hljs-string&quot;&gt;&apos;else&apos;&lt;/span&gt; test] | lambdef\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The part of interest is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;or_test [&lt;span class=&quot;hljs-string&quot;&gt;&apos;if&apos;&lt;/span&gt; or_test &lt;span class=&quot;hljs-string&quot;&gt;&apos;else&apos;&lt;/span&gt; test]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So, a ternary conditional operation is of the form:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;expression1 &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; expression2 &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; expression3\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;expression3&lt;/code&gt; will be lazily evaluated (that is, evaluated only if &lt;code&gt;expression2&lt;/code&gt; is false in a boolean context). And because of the recursive definition, you can chain them indefinitely (though it may considered bad style.)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;expression1 &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; expression2 &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; expression3 &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; expression4 &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; expression5 &lt;span class=&quot;hljs-comment&quot;&gt;# and so on&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;A note on usage:&lt;/h3&gt;\n&lt;p&gt;Note that every &lt;code&gt;if&lt;/code&gt; must be followed with an &lt;code&gt;else&lt;/code&gt;. People learning list comprehensions and generator expressions may find this to be a difficult lesson to learn - the following will not work, as Python expects a third expression for an else:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[expression1 &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; expression2 &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; iterable]\n&lt;span class=&quot;hljs-comment&quot;&gt;#                          ^-- need an else here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which raises a &lt;code&gt;SyntaxError: invalid syntax&lt;/code&gt;.\nSo the above is either an incomplete piece of logic (perhaps the user expects a no-op in the false condition) or what may be intended is to use &lt;code&gt;expression2&lt;/code&gt; as a filter - notes that the following is legal Python:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[expression1 &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; iterable &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; expression2]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;expression2&lt;/code&gt; works as a filter for the list comprehension, and is &lt;em&gt;not&lt;/em&gt; a ternary conditional operator.&lt;/p&gt;\n&lt;h3&gt;Alternative syntax for a more narrow case:&lt;/h3&gt;\n&lt;p&gt;You may find it somewhat painful to write the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;expression1 &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; expression1 &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; expression2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;expression1&lt;/code&gt; will have to be evaluated twice with the above usage. It can limit redundancy if it is simply a local variable. However, a common and performant Pythonic idiom for this use-case is to use &lt;code&gt;or&lt;/code&gt;&apos;s shortcutting behavior:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;expression1 &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; expression2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which is equivalent in semantics. Note that some style-guides may limit this usage on the grounds of clarity - it does pack a lot of meaning into very little syntax.&lt;/p&gt;\n    ","\n&lt;p&gt;As already answered, yes, there is a ternary operator in Python:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;&amp;lt;expression 1&amp;gt; if &amp;lt;condition&amp;gt; else &amp;lt;expression 2&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In many cases &lt;code&gt;&amp;lt;expression 1&amp;gt;&lt;/code&gt; is also used as Boolean evaluated &lt;code&gt;&amp;lt;condition&amp;gt;&lt;/code&gt;. Then you can use &lt;a href=&quot;https://en.wikipedia.org/wiki/Short-circuit_evaluation&quot; rel=&quot;nofollow noreferrer&quot;&gt;short-circuit evaluation&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nb = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Instead of this:&lt;/span&gt;\nx = a &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; b\n&lt;span class=&quot;hljs-comment&quot;&gt;# Evaluates as &apos;a if bool(a) else b&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# You could use short-circuit evaluation:&lt;/span&gt;\nx = a &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; b\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;One big pro of short-circuit evaluation is the possibility of chaining more than two expressions:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = a &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; d &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; e\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When working with functions it is more different in detail:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Evaluating functions:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo executed&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;y&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar executed&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; y\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;blubb&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;z&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;blubb executed&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; z\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Ternary Operator expression 1 equals to False&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(foo(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; foo(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; bar(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos; foo and bar are executed once\nfoo executed\nbar executed\n1\n&apos;&apos;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Ternary Operator expression 1 equals to True&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(foo(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; foo(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; bar(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;))\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos; foo is executed twice!\nfoo executed\nfoo executed\n2\n&apos;&apos;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Short-circuit evaluation second equals to True&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(foo(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; bar(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; blubb(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos; blubb is not executed\nfoo executed\nbar executed\n1\n&apos;&apos;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Short-circuit evaluation third equals to True&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(foo(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; bar(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; blubb(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\nfoo executed\nbar executed\nblubb executed\n2\n&apos;&apos;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Short-circuit evaluation all equal to False&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(foo(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; bar(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; blubb(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos; Result is 0 (from blubb(0)) because no value equals to True\nfoo executed\nbar executed\nblubb executed\n0\n&apos;&apos;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;PS: Of course, a short-circuit evaluation is not a ternary operator, but often the ternary is used in cases where the short circuit would be enough. It has a better readability and can be chained.&lt;/p&gt;\n    ","\n&lt;p&gt;One of the alternatives to Python&apos;s &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2005-September/056846.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;conditional expression&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; boolean &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;no&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;no&quot;&lt;/span&gt;}[boolean]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which has the following nice extension:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;no&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;maybe&quot;&lt;/span&gt;}[boolean_or_none]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The shortest alternative remains&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;no&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;)[boolean]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which works because &lt;code&gt;issubclass(bool, int)&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Careful, though: the alternative to&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;yes() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; boolean &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; no()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is &lt;em&gt;not&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(no(), yes())[boolean]  &lt;span class=&quot;hljs-comment&quot;&gt;# bad: BOTH no() and yes() are called&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;but&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(no, yes)[boolean]()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This works fine as long as &lt;code&gt;no&lt;/code&gt; and &lt;code&gt;yes&lt;/code&gt; are to be called with exactly the same parameters. If they are not, like in&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;yes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ok&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; boolean &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; no()  &lt;span class=&quot;hljs-comment&quot;&gt;# (1)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or in&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;yes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ok&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; boolean &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; no(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sorry&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# (2)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;then a similar alternative either does not exist (1) or is hardly viable (2). (In rare cases, depending on the context, something like&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;msg = (&lt;span class=&quot;hljs-string&quot;&gt;&quot;sorry&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;ok&quot;&lt;/span&gt;)[boolean]\n(no, yes)[boolean](msg)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;could make sense.)&lt;/p&gt;\n&lt;p&gt;&lt;sub&gt;Thanks to Radek Rojík for his comment&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Simulating the Python ternary operator.&lt;/p&gt;\n&lt;p&gt;For example&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a, b, x, y = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a greather than b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b greater than a&apos;&lt;/span&gt;\nresult = (&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;:y, &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;:x)[a &amp;gt; b]()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;b greater than a&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; condition &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just memorize this pyramid if you have trouble remembering:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;     condition\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;           &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\na                   b \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The ternary conditional operator simply allows testing a condition in a single line replacing the multiline if-else making the code compact.&lt;/p&gt;\n&lt;h3&gt;Syntax:&lt;/h3&gt;\n&lt;blockquote&gt;\n&lt;p&gt;[on_true] if [expression] else [on_false]&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h3&gt;1- Simple Method to use ternary operator:&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Program to demonstrate conditional operator&lt;/span&gt;\na, b = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Copy value of a in min if a &amp;lt; b else copy b&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt; = a &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;lt; b &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; b\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# Output: 10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;2- Direct Method of using tuples, Dictionary, and lambda:&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Python program to demonstrate ternary operator&lt;/span&gt;\na, b = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Use tuple for selecting an item&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( (b, a) [a &amp;lt; b] )\n&lt;span class=&quot;hljs-comment&quot;&gt;# Use Dictionary for selecting an item&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;({&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;: a, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;: b} [a &amp;lt; b])\n&lt;span class=&quot;hljs-comment&quot;&gt;# lambda is more efficient than above two methods&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# because in lambda  we are assure that&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# only one expression will be evaluated unlike in&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# tuple and Dictionary&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;((&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: b, &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: a)[a &amp;lt; b]()) &lt;span class=&quot;hljs-comment&quot;&gt;# in output you should see three 10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;3- Ternary operator can be written as nested if-else:&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Python program to demonstrate nested ternary operator&lt;/span&gt;\na, b = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Both a and b are equal&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a == b &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;a is greater than b&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;b is greater than a&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Above approach can be written as:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Python program to demonstrate nested ternary operator&lt;/span&gt;\na, b = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a != b:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &amp;gt; b:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a is greater than b&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b is greater than a&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Both a and b are equal&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# Output: b is greater than a&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator/394814#394814&quot;&gt;Vinko Vrsalovic&apos;s answer&lt;/a&gt; is good enough. There is only one more thing:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Note that conditionals are an &lt;em&gt;expression&lt;/em&gt;, not a &lt;em&gt;statement&lt;/em&gt;. This means you can&apos;t use assignment statements or &lt;code&gt;pass&lt;/code&gt; or other &lt;strong&gt;statements&lt;/strong&gt; within a conditional &lt;strong&gt;expression&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h3&gt;Walrus operator in Python 3.8&lt;/h3&gt;\n&lt;p&gt;After the &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions&quot; rel=&quot;nofollow noreferrer&quot;&gt;walrus operator&lt;/a&gt; was introduced in Python 3.8, something changed.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(a := &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; (b := &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;gives &lt;code&gt;a = 3&lt;/code&gt; and &lt;code&gt;b is not defined&lt;/code&gt;,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(a := &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; (b := &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;gives &lt;code&gt;a is not defined&lt;/code&gt; and &lt;code&gt;b = 5&lt;/code&gt;, and&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;c = (a := &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; (b := &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;gives &lt;code&gt;c = 5&lt;/code&gt;, &lt;code&gt;a is not defined&lt;/code&gt; and &lt;code&gt;b = 5&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Even if this may be ugly, &lt;strong&gt;assignments&lt;/strong&gt; can be done &lt;strong&gt;inside&lt;/strong&gt; conditional expressions after Python 3.8. Anyway, it is still better to use normal &lt;code&gt;if&lt;/code&gt; &lt;strong&gt;statement&lt;/strong&gt; instead in this case.&lt;/p&gt;\n    ","\n&lt;p&gt;More a tip than an answer (I don&apos;t need to repeat the obvious for the hundredth time), but I sometimes use it as a one-liner shortcut in such constructs:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; conditionX:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;yes&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;nah&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;, becomes:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;yes&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; conditionX &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;nah&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Some (many :) may frown upon it as unpythonic (even, Ruby-ish :), but I personally find it more natural - i.e., how you&apos;d express it normally, plus a bit more visually appealing in large blocks of code.&lt;/p&gt;\n    ","\n&lt;p&gt;You can do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;[condition] and [expression_1] or [expression_2];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;print(number%2 and &quot;odd&quot; or &quot;even&quot;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This would print &quot;odd&quot; if the number is odd or &quot;even&quot; if the number is even.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;The result:&lt;/strong&gt; If condition is true, exp_1 is executed, else exp_2 is executed.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 0, None, False, emptylist, and emptyString evaluates as False.&lt;/p&gt;\n&lt;p&gt;And any data other than 0 evaluates to True.&lt;/p&gt;\n&lt;h2&gt;Here&apos;s how it works:&lt;/h2&gt;\n&lt;p&gt;If the condition [condition] becomes &quot;True&quot;, then expression_1 will be evaluated, but not expression_2.&lt;/p&gt;\n&lt;p&gt;If we &quot;and&quot; something with 0 (zero), the result will always to be false. So in the below statement,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; exp\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The expression &lt;em&gt;exp&lt;/em&gt; won&apos;t be evaluated at all since &quot;and&quot; with 0 will always evaluate to zero and there is no need to evaluate the expression. This is how the compiler itself works, in all languages.&lt;/p&gt;\n&lt;p&gt;In&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; exp\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;the expression &lt;em&gt;exp&lt;/em&gt; won&apos;t be evaluated at all since &quot;or&quot; with 1 will always be 1. So it won&apos;t bother to evaluate the expression exp since the result will be 1 anyway (compiler optimization methods).&lt;/p&gt;\n&lt;p&gt;But in case of&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; exp1 &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; exp2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The second expression exp2 won&apos;t be evaluated since &lt;code&gt;True and exp1&lt;/code&gt; would be True when exp1 isn&apos;t false.&lt;/p&gt;\n&lt;p&gt;Similarly in&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; exp1 &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; exp2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The expression &lt;em&gt;exp1&lt;/em&gt; won&apos;t be evaluated since False is equivalent to writing 0 and doing &quot;and&quot; with 0 would be 0 itself, but after exp1 since &quot;or&quot; is used, it will evaluate the expression exp2 after &quot;or&quot;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; This kind of branching using &quot;or&quot; and &quot;and&quot; can only be used when the expression_1 doesn&apos;t have a Truth value of False (or 0 or None or emptylist [ ] or emptystring &apos; &apos;.) since if expression_1 becomes False, then the expression_2 will be evaluated because of the presence &quot;or&quot; between exp_1 and exp_2.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;In case you still want to make it work for all the cases regardless of what exp_1 and exp_2 truth values are, do this:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;[condition] and ([expression_1] or 1) or [expression_2];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Many programming languages derived from &lt;a href=&quot;https://en.wikipedia.org/wiki/C_%28programming_language%29&quot; rel=&quot;nofollow noreferrer&quot;&gt;C&lt;/a&gt; usually have the following syntax of the ternary conditional operator:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;condition&amp;gt; ? &amp;lt;expression1&amp;gt; : &amp;lt;expression2&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;At first, the Python&apos;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Benevolent_dictator_for_life&quot; rel=&quot;nofollow noreferrer&quot;&gt;benevolent dictator for life&lt;/a&gt; (I mean &lt;a href=&quot;https://en.wikipedia.org/wiki/Guido_van_Rossum&quot; rel=&quot;nofollow noreferrer&quot;&gt;Guido van Rossum&lt;/a&gt;, of course) rejected it (as non-Pythonic style), since it&apos;s quite hard to understand for people not used to C language. Also, the colon sign &lt;strong&gt;&lt;code&gt;:&lt;/code&gt;&lt;/strong&gt; already has many uses in Python. After &lt;strong&gt;PEP 308&lt;/strong&gt; was approved, Python finally received its own shortcut conditional expression (what we use now):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;expression1&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &amp;lt;condition&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &amp;lt;expression2&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So, firstly it evaluates the condition. If it returns &lt;code&gt;True&lt;/code&gt;, &lt;strong&gt;expression1&lt;/strong&gt; will be evaluated to give the result, otherwise &lt;strong&gt;expression2&lt;/strong&gt; will be evaluated. Due to &lt;a href=&quot;https://en.wikipedia.org/wiki/Lazy_evaluation&quot; rel=&quot;nofollow noreferrer&quot;&gt;lazy evaluation&lt;/a&gt; mechanics  only one expression will be executed.&lt;/p&gt;\n&lt;p&gt;Here are some examples (conditions will be evaluated from left to right):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pressure = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;High&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; pressure &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Critical&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Result is &apos;High&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Ternary operators can be chained in series:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pressure = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Normal&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; pressure &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;High&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; pressure &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Critical&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Result is &apos;Normal&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The following one is the same as previous one:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pressure = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; pressure &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; pressure &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Normal&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;High&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Critical&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Result is &apos;Normal&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Yes&lt;/em&gt;, Python have a ternary operator, here is the syntax and an example code to demonstrate the same :)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#[On true] if [expression] else[On false]&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# if the expression evaluates to true then it will pass On true otherwise On false&lt;/span&gt;\n\na = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter the First Number &quot;&lt;/span&gt;)\nb = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter the Second Number &quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A is Bigger&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a&amp;gt;b &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B is Bigger&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Other answers correctly talk about the Python ternary operator. I would like to complement by mentioning a scenario for which the ternary operator is often used, but for which there is a better idiom. This is the scenario of using a default value.&lt;/p&gt;\n&lt;p&gt;Suppose we want to use &lt;code&gt;option_value&lt;/code&gt; with a default value if it is not set:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;run_algorithm(option_value &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; option_value &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or, if &lt;code&gt;option_value&lt;/code&gt; is never set to a falsy value (&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;&quot;&quot;&lt;/code&gt;, etc.), simply&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;run_algorithm(option_value &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; option_value &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, in this case an ever better solution is simply to write&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;run_algorithm(option_value &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The syntax for the ternary operator in Python is:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;[on_true] if [expression] else [on_false]&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Using that syntax, here is how we would rewrite the code above using Pythons ternary operator:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;game_type = &lt;span class=&quot;hljs-string&quot;&gt;&apos;home&apos;&lt;/span&gt;\nshirt = &lt;span class=&quot;hljs-string&quot;&gt;&apos;white&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; game_type == &lt;span class=&quot;hljs-string&quot;&gt;&apos;home&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s still pretty clear, but much shorter. Note that the expression could be any type of expression, including a function call, that returns a value that evaluates to True or False.&lt;/p&gt;\n    ","\n&lt;p&gt;Python has a ternary form for assignments; however there may be even a shorter form that people should be aware of.&lt;/p&gt;\n&lt;p&gt;It&apos;s very common to need to assign to a variable one value or another depending on a condition.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;li1 = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;li2 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; li1:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    a = li1\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    a = li2\n...\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;^ This is the long form for doing such assignments.&lt;/p&gt;\n&lt;p&gt;Below is the ternary form. But this isn&apos;t the most succinct way - see the last example.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = li1 &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; li1 &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; li2\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;With Python, you can simply use &lt;code&gt;or&lt;/code&gt; for alternative assignments.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = li1 &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; li2\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The above works since &lt;code&gt;li1&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; and the interpreter treats that as False in logic expressions. The interpreter then moves on and evaluates the second expression, which is not &lt;code&gt;None&lt;/code&gt; and it&apos;s not an empty list - so it gets assigned to &lt;em&gt;a&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;This also works with empty lists. For instance, if you want to assign &lt;code&gt;a&lt;/code&gt; whichever list has items.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;li1 = []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;li2 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = li1 &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; li2\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Knowing this, you can simply such assignments whenever you encounter them. This also works with strings and other iterables. You could assign &lt;code&gt;a&lt;/code&gt; whichever string isn&apos;t empty.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;s1 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;s2 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello world&apos;&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = s1 &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; s2\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello world&apos;&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I always liked the C ternary syntax, but Python takes it a step further!&lt;/p&gt;\n&lt;p&gt;I understand that some may say this isn&apos;t a good stylistic choice, because it relies on mechanics that aren&apos;t immediately apparent to all developers. I personally disagree with that viewpoint. Python is a syntax-rich language with lots of idiomatic tricks that aren&apos;t immediately apparent to the dabbler. But the more you learn and understand the mechanics of the underlying system, the more you appreciate it.&lt;/p&gt;\n    ","\n&lt;p&gt;Pythonic way of doing the things:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; var &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But there always exists a different way of doing a ternary condition too:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; var &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are multiple ways. The simplest one is to use the condition inside the &quot;print&quot; method.&lt;/p&gt;\n&lt;p&gt;You can use&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Twenty&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; number == &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Not twenty&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Which is equivalent to:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; number == &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Twenty&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not twenty&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In this way, more than two statements are also possible to print. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; number == &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Twenty&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; number &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Lesser&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; &amp;gt; number &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Between&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Greater&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;can be written as:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Twenty&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; number == &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Lesser&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; number &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Between&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; &amp;gt; number &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Greater&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;strong&gt;if else-if&lt;/strong&gt; version can be written as:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;sample_set=&lt;span class=&quot;hljs-string&quot;&gt;&quot;train&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Train&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; full_path &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Test&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; full_path &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;validation&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Yes, it has, but it&apos;s different from C-syntax-like programming languages (which is &lt;code&gt;condition ? value_if_true : value_if_false&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;In Python, it goes like this: &lt;code&gt;value_if_true if condition else value_if_false&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Example: &lt;code&gt;even_or_odd = &quot;even&quot; if x % 2 == 0 else &quot;odd&quot;&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;A neat way to chain multiple operators:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;f = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x,y: &lt;span class=&quot;hljs-string&quot;&gt;&apos;greater&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &amp;gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;less&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; y &amp;gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;equal&apos;&lt;/span&gt;\n\narray = [(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; array:\n  x, y = a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(f(x,y))\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Output is:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#   equal,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#   less,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#   greater,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#   equal&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I find the default Python syntax &lt;code&gt;val = a if cond else b&lt;/code&gt; cumbersome, so sometimes I do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;iif = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; (cond, a, b): a &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; cond &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; b\n&lt;span class=&quot;hljs-comment&quot;&gt;# So I can then use it like:&lt;/span&gt;\nval = iif(cond, a, b)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Of course, it has the downside of always evaluating both sides (&lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;), but the syntax is way clearer to me.&lt;/p&gt;\n    "],"id":302,"title":"Does Python have a ternary conditional operator?","content":"\n                \n&lt;p&gt;Is there a &lt;a href=&quot;https://en.wikipedia.org/wiki/%3F:#Python&quot; rel=&quot;noreferrer&quot;&gt;ternary conditional operator&lt;/a&gt; in Python?&lt;/p&gt;\n    ","slug":"does-python-have-a-ternary-conditional-operator-1657387555448","postType":"QUESTION","createdAt":"2022-07-09T17:25:55.000Z","updatedAt":"2022-07-09T17:25:55.000Z","tags":[{"id":1805,"name":"conditional-operator","slug":"conditional-operator","createdAt":"2022-07-09T17:25:55.000Z","updatedAt":"2022-07-09T17:25:55.000Z","Questions_Tags":{"questionId":302,"tagId":1805}}]}},"__N_SSG":true}