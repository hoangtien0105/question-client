{"pageProps":{"data":{"answer":["\n&lt;p&gt;Because floats and doubles cannot accurately represent the base 10 multiples that we use for money. This issue isn&apos;t just for Java, it&apos;s for any programming language that uses base 2 floating-point types.&lt;/p&gt;\n&lt;p&gt;In base 10, you can write 10.25 as 1025 * 10&lt;sup&gt;-2&lt;/sup&gt; (an integer times a power of 10). &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_floating_point&quot; rel=&quot;noreferrer&quot;&gt;IEEE-754 floating-point numbers&lt;/a&gt; are different, but a very simple way to think about them is to multiply by a power of two instead. For instance, you could be looking at 164 * 2&lt;sup&gt;-4&lt;/sup&gt; (an integer times a power of two), which is also equal to 10.25. That&apos;s not how the numbers are represented in memory, but the math implications are the same.&lt;/p&gt;\n&lt;p&gt;Even in base 10, this notation cannot accurately represent most simple fractions. For instance, you can&apos;t represent 1/3: the decimal representation is repeating (0.3333...), so there is no finite integer that you can multiply by a power of 10 to get 1/3. You could settle on a long sequence of 3&apos;s and a small exponent, like 333333333 * 10&lt;sup&gt;-10&lt;/sup&gt;, but it is not accurate: if you multiply that by 3, you won&apos;t get&amp;nbsp;1.&lt;/p&gt;\n&lt;p&gt;However, for the purpose of counting money, at least for countries whose money is valued within an order of magnitude of the US dollar, usually all you need is to be able to store multiples of 10&lt;sup&gt;-2&lt;/sup&gt;, so it doesn&apos;t really matter that 1/3 can&apos;t be represented.&lt;/p&gt;\n&lt;p&gt;The problem with floats and doubles is that the &lt;em&gt;vast majority&lt;/em&gt; of money-like numbers don&apos;t have an exact representation as an integer times a power of 2. In fact, the only multiples of 0.01 between 0 and 1 (which are significant when dealing with money because they&apos;re integer cents) that can be represented exactly as an IEEE-754 binary floating-point number are 0, 0.25, 0.5, 0.75 and 1. All the others are off by a small amount. As an analogy to the 0.333333 example, if you take the floating-point value for 0.01 and you multiply it by&amp;nbsp;10, you won&apos;t get&amp;nbsp;0.1. Instead you will get something like 0.099999999786...&lt;/p&gt;\n&lt;p&gt;Representing money as a &lt;code&gt;double&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt; will probably look good at first as the software rounds off the tiny errors, but as you perform more additions, subtractions, multiplications and divisions on inexact numbers, errors will compound and you&apos;ll end up with values that are visibly not accurate. This makes floats and doubles inadequate for dealing with money, where perfect accuracy for multiples of base 10 powers is required.&lt;/p&gt;\n&lt;p&gt;A solution that works in just about any language is to use integers instead, and count cents. For instance, 1025 would be $10.25. Several languages also have built-in types to deal with money. Among others, Java  has the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/a&gt; class, and C# has the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/364x0z75.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/a&gt; type.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;From Bloch, J., Effective Java, (2nd ed, Item 48. 3rd ed, Item 60):&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; types are\nparticularly ill-suited for monetary\ncalculations because it is impossible\nto represent 0.1 (or any other\nnegative power of ten) as a &lt;code&gt;float&lt;/code&gt; or\n&lt;code&gt;double&lt;/code&gt; exactly.&lt;/p&gt;\n&lt;p&gt;For example, suppose you have $1.03\nand you spend 42c. How much money do\nyou have left?&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;System.out.println(1.03 - .42);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;prints out &lt;code&gt;0.6100000000000001&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The right way to solve this problem is\nto use &lt;code&gt;BigDecimal&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;long&lt;/code&gt;\nfor monetary calculations.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Though &lt;code&gt;BigDecimal&lt;/code&gt; has some caveats (please see currently accepted answer).&lt;/p&gt;\n    ","\n&lt;p&gt;This is not a matter of accuracy, nor is it a matter of precision.  It is a matter of meeting the expectations of humans who use base 10 for calculations instead of base 2.  For example, using doubles for financial calculations does not produce answers that are &quot;wrong&quot; in a mathematical sense, but it can produce answers that are not what is expected in a financial sense.&lt;/p&gt;\n\n&lt;p&gt;Even if you round off your results at the last minute before output, you can still occasionally get a result using doubles that does not match expectations.&lt;/p&gt;\n\n&lt;p&gt;Using a calculator, or calculating results by hand, 1.40 * 165 = 231 exactly.  However, internally using doubles, on my compiler / operating system environment, it is stored as a binary number close to 230.99999... so if you truncate the number, you get 230 instead of 231.  You may reason that rounding instead of truncating would have given the desired result of 231.  That is true, but rounding always involves truncation.  Whatever rounding technique you use, there are still boundary conditions like this one that will round down when you expect it to round up.  They are rare enough that they often will not be found through casual testing or observation.  You may have to write some code to search for examples that illustrate outcomes that do not behave as expected.&lt;/p&gt;\n\n&lt;p&gt;Assume you want to round something to the nearest penny.  So you take your final result, multiply by 100, add 0.5, truncate, then divide the result by 100 to get back to pennies.  If the internal number you stored was 3.46499999.... instead of 3.465, you are going to get 3.46 instead 3.47 when you round the number to the nearest penny.  But your base 10 calculations may have indicated that the answer should be 3.465 exactly, which clearly should round up to 3.47, not down to 3.46.  These kinds of things happen occasionally in real life when you use doubles for financial calculations.  It is rare, so it often goes unnoticed as an issue, but it happens.&lt;/p&gt;\n\n&lt;p&gt;If you use base 10 for your internal calculations instead of doubles, the answers are always exactly what is expected by humans, assuming no other bugs in your code.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m troubled by some of these responses.  I think doubles and floats have a place in financial calculations.  Certainly, when adding and subtracting non-fractional monetary amounts there will be no loss of precision when using integer classes or BigDecimal classes.  But when performing more complex operations, you often end up with results that go out several or many decimal places, no matter how you store the numbers.  The issue is how you present the result.&lt;/p&gt;\n\n&lt;p&gt;If your result is on the borderline between being rounded up and rounded down, and that last penny really matters, you should be probably be telling the viewer that the answer is nearly in the middle - by displaying more decimal places.&lt;/p&gt;\n\n&lt;p&gt;The problem with doubles, and more so with floats, is when they are used to combine large numbers and small numbers.  In java,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;System.out.println(1000000.0f + 1.2f - 1000000.0f);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;results in&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1.1875\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ll risk being downvoted, but I think the unsuitability of floating point numbers for currency calculations is overrated. As long as you make sure you do the cent-rounding correctly and have enough significant digits to work with in order to counter the binary-decimal representation mismatch explained by zneak, there will be no problem.&lt;/p&gt;\n\n&lt;p&gt;People calculating with currency in Excel have always used double precision floats (there is no currency type in Excel) and I have yet to see anyone complaining about rounding errors.&lt;/p&gt;\n\n&lt;p&gt;Of course, you have to stay within reason; e.g. a simple webshop would probably never experience any problem with double precision floats, but if you do e.g. accounting or anything else that requires adding a large (unrestricted) amount of numbers, you wouldn&apos;t want to touch floating point numbers with a ten foot pole.&lt;/p&gt;\n    ","\n&lt;p&gt;Floats and doubles are approximate. If you create a BigDecimal and pass a float into the constructor you see what the float actually equals:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;groovy:000&amp;gt; new BigDecimal(1.0F)\n===&amp;gt; 1\ngroovy:000&amp;gt; new BigDecimal(1.01F)\n===&amp;gt; 1.0099999904632568359375\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;this probably isn&apos;t how you want to represent $1.01.&lt;/p&gt;\n\n&lt;p&gt;The problem is that the IEEE spec doesn&apos;t have a way to exactly represent all fractions, some of them end up as repeating fractions so you end up with approximation errors. Since accountants like things to come out exactly to the penny, and customers will be annoyed if they pay their bill and after the payment is processed they owe .01 and they get charged a fee or can&apos;t close their account, it&apos;s better to use exact types like decimal (in C#) or java.math.BigDecimal in Java.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s not that the error isn&apos;t controllable if you round: &lt;a href=&quot;http://vanillajava.blogspot.com/2011/08/double-your-money-again.html&quot; rel=&quot;noreferrer&quot;&gt;see this article by Peter Lawrey&lt;/a&gt;. It&apos;s just easier not to have to round in the first place. Most applications that handle money don&apos;t call for a lot of math, the operations consist of adding things or allocating amounts to different buckets. Introducing floating point and rounding just complicates things.&lt;/p&gt;\n    ","\n&lt;p&gt;While it&apos;s true that floating point type can represent only approximatively decimal data, it&apos;s also true that if one rounds numbers to the necessary precision before presenting them, one obtains the correct result. Usually.&lt;/p&gt;\n\n&lt;p&gt;Usually because the double type has a precision less than 16 figures. If you require better precision it&apos;s not a suitable type. Also approximations can accumulate.&lt;/p&gt;\n\n&lt;p&gt;It must be said that even if you use fixed point arithmetic you still have to round numbers, were it not for the fact that BigInteger and BigDecimal give errors if you obtain periodic decimal numbers. So there is an approximation also here.&lt;/p&gt;\n\n&lt;p&gt;For example COBOL, historically used for financial calculations, has a maximum precision of 18 figures. So there is often an implicit rounding.&lt;/p&gt;\n\n&lt;p&gt;Concluding, in my opinion the double is unsuitable mostly for its 16 digit precision, which can be insufficient, not because it is approximate.&lt;/p&gt;\n\n&lt;p&gt;Consider the following output of the subsequent program. It shows that after rounding double give the same result as BigDecimal up to precision 16.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Precision 14\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.000051110111115611\nDouble                        : 56789.012345 / 1111111111 = 0.000051110111115611\n\nPrecision 15\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.0000511101111156110\nDouble                        : 56789.012345 / 1111111111 = 0.0000511101111156110\n\nPrecision 16\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.00005111011111561101\nDouble                        : 56789.012345 / 1111111111 = 0.00005111011111561101\n\nPrecision 17\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.000051110111115611011\nDouble                        : 56789.012345 / 1111111111 = 0.000051110111115611013\n\nPrecision 18\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.0000511101111156110111\nDouble                        : 56789.012345 / 1111111111 = 0.0000511101111156110125\n\nPrecision 19\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.00005111011111561101111\nDouble                        : 56789.012345 / 1111111111 = 0.00005111011111561101252\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;pre&gt;&lt;code&gt;import java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.math.BigDecimal;\nimport java.math.MathContext;\n\npublic class Exercise {\n    public static void main(String[] args) throws IllegalArgumentException,\n            SecurityException, IllegalAccessException,\n            InvocationTargetException, NoSuchMethodException {\n        String amount = &quot;56789.012345&quot;;\n        String quantity = &quot;1111111111&quot;;\n        int [] precisions = new int [] {14, 15, 16, 17, 18, 19};\n        for (int i = 0; i &amp;lt; precisions.length; i++) {\n            int precision = precisions[i];\n            System.out.println(String.format(&quot;Precision %d&quot;, precision));\n            System.out.println(&quot;------------------------------------------------------&quot;);\n            execute(&quot;BigDecimalNoRound&quot;, amount, quantity, precision);\n            execute(&quot;DoubleNoRound&quot;, amount, quantity, precision);\n            execute(&quot;BigDecimal&quot;, amount, quantity, precision);\n            execute(&quot;Double&quot;, amount, quantity, precision);\n            System.out.println();\n        }\n    }\n\n    private static void execute(String test, String amount, String quantity,\n            int precision) throws IllegalArgumentException, SecurityException,\n            IllegalAccessException, InvocationTargetException,\n            NoSuchMethodException {\n        Method impl = Exercise.class.getMethod(&quot;divideUsing&quot; + test, String.class,\n                String.class, int.class);\n        String price;\n        try {\n            price = (String) impl.invoke(null, amount, quantity, precision);\n        } catch (InvocationTargetException e) {\n            price = e.getTargetException().getMessage();\n        }\n        System.out.println(String.format(&quot;%-30s: %s / %s = %s&quot;, test, amount,\n                quantity, price));\n    }\n\n    public static String divideUsingDoubleNoRound(String amount,\n            String quantity, int precision) {\n        // acceptance\n        double amount0 = Double.parseDouble(amount);\n        double quantity0 = Double.parseDouble(quantity);\n\n        //calculation\n        double price0 = amount0 / quantity0;\n\n        // presentation\n        String price = Double.toString(price0);\n        return price;\n    }\n\n    public static String divideUsingDouble(String amount, String quantity,\n            int precision) {\n        // acceptance\n        double amount0 = Double.parseDouble(amount);\n        double quantity0 = Double.parseDouble(quantity);\n\n        //calculation\n        double price0 = amount0 / quantity0;\n\n        // presentation\n        MathContext precision0 = new MathContext(precision);\n        String price = new BigDecimal(price0, precision0)\n                .toString();\n        return price;\n    }\n\n    public static String divideUsingBigDecimal(String amount, String quantity,\n            int precision) {\n        // acceptance\n        BigDecimal amount0 = new BigDecimal(amount);\n        BigDecimal quantity0 = new BigDecimal(quantity);\n        MathContext precision0 = new MathContext(precision);\n\n        //calculation\n        BigDecimal price0 = amount0.divide(quantity0, precision0);\n\n        // presentation\n        String price = price0.toString();\n        return price;\n    }\n\n    public static String divideUsingBigDecimalNoRound(String amount, String quantity,\n            int precision) {\n        // acceptance\n        BigDecimal amount0 = new BigDecimal(amount);\n        BigDecimal quantity0 = new BigDecimal(quantity);\n\n        //calculation\n        BigDecimal price0 = amount0.divide(quantity0);\n\n        // presentation\n        String price = price0.toString();\n        return price;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The result of floating point number is not exact, which makes them unsuitable for any financial calculation which requires exact result and not approximation. float and double are designed for engineering and scientific calculation and many times doesnt produce exact result also result of floating point calculation may vary from JVM to JVM. Look at below example of BigDecimal and double primitive which is used to represent money value, its quite clear that floating point calculation may not be exact and one should use BigDecimal for financial calculations.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    // floating point calculation\n    final double amount1 = 2.0;\n    final double amount2 = 1.1;\n    System.out.println(&quot;difference between 2.0 and 1.1 using double is: &quot; + (amount1 - amount2));\n\n    // Use BigDecimal for financial calculation\n    final BigDecimal amount3 = new BigDecimal(&quot;2.0&quot;);\n    final BigDecimal amount4 = new BigDecimal(&quot;1.1&quot;);\n    System.out.println(&quot;difference between 2.0 and 1.1 using BigDecimal is: &quot; + (amount3.subtract(amount4)));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;difference between 2.0 and 1.1 using double is: 0.8999999999999999\ndifference between 2.0 and 1.1 using BigDecimal is: 0.9\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As said earlier &quot;Representing money as a double or float will probably look good at first as the software rounds off the tiny errors, but as you perform more additions, subtractions, multiplications and divisions on inexact numbers, youll lose more and more precision as the errors add up. This makes floats and doubles inadequate for dealing with money, where perfect accuracy for multiples of base 10 powers is required.&quot;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Finally Java has a standard way to work with Currency And Money!&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;JSR 354: Money and Currency API&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;JSR 354 provides an API for representing, transporting, and performing comprehensive calculations with Money and Currency. You can download it from this link:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=354&quot; rel=&quot;noreferrer&quot;&gt;JSR 354: Money and Currency API Download&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The specification consists of the following things:&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;An API for handling e. g. monetary amounts and currencies&lt;/li&gt;\n&lt;li&gt;APIs to support interchangeable implementations&lt;/li&gt;\n&lt;li&gt;Factories for creating instances of the implementation classes&lt;/li&gt;\n&lt;li&gt;Functionality for calculations, conversion and formatting of monetary            amounts&lt;/li&gt;\n&lt;li&gt;Java API for working with Money and Currencies, which is planned to be included in Java 9.&lt;/li&gt;\n&lt;li&gt;All specification classes and interfaces are located in the javax.money.* package.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Sample Examples of JSR 354: Money and Currency API:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;An example of creating a MonetaryAmount and printing it to the console looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;MonetaryAmountFactory&amp;lt;?&amp;gt; amountFactory = Monetary.getDefaultAmountFactory();\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;monetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; amountFactory.setCurrency(Monetary.getCurrency(&lt;span class=&quot;hljs-string&quot;&gt;&quot;EUR&quot;&lt;/span&gt;)).setNumber(&lt;span class=&quot;hljs-number&quot;&gt;12345.67&lt;/span&gt;).create();\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmountFormat&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MonetaryFormats.getAmountFormat(Locale.getDefault());\nSystem.out.println(format.format(monetaryAmount));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When using the reference implementation API, the necessary code is much simpler:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;monetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Money.of(&lt;span class=&quot;hljs-number&quot;&gt;12345.67&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EUR&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmountFormat&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MonetaryFormats.getAmountFormat(Locale.getDefault());\nSystem.out.println(format.format(monetaryAmount));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The API also supports calculations with MonetaryAmounts:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;monetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Money.of(&lt;span class=&quot;hljs-number&quot;&gt;12345.67&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EUR&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;otherMonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; monetaryAmount.divide(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).add(Money.of(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EUR&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;CurrencyUnit and MonetaryAmount&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// getting CurrencyUnits by locale&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;CurrencyUnit&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;yen&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MonetaryCurrencies.getCurrency(Locale.JAPAN);\n&lt;span class=&quot;hljs-type&quot;&gt;CurrencyUnit&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;canadianDollar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MonetaryCurrencies.getCurrency(Locale.CANADA);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;MonetaryAmount has various methods that allow accessing the assigned currency, the numeric amount, its precision and more:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;monetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Money.of(&lt;span class=&quot;hljs-number&quot;&gt;123.45&lt;/span&gt;, euro);\n&lt;span class=&quot;hljs-type&quot;&gt;CurrencyUnit&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; monetaryAmount.getCurrency();\n&lt;span class=&quot;hljs-type&quot;&gt;NumberValue&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;numberValue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; monetaryAmount.getNumber();\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intValue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; numberValue.intValue(); &lt;span class=&quot;hljs-comment&quot;&gt;// 123&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;doubleValue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; numberValue.doubleValue(); &lt;span class=&quot;hljs-comment&quot;&gt;// 123.45&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fractionDenominator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; numberValue.getAmountFractionDenominator(); &lt;span class=&quot;hljs-comment&quot;&gt;// 100&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fractionNumerator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; numberValue.getAmountFractionNumerator(); &lt;span class=&quot;hljs-comment&quot;&gt;// 45&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;precision&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; numberValue.getPrecision(); &lt;span class=&quot;hljs-comment&quot;&gt;// 5&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// NumberValue extends java.lang.Number.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// So we assign numberValue to a variable of type Number&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; numberValue;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;MonetaryAmounts can be rounded using a rounding operator:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;CurrencyUnit&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;usd&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MonetaryCurrencies.getCurrency(&lt;span class=&quot;hljs-string&quot;&gt;&quot;USD&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;dollars&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Money.of(&lt;span class=&quot;hljs-number&quot;&gt;12.34567&lt;/span&gt;, usd);\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryOperator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;roundingOperator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MonetaryRoundings.getRounding(usd);\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;roundedDollars&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; dollars.with(roundingOperator); &lt;span class=&quot;hljs-comment&quot;&gt;// USD 12.35&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When working with collections of MonetaryAmounts, some nice utility methods for filtering, sorting and grouping are available.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;MonetaryAmount&amp;gt; amounts = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\namounts.add(Money.of(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EUR&quot;&lt;/span&gt;));\namounts.add(Money.of(&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;USD&quot;&lt;/span&gt;));\namounts.add(Money.of(&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;USD&quot;&lt;/span&gt;));\namounts.add(Money.of(&lt;span class=&quot;hljs-number&quot;&gt;13.37&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;JPY&quot;&lt;/span&gt;));\namounts.add(Money.of(&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;USD&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Custom MonetaryAmount operations&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// A monetary operator that returns 10% of the input MonetaryAmount&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Implemented using Java 8 Lambdas&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryOperator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tenPercentOperator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (MonetaryAmount amount) -&amp;gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;baseAmount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; amount.getNumber().numberValue(BigDecimal.class);\n    &lt;span class=&quot;hljs-type&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tenPercent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; baseAmount.multiply(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BigDecimal&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.1&quot;&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Money.of(tenPercent, amount.getCurrency());\n};\n\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;dollars&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Money.of(&lt;span class=&quot;hljs-number&quot;&gt;12.34567&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;USD&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// apply tenPercentOperator to MonetaryAmount&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tenPercentDollars&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; dollars.with(tenPercentOperator); &lt;span class=&quot;hljs-comment&quot;&gt;// USD 1.234567&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Resources:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://blog.oio.de/2015/12/17/handling-money-and-currencies-in-java-with-jsr-354/&quot; rel=&quot;noreferrer&quot;&gt;Handling money and currencies in Java with JSR 354&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://dzone.com/articles/looking-java-9-money-and&quot; rel=&quot;noreferrer&quot;&gt;Looking into the Java 9 Money and Currency API (JSR 354)&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;See Also: &lt;a href=&quot;http://javamoney.github.io/&quot; rel=&quot;noreferrer&quot;&gt;JSR 354 - Currency and Money&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Most answers have highlighted the reasons why one should not use doubles for money and currency calculations. And I totally agree with them. &lt;/p&gt;\n\n&lt;p&gt;It doesn&apos;t mean though that doubles can never be used for that purpose. &lt;/p&gt;\n\n&lt;p&gt;I have worked on a number of projects with very low gc requirements, and having BigDecimal objects was a big contributor to that overhead. &lt;/p&gt;\n\n&lt;p&gt;It&apos;s the lack of understanding about double representation and lack of experience in handling the accuracy and precision that brings about this wise suggestion.&lt;/p&gt;\n\n&lt;p&gt;You can make it work if you are able to handle the precision and accuracy requirements of your project, which has to be done based on what range of double values is one dealing with.&lt;/p&gt;\n\n&lt;p&gt;You can refer to guava&apos;s FuzzyCompare method to get more idea. The parameter tolerance is the key. \nWe dealt with this problem for a securities trading application and we did an exhaustive research on what tolerances to use for different numerical values in different ranges.&lt;/p&gt;\n\n&lt;p&gt;Also, there might be situations when you&apos;re tempted to use Double wrappers as a map key with hash map being the implementation. It is very risky because Double.equals and hash code for example values &quot;0.5&quot; &amp;amp; &quot;0.6 - 0.1&quot; will cause a big mess.&lt;/p&gt;\n    ","\n&lt;p&gt;If your computation involves various steps, arbitrary precision arithmetic won&apos;t cover you 100%.&lt;/p&gt;\n\n&lt;p&gt;The only reliable way to use a perfect representation of results(Use a custom Fraction data type that will batch division operations to the last step) and only convert to decimal notation in the last step.&lt;/p&gt;\n\n&lt;p&gt;Arbitrary precision won&apos;t help because there always can be numbers that has so many decimal places, or some results such as &lt;code&gt;0.6666666&lt;/code&gt;... No arbitrary representation will cover the last example. So you will have small errors in each step.&lt;/p&gt;\n\n&lt;p&gt;These errors will add-up, may eventually become not easy to ignore anymore. This is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Propagation_of_uncertainty&quot; rel=&quot;nofollow noreferrer&quot;&gt;Error Propagation&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Many of the answers posted to this question discuss IEEE and the standards surrounding floating-point arithmetic.&lt;/p&gt;\n\n&lt;p&gt;Coming from a non-computer science background (physics and engineering), I tend to look at problems from a different perspective. For me, the reason why I wouldn&apos;t use a double or float in a mathematical calculation is that I would lose too much information.&lt;/p&gt;\n\n&lt;p&gt;What are the alternatives? There are many (and many more of which I am not aware!).&lt;/p&gt;\n\n&lt;p&gt;BigDecimal in Java is native to the Java language.\nApfloat is another arbitrary-precision library for Java.&lt;/p&gt;\n\n&lt;p&gt;The decimal data type in C# is Microsoft&apos;s .NET alternative for 28 significant figures.&lt;/p&gt;\n\n&lt;p&gt;SciPy (Scientific Python) can probably also handle financial calculations (I haven&apos;t tried, but I suspect so).&lt;/p&gt;\n\n&lt;p&gt;The GNU Multiple Precision Library (GMP) and the GNU MFPR Library are two free and open-source resources for C and C++.&lt;/p&gt;\n\n&lt;p&gt;There are also numerical precision libraries for JavaScript(!) and I think PHP which can handle financial calculations.&lt;/p&gt;\n\n&lt;p&gt;There are also proprietary (particularly, I think, for Fortran) and open-source solutions as well for many computer languages.&lt;/p&gt;\n\n&lt;p&gt;I&apos;m not a computer scientist by training. However, I tend to lean towards either BigDecimal in Java or decimal in C#. I haven&apos;t tried the other solutions I&apos;ve listed, but they are probably very good as well.&lt;/p&gt;\n\n&lt;p&gt;For me, I like BigDecimal because of the methods it supports. C#&apos;s decimal is very nice, but I haven&apos;t had the chance to work with it as much as I&apos;d like. I do scientific calculations of interest to me in my spare time, and BigDecimal seems to work very well because I can set the precision of my floating point numbers. The disadvantage to BigDecimal? It can be slow at times, especially if you&apos;re using the divide method.&lt;/p&gt;\n\n&lt;p&gt;You might, for speed, look into the free and proprietary libraries in C, C++, and Fortran.&lt;/p&gt;\n    ","\n&lt;p&gt;To add on previous answers, there is also the option of implementing &lt;strong&gt;Joda-Money&lt;/strong&gt; in Java, besides BigDecimal, when dealing with the problem addressed in the question. Java module name is org.joda.money.&lt;/p&gt;\n&lt;p&gt;It requires Java SE 8 or later and has no dependencies.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;To be more precise, there is a compile-time dependency but it is not\nrequired.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;\n  &amp;lt;groupId&amp;gt;org.joda&amp;lt;/groupId&amp;gt;\n  &amp;lt;artifactId&amp;gt;joda-money&amp;lt;/artifactId&amp;gt;\n  &amp;lt;version&amp;gt;1.0.1&amp;lt;/version&amp;gt;\n&amp;lt;/dependency&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Examples of using Joda Money:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;  // create a monetary value\n  Money money = Money.parse(&quot;USD 23.87&quot;);\n  \n  // add another amount with safe double conversion\n  CurrencyUnit usd = CurrencyUnit.of(&quot;USD&quot;);\n  money = money.plus(Money.of(usd, 12.43d));\n  \n  // subtracts an amount in dollars\n  money = money.minusMajor(2);\n  \n  // multiplies by 3.5 with rounding\n  money = money.multipliedBy(3.5d, RoundingMode.DOWN);\n  \n  // compare two amounts\n  boolean bigAmount = money.isGreaterThan(dailyWage);\n  \n  // convert to GBP using a supplied rate\n  BigDecimal conversionRate = ...;  // obtained from code outside Joda-Money\n  Money moneyGBP = money.convertedTo(CurrencyUnit.GBP, conversionRate, RoundingMode.HALF_UP);\n  \n  // use a BigMoney for more complex calculations where scale matters\n  BigMoney moneyCalc = money.toBigMoney();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Documentation:\n&lt;a href=&quot;http://joda-money.sourceforge.net/apidocs/org/joda/money/Money.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://joda-money.sourceforge.net/apidocs/org/joda/money/Money.html&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Implementation examples:\n&lt;a href=&quot;https://www.programcreek.com/java-api-examples/?api=org.joda.money.Money&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.programcreek.com/java-api-examples/?api=org.joda.money.Money&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Float is binary form of Decimal with different design; they are two different things. There are little errors between two types when converted to each other. Also, float is designed to represent infinite large number of values for scientific. That means it is designed to lost precision to extreme small and extreme large number with that fixed number of bytes. Decimal can&apos;t represent infinite number of values, it bounds to just that number of decimal digits. So Float and Decimal are for different purpose.&lt;/p&gt;\n\n&lt;p&gt;There are some ways to manage the error for currency value:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Use long integer and count in cents instead.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use double precision, keep your significant digits to 15 only so decimal can be exactly simulated. Round before presenting values; Round often when doing calculations.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use a decimal library like Java BigDecimal so you don&apos;t need to use double to simulate decimal.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;p.s. it is interesting to know that most brands of handheld scientific calculators works on decimal instead of float. So no one complaint float conversion errors.&lt;/p&gt;\n    ","\n&lt;p&gt;Take a look at this simple example: it looks like logically correct, but in real world this can return unexpected results if not threated correctly:&lt;/p&gt;\n&lt;p&gt;0.1 x 10 = 1   , so:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;double total = 0.0;\n\n// adds 10 cents, 10 times\nfor (int i = 0; i &amp;lt; 10; i++) {\n    total += 0.1;  // adds 10 cents\n}\n\nLog.d(&quot;result: &quot;, &quot;current total: &quot; + total);\n\n// looks like total equals to 1.0, don&apos;t?\n\n// now, do reverse\nfor (int i = 0; i &amp;lt; 10; i++) {\n    total -= 0.1;  // removes 10 cents\n}\n\n// total should be equals to 0.0, right?\nLog.d(&quot;result: &quot;, &quot;current total: &quot; + total);\nif (total == 0.0) {\n    Log.d(&quot;result: &quot;, &quot;is total equal to ZERO? YES, of course!!&quot;);\n} else {\n    Log.d(&quot;result: &quot;, &quot;is total equal to ZERO? No...&quot;);\n    // so be careful comparing equality in this cases!!!\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;OUTPUT:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt; result: current total: 0.9999999999999999\n result: current total: 2.7755575615628914E-17   \n result: is total equal to ZERO? No... \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;American currency can easily be represented with dollar and cent amounts.  Integers are 100% precise, while floating point binary numbers do not exactly match floating point decimals.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;See this SO question: &lt;a href=&quot;http://stackoverflow.com/questions/960072/rounding-errors&quot;&gt;Rounding Errors?&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/409259/jeff-ogata&quot; title=&quot;54,979 reputation&quot; class=&quot;comment-user&quot;&gt;Jeff Ogata&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment19932882_3730019&quot;&gt;&lt;span title=&quot;2010-09-16 19:31:16Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 16, 2010 at 19:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Just to be clear, they shouldn&apos;t be used for anything that requires accuracy -- not just currency.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/54742/jeff&quot; title=&quot;21,606 reputation&quot; class=&quot;comment-user&quot;&gt;Jeff&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3939623_3730019&quot;&gt;&lt;span title=&quot;2010-09-16 19:59:37Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 16, 2010 at 19:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;They shouldn&apos;t be used for anything that requires &lt;i&gt;exactness&lt;/i&gt;.  But double&apos;s 53 significant bits (~16 decimal digits) are usually good enough for things that merely require &lt;i&gt;accuracy&lt;/i&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/287586/dan04&quot; title=&quot;83,099 reputation&quot; class=&quot;comment-user&quot;&gt;dan04&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3950148_3730019&quot;&gt;&lt;span title=&quot;2010-09-17 19:23:37Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 17, 2010 at 19:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@jeff Your comment completely misrepresents what binary floating-point is good for and what it isn&apos;t good for. Read the answer by zneak below, and please delete your misleading comment.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/139746/pascal-cuoq&quot; title=&quot;77,647 reputation&quot; class=&quot;comment-user&quot;&gt;Pascal Cuoq&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment39075281_3730019&quot;&gt;&lt;span title=&quot;2014-08-03 21:08:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 3, 2014 at 21:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;And to be clear, by &quot;exactness&quot; (or &quot;precision&quot;) you mean in decimal.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/31506/jack-leow&quot; title=&quot;21,480 reputation&quot; class=&quot;comment-user&quot;&gt;Jack Leow&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121705653_3730019&quot;&gt;&lt;span title=&quot;2021-08-20 16:38:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 20, 2021 at 16:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Fran You will get rounding errors and in some cases where large quantities of currency are being used, interest rate computations can be grossly off&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/116941/linuxuser27&quot; title=&quot;6,993 reputation&quot; class=&quot;comment-user&quot;&gt;linuxuser27&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3939270_3730040&quot;&gt;&lt;span title=&quot;2010-09-16 19:29:56Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 16, 2010 at 19:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;...most base 10 fractions, that is. For example, 0.1 has no exact binary floating-point representation. So, &lt;code&gt;1.0 / 10 * 10&lt;/code&gt; may not be the same as 1.0.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/13/chris-jester-young&quot; title=&quot;213,722 reputation&quot; class=&quot;comment-user&quot;&gt;Chris Jester-Young&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3939273_3730040&quot;&gt;&lt;span title=&quot;2010-09-16 19:30:08Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 16, 2010 at 19:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@linuxuser27 I think Fran was trying to be funny. Anyway, zneak&apos;s answer is the best I&apos;ve seen, better even than the classic version by Bloch.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1406641/isaac-rabinovitch&quot; title=&quot;527 reputation&quot; class=&quot;comment-user&quot;&gt;Isaac Rabinovitch&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17289923_3730040&quot;&gt;&lt;span title=&quot;2012-10-08 20:28:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 8, 2012 at 20:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Of course if you know the precision, you can always round the result and thus avoid the whole issue.  This is much faster and simpler than using BigDecimal.  Another alternative is to use fixed precision int or long.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/57695/peter-lawrey&quot; title=&quot;514,529 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Lawrey&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment21159342_3730040&quot;&gt;&lt;span title=&quot;2013-02-24 12:12:57Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 24, 2013 at 12:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JoL You are right, the statement that float(0.1) * 10  1 is wrong. In a double-precision float, 0.1 is represented as &lt;code&gt;0b0.00011001100110011001100110011001100110011001100110011010&lt;/code&gt; and 10 as &lt;code&gt;0b1010&lt;/code&gt;. If you multiply these two binary numbers, you get &lt;code&gt;1.0000000000000000000000000000000000000000000000000000010&lt;/code&gt;, and after that has been rounded to the available 53 binary digits, you have exactly 1. The problem with floats is not that they &lt;i&gt;always&lt;/i&gt; go wrong, but that they &lt;i&gt;sometimes&lt;/i&gt; do - as with the example of 0.1 + 0.2  0.3.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7840347/jim-danner&quot; title=&quot;505 reputation&quot; class=&quot;comment-user&quot;&gt;Jim Danner&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94441347_3730040&quot;&gt;&lt;span title=&quot;2018-12-15 17:59:04Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 15, 2018 at 17:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;m a little confused by the recommendation to use int or long for monetary calculations. How do you represent 1.03 as an int or long? I&apos;ve tried &quot;long a = 1.04;&quot; and &quot;long a = 104/100;&quot; to no avail.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/777443/peter&quot; title=&quot;1,144 reputation&quot; class=&quot;comment-user&quot;&gt;Peter&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34095728_3730249&quot;&gt;&lt;span title=&quot;2014-03-15 10:32:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 15, 2014 at 10:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Peter, you use &lt;code&gt;long a = 104&lt;/code&gt; and count in cents instead of dollars.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/251153/zneak&quot; title=&quot;130,500 reputation&quot; class=&quot;comment-user&quot;&gt;zneak&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34137683_3730249&quot;&gt;&lt;span title=&quot;2014-03-17 01:49:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 17, 2014 at 1:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@zneak What about when a percentage needs to be applied like compounding interest or similar?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/454780/trusktr&quot; title=&quot;40,211 reputation&quot; class=&quot;comment-user&quot;&gt;trusktr&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59312896_3730249&quot;&gt;&lt;span title=&quot;2016-03-06 03:41:24Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 6, 2016 at 3:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@trusktr, I&apos;d go with your platform&apos;s decimal type. In Java, that&apos;s &lt;code&gt;BigDecimal&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/251153/zneak&quot; title=&quot;130,500 reputation&quot; class=&quot;comment-user&quot;&gt;zneak&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59330084_3730249&quot;&gt;&lt;span title=&quot;2016-03-06 19:42:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 6, 2016 at 19:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@maaartinus ...and you don&apos;t think using double for such things is error-prone? I&apos;ve seen the float rounding issue hit real systems &lt;i&gt;hard&lt;/i&gt;. Even in banking. Please don&apos;t recommend it, or if you do, provide that as a separate answer (so we can downvote it :P )&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/365237/eis&quot; title=&quot;49,467 reputation&quot; class=&quot;comment-user&quot;&gt;eis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment71699909_3730249&quot;&gt;&lt;span title=&quot;2017-02-16 10:57:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 16, 2017 at 10:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Related, interesting: In my chrome js console:     Math.round(.4999999999999999): 0     Math.round(.49999999999999999): 1&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/854342/curtis-yallop&quot; title=&quot;6,050 reputation&quot; class=&quot;comment-user&quot;&gt;Curtis Yallop&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49488259_12391312&quot;&gt;&lt;span title=&quot;2015-06-08 17:26:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 8, 2015 at 17:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer is misleading. 1.40 * 165 = 231. Any number other than exactly 231 &lt;i&gt;is&lt;/i&gt; wrong in a mathematical sense (and all other senses).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/885306/karu&quot; title=&quot;4,379 reputation&quot; class=&quot;comment-user&quot;&gt;Karu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49860805_12391312&quot;&gt;&lt;span title=&quot;2015-06-18 09:37:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 18, 2015 at 9:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Karu I think that&apos;s why Randy says floats are bad... My Chrome JS console shows 230.99999999999997 as the result. That &lt;i&gt;is&lt;/i&gt; wrong, which is the point made in the answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/454780/trusktr&quot; title=&quot;40,211 reputation&quot; class=&quot;comment-user&quot;&gt;trusktr&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59312966_12391312&quot;&gt;&lt;span title=&quot;2016-03-06 03:48:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 6, 2016 at 3:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Karu: Imho the answer is not mathematically wrong. It&apos;s just that there are 2 questions one being answered which is not the question being asked. The question your compiler answers is 1.39999999 * 164.99999999 and so on which mathematically correct equals 230.99999....  Obviously tha&apos;s not the question that was asked in the first place....&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2895202/markus&quot; title=&quot;1,621 reputation&quot; class=&quot;comment-user&quot;&gt;markus&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59666246_12391312&quot;&gt;&lt;span title=&quot;2016-03-15 09:36:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 15, 2016 at 9:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@CurtisYallop because the closes double value to 0.49999999999999999 is 0.5 &lt;a href=&quot;https://stackoverflow.com/q/9902968/995714&quot;&gt;Why does &lt;code&gt;Math.round(0.49999999999999994)&lt;/code&gt; return 1?&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/995714/phuclv&quot; title=&quot;32,962 reputation&quot; class=&quot;comment-user&quot;&gt;phuclv&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84808583_12391312&quot;&gt;&lt;span title=&quot;2018-02-21 08:56:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 21, 2018 at 8:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;THIS!!!! I was searching all answers to find this RELEVANT FACT!!! In normal calculations nobody cares if you are of by some fraction of a cent, but here with high numbers easily some dollars get lost per transaction!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3070062/falco&quot; title=&quot;3,137 reputation&quot; class=&quot;comment-user&quot;&gt;Falco&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41188518_15790782&quot;&gt;&lt;span title=&quot;2014-10-08 12:05:33Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 8, 2014 at 12:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;And now imagine someone getting daily revenue of 0.01% on his 1 Million dollars - he would get nothing each day - and after a year he has not gotten 1000 Dollars, THIS WILL MATTER&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3070062/falco&quot; title=&quot;3,137 reputation&quot; class=&quot;comment-user&quot;&gt;Falco&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41188570_15790782&quot;&gt;&lt;span title=&quot;2014-10-08 12:06:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 8, 2014 at 12:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The problem is not the accuracy but that float doesn&apos;t tell you that it becomes inaccurate.  An integer can only hold up to 10 digits a float can hold up to 6 without becoming inaccurate (when you cut it accordingly). It does allow this while an integer gets an overflow and a language like java will warn you or won&apos;t allow it.  When you use a double, you can go up to 16 digits which is enough for many use cases.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2717498/sigi&quot; title=&quot;99 reputation&quot; class=&quot;comment-user&quot;&gt;sigi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment68184371_15790782&quot;&gt;&lt;span title=&quot;2016-11-07 16:33:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 7, 2016 at 16:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Klaws Thank you for the specifics. I feel like I&apos;m starting to understand. But I&apos;m unfamiliar with European tax law, and thus confused.  Is it correct that prices are often shown as &quot;end user prices&quot; (including tax) and that the seller ought to take the end user price of 0.02, which includes 0.017 for the seller and 0.003 of tax, multiply that by 1000 to get 17.00 for the seller and 3.00 of tax? This feels odd (from an American context, where taxes are always calculated at the end and never included in the advert price), where it feels the taxes on 17.00 @19% ought to be 3.23. Thanks!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1048186/josiah-yoder&quot; title=&quot;2,916 reputation&quot; class=&quot;comment-user&quot;&gt;Josiah Yoder&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124010221_15790782&quot;&gt;&lt;span title=&quot;2021-11-29 10:03:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 29, 2021 at 10:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Josiah Yoder VAT laws in the EU are...complicated. Since the introduction of the Euro, three decimal places are mandatory, meaning that applications typically use 4 decimal places to ensure correct rounding. Prices &lt;i&gt;shown&lt;/i&gt; are usually end user prices, but are typically stored as net prices (excl. VAT). VAT is calculated at the end &lt;i&gt;per delivery&lt;/i&gt; in Germany, not for individual items. I think the Netherlands however allow to calculate the tax for each item and add sum this up at the end. For VAT advance payments in Germany, different rules apply (even rounding down to zero places at one point).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6012508/klaws&quot; title=&quot;153 reputation&quot; class=&quot;comment-user&quot;&gt;Klaws&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124068052_15790782&quot;&gt;&lt;span title=&quot;2021-12-01 13:32:19Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 1, 2021 at 13:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is actually a pretty decent answer. In most cases it&apos;s perfectly fine to use them.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5173926/vahid-amiri&quot; title=&quot;10,121 reputation&quot; class=&quot;comment-user&quot;&gt;Vahid Amiri&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94290401_41763140&quot;&gt;&lt;span title=&quot;2018-12-11 06:16:53Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 11, 2018 at 6:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It should be noted that most investment banks use double as do most C++ programs. Some use long but thus has it&apos;s own problem of tracking scale.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/57695/peter-lawrey&quot; title=&quot;514,529 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Lawrey&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94700413_41763140&quot;&gt;&lt;span title=&quot;2018-12-26 09:11:47Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 26, 2018 at 9:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I find this answer intriguing.  I assume you and @PeterLawrey speak from experience. Is it possible to find citations / web links to back your claims?  I know for a fact that companies use financial information in Excel all the time from my own experience.  But what about investment banks using double?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1048186/josiah-yoder&quot; title=&quot;2,916 reputation&quot; class=&quot;comment-user&quot;&gt;Josiah Yoder&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117390513_41763140&quot;&gt;&lt;span title=&quot;2021-02-27 17:22:22Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 27, 2021 at 17:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JosiahYoder Trading systems were traditionally written in C++ where using double or fixed precision is common. i.e. no BigDecimal. The problem I have with fixed precision is the cost of any potential error. For double is probably less than 1 cents even on a billion-dollar trade, but for fixed precision, you could be out by a factor of 10x or more.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/57695/peter-lawrey&quot; title=&quot;514,529 reputation&quot; class=&quot;comment-user&quot;&gt;Peter Lawrey&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117424791_41763140&quot;&gt;&lt;span title=&quot;2021-03-01 11:32:19Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 1, 2021 at 11:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I was first exposed to this problem many years ago when an accountant told they can not accept a difference of a cent in the books.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/721855/aled&quot; title=&quot;15,043 reputation&quot; class=&quot;comment-user&quot;&gt;aled&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121875375_41763140&quot;&gt;&lt;span title=&quot;2021-08-28 03:13:11Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 28, 2021 at 3:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;BigDecimal&lt;/code&gt; are represent &lt;i&gt;exact&lt;/i&gt; values.  Code to object conversion are inexact as well as other operations.  The types themselves are not inexact.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment85682780_3730060&quot;&gt;&lt;span title=&quot;2018-03-17 20:02:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 17, 2018 at 20:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@chux: rereading this, I think you have a point that my wording could be improved. I&apos;ll edit this and reword.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/217324/nathan-hughes&quot; title=&quot;91,083 reputation&quot; class=&quot;comment-user&quot;&gt;Nathan Hughes&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment85685248_3730060&quot;&gt;&lt;span title=&quot;2018-03-17 22:32:51Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 17, 2018 at 22:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;COBOL has a native decimal type that is fixed-point.  This can accurately reference all decimal types up to 18 digits.  That&apos;s not the same thing as a floating-point number, regardless of the number of digits, because it is a native decimal type.  0.1 will always be 0.1, not sometimes 0.99999999999999&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3097467/lukevp&quot; title=&quot;695 reputation&quot; class=&quot;comment-user&quot;&gt;lukevp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113140684_13092862&quot;&gt;&lt;span title=&quot;2020-09-20 18:46:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 20, 2020 at 18:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Let us try something other than trivial addition/subtraction and integer mutplicaiton, If code calculated the monthly rate of a 7% loan, both types would need fail to provide an exact value and need rounding to the nearest 0.01.  Rounding to the lowest monetary unit  is a part of money calculations,  Using decimal types avoid that need with addition/subtraction - but not much else.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment53587892_25251702&quot;&gt;&lt;span title=&quot;2015-10-01 02:27:51Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 1, 2015 at 2:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@chux-ReinstateMonica: If interest is supposed to compound monthly, compute the interest each month by adding together the daily balance, multiply that by 7 (the interest rate), and divide, rounding to the nearest penny, by the number of days in the year.  No rounding anywhere except once per month at the very last step.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/363751/supercat&quot; title=&quot;73,697 reputation&quot; class=&quot;comment-user&quot;&gt;supercat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109446049_25251702&quot;&gt;&lt;span title=&quot;2020-05-18 20:35:15Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 18, 2020 at 20:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@supercat My &lt;a href=&quot;https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency/25251702?noredirect=1#comment53587892_25251702&quot;&gt;comment&lt;/a&gt; emphasizes using a binary FP of the smallest monetary unit or a decimal FP both incur similar rounding issues - like in your comment with &quot;and divide, rounding to the nearest penny&quot;.  Using a base 2 or base 10 FP does not provide an advantage either way in your scenario.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2410359/chux-reinstate-monica&quot; title=&quot;128,313 reputation&quot; class=&quot;comment-user&quot;&gt;chux - Reinstate Monica&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109446524_25251702&quot;&gt;&lt;span title=&quot;2020-05-18 20:53:08Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 18, 2020 at 20:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@chux-ReinstateMonica: In the above scenario, if the math works out that the interest should be precisely equal to some number of half-cents, a correct financial program must round in precisely specified fashion.  If floating-point calculations yield an interest value of e.g. $1.23499941, but the mathematically-precise value before rounding should have been $1.235 and rounding is specified as &quot;nearest even&quot;,, use of such floating-point calculations won&apos;t cause the result to be off by $0.000059, but rather by a whole $0.01, which for accounting purposes is Just Plain Wrong.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/363751/supercat&quot; title=&quot;73,697 reputation&quot; class=&quot;comment-user&quot;&gt;supercat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109478193_25251702&quot;&gt;&lt;span title=&quot;2020-05-19 17:21:32Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 19, 2020 at 17:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What is required to do financial/accounting calculations properly is to use only mathematically-exact operations except at places where rounding is precisely specified.  When properly dividing numbers, either rounding must be specified, one must compute both quotient and remainder, or the product of the quotient and divisor must precisely equal the dividend.  Dividing by 7 without specifying rounding or remainder would generally be wrong.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/363751/supercat&quot; title=&quot;73,697 reputation&quot; class=&quot;comment-user&quot;&gt;supercat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109480687_25251702&quot;&gt;&lt;span title=&quot;2020-05-19 18:43:57Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 19, 2020 at 18:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;kudos for mentioning the &lt;code&gt;MonetaryAmount&lt;/code&gt; in Java 9&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1829921/omerhakanbilici&quot; title=&quot;804 reputation&quot; class=&quot;comment-user&quot;&gt;omerhakanbilici&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121790921_38811814&quot;&gt;&lt;span title=&quot;2021-08-24 20:13:08Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 24, 2021 at 20:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Regarding SciPy/Numpy, fixed-precision (ie Python&apos;s decimal.Decimal) is not supported (&lt;a href=&quot;http://docs.scipy.org/doc/numpy-dev/user/basics.types.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs.scipy.org/doc/numpy-dev/user/basics.types.html&lt;/a&gt;). Some function won&apos;t properly work with Decimal (isnan for instance). Pandas is based on Numpy and was initiated at AQR, one major quantitative hedge-fund. So you have your answer regarding financial calculations (not grocery accounting).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3122657/comte&quot; title=&quot;2,895 reputation&quot; class=&quot;comment-user&quot;&gt;comte&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65168710_31486986&quot;&gt;&lt;span title=&quot;2016-08-11 19:56:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 11, 2016 at 19:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The problem is not that round-off error happens, but that you doesn&apos;t deal with it. Round the result to two decimal places (if you want cents) and you&apos;re done.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/581205/maaartinus&quot; title=&quot;43,029 reputation&quot; class=&quot;comment-user&quot;&gt;maaartinus&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment72847737_33902551&quot;&gt;&lt;span title=&quot;2017-03-18 06:24:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 18, 2017 at 6:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Wrong. Integers are not 100% precise.  Precision requires decimal or fraction.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10012519/alexherm&quot; title=&quot;1,327 reputation&quot; class=&quot;comment-user&quot;&gt;alexherm&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment112307236_63508775&quot;&gt;&lt;span title=&quot;2020-08-20 18:50:01Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 20, 2020 at 18:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;They are precise for integral values like currency.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10039698/rollersimmer&quot; title=&quot;119 reputation&quot; class=&quot;comment-user&quot;&gt;RollerSimmer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113165965_63508775&quot;&gt;&lt;span title=&quot;2020-09-21 16:50:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2020 at 16:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":254,"title":"Why not use Double or Float to represent currency?","content":"\n                \n&lt;p&gt;I&apos;ve always been told &lt;em&gt;never&lt;/em&gt; to represent money with &lt;code&gt;double&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt; types, and this time I pose the question to you: why? &lt;/p&gt;\n\n&lt;p&gt;I&apos;m sure there is a very good reason, I simply do not know what it is.&lt;/p&gt;\n    ","slug":"why-not-use-double-or-float-to-represent-currency-1657387417964","postType":"QUESTION","createdAt":"2022-07-09T17:23:37.000Z","updatedAt":"2022-07-09T17:23:37.000Z","tags":[{"id":1641,"name":"currency","slug":"currency","createdAt":"2022-07-09T17:23:38.000Z","updatedAt":"2022-07-09T17:23:38.000Z","Questions_Tags":{"questionId":254,"tagId":1641}}]}},"__N_SSG":true}