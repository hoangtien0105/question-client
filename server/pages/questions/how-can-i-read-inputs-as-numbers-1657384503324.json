{"pageProps":{"data":{"answer":["\n&lt;h3&gt;Solution&lt;/h3&gt;\n&lt;p&gt;Since Python 3, &lt;code&gt;input&lt;/code&gt; returns a string which you have to explicitly convert to &lt;code&gt;int&lt;/code&gt;s, with &lt;a href=&quot;https://docs.python.org/3/library/functions.html#int&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, like this&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;))\ny = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can accept numbers of any base and convert them directly to base-10 with the &lt;code&gt;int&lt;/code&gt; function, like this&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;)\nEnter a number: &lt;span class=&quot;hljs-number&quot;&gt;777&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data\n&lt;span class=&quot;hljs-number&quot;&gt;511&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)\nEnter a number: FFFF\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data\n&lt;span class=&quot;hljs-number&quot;&gt;65535&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\nEnter a number: &lt;span class=&quot;hljs-number&quot;&gt;10101010101&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data\n&lt;span class=&quot;hljs-number&quot;&gt;1365&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The second parameter tells what is the base of the numbers entered and then internally it understands and converts it. If the entered data is wrong it will throw a &lt;code&gt;ValueError&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; data = int(input(&quot;Enter a number: &quot;), 2)\nEnter a number: 1234\nTraceback (most recent call last):\n  File &quot;&amp;lt;input&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;\nValueError: invalid literal for int() with base 2: &apos;1234&apos;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For values that can have a fractional component, the type would be &lt;code&gt;float&lt;/code&gt; rather than &lt;code&gt;int&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number:&quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Differences between Python 2 and 3&lt;/h3&gt;\n&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Python 2&apos;s &lt;code&gt;input&lt;/code&gt; function evaluated the received data, converting it to an integer implicitly (read the next section to understand the implication), but Python 3&apos;s &lt;code&gt;input&lt;/code&gt; function does not do that anymore.&lt;/li&gt;\n&lt;li&gt;Python 2&apos;s equivalent of Python 3&apos;s &lt;code&gt;input&lt;/code&gt; is the &lt;code&gt;raw_input&lt;/code&gt; function.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Python 2.x&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;There were two functions to get user input, called &lt;a href=&quot;https://docs.python.org/2/library/functions.html#input&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/2/library/functions.html#raw_input&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;raw_input&lt;/code&gt;&lt;/a&gt;. The difference between them is, &lt;code&gt;raw_input&lt;/code&gt; doesn&apos;t evaluate the data and returns as it is, in string form. But, &lt;code&gt;input&lt;/code&gt; will evaluate whatever you entered and the result of evaluation will be returned. For example,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sys.version\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;2.7.6 (default, Mar 22 2014, 22:59:56) \\n[GCC 4.8.2]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;)\nEnter a number: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data)\n(&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;int&apos;&lt;/span&gt;&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The data &lt;code&gt;5 + 17&lt;/code&gt; is evaluated and the result is &lt;code&gt;22&lt;/code&gt;. When it evaluates the expression &lt;code&gt;5 + 17&lt;/code&gt;, it detects that you are adding two numbers and so the result will also be of the same &lt;code&gt;int&lt;/code&gt; type. So, the type conversion is done for free and &lt;code&gt;22&lt;/code&gt; is returned as the result of &lt;code&gt;input&lt;/code&gt; and stored in &lt;code&gt;data&lt;/code&gt; variable. You can think of &lt;code&gt;input&lt;/code&gt; as the &lt;code&gt;raw_input&lt;/code&gt; composed with an &lt;a href=&quot;https://docs.python.org/2/library/functions.html#eval&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; call.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(raw_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;))\nEnter a number: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data)\n(&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;int&apos;&lt;/span&gt;&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you should be careful when you are using &lt;code&gt;input&lt;/code&gt; in Python 2.x. I explained why one should be careful when using it, in &lt;a href=&quot;https://stackoverflow.com/a/21122817/1903116&quot;&gt;this answer&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;But, &lt;code&gt;raw_input&lt;/code&gt; doesn&apos;t evaluate the input and returns as it is, as a string.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sys.version\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;2.7.6 (default, Mar 22 2014, 22:59:56) \\n[GCC 4.8.2]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = raw_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;)\nEnter a number: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;5 + 17&apos;&lt;/span&gt;, &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Python 3.x&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Python 3.x&apos;s &lt;a href=&quot;https://docs.python.org/3/library/functions.html#input&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; and Python 2.x&apos;s &lt;code&gt;raw_input&lt;/code&gt; are similar and &lt;code&gt;raw_input&lt;/code&gt; is not available in Python 3.x.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sys.version\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;3.4.0 (default, Apr 11 2014, 13:05:11) \\n[GCC 4.8.2]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;)\nEnter a number: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;5 + 17&apos;&lt;/span&gt;, &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Python 3.x, &lt;code&gt;raw_input&lt;/code&gt; was renamed to &lt;code&gt;input&lt;/code&gt; and the Python 2.x &lt;code&gt;input&lt;/code&gt; was removed.  &lt;/p&gt;\n\n&lt;p&gt;This means that, just like &lt;code&gt;raw_input&lt;/code&gt;, &lt;a href=&quot;http://docs.python.org/3/library/functions.html#input&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; in Python 3.x always returns a string object.&lt;/p&gt;\n\n&lt;p&gt;To fix the problem, you need to explicitly make those inputs into integers by putting them in &lt;a href=&quot;http://docs.python.org/3/library/functions.html#int&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;))\ny = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For multiple integer in a single line, &lt;a href=&quot;https://docs.python.org/library/functions.html#map&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; might be better.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;arr = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, raw_input().split())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If the number is already known, (like 2 integers), you can use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;num1, num2 = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, raw_input().split())\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;input()&lt;/code&gt; (Python 3) and &lt;code&gt;raw_input()&lt;/code&gt; (Python 2) &lt;em&gt;always&lt;/em&gt; return strings. Convert the result to integer explicitly with &lt;code&gt;int()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;))\ny = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Multiple questions require multiple integers to be entered on a single line. The best way is to enter the entire string of numbers line by line and split them into integers. Here is the Python 3 version:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = []\np = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;()\np = p.split()      \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; p:\n    a.append(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(i))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can also use list comprehensions:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;p = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;().split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;whatever the seperator is&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To convert all input from string to int we do the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(i) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; p]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;List elements should be printed in straight lines.&lt;/p&gt;\n    ","\n&lt;p&gt;Convert to integers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_number = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;enter the number&quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Similarly for floating point numbers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_decimalnumber = &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;enter the number&quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;n=&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;())\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(n):\n    n=&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;()\n    n=&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(n)\n    arr1=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;().split()))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the for loop shall run &apos;n&apos; number of times . the second &apos;n&apos; is the length of the array.\nthe last statement maps the integers to a list and takes input in space separated form .\nyou can also return the array at the end of for loop.&lt;/p&gt;\n    ","\n&lt;p&gt;I encountered a problem of taking integer input while solving a problem on &lt;a href=&quot;http://www.codechef.com/problems/TLG&quot; rel=&quot;nofollow noreferrer&quot;&gt;CodeChef&lt;/a&gt;, where two integers - separated by space - should be read from one line.&lt;/p&gt;\n&lt;p&gt;While &lt;code&gt;int(input())&lt;/code&gt; is sufficient for a single integer, I did not find a direct way to input two integers.  I tried this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;num = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;()\nnum1 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nnum2 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(num)):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; num[i] == &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\nnum1 = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(num[:i])\nnum2 = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(num[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now I use &lt;code&gt;num1&lt;/code&gt; and &lt;code&gt;num2&lt;/code&gt; as integers.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dbz&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        r = raw_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter number:&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; r.isdigit():\n            i = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(raw_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter divident:&quot;&lt;/span&gt;))\n            d = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(r)/i\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;O/p is -:&quot;&lt;/span&gt;,d\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a number&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; Exception ,e:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Program halted incorrect data entered&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(e)\ndbz()\n\nOr \n\nnum = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter Number:&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;#&quot;input&quot; will accept only numbers&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;While in your example, &lt;code&gt;int(input(...))&lt;/code&gt; does the trick in any case, &lt;code&gt;python-future&lt;/code&gt;&apos;s &lt;a href=&quot;http://python-future.org/compatible_idioms.html#input&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;builtins.input&lt;/code&gt;&lt;/a&gt; is worth consideration since that makes sure your code works for both Python 2 and 3 &lt;em&gt;and&lt;/em&gt; disables Python2&apos;s default behaviour of &lt;code&gt;input&lt;/code&gt; trying to be &quot;clever&quot; about the input data type (&lt;code&gt;builtins.input&lt;/code&gt; basically just behaves like &lt;code&gt;raw_input&lt;/code&gt;).&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;a href=&quot;https://stackoverflow.com/questions/23294658/asking-the-user-for-input-until-they-give-a-valid-response&quot;&gt;asking-the-user-for-input-until-they-give-a-valid-response&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7505395/patrick-artner&quot; title=&quot;48,622 reputation&quot; class=&quot;comment-user&quot;&gt;Patrick Artner&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91590863_20449427&quot;&gt;&lt;span title=&quot;2018-09-13 20:50:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 13, 2018 at 20:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Is there any other way, like a function or something so that we dont need to convert to int in 3.x other than doing explicit conversion to int??&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4811421/shreyan-mehta&quot; title=&quot;550 reputation&quot; class=&quot;comment-user&quot;&gt;Shreyan Mehta&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment60632844_20449433&quot;&gt;&lt;span title=&quot;2016-04-09 06:19:24Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 9, 2016 at 6:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ShreyanMehta &lt;code&gt;eval&lt;/code&gt; would work, but don&apos;t go for that unless you have pressing reasons.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1903116/thefourtheye&quot; title=&quot;222,458 reputation&quot; class=&quot;comment-user&quot;&gt;thefourtheye&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment60633361_20449433&quot;&gt;&lt;span title=&quot;2016-04-09 07:01:32Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 9, 2016 at 7:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@thefourtheye at least use &lt;a href=&quot;https://docs.python.org/3/library/ast.html#ast.literal_eval&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;ast.literal_eval&lt;/code&gt;&lt;/a&gt; for that. It does not have the security concerns of &lt;code&gt;eval&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3212865/spectras&quot; title=&quot;12,299 reputation&quot; class=&quot;comment-user&quot;&gt;spectras&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment86398645_20449433&quot;&gt;&lt;span title=&quot;2018-04-06 12:48:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 6, 2018 at 12:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This looks very interesting.  However, isn&apos;t &lt;code&gt;i&lt;/code&gt; destroyed when the &lt;code&gt;for&lt;/code&gt; loop is exited?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user2509848&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment36673308_23828100&quot;&gt;&lt;span title=&quot;2014-05-23 16:33:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 23, 2014 at 16:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;@hosch250&lt;/code&gt; When a loop is exited, the value of the index variable (here, &lt;code&gt;i&lt;/code&gt;) remains.  I tried this piece out, and it works correctly.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3668669/aravind&quot; title=&quot;49 reputation&quot; class=&quot;comment-user&quot;&gt;Aravind&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment36696794_23828100&quot;&gt;&lt;span title=&quot;2014-05-24 15:18:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 24, 2014 at 15:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For this kind of input manipulation, you can either &lt;code&gt;num1, num2 = map(int, input().split())&lt;/code&gt; if you know how much integers you will encounter or &lt;code&gt;nums = list(map(int, input().split()))&lt;/code&gt; if you don&apos;t.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5069029/301-moved-permanently&quot; title=&quot;3,858 reputation&quot; class=&quot;comment-user&quot;&gt;301_Moved_Permanently&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment89589223_23828100&quot;&gt;&lt;span title=&quot;2018-07-12 12:58:38Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 12, 2018 at 12:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":77,"title":"How can I read inputs as numbers?","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                    &lt;div class=&quot;flex--item mr8&quot;&gt;\n                        &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLock&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M16 9a2 2 0 0 0-2-2V6A5 5 0 0 0 4 6v1a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V9Zm-7 5a2 2 0 1 1 0-4 2 2 0 0 1 0 4Zm3.1-7H5.9V6a3.1 3.1 0 0 1 6.2 0v1Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;This question&apos;s answers are a &lt;a href=&quot;/help/privileges/edit-community-wiki&quot;&gt;community effort&lt;/a&gt;&lt;/b&gt;. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;Why are &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; strings instead of ints in the below code?&lt;/p&gt;\n\n&lt;p&gt;(Note: in Python 2.x use &lt;code&gt;raw_input()&lt;/code&gt;. In Python 3.x use &lt;code&gt;input()&lt;/code&gt;. &lt;code&gt;raw_input()&lt;/code&gt; was renamed to &lt;code&gt;input()&lt;/code&gt; in Python 3.x)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;play = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; play:\n\n    x = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;)\n    y = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x + y)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x - y)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x * y)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x / y)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x % y)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Play again? &quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;no&quot;&lt;/span&gt;:\n        play = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"how-can-i-read-inputs-as-numbers-1657384503324","postType":"QUESTION","createdAt":"2022-07-09T16:35:03.000Z","updatedAt":"2022-07-09T16:35:03.000Z","tags":[{"id":279,"name":"python-3.x","slug":"python-3.x","createdAt":"2022-07-09T16:35:03.000Z","updatedAt":"2022-07-09T16:35:03.000Z","Questions_Tags":{"questionId":77,"tagId":279}},{"id":280,"name":"python-2.7","slug":"python-2.7","createdAt":"2022-07-09T16:35:03.000Z","updatedAt":"2022-07-09T16:35:03.000Z","Questions_Tags":{"questionId":77,"tagId":280}},{"id":282,"name":"int","slug":"int","createdAt":"2022-07-09T16:35:03.000Z","updatedAt":"2022-07-09T16:35:03.000Z","Questions_Tags":{"questionId":77,"tagId":282}}]}},"__N_SSG":true}