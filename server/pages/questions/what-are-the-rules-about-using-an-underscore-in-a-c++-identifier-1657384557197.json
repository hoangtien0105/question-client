{"pageProps":{"data":{"answer":["\n&lt;p&gt;The rules (which did not change in C++11):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Reserved in any scope, including for use as &lt;a href=&quot;https://stackoverflow.com/questions/4297933/c-implementation#4297974&quot;&gt;implementation&lt;/a&gt; macros:\n\n&lt;ul&gt;\n&lt;li&gt;identifiers beginning with an underscore followed immediately by an uppercase letter&lt;/li&gt;\n&lt;li&gt;identifiers containing adjacent underscores (or &quot;double underscore&quot;)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Reserved in the global namespace:\n\n&lt;ul&gt;\n&lt;li&gt;identifiers beginning with an underscore&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Also, everything in the &lt;code&gt;std&lt;/code&gt; namespace is reserved. (You are allowed to add template specializations, though.) &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;From the 2003 C++ Standard:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;17.4.3.1.2 Global names [lib.global.names]&lt;/h3&gt;\n  \n  &lt;p&gt;Certain sets of names and function signatures are always reserved to the implementation:&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;Each name that contains a double underscore (&lt;code&gt;__&lt;/code&gt;) or begins with an underscore followed by an uppercase letter (2.11) is reserved to the implementation for any use.&lt;/li&gt;\n  &lt;li&gt;Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.&lt;sup&gt;165&lt;/sup&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;p&gt;&lt;sup&gt;165)&lt;/sup&gt; Such names are also reserved in namespace &lt;code&gt;::std&lt;/code&gt; (17.4.3.1). &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Because C++ is based on the C standard (1.1/2, C++03) and C99 is a normative reference (1.2/1, C++03) these also apply, from the 1999 C Standard:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;7.1.3 Reserved identifiers&lt;/h3&gt;\n  \n  &lt;p&gt;Each header declares or defines all identifiers listed in its associated subclause, and\n  optionally declares or defines identifiers listed in its associated future library directions subclause and identifiers which are always reserved either for any use or for use as file scope identifiers.&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;All identifiers that begin with an underscore and either an uppercase letter or another\n  underscore are always reserved for any use.&lt;/li&gt;\n  &lt;li&gt;All identifiers that begin with an underscore are always reserved for use as identifiers\n  with file scope in both the ordinary and tag name spaces.&lt;/li&gt;\n  &lt;li&gt;Each macro name in any of the following subclauses (including the future library\n  directions) is reserved for use as specified if any of its associated headers is included;\n  unless explicitly stated otherwise (see 7.1.4).&lt;/li&gt;\n  &lt;li&gt;All identifiers with external linkage in any of the following subclauses (including the\n  future library directions) are always reserved for use as identifiers with external\n  linkage.&lt;sup&gt;154&lt;/sup&gt;&lt;/li&gt;\n  &lt;li&gt;Each identifier with file scope listed in any of the following subclauses (including the\n  future library directions) is reserved for use as a macro name and as an identifier with\n  file scope in the same name space if any of its associated headers is included.&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;p&gt;No other identifiers are reserved. If the program declares or defines an identifier in a\n  context in which it is reserved (other than as allowed by 7.1.4), or defines a reserved\n  identifier as a macro name, the behavior is undefined.&lt;/p&gt;\n  \n  &lt;p&gt;If the program removes (with &lt;code&gt;#undef&lt;/code&gt;) any macro definition of an identifier in the first\n  group listed above, the behavior is undefined.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;sup&gt;154)&lt;/sup&gt; The list of reserved identifiers with external linkage includes &lt;code&gt;errno&lt;/code&gt;, &lt;code&gt;math_errhandling&lt;/code&gt;, &lt;code&gt;setjmp&lt;/code&gt;, and &lt;code&gt;va_end&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Other restrictions might apply. For example, the POSIX standard reserves a lot of identifiers that are likely to show up in normal code:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Names beginning with a capital &lt;code&gt;E&lt;/code&gt; followed a digit or uppercase letter:\n\n&lt;ul&gt;\n&lt;li&gt;may be used for additional error code names.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names that begin with either &lt;code&gt;is&lt;/code&gt; or &lt;code&gt;to&lt;/code&gt; followed by a lowercase letter\n\n&lt;ul&gt;\n&lt;li&gt;may be used for additional character testing and conversion functions.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names that begin with &lt;code&gt;LC_&lt;/code&gt; followed by an uppercase letter\n\n&lt;ul&gt;\n&lt;li&gt;may be used for additional macros specifying locale attributes.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names of all existing mathematics functions suffixed with &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;l&lt;/code&gt; are reserved\n\n&lt;ul&gt;\n&lt;li&gt;for corresponding functions that operate on float and long double arguments, respectively.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names that begin with &lt;code&gt;SIG&lt;/code&gt; followed by an uppercase letter are reserved\n\n&lt;ul&gt;\n&lt;li&gt;for additional signal names.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names that begin with &lt;code&gt;SIG_&lt;/code&gt; followed by an uppercase letter are reserved\n\n&lt;ul&gt;\n&lt;li&gt;for additional signal actions.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names beginning with &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;mem&lt;/code&gt;, or &lt;code&gt;wcs&lt;/code&gt; followed by a lowercase letter are reserved\n\n&lt;ul&gt;\n&lt;li&gt;for additional string and array functions.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names beginning with &lt;code&gt;PRI&lt;/code&gt; or &lt;code&gt;SCN&lt;/code&gt; followed by any lowercase letter or &lt;code&gt;X&lt;/code&gt; are reserved\n\n&lt;ul&gt;\n&lt;li&gt;for additional format specifier macros&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names that end with &lt;code&gt;_t&lt;/code&gt; are reserved\n\n&lt;ul&gt;\n&lt;li&gt;for additional type names.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;While using these names for your own purposes right now might not cause a problem, they do raise the possibility of conflict with future versions of that standard.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Personally I just don&apos;t start identifiers with underscores. New addition to my rule: Don&apos;t use double underscores anywhere, which is easy as I rarely use underscore.&lt;/p&gt;\n\n&lt;p&gt;After doing research on this article I no longer end my identifiers with &lt;code&gt;_t&lt;/code&gt;\nas this is reserved by the POSIX standard.&lt;/p&gt;\n\n&lt;p&gt;The rule about any identifier ending with &lt;code&gt;_t&lt;/code&gt; surprised me a lot. I think that is a POSIX standard (not sure yet) looking for clarification and official chapter and verse. This is from the &lt;a href=&quot;http://www.gnu.org/software/libtool/manual/libc/Reserved-Names.html&quot; rel=&quot;noreferrer&quot;&gt;GNU libtool manual&lt;/a&gt;, listing reserved names.&lt;/p&gt;\n\n&lt;p&gt;CesarB provided the following link to the &lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_02.html&quot; rel=&quot;noreferrer&quot;&gt;POSIX 2004&lt;/a&gt; reserved symbols and notes &apos;that many other reserved prefixes and suffixes ... can be found there&apos;.  The\n&lt;a href=&quot;http://www.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html&quot; rel=&quot;noreferrer&quot;&gt;POSIX 2008&lt;/a&gt; reserved symbols are defined here.  The restrictions are somewhat more nuanced than those above.&lt;/p&gt;\n    ","\n&lt;p&gt;The rules to avoid collision of names are both in the C++ standard (see Stroustrup book) and mentioned by C++ gurus (Sutter, etc.).&lt;/p&gt;\n\n&lt;h2&gt;Personal rule&lt;/h2&gt;\n\n&lt;p&gt;Because I did not want to deal with cases, and wanted a simple rule, I have designed a &lt;strong&gt;personal&lt;/strong&gt; one that is both simple and correct:&lt;/p&gt;\n\n&lt;p&gt;&lt;b&gt;\nWhen naming a symbol, you will avoid collision with compiler/OS/standard libraries if you:&lt;/b&gt;&lt;/p&gt;&lt;b&gt;\n\n&lt;/b&gt;&lt;ul&gt;&lt;b&gt;\n&lt;li&gt;never start a symbol with an underscore&lt;/li&gt;\n&lt;/b&gt;&lt;li&gt;&lt;b&gt;never name a symbol with two consecutive underscores inside.\n&lt;/b&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Of course, putting your code in an unique namespace helps to avoid collision, too (but won&apos;t protect against evil macros)&lt;/p&gt;\n\n&lt;h2&gt;Some examples&lt;/h2&gt;\n\n&lt;p&gt;(I use macros because they are the more code-polluting of C/C++ symbols, but it could be anything from variable name to class name)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; _WRONG&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; __WRONG_AGAIN&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; RIGHT_&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; WRONG__WRONG&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; RIGHT_RIGHT&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; RIGHT_x_RIGHT&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Extracts from C++0x draft&lt;/h2&gt;\n\n&lt;p&gt;From the &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf&quot; rel=&quot;noreferrer&quot;&gt;n3242.pdf&lt;/a&gt; file (I expect the final standard text to be similar):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;b&gt;17.6.3.3.2 Global names [global.names]&lt;/b&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Certain sets of names and function signatures are always reserved to the implementation:&lt;/p&gt;\n  \n  &lt;p&gt; Each name that contains a double underscore _ _ or begins with an underscore followed by an uppercase letter (2.12) is reserved to the implementation for any use.&lt;/p&gt;\n  \n  &lt;p&gt; Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;But also:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;b&gt;17.6.3.3.5 User-defined literal suffixes [usrlit.suffix]&lt;/b&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Literal suffix identifiers that do not start with an underscore are reserved for future standardization.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This last clause is confusing, unless you consider that a name starting with one underscore and followed by a lowercase letter would be Ok if &lt;i&gt;not&lt;/i&gt; defined in the global namespace...&lt;/p&gt;\n    ","\n&lt;p&gt;From &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/565w213d.aspx&quot; rel=&quot;noreferrer&quot;&gt;MSDN&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Use of two sequential underscore characters ( __ ) at the beginning of an identifier, or a single leading underscore followed by a capital letter, is reserved for C++ implementations in all scopes. You should avoid using one leading underscore followed by a lowercase letter for names with file scope because of possible conflicts with current or future reserved identifiers.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This means that you can use a single underscore as a member variable prefix, as long as it&apos;s followed by a lower-case letter.&lt;/p&gt;\n\n&lt;p&gt;This is apparently taken from section 17.4.3.1.2 of the C++ standard, but I can&apos;t find an original source for the full standard online.&lt;/p&gt;\n\n&lt;p&gt;See also &lt;a href=&quot;https://stackoverflow.com/questions/224397/why-do-people-use-double-underscore-so-much-in-c&quot;&gt;this question&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;As for the other part of the question, it&apos;s common to put the underscore at the &lt;em&gt;end&lt;/em&gt; of the variable name to not clash with anything internal.&lt;/p&gt;\n\n&lt;p&gt;I do this even inside classes and namespaces because I then only have to remember one rule (compared to &quot;at the end of the name in global scope, and the beginning of the name everywhere else&quot;).&lt;/p&gt;\n    ","\n&lt;p&gt;Yes, underscores may be used anywhere in an identifier. I believe the rules are: any of a-z, A-Z, _ in the first character and those +0-9 for the following characters.&lt;/p&gt;\n\n&lt;p&gt;Underscore prefixes are common in C code -- a single underscore means &quot;private&quot;, and double underscores are usually reserved for use by the compiler.&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The glibc manual page about that can be found at &lt;a href=&quot;http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;gnu.org/software/libc/manual/html_node/Reserved-Names.html&lt;/a&gt; Edit: see also &lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_02.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;opengroup.org/onlinepubs/009695399/functions/xsh_chap02_02.html&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/28258/cesarb&quot; title=&quot;42,121 reputation&quot; class=&quot;comment-user&quot;&gt;CesarB&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment19642134_228783&quot;&gt;&lt;span title=&quot;2008-10-23 10:59:52Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 23, 2008 at 10:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Just to note that the ignorance of these rules does not necessarily imply that your code will not compile or run, but it is likely that your code will not be portable to different compilers and version, since it cannot be guaranteed that there will not be name clashes . To back this up I know of certain implementation of an important system that has been using as a naming convention the _ capital letter everywhere. There where no errors due to this. Of course it is bad practice.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4345926/g24l&quot; title=&quot;2,905 reputation&quot; class=&quot;comment-user&quot;&gt;g24l&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment55260142_228783&quot;&gt;&lt;span title=&quot;2015-11-16 22:32:03Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 16, 2015 at 22:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The C++ standard doesn&apos;t &quot;import&quot; the C one, does it? They import certain headers, but not the language as a whole, or naming rules, as far as I know. But yeah, the _t one surprised me as well. But since it&apos;s C, it can only apply to the global ns. Should be safe to use _t inside classes as I read it&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/33213/jalf&quot; title=&quot;236,976 reputation&quot; class=&quot;comment-user&quot;&gt;jalf&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment533963_228797&quot;&gt;&lt;span title=&quot;2009-04-06 16:16:54Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Apr 6, 2009 at 16:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The C++ Standard doesn&apos;t &quot;import&quot; the C Standard. It &lt;i&gt;references&lt;/i&gt; the C Standard. The C++ library introduction says &quot;The library also makes available the facilities of the Standard C Library&quot;. It does that by including headers of the C Standard library with appropriate changes, but not by &quot;importing&quot; it. The C++ Standard has an own set of rules that describes the reserved names. If a name reserved in C should be reserved in C++, that is the place to say this. But the C++ Standard doesn&apos;t say so. So i don&apos;t believe that things reserved in C are reserved in C++ - but i could well be wrong.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/34509/johannes-schaub-litb&quot; title=&quot;482,727 reputation&quot; class=&quot;comment-user&quot;&gt;Johannes Schaub - litb&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1296456_228797&quot;&gt;&lt;span title=&quot;2009-09-20 01:34:08Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 20, 2009 at 1:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is what I found about the &quot;_t&quot; issue: n1256 (C99 TC3) says: &quot;Typedef names beginning with int or uint and ending with _t&quot; are reserved. I think that still allows using names like &quot;foo_t&quot; - but i think these are then reserved by POSIX.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/34509/johannes-schaub-litb&quot; title=&quot;482,727 reputation&quot; class=&quot;comment-user&quot;&gt;Johannes Schaub - litb&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1296472_228797&quot;&gt;&lt;span title=&quot;2009-09-20 01:39:06Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Sep 20, 2009 at 1:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;So &apos;tolerance&apos; is reserved by POSIX as it starts with &apos;to&apos; + a lowercase letter? I bet a lot of code breaks this rule!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/396551/sjoerd&quot; title=&quot;6,738 reputation&quot; class=&quot;comment-user&quot;&gt;Sjoerd&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3612024_228797&quot;&gt;&lt;span title=&quot;2010-08-11 22:35:54Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Aug 11, 2010 at 22:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@LokiAstari, &quot;&lt;i&gt;The C++ standard is defined in terms of the C standard. Basically it says the C++ is C with these differences and additions.&lt;/i&gt;&quot; Nonsense! C++ only references the C standard in [basic.fundamental] and the library.  If what you say is true, where does C++ say that &lt;code&gt;_Bool&lt;/code&gt; and &lt;code&gt;_Imaginary&lt;/code&gt; don&apos;t exist in C++? The C++ language are defined explicitly, not in terms of &quot;edits&quot; to C, otherwise the standard could be much shorter!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/981959/jonathan-wakely&quot; title=&quot;160,851 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Wakely&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27222199_228797&quot;&gt;&lt;span title=&quot;2013-08-29 14:16:41Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 29, 2013 at 14:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Meysam : &lt;code&gt;__WRONG_AGAIN__&lt;/code&gt; contains two consecutive underscores (two at the beginning, and two at the end), so this is wrong according to the standard.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14089/paercebal&quot; title=&quot;78,896 reputation&quot; class=&quot;comment-user&quot;&gt;paercebal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment11146367_228848&quot;&gt;&lt;span title=&quot;2012-01-18 13:49:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 18, 2012 at 13:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@BЈовић : &lt;code&gt;WRONG__WRONG&lt;/code&gt; contains two consecutive underscores (two in the middle), so this is wrong according to the standard&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14089/paercebal&quot; title=&quot;78,896 reputation&quot; class=&quot;comment-user&quot;&gt;paercebal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment30431743_228848&quot;&gt;&lt;span title=&quot;2013-12-04 17:30:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 4, 2013 at 17:30&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;i&gt;putting your code in an unique namespace helps to avoid collision, too&lt;/i&gt;: but this is still not enough, since the identifier may collide with a keyword regardless of scope (e.g. &lt;code&gt;__attribute__&lt;/code&gt; for GCC).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/673852/ruslan&quot; title=&quot;16,742 reputation&quot; class=&quot;comment-user&quot;&gt;Ruslan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment66021653_228848&quot;&gt;&lt;span title=&quot;2016-09-06 09:53:52Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 6, 2016 at 9:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why is there any problem of having two consecutive underscores &lt;i&gt;in the middle&lt;/i&gt; according to the standard? User-defined literal suffixes apply to literal values like &lt;code&gt;1234567L&lt;/code&gt; or &lt;code&gt;4.0f&lt;/code&gt;; IIRC this refers to ohttp://en.cppreference.com/w/cpp/language/user_literal&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/44330/jason-s&quot; title=&quot;179,271 reputation&quot; class=&quot;comment-user&quot;&gt;Jason S&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79326027_228848&quot;&gt;&lt;span title=&quot;2017-09-12 16:42:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 12, 2017 at 16:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;Why is there any problem of having two consecutive underscores in the middle according to the standard?&lt;/code&gt; Because the standard say those are reserved. This is not an &lt;b&gt;advice&lt;/b&gt; on good or bad style. It&apos;s a &lt;b&gt;decision&lt;/b&gt; from the standard. Why they decided this? I guess the first compilers already used such conventions informally before standardization.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14089/paercebal&quot; title=&quot;78,896 reputation&quot; class=&quot;comment-user&quot;&gt;paercebal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment79370999_228848&quot;&gt;&lt;span title=&quot;2017-09-13 17:54:51Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 13, 2017 at 17:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I found a similar text in n3092.pdf (the draft of C++0x standard) at section: &quot;17.6.3.3.2 Global names&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14089/paercebal&quot; title=&quot;78,896 reputation&quot; class=&quot;comment-user&quot;&gt;paercebal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7642738_228794&quot;&gt;&lt;span title=&quot;2011-06-27 19:49:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 27, 2011 at 19:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Interestingly, this seems to be the only answer which has direct, concise answer to the question.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1717300/hyde&quot; title=&quot;56,062 reputation&quot; class=&quot;comment-user&quot;&gt;hyde&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41052834_228794&quot;&gt;&lt;span title=&quot;2014-10-03 16:08:42Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 3, 2014 at 16:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@hyde: Actually, it isn&apos;t, since it&apos;s skipping the rule to not to have any identifiers with a leading underscore in the global namespace. See &lt;a href=&quot;http://stackoverflow.com/a/228797/140719&quot;&gt;Roger&apos;s answer&lt;/a&gt;. I&apos;d be very wary of citations of MS VC docs as an authority on the C++ standard.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140719/sbi&quot; title=&quot;213,029 reputation&quot; class=&quot;comment-user&quot;&gt;sbi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50625378_228794&quot;&gt;&lt;span title=&quot;2015-07-09 13:37:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 9, 2015 at 13:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@sbi I was referring to  &lt;i&gt;&quot;you can use a single underscore as a member variable prefix, as long as it&apos;s followed by a lower-case letter&quot;&lt;/i&gt; in this answer, which answers the question on the question text directly and concisely, without being drowned in a wall of text.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1717300/hyde&quot; title=&quot;56,062 reputation&quot; class=&quot;comment-user&quot;&gt;hyde&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50653221_228794&quot;&gt;&lt;span title=&quot;2015-07-10 06:53:37Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 10, 2015 at 6:53&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;First, I still consider the lack of any hint that the same rule does not apply to the global namespace a failure. What&apos;s worse, though, is that adjacent underscores are forbidden not only at the beginning of, but &lt;i&gt;anywhere&lt;/i&gt; in, an identifier. So this answer isn&apos;t merely omitting a fact, but actually makes at least one actively wrong claim. As I said, referring to the MSVC docs is something I wouldn&apos;t do unless the question is solely about VC.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140719/sbi&quot; title=&quot;213,029 reputation&quot; class=&quot;comment-user&quot;&gt;sbi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50721818_228794&quot;&gt;&lt;span title=&quot;2015-07-12 18:48:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 12, 2015 at 18:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;They are common in libraries. They should not be common in user code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/14065/martin-york&quot; title=&quot;247,789 reputation&quot; class=&quot;comment-user&quot;&gt;Martin York&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment95291_228792&quot;&gt;&lt;span title=&quot;2008-10-23 07:12:15Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 23, 2008 at 7:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;People &lt;i&gt;do&lt;/i&gt; write libraries in C, you know.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3560/john-millikin&quot; title=&quot;191,662 reputation&quot; class=&quot;comment-user&quot;&gt;John Millikin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment96644_228792&quot;&gt;&lt;span title=&quot;2008-10-23 17:51:35Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Oct 23, 2008 at 17:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;i&gt;&quot;Yes, underscores may be used anywhere in an identifier.&quot;&lt;/i&gt; This is wrong for global identifiers. See &lt;a href=&quot;http://stackoverflow.com/a/228797/140719&quot;&gt;Roger&apos;s answer&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140719/sbi&quot; title=&quot;213,029 reputation&quot; class=&quot;comment-user&quot;&gt;sbi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50625461_228792&quot;&gt;&lt;span title=&quot;2015-07-09 13:39:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 9, 2015 at 13:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@sbi According to the C and C++ standards, yes, semantically, global identifiers with leading underscores are reserved. They are syntactically valid identifiers though, and the compiler won&apos;t stop you from naming a function &lt;code&gt;_Foo&lt;/code&gt;, though by doing so you&apos;re relying on nonstandard implementation details and thus risk having your code broken by future versions of the language/standard library implementation/OS.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1558283/benw&quot; title=&quot;469 reputation&quot; class=&quot;comment-user&quot;&gt;BenW&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment110380325_228792&quot;&gt;&lt;span title=&quot;2020-06-16 15:15:02Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 16, 2020 at 15:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@BenW: TTBOMK, the C++ standard simply says that global identifiers starting with an underscore are not allowed, without making any distinction between syntax and semantic. (Also any identifiers starting with an underscore followed by a capital letter, and an identifiers with two consecutive underscores.)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/140719/sbi&quot; title=&quot;213,029 reputation&quot; class=&quot;comment-user&quot;&gt;sbi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment111150507_228792&quot;&gt;&lt;span title=&quot;2020-07-11 21:14:01Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 11, 2020 at 21:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":89,"title":"What are the rules about using an underscore in a C++ identifier?","content":"\n                \n&lt;p&gt;It&apos;s common in C++ to name member variables with some kind of prefix to denote the fact that they&apos;re member variables, rather than local variables or parameters. If you&apos;ve come from an MFC background, you&apos;ll probably use &lt;code&gt;m_foo&lt;/code&gt;. I&apos;ve also seen &lt;code&gt;myFoo&lt;/code&gt; occasionally.&lt;/p&gt;\n\n&lt;p&gt;C# (or possibly just .NET) seems to recommend using just an underscore, as in &lt;code&gt;_foo&lt;/code&gt;. Is this allowed by the C++ standard?&lt;/p&gt;\n    ","slug":"what-are-the-rules-about-using-an-underscore-in-a-c++-identifier-1657384557197","postType":"QUESTION","createdAt":"2022-07-09T16:35:57.000Z","updatedAt":"2022-07-09T16:35:57.000Z","tags":[{"id":324,"name":"naming-conventions","slug":"naming-conventions","createdAt":"2022-07-09T16:35:57.000Z","updatedAt":"2022-07-09T16:35:57.000Z","Questions_Tags":{"questionId":89,"tagId":324}},{"id":325,"name":"standards","slug":"standards","createdAt":"2022-07-09T16:35:57.000Z","updatedAt":"2022-07-09T16:35:57.000Z","Questions_Tags":{"questionId":89,"tagId":325}}]}},"__N_SSG":true}