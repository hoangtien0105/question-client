{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;strong&gt;Underlying cause:&lt;/strong&gt;&lt;br&gt;\nContent scripts are executed in an &lt;a href=&quot;https://developer.chrome.com/extensions/content_scripts#isolated_world&quot; rel=&quot;noreferrer&quot;&gt;&quot;isolated world&quot;&lt;/a&gt; environment.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;br&gt;\nInject the code into the page using DOM - that code will be able to &lt;em&gt;access&lt;/em&gt; functions/variables of the page context (&quot;main world&quot;) or &lt;em&gt;expose&lt;/em&gt; functions/variables to the page context (in your case it&apos;s the &lt;code&gt;state()&lt;/code&gt; method).&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Note in case communication with the page script is needed:&lt;/strong&gt;&lt;br&gt;\nUse DOM &lt;code&gt;CustomEvent&lt;/code&gt; handler. Examples: &lt;a href=&quot;https://stackoverflow.com/a/9636008&quot;&gt;one&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/19312198/&quot;&gt;two&lt;/a&gt;, and &lt;a href=&quot;/a/46870005&quot;&gt;three&lt;/a&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Note in case &lt;code&gt;chrome&lt;/code&gt; API is needed in the page script:&lt;/strong&gt;&lt;br&gt;\nSince &lt;code&gt;chrome.*&lt;/code&gt; APIs can&apos;t be used in the page script, you have to use them in the content script and send the results to the page script via DOM messaging (see the note above).&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Safety warning&lt;/strong&gt;:&lt;br&gt;\nA page may redefine or augment/hook a built-in prototype so your exposed code may fail if the page did it in an incompatible fashion. If you want to make sure your exposed code runs in a safe environment then you should either a) declare your content script with &lt;a href=&quot;https://developer.chrome.com/extensions/content_scripts#run_time&quot; rel=&quot;noreferrer&quot;&gt;&quot;run_at&quot;: &quot;document_start&quot;&lt;/a&gt; and use Methods 2-3 not 1, or b) extract the original native built-ins via an empty iframe, &lt;a href=&quot;https://stackoverflow.com/questions/13990187/create-a-reset-of-javascript-array-prototype-when-array-prototype-has-been-modif&quot;&gt;example&lt;/a&gt;. Note that with &lt;code&gt;document_start&lt;/code&gt; you may need to use &lt;code&gt;DOMContentLoaded&lt;/code&gt; event inside the exposed code to wait for DOM.&lt;/p&gt;\n&lt;h1&gt;Table of contents&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;Method 1: Inject another file - ManifestV3 compatible&lt;/li&gt;\n&lt;li&gt;Method 2: Inject embedded code&lt;/li&gt;\n&lt;li&gt;Method 2b: Using a function&lt;/li&gt;\n&lt;li&gt;Method 3: Using an inline event - ManifestV3 compatible&lt;/li&gt;\n&lt;li&gt;Method 4: Using executeScript&apos;s world - ManifestV3 only&lt;/li&gt;\n&lt;li&gt;Dynamic values in the injected code&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Method 1: Inject another file - ManifestV3 compatible&lt;/h2&gt;\n&lt;p&gt;Particularly good when you have lots of code. Put the code in a file within your extension, say &lt;code&gt;script.js&lt;/code&gt;. Then load it in your &lt;a href=&quot;https://stackoverflow.com/a/9310273&quot;&gt;content script&lt;/a&gt; like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;script&apos;&lt;/span&gt;);\ns.&lt;span class=&quot;hljs-property&quot;&gt;src&lt;/span&gt; = chrome.&lt;span class=&quot;hljs-property&quot;&gt;runtime&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getURL&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;script.js&apos;&lt;/span&gt;);\ns.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;();\n};\n(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;head&lt;/span&gt; || &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;documentElement&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(s);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;The js file must be exposed in &lt;a href=&quot;https://developer.chrome.com/extensions/manifest/web_accessible_resources.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;web_accessible_resources&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;manifest.json example for ManifestV2&lt;/p&gt;\n&lt;pre class=&quot;lang-json s-code-block&quot;&gt;&lt;code class=&quot;hljs language-json&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;web_accessible_resources&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;script.js&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;manifest.json example for ManifestV3&lt;/p&gt;\n&lt;pre class=&quot;lang-json s-code-block&quot;&gt;&lt;code class=&quot;hljs language-json&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;web_accessible_resources&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;&quot;resources&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;script.js&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;&quot;matches&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;all_urls&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If not, the following error will appear in the console:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Denying load of chrome-extension://[EXTENSIONID]/script.js. Resources must be listed in the web_accessible_resources manifest key in order to be loaded by pages outside the extension.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;Method 2: Inject embedded code&lt;/h2&gt;\n&lt;p&gt;This method is useful when you want to quickly run a small piece of code. (See also: &lt;a href=&quot;https://stackoverflow.com/a/8994454/938089?how-to-disable-facebook-hotkeys-with-chrome-extension&quot;&gt;How to disable facebook hotkeys with Chrome extension?&lt;/a&gt;).&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; actualCode = &lt;span class=&quot;hljs-string&quot;&gt;`// Code here.\n// If you want to use a variable, use $ and curly braces.\n// For example, to use a fixed random number:\nvar someFixedRandomValue = &lt;span class=&quot;hljs-subst&quot;&gt;${ &lt;span class=&quot;hljs-built_in&quot;&gt;Math&lt;/span&gt;.random() }&lt;/span&gt;;\n// NOTE: Do not insert unsafe variables in this way, see below\n// at &quot;Dynamic values in the injected code&quot;\n`&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; script = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;script&apos;&lt;/span&gt;);\nscript.&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt; = actualCode;\n(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;head&lt;/span&gt;||&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;documentElement&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(script);\nscript.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot; rel=&quot;noreferrer&quot;&gt;template literals&lt;/a&gt; are only supported in Chrome 41 and above. If you want the extension to work in Chrome 40-, use:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; actualCode = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;/* Code here. Example: */&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;alert(0);&apos;&lt;/span&gt;,\n                  &lt;span class=&quot;hljs-string&quot;&gt;&apos;// Beware! This array have to be joined&apos;&lt;/span&gt;,\n                  &lt;span class=&quot;hljs-string&quot;&gt;&apos;// using a newline. Otherwise, missing semicolons&apos;&lt;/span&gt;,\n                  &lt;span class=&quot;hljs-string&quot;&gt;&apos;// or single-line comments (//) will mess up your&apos;&lt;/span&gt;,\n                  &lt;span class=&quot;hljs-string&quot;&gt;&apos;// code -----&amp;gt;&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Method 2b: Using a function&lt;/h2&gt;\n&lt;p&gt;For a big chunk of code, quoting the string is not feasible. Instead of using an array, a function can be used, and stringified:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; actualCode = &lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// All code is executed in a local scope.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// For example, the following does NOT overwrite the global `alert` method&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; alert = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// To overwrite a global variable, prefix `window`:&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;alert&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n} + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)();&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; script = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;script&apos;&lt;/span&gt;);\nscript.&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt; = actualCode;\n(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;head&lt;/span&gt;||&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;documentElement&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(script);\nscript.&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This method works, because the &lt;code&gt;+&lt;/code&gt; operator on strings and a function converts all objects to a string. If you intend on using the code more than once, it&apos;s wise to create a function to avoid code repetition. An implementation might look like:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;injectScript&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; actualCode = &lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt; + func + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)();&apos;&lt;/span&gt;\n    ...\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;injectScript&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Injected script&quot;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note: Since the function is serialized, the original scope, and all bound properties are lost!&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; scriptToInject = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; scriptToInject);\n};\n&lt;span class=&quot;hljs-title function_&quot;&gt;injectScript&lt;/span&gt;(scriptToInject);\n&lt;span class=&quot;hljs-comment&quot;&gt;// Console output:  &quot;undefined&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Method 3: Using an inline event - ManifestV3 compatible&lt;/h2&gt;\n&lt;p&gt;Sometimes, you want to run some code immediately, e.g. to run some code before the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element is created. This can be done by inserting a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag with &lt;code&gt;textContent&lt;/code&gt; (see method 2/2b).&lt;/p&gt;\n&lt;p&gt;An alternative, &lt;strong&gt;but not recommended&lt;/strong&gt; is to use inline events. It is not recommended because if the page defines a Content Security policy that forbids inline scripts, then inline event listeners are blocked. Inline scripts injected by the extension, on the other hand, still run.\nIf you still want to use inline events, this is how:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; actualCode = &lt;span class=&quot;hljs-string&quot;&gt;&apos;// Some code example \\n&apos;&lt;/span&gt; + \n                 &lt;span class=&quot;hljs-string&quot;&gt;&apos;console.log(document.documentElement.outerHTML);&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;documentElement&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;onreset&apos;&lt;/span&gt;, actualCode);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;documentElement&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;dispatchEvent&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CustomEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;reset&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;documentElement&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;removeAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;onreset&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note: This method assumes that there are no other global event listeners that handle the &lt;code&gt;reset&lt;/code&gt; event. If there is, you can also pick one of the other global events. Just open the JavaScript console (F12), type &lt;code&gt;document.documentElement.on&lt;/code&gt;, and pick on of the available events.&lt;/p&gt;\n&lt;h2&gt;Method 4: Using executeScript&apos;s world - ManifestV3 only&lt;/h2&gt;\n&lt;p&gt;In Chrome 95 or newer use &lt;code&gt;chrome.scripting.executeScript&lt;/code&gt; with &lt;code&gt;world: &apos;MAIN&apos;&lt;/code&gt; in your extension script like the background script or the popup script, but not in the content script.&lt;br&gt;\nSee the &lt;a href=&quot;https://developer.chrome.com/docs/extensions/reference/scripting/&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/search?q=%5Bgoogle-chrome-extension%5D%20chrome.scripting.executeScript%20world%20MAIN%20is%3Aanswer&quot;&gt;examples&lt;/a&gt;.&lt;/p&gt;\n&lt;h2&gt;Dynamic values in the injected code&lt;/h2&gt;\n&lt;p&gt;Occasionally, you need to pass an arbitrary variable to the injected function. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;GREETING&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi, I&apos;m &quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;NAME&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Rob&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; scriptToInject = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;GREETING&lt;/span&gt; + &lt;span class=&quot;hljs-variable constant_&quot;&gt;NAME&lt;/span&gt;);\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To inject this code, you need to pass the variables as arguments to the anonymous function. Be sure to implement it correctly! The following will &lt;strong&gt;not&lt;/strong&gt; work:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; scriptToInject = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;GREETING, NAME&lt;/span&gt;) { ... };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; actualCode = &lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt; + scriptToInject + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)(&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-variable constant_&quot;&gt;GREETING&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-variable constant_&quot;&gt;NAME&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// The previous will work for numbers and booleans, but not strings.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// To see why, have a look at the resulting string:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; actualCode = &lt;span class=&quot;hljs-string&quot;&gt;&quot;(function(GREETING, NAME) {...})(Hi, I&apos;m ,Rob)&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;//                                                 ^^^^^^^^ ^^^ No string literals!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The solution is to use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;JSON.stringify&lt;/code&gt;&lt;/a&gt; before passing the argument. Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; actualCode = &lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;greeting, name&lt;/span&gt;) { ...\n} + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)(&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;GREETING&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;NAME&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you have many variables, it&apos;s worthwhile to use &lt;code&gt;JSON.stringify&lt;/code&gt; once, to improve readability, as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;...\n} + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)(&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;([arg1, arg2, arg3, arg4]) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The only thing &lt;del&gt;missing&lt;/del&gt; hidden from Rob W&apos;s excellent answer is how to communicate between the injected page script and the content script.&lt;/p&gt;\n\n&lt;p&gt;On the receiving side (either your content script or the injected page script) add an event listener:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;yourCustomEvent&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = e.&lt;span class=&quot;hljs-property&quot;&gt;detail&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;received&apos;&lt;/span&gt;, data);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On the initiator side (content script or injected page script) send the event:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;allowedTypes&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;those supported by structured cloning, see the list below&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;inShort&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;no DOM elements or classes/functions&apos;&lt;/span&gt;,\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;dispatchEvent&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CustomEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;yourCustomEvent&apos;&lt;/span&gt;, { &lt;span class=&quot;hljs-attr&quot;&gt;detail&lt;/span&gt;: data }));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notes:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;DOM messaging uses structured cloning algorithm, which can transfer only &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot; rel=&quot;noreferrer&quot;&gt;some types of data&lt;/a&gt; in addition to primitive values. It can&apos;t send class instances or functions or DOM elements.&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In Firefox, to send an object (i.e. not a primitive value) from the content script to the page context you have to explicitly clone it into the target using &lt;code&gt;cloneInto&lt;/code&gt; (a built-in function), otherwise it&apos;ll fail with a security violation error.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;dispatchEvent&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CustomEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;yourCustomEvent&apos;&lt;/span&gt;, {\n  &lt;span class=&quot;hljs-attr&quot;&gt;detail&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;cloneInto&lt;/span&gt;(data, &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;defaultView&lt;/span&gt;),\n}));\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I&apos;ve also faced the problem of ordering of loaded scripts, which was solved through sequential loading of scripts. The loading is based on &lt;a href=&quot;https://stackoverflow.com/a/9517879/1828937&quot;&gt;Rob W&apos;s answer&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;scriptFromFile&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; script = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;script&quot;&lt;/span&gt;);\n    script.&lt;span class=&quot;hljs-property&quot;&gt;src&lt;/span&gt; = chrome.&lt;span class=&quot;hljs-property&quot;&gt;extension&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getURL&lt;/span&gt;(file);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; script;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;scriptFromSource&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;source&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; script = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;script&quot;&lt;/span&gt;);\n    script.&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt; = source;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; script;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;scripts&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (scripts.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; otherScripts = scripts.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; script = scripts[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; onload = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        script.&lt;span class=&quot;hljs-property&quot;&gt;parentNode&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;removeChild&lt;/span&gt;(script);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;inject&lt;/span&gt;(otherScripts);\n    };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (script.&lt;span class=&quot;hljs-property&quot;&gt;src&lt;/span&gt; != &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) {\n        script.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = onload;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;head&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(script);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;head&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(script);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;onload&lt;/span&gt;();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The example of usage would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; formulaImageUrl = chrome.&lt;span class=&quot;hljs-property&quot;&gt;extension&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getURL&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;formula.png&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; codeImageUrl = chrome.&lt;span class=&quot;hljs-property&quot;&gt;extension&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getURL&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;code.png&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;inject&lt;/span&gt;([\n    &lt;span class=&quot;hljs-title function_&quot;&gt;scriptFromSource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;var formulaImageUrl = &apos;&quot;&lt;/span&gt; + formulaImageUrl + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;;&quot;&lt;/span&gt;),\n    &lt;span class=&quot;hljs-title function_&quot;&gt;scriptFromSource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;var codeImageUrl = &apos;&quot;&lt;/span&gt; + codeImageUrl + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;;&quot;&lt;/span&gt;),\n    &lt;span class=&quot;hljs-title function_&quot;&gt;scriptFromFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;EqEditor/eq_editor-lite-17.js&quot;&lt;/span&gt;),\n    &lt;span class=&quot;hljs-title function_&quot;&gt;scriptFromFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;EqEditor/eq_config.js&quot;&lt;/span&gt;),\n    &lt;span class=&quot;hljs-title function_&quot;&gt;scriptFromFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;highlight/highlight.pack.js&quot;&lt;/span&gt;),\n    &lt;span class=&quot;hljs-title function_&quot;&gt;scriptFromFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;injected.js&quot;&lt;/span&gt;)\n]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Actually, I&apos;m kinda new to JS, so feel free to ping me to the better ways.&lt;/p&gt;\n    ","\n&lt;p&gt;in Content script , i add script tag to the head which binds a &apos;onmessage&apos; handler, inside the handler i use , eval to execute code.\nIn booth content script i use onmessage handler as well , so i get two way communication. \n&lt;a href=&quot;https://developer.chrome.com/extensions/content_scripts#host-page-communication&quot; rel=&quot;noreferrer&quot; title=&quot;Official Docs&quot;&gt;Chrome Docs&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Content Script&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pmsgUrl = chrome.&lt;span class=&quot;hljs-property&quot;&gt;extension&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getURL&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;pmListener.js&apos;&lt;/span&gt;);\n$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;head&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;first&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;script src=&apos;&quot;&lt;/span&gt;+pmsgUrl+&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; type=&apos;text/javascript&apos;&amp;gt;&amp;lt;/script&amp;gt;&quot;&lt;/span&gt;);\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Listening to messages from DOM&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;CS :: message in from DOM&apos;&lt;/span&gt;, event);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(event.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;cmdClient&apos;&lt;/span&gt;)) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(event.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmdClient&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title class_&quot;&gt;DoSomthingInContentScript&lt;/span&gt;(obj);\n }\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;pmListener.js is a post message url listener &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//pmListener.js&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Listen to messages from Content Script and Execute Them&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;im in REAL DOM&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (msg.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmnd&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(msg.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmnd&lt;/span&gt;);\n  }\n});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;injected To Real Dom&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way , I can have 2 way communication between CS to Real Dom.\nIts very usefull for example if you need to listen webscoket events ,\nor to any in memory variables or events.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use a utility function I&apos;ve created for the purpose of running code in the page context and getting back the returned value.&lt;/p&gt;\n\n&lt;p&gt;This is done by serializing a function to a string and injecting it to the web page.&lt;/p&gt;\n\n&lt;p&gt;The utility is &lt;a href=&quot;https://github.com/arikw/extension-page-context&quot; rel=&quot;noreferrer&quot;&gt;available here on GitHub&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Usage examples -&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Some code that exists only in the page context -&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;someProperty&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;property&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;res&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;resolved &apos;&lt;/span&gt; + name), &lt;span class=&quot;hljs-number&quot;&gt;1200&lt;/span&gt;));\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;/////////////////&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Content script examples -&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;runInPageContext&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; someProperty); &lt;span class=&quot;hljs-comment&quot;&gt;// returns &apos;property&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;runInPageContext&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someFunction&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// returns &apos;resolved test&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;runInPageContext&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (name) =&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someFunction&lt;/span&gt;(name), &lt;span class=&quot;hljs-string&quot;&gt;&apos;with name&apos;&lt;/span&gt; ); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;resolved with name&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;runInPageContext&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (...args) =&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someFunction&lt;/span&gt;(...args), &lt;span class=&quot;hljs-string&quot;&gt;&apos;with spread operator and rest parameters&apos;&lt;/span&gt; ); &lt;span class=&quot;hljs-comment&quot;&gt;// returns &apos;resolved with spread operator and rest parameters&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;runInPageContext&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;func&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someFunction&lt;/span&gt;(name),\n    &lt;span class=&quot;hljs-attr&quot;&gt;args&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;with params object&apos;&lt;/span&gt;],\n    &lt;span class=&quot;hljs-attr&quot;&gt;doc&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;timeout&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;\n} ); &lt;span class=&quot;hljs-comment&quot;&gt;// returns &apos;resolved with params object&apos;&lt;/span&gt;\n\n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you wish to inject pure function, instead of text, you can use this method:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;function inject(){\n    document.body.style.backgroundColor = &apos;blue&apos;;\n}\n\n// this includes the function as text and the barentheses make it run itself.\nvar actualCode = &quot;(&quot;+inject+&quot;)()&quot;; \n\ndocument.documentElement.setAttribute(&apos;onreset&apos;, actualCode);\ndocument.documentElement.dispatchEvent(new CustomEvent(&apos;reset&apos;));\ndocument.documentElement.removeAttribute(&apos;onreset&apos;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;And you can pass parameters (unfortunatelly no objects and arrays can be stringifyed) to the functions. Add it into the baretheses, like so:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;function inject(color){\n    document.body.style.backgroundColor = color;\n}\n\n// this includes the function as text and the barentheses make it run itself.\nvar color = &apos;yellow&apos;;\nvar actualCode = &quot;(&quot;+inject+&quot;)(&quot;+color+&quot;)&quot;; &lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;try to remove the quotes around your function name: &lt;code&gt;player.addEventListener(&quot;onStateChange&quot;, state);&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/272031/eduardo&quot; title=&quot;22,113 reputation&quot; class=&quot;comment-user&quot;&gt;Eduardo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment12059025_9515704&quot;&gt;&lt;span title=&quot;2012-03-01 17:13:50Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 1, 2012 at 17:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It is also notable that when writing matches, do not forget to include &lt;code&gt;https://&lt;/code&gt; or &lt;code&gt;http://&lt;/code&gt;,  this &lt;code&gt;www.youtube.com/*&lt;/code&gt; would not let you pack extension and would throw &lt;a href=&quot;https://developer.chrome.com/extensions/match_patterns&quot; rel=&quot;nofollow noreferrer&quot;&gt;Missing scheme separator error&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3331861/nilay-vishwakarma&quot; title=&quot;2,779 reputation&quot; class=&quot;comment-user&quot;&gt;Nilay Vishwakarma&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment71110743_9515704&quot;&gt;&lt;span title=&quot;2017-01-31 19:34:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 31, 2017 at 19:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also see &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=478183&quot; rel=&quot;nofollow noreferrer&quot;&gt;bugs.chromium.org/p/chromium/issues/detail?id=478183&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/632951/pacerier&quot; title=&quot;81,802 reputation&quot; class=&quot;comment-user&quot;&gt;Pacerier&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77214686_9515704&quot;&gt;&lt;span title=&quot;2017-07-15 19:21:12Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 15, 2017 at 19:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer should be part of official docs. Official docs should ship with recommended way --&amp;gt; 3 ways to do the same thing... Wrong?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/775359/mars-robertson&quot; title=&quot;12,043 reputation&quot; class=&quot;comment-user&quot;&gt;Mars Robertson&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment24578289_9517879&quot;&gt;&lt;span title=&quot;2013-06-09 11:17:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 9, 2013 at 11:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Usually method 1 is better wherever possible, due to Chrome&apos;s CSP (content security policy) restrictions for some extensions.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2074608/qantas-94-heavy&quot; title=&quot;15,421 reputation&quot; class=&quot;comment-user&quot;&gt;Qantas 94 Heavy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment26334531_9517879&quot;&gt;&lt;span title=&quot;2013-08-02 02:33:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 2, 2013 at 2:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Qantas94Heavy The extension&apos;s CSP does &lt;b&gt;not&lt;/b&gt; affect content scripts. Only the &lt;b&gt;page&apos;s CSP&lt;/b&gt; is relevant. Method 1 can be blocked by using a &lt;code&gt;script-src&lt;/code&gt; directive that excludes the extension&apos;s origin, method 2 can be blocked by using a CSP that excludes &quot;unsafe-inline&quot;`.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/938089/rob-w&quot; title=&quot;329,596 reputation&quot; class=&quot;comment-user&quot;&gt;Rob W&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment26339626_9517879&quot;&gt;&lt;span title=&quot;2013-08-02 07:24:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 2, 2013 at 7:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Someone asked why I remove the script tag using &lt;code&gt;script.parentNode.removeChild(script);&lt;/code&gt;. My reason for doing it is because I like to clean up my mess. When an inline script is inserted in the document, it&apos;s immediately executed and the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag can safely be removed.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/938089/rob-w&quot; title=&quot;329,596 reputation&quot; class=&quot;comment-user&quot;&gt;Rob W&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment27220464_9517879&quot;&gt;&lt;span title=&quot;2013-08-29 13:35:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 29, 2013 at 13:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Other method: use &lt;code&gt;location.href = &quot;javascript: alert(&apos;yeah&apos;)&quot;;&lt;/code&gt; anywhere in your content script. It&apos;s easier for short snippets of code, and can also access the page&apos;s JS objects.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2698119/m%c3%a9toule&quot; title=&quot;11,129 reputation&quot; class=&quot;comment-user&quot;&gt;Métoule&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment28134980_9517879&quot;&gt;&lt;span title=&quot;2013-09-26 21:08:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 26, 2013 at 21:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;ve actually linked to the code and explanation at the second line of my answer, to &lt;a href=&quot;http://stackoverflow.com/questions/9602022/chrome-extension-retrieving-gmails-original-message&quot; title=&quot;chrome extension retrieving gmails original message&quot;&gt;stackoverflow.com/questions/9602022/&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/938089/rob-w&quot; title=&quot;329,596 reputation&quot; class=&quot;comment-user&quot;&gt;Rob W&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment28606064_19312198&quot;&gt;&lt;span title=&quot;2013-10-11 09:00:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 11, 2013 at 9:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Do you have a reference for your updated method (e.g. a bug report or a test case?) The &lt;code&gt;CustomEvent&lt;/code&gt; constructor supersedes the deprecated &lt;code&gt;document.createEvent&lt;/code&gt; API.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/938089/rob-w&quot; title=&quot;329,596 reputation&quot; class=&quot;comment-user&quot;&gt;Rob W&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29464574_19312198&quot;&gt;&lt;span title=&quot;2013-11-06 16:23:55Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 6, 2013 at 16:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For me &apos;dispatchEvent(new CustomEvent...&apos; worked. I have Chrome 33. Also it didn&apos;t work before because I wrote the addEventListener after injecting the js code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2359536/jscripter&quot; title=&quot;810 reputation&quot; class=&quot;comment-user&quot;&gt;jscripter&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment33874800_19312198&quot;&gt;&lt;span title=&quot;2014-03-10 09:15:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 10, 2014 at 9:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 4 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I think the official way is to use window.postMessage: &lt;a href=&quot;https://developer.chrome.com/extensions/content_scripts#host-page-communication&quot; rel=&quot;nofollow noreferrer&quot;&gt;developer.chrome.com/extensions/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/420803/enrique&quot; title=&quot;4,415 reputation&quot; class=&quot;comment-user&quot;&gt;Enrique&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94436100_19312198&quot;&gt;&lt;span title=&quot;2018-12-15 13:08:06Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 15, 2018 at 13:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;how to send response back from content script to initiator script&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6125259/vinay&quot; title=&quot;363 reputation&quot; class=&quot;comment-user&quot;&gt;Vinay&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102316896_19312198&quot;&gt;&lt;span title=&quot;2019-09-16 07:41:02Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 16, 2019 at 7:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This way of inserting scripts is not nice, because you&apos;re polluting the namespace of the web page. If the web page uses a variable called &lt;code&gt;formulaImageUrl&lt;/code&gt; or &lt;code&gt;codeImageUrl&lt;/code&gt;, then you&apos;re effectively destroying the functionality of the page. If you want to pass a variable to the web page, I suggest to attach the data to the script element (&lt;code&gt;e.g. script.dataset.formulaImageUrl = formulaImageUrl;&lt;/code&gt;) and use e.g. &lt;code&gt;(function() { var dataset = document.currentScript.dataset; alert(dataset.formulaImageUrl;) })();&lt;/code&gt; in the script to access the data.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/938089/rob-w&quot; title=&quot;329,596 reputation&quot; class=&quot;comment-user&quot;&gt;Rob W&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48676557_30289669&quot;&gt;&lt;span title=&quot;2015-05-17 17:27:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 17, 2015 at 17:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@RobW thank you for your note, although it&apos;s more about the sample. Can you please clarify, why I should use IIFE instead of just getting &lt;code&gt;dataset&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1828937/dmitry-ginzburg&quot; title=&quot;7,221 reputation&quot; class=&quot;comment-user&quot;&gt;Dmitry Ginzburg&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48676733_30289669&quot;&gt;&lt;span title=&quot;2015-05-17 17:36:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 17, 2015 at 17:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;document.currentScript&lt;/code&gt;&lt;/a&gt; only points to the script tag while it is executing. If you ever want to access the script tag and/or its attributes/properties (e.g. &lt;code&gt;dataset&lt;/code&gt;), then you need to store it in a variable. We need an IIFE to get a closure to store this variable without polluting the global namespace.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/938089/rob-w&quot; title=&quot;329,596 reputation&quot; class=&quot;comment-user&quot;&gt;Rob W&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48676778_30289669&quot;&gt;&lt;span title=&quot;2015-05-17 17:38:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 17, 2015 at 17:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@RobW excellent! But can&apos;t we just use some variable name, which would hardly intersect with the existing. Is it just non-idiomatic or we can have some other problems with it?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1828937/dmitry-ginzburg&quot; title=&quot;7,221 reputation&quot; class=&quot;comment-user&quot;&gt;Dmitry Ginzburg&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48677053_30289669&quot;&gt;&lt;span title=&quot;2015-05-17 17:51:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 17, 2015 at 17:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You could, but the cost of using an IIFE is negligible, so I don&apos;t see a reason to prefer namespace pollution over an IIFE. I value the certainly that I won&apos;t break the web page &lt;i&gt;of others&lt;/i&gt; in some way, and the ability to use short variable names. Another advantage of using an IIFE is that you can exit the script earlier if wanted (&lt;code&gt;return;&lt;/code&gt;).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/938089/rob-w&quot; title=&quot;329,596 reputation&quot; class=&quot;comment-user&quot;&gt;Rob W&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48677203_30289669&quot;&gt;&lt;span title=&quot;2015-05-17 17:58:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 17, 2015 at 17:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is pretty cool...but the second version, with a variable for color, does not work for me...I get &apos;unrecognized&apos; and the code throws an error...does not see it as a variable.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2766480/11teenth&quot; title=&quot;1,525 reputation&quot; class=&quot;comment-user&quot;&gt;11teenth&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90651192_49671193&quot;&gt;&lt;span title=&quot;2018-08-14 20:02:47Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 14, 2018 at 20:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The first example works like a charm. Thank you very much for this answer. This works even when inline-script is restricted and you sir have my respect.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11375002/john-yepthomi&quot; title=&quot;234 reputation&quot; class=&quot;comment-user&quot;&gt;John Yepthomi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment123423041_49671193&quot;&gt;&lt;span title=&quot;2021-11-03 10:49:04Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 3, 2021 at 10:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Great workaround that does not require passing messages back and forth.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1178971/forgetso&quot; title=&quot;1,922 reputation&quot; class=&quot;comment-user&quot;&gt;forgetso&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124679560_49671193&quot;&gt;&lt;span title=&quot;2021-12-30 13:31:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 30, 2021 at 13:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":168,"title":"Use a content script to access the page context variables and functions","content":"\n                \n&lt;p&gt;I&apos;m learning how to create Chrome extensions. I just started developing one to catch YouTube events. I want to use it with YouTube flash player (later I will try to make it compatible with HTML5).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;manifest.json:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;MyExtension&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Gotta catch Youtube events!&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;permissions&quot;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&quot;tabs&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://*/*&quot;&lt;/span&gt;],\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;content_scripts&quot;&lt;/span&gt; : [{\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;matches&quot;&lt;/span&gt; : [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;www.youtube.com/*&quot;&lt;/span&gt;],\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;js&quot;&lt;/span&gt; : [&lt;span class=&quot;hljs-string&quot;&gt;&quot;myScript.js&quot;&lt;/span&gt;]\n    }]\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;myScript.js:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;state&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;State Changed!&quot;&lt;/span&gt;); }\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; player = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;movie_player&quot;&lt;/span&gt;);\nplayer.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;onStateChange&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Started!&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The problem is that the console gives me the &lt;em&gt;&quot;Started!&quot;&lt;/em&gt;, but there is no &lt;em&gt;&quot;State Changed!&quot;&lt;/em&gt; when I play/pause YouTube videos.&lt;/p&gt;\n\n&lt;p&gt;When this code is put in the console, it worked. What am I doing wrong?&lt;/p&gt;\n    ","slug":"use-a-content-script-to-access-the-page-context-variables-and-functions-1657384842444","postType":"QUESTION","createdAt":"2022-07-09T16:40:42.000Z","updatedAt":"2022-07-09T16:40:42.000Z","tags":[{"id":617,"name":"google-chrome-extension","slug":"google-chrome-extension","createdAt":"2022-07-09T16:40:42.000Z","updatedAt":"2022-07-09T16:40:42.000Z","Questions_Tags":{"questionId":168,"tagId":617}},{"id":619,"name":"youtube-api","slug":"youtube-api","createdAt":"2022-07-09T16:40:42.000Z","updatedAt":"2022-07-09T16:40:42.000Z","Questions_Tags":{"questionId":168,"tagId":619}},{"id":620,"name":"content-script","slug":"content-script","createdAt":"2022-07-09T16:40:42.000Z","updatedAt":"2022-07-09T16:40:42.000Z","Questions_Tags":{"questionId":168,"tagId":620}}]}},"__N_SSG":true}