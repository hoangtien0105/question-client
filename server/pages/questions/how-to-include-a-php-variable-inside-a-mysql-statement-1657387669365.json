{"pageProps":{"data":{"answer":["\n&lt;p&gt;The rules of adding a PHP variable inside of any MySQL statement are plain and simple:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Any variable that represents an &lt;em&gt;SQL data literal&lt;/em&gt;, (or, to put it simply - an SQL string, or a number) MUST be added through a prepared statement. No exceptions.&lt;/li&gt;\n&lt;li&gt;Any other query part, such as an SQL keyword, a table or a field name, or an operator - must be filtered through a &lt;strong&gt;white list&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;So as your example only involves data literals, then all variables must be added through placeholders (also called parameters). To do so:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;In your SQL statement, replace all variables with &lt;em&gt;placeholders&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;prepare&lt;/em&gt; the resulting query&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;bind&lt;/em&gt; variables to placeholders&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;execute&lt;/em&gt; the query&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;And here is how to do it with all popular PHP database drivers:&lt;/p&gt;\n&lt;h3&gt;Adding data literals using mysql ext&lt;/h3&gt;\n&lt;p&gt;Such a driver &lt;a href=&quot;https://www.php.net/manual/en/function.mysql-query.php&quot; rel=&quot;noreferrer&quot;&gt;doesn&apos;t exist&lt;/a&gt;.&lt;/p&gt;\n&lt;h3&gt;Adding data literals using &lt;code&gt;mysqli&lt;/code&gt;&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;testing&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$reporter&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;John O&apos;Hara&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO contents (type, reporter, description) \n             VALUES(?, ?, &apos;whatever&apos;)&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;prepare(&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;bind_param(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ss&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$reporter&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;execute();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The code is a bit complicated but the detailed explanation of all these operators can be found in my article, &lt;a href=&quot;https://phpdelusions.net/mysqli_examples/insert&quot; rel=&quot;noreferrer&quot;&gt;How to run an INSERT query using Mysqli&lt;/a&gt;, as well as a solution that eases the process dramatically.&lt;/p&gt;\n&lt;p&gt;For a SELECT query you will need to add just a call to &lt;code&gt;get_result()&lt;/code&gt; method to get a familiar &lt;code&gt;mysqli_result&lt;/code&gt; from which you can fetch the data the usual way:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;$reporter = &lt;span class=&quot;hljs-string&quot;&gt;&quot;John O&apos;Hara&quot;&lt;/span&gt;;\n$stmt = $mysqli-&amp;gt;prepare(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM users WHERE name=?&quot;&lt;/span&gt;);\n$stmt-&amp;gt;bind_param(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;, $reporter);\n$stmt-&amp;gt;execute();\n$result = $stmt-&amp;gt;get_result();\n$row = $result-&amp;gt;fetch_assoc(); &lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (...)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Adding data literals using PDO&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;testing&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$reporter&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;John O&apos;Hara&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO contents (type, reporter, description) \n             VALUES(?, ?, &apos;whatever&apos;)&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;prepare(&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;execute([&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$reporter&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In PDO, we can have the bind and execute parts combined, which is very convenient. PDO also supports named placeholders which some find extremely convenient.&lt;/p&gt;\n&lt;h3&gt;Adding keywords or identifiers&lt;/h3&gt;\n&lt;p&gt;Sometimes we have to add a variable that represents another part of a query, such as a keyword or an identifier (a database, table or a field name). It&apos;s a rare case but it&apos;s better to be prepared.&lt;/p&gt;\n&lt;p&gt;In this case, your variable must be checked against a list of values &lt;strong&gt;explicitly&lt;/strong&gt; written in your script. This is explained in my other article, &lt;a href=&quot;https://phpdelusions.net/pdo_examples/order_by&quot; rel=&quot;noreferrer&quot;&gt;Adding a field name in the ORDER BY clause based on the user&apos;s choice&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Unfortunately, PDO has no placeholder for identifiers (table and field names), therefore a developer must filter them out manually. Such a filter is often called a &quot;white list&quot; (where we only list allowed values) as opposed to a &quot;black-list&quot; where we list disallowed values.&lt;/p&gt;\n&lt;p&gt;So we have to explicitly list all possible variants in the PHP code and then choose from them.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Here is an example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$orderby&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;orderby&apos;&lt;/span&gt;] ?: &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// set the default value&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$allowed&lt;/span&gt; = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;qty&quot;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// the white list of allowed field names&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_search&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$orderby&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$allowed&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// see if we have such a name&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) { \n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;InvalidArgumentException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid field name&quot;&lt;/span&gt;); \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Exactly the same approach should be used for the direction,&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$direction&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;direction&apos;&lt;/span&gt;] ?: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ASC&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$allowed&lt;/span&gt; = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;ASC&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;DESC&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_search&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$direction&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$allowed&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) { \n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;InvalidArgumentException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid ORDER BY direction&quot;&lt;/span&gt;); \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;After such a code, both &lt;code&gt;$direction&lt;/code&gt; and &lt;code&gt;$orderby&lt;/code&gt; variables can be safely put in the SQL query, as they are either equal to one of the allowed variants or there will be an error thrown.&lt;/p&gt;\n&lt;p&gt;The last thing to mention about identifiers, they must be also formatted according to the particular database syntax. For MySQL it should be &lt;code&gt;backtick&lt;/code&gt; characters around the identifier. So the final query string for our order by example would be&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM `table` ORDER BY `&lt;span class=&quot;hljs-variable&quot;&gt;$orderby&lt;/span&gt;` &lt;span class=&quot;hljs-variable&quot;&gt;$direction&lt;/span&gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To avoid SQL injection the insert statement with be&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;testing&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;john&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$description&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;whatever&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$con&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$pass&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$con&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO contents (type, reporter, description) VALUES (?, ?, ?)&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;bind_param&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sss&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt; , &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$description&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;The best option is prepared statements.&lt;/strong&gt; Messing around with quotes and escapes is harder work to begin with, and difficult to maintain. Sooner or later you will end up accidentally forgetting to quote something or end up escaping the same string twice, or mess up something like that. Might be years before you find those type of bugs.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/pdo.prepared-statements.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://php.net/manual/en/pdo.prepared-statements.php&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The text inside $type is substituted directly into the insert string, therefore MySQL gets this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;VALUES(testing, &lt;span class=&quot;hljs-string&quot;&gt;&apos;john&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;whatever&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice that there are no quotes around testing, you need to put these in like so:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;testing&apos;&lt;/span&gt;;\nmysql_query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO contents (type, reporter, description) VALUES(&apos;&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;&apos;, &apos;john&apos;, &apos;whatever&apos;)&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I also recommend you read up on &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_injection&quot; rel=&quot;nofollow&quot;&gt;SQL injection&lt;/a&gt;, as this sort of parameter passing is prone to hacking attempts if you do not sanitize the data being used:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://www.tizag.com/mysqlTutorial/mysql-php-sql-injection.php&quot; rel=&quot;nofollow&quot;&gt;MySQL - SQL Injection Prevention&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;That&apos;s the easy answer:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM CountryInfo WHERE Name = &apos;&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and you define &lt;code&gt;$name&lt;/code&gt; whatever you want.&lt;br&gt;\nAnd another way, the complex way, is like that:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-erlang&quot;&gt;$&lt;span class=&quot;hljs-keyword&quot;&gt;query&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot; SELECT &apos;&quot;&lt;/span&gt; . $GLOBALS[&apos;Name&apos;] . &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; .* &quot;&lt;/span&gt; .\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot; FROM CountryInfo &quot;&lt;/span&gt; .\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot; INNER JOIN District &quot;&lt;/span&gt; .\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot; ON District.CountryInfoId = CountryInfo.CountryInfoId &quot;&lt;/span&gt; .\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot; INNER JOIN City &quot;&lt;/span&gt; .\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot; ON City.DistrictId = District.DistrictId &quot;&lt;/span&gt; .\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot; INNER JOIN &apos;&quot;&lt;/span&gt; . $GLOBALS[&apos;Name&apos;] . &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; &quot;&lt;/span&gt; .\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot; ON &apos;&quot;&lt;/span&gt; . $GLOBALS[&apos;Name&apos;] . &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;.CityId = City.CityId &quot;&lt;/span&gt; .\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot; WHERE CountryInfo.Name = &apos;&quot;&lt;/span&gt; . $GLOBALS[&apos;CountryName&apos;] .\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":334,"title":"How to include a PHP variable inside a MySQL statement","content":"\n                \n&lt;p&gt;I&apos;m trying to insert values in the contents table. It works fine if I do not have a PHP variable inside VALUES. When I put the variable &lt;code&gt;$type&lt;/code&gt; inside &lt;code&gt;VALUES&lt;/code&gt; then this doesn&apos;t work. What am I doing wrong?&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;testing&apos;&lt;/span&gt;;\nmysql_query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO contents (type, reporter, description) \n     VALUES(&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;, &apos;john&apos;, &apos;whatever&apos;)&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"how-to-include-a-php-variable-inside-a-mysql-statement-1657387669365","postType":"QUESTION","createdAt":"2022-07-09T17:27:49.000Z","updatedAt":"2022-07-09T17:27:49.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"What is a StackOverflowError?","slug":"what-is-a-stackoverflowerror-1657388319634"},{"title":"How can I convert ereg expressions to preg in PHP?","slug":"how-can-i-convert-ereg-expressions-to-preg-in-php-1657387652855"},{"title":"Pandas Merging 101","slug":"pandas-merging-101-1657384447080"},{"title":"What does if __name__ == \"__main__\": do?","slug":"what-does-if-__name__-\"__main__\":-do-1657384825815"},{"title":"Sorting object property by values","slug":"sorting-object-property-by-values-1657388367300"},{"title":"How to include a PHP variable inside a MySQL statement","slug":"how-to-include-a-php-variable-inside-a-mysql-statement-1657387669365"},{"title":"What is the difference between \"px\", \"dip\", \"dp\" and \"sp\"?","slug":"what-is-the-difference-between-\"px\"-\"dip\"-\"dp\"-and-\"sp\"-1657388093250"},{"title":"Generating random whole numbers in JavaScript in a specific range","slug":"generating-random-whole-numbers-in-javascript-in-a-specific-range-1657388112728"},{"title":"Convert columns into rows with Pandas","slug":"convert-columns-into-rows-with-pandas-1657388374964"},{"title":"JQuery - $ is not defined","slug":"jquery-dollar-is-not-defined-1657388385731"},{"title":"How do I correctly clone a JavaScript object?","slug":"how-do-i-correctly-clone-a-javascript-object-1657387325850"},{"title":"How do I redirect to another webpage?","slug":"how-do-i-redirect-to-another-webpage-1657384869767"},{"title":"Removing trailing newline character from fgets() input","slug":"removing-trailing-newline-character-from-fgets()-input-1657387308069"},{"title":"Why does Spring MVC respond with a 404 and report \"No mapping found for HTTP request with URI [...] in DispatcherServlet\"?","slug":"why-does-spring-mvc-respond-with-a-404-and-report-\"no-mapping-found-for-http-request-with-uri-...-in-dispatcherservlet\"-1657387995250"},{"title":"Transpose / reshape dataframe without \"timevar\" from long to wide format","slug":"transpose-reshape-dataframe-without-\"timevar\"-from-long-to-wide-format-1657388213347"},{"title":"Test for existence of nested JavaScript object key","slug":"test-for-existence-of-nested-javascript-object-key-1657387935411"},{"title":"Selenium \"selenium.common.exceptions.NoSuchElementException\" when using Chrome","slug":"selenium-\"selenium.common.exceptions.nosuchelementexception\"-when-using-chrome-1657388136699"},{"title":"Flexbox: center horizontally and vertically","slug":"flexbox:-center-horizontally-and-vertically-1657384587888"},{"title":"Get all unique values in a JavaScript array (remove duplicates)","slug":"get-all-unique-values-in-a-javascript-array-(remove-duplicates)-1657387435296"},{"title":"Can you provide some examples of why it is hard to parse XML and HTML with a regex? [closed]","slug":"can-you-provide-some-examples-of-why-it-is-hard-to-parse-xml-and-html-with-a-regex-closed-1657388410824"}]},"__N_SSG":true}