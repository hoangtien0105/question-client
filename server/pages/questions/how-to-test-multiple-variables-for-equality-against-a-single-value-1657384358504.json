{"pageProps":{"data":{"answer":["\n&lt;p&gt;You misunderstand how boolean expressions work; they don&apos;t work like an English sentence and guess that you are talking about the same comparison for all names here. You are looking for:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are otherwise evaluated on their own (&lt;code&gt;False&lt;/code&gt; if &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt; otherwise).&lt;/p&gt;\n&lt;p&gt;You can shorten that using a containment test against &lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences&quot; rel=&quot;noreferrer&quot;&gt;a tuple&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z):\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or better still:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;using &lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#sets&quot; rel=&quot;noreferrer&quot;&gt;a &lt;code&gt;set&lt;/code&gt;&lt;/a&gt; to take advantage of the constant-cost membership test (i.e. &lt;code&gt;in&lt;/code&gt; takes a fixed amount of time whatever the left-hand operand is).&lt;/p&gt;\n&lt;h3&gt;Explanation&lt;/h3&gt;\n&lt;p&gt;When you use &lt;code&gt;or&lt;/code&gt;, python sees each side of the operator as &lt;em&gt;separate&lt;/em&gt; expressions. The expression &lt;code&gt;x or y == 1&lt;/code&gt; is treated as first a boolean test for &lt;code&gt;x&lt;/code&gt;, then if that is False, the expression &lt;code&gt;y == 1&lt;/code&gt; is tested.&lt;/p&gt;\n&lt;p&gt;This is due to &lt;a href=&quot;http://docs.python.org/3/reference/expressions.html#operator-precedence&quot; rel=&quot;noreferrer&quot;&gt;operator precedence&lt;/a&gt;. The &lt;code&gt;or&lt;/code&gt; operator has a lower precedence than the &lt;code&gt;==&lt;/code&gt; test, so the latter is evaluated &lt;em&gt;first&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;However, even if this were &lt;em&gt;not&lt;/em&gt; the case, and the expression &lt;code&gt;x or y or z == 1&lt;/code&gt; was actually interpreted as &lt;code&gt;(x or y or z) == 1&lt;/code&gt; instead, this would still not do what you expect it to do.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;x or y or z&lt;/code&gt; would evaluate to the first argument that is &apos;truthy&apos;, e.g. not &lt;code&gt;False&lt;/code&gt;, numeric 0 or empty (see &lt;a href=&quot;http://docs.python.org/3/reference/expressions.html#boolean-operations&quot; rel=&quot;noreferrer&quot;&gt;boolean expressions&lt;/a&gt; for details on what Python considers false in a boolean context).&lt;/p&gt;\n&lt;p&gt;So for the values &lt;code&gt;x = 2; y = 1; z = 0&lt;/code&gt;, &lt;code&gt;x or y or z&lt;/code&gt; would resolve to &lt;code&gt;2&lt;/code&gt;, because that is the first true-like value in the arguments. Then &lt;code&gt;2 == 1&lt;/code&gt; would be &lt;code&gt;False&lt;/code&gt;, even though &lt;code&gt;y == 1&lt;/code&gt; would be &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The same would apply to the inverse; testing multiple values against a single variable; &lt;code&gt;x == 1 or 2 or 3&lt;/code&gt; would fail for the same reasons. Use &lt;code&gt;x == 1 or x == 2 or x == 3&lt;/code&gt; or &lt;code&gt;x in {1, 2, 3}&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Your problem is more easily addressed with a dictionary structure like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ny = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;}\nmylist = [d[k] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [x, y, z]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As stated by Martijn Pieters, the correct, and fastest, format is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}:\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using his advice you would now have separate if-statements so that Python will read each statement whether the former were &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Such as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}:\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}:\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}:\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;)\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will work, but &lt;em&gt;if&lt;/em&gt; you are comfortable using dictionaries (see what I did there), you can clean this up by making an initial dictionary mapping the numbers to the letters you want, then just using a for-loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;num_to_letters = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; number &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; num_to_letters:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; number &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}:\n        mylist.append(num_to_letters[number])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The direct way to write &lt;code&gt;x or y or z == 0&lt;/code&gt; is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;((&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; value: value == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (x,y,z))):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# write your logic.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But I dont think, you like it. :)\nAnd this way is ugly.&lt;/p&gt;\n\n&lt;p&gt;The other way (a better) is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;BTW lots of &lt;code&gt;if&lt;/code&gt;s could be written as something like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_cases = {\n    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: Mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;),\n    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: Mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-comment&quot;&gt;# ..&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_cases:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z):\n        my_cases[key]()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you ARE very very lazy, you can put the values inside an array. Such as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = []\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(x)\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(y)\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(z)\nnums = [add numbers here]\nletters = [add corresponding letters here]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; index &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(nums)):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; obj &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; obj == num[index]:\n            MyList.append(letters[index])\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also put the numbers and letters in a dictionary and do it, but this is probably a LOT more complicated than simply if statements. That&apos;s what you get for trying to be extra lazy :)&lt;/p&gt;\n\n&lt;p&gt;One more thing, your &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will compile, but not in the way you want it to. When you simply put a variable in an if statement (example)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the program will check if the variable is not null. Another way to write the above statement (which makes more sense) is &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(b)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Bool is an inbuilt function in python which basically does the command of verifying a boolean statement (If you don&apos;t know what that is, it is what you are trying to make in your if statement right now :))&lt;/p&gt;\n\n&lt;p&gt;Another lazy way I found is :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;([x==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, y==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, z==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To check if a value is contained within a set of variables you can use the inbuilt modules           &lt;code&gt;itertools&lt;/code&gt; and &lt;code&gt;operator&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;p&gt;Imports:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; repeat\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; contains\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Declare variables:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ny = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Create mapping of values (in the order you want to check):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;check_values = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use &lt;code&gt;itertools&lt;/code&gt; to allow repetition of the variables:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;check_vars = repeat((x, y, z))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Finally, use the &lt;code&gt;map&lt;/code&gt; function to create an iterator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;checker = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(contains, check_vars, check_values)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, when checking for the values (in the original order), use &lt;code&gt;next()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(checker)  &lt;span class=&quot;hljs-comment&quot;&gt;# Checks for 0&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Do something&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(checker)  &lt;span class=&quot;hljs-comment&quot;&gt;# Checks for 1&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Do something&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;etc...&lt;/p&gt;\n\n&lt;p&gt;This has an advantage over the &lt;code&gt;lambda x: x in (variables)&lt;/code&gt; because &lt;code&gt;operator&lt;/code&gt; is an inbuilt module and is faster and more efficient than using &lt;code&gt;lambda&lt;/code&gt; which has to create a custom in-place function.&lt;/p&gt;\n\n&lt;p&gt;Another option for checking if there is a non-zero (or False) value in a list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; (x &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; z)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Equivalent:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;((x, y, z))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Set is the good approach here, because it orders the variables, what seems to be your goal here. &lt;code&gt;{z,y,x}&lt;/code&gt; is &lt;code&gt;{0,1,3}&lt;/code&gt; whatever the order of the parameters.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;cdef&quot;&lt;/span&gt;[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {z,x,y}]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way, the whole solution is O(n).&lt;/p&gt;\n    ","\n&lt;p&gt;I think this will handle it better:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_dict = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;validate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y, z&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ele &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [x, y, z]:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ele &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_dict.keys():\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; my_dict[ele]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; validate(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)\nc\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; validate(&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)\n&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; validate(&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\ne\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to use if, else statements following is another solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;myList = []\naList = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; l &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; aList:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; l==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; l==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; l==&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; l==&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(myList)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;All of the excellent answers provided here concentrate on the specific requirement of the original poster and concentrate on the &lt;code&gt;if 1 in {x,y,z}&lt;/code&gt; solution put forward by Martijn Pieters.&lt;br&gt;\nWhat they ignore is the broader implication of the question:&lt;br&gt;\n&lt;strong&gt;How do I test one variable against multiple values?&lt;/strong&gt;&lt;br&gt;\nThe solution provided will not work for partial hits if using strings for example:&lt;br&gt;\nTest if the string &quot;Wild&quot; is in multiple values&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wild things&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y = &lt;span class=&quot;hljs-string&quot;&gt;&quot;throttle it back&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;z = &lt;span class=&quot;hljs-string&quot;&gt;&quot;in the beginning&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wild&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wild things&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y = &lt;span class=&quot;hljs-string&quot;&gt;&quot;throttle it back&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;z = &lt;span class=&quot;hljs-string&quot;&gt;&quot;in the beginning&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wild&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [x, y, z]: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;for this scenario it&apos;s easiest to convert to a string&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[x, y, z]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Wild things&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;throttle it back&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;in the beginning&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;{x, y, z}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;in the beginning&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;throttle it back&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Wild things&apos;&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wild&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;([x, y, z]): &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wild&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;({x, y, z}): &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It should be noted however, as mentioned by &lt;code&gt;@codeforester&lt;/code&gt;, that word boundries are lost with this method, as in:    &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Wild things&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;throttle it back&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;in the beginning&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;rot&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(x): &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the 3 letters &lt;code&gt;rot&lt;/code&gt; do exist in combination in the list but not as an individual word. Testing for &quot; rot &quot; would fail but if one of the list items were &quot;rot in hell&quot;, that would fail as well.&lt;br&gt;\nThe upshot being, be careful with your search criteria if using this method and be aware that it does have this limitation.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;}\nx, y, z = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; [v &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (k,v) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x==k &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y==k &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z==k]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This code may be helpful&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;L ={x, y, z}\nT= ((&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;),)\nList2=[]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; T :\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; t[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L :\n    List2.append(t[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can try the method shown below. In this method, you will have the freedom to specify/input the number of variables that you wish to enter.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mydict = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;}\nmylist= []\n\nnum_var = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(raw_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;How many variables? &quot;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;#Enter 3 when asked for input.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(num_var): \n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos; Enter 0 as first input, 1 as second input and 3 as third input.&apos;&apos;&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;var&apos;&lt;/span&gt;+&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;).zfill(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)] = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(raw_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter an integer between 0 and 3 &quot;&lt;/span&gt;))\n    mylist += mydict[&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;var&apos;&lt;/span&gt;+&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;).zfill(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)]]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; mylist\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One line solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mylist = [{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;}[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mylist = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;cdef&apos;&lt;/span&gt;[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Maybe you need direct formula for output bits set.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; equivalent to x*y*z = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\nx=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; equivalent to (x-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)*(y-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)*(z-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\nx=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; equivalent to (x-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)*(y-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)*(z-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&apos;s map to bits: &lt;code&gt;&apos;c&apos;:1 &apos;d&apos;:0xb10 &apos;e&apos;:0xb100 &apos;f&apos;:0xb1000&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Relation of isc (is &apos;c&apos;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; xyz=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; then isc=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; isc=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use math if formula &lt;a href=&quot;https://youtu.be/KAdKCgBGK0k?list=PLnI9xbPdZUAmUL8htSl6vToPQRRN3hhFp&amp;amp;t=315&quot; rel=&quot;noreferrer&quot;&gt;https://youtu.be/KAdKCgBGK0k?list=PLnI9xbPdZUAmUL8htSl6vToPQRRN3hhFp&amp;amp;t=315&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;[c]: &lt;code&gt;(xyz=0 and isc=1) or (((xyz=0 and isc=1) or (isc=0)) and (isc=0))&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;[d]: &lt;code&gt;((x-1)(y-1)(z-1)=0 and isc=2) or (((xyz=0 and isd=2) or (isc=0)) and (isc=0))&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;...&lt;/p&gt;\n\n&lt;p&gt;Connect these formulas by following logic:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;logic &lt;code&gt;and&lt;/code&gt; is the sum of squares of equations&lt;/li&gt;\n&lt;li&gt;logic &lt;code&gt;or&lt;/code&gt; is the product of equations&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;and you&apos;ll have a total equation\nexpress sum and you have total formula of sum&lt;/p&gt;\n\n&lt;p&gt;then sum&amp;amp;1 is c, sum&amp;amp;2 is d, sum&amp;amp;4 is e, sum&amp;amp;5 is f&lt;/p&gt;\n\n&lt;p&gt;After this you may form predefined array where index of string elements would correspond to ready string.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;array[sum]&lt;/code&gt; gives you the string.&lt;/p&gt;\n    ","\n&lt;p&gt;The most pythonic way of representing your pseudo-code in Python would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ny = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nmylist = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(v == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(v == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(v == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(v == &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It can be done easily as &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [var1,var2,var3]:\n     li.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;targetValue&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To test multiple variables with one single value: &lt;code&gt;if 1 in {a,b,c}:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;To test multiple values with one variable: &lt;code&gt;if a in {1, 2, 3}:&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Looks like you&apos;re building some kind of Caesar cipher.&lt;/p&gt;\n\n&lt;p&gt;A much more generalized approach is this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;input_values = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\norigo = &lt;span class=&quot;hljs-built_in&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;)\n[&lt;span class=&quot;hljs-built_in&quot;&gt;chr&lt;/span&gt;(val + origo) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; val &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; inputs]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;outputs&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Not sure if it&apos;s a desired side effect of your code, but the order of your output will always be sorted.&lt;/p&gt;\n\n&lt;p&gt;If this is what you want, the final line can be changed to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([&lt;span class=&quot;hljs-built_in&quot;&gt;chr&lt;/span&gt;(val + origo) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; val &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; inputs])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use dictionary :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ny = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;=[]\n&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt; = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;[x])\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;[y])\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; z &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;[z])\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Without dict, try this solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x, y, z = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    \noffset = &lt;span class=&quot;hljs-built_in&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;)\n[&lt;span class=&quot;hljs-built_in&quot;&gt;chr&lt;/span&gt;(i + offset) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and gives:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This will help you.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;val&lt;/span&gt;):\n    x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    y = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    z = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n    myList = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; val &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; val == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; val &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; val == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; val &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; val == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:\n        myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;E&quot;&lt;/span&gt;)\n\ntest_fun(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can unite this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ny = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in one variable.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: xyz = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,) \nIn [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: mylist = []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Change our conditions as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xyz: \n    ...:     mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;) \n    ...: &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xyz: \n    ...:     mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;) \n    ...: &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xyz: \n    ...:     mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;) \n    ...: &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xyz:  \n    ...:     mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;) \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]: mylist                                                                                \nOut[&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;you can develop it through two ways&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareVariables&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,y,z&lt;/span&gt;):\n        mylist = []\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n            mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;  x==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n            mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;  x==&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y==&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z==&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:\n            mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;  x==&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y==&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z==&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:\n            mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrong input value!&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;first:&apos;&lt;/span&gt;,mylist)\n\n        compareVariables(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareVariables&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,y,z&lt;/span&gt;):\n        mylist = []\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z):\n             mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z):\n             mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z):\n             mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z):\n             mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n             &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrong input value!&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;second:&apos;&lt;/span&gt;,mylist)\n\n        compareVariables(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;or&lt;/code&gt; does not work like that, as &lt;a href=&quot;https://stackoverflow.com/a/20002504/918959&quot;&gt;explained by this answer&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;While the generic answer would be use&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z):\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;this is not the best one for the &lt;em&gt;specific&lt;/em&gt; problem. In your case you&apos;re doing &lt;em&gt;repeated tests&lt;/em&gt;, therefore it is worthwhile to compose a &lt;em&gt;set&lt;/em&gt; of these variables:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;values = {x, y, z}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; values:\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; values:\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can simplify this using a dictionary - this will result in the same values:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mappings = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, ...}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mappings:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; values:\n        mylist.append(mappings[k])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or if the ordering of the &lt;code&gt;mylist&lt;/code&gt; is arbitrary, you can loop over the &lt;em&gt;values&lt;/em&gt; instead and match them to the mappings:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mappings = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, ...}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mappings:\n        mylist.append(mappings[v])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;Problem&lt;/h3&gt;\n\n&lt;p&gt;While the pattern for testing multiple values&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is very readable and is working in many situation, there is one pitfall:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;}\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But we want to have&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Solution&lt;/h3&gt;\n\n&lt;p&gt;One generalization of the previous expression is based on the answer from &lt;a href=&quot;https://stackoverflow.com/a/30430962/5599281&quot;&gt;ytpillai&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;])\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which can be written as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;))\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While this expression returns the right result it is not as readable as the first expression :-(&lt;/p&gt;\n    ","\n&lt;p&gt;Here is one more way to do it:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ny = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nmylist = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;[x,y,z]):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;[x,y,z]):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;[x,y,z]):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;[x,y,z]):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is a mix of &lt;strong&gt;list comprehension&lt;/strong&gt; and &lt;strong&gt;any&lt;/strong&gt; keyword.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;usage without if example:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x,y,z = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nvalues = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;} &lt;span class=&quot;hljs-comment&quot;&gt;# =&amp;gt; as if usage&lt;/span&gt;\nmy_list = [values[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z)]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(my_list)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;FIRST, A CORRECTION TO THE &lt;code&gt;OR&lt;/code&gt; CONDITIONAL:&lt;/p&gt;\n&lt;p&gt;You need to say:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The reason is that &quot;or&quot; splits up the condition into separate logical parts. The way your original statement was written, those parts were:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x\ny\nz == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   // &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; depending on the &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; statement\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The last part was fine --- checking to see if z == 0, for instance --- but the first two parts just said essentially &lt;code&gt;if x&lt;/code&gt; and &lt;code&gt;if y&lt;/code&gt;. Since integers always evaluate to &lt;code&gt;True&lt;/code&gt; unless they&apos;re 0, that means the first part of your condition was always &lt;code&gt;True&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; didn&apos;t equal 0 (which in the case of y was always, since you had &lt;code&gt;y = 1&lt;/code&gt;, causing your whole condition (because of how &lt;code&gt;OR&lt;/code&gt; works) to always be &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;To avoid that, you need to make sure all parts of your condition (each side of the &lt;code&gt;OR&lt;/code&gt;) make sense on their own (you can do that by pretending that the other side(s) of the &lt;code&gt;OR&lt;/code&gt; statement doesn&apos;t exist). That&apos;s how you can confirm whether or not your &lt;code&gt;OR&lt;/code&gt; condition is correctly defined.&lt;/p&gt;\n&lt;p&gt;You would write the statements individually like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; y == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which means the correct mergin with the &lt;code&gt;OR&lt;/code&gt; keyword would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;SECOND, HOW TO SOLVE THE PROBLEM:&lt;/p&gt;\n&lt;p&gt;You&apos;re basically wanting to check to see if any of the variables match a given integer and if so, assign it a letter that matches it in a one-to-one mapping. You want to do that for a certain list of integers so that the output is a list of letters. You&apos;d do that like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y, z&lt;/span&gt;):\n\n    result = []\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; integer, letter &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == integer &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y == integer &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == integer:\n            result.append(letter)\n            \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n        \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Similarly, you could use LIST COMPREHENSION to achieve the same result faster:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y, z&lt;/span&gt;):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [ \n                letter \n                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; integer, letter &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;])\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == integer &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y == integer &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == integer\n           ]\n    \n    \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#selection&lt;/span&gt;\n: a=np.array([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])                                                                                                                                                 \n\n&lt;span class=&quot;hljs-comment&quot;&gt;#list of options[sel,sel]&lt;/span&gt;\n: np.diag([&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;])[a,a]                                                                                                                                     \n\n array([&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;], dtype=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;U1&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;use &lt;code&gt;1&lt;/code&gt; in (tuple)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;span class=&quot;comment-user&quot;&gt;user9011445&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment82285672_15112125&quot;&gt;&lt;span title=&quot;2017-12-05 21:49:51Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 5, 2017 at 21:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;When you want to evaluate a list of statements in a any/all manner you can use &lt;code&gt;any&lt;/code&gt;/&lt;code&gt;all&lt;/code&gt; functions. For example: &lt;code&gt;all([1, 2, 3, 4, False])&lt;/code&gt; will return False &lt;code&gt;all([True, 1, 2, 3])&lt;/code&gt; will return True &lt;code&gt;any([False, 0, 0, False])&lt;/code&gt; will return False &lt;code&gt;any([False, 0, True, False])&lt;/code&gt; will return True&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1366719/eddd&quot; title=&quot;1,645 reputation&quot; class=&quot;comment-user&quot;&gt;eddd&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment88379334_15112125&quot;&gt;&lt;span title=&quot;2018-06-04 16:17:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 4, 2018 at 16:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This question is a very popular duplicate target, but I think it&apos;s suboptimal for that purpose. Most people try to do something like &lt;code&gt;if x == 0 or 1:&lt;/code&gt;, which is of course similar to &lt;code&gt;if x or y == 0:&lt;/code&gt;, but might be a little confusing for newbies nonetheless. Given the sheer volume of &lt;i&gt;&quot;Why isn&apos;t my &lt;code&gt;x == 0 or 1&lt;/code&gt; working?&quot;&lt;/i&gt; questions, I would much rather use &lt;a href=&quot;https://stackoverflow.com/q/20002503/1222951&quot;&gt;this question&lt;/a&gt; as our canonical duplicate target for these questions.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1222951/aran-fey&quot; title=&quot;35,899 reputation&quot; class=&quot;comment-user&quot;&gt;Aran-Fey&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment97914247_15112125&quot;&gt;&lt;span title=&quot;2019-04-10 10:06:05Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 10, 2019 at 10:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Take extra care when comparing to &quot;falsey&quot; values like &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;0.0&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. You can easily write wrong code which gives the &quot;right&quot; answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/202229/smci&quot; title=&quot;29,887 reputation&quot; class=&quot;comment-user&quot;&gt;smci&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment97914372_15112125&quot;&gt;&lt;span title=&quot;2019-04-10 10:09:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 10, 2019 at 10:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For the opposite, see &lt;a href=&quot;/questions/6838238/comparing-a-string-to-multiple-items-in-python&quot;&gt;Comparing a string to multiple items in Python&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/874188/tripleee&quot; title=&quot;159,777 reputation&quot; class=&quot;comment-user&quot;&gt;tripleee&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105448818_15112125&quot;&gt;&lt;span title=&quot;2020-01-08 10:27:08Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 8, 2020 at 10:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I wouldn&apos;t be so quick to go for the &lt;code&gt;set&lt;/code&gt; version.  Tuple&apos;s are very cheap to create and iterate over.  On my machine at least, tuples are faster than sets so long as the size of the tuple is around 4-8 elements.  If you have to scan more than that, use a set, but if you are looking for an item out of 2-4 possibilities, a tuple is still faster!  If you can arrange for the most likely case to be first in the tuple, the win is even bigger: (my test: &lt;code&gt;timeit.timeit(&apos;0 in {seq}&apos;.format(seq=tuple(range(9, -1, -1))))&lt;/code&gt;)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/65696/singlenegationelimination&quot; title=&quot;145,377 reputation&quot; class=&quot;comment-user&quot;&gt;SingleNegationElimination&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29042397_15112149&quot;&gt;&lt;span title=&quot;2013-10-24 15:27:12Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 24, 2013 at 15:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@dequestarmappartialsetattr: In Python 3.3 and up, the set is stored as a constant, bypassing the creation time altogether, eliminating the creation time. Tuples &lt;i&gt;can&lt;/i&gt; be cheap to create as Python caches a bundle of them to avoid memory churn, making that the biggest difference with sets here.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/100297/martijn-pieters&quot; title=&quot;970,028 reputation&quot; class=&quot;comment-user&quot;&gt;Martijn Pieters&lt;/a&gt;\n&lt;span class=&quot;mod-flair &quot; title=&quot;Moderator&quot;&gt;&lt;/span&gt;                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29042516_15112149&quot;&gt;&lt;span title=&quot;2013-10-24 15:29:51Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 24, 2013 at 15:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@dequestarmappartialsetattr: If you time &lt;i&gt;just&lt;/i&gt; the membership test, for integers sets and tuples are equally fast for the ideal scenario; matching the first element. After that tuples lose out to sets.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/100297/martijn-pieters&quot; title=&quot;970,028 reputation&quot; class=&quot;comment-user&quot;&gt;Martijn Pieters&lt;/a&gt;\n&lt;span class=&quot;mod-flair &quot; title=&quot;Moderator&quot;&gt;&lt;/span&gt;                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29042794_15112149&quot;&gt;&lt;span title=&quot;2013-10-24 15:37:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 24, 2013 at 15:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MartijnPieters: Using the &lt;code&gt;set&lt;/code&gt; literal notation for this test isn&apos;t a savings unless the contents of the &lt;code&gt;set&lt;/code&gt; literal are also literals, right? &lt;code&gt;if 1 in {x, y, z}:&lt;/code&gt; can&apos;t cache the &lt;code&gt;set&lt;/code&gt;, because &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; could change, so either solution needs to build a &lt;code&gt;tuple&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; from scratch, and I suspect whatever lookup savings you might get when checking for membership would be swamped by greater &lt;code&gt;set&lt;/code&gt; creation time.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/364696/shadowranger&quot; title=&quot;127,504 reputation&quot; class=&quot;comment-user&quot;&gt;ShadowRanger&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65957961_15112149&quot;&gt;&lt;span title=&quot;2016-09-04 00:37:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 4, 2016 at 0:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ShadowRanger: yes, peephole optimisation (be it for &lt;code&gt;in [...]&lt;/code&gt; or &lt;code&gt;in {...}&lt;/code&gt;) only works if the contents of the list or set are immutable literals too.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/100297/martijn-pieters&quot; title=&quot;970,028 reputation&quot; class=&quot;comment-user&quot;&gt;Martijn Pieters&lt;/a&gt;\n&lt;span class=&quot;mod-flair &quot; title=&quot;Moderator&quot;&gt;&lt;/span&gt;                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65961841_15112149&quot;&gt;&lt;span title=&quot;2016-09-04 07:58:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 4, 2016 at 7:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Or even &lt;code&gt;d = &quot;cdef&quot;&lt;/code&gt; which leads to &lt;code&gt;MyList = [&quot;cdef&quot;[k] for k in [x, y, z]]&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/390363/aragaer&quot; title=&quot;16,372 reputation&quot; class=&quot;comment-user&quot;&gt;aragaer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment29042877_17604212&quot;&gt;&lt;span title=&quot;2013-10-24 15:39:35Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 24, 2013 at 15:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;or &lt;code&gt;map(lambda i: &apos;cdef&apos;[i], [x, y, z])&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1355221/dansalmo&quot; title=&quot;11,016 reputation&quot; class=&quot;comment-user&quot;&gt;dansalmo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment36122660_17604212&quot;&gt;&lt;span title=&quot;2014-05-08 14:36:49Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 8, 2014 at 14:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Aside from the list comprehension which I&apos;m not yet fully accustomed to, most of us had the same reflex: build that dict !&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7237062/lonewanderer&quot; title=&quot;2,731 reputation&quot; class=&quot;comment-user&quot;&gt;LoneWanderer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment96927060_17604212&quot;&gt;&lt;span title=&quot;2019-03-10 18:57:53Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 10, 2019 at 18:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@VisioN You mean &lt;code&gt;for number in num_to_letters&lt;/code&gt;? You don&apos;t need &lt;code&gt;.keys()&lt;/code&gt;, dicts iterate over keys by default. Regarding using a string, you mean something like this, right? &lt;code&gt;for i, c in enumerate(&apos;cdef&apos;): if i in {x, y, z}: mylist.append(c)&lt;/code&gt; Agreed, that would be simpler. Or better yet, &lt;code&gt;s = &apos;cdef&apos;; mylist = [s[i] for i in [x, y, z]]&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4518341/wjandrea&quot; title=&quot;23,524 reputation&quot; class=&quot;comment-user&quot;&gt;wjandrea&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115011428_32085628&quot;&gt;&lt;span title=&quot;2020-11-28 22:03:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 28, 2020 at 22:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@wjandrea Yes, you are right, it&apos;s my mistake! I completely forgot about the default behaviour. Unfortunately, I cannot edit my comment, so I have deleted it since you have highlighted the better approach in your comment.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1249581/vision&quot; title=&quot;138,945 reputation&quot; class=&quot;comment-user&quot;&gt;VisioN&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115018668_32085628&quot;&gt;&lt;span title=&quot;2020-11-29 11:09:08Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 29, 2020 at 11:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In your example of the &lt;code&gt;dict&lt;/code&gt; instead of a key, you will get errors because the return value of &lt;code&gt;.append&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, and calling &lt;code&gt;None&lt;/code&gt; gives an &lt;code&gt;AttributeError&lt;/code&gt;.  In general I agree with this method, though.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1399279/sethmmorton&quot; title=&quot;41,514 reputation&quot; class=&quot;comment-user&quot;&gt;SethMMorton&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment32723572_17603667&quot;&gt;&lt;span title=&quot;2014-02-08 20:57:33Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 8, 2014 at 20:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;the dict instead of a key is wrong, you will get Mylist=[&apos;c&apos;, &apos;d&apos;] when the dictionary get initialized even if you commented out &quot;for..loop&quot; part&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10146012/mahmoud-elshahat&quot; title=&quot;1,833 reputation&quot; class=&quot;comment-user&quot;&gt;Mahmoud Elshahat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment97810895_17603667&quot;&gt;&lt;span title=&quot;2019-04-07 01:41:32Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 7, 2019 at 1:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In your first example &lt;code&gt;filter&lt;/code&gt; would be better than &lt;code&gt;map&lt;/code&gt;, as it will return only instances where lambda evaluates to true&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6042768/alex&quot; title=&quot;91 reputation&quot; class=&quot;comment-user&quot;&gt;Alex&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment102313779_17603667&quot;&gt;&lt;span title=&quot;2019-09-16 05:17:22Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 16, 2019 at 5:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;A comprehension is much simpler than a map of a lambda: &lt;code&gt;any(v == 0 for v in (x, y, z))&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4518341/wjandrea&quot; title=&quot;23,524 reputation&quot; class=&quot;comment-user&quot;&gt;wjandrea&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106339378_17603667&quot;&gt;&lt;span title=&quot;2020-02-08 05:21:05Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 8, 2020 at 5:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;-1 There&apos;s a lot of bad practice here. &lt;code&gt;list&lt;/code&gt; is a Python builtin; use another name instead, like &lt;code&gt;xyz&lt;/code&gt; for example. Why do you construct the list in four steps when you can do one, i.e. &lt;code&gt;xyz = [x, y, z]&lt;/code&gt;? Don&apos;t use parallel lists, use a dict instead. All in all, this solution is much more convoluted than &lt;a href=&quot;https://stackoverflow.com/a/32085628/4518341&quot;&gt;ThatGuyRussell&apos;s&lt;/a&gt;. Also for the last part, why not do a comprehension, i.e. &lt;code&gt;any(v == 0 for v in (x, y, z))&lt;/code&gt;? Also &lt;a href=&quot;https://docs.python.org/3/library/array.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;arrays&lt;/a&gt; are something else in Python.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4518341/wjandrea&quot; title=&quot;23,524 reputation&quot; class=&quot;comment-user&quot;&gt;wjandrea&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106339486_30430962&quot;&gt;&lt;span title=&quot;2020-02-08 05:36:16Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 8, 2020 at 5:36&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This doesn&apos;t answer the OP&apos;s question.  It only covers the first case in the provided example.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/147458/wallacer&quot; title=&quot;12,155 reputation&quot; class=&quot;comment-user&quot;&gt;wallacer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment37069084_24043508&quot;&gt;&lt;span title=&quot;2014-06-04 17:39:09Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 4, 2014 at 17:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This approach is more universal than ` if 2 in (x, y, z): mylist.append(&apos;e&apos;)` because allows arbitrary comparisons (e.g. &lt;code&gt;if any(v &amp;gt;= 42 for v in (x, y, z)):&lt;/code&gt; ).  And performance of all 3 methods (&lt;code&gt;2 in {x,y,z}&lt;/code&gt;, &lt;code&gt;2 in (x,y,z)&lt;/code&gt;, &lt;code&gt;any(_v == 2 for _v in (x,y,z))&lt;/code&gt;) seems to be almost the same in CPython3.6 (see &lt;a href=&quot;https://gist.github.com/imposeren/06eb52771d1b779e64d9bef525da87d8&quot; rel=&quot;nofollow noreferrer&quot;&gt;Gist&lt;/a&gt;)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/952437/imposeren&quot; title=&quot;3,774 reputation&quot; class=&quot;comment-user&quot;&gt;imposeren&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98608899_51701671&quot;&gt;&lt;span title=&quot;2019-05-04 04:47:11Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 4, 2019 at 4:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This may append same more then once this. Set?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/525578/sergei-krivonos&quot; title=&quot;3,678 reputation&quot; class=&quot;comment-user&quot;&gt;Sergei Krivonos&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment96299106_51618459&quot;&gt;&lt;span title=&quot;2019-02-19 04:49:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 19, 2019 at 4:49&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why &lt;code&gt;i in [0]&lt;/code&gt; instead of just &lt;code&gt;i == 0&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6045800/tomerikoo&quot; title=&quot;16,041 reputation&quot; class=&quot;comment-user&quot;&gt;Tomerikoo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118539367_66398859&quot;&gt;&lt;span title=&quot;2021-04-12 17:08:48Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 12, 2021 at 17:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;For a single comparison like in this question, you can use &quot;==&quot; but if you want multiple comparisons with multiple variables, then you can use the &quot;in&quot; operator like: if any(i in [0,5,4,9,7] for i in[x,y,z] )&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/15127315/abhishek-kumar-saw&quot; title=&quot;349 reputation&quot; class=&quot;comment-user&quot;&gt;Abhishek Kumar Saw&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118547903_66398859&quot;&gt;&lt;span title=&quot;2021-04-13 01:21:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 13, 2021 at 1:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":36,"title":"How to test multiple variables for equality against a single value?","content":"\n                \n&lt;p&gt;I&apos;m trying to make a function that will compare multiple variables to an integer and output a string of three letters. I was wondering if there was a way to translate this into Python. So say:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ny = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nmylist = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: \n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which would return a list of:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"how-to-test-multiple-variables-for-equality-against-a-single-value-1657384358504","postType":"QUESTION","createdAt":"2022-07-09T16:32:38.000Z","updatedAt":"2022-07-09T16:32:38.000Z","tags":[{"id":126,"name":"if-statement","slug":"if-statement","createdAt":"2022-07-09T16:32:38.000Z","updatedAt":"2022-07-09T16:32:38.000Z","Questions_Tags":{"questionId":36,"tagId":126}},{"id":127,"name":"comparison","slug":"comparison","createdAt":"2022-07-09T16:32:38.000Z","updatedAt":"2022-07-09T16:32:38.000Z","Questions_Tags":{"questionId":36,"tagId":127}},{"id":128,"name":"match","slug":"match","createdAt":"2022-07-09T16:32:38.000Z","updatedAt":"2022-07-09T16:32:38.000Z","Questions_Tags":{"questionId":36,"tagId":128}},{"id":129,"name":"boolean-logic","slug":"boolean-logic","createdAt":"2022-07-09T16:32:38.000Z","updatedAt":"2022-07-09T16:32:38.000Z","Questions_Tags":{"questionId":36,"tagId":129}}]}},"__N_SSG":true}