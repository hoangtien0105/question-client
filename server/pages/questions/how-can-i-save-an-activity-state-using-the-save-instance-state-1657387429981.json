{"pageProps":{"data":{"answer":["\n&lt;p&gt;You need to override &lt;code&gt;onSaveInstanceState(Bundle savedInstanceState)&lt;/code&gt; and write the application state values you want to change to the &lt;code&gt;Bundle&lt;/code&gt; parameter like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onSaveInstanceState&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle savedInstanceState&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;onSaveInstanceState&lt;/span&gt;(savedInstanceState);\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Save UI state changes to the savedInstanceState.&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// This bundle will be passed to onCreate if the process is&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// killed and restarted.&lt;/span&gt;\n  savedInstanceState.&lt;span class=&quot;hljs-title function_&quot;&gt;putBoolean&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyBoolean&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n  savedInstanceState.&lt;span class=&quot;hljs-title function_&quot;&gt;putDouble&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myDouble&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1.9&lt;/span&gt;);\n  savedInstanceState.&lt;span class=&quot;hljs-title function_&quot;&gt;putInt&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyInt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n  savedInstanceState.&lt;span class=&quot;hljs-title function_&quot;&gt;putString&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyString&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Welcome back to Android&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-comment&quot;&gt;// etc.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The Bundle is essentially a way of storing a NVP (&quot;Name-Value Pair&quot;) map, and it will get passed in to &lt;code&gt;onCreate()&lt;/code&gt; and also &lt;code&gt;onRestoreInstanceState()&lt;/code&gt; where you would then extract the values from activity like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.onRestoreInstanceState(savedInstanceState);\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Restore UI state from the savedInstanceState.&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// This bundle has also been passed to onCreate.&lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myBoolean&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; savedInstanceState.getBoolean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyBoolean&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myDouble&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; savedInstanceState.getDouble(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myDouble&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myInt&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; savedInstanceState.getInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyInt&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; savedInstanceState.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyString&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or from a fragment.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onViewStateRestored&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@Nullable&lt;/span&gt; Bundle savedInstanceState)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.onViewStateRestored(savedInstanceState);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Restore UI state from the savedInstanceState.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This bundle has also been passed to onCreate.&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myBoolean&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; savedInstanceState.getBoolean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyBoolean&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myDouble&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; savedInstanceState.getDouble(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myDouble&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myInt&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; savedInstanceState.getInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyInt&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; savedInstanceState.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyString&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You would usually use this technique to store instance values for your application (selections, unsaved text, etc.).&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;savedInstanceState&lt;/code&gt; is only for saving state associated with a current instance of an Activity, for example current navigation or selection info, so that if Android destroys and recreates an Activity, it can come back as it was before.  See the documentation for &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#onCreate(android.os.Bundle)&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;onCreate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;onSaveInstanceState&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For more long lived state, consider using a SQLite database, a file, or preferences.  See &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#SavingPersistentState&quot; rel=&quot;noreferrer&quot;&gt;Saving Persistent State&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Note that it is &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; safe to use &lt;code&gt;onSaveInstanceState&lt;/code&gt; and &lt;code&gt;onRestoreInstanceState&lt;/code&gt; &lt;strong&gt;for persistent data&lt;/strong&gt;, according to  &lt;em&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html&quot; rel=&quot;noreferrer&quot;&gt;the documentation on Activity&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;The document states (in the &apos;Activity Lifecycle&apos; section):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Note that it is important to save\npersistent data in &lt;code&gt;onPause()&lt;/code&gt; instead\nof &lt;code&gt;onSaveInstanceState(Bundle)&lt;/code&gt;\nbecause the later is not part of the\nlifecycle callbacks, so will not be\ncalled in every situation as described\nin its documentation.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;In other words, put your save/restore code for persistent data in &lt;code&gt;onPause()&lt;/code&gt; and &lt;code&gt;onResume()&lt;/code&gt;!&lt;/p&gt;\n&lt;p&gt;For further clarification, here&apos;s the &lt;code&gt;onSaveInstanceState()&lt;/code&gt; documentation:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;This method is called before an activity may be killed so that when it\ncomes back some time in the future it can restore its state. For\nexample, if activity B is launched in front of activity A, and at some\npoint activity A is killed to reclaim resources, activity A will have\na chance to save the current state of its user interface via this\nmethod so that when the user returns to activity A, the state of the\nuser interface can be restored via &lt;code&gt;onCreate(Bundle)&lt;/code&gt; or\n&lt;code&gt;onRestoreInstanceState(Bundle)&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;My colleague wrote an article explaining application state on Android devices, including explanations on activity lifecycle and state information, how to store state information, and saving to state &lt;code&gt;Bundle&lt;/code&gt; and &lt;code&gt;SharedPreferences&lt;/code&gt;. &lt;a href=&quot;http://www.eigo.co.uk/Managing-State-in-an-Android-Activity.aspx&quot; rel=&quot;noreferrer&quot;&gt;Take a look at it here&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The article covers three approaches:&lt;/p&gt;\n&lt;h2 id=&quot;store-local-variableui-control-data-for-application-lifetime-i.e.temporarily-using-an-instance-state-bundle-cq9v&quot;&gt;Store local variable/UI control data for application lifetime (i.e. temporarily) using an instance state bundle&lt;/h2&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;[Code sample  Store state in state bundle]\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Store UI state to the savedInstanceState.&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// This bundle will be passed to onCreate on next call.  EditText txtName = (EditText)findViewById(R.id.txtName);&lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;strName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; txtName.getText().toString();\n\n  &lt;span class=&quot;hljs-type&quot;&gt;EditText&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;txtEmail&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (EditText)findViewById(R.id.txtEmail);\n  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;strEmail&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; txtEmail.getText().toString();\n\n  &lt;span class=&quot;hljs-type&quot;&gt;CheckBox&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;chkTandC&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (CheckBox)findViewById(R.id.chkTandC);\n  &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;blnTandC&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; chkTandC.isChecked();\n\n  savedInstanceState.putString(Name, strName);\n  savedInstanceState.putString(Email, strEmail);\n  savedInstanceState.putBoolean(TandC, blnTandC);\n\n  &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(savedInstanceState);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id=&quot;store-local-variableui-control-data-between-application-instances-i.e.permanently-using-shared-preferences-9sl9&quot;&gt;Store local variable/UI control data between application instances (i.e. permanently) using shared preferences&lt;/h2&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;[Code sample  store state in SharedPreferences]\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.onPause();\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Store values between instances here&lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;SharedPreferences&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;preferences&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getPreferences(MODE_PRIVATE);\n  SharedPreferences.&lt;span class=&quot;hljs-type&quot;&gt;Editor&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; preferences.edit();  &lt;span class=&quot;hljs-comment&quot;&gt;// Put the values from the UI&lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;EditText&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;txtName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (EditText)findViewById(R.id.txtName);\n  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;strName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; txtName.getText().toString();\n\n  &lt;span class=&quot;hljs-type&quot;&gt;EditText&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;txtEmail&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (EditText)findViewById(R.id.txtEmail);\n  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;strEmail&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; txtEmail.getText().toString();\n\n  &lt;span class=&quot;hljs-type&quot;&gt;CheckBox&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;chkTandC&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (CheckBox)findViewById(R.id.chkTandC);\n  &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;blnTandC&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; chkTandC.isChecked();\n\n  editor.putString(Name, strName); &lt;span class=&quot;hljs-comment&quot;&gt;// value to store&lt;/span&gt;\n  editor.putString(Email, strEmail); &lt;span class=&quot;hljs-comment&quot;&gt;// value to store&lt;/span&gt;\n  editor.putBoolean(TandC, blnTandC); &lt;span class=&quot;hljs-comment&quot;&gt;// value to store&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Commit to storage&lt;/span&gt;\n  editor.commit();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id=&quot;keeping-object-instances-alive-in-memory-between-activities-within-application-lifetime-using-a-retained-non-configuration-instance-qv67&quot;&gt;Keeping object instances alive in memory between activities within application lifetime using a retained non-configuration instance&lt;/h2&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;[&lt;span class=&quot;hljs-title class_&quot;&gt;Code&lt;/span&gt; sample  store &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; instance]\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; cMyClassType moInstanceOfAClass; &lt;span class=&quot;hljs-comment&quot;&gt;// Store the instance of an object&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onRetainNonConfigurationInstance&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (moInstanceOfAClass != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// Check that the object exists&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(moInstanceOfAClass);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;onRetainNonConfigurationInstance&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is a classic &apos;gotcha&apos; of Android development. There are two issues here:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;There is a subtle Android Framework bug which greatly complicates application stack management during development, at least on legacy versions (not entirely sure if/when/how it was fixed). I&apos;ll discuss this bug below.&lt;/li&gt;\n&lt;li&gt;The &apos;normal&apos; or intended way to manage this issue is, itself, rather complicated with the duality of onPause/onResume and onSaveInstanceState/onRestoreInstanceState&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Browsing across all these threads, I suspect that much of the time developers are talking about these two different issues simultaneously ... hence all the confusion and reports of &quot;this doesn&apos;t work for me&quot;.&lt;/p&gt;\n&lt;p&gt;First, to clarify the &apos;intended&apos; behavior: onSaveInstance and onRestoreInstance are fragile and only for transient state. The intended usage (as far as I can tell) is to handle Activity recreation when the phone is rotated (orientation change). In other words, the intended usage is when your Activity is still logically &apos;on top&apos;, but still must be reinstantiated by the system. The saved Bundle is not persisted outside of the process/memory/&lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&quot; rel=&quot;noreferrer&quot;&gt;GC&lt;/a&gt;, so you cannot really rely on this if your activity goes to the background. Yes, perhaps your Activity&apos;s memory will survive its trip to the background and escape GC, but this is not reliable (nor is it predictable).&lt;/p&gt;\n&lt;p&gt;So if you have a scenario where there is meaningful &apos;user progress&apos; or state that should be persisted between &apos;launches&apos; of your application, the guidance is to use onPause and onResume. You must choose and prepare a persistent store yourself.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;But&lt;/em&gt; - there is a very confusing bug which complicates all of this. Details are here:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://code.google.com/p/android/issues/detail?id=2373&quot; rel=&quot;noreferrer&quot;&gt;Activity stack behaves incorrectly during the first run of an app when started from Eclipse&lt;/a&gt;&lt;/em&gt; (#36907463)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://issuetracker.google.com/issues/36911210&quot; rel=&quot;noreferrer&quot;&gt;Marketplace / browser app installer allows second instance off app&lt;/a&gt;&lt;/em&gt; (#36911210)&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Basically, if your application is launched with the SingleTask flag, and then later on you launch it from the home screen or launcher menu, then that subsequent invocation will create a NEW task ... you&apos;ll effectively have two different instances of your app inhabiting the same stack ... which gets very strange very fast. This seems to happen when you launch your app during development (i.e. from &lt;a href=&quot;https://en.wikipedia.org/wiki/Eclipse_%28software%29&quot; rel=&quot;noreferrer&quot;&gt;Eclipse&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/IntelliJ_IDEA&quot; rel=&quot;noreferrer&quot;&gt;IntelliJ&lt;/a&gt;), so developers run into this a lot. But also through some of the app store update mechanisms (so it impacts your users as well).&lt;/p&gt;\n&lt;p&gt;I battled through these threads for hours before I realized that my main issue was this bug, not the intended framework behavior. A great write-up and &lt;del&gt;workaround&lt;/del&gt; (UPDATE: see below) seems to be from user @kaciula in this answer:&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3042420/home-key-press-behaviour/4782423#4782423&quot;&gt;Home key press behaviour&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;UPDATE June 2013&lt;/strong&gt;: Months later, I have finally found the &apos;correct&apos; solution. You don&apos;t need to manage any stateful startedApp flags yourself. You can detect this from the framework and bail appropriately. I use this near the beginning of my LauncherActivity.onCreate:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!isTaskRoot()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent();\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intent.getAction();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (intent.hasCategory(Intent.CATEGORY_LAUNCHER) &amp;amp;&amp;amp; action != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; action.equals(Intent.ACTION_MAIN)) {\n        finish();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;onSaveInstanceState&lt;/code&gt; is called when the system needs memory and kills an application. It is not called when the user just closes the application. So I think application state should also be saved in &lt;code&gt;onPause&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;It should be saved to some persistent storage like &lt;code&gt;Preferences&lt;/code&gt; or SQLite.&lt;/p&gt;\n    ","\n&lt;p&gt;Both methods are useful and valid and both are best suited for different scenarios:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The user terminates the application and re-opens it at a later date, but the application needs to reload data from the last session  this requires a persistent storage approach such as using SQLite.&lt;/li&gt;\n&lt;li&gt;The user switches application and then comes back to the original and wants to pick up where they left off -  save and restore bundle data (such as application state data) in &lt;code&gt;onSaveInstanceState()&lt;/code&gt; and &lt;code&gt;onRestoreInstanceState()&lt;/code&gt; is usually adequate.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;If you save the state data in a persistent manner, it can be reloaded in an &lt;code&gt;onResume()&lt;/code&gt; or &lt;code&gt;onCreate()&lt;/code&gt; (or actually on any lifecycle call). This may or may not be desired behaviour. If you store it in a bundle in an &lt;code&gt;InstanceState&lt;/code&gt;, then it is transient and is only suitable for storing data for use in the same user session (I use the term session loosely) but not between sessions.&lt;/p&gt;\n\n&lt;p&gt;It is not that one approach is better than the other, like everything, it is just important to understand what behaviour you require and to select the most appropriate approach.&lt;/p&gt;\n    ","\n&lt;p&gt;Saving state is a kludge at best as far as I&apos;m concerned. If you need to save persistent data, just use an &lt;a href=&quot;http://en.wikipedia.org/wiki/SQLite&quot; rel=&quot;noreferrer&quot;&gt;SQLite&lt;/a&gt; database. Android makes it &lt;strong&gt;&lt;em&gt;SOOO&lt;/em&gt;&lt;/strong&gt; easy.&lt;/p&gt;\n\n&lt;p&gt;Something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.&lt;span class=&quot;hljs-property&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Date&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.&lt;span class=&quot;hljs-property&quot;&gt;content&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Context&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.&lt;span class=&quot;hljs-property&quot;&gt;database&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Cursor&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.&lt;span class=&quot;hljs-property&quot;&gt;database&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sqlite&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;SQLiteDatabase&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.&lt;span class=&quot;hljs-property&quot;&gt;database&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sqlite&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;SQLiteOpenHelper&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;dataHelper&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; final &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;DATABASE_NAME&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;autoMate.db&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; final int &lt;span class=&quot;hljs-variable constant_&quot;&gt;DATABASE_VERSION&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Context&lt;/span&gt; context;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SQLiteDatabase&lt;/span&gt; db;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;OpenHelper&lt;/span&gt; oh ;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dataHelper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Context context&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;context&lt;/span&gt; = context;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;oh&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;OpenHelper&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;context&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;db&lt;/span&gt; = oh.&lt;span class=&quot;hljs-title function_&quot;&gt;getWritableDatabase&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;close&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        db.&lt;span class=&quot;hljs-title function_&quot;&gt;close&lt;/span&gt;();\n        oh.&lt;span class=&quot;hljs-title function_&quot;&gt;close&lt;/span&gt;();\n        db = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        oh = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        &lt;span class=&quot;hljs-title class_&quot;&gt;SQLiteDatabase&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;releaseMemory&lt;/span&gt;();\n    }\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setCode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; codeName, &lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt; codeValue, &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; codeDataType&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Cursor&lt;/span&gt; codeRow = db.&lt;span class=&quot;hljs-title function_&quot;&gt;rawQuery&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM code WHERE codeName = &apos;&quot;&lt;/span&gt;+  codeName + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; cv = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; ;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (codeDataType.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;long&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;){\n            cv = &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;(codeValue);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (codeDataType.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;int&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n        {\n            cv = &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;(codeValue);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (codeDataType.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;date&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n        {\n            cv = &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;(((&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;)codeValue).&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;());\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (codeDataType.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;boolean&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;(codeValue);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            cv = &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;(codeValue);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(codeRow.&lt;span class=&quot;hljs-title function_&quot;&gt;getCount&lt;/span&gt;() &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//exists-- update&lt;/span&gt;\n        {\n            db.&lt;span class=&quot;hljs-title function_&quot;&gt;execSQL&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;update code set codeValue = &apos;&quot;&lt;/span&gt; + cv +\n                &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; where codeName = &apos;&quot;&lt;/span&gt; + codeName + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// does not exist, insert&lt;/span&gt;\n        {\n            db.&lt;span class=&quot;hljs-title function_&quot;&gt;execSQL&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO code (codeName, codeValue, codeDataType) VALUES(&quot;&lt;/span&gt; +\n                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt; + codeName + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;,&quot;&lt;/span&gt; +\n                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt; + cv + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;,&quot;&lt;/span&gt; +\n                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt; + codeDataType + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;)&quot;&lt;/span&gt; );\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getCode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; codeName, &lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt; defaultValue&lt;/span&gt;){\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Check to see if it already exists&lt;/span&gt;\n        &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; codeValue = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; codeDataType = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;boolean&lt;/span&gt; found = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Cursor&lt;/span&gt; codeRow  = db.&lt;span class=&quot;hljs-title function_&quot;&gt;rawQuery&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM code WHERE codeName = &apos;&quot;&lt;/span&gt;+  codeName + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (codeRow.&lt;span class=&quot;hljs-title function_&quot;&gt;moveToFirst&lt;/span&gt;())\n        {\n            codeValue = codeRow.&lt;span class=&quot;hljs-title function_&quot;&gt;getString&lt;/span&gt;(codeRow.&lt;span class=&quot;hljs-title function_&quot;&gt;getColumnIndex&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;codeValue&quot;&lt;/span&gt;));\n            codeDataType = codeRow.&lt;span class=&quot;hljs-title function_&quot;&gt;getString&lt;/span&gt;(codeRow.&lt;span class=&quot;hljs-title function_&quot;&gt;getColumnIndex&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;codeDataType&quot;&lt;/span&gt;));\n            found = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (found == &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; defaultValue;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (codeDataType.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;long&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (codeValue.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (long)&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Long&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parseLong&lt;/span&gt;(codeValue);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (codeDataType.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;int&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (codeValue.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (int)&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(codeValue);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (codeDataType.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;date&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (codeValue.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Long&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parseLong&lt;/span&gt;(codeValue));\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (codeDataType.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;boolean&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (codeValue.&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parseBoolean&lt;/span&gt;(codeValue);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;)codeValue;\n        }\n    }\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;OpenHelper&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;SQLiteOpenHelper&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-title class_&quot;&gt;OpenHelper&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Context&lt;/span&gt; context) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt;(context, &lt;span class=&quot;hljs-variable constant_&quot;&gt;DATABASE_NAME&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;DATABASE_VERSION&lt;/span&gt;);\n        }\n\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onCreate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;SQLiteDatabase db&lt;/span&gt;) {\n            db.&lt;span class=&quot;hljs-title function_&quot;&gt;execSQL&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;CREATE TABLE IF  NOT EXISTS code&quot;&lt;/span&gt; +\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;(id INTEGER PRIMARY KEY, codeName TEXT, codeValue TEXT, codeDataType TEXT)&quot;&lt;/span&gt;);\n        }\n\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onUpgrade&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;SQLiteDatabase db, int oldVersion, int newVersion&lt;/span&gt;) {\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A simple call after that&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;dataHelper dh = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; dataHelper(getBaseContext());\n&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; status = (&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;) dh.getCode(&lt;span class=&quot;hljs-string&quot;&gt;&quot;appState&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;safetyDisabled&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt; serviceStart = (&lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;) dh.getCode(&lt;span class=&quot;hljs-string&quot;&gt;&quot;serviceStartTime&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\ndh.close();\ndh = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think I found the answer. Let me tell what I have done in simple words:&lt;/p&gt;\n\n&lt;p&gt;Suppose I have two activities, activity1 and activity2 and I am navigating from activity1 to activity2 (I have done some works in activity2) and again back to activity 1 by clicking on a button in activity1. Now at this stage I wanted to go back to activity2 and I want to see my activity2 in the same condition when I last left activity2.&lt;/p&gt;\n\n&lt;p&gt;For the above scenario what I have done is that in the manifest I made some changes like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;activity&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;.activity2&quot;&lt;/span&gt;\n          &lt;span class=&quot;hljs-attr&quot;&gt;android:alwaysRetainTaskState&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;      \n          &lt;span class=&quot;hljs-attr&quot;&gt;android:launchMode&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;singleInstance&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;activity&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And in the activity1 on the button click event I have done like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;();\nintent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);\nintent.setClassName(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.mainscreen.activity2&quot;&lt;/span&gt;);\nstartActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And in activity2 on button click event I have done like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Intent intent=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent();\nintent.setClassName(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.mainscreen.activity1&quot;&lt;/span&gt;);\nstartActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now what will happen is that whatever the changes we have made in the activity2 will not be lost, and we can view activity2 in the same state as we left previously.&lt;/p&gt;\n\n&lt;p&gt;I believe this is the answer and this works fine for me. Correct me if I am wrong.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;onSaveInstanceState()&lt;/code&gt; for transient data (restored in &lt;code&gt;onCreate()&lt;/code&gt;/&lt;code&gt;onRestoreInstanceState()&lt;/code&gt;), &lt;code&gt;onPause()&lt;/code&gt; for persistent data (restored in &lt;code&gt;onResume()&lt;/code&gt;).\nFrom Android technical resources:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;onSaveInstanceState()&lt;/strong&gt; is called by Android if the Activity is being stopped and may be killed before it is resumed! This means it should store any state necessary to re-initialize to the same condition when the Activity is restarted. It is the counterpart to the onCreate() method, and in fact the savedInstanceState Bundle passed in to onCreate() is the same Bundle that you construct as outState in the onSaveInstanceState() method.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;onPause()&lt;/strong&gt; and &lt;strong&gt;onResume()&lt;/strong&gt; are also complimentary methods. onPause() is always called when the Activity ends, even if we instigated that (with a finish() call for example). We will use this to save the current note back to the database. Good practice is to release any resources that can be released during an onPause() as well, to take up less resources when in the passive state.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Really &lt;code&gt;onSaveInstanceState()&lt;/code&gt; is called when the Activity goes to background.&lt;/p&gt;\n\n&lt;p&gt;Quote from the docs:\n&quot;This method is called before an activity may be killed so that when it comes back some time in the future it can restore its state.&quot;\n&lt;a href=&quot;https://developer.android.com/reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)&quot; rel=&quot;noreferrer&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To help reduce boilerplate I use the following &lt;code&gt;interface&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; to read/write to a &lt;code&gt;Bundle&lt;/code&gt; for saving instance state.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;First, create an interface that will be used to annotate your instance variables:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.Documented;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.ElementType;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.Retention;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.RetentionPolicy;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.Target;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Documented&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@Target({\n        ElementType.FIELD\n})&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;@interface&lt;/span&gt; SaveInstance {\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, create a class where reflection will be used to save values to the bundle:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.&lt;span class=&quot;hljs-property&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Activity&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.&lt;span class=&quot;hljs-property&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Fragment&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.&lt;span class=&quot;hljs-property&quot;&gt;os&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Bundle&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.&lt;span class=&quot;hljs-property&quot;&gt;os&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Parcelable&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.&lt;span class=&quot;hljs-property&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Log&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.&lt;span class=&quot;hljs-property&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Serializable&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.&lt;span class=&quot;hljs-property&quot;&gt;lang&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reflect&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Field&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Save and load fields to/from a {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; Bundle}. All fields should be annotated with {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt;\n * SaveInstance}.&amp;lt;/p&amp;gt;\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Icicle&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; final &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;TAG&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Icicle&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Find all fields with the {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; SaveInstance} annotation and add them to the {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; Bundle}.\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;outState&lt;/span&gt;\n     *         The bundle from {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; Activity#onSaveInstanceState(Bundle)} or {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt;\n     *         Fragment#onSaveInstanceState(Bundle)}\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;classInstance&lt;/span&gt;\n     *         The object to access the fields which have the {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; SaveInstance} annotation.\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@see&lt;/span&gt; #load(Bundle, Object)\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;save&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle outState, &lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt; classInstance&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;save&lt;/span&gt;(outState, classInstance, classInstance.&lt;span class=&quot;hljs-title function_&quot;&gt;getClass&lt;/span&gt;());\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Find all fields with the {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; SaveInstance} annotation and add them to the {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; Bundle}.\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;outState&lt;/span&gt;\n     *         The bundle from {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; Activity#onSaveInstanceState(Bundle)} or {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt;\n     *         Fragment#onSaveInstanceState(Bundle)}\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;classInstance&lt;/span&gt;\n     *         The object to access the fields which have the {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; SaveInstance} annotation.\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;baseClass&lt;/span&gt;\n     *         Base class, used to get all superclasses of the instance.\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@see&lt;/span&gt; #load(Bundle, Object, Class)\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;save&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle outState, &lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt; classInstance, Class&amp;lt;?&amp;gt; baseClass&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (outState == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; clazz = classInstance.&lt;span class=&quot;hljs-title function_&quot;&gt;getClass&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (baseClass.&lt;span class=&quot;hljs-title function_&quot;&gt;isAssignableFrom&lt;/span&gt;(clazz)) {\n            &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; className = clazz.&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Field&lt;/span&gt; field : clazz.&lt;span class=&quot;hljs-title function_&quot;&gt;getDeclaredFields&lt;/span&gt;()) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (field.&lt;span class=&quot;hljs-title function_&quot;&gt;isAnnotationPresent&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;SaveInstance&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;class&lt;/span&gt;)) {\n                    field.&lt;span class=&quot;hljs-title function_&quot;&gt;setAccessible&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; key = className + &lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt; + field.&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;();\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n                        &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; value = field.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(classInstance);\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Parcelable&lt;/span&gt;) {\n                            outState.&lt;span class=&quot;hljs-title function_&quot;&gt;putParcelable&lt;/span&gt;(key, (&lt;span class=&quot;hljs-title class_&quot;&gt;Parcelable&lt;/span&gt;) value);\n                        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Serializable&lt;/span&gt;) {\n                            outState.&lt;span class=&quot;hljs-title function_&quot;&gt;putSerializable&lt;/span&gt;(key, (&lt;span class=&quot;hljs-title class_&quot;&gt;Serializable&lt;/span&gt;) value);\n                        }\n                    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Throwable&lt;/span&gt; t) {\n                        &lt;span class=&quot;hljs-title class_&quot;&gt;Log&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;d&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;TAG&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;The field &apos;&quot;&lt;/span&gt; + key + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; was not added to the bundle&quot;&lt;/span&gt;);\n                    }\n                }\n            }\n            clazz = clazz.&lt;span class=&quot;hljs-title function_&quot;&gt;getSuperclass&lt;/span&gt;();\n        }\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Load all saved fields that have the {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; SaveInstance} annotation.\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;savedInstanceState&lt;/span&gt;\n     *         The saved-instance {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; Bundle} from an {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; Activity} or {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; Fragment}.\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;classInstance&lt;/span&gt;\n     *         The object to access the fields which have the {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; SaveInstance} annotation.\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@see&lt;/span&gt; #save(Bundle, Object)\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;load&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle savedInstanceState, &lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt; classInstance&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;load&lt;/span&gt;(savedInstanceState, classInstance, classInstance.&lt;span class=&quot;hljs-title function_&quot;&gt;getClass&lt;/span&gt;());\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Load all saved fields that have the {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; SaveInstance} annotation.\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;savedInstanceState&lt;/span&gt;\n     *         The saved-instance {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; Bundle} from an {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; Activity} or {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; Fragment}.\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;classInstance&lt;/span&gt;\n     *         The object to access the fields which have the {&lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; SaveInstance} annotation.\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;baseClass&lt;/span&gt;\n     *         Base class, used to get all superclasses of the instance.\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@see&lt;/span&gt; #save(Bundle, Object, Class)\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;load&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle savedInstanceState, &lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt; classInstance, Class&amp;lt;?&amp;gt; baseClass&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (savedInstanceState == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; clazz = classInstance.&lt;span class=&quot;hljs-title function_&quot;&gt;getClass&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (baseClass.&lt;span class=&quot;hljs-title function_&quot;&gt;isAssignableFrom&lt;/span&gt;(clazz)) {\n            &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; className = clazz.&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Field&lt;/span&gt; field : clazz.&lt;span class=&quot;hljs-title function_&quot;&gt;getDeclaredFields&lt;/span&gt;()) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (field.&lt;span class=&quot;hljs-title function_&quot;&gt;isAnnotationPresent&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;SaveInstance&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;class&lt;/span&gt;)) {\n                    &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; key = className + &lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt; + field.&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;();\n                    field.&lt;span class=&quot;hljs-title function_&quot;&gt;setAccessible&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n                        &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; fieldVal = savedInstanceState.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(key);\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fieldVal != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                            field.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(classInstance, fieldVal);\n                        }\n                    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Throwable&lt;/span&gt; t) {\n                        &lt;span class=&quot;hljs-title class_&quot;&gt;Log&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;d&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;TAG&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;The field &apos;&quot;&lt;/span&gt; + key + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; was not retrieved from the bundle&quot;&lt;/span&gt;);\n                    }\n                }\n            }\n            clazz = clazz.&lt;span class=&quot;hljs-title function_&quot;&gt;getSuperclass&lt;/span&gt;();\n        }\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Example usage:&lt;/h2&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Activity&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@SaveInstance&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; foo;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@SaveInstance&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; int bar;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@SaveInstance&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt; baz;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@SaveInstance&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;boolean&lt;/span&gt; qux;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onCreate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle savedInstanceState&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;onCreate&lt;/span&gt;(savedInstanceState);\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Icicle&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;load&lt;/span&gt;(savedInstanceState, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onSaveInstanceState&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle outState&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;onSaveInstanceState&lt;/span&gt;(outState);\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Icicle&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;save&lt;/span&gt;(outState, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This code was adapted from a library project named &lt;a href=&quot;https://github.com/CardinalNow/AndroidAutowire&quot;&gt;AndroidAutowire&lt;/a&gt; which is licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/CardinalNow/AndroidAutowire/master/LICENSE&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Meanwhile I do in general no more use&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-undefined&quot;&gt;Bundle savedInstanceState &amp;amp; Co\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The life cycle is for most activities too complicated and not necessary.&lt;/p&gt;\n\n&lt;p&gt;And Google states itself, it is NOT even reliable.&lt;/p&gt;\n\n&lt;p&gt;My way is to save any changes immediately in the preferences:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt; SharedPreferences &lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;;\n &lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.edit&lt;/span&gt;()&lt;span class=&quot;hljs-selector-class&quot;&gt;.put&lt;/span&gt;(..)&lt;span class=&quot;hljs-selector-class&quot;&gt;.commit&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In some way SharedPreferences work similar like Bundles.\nAnd naturally and at first such values have to be read from preferences.&lt;/p&gt;\n\n&lt;p&gt;In the case of complex data you may use SQLite instead of using preferences.&lt;/p&gt;\n\n&lt;p&gt;When applying this concept, the activity just continues to use the last saved state, regardless of whether it was an initial open with reboots in between or a reopen due to the back stack.&lt;/p&gt;\n    ","\n&lt;p&gt;To answer the original question directly. savedInstancestate is null because your Activity is never being re-created.&lt;/p&gt;\n\n&lt;p&gt;Your Activity will only be re-created with a state bundle when:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Configuration changes such as changing the orientation or phone language which may requires a new activity instance to be created.&lt;/li&gt;\n&lt;li&gt;You return to the app from the background after the OS has destroyed the activity. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Android will destroy background activities when under memory pressure or after they&apos;ve been in the background for an extended period of time.&lt;/p&gt;\n\n&lt;p&gt;When testing your hello world example there are a few ways to leave and return to the Activity.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;When you press the back button the Activity is finished. Re-launching the app is a brand new instance. You aren&apos;t resuming from the background at all.&lt;/li&gt;\n&lt;li&gt;When you press the home button or use the task switcher the Activity will go into the background. When navigating back to the application onCreate will only be called if the Activity had to be destroyed. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In most cases if you&apos;re just pressing home and then launching the app again the activity won&apos;t need to be re-created. It already exists in memory so onCreate() won&apos;t be called.&lt;/p&gt;\n\n&lt;p&gt;There is an option under Settings -&amp;gt; Developer Options called &quot;Don&apos;t keep activities&quot;. When it&apos;s enabled Android will always destroy activities and recreate them when they&apos;re backgrounded. This is a great option to leave enabled when developing because it simulates the worst case scenario. ( A low memory device recycling your activities all the time ).&lt;/p&gt;\n\n&lt;p&gt;The other answers are valuable in that they teach you the correct ways to store state but I didn&apos;t feel they really answered WHY your code wasn&apos;t working in the way you expected.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;onSaveInstanceState(bundle)&lt;/code&gt; and &lt;code&gt;onRestoreInstanceState(bundle)&lt;/code&gt; methods are useful for data persistence merely while rotating the screen (orientation change).&lt;br&gt;\nThey are not even good while switching between applications (since the &lt;code&gt;onSaveInstanceState()&lt;/code&gt; method is called but &lt;code&gt;onCreate(bundle)&lt;/code&gt; and &lt;code&gt;onRestoreInstanceState(bundle)&lt;/code&gt; is not invoked again.&lt;br&gt;\nFor more persistence use shared preferences. &lt;a href=&quot;http://www.eigo.co.uk/Managing-State-in-an-Android-Activity.aspx&quot;&gt;read this article&lt;/a&gt;  &lt;/p&gt;\n    ","\n&lt;p&gt;My problem was that I needed persistence only during the application lifetime (i.e. a single execution including starting other sub-activities within the same app and rotating the device etc). I tried various combinations of the above answers but did not get what I wanted in all situations. In the end what worked for me was to obtain a reference to the savedInstanceState during onCreate:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;mySavedInstanceState&lt;/span&gt;=savedInstanceState&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and use that to obtain the contents of my variable when I needed it, along the lines of:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (mySavedInstanceState !=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myVariable&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mySavedInstanceState.getBoolean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyVariable&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I use &lt;code&gt;onSaveInstanceState&lt;/code&gt;and &lt;code&gt;onRestoreInstanceState&lt;/code&gt; as suggested above but I guess i could also or alternatively use my method to save the variable when it changes (e.g. using &lt;code&gt;putBoolean&lt;/code&gt;)&lt;/p&gt;\n    ","\n&lt;p&gt;Although the accepted answer is correct, there is a faster and easier method to save the Activity state on Android using a library called &lt;a href=&quot;https://github.com/frankiesardo/icepick&quot;&gt;Icepick&lt;/a&gt;. Icepick is an annotation processor that takes care of all the boilerplate code used in saving and restoring state for you. &lt;/p&gt;\n\n&lt;p&gt;Doing something like this with Icepick:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-meta&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; username; &lt;span class=&quot;hljs-comment&quot;&gt;// These will be automatically saved and restored&lt;/span&gt;\n  &lt;span class=&quot;hljs-meta&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; password;\n  &lt;span class=&quot;hljs-meta&quot;&gt;@State&lt;/span&gt; int age;\n\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt; public void onCreate(&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; savedInstanceState) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);\n    &lt;span class=&quot;hljs-type&quot;&gt;Icepick&lt;/span&gt;.restoreInstanceState(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, savedInstanceState);\n  }\n\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt; public void onSaveInstanceState(&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; outState) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(outState);\n    &lt;span class=&quot;hljs-type&quot;&gt;Icepick&lt;/span&gt;.saveInstanceState(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, outState);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is the same as doing this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; username;\n  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; password;\n  int age;\n\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n  public void onSaveInstanceState(&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; savedInstanceState) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(savedInstanceState);\n    savedInstanceState.putString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyString&quot;&lt;/span&gt;, username);\n    savedInstanceState.putString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyPassword&quot;&lt;/span&gt;, password);\n    savedInstanceState.putInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyAge&quot;&lt;/span&gt;, age); \n    &lt;span class=&quot;hljs-comment&quot;&gt;/* remember you would need to actually initialize these variables before putting it in the\n    Bundle */&lt;/span&gt;\n  }\n\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n  public void onRestoreInstanceState(&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; savedInstanceState) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onRestoreInstanceState(savedInstanceState);\n    username = savedInstanceState.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyString&quot;&lt;/span&gt;);\n    password = savedInstanceState.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyPassword&quot;&lt;/span&gt;);\n    age = savedInstanceState.getInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyAge&quot;&lt;/span&gt;);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Icepick will work with any object that saves its state with a &lt;code&gt;Bundle&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;When an activity is created it&apos;s  onCreate() method is called.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;   &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onCreate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle savedInstanceState&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;onCreate&lt;/span&gt;(savedInstanceState);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;savedInstanceState is an object of Bundle class which is null for the first time, but it contains values when it is recreated. To save Activity&apos;s state you have to override onSaveInstanceState().&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;   &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onSaveInstanceState&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle outState&lt;/span&gt;) {\n      outState.&lt;span class=&quot;hljs-title function_&quot;&gt;putString&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Welcome Back&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;onSaveInstanceState&lt;/span&gt;(outState);       &lt;span class=&quot;hljs-comment&quot;&gt;//save state&lt;/span&gt;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;put your values in &quot;outState&quot; Bundle object like outState.putString(&quot;key&quot;,&quot;Welcome Back&quot;) and save by calling super.\nWhen activity will be destroyed it&apos;s state get saved in Bundle object and can be restored after recreation in onCreate() or onRestoreInstanceState(). Bundle received in onCreate() and onRestoreInstanceState() are same.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;   &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onCreate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle savedInstanceState&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;onCreate&lt;/span&gt;(savedInstanceState);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;setContentView&lt;/span&gt;(R.&lt;span class=&quot;hljs-property&quot;&gt;layout&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;activity_main&lt;/span&gt;);\n\n          &lt;span class=&quot;hljs-comment&quot;&gt;//restore activity&apos;s state&lt;/span&gt;\n         &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(savedInstanceState!=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;){\n          &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; reStoredString=savedInstanceState.&lt;span class=&quot;hljs-title function_&quot;&gt;getString&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;);\n            }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;//restores activity&apos;s saved state&lt;/span&gt;\n &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onRestoreInstanceState&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle savedInstanceState&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; restoredMessage=savedInstanceState.&lt;span class=&quot;hljs-title function_&quot;&gt;getString&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are basically two ways to implement this change.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;using &lt;code&gt;onSaveInstanceState()&lt;/code&gt; and &lt;code&gt;onRestoreInstanceState()&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;In manifest &lt;code&gt;android:configChanges=&quot;orientation|screenSize&quot;&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I really do not recommend to use second method. Since in one of my experience it was causing half of the device screen black while rotating from portrait to landscape and vice versa. &lt;/p&gt;\n\n&lt;p&gt;Using first method mentioned above , we can persist data when orientation is changed or any config change happens.\nI know a way in which you can store any type of data inside savedInstance state object.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Example: Consider a case if you want to persist Json object.\ncreate a model class with getters and setters .&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyModel&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Serializable&lt;/span&gt;&lt;/span&gt;{\n&lt;span class=&quot;hljs-type&quot;&gt;JSONObject&lt;/span&gt; obj;\n\nsetJsonObject(&lt;span class=&quot;hljs-type&quot;&gt;JsonObject&lt;/span&gt; obj)\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.obj=obj;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;JSONObject&lt;/span&gt; getJsonObject()\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.obj;\n} \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Now in your activity in onCreate and onSaveInstanceState method do the following. It will look something like this:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;onCreate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle savedInstaceState&lt;/span&gt;){\n&lt;span class=&quot;hljs-title class_&quot;&gt;MyModel&lt;/span&gt; data= (&lt;span class=&quot;hljs-title class_&quot;&gt;MyModel&lt;/span&gt;)savedInstaceState.&lt;span class=&quot;hljs-title function_&quot;&gt;getSerializable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yourkey&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt; obj=data.&lt;span class=&quot;hljs-title function_&quot;&gt;getJsonObject&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;//Here you have retained JSONObject and can use.&lt;/span&gt;\n}\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onSaveInstanceState&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle outState&lt;/span&gt;) {\n&lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;onSaveInstanceState&lt;/span&gt;(outState);\n&lt;span class=&quot;hljs-comment&quot;&gt;//Obj is some json object &lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;MyModel&lt;/span&gt; dataToSave= &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyModel&lt;/span&gt;();\ndataToSave.&lt;span class=&quot;hljs-title function_&quot;&gt;setJsonObject&lt;/span&gt;(obj);\noustate.&lt;span class=&quot;hljs-title function_&quot;&gt;putSerializable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yourkey&quot;&lt;/span&gt;,dataToSave); \n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a comment from &lt;strong&gt;Steve Moseley&lt;/strong&gt;&apos;s answer (by &lt;strong&gt;ToolmakerSteve&lt;/strong&gt;) that puts things into perspective (in the whole onSaveInstanceState vs onPause, east cost vs west cost saga)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;@VVK - I partially disagree. Some ways of exiting an app don&apos;t trigger\n  onSaveInstanceState (oSIS). This limits the usefulness of oSIS. Its\n  worth supporting, for minimal OS resources, but if an app wants to\n  return the user to the state they were in, no matter how the app was\n  exited, it is necessary to use a persistent storage approach instead.\n  &lt;strong&gt;I use onCreate to check for bundle, and if it is missing, then check&lt;/strong&gt;\n  &lt;strong&gt;persistent storage.&lt;/strong&gt; This centralizes the decision making. I can\n  recover from a crash, or back button exit or custom menu item Exit, or\n  get back to screen user was on many days later.  ToolmakerSteve Sep\n  19 &apos;15 at 10:38&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Kotlin code:&lt;/p&gt;\n\n&lt;p&gt;save:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(outState: &lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(outState.apply {\n        putInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;intKey&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        putString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;stringKey&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;String Value&quot;&lt;/span&gt;)\n        putParcelable(&lt;span class=&quot;hljs-string&quot;&gt;&quot;parcelableKey&quot;&lt;/span&gt;, parcelableObject)\n    })\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then in &lt;code&gt;onCreate()&lt;/code&gt; or &lt;code&gt;onRestoreInstanceState()&lt;/code&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;restoredInt&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; savedInstanceState?.getInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;intKey&quot;&lt;/span&gt;) ?: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//default int&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;restoredString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; savedInstanceState?.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;stringKey&quot;&lt;/span&gt;) ?: &lt;span class=&quot;hljs-string&quot;&gt;&quot;default string&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;restoredParcelable&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; savedInstanceState?.getParcelable&amp;lt;ParcelableClass&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;parcelableKey&quot;&lt;/span&gt;) ?: ParcelableClass() &lt;span class=&quot;hljs-comment&quot;&gt;//default parcelable&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Add default values if you don&apos;t want to have Optionals&lt;/p&gt;\n    ","\n&lt;p&gt;To get activity state data stored in &lt;code&gt;onCreate()&lt;/code&gt;, first you have to save data in savedInstanceState by overriding &lt;code&gt;SaveInstanceState(Bundle savedInstanceState)&lt;/code&gt; method.&lt;/p&gt;\n\n&lt;p&gt;When activity destroy &lt;code&gt;SaveInstanceState(Bundle savedInstanceState)&lt;/code&gt; method gets called and there you save data you want to save. And you get same in &lt;code&gt;onCreate()&lt;/code&gt; when activity restart.(savedInstanceState wont be null since you have saved some data in it before activity get destroyed)&lt;/p&gt;\n    ","\n&lt;h1&gt;Kotlin&lt;/h1&gt;\n\n&lt;p&gt;You must override &lt;code&gt;onSaveInstanceState&lt;/code&gt; and &lt;code&gt;onRestoreInstanceState&lt;/code&gt; to store and retrieve your variables you want to be persistent&lt;/p&gt;\n\n&lt;h3&gt;Life cycle graph&lt;/h3&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/Ts2F1.png&quot;&gt;&lt;/p&gt;\n\n&lt;h3&gt;Store variables&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(savedInstanceState: &lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(savedInstanceState)\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// prepare variables here&lt;/span&gt;\n    savedInstanceState.putInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kInt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n    savedInstanceState.putBoolean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kBool&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n    savedInstanceState.putDouble(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kDouble&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4.5&lt;/span&gt;)\n    savedInstanceState.putString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kString&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello Kotlin&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Retrieve variables&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(savedInstanceState: &lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onRestoreInstanceState(savedInstanceState)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; myInt = savedInstanceState.getInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kInt&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; myBoolean = savedInstanceState.getBoolean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kBool&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; myDouble = savedInstanceState.getDouble(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kDouble&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; myString = savedInstanceState.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kString&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-comment&quot;&gt;// use variables here&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Not sure if my solution is frowned upon or not, but I use a bound service to persist ViewModel state. Whether you store it in memory in the service or persist and retrieve it from a SQLite database depends on your requirements. This is what services of any flavor do, they provide services such as maintaining application state and abstract common business logic. &lt;/p&gt;\n\n&lt;p&gt;Because of memory and processing constraints inherent on mobile devices, I treat Android views in a similar way to a web page. The page does not maintain state, it is purely a presentation layer component whose only purpose is to present application state and accept user input. Recent trends in web app architecture employ the use of the age-old Model, View, Controller (MVC) pattern, where the page is the View, domain data is the model, and the controller sits behind a web service. The same pattern can be employed in Android with the View being, well ... the View, the model is your domain data, and the Controller is implemented as an Android bound service. Whenever you want a view to interact with the controller, bind to it on start/resume and unbind on stop/pause.&lt;/p&gt;\n\n&lt;p&gt;This approach gives you the added bonus of enforcing the Separation of Concern design principle in that all of you application business logic can be moved into your service which reduces duplicated logic across multiple views and allows the view to enforce another important design principle, Single Responsibility.&lt;/p&gt;\n    ","\n&lt;p&gt;Simple quick to solve this problem is using &lt;a href=&quot;https://github.com/frankiesardo/icepick&quot; rel=&quot;noreferrer&quot;&gt;IcePick&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;First, setup the library in &lt;code&gt;app/build.gradle&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;repositories {\n  maven {url &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://clojars.org/repo/&quot;&lt;/span&gt;}\n}\ndependencies {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;frankiesardo:icepick:3.2.0&apos;&lt;/span&gt;\n  provided &lt;span class=&quot;hljs-string&quot;&gt;&apos;frankiesardo:icepick-processor:3.2.0&apos;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, let&apos;s check this example below how to save state in Activity&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ExampleActivity&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-meta&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; username; &lt;span class=&quot;hljs-comment&quot;&gt;// This will be automatically saved and restored&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt; public void onCreate(&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; savedInstanceState) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);\n    &lt;span class=&quot;hljs-type&quot;&gt;Icepick&lt;/span&gt;.restoreInstanceState(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, savedInstanceState);\n  }\n\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt; public void onSaveInstanceState(&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; outState) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(outState);\n    &lt;span class=&quot;hljs-type&quot;&gt;Icepick&lt;/span&gt;.saveInstanceState(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, outState);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It works for Activities, Fragments or any object that needs to serialize its state on a Bundle (e.g. mortar&apos;s ViewPresenters)&lt;/p&gt;\n\n&lt;p&gt;Icepick can also generate the instance state code for custom Views:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CustomView&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;View&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-meta&quot;&gt;@State&lt;/span&gt; int selectedPosition; &lt;span class=&quot;hljs-comment&quot;&gt;// This will be automatically saved and restored&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt; public &lt;span class=&quot;hljs-type&quot;&gt;Parcelable&lt;/span&gt; onSaveInstanceState() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Icepick&lt;/span&gt;.saveInstanceState(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState());\n  }\n\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt; public void onRestoreInstanceState(&lt;span class=&quot;hljs-type&quot;&gt;Parcelable&lt;/span&gt; state) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onRestoreInstanceState(&lt;span class=&quot;hljs-type&quot;&gt;Icepick&lt;/span&gt;.restoreInstanceState(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, state));\n  }\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// You can put the calls to Icepick into a BaseCustomView and inherit from it&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// All Views extending this CustomView automatically have state saved/restored&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Now Android provides &lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/saving-states&quot; rel=&quot;noreferrer&quot;&gt;ViewModels&lt;/a&gt; for saving state, you should try to use that instead of saveInstanceState.&lt;/p&gt;\n    ","\n&lt;p&gt;There is a way to make Android save the states without implementing any method. Just add this line to your Manifest in Activity declaration:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;android:&lt;/span&gt;configChanges=&lt;span class=&quot;hljs-string&quot;&gt;&quot;orientation|screenSize&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It should look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;activity&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;.activities.MyActivity&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;android:configChanges&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;orientation|screenSize&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;activity&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.android.com/guide/topics/resources/runtime-changes&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&lt;/a&gt; you can find more information about this property. &lt;/p&gt;\n\n&lt;p&gt;It&apos;s recommended to let Android handle this for you than the manually handling.&lt;/p&gt;\n    ","\n&lt;h2&gt;What to save and what not to?&lt;/h2&gt;\n\n&lt;p&gt;Ever wondered why the text in the &lt;code&gt;EditText&lt;/code&gt; gets saved automatically while an orientation change? Well, this answer is for you.&lt;/p&gt;\n\n&lt;p&gt;When an instance of an Activity gets destroyed and the System recreates a new instance (for example, configuration change). It tries to recreate it using a set of saved data of old Activity State (&lt;strong&gt;instance state&lt;/strong&gt;).&lt;/p&gt;\n\n&lt;p&gt;Instance state is a collection of &lt;strong&gt;key-value&lt;/strong&gt; pairs stored in a &lt;code&gt;Bundle&lt;/code&gt; object.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;By default System saves the View objects in the Bundle for example.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text in &lt;code&gt;EditText&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Scroll position in a &lt;code&gt;ListView&lt;/code&gt;, etc.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you need another variable to be saved as a part of instance state you should &lt;strong&gt;OVERRIDE&lt;/strong&gt; &lt;code&gt;onSavedInstanceState(Bundle savedinstaneState)&lt;/code&gt; method.&lt;/p&gt;\n\n&lt;p&gt;For example, &lt;code&gt;int currentScore&lt;/code&gt; in a GameActivity&lt;/p&gt;\n\n&lt;h3&gt;More detail about the onSavedInstanceState(Bundle savedinstaneState) while saving data&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onSaveInstanceState&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle savedInstanceState&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Save the user&apos;s current game state&lt;/span&gt;\n    savedInstanceState.&lt;span class=&quot;hljs-title function_&quot;&gt;putInt&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;STATE_SCORE&lt;/span&gt;, mCurrentScore);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Always call the superclass so it can save the view hierarchy state&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;onSaveInstanceState&lt;/span&gt;(savedInstanceState);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;So by mistake if you forget to call\n  &lt;code&gt;super.onSaveInstanceState(savedInstanceState);&lt;/code&gt;the default behavior\n  will not work ie Text in EditText will not save.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h3&gt;Which to choose for restoring Activity state?&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;onCreate&lt;/span&gt;(Bundle savedInstanceState)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;OR&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;onRestoreInstanceState&lt;/span&gt;(Bundle savedInstanceState)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both methods get the same Bundle object, so it does not really matter where you write your restoring logic. The only difference is that in &lt;code&gt;onCreate(Bundle savedInstanceState)&lt;/code&gt; method you will have to give a null check while it is not needed in the latter case. Other answers have already code snippets. You can refer them.&lt;/p&gt;\n\n&lt;h3&gt;More detail about the onRestoreInstanceState(Bundle savedinstaneState)&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onRestoreInstanceState&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Bundle savedInstanceState&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Always call the superclass so it can restore the view hierarchy&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;onRestoreInstanceState&lt;/span&gt;(savedInstanceState);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Restore state members from the saved instance&lt;/span&gt;\n    mCurrentScore = savedInstanceState.&lt;span class=&quot;hljs-title function_&quot;&gt;getInt&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;STATE_SCORE&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Always call &lt;code&gt;super.onRestoreInstanceState(savedInstanceState);&lt;/code&gt; so that System restore the View hierarchy by default&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Bonus&lt;/h2&gt;\n\n&lt;p&gt;The &lt;code&gt;onSaveInstanceState(Bundle savedInstanceState)&lt;/code&gt; is invoked by the system only when the user intends to come back to the Activity. For example, you are using App X and suddenly you get a call. You move to the caller app and come back to the app X. In this case the &lt;code&gt;onSaveInstanceState(Bundle savedInstanceState)&lt;/code&gt; method will be invoked.&lt;/p&gt;\n\n&lt;p&gt;But consider this if a user presses the back button. It is assumed that the user does not intend to come back to the Activity, hence in this case &lt;code&gt;onSaveInstanceState(Bundle savedInstanceState)&lt;/code&gt; will not be invoked by the system.\nPoint being you should consider all the scenarios while saving data.&lt;/p&gt;\n\n&lt;h1&gt;Relevant links:&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/rohitksingh/My_Android_Garage/blob/master/Activity%20Related%20Stuff/app/src/main/java/rohitksingh/com/activityrelatedstuff/FirstActivity.java&quot; rel=&quot;nofollow noreferrer&quot;&gt;Demo on default behavior&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://developer.android.com/guide/components/activities/activity-lifecycle#saras&quot; rel=&quot;nofollow noreferrer&quot;&gt;Android Official Documentation&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Now it makes sense to do 2 ways in the view model.\nif you want to save the first as a saved instance:\nYou can add state parameter in view model like this\n&lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/viewmodel-savedstate#java&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.android.com/topic/libraries/architecture/viewmodel-savedstate#java&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;or you can save variables or object in view model, in this case the view model will hold the life cycle until the activity is destroyed.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HelloAndroidViewModel&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ViewModel&lt;/span&gt; &lt;/span&gt;{\n   public &lt;span class=&quot;hljs-type&quot;&gt;Booelan&lt;/span&gt; firstInit = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n    public &lt;span class=&quot;hljs-type&quot;&gt;HelloAndroidViewModel&lt;/span&gt;() {\n        firstInit = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    ...\n}\n\npublic &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HelloAndroid&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;{\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;TextView&lt;/span&gt; mTextView = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;HelloAndroidViewModel&lt;/span&gt; viewModel = &lt;span class=&quot;hljs-type&quot;&gt;ViewModelProviders&lt;/span&gt;.of(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;).get(&lt;span class=&quot;hljs-type&quot;&gt;HelloAndroidViewModel&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\n  &lt;span class=&quot;hljs-comment&quot;&gt;/** Called when the activity is first created. */&lt;/span&gt;\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n  public void onCreate(&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; savedInstanceState) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);\n\n    mTextView = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;TextView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Because even if the state is deleted, the data in the viewmodel will be kept because the activity does not destroy&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!viewModel.firstInit){\n        viewModel.firstInit = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n        mTextView.setText(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Welcome to HelloAndroid!&quot;&lt;/span&gt;);\n    }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n       mTextView.setText(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Welcome back.&quot;&lt;/span&gt;);\n    }\n\n    setContentView(mTextView);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Kotlin Solution:&lt;/strong&gt;\nFor custom class save in &lt;code&gt;onSaveInstanceState&lt;/code&gt; you can be converted your class to &lt;code&gt;JSON&lt;/code&gt; string and restore it with &lt;code&gt;Gson&lt;/code&gt; convertion and for single &lt;code&gt;String, Double, Int, Long&lt;/code&gt; value save and restore as following. The following example is for &lt;code&gt;Fragment&lt;/code&gt; and &lt;code&gt;Activity&lt;/code&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;For Activity:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For put data in &lt;code&gt;saveInstanceState&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(outState: &lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(outState)\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//for custom class-----&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; gson = Gson()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; json = gson.toJson(your_custom_class)\n        outState.putString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;CUSTOM_CLASS&quot;&lt;/span&gt;, json)\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//for single value------&lt;/span&gt;\n        outState.putString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyString&quot;&lt;/span&gt;, stringValue)\n        outState.putBoolean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyBoolean&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n        outState.putDouble(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myDouble&quot;&lt;/span&gt;, doubleValue)\n        outState.putInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyInt&quot;&lt;/span&gt;, intValue)\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Restore data:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(savedInstanceState: &lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onRestoreInstanceState(savedInstanceState)\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//for custom class restore&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; json = savedInstanceState?.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;CUSTOM_CLASS&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!json!!.isEmpty()) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; gson = Gson()\n        testBundle = gson.fromJson(json, Session::&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;.java)\n    }\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;//for single value restore&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; myBoolean: &lt;span class=&quot;hljs-built_in&quot;&gt;Boolean&lt;/span&gt; = savedInstanceState?.getBoolean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyBoolean&quot;&lt;/span&gt;)\n   &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; myDouble: &lt;span class=&quot;hljs-built_in&quot;&gt;Double&lt;/span&gt; = savedInstanceState?.getDouble(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myDouble&quot;&lt;/span&gt;)\n   &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; myInt: &lt;span class=&quot;hljs-built_in&quot;&gt;Int&lt;/span&gt; = savedInstanceState?.getInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyInt&quot;&lt;/span&gt;)\n   &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; myString: String = savedInstanceState?.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyString&quot;&lt;/span&gt;)\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can restore it on Activity &lt;code&gt;onCreate&lt;/code&gt; also.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;For fragment:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For put class in &lt;code&gt;saveInstanceState&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(outState: &lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(outState)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; gson = Gson()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; json = gson.toJson(customClass)\n        outState.putString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;CUSTOM_CLASS&quot;&lt;/span&gt;, json)\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Restore data:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(savedInstanceState: &lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt;?)&lt;/span&gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onActivityCreated(savedInstanceState)\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//for custom class restore&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (savedInstanceState != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; json = savedInstanceState.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;CUSTOM_CLASS&quot;&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!json!!.isEmpty()) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; gson = Gson()\n                &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; customClass: CustomClass = gson.fromJson(json, CustomClass::&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;.java)\n            }\n        }\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;// for single value restore&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; myBoolean: &lt;span class=&quot;hljs-built_in&quot;&gt;Boolean&lt;/span&gt; = savedInstanceState.getBoolean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyBoolean&quot;&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; myDouble: &lt;span class=&quot;hljs-built_in&quot;&gt;Double&lt;/span&gt; = savedInstanceState.getDouble(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myDouble&quot;&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; myInt: &lt;span class=&quot;hljs-built_in&quot;&gt;Int&lt;/span&gt; = savedInstanceState.getInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyInt&quot;&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; myString: String = savedInstanceState.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyString&quot;&lt;/span&gt;)\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;When is savedInstanceState == null and when is it not null ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3014555/trojan-zbot&quot; title=&quot;1,248 reputation&quot; class=&quot;comment-user&quot;&gt;Trojan.ZBOT&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31222084_151777&quot;&gt;&lt;span title=&quot;2013-12-29 00:50:22Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 29, 2013 at 0:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You&apos;re explicitly destroying your activity by - as you said, navigating away from it, such as by pressing back. Actually, the scenario in which this &apos;savedInstanceState&apos; is used, is when Android destroys your activity for recreation. For intance: If you change the language of your phone while the activity was running (and so different resources from your project need to be loaded). Another very common scenario is when you rotate your phone to the side so that the activity is recreated and displayed in landscape.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1428549/villoren&quot; title=&quot;289 reputation&quot; class=&quot;comment-user&quot;&gt;villoren&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31392779_151777&quot;&gt;&lt;span title=&quot;2014-01-03 19:51:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 3, 2014 at 19:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;To get the second message, enable &quot;Don&apos;t keep activities&quot; in dev options. Press a home button and get back from recents.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1366471/yaroslav-mytkalyk&quot; title=&quot;16,813 reputation&quot; class=&quot;comment-user&quot;&gt;Yaroslav Mytkalyk&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment32694871_151777&quot;&gt;&lt;span title=&quot;2014-02-07 18:34:47Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 7, 2014 at 18:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;this is quite helpful &lt;a href=&quot;http://developer.android.com/training/basics/activity-lifecycle/recreating.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;developer.android.com/training/basics/activity-lifecycle/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2695282/syed-raza-mehdi&quot; title=&quot;4,019 reputation&quot; class=&quot;comment-user&quot;&gt;Syed Raza Mehdi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50774285_151777&quot;&gt;&lt;span title=&quot;2015-07-14 07:00:29Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 14, 2015 at 7:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;you can do it with : onSaveInstanceState(Bundle savedInstanceState)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5733853/vahidhoseini&quot; title=&quot;454 reputation&quot; class=&quot;comment-user&quot;&gt;VahidHoseini&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment65959765_151777&quot;&gt;&lt;span title=&quot;2016-09-04 04:35:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 4, 2016 at 4:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Any chance this works on the phone, but not in the emulator? I cannot seem to get a non-null savedInstanceState.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/29017/adam-jack&quot; title=&quot;590 reputation&quot; class=&quot;comment-user&quot;&gt;Adam Jack&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1643029_151940&quot;&gt;&lt;span title=&quot;2009-11-18 22:39:47Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 18, 2009 at 22:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;CAREFUL: you need to call  super.onSaveInstanceState(savedInstanceState) before adding your values to the Bundle, or they will get wiped out on that call (Droid X Android 2.2).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/510017/jonathan-schneider&quot; title=&quot;25,524 reputation&quot; class=&quot;comment-user&quot;&gt;Jonathan Schneider&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment6449064_151940&quot;&gt;&lt;span title=&quot;2011-04-13 18:59:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 13, 2011 at 18:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Careful: the official documentation states, that you should save important information within the onPause-Method because the onsaveinstance-method is not part of the android lifecycle. &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;developer.android.com/reference/android/app/Activity.html&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/745127/schlingel&quot; title=&quot;8,442 reputation&quot; class=&quot;comment-user&quot;&gt;schlingel&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment14531164_151940&quot;&gt;&lt;span title=&quot;2012-06-19 07:40:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 19, 2012 at 7:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;That fact effectively makes &lt;code&gt;onSaveInstanceState&lt;/code&gt; almost useless except just for case of screen orientation changes. In almost all other cases, you can never rely on it and will need to manually save your UI state somewhere else. Or preventing your app from being killed by overriding BACK button behavior. I don&apos;t understand why they even implemented it like this in the first place. Totally unintuitive. And you can&apos;t have that Bundle the system give you to save things into except in this very particular method.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3055/chakrit&quot; title=&quot;60,168 reputation&quot; class=&quot;comment-user&quot;&gt;chakrit&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25416488_151940&quot;&gt;&lt;span title=&quot;2013-07-05 11:25:45Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 5, 2013 at 11:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that saving / restoring UI state to / from the Bundle is &lt;i&gt;automatically&lt;/i&gt; taken care of &lt;i&gt;for &lt;code&gt;View&lt;/code&gt;s that have been assigned ids&lt;/i&gt;. From the &lt;code&gt;onSaveInstanceState&lt;/code&gt; docs: &quot;The default implementation takes care of most of the UI per-instance state for you by calling &lt;code&gt;onSaveInstanceState()&lt;/code&gt; on each view in the hierarchy that has an id, and by saving the id of the currently focused view (all of which is restored by the default implementation of &lt;code&gt;onRestoreInstanceState(Bundle)&lt;/code&gt;)&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/504611/vicky-chijwani&quot; title=&quot;9,890 reputation&quot; class=&quot;comment-user&quot;&gt;Vicky Chijwani&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50101243_151940&quot;&gt;&lt;span title=&quot;2015-06-24 23:15:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 24, 2015 at 23:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;When is savedInstanceState == null and when is it not null ?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3014555/trojan-zbot&quot; title=&quot;1,248 reputation&quot; class=&quot;comment-user&quot;&gt;Trojan.ZBOT&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31240493_151822&quot;&gt;&lt;span title=&quot;2013-12-29 22:20:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 29, 2013 at 22:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;savedInstanceState is null when the system is creating a new instance of your Activity and not null when it&apos;s restoring.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1700667/gabriel-c%c3%a2mara&quot; title=&quot;1,194 reputation&quot; class=&quot;comment-user&quot;&gt;Gabriel Câmara&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31811527_151822&quot;&gt;&lt;span title=&quot;2014-01-15 13:21:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 15, 2014 at 13:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;... which raises the question of &lt;i&gt;when&lt;/i&gt; does the system need to create a new instance of Activity. Some ways of exiting an app don&apos;t create a bundle, so a new instance must be created. This is the fundamental problem; it means one cannot &lt;i&gt;rely&lt;/i&gt; on existence of bundle, and must do some alternative means of persistent storage. The benefit of onSave/onRestoreInstanceState is that it is a mechanism the system can do &lt;i&gt;abruptly&lt;/i&gt;, without consuming much system resources. So it is good to support that, as well as have persistent storage for more graceful exit from app.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/199364/toolmakersteve&quot; title=&quot;11,966 reputation&quot; class=&quot;comment-user&quot;&gt;ToolmakerSteve&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment53179780_151822&quot;&gt;&lt;span title=&quot;2015-09-19 10:24:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 19, 2015 at 10:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Just to nitpick: it&apos;s not unsafe either. This just depends on what you want to preserve and for how long, which @Bernard isn&apos;t entirely clear on in his original question.   InstanceState is perfect for preserving the current UI state (data entered into controls, current positions in lists and so forth), whereas Pause/Resume is the only possibility for long term persistent storage.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/20402/pontus-gagge&quot; title=&quot;16,991 reputation&quot; class=&quot;comment-user&quot;&gt;Pontus Gagge&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3191512_2909211&quot;&gt;&lt;span title=&quot;2010-06-24 14:01:23Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jun 24, 2010 at 14:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This should be downvoted. It&apos;s not safe to use on(Save|Restore)InstanceState like lifecycle methods (i.e. do anything else in them than save / restore the state). They&apos;re perfectly good for saving / restoring state. Also, how do you want to save / restore state in onPause and onResume? You don&apos;t get Bundles in those methods that you can use, so you&apos;d have to employ some other state-saving, in databases, files, etc. which is stupid.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/180784/felix&quot; title=&quot;86,844 reputation&quot; class=&quot;comment-user&quot;&gt;Felix&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment3324909_2909211&quot;&gt;&lt;span title=&quot;2010-07-11 10:10:57Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jul 11, 2010 at 10:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;We should not down vote this person at least he made efforts to go through the documentation and I think we people are here for actually building a knowledgeable community and help each other not to DOWN VOTE. so 1 vote up for the effort and I&apos;ll request you people not to down vote rather vote up or don&apos;t vote.... this person clear the confusion that one would like to have when going through documentation. 1 vote up :)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/185022/az&quot; title=&quot;36,969 reputation&quot; class=&quot;comment-user&quot;&gt;AZ_&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment4645331_2909211&quot;&gt;&lt;span title=&quot;2010-11-26 05:13:53Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Nov 26, 2010 at 5:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I dont think this answer deserves a downvote. Atleast he made an effort to answer and had quoted a section from doco.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/518219/gsree&quot; title=&quot;2,882 reputation&quot; class=&quot;comment-user&quot;&gt;GSree&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment5055545_2909211&quot;&gt;&lt;span title=&quot;2011-01-05 04:54:24Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jan 5, 2011 at 4:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer is absolutely correct and deserves UP vote, not down! Let me clarify difference between states for those guys who don&apos;t see it. A GUI state, like selected radio-buttons and some text in the input field, is much less important than the data state, like records added to a list displayed in a ListView. The latter must be stored to the database in onPause because it&apos;s the only guarantied call. If you put it in onSaveInstanceState instead, you risk loosing data if that is not called. But if the radio-button selection is not saved for the same reason - it&apos;s not a big deal.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/457086/jbm&quot; title=&quot;2,856 reputation&quot; class=&quot;comment-user&quot;&gt;JBM&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment7465708_2909211&quot;&gt;&lt;span title=&quot;2011-06-16 15:15:19Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 16, 2011 at 15:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MartinBelcher-Eigo Article says about data in SharedPreferences that &quot;This data is written to the database on the device..&quot;  I believe that the data is stored in a file in the app&apos;s directory of the file system.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/150016/tom&quot; title=&quot;16,339 reputation&quot; class=&quot;comment-user&quot;&gt;Tom&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18601421_3584836&quot;&gt;&lt;span title=&quot;2012-11-26 22:43:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 26, 2012 at 22:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Tom SharefPrefs data is written to xml file. Is xml a kind of database? I&apos;d say it is ;)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2183804/maciejg%c3%b3rski&quot; title=&quot;22,060 reputation&quot; class=&quot;comment-user&quot;&gt;MaciejGórski&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment23397150_3584836&quot;&gt;&lt;span title=&quot;2013-05-02 10:35:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 2, 2013 at 10:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Sorry, that&apos;s not quite correct. onSaveInstanceState gets called before the activity needs to be re-made. i.e. every time the user rotates the device. It is meant for storing transient view states. When android forces the application to close, onSaveInstanceState is actually NOT called (which is why it&apos;s unsafe for storing important application data). onPause, however is guaranteed to be called before the activity is killed, so it should be used to store permanent info in preferences or Squlite. Right answer, wrong reasons.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1122242/moveaway00&quot; title=&quot;908 reputation&quot; class=&quot;comment-user&quot;&gt;moveaway00&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment12631950_2785419&quot;&gt;&lt;span title=&quot;2012-03-28 04:06:13Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 28, 2012 at 4:06&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Because it takes too long to load an SQLite database, considering that this is on the critical path to showing the user the app&apos;s UI.  I have not actually timed it, so I&apos;m happy to be corrected, but surely loading and opening a database file won&apos;t be fast?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/150016/tom&quot; title=&quot;16,339 reputation&quot; class=&quot;comment-user&quot;&gt;Tom&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18600625_6457934&quot;&gt;&lt;span title=&quot;2012-11-26 22:10:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 26, 2012 at 22:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thank you so much for providing a solution a newbie can cut and paste into their app and use right away! @Tom As far as speed goes it takes about seven seconds to store 1000 pairs, but you can do it in an AsyncTask. However, you need to add a finally { cursor.close() } or it will crash from memory leak while doing this.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/733092/noumenon&quot; title=&quot;4,010 reputation&quot; class=&quot;comment-user&quot;&gt;Noumenon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment23464275_6457934&quot;&gt;&lt;span title=&quot;2013-05-04 11:46:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 4, 2013 at 11:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I came across this and while it seems neat I&apos;m hesitant to try utilizing this on Google Glass, which is the device I&apos;m working on/with lately.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/873177/stephen-tetreault&quot; title=&quot;759 reputation&quot; class=&quot;comment-user&quot;&gt;Stephen Tetreault&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41960396_6457934&quot;&gt;&lt;span title=&quot;2014-10-31 18:04:06Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 31, 2014 at 18:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@bagusflyer care to be more specific??? Your comment isn&apos;t helpful and no one can can help you based on that.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/873177/stephen-tetreault&quot; title=&quot;759 reputation&quot; class=&quot;comment-user&quot;&gt;Stephen Tetreault&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41960299_9148893&quot;&gt;&lt;span title=&quot;2014-10-31 18:00:23Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 31, 2014 at 18:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is an answer to a different situation:  two activities within the same app.  OP is about &lt;i&gt;leaving&lt;/i&gt; the app (e.g. home button, or other means to switch to a different app).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/199364/toolmakersteve&quot; title=&quot;11,966 reputation&quot; class=&quot;comment-user&quot;&gt;ToolmakerSteve&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment53448212_9148893&quot;&gt;&lt;span title=&quot;2015-09-27 07:41:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 27, 2015 at 7:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is exactly the answer I was looking for!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5572246/pamela-sillah&quot; title=&quot;164 reputation&quot; class=&quot;comment-user&quot;&gt;Pamela Sillah&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113489116_9148893&quot;&gt;&lt;span title=&quot;2020-10-02 21:11:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 2, 2020 at 21:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In your case &lt;code&gt;onCreate&lt;/code&gt; and &lt;code&gt;onRestoreInstanceState&lt;/code&gt; are not being called because the &lt;code&gt;Activity&lt;/code&gt; is not destroyed at all when you switch apps, so there is no need to restore anything. Android calls &lt;code&gt;onSaveInstanceState&lt;/code&gt; just in case the Activity gets destroyed later (which happens with 100% certainty when rotating the screen because the entire device configuration has changed and the Activity must be re-created from scratch).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/504611/vicky-chijwani&quot; title=&quot;9,890 reputation&quot; class=&quot;comment-user&quot;&gt;Vicky Chijwani&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50101351_12277349&quot;&gt;&lt;span title=&quot;2015-06-24 23:21:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 24, 2015 at 23:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ralphspoon yes, it works for Fragment and Custom View. Please check the example code. I edited my answer. I suggest you to go official docs here &lt;a href=&quot;https://github.com/frankiesardo/icepick&quot; rel=&quot;nofollow noreferrer&quot;&gt;github.com/frankiesardo/icepick&lt;/a&gt; to find more code sample.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1863510/thann-phearum&quot; title=&quot;1,859 reputation&quot; class=&quot;comment-user&quot;&gt;THANN Phearum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment66282181_38820371&quot;&gt;&lt;span title=&quot;2016-09-14 02:28:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 14, 2016 at 2:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ChetanMehra you mean custom view class, right? If it is custom view,  we can override onSaveInstanceState and onRestoreInstanceState like above example of CustomView.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1863510/thann-phearum&quot; title=&quot;1,859 reputation&quot; class=&quot;comment-user&quot;&gt;THANN Phearum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98983470_38820371&quot;&gt;&lt;span title=&quot;2019-05-17 01:56:10Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 17, 2019 at 1:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I mean class object inside view class  for example : class CustomView extends View{ @State ClassA a;} or class CustomView extends View { @ State Inner class{}}&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1725131/chetan-mehra&quot; title=&quot;187 reputation&quot; class=&quot;comment-user&quot;&gt;Chetan Mehra&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98993972_38820371&quot;&gt;&lt;span title=&quot;2019-05-17 10:16:42Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 17, 2019 at 10:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@THANNPhearum Should i ask it as another question?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1725131/chetan-mehra&quot; title=&quot;187 reputation&quot; class=&quot;comment-user&quot;&gt;Chetan Mehra&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98993981_38820371&quot;&gt;&lt;span title=&quot;2019-05-17 10:16:57Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 17, 2019 at 10:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I see. If so, your ClassA should be Parcelable. As it mentioned that It works for Activities, Fragments or any object that needs to serialize its state on a Bundle&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1863510/thann-phearum&quot; title=&quot;1,859 reputation&quot; class=&quot;comment-user&quot;&gt;THANN Phearum&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98995739_38820371&quot;&gt;&lt;span title=&quot;2019-05-17 11:14:31Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 17, 2019 at 11:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is not true. From the documentation: &quot;Unlike saved instance state, ViewModels are destroyed during a system-initiated process death. This is why you should use ViewModel objects in combination with onSaveInstanceState() (or some other disk persistence), stashing identifiers in savedInstanceState to help view models reload the data after system death.&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4804770/vyacheslav-martynenko&quot; title=&quot;297 reputation&quot; class=&quot;comment-user&quot;&gt;Vyacheslav  Martynenko&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment92258388_52038707&quot;&gt;&lt;span title=&quot;2018-10-05 11:10:12Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 5, 2018 at 11:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Just ran into this with permissions changing in the background.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/300236/brill-pappin&quot; title=&quot;4,593 reputation&quot; class=&quot;comment-user&quot;&gt;Brill Pappin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94391977_52038707&quot;&gt;&lt;span title=&quot;2018-12-13 21:07:51Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 13, 2018 at 21:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I agree, from the doc &quot;if you need to handle system-initiated process death, you may want to use onSaveInstanceState() as backup.&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2326640/zhar&quot; title=&quot;2,815 reputation&quot; class=&quot;comment-user&quot;&gt;Zhar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105131531_52038707&quot;&gt;&lt;span title=&quot;2019-12-25 09:40:41Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 25, 2019 at 9:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This has nothing to do with saving the state ,you just giving up orientation changes, keep in mind you app can be restarted and paused and resumed at any time for different events&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4463539/lord-ralf-adolf&quot; title=&quot;161 reputation&quot; class=&quot;comment-user&quot;&gt;lord-ralf-adolf&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105434091_58485428&quot;&gt;&lt;span title=&quot;2020-01-07 20:54:14Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 7, 2020 at 20:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer is for those that wants to save the state when orientation changed and wants to avoid comprehension and implementation of a complex way&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2835520/ignitecoders&quot; title=&quot;4,256 reputation&quot; class=&quot;comment-user&quot;&gt;IgniteCoders&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105435008_58485428&quot;&gt;&lt;span title=&quot;2020-01-07 21:31:58Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 7, 2020 at 21:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;fair enough I see your point ,I think most people who struggle to save state are using fragments because activities actually save stat of UI components as long as they have an ID ,but fragments are more special ,I used fragments once but I will never use them again the save instance stat was a pain to deal with&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4463539/lord-ralf-adolf&quot; title=&quot;161 reputation&quot; class=&quot;comment-user&quot;&gt;lord-ralf-adolf&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105438187_58485428&quot;&gt;&lt;span title=&quot;2020-01-08 00:24:45Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 8, 2020 at 0:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;you are right, but this library is still on release so i think we should wait...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2326640/zhar&quot; title=&quot;2,815 reputation&quot; class=&quot;comment-user&quot;&gt;Zhar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105119079_59262445&quot;&gt;&lt;span title=&quot;2019-12-24 14:24:45Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 24, 2019 at 14:24&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":257,"title":"How can I save an activity state using the save instance state?","content":"\n                \n&lt;p&gt;I&apos;ve been working on the Android SDK platform, and it is a little unclear how to save an application&apos;s state. So given this minor re-tooling of the &apos;Hello, Android&apos; example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.android.hello;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.app.&lt;span class=&quot;hljs-type&quot;&gt;Activity&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.os.&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.widget.&lt;span class=&quot;hljs-type&quot;&gt;TextView&lt;/span&gt;;\n\npublic &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HelloAndroid&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;{\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;TextView&lt;/span&gt; mTextView = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;/** Called when the activity is first created. */&lt;/span&gt;\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n  public void onCreate(&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; savedInstanceState) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);\n\n    mTextView = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;TextView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (savedInstanceState == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n       mTextView.setText(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Welcome to HelloAndroid!&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n       mTextView.setText(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Welcome back.&quot;&lt;/span&gt;);\n    }\n\n    setContentView(mTextView);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I thought it would be enough for the simplest case, but it always responds with the first message, no matter how I navigate away from the app.&lt;/p&gt;\n&lt;p&gt;I&apos;m sure the solution is as simple as overriding &lt;code&gt;onPause&lt;/code&gt; or something like that, but I&apos;ve been poking away in the documentation for 30 minutes or so and haven&apos;t found anything obvious.&lt;/p&gt;\n    ","slug":"how-can-i-save-an-activity-state-using-the-save-instance-state-1657387429981","postType":"QUESTION","createdAt":"2022-07-09T17:23:49.000Z","updatedAt":"2022-07-09T17:23:49.000Z","tags":[{"id":1652,"name":"application-state","slug":"application-state","createdAt":"2022-07-09T17:23:50.000Z","updatedAt":"2022-07-09T17:23:50.000Z","Questions_Tags":{"questionId":257,"tagId":1652}}]}},"__N_SSG":true}