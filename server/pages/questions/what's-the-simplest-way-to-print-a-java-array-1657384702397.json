{"pageProps":{"data":{"answer":["\n&lt;p&gt;Since Java 5 you can use &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#toString-int:A-&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Arrays.toString(arr)&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#deepToString-java.lang.Object:A-&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt;&lt;/a&gt; for arrays within arrays. Note that the &lt;code&gt;Object[]&lt;/code&gt; version calls &lt;code&gt;.toString()&lt;/code&gt; on each object in the array. The output is even decorated in the exact way you&apos;re asking.&lt;/p&gt;\n&lt;p&gt;Examples:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;h3&gt;Simple Array:&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;};\nSystem.out.println(Arrays.toString(array));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;[John, Mary, Bob]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Nested Array:&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[][] deepArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[][] {{&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Alice&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;}};\nSystem.out.println(Arrays.toString(deepArray));\n&lt;span class=&quot;hljs-comment&quot;&gt;//output: [[Ljava.lang.String;@106d69c, [Ljava.lang.String;@52e922]&lt;/span&gt;\nSystem.out.println(Arrays.deepToString(deepArray));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;[[John, Mary], [Alice, Bob]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;&lt;code&gt;double&lt;/code&gt; Array:&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;[] doubleArray = { &lt;span class=&quot;hljs-number&quot;&gt;7.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt; };\nSystem.out.println(Arrays.toString(doubleArray));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;7.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt; ]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;&lt;code&gt;int&lt;/code&gt; Array:&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] intArray = { &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; };\nSystem.out.println(Arrays.toString(intArray));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; ]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Always check the standard libraries first.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Arrays;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then try:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println(Arrays.toString(array));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or if your array contains other arrays as elements:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println(Arrays.deepToString(array));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is nice to know, however, as for &quot;always check the standard libraries first&quot; I&apos;d never have stumbled upon the trick of &lt;code&gt;Arrays.toString( myarray )&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;--since I was concentrating on the type of myarray to see how to do this. I didn&apos;t want to have to iterate through the thing: I wanted an easy call to make it come out similar to what I see in the Eclipse debugger and myarray.toString() just wasn&apos;t doing it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Arrays;\n.\n.\n.\nSystem.out.println( Arrays.toString( myarray ) );\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In JDK1.8 you can use aggregate operations and a lambda expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] strArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// #1&lt;/span&gt;\nArrays.asList(strArray).stream().forEach(s -&amp;gt; System.out.println(s));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// #2&lt;/span&gt;\nStream.of(strArray).forEach(System.out::println);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// #3&lt;/span&gt;\nArrays.stream(strArray).forEach(System.out::println);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* output:\nJohn\nMary\nBob\n*/&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Arrays.toString&lt;/h2&gt;\n&lt;p&gt;As a direct answer, &lt;a href=&quot;https://stackoverflow.com/a/409795/365237&quot;&gt;the solution provided by several, including @Esko&lt;/a&gt;, using the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#toString%28java.lang.Object%5B%5D%29&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Arrays.toString&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#deepToString%28java.lang.Object%5B%5D%29&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Arrays.deepToString&lt;/code&gt;&lt;/a&gt; methods, is simply the best.&lt;/p&gt;\n&lt;h2&gt;Java 8 - Stream.collect(joining()), Stream.forEach&lt;/h2&gt;\n&lt;p&gt;Below I try to list some of the other methods suggested, attempting to improve a little, with the most notable addition being the use of the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.stream.Collector-&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Stream.collect&lt;/code&gt;&lt;/a&gt; operator, using a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#joining-java.lang.CharSequence-&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;joining&lt;/code&gt;&lt;/a&gt; &lt;code&gt;Collector&lt;/code&gt;, to mimic what the &lt;code&gt;String.join&lt;/code&gt; is doing.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] ints = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[] {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\nSystem.out.println(IntStream.of(ints).mapToObj(Integer::toString).collect(Collectors.joining(&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;)));\nSystem.out.println(IntStream.of(ints).boxed().map(Object::toString).collect(Collectors.joining(&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;)));\nSystem.out.println(Arrays.toString(ints));\n\nString[] strs = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;};\nSystem.out.println(Stream.of(strs).collect(Collectors.joining(&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;)));\nSystem.out.println(String.join(&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;, strs));\nSystem.out.println(Arrays.toString(strs));\n\nDayOfWeek [] days = { FRIDAY, MONDAY, TUESDAY };\nSystem.out.println(Stream.of(days).map(Object::toString).collect(Collectors.joining(&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;)));\nSystem.out.println(Arrays.toString(days));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// These options are not the same as each item is printed on a new line:&lt;/span&gt;\nIntStream.of(ints).forEach(System.out::println);\nStream.of(strs).forEach(System.out::println);\nStream.of(days).forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Starting with Java 8, one could also take advantage of the &lt;code&gt;join()&lt;/code&gt; method provided by the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.CharSequence...-&quot;&gt;String class&lt;/a&gt; to print out array elements, without the brackets, and separated by a delimiter of choice (which is the space character for the example shown below):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] greeting = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hey&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;there&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;amigo!&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;delimiter&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;;\nString.join(delimiter, greeting) \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output will be &quot;Hey there amigo!&quot;.&lt;/p&gt;\n    ","\n&lt;h2&gt;Prior to Java 8&lt;/h2&gt;\n\n&lt;p&gt;We could have used &lt;code&gt;Arrays.toString(array)&lt;/code&gt; to print one dimensional array and &lt;code&gt;Arrays.deepToString(array)&lt;/code&gt; for multi-dimensional arrays. &lt;/p&gt;\n\n&lt;h2&gt;Java 8&lt;/h2&gt;\n\n&lt;p&gt;Now we have got the option of &lt;code&gt;Stream&lt;/code&gt; and &lt;code&gt;lambda&lt;/code&gt; to print the array.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Printing One dimensional Array:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] intArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[] {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n    String[] strArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;};\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Prior to Java 8&lt;/span&gt;\n    System.out.println(Arrays.toString(intArray));\n    System.out.println(Arrays.toString(strArray));\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// In Java 8 we have lambda expressions&lt;/span&gt;\n    Arrays.stream(intArray).forEach(System.out::println);\n    Arrays.stream(strArray).forEach(System.out::println);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output is:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;[1, 2, 3, 4, 5]&lt;br&gt;\n  [John, Mary, Bob]&lt;br&gt;\n  1&lt;br&gt;\n  2&lt;br&gt;\n  3&lt;br&gt;\n  4&lt;br&gt;\n  5&lt;br&gt;\n  John&lt;br&gt;\n  Mary&lt;br&gt;\n  Bob&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Printing Multi-dimensional Array&lt;/strong&gt;\nJust in case we want to print multi-dimensional array we can use &lt;code&gt;Arrays.deepToString(array)&lt;/code&gt; as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[][] int2DArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[][] { {&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;}, { &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;}, {&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;} };\n    String[][] str2DArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[][]{ {&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bravo&quot;&lt;/span&gt;} , {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Lee&quot;&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Johnson&quot;&lt;/span&gt;} };\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Prior to Java 8&lt;/span&gt;\n    System.out.println(Arrays.deepToString(int2DArray));\n    System.out.println(Arrays.deepToString(str2DArray));\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// In Java 8 we have lambda expressions&lt;/span&gt;\n    Arrays.stream(int2DArray).flatMapToInt(x -&amp;gt; Arrays.stream(x)).forEach(System.out::println);\n    Arrays.stream(str2DArray).flatMap(x -&amp;gt; Arrays.stream(x)).forEach(System.out::println);\n} \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now the point to observe is that the method &lt;code&gt;Arrays.stream(T[])&lt;/code&gt;, which in case of &lt;code&gt;int[]&lt;/code&gt; returns us &lt;code&gt;Stream&amp;lt;int[]&amp;gt;&lt;/code&gt; and then method &lt;code&gt;flatMapToInt()&lt;/code&gt; maps each element of stream with the contents of a mapped stream produced by applying the provided mapping function to each element.&lt;/p&gt;\n\n&lt;p&gt;The output is:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;[[11, 12], [21, 22], [31, 32, 33]]&lt;br&gt;\n  [[John, Bravo], [Mary, Lee], [Bob, Johnson]]&lt;br&gt;\n  11&lt;br&gt;\n  12&lt;br&gt;\n  21&lt;br&gt;\n  22&lt;br&gt;\n  31&lt;br&gt;\n  32&lt;br&gt;\n  33&lt;br&gt;\n  John&lt;br&gt;\n  Bravo&lt;br&gt;\n  Mary&lt;br&gt;\n  Lee&lt;br&gt;\n  Bob&lt;br&gt;\n  Johnson&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;If you&apos;re using Java 1.4, you can instead do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println(Arrays.asList(array));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(This works in 1.5+ too, of course.)&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; only prints on one line. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[][] table = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To actually get a table to print as a two dimensional table, I had to do this: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println(Arrays.deepToString(table).replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;],&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;],&quot;&lt;/span&gt; + System.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;line.separator&quot;&lt;/span&gt;)));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It seems like the &lt;code&gt;Arrays.deepToString(arr)&lt;/code&gt; method should take a separator string, but unfortunately it doesn&apos;t.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n: someArray) {\n    System.out.println(n+&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Different Ways to Print Arrays in Java:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Simple Way   &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\nlist.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;);\nlist.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;);\nlist.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;);\nlist.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Four&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// Print the list in console&lt;/span&gt;\nSystem.out.println(list);\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Output:\n      [One, Two, Three, Four]&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;p&gt;Using &lt;strong&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] { &lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Four&quot;&lt;/span&gt; };\nSystem.out.println(Arrays.toString(array));\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Output: [One, Two, Three, Four]&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;&lt;p&gt;Printing Array of Arrays&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] arr1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] { &lt;span class=&quot;hljs-string&quot;&gt;&quot;Fifth&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Sixth&quot;&lt;/span&gt; };\nString[] arr2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] { &lt;span class=&quot;hljs-string&quot;&gt;&quot;Seventh&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Eight&quot;&lt;/span&gt; };\nString[][] arrayOfArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[][] { arr1, arr2 };\nSystem.out.println(arrayOfArray);\nSystem.out.println(Arrays.toString(arrayOfArray));\nSystem.out.println(Arrays.deepToString(arrayOfArray));\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Output: [[Ljava.lang.String;@1ad086a [[Ljava.lang.String;@10385c1,\n  [Ljava.lang.String;@42719c] [[Fifth, Sixth], [Seventh, Eighth]]&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Resource: &lt;a href=&quot;http://howtodoinjava.com/core-java/collections/how-to-print-the-content-of-array-in-java/&quot; rel=&quot;noreferrer&quot;&gt;Access An Array&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Using regular &lt;strong&gt;for&lt;/strong&gt; loop is the simplest way of printing array in my opinion.\nHere you have a sample code based on your intArray&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; intArray.length; i++) {\n   System.out.print(intArray[i] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It gives output as yours\n    1, 2, 3, 4, 5&lt;/p&gt;\n    ","\n&lt;p&gt;It should always work whichever JDK version you use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println(Arrays.asList(array));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will work if the &lt;code&gt;Array&lt;/code&gt; contains Objects. If the &lt;code&gt;Array&lt;/code&gt; contains primitive types, you can use wrapper classes instead storing the primitive directly as..&lt;/p&gt;\n\n&lt;p&gt;Example: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Replace it with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Integer[] a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;[]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Update :&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Yes ! this is to be mention that converting an array to an object array OR to use the Object&apos;s array is costly and may slow the execution. it happens by the nature of java called autoboxing.   &lt;/p&gt;\n\n&lt;p&gt;So only for printing purpose, It should not be used. we can make a function which takes an array as parameter and prints the desired format as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; [] a)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-comment&quot;&gt;//write printing code&lt;/span&gt;\n} \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I came across this post in &lt;a href=&quot;http://vanillajava.blogspot.com/2016/03/printing-arrays-by-hacking-jvm.html&quot; rel=&quot;noreferrer&quot;&gt;Vanilla #Java&lt;/a&gt; recently. It&apos;s not very convenient writing &lt;code&gt;Arrays.toString(arr);&lt;/code&gt;, then importing &lt;code&gt;java.util.Arrays;&lt;/code&gt; all the time.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Please note, this is not a permanent fix by any means. Just a hack that can make debugging simpler.&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;Printing an array directly gives the internal representation and the hashCode. Now, all classes have &lt;code&gt;Object&lt;/code&gt; as the parent-type. So, why not hack the &lt;code&gt;Object.toString()&lt;/code&gt;? Without modification, the Object class looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; getClass().getName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;@&quot;&lt;/span&gt; + Integer.toHexString(hashCode());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What if this is changed to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt;[])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Arrays.toString((&lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt;[]) &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;[])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Arrays.toString((&lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;[]) &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;[])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Arrays.toString((&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;[]) &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Arrays.toString((&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[]) &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Arrays.toString((&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[]) &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;[])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Arrays.toString((&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;[]) &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;[])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Arrays.toString((&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;[]) &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;[])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Arrays.toString((&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;[]) &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Object[])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Arrays.deepToString((Object[]) &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; getClass().getName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;@&quot;&lt;/span&gt; + Integer.toHexString(hashCode());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This modded class may simply be added to the class path by adding the following to the command line: &lt;code&gt;-Xbootclasspath/p:target/classes&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Now, with the availability of &lt;code&gt;deepToString(..)&lt;/code&gt; since Java 5, the &lt;code&gt;toString(..)&lt;/code&gt; can easily be changed to &lt;code&gt;deepToString(..)&lt;/code&gt; to add support for arrays that contain other arrays.&lt;/p&gt;\n\n&lt;p&gt;I found this to be a quite useful hack and it would be great if Java could simply add this. I understand potential issues with having very large arrays since the string representations could be problematic. Maybe pass something like a &lt;code&gt;System.out&lt;/code&gt;or a &lt;code&gt;PrintWriter&lt;/code&gt; for such eventualities. &lt;/p&gt;\n    ","\n&lt;p&gt;In java 8 it is easy. there are two keywords&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;stream: &lt;code&gt;Arrays.stream(intArray).forEach&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;method reference: &lt;code&gt;::println&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] intArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[] {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\nArrays.stream(intArray).forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;If you want to print all elements in the array in the same line, then just use &lt;code&gt;print&lt;/code&gt; instead of &lt;code&gt;println&lt;/code&gt; i.e. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] intArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[] {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\nArrays.stream(intArray).forEach(System.out::print);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another way without method reference just use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] intArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[] {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\nSystem.out.println(Arrays.toString(intArray));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You could loop through the array,  printing out each item, as you loop. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] items = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;item 1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;item 2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;item 3&quot;&lt;/span&gt;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; items.length; i++) {\n\n    System.out.println(items[i]);\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;item &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nitem &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nitem &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;There Are Following way to print Array&lt;/strong&gt;          &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// 1) toString()  &lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] arrayInt = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[] {&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;};  \n    System.out.println(Arrays.toString(arrayInt));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2 for loop()&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; number : arrayInt) {\n        System.out.println(number);\n    }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 3 for each()&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x: arrayInt){\n         System.out.println(x);\n     }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There&apos;s one additional way if your array is of type char[]:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; A[] = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;}; \n\nSystem.out.println(A); &lt;span class=&quot;hljs-comment&quot;&gt;// no other arguments&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;prints &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;abc\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A simplified shortcut I&apos;ve tried is this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x[] = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;};\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;printableText&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Arrays.toString(x).replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[\\\\[\\\\]]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;).replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;);\n    System.out.println(printableText);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will print&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;No loops required in this approach and it is best for small arrays only&lt;/p&gt;\n    ","\n&lt;p&gt;Using org.apache.commons.lang3.StringUtils.join(*) methods can be an option&lt;br&gt;\nFor example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] strArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] { &lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt; };\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;arrayAsCSV&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; StringUtils.join(strArray, &lt;span class=&quot;hljs-string&quot;&gt;&quot; , &quot;&lt;/span&gt;);\nSystem.out.printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[%s]&quot;&lt;/span&gt;, arrayAsCSV);\n&lt;span class=&quot;hljs-comment&quot;&gt;//output: [John , Mary , Bob]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I used the following dependency &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt;\n&amp;lt;artifactId&amp;gt;commons-lang3&amp;lt;/artifactId&amp;gt;\n&amp;lt;version&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;3.3&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;&amp;lt;/version&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For-each loop can also be used to print elements of array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; array[] = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i:array)\n    System.out.println(i);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;It is very simple way to print array without using any loop in JAVA.&lt;/p&gt;\n&lt;p&gt;-&amp;gt; For, Single or simple array:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;};\n System.out.println(Arrays.toString(array));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The Output :&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;      [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;-&amp;gt; So, this 2D array can&apos;t be printed with Arrays.toString()&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[][] array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[][]{{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;}, {&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;}};\n System.out.println(Arrays.deepToString(array));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;   [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt; Done Keep Code&lt;/p&gt;\n    ","\n&lt;p&gt;To add to all the answers, printing the object as a JSON string is also an option.&lt;/p&gt;\n\n&lt;p&gt;Using Jackson:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;ObjectWriter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ow&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ObjectMapper&lt;/span&gt;().writer().withDefaultPrettyPrinter();\nSystem.out.println(ow.writeValueAsString(anyArray));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using Gson:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Gson&lt;/span&gt;();\nSystem.out.println(gson.toJson(anyArray));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// array of primitives:&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] intArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[] {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n\nSystem.out.println(Arrays.toString(intArray));\n\noutput: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// array of object references:&lt;/span&gt;\nString[] strArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;};\n\nSystem.out.println(Arrays.toString(strArray));\n\noutput: [John, Mary, Bob]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here a possible printing function:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printArray&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; [] array)&lt;/span&gt;{\n        System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{ &quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.length; i++){\n            System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt; + array[i] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;] &quot;&lt;/span&gt;);\n        }\n        System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;}&quot;&lt;/span&gt;);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For example, if main is like this&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(String [] args)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; [] array = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;};\n    printArray(array);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;the output will be { [1] [2] [3] [4] }&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;printer&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        String a[] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n        &lt;span class=&quot;hljs-type&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Scanner&lt;/span&gt;(System.in);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;enter the data&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;; i++) {\n            a[i] = sc.nextLine();\n        }\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the entered data is&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String i : a) {\n            System.out.println(i);\n        }\n      }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is marked as a duplicate for &lt;a href=&quot;https://stackoverflow.com/questions/50977959/cannot-see-the-contents-of-the-array-printed-in-console&quot;&gt;printing a byte[]&lt;/a&gt;. Note: for a byte array there are additional methods which may be appropriate.&lt;/p&gt;\n\n&lt;p&gt;You can print it as a String if it contains ISO-8859-1 chars.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(bytes, StandardChars.ISO_8559);\nSystem.out.println(s);\n&lt;span class=&quot;hljs-comment&quot;&gt;// to reverse&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;[] bytes2 = s.getBytes(StandardChars.ISO_8559);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or if it contains a UTF-8 string&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(bytes, StandardChars.UTF_8);\nSystem.out.println(s);\n&lt;span class=&quot;hljs-comment&quot;&gt;// to reverse&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;[] bytes2 = s.getBytes(StandardChars.UTF_8);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or if you want print it as hexadecimal.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; DatatypeConverter.printHexBinary(bytes);\nSystem.out.println(s);\n&lt;span class=&quot;hljs-comment&quot;&gt;// to reverse&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;[] bytes2 = DatatypeConverter.parseHexBinary(s);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or if you want print it as base64.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; DatatypeConverter.printBase64Binary(bytes);\nSystem.out.println(s);\n&lt;span class=&quot;hljs-comment&quot;&gt;// to reverse&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;[] bytes2 = DatatypeConverter.parseBase64Binary(s);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or if you want to print an array of signed byte values&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Arrays.toString(bytes);\nSystem.out.println(s);\n&lt;span class=&quot;hljs-comment&quot;&gt;// to reverse&lt;/span&gt;\nString[] split = s.substring(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, s.length() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;[] bytes2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;byte&lt;/span&gt;[split.length];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes2.length; i++)\n    bytes2[i] = Byte.parseByte(split[i]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or if you want to print an array of unsigned byte values&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Arrays.toString(\n               IntStream.range(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, bytes.length).map(i -&amp;gt; bytes[i] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;).toArray());\nSystem.out.println(s);\n&lt;span class=&quot;hljs-comment&quot;&gt;// to reverse&lt;/span&gt;\nString[] split = s.substring(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, s.length() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;[] bytes2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;byte&lt;/span&gt;[split.length];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes2.length; i++)\n    bytes2[i] = (&lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;) Integer.parseInt(split[i]); &lt;span class=&quot;hljs-comment&quot;&gt;// might need a range check.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;if you are running jdk 8. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;StringJoiner&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;joiner&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringJoiner&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;);\n    Arrays.stream(array).forEach(element -&amp;gt; joiner.add(element + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;));\n    System.out.println(joiner.toString());\n}\n\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[]{&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;};\nprint(array);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you are using Java 11&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Arrays;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HelloWorld&lt;/span&gt;{\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String []args)&lt;/span&gt;{\n        String[] array = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mahta&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Sara&quot;&lt;/span&gt; };\n       System.out.println(Arrays.toString(array).replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;).replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;).replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;));\n     }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output :&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;John Mahta Sara\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In java 8 :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Arrays.stream(myArray).forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What do you want the representation to be for objects other than strings? The result of calling toString? In quotes or not?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/22656/jon-skeet&quot; title=&quot;1,342,492 reputation&quot; class=&quot;comment-user&quot;&gt;Jon Skeet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment234712_409784&quot;&gt;&lt;span title=&quot;2009-01-03 20:41:29Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jan 3, 2009 at 20:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yes objects would be represented by their toString() method and without quotes (just edited the example output).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12149/alex-spurling&quot; title=&quot;51,537 reputation&quot; class=&quot;comment-user owner&quot;&gt;Alex Spurling&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment234717_409784&quot;&gt;&lt;span title=&quot;2009-01-03 20:42:45Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jan 3, 2009 at 20:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In practice, closely related to &lt;a href=&quot;http://stackoverflow.com/questions/29140402/how-do-i-print-my-java-object-without-getting-sometype2f92e0f4&quot; title=&quot;how do i print my java object without getting sometype2f92e0f4&quot;&gt;stackoverflow.com/questions/29140402/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/545127/raedwald&quot; title=&quot;43,888 reputation&quot; class=&quot;comment-user&quot;&gt;Raedwald&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment57687878_409784&quot;&gt;&lt;span title=&quot;2016-01-24 18:02:46Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 24, 2016 at 18:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;That weird output is not necessarily the memory location. It&apos;s the &lt;code&gt;hashCode()&lt;/code&gt; in hexadecimal. See &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Object#toString()&lt;/code&gt;&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5743988/4castle&quot; title=&quot;30,850 reputation&quot; class=&quot;comment-user&quot;&gt;4castle&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment68313951_409784&quot;&gt;&lt;span title=&quot;2016-11-10 21:22:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 10, 2016 at 21:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;To print single dimensional or multi-dimensional array in java8 check &lt;a href=&quot;http://stackoverflow.com/questions/409784/whats-the-simplest-way-to-print-a-java-array/30931066#30931066&quot; title=&quot;whats the simplest way to print a java array&quot;&gt;stackoverflow.com/questions/409784/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1216775/akhil-mittal&quot; title=&quot;21,553 reputation&quot; class=&quot;comment-user&quot;&gt;akhil_mittal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment68479173_409784&quot;&gt;&lt;span title=&quot;2016-11-16 01:28:38Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 16, 2016 at 1:28&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What if we have an array of strings, and want simple output; like: &lt;code&gt;String[] array = {&quot;John&quot;, &quot;Mahta&quot;, &quot;Sara&quot;}&lt;/code&gt;, and we want this output without bracket and commas: &lt;code&gt;John Mahta Sara&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4723778/hengameh&quot; title=&quot;864 reputation&quot; class=&quot;comment-user&quot;&gt;Hengameh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment52442630_409795&quot;&gt;&lt;span title=&quot;2015-08-29 02:34:41Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 29, 2015 at 2:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Hengameh: There are several other ways to do this, but my favorite is this one: &lt;a href=&quot;http://www.javahotchocolate.com/notes/java.html#arrays-tostring&quot; rel=&quot;nofollow noreferrer&quot;&gt;javahotchocolate.com/notes/java.html#arrays-tostring&lt;/a&gt; .&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/339736/russ-bateman&quot; title=&quot;17,821 reputation&quot; class=&quot;comment-user&quot;&gt;Russ Bateman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment52444644_409795&quot;&gt;&lt;span title=&quot;2015-08-29 06:16:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 29, 2015 at 6:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;FYI, &lt;code&gt;Arrays.deepToString()&lt;/code&gt; accepts only an &lt;code&gt;Object []&lt;/code&gt; (or an array of classes that extend &lt;code&gt;Object&lt;/code&gt;, such as &lt;code&gt;Integer&lt;/code&gt;, so it won&apos;t work on a primitive array of type &lt;code&gt;int []&lt;/code&gt;.  But &lt;code&gt;Arrays.toString(&amp;lt;int array&amp;gt;)&lt;/code&gt; works fine for primitive arrays.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1442960/marcus&quot; title=&quot;1,963 reputation&quot; class=&quot;comment-user&quot;&gt;Marcus&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment56212264_409795&quot;&gt;&lt;span title=&quot;2015-12-11 23:25:12Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 11, 2015 at 23:25&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Hengameh There&apos;s a method dedicated to that. &lt;code&gt;System.out.println(String.join(&quot; &quot;, new String[]{&quot;John&quot;, &quot;Mahta&quot;, &quot;Sara&quot;}))&lt;/code&gt; will print &lt;code&gt;John Mahta Sara&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/6304349/dorukayhan&quot; title=&quot;1,495 reputation&quot; class=&quot;comment-user&quot;&gt;dorukayhan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment72646741_409795&quot;&gt;&lt;span title=&quot;2017-03-13 14:15:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 13, 2017 at 14:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Don&apos;t forget &quot;import java.util.Arrays;&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3940670/m-hossein-rahimi&quot; title=&quot;527 reputation&quot; class=&quot;comment-user&quot;&gt;M.Hossein Rahimi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103318863_409795&quot;&gt;&lt;span title=&quot;2019-10-21 21:48:53Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 21, 2019 at 21:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Hengameh Nowadays with Java 8: &lt;code&gt;String.join(&quot; &quot;, Arrays.asList(array))&lt;/code&gt;. &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.Iterable-&quot; rel=&quot;nofollow noreferrer&quot;&gt;doc&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1896169/justin&quot; title=&quot;23,058 reputation&quot; class=&quot;comment-user&quot;&gt;Justin&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment59284854_409812&quot;&gt;&lt;span title=&quot;2016-03-04 23:14:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 4, 2016 at 23:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;if you use  IntStream.of(ints).forEach(System.out::print); i don&apos;t think it will print in new line..&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2987706/prashant&quot; title=&quot;2,528 reputation&quot; class=&quot;comment-user&quot;&gt;Prashant&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment127290635_35933005&quot;&gt;&lt;span title=&quot;2022-04-28 07:08:10Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 28 at 7:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Unfortunately this only works with arrays of objects, not arrays of primitives.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12149/alex-spurling&quot; title=&quot;51,537 reputation&quot; class=&quot;comment-user owner&quot;&gt;Alex Spurling&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment234890_409908&quot;&gt;&lt;span title=&quot;2009-01-03 21:57:57Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Jan 3, 2009 at 21:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Maybe use System.getProperty(&quot;line.separator&quot;); instead of \\r\\n so it is right for non-Windows as well.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1530549/scooter&quot; title=&quot;6,428 reputation&quot; class=&quot;comment-user&quot;&gt;Scooter&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31047369_19201690&quot;&gt;&lt;span title=&quot;2013-12-21 22:01:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 21, 2013 at 22:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This way you end up with an empty space ;)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1731200/matthias&quot; title=&quot;4,171 reputation&quot; class=&quot;comment-user&quot;&gt;Matthias&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment40640235_4778628&quot;&gt;&lt;span title=&quot;2014-09-21 09:23:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2014 at 9:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ matthiad .. this line will avoid ending up with empty space  System.out.println(n+ (someArray.length == n) ? &quot;&quot; : &quot; &quot;);&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1377498/muhammad-suleman&quot; title=&quot;2,832 reputation&quot; class=&quot;comment-user&quot;&gt;Muhammad Suleman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49216997_4778628&quot;&gt;&lt;span title=&quot;2015-06-01 12:29:18Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 1, 2015 at 12:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MuhammadSuleman That doesn&apos;t work, because this is a for-each loop. &lt;code&gt;n&lt;/code&gt; is the actual value from the array, not the index. For a regular for loop, it would also be &lt;code&gt;(someArray.length - 1) == i&lt;/code&gt;, because it breaks when &lt;code&gt;i&lt;/code&gt; is equal to the array length.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2891664/radiodef&quot; title=&quot;36,387 reputation&quot; class=&quot;comment-user&quot;&gt;Radiodef&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90393696_4778628&quot;&gt;&lt;span title=&quot;2018-08-06 22:02:18Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 6, 2018 at 22:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It prints &quot;1, 2, 3, 4, 5, &quot; as output, it prints comma after the last element too.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1705598/icza&quot; title=&quot;346,068 reputation&quot; class=&quot;comment-user&quot;&gt;icza&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment33879889_20809247&quot;&gt;&lt;span title=&quot;2014-03-10 11:32:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 10, 2014 at 11:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You could replace the code within the loop with &lt;code&gt;System.out.print(intArray[i]); if(i != intArray.length - 1) System.out.print(&quot;, &quot;);&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/810830/nepoxx&quot; title=&quot;4,271 reputation&quot; class=&quot;comment-user&quot;&gt;Nepoxx&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment38468946_20809247&quot;&gt;&lt;span title=&quot;2014-07-16 17:39:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 16, 2014 at 17:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You could also use &lt;code&gt;System.out.print(i + (i &amp;lt; intArray.length - 1 ? &quot;, &quot; : &quot;&quot;));&lt;/code&gt; to combine those two lines.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2563429/nick-suwyn&quot; title=&quot;461 reputation&quot; class=&quot;comment-user&quot;&gt;Nick Suwyn&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment57203921_20809247&quot;&gt;&lt;span title=&quot;2016-01-11 18:55:21Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 11, 2016 at 18:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Converting an Array to a List simply for printing purposes does not seem like a very resourceful decision; and given that the same class has a &lt;code&gt;toString(..)&lt;/code&gt;, it defeats me why someone would ever do this.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1692706/debosmit-ray&quot; title=&quot;5,030 reputation&quot; class=&quot;comment-user&quot;&gt;Debosmit Ray&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment61948975_37208339&quot;&gt;&lt;span title=&quot;2016-05-13 11:35:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 13, 2016 at 11:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Adding a dependency because of something trivial that be done in two lines of code is a screaming antipattern.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/8338100/jurez&quot; title=&quot;3,945 reputation&quot; class=&quot;comment-user&quot;&gt;jurez&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109187450_31854518&quot;&gt;&lt;span title=&quot;2020-05-11 11:27:20Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 11, 2020 at 11:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;commons-lang3 is a very poplar dependency, and note that this answer was were most people didn&apos;t used java 8&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1625740/haim-raman&quot; title=&quot;11,030 reputation&quot; class=&quot;comment-user&quot;&gt;Haim Raman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment109203066_31854518&quot;&gt;&lt;span title=&quot;2020-05-11 18:58:04Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 11, 2020 at 18:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Still the best solution as also referred in &lt;a href=&quot;https://stackoverflow.com/questions/38425623/java-join-array-of-primitives-with-separator&quot; title=&quot;java join array of primitives with separator&quot;&gt;stackoverflow.com/questions/38425623/&lt;/a&gt; commons-lang is of course really popular and should be used instead of implement yourself. Such utility methods have to be tested and should also be accessible for other projects. As long as primitive arrays can not simple handled, a library like common-lang with overloaded methods is for me the best and efficient way to solve this problem.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/10094177/marc-h&quot; title=&quot;88 reputation&quot; class=&quot;comment-user&quot;&gt;Marc H.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114800132_31854518&quot;&gt;&lt;span title=&quot;2020-11-20 16:39:12Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 20, 2020 at 16:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@firephil System.out.println(a[i]); is used with ordinary for loop, where index &quot;i&quot; is created and value at every index is printed. I have used &quot;for each&quot; loop. Give it a try, hope you will get my point.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7253597/hasham-98&quot; title=&quot;73 reputation&quot; class=&quot;comment-user&quot;&gt;hasham.98&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment69852822_40982492&quot;&gt;&lt;span title=&quot;2016-12-25 21:22:43Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 25, 2016 at 21:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is what I do.  With this, you can print arbitrarily complex structures as long as they&apos;re encodable to JSON. I always make sure to use &quot;pretty&quot;.  Does your second example do that?  I&apos;d think you&apos;d need to tickle a &quot;pretty&quot; option to get that.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7631480/cryptofool&quot; title=&quot;18,117 reputation&quot; class=&quot;comment-user&quot;&gt;CryptoFool&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment96019710_21864471&quot;&gt;&lt;span title=&quot;2019-02-10 02:43:20Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 10, 2019 at 2:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is better than the accepted answer in that it gives more control over the delimiter, prefix and suffix. However, I would remove superfluous &lt;code&gt;toString()&lt;/code&gt; in the final &lt;code&gt;System.out.println()&lt;/code&gt; and used it in &lt;code&gt;joiner.add(element.toString())&lt;/code&gt; instead of adding the empty string. This solution works for arrays of non-primitive types as well, uniformly.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9772691/john-mcclane&quot; title=&quot;3,378 reputation&quot; class=&quot;comment-user&quot;&gt;John McClane&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94414960_53701558&quot;&gt;&lt;span title=&quot;2018-12-14 14:42:08Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 14, 2018 at 14:42&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;My bad, &lt;code&gt;element.toString()&lt;/code&gt; inside &lt;code&gt;joiner.add()&lt;/code&gt; is for non-primitive types only. You still need to use &lt;code&gt;Integer.toString(element)&lt;/code&gt; - like constructs for primitive types. Personally, I used foreach loop &lt;code&gt;for (int element : array) joiner.add(Integer.toString(element));&lt;/code&gt; instead of streams, but that&apos;s the matter of taste.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9772691/john-mcclane&quot; title=&quot;3,378 reputation&quot; class=&quot;comment-user&quot;&gt;John McClane&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment94415725_53701558&quot;&gt;&lt;span title=&quot;2018-12-14 15:02:50Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 14, 2018 at 15:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Those who created a vote to remove my answer .. can you expose your point of view so everyone can learn ?  The question asked for the simplest way in java, so it&apos;s a one liner, java current version is &amp;gt;14 and my solution is for at least java 8 ( so it is applicable ).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1624839/mehdi&quot; title=&quot;1,177 reputation&quot; class=&quot;comment-user&quot;&gt;Mehdi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment111877221_49947697&quot;&gt;&lt;span title=&quot;2020-08-05 15:03:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 5, 2020 at 15:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":127,"title":"What's the simplest way to print a Java array?","content":"\n                \n&lt;p&gt;In Java, arrays don&apos;t override &lt;code&gt;toString()&lt;/code&gt;, so if you try to print one directly, you get the &lt;code&gt;className&lt;/code&gt; + &apos;@&apos; + the hex of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_hashCode()&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;hashCode&lt;/code&gt;&lt;/a&gt; of the array, as defined by &lt;code&gt;Object.toString()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] intArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[] {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\nSystem.out.println(intArray);     &lt;span class=&quot;hljs-comment&quot;&gt;// prints something like &apos;[I@3343c8b3&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But usually, we&apos;d actually want something more like &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt;. What&apos;s the simplest way of doing that? Here are some example inputs and outputs:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Array of primitives:&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] intArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[] {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n&lt;span class=&quot;hljs-comment&quot;&gt;//output: [1, 2, 3, 4, 5]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Array of object references:&lt;/span&gt;\nString[] strArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-comment&quot;&gt;//output: [John, Mary, Bob]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","slug":"what's-the-simplest-way-to-print-a-java-array-1657384702397","postType":"QUESTION","createdAt":"2022-07-09T16:38:22.000Z","updatedAt":"2022-07-09T16:38:22.000Z","tags":[{"id":462,"name":"printing","slug":"printing","createdAt":"2022-07-09T16:38:22.000Z","updatedAt":"2022-07-09T16:38:22.000Z","Questions_Tags":{"questionId":127,"tagId":462}}]}},"__N_SSG":true}