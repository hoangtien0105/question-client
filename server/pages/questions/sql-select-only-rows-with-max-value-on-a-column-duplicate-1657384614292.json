{"pageProps":{"data":{"answer":["\n&lt;h2&gt;At first glance...&lt;/h2&gt;\n&lt;p&gt;All you need is a &lt;code&gt;GROUP BY&lt;/code&gt; clause with the &lt;code&gt;MAX&lt;/code&gt; aggregate function:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;It&apos;s never that simple, is it?&lt;/h2&gt;\n&lt;p&gt;I just noticed you need the &lt;code&gt;content&lt;/code&gt; column as well.&lt;/p&gt;\n&lt;p&gt;This is a very common question in SQL: find the whole data for the row with some max value in a column per some group identifier. I heard that a lot during my career. Actually, it was one the questions I answered in my current job&apos;s technical interview.&lt;/p&gt;\n&lt;p&gt;It is, actually, so common that Stack Overflow community has created a single tag just to deal with questions like that: &lt;a href=&quot;/questions/tagged/greatest-n-per-group&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;greatest-n-per-group&apos;&quot; rel=&quot;tag&quot;&gt;greatest-n-per-group&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Basically, you have two approaches to solve that problem:&lt;/p&gt;\n&lt;h2&gt;Joining with simple &lt;code&gt;group-identifier, max-value-in-group&lt;/code&gt; Sub-query&lt;/h2&gt;\n&lt;p&gt;In this approach, you first find the &lt;code&gt;group-identifier, max-value-in-group&lt;/code&gt; (already solved above) in a sub-query. Then you join your table to the sub-query with equality on both &lt;code&gt;group-identifier&lt;/code&gt; and &lt;code&gt;max-value-in-group&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.id, a.rev, a.contents\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable a\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) rev\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n    &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n) b &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; a.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.id &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; a.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.rev\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Left Joining with self, tweaking join conditions and filters&lt;/h2&gt;\n&lt;p&gt;In this approach, you left join the table with itself. Equality goes in the &lt;code&gt;group-identifier&lt;/code&gt;. Then, 2 smart moves:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;The second join condition is having left side value less than right value&lt;/li&gt;\n&lt;li&gt;When you do step 1, the row(s) that actually have the max value will have &lt;code&gt;NULL&lt;/code&gt; in the right side (it&apos;s a &lt;code&gt;LEFT JOIN&lt;/code&gt;, remember?). Then, we filter the joined result, showing only the rows where the right side is &lt;code&gt;NULL&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;So you end up with:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable a\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; YourTable b\n    &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; a.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.id &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; a.rev &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; b.rev\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; b.id &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Conclusion&lt;/h2&gt;\n&lt;p&gt;Both approaches bring the exact same result.&lt;/p&gt;\n&lt;p&gt;If you have two rows with &lt;code&gt;max-value-in-group&lt;/code&gt; for &lt;code&gt;group-identifier&lt;/code&gt;, both rows will be in the result in both approaches.&lt;/p&gt;\n&lt;p&gt;Both approaches are SQL ANSI compatible, thus, will work with your favorite RDBMS, regardless of its &quot;flavor&quot;.&lt;/p&gt;\n&lt;p&gt;Both approaches are also performance friendly, however your mileage may vary (RDBMS, DB Structure, Indexes, etc.). So when you pick one approach over the other, &lt;em&gt;benchmark&lt;/em&gt;. And make sure you pick the one which make most of sense to you.&lt;/p&gt;\n    ","\n&lt;p&gt;My preference is to use as little code as possible...&lt;/p&gt;\n\n&lt;p&gt;You can do it using &lt;code&gt;IN&lt;/code&gt;\ntry this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; (id,rev) &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; \n( &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n  &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to my mind it is less complicated... easier to read and maintain.&lt;/p&gt;\n    ","\n&lt;p&gt;I am flabbergasted that no answer offered SQL window function solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.id, a.rev, a.contents\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, rev, contents,\n               &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) ranked_order\n          &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable) a\n &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; a.ranked_order &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Added in SQL standard ANSI/ISO Standard SQL:2003  and later extended with ANSI/ISO Standard SQL:2008, window (or windowing) functions are available with all major vendors now. There are more types of rank functions available to deal with a tie issue: &lt;code&gt;RANK, DENSE_RANK, PERSENT_RANK&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Yet another solution is to use a correlated subquery:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; yt.id, yt.rev, yt.contents\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; YourTable yt\n    &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n        (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; YourTable st &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; yt.id&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;st.id)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Having an index on (id,rev) renders the subquery almost as a simple lookup...&lt;/p&gt;\n\n&lt;p&gt;Following are comparisons to the solutions in @AdrianCarneiro&apos;s answer (subquery, leftjoin), based on MySQL measurements with InnoDB table of ~1million records, group size being: 1-3.&lt;/p&gt;\n\n&lt;p&gt;While for full table scans subquery/leftjoin/correlated timings relate to each other as 6/8/9, when it comes to direct lookups or batch (&lt;code&gt;id in (1,2,3)&lt;/code&gt;), subquery is much slower then the others (Due to rerunning the subquery). However I couldnt differentiate between leftjoin and correlated solutions in speed.&lt;/p&gt;\n\n&lt;p&gt;One final note, as leftjoin creates n*(n+1)/2 joins in groups, its performance can be heavily affected by the size of groups...&lt;/p&gt;\n    ","\n&lt;p&gt;I can&apos;t vouch for the performance, but here&apos;s a trick inspired by the limitations of Microsoft Excel.  It has some good features&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;GOOD STUFF&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It should force return of only one &quot;max record&quot; even if there is a tie (sometimes useful)&lt;/li&gt;\n&lt;li&gt;It doesn&apos;t require a join&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;APPROACH&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It is a little bit ugly and requires that you know something about the range of valid values of the &lt;strong&gt;&lt;em&gt;rev&lt;/em&gt;&lt;/strong&gt; column.  Let us assume that we know the &lt;strong&gt;&lt;em&gt;rev&lt;/em&gt;&lt;/strong&gt; column is a number between 0.00 and 999 including decimals but that there will only ever be two digits to the right of the decimal point (e.g. 34.17 would be a valid value).&lt;/p&gt;\n\n&lt;p&gt;The gist of the thing is that you create a single synthetic column by string concatenating/packing the primary comparison field along with the data you want.  In this way, you can force SQL&apos;s MAX() aggregate function to return all of the data (because it has been packed into a single column).  Then you have to unpack the data.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s how it looks with the above example, written in SQL&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, \n       &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(packed_col) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; max_rev,\n       &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(packed_col) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; content_for_max_rev \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;  (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, \n       &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; rev &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;.001&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CHAR&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;---&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;(content &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; packed_col\n       &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; yourtable\n      ) \n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The packing begins by forcing the &lt;strong&gt;&lt;em&gt;rev&lt;/em&gt;&lt;/strong&gt; column to be a number of known character length regardless of the value of &lt;strong&gt;&lt;em&gt;rev&lt;/em&gt;&lt;/strong&gt; so that for example&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;3.2    becomes    1003.201&lt;/li&gt;\n&lt;li&gt;57     becomes    1057.001&lt;/li&gt;\n&lt;li&gt;923.88 becomes    1923.881&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you do it right, string comparison of two numbers should yield the same &quot;max&quot; as numeric comparison of the two numbers and it&apos;s easy to convert back to the original number using the substring function (which is available in one form or another pretty much everywhere).&lt;/p&gt;\n    ","\n&lt;h3&gt;Unique Identifiers?  Yes!  Unique identifiers!&lt;/h3&gt;\n&lt;p&gt;One of the best ways to develop a MySQL DB is &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/example-auto-increment.html&quot; rel=&quot;noreferrer&quot;&gt;to have each &lt;code&gt;id&lt;/code&gt; &lt;code&gt;AUTOINCREMENT&lt;/code&gt;&lt;/a&gt; (Source MySQL.com).  This allows a variety of advantages, too many to cover here.  The problem with the question is that its example has duplicate ids.  This disregards these tremendous advantages of unique identifiers, and at the same time, is confusing to those familiar with this already.&lt;/p&gt;\n&lt;h3&gt;Cleanest Solution&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.db-fiddle.com/f/8AmYpUxAo2z3yoR7yr9TKp/0&quot; rel=&quot;noreferrer&quot;&gt;DB Fiddle&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Newer versions of MySQL come with &lt;code&gt;ONLY_FULL_GROUP_BY&lt;/code&gt; enabled by default, and many of the solutions here will &lt;em&gt;fail&lt;/em&gt; in testing with this condition.&lt;/p&gt;\n&lt;p&gt;Even so, we can simply select &lt;code&gt;DISTINCT&lt;/code&gt; &lt;em&gt;someuniquefield&lt;/em&gt;, &lt;code&gt;MAX(&lt;/code&gt; &lt;em&gt;whateverotherfieldtoselect&lt;/em&gt; &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt; *somethirdfield &lt;code&gt;)&lt;/code&gt;, etc., and have no worries understanding the result or how the query works :&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; t1.id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(t1.rev), &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(t2.content)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Table1 &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; Table1 &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t2.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.id &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; t2.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Table1 t3 &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t3.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.id\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t1.id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;SELECT DISTINCT Table1.id, max(Table1.rev), max(Table2.content)&lt;/code&gt; : Return &lt;code&gt;DISTINCT&lt;/code&gt; somefield, &lt;code&gt;MAX()&lt;/code&gt; some otherfield, the last &lt;code&gt;MAX()&lt;/code&gt; is redundant, because I know it&apos;s just one row, but it&apos;s required by the query.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;FROM Employee&lt;/code&gt; : Table searched on.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;JOIN Table1 AS Table2 ON Table2.rev = Table1.rev&lt;/code&gt; : Join the second table on the first, because, we need to get the max(table1.rev)&apos;s comment.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;GROUP BY Table1.id&lt;/code&gt;: Force the top-sorted, Salary row of each employee to be the returned result.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Note that since &quot;content&quot; was &quot;...&quot; in OP&apos;s question, there&apos;s no way to test that this works.  So, I changed that to &quot;..a&quot;, &quot;..b&quot;, so, we can actually now see that the results are correct:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;id  &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(Table1.rev) &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(Table2.content)\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   ..d\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   ..b\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Why is it clean?&lt;/em&gt;  &lt;code&gt;DISTINCT()&lt;/code&gt;, &lt;code&gt;MAX()&lt;/code&gt;, etc., all make wonderful use of MySQL indices.  This will be faster.  Or, it will be much faster, if you have indexing, and you compare it to a query that looks at all rows.&lt;/p&gt;\n&lt;h3&gt;Original Solution&lt;/h3&gt;\n&lt;p&gt;With &lt;code&gt;ONLY_FULL_GROUP_BY&lt;/code&gt; disabled, we can use still use &lt;code&gt;GROUP BY&lt;/code&gt;, but then we are only using it on the Salary, and not the id:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Employee\n    &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Salary &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; employeesub\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; employeesub.Salary;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;SELECT *&lt;/code&gt; : Return all fields.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;FROM Employee&lt;/code&gt; : Table searched on.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;(SELECT *...)&lt;/code&gt; subquery : Return all people, sorted by Salary.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;GROUP BY employeesub.Salary&lt;/code&gt;: Force the top-sorted, Salary row of each employee to be the returned result.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Unique-Row Solution&lt;/h3&gt;\n&lt;p&gt;Note the &lt;a href=&quot;https://en.wikipedia.org/wiki/Relational_database&quot; rel=&quot;noreferrer&quot;&gt;Definition of a Relational Database&lt;/a&gt;: &quot;Each row in a table has its own unique key.&quot;  This would mean that, in the question&apos;s example, id would &lt;em&gt;have to be&lt;/em&gt; unique, and in that case, we can just do :&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Employee\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; Employee.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12345&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Employee.Salary &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\nLIMIT &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Hopefully this is a solution that solves the problem and helps everyone better understand what&apos;s happening in the DB.&lt;/p&gt;\n    ","\n&lt;p&gt;Something like this?&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; yourtable.id, rev, content\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; yourtable\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; maxrev\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; yourtable\n    &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; child &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (yourtable.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; child.id) &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; (yourtable.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; maxrev)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another manner to do the job is using &lt;code&gt;MAX()&lt;/code&gt; analytic function in OVER PARTITION clause&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id\n          ,rev\n          ,contents\n          ,&lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; max_rev\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n    ) t\n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t.max_rev \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The other &lt;code&gt;ROW_NUMBER()&lt;/code&gt; OVER PARTITION solution already documented in this post is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id\n          ,rev\n          ,contents\n          ,&lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) rank\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n    ) t\n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t.rank &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This 2 SELECT work well on Oracle 10g.&lt;/p&gt;\n\n&lt;p&gt;MAX() solution runs certainly FASTER that &lt;code&gt;ROW_NUMBER()&lt;/code&gt; solution because &lt;code&gt;MAX()&lt;/code&gt; complexity is &lt;code&gt;O(n)&lt;/code&gt; while &lt;code&gt;ROW_NUMBER()&lt;/code&gt; complexity is at minimum &lt;code&gt;O(n.log(n))&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; represent the number of records in table !&lt;/p&gt;\n    ","\n&lt;p&gt;I like to use a &lt;code&gt;NOT EXIST&lt;/code&gt;-based solution for this problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n  id, \n  rev\n  &lt;span class=&quot;hljs-comment&quot;&gt;-- you can select other columns here&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable t\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;EXISTS&lt;/span&gt; (\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable t &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; rev &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; t.rev\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will select all records with max value within the group and allows you to select other columns.&lt;/p&gt;\n    ","\n&lt;p&gt;I think, You want this?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; docs &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; (id, rev) &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; docs &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id)  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;SQL Fiddle :\n&lt;a href=&quot;http://sqlfiddle.com/#!9/a6c585/82473/0&quot; rel=&quot;noreferrer&quot;&gt;Check here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Employee\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; Employee.Salary &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(salary) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Employee &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Employe_id)\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Employee.Salary\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Note: I probably wouldn&apos;t recommend this anymore in MySQL 8+ days. Haven&apos;t used it in years.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;A third solution I hardly ever see mentioned is MySQL specific and looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rev\n , &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;SUBSTRING_INDEX(GROUP_CONCAT(numeric_content &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; numeric_content\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Yes it looks awful (converting to string and back etc.) but in my experience it&apos;s usually faster than the other solutions. Maybe that&apos;s just for my use cases, but I have used it on tables with millions of records and many unique ids. Maybe it&apos;s because MySQL is pretty bad at optimizing the other solutions (at least in the 5.0 days when I came up with this solution).&lt;/p&gt;\n&lt;p&gt;One important thing is that GROUP_CONCAT has a maximum length for the string it can build up. You probably want to raise this limit by setting the &lt;code&gt;group_concat_max_len&lt;/code&gt; variable. And keep in mind that this will be a limit on scaling if you have a large number of rows.&lt;/p&gt;\n&lt;p&gt;Anyway, the above doesn&apos;t directly work if your content field is already text. In that case you probably want to use a different separator, like \\0 maybe. You&apos;ll also run into the &lt;code&gt;group_concat_max_len&lt;/code&gt; limit quicker.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;NOT mySQL&lt;/strong&gt;, but for other people finding this question and using SQL, another way to resolve the &lt;a href=&quot;/questions/tagged/greatest-n-per-group&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;greatest-n-per-group&apos;&quot; rel=&quot;tag&quot;&gt;greatest-n-per-group&lt;/a&gt; problem is using &lt;a href=&quot;http://technet.microsoft.com/en-us/library/ms175156(v=sql.105).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Cross Apply&lt;/code&gt;&lt;/a&gt; in MS SQL&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; DocIds &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; docs)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; d2.id, d2.rev, d2.content\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; DocIds d1\n&lt;span class=&quot;hljs-keyword&quot;&gt;CROSS&lt;/span&gt; APPLY (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Top &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; docs d\n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; d.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; d1.id\n  &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n) d2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;&lt;a href=&quot;http://sqlfiddle.com/#!18/25b5c/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&apos;s an example in SqlFiddle&lt;/a&gt;&lt;/h3&gt;\n    ","\n&lt;p&gt;I would use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; t.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; t\n&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt;\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test\n    &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; o\n&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; o.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t.rev\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Subquery SELECT is not too eficient maybe, but in JOIN clause seems to be usable. I&apos;m not an expert in optimizing queries, but I&apos;ve tried at MySQL, PostgreSQL, FireBird and it does work very good.&lt;/p&gt;\n\n&lt;p&gt;You can use this schema in multiple joins and with WHERE clause. It is my working example (solving identical to yours problem with table &quot;firmy&quot;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; platnosci &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; p\n&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; firmy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f\n&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; p.id_rel_firmy &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; f.id_rel\n&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(id_obj) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; id_obj\n      &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; firmy\n      &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id_rel) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; o\n&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; o.id_obj &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; f.id_obj &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; p.od &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;2014-03-01&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is asked on tables having teens thusands of records, and it takes less then 0,01 second on really not too strong machine.&lt;/p&gt;\n\n&lt;p&gt;I wouldn&apos;t use IN clause (as it is mentioned somewhere above). IN is given to use with short lists of constans, and not as to be the query filter built on subquery. It is because subquery in IN is performed for every scanned record which can made query taking very loooong time.&lt;/p&gt;\n    ","\n&lt;p&gt;Since this is most popular question with regard to this problem, I&apos;ll re-post another answer to it here as well:&lt;/p&gt;\n\n&lt;p&gt;It looks like there is simpler way to do this (but &lt;strong&gt;only in MySQL&lt;/strong&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; mytable &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id, rev &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt; ) x\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Please credit answer of user Bohemian&lt;/strong&gt; in &lt;a href=&quot;https://stackoverflow.com/questions/12102200/get-records-with-max-value-for-each-group-of-grouped-sql-results&quot;&gt;this question&lt;/a&gt; for providing such a concise and elegant answer to this problem.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; though this solution works for many people it may not be stable in the long run, since MySQL doesn&apos;t guarantee that GROUP BY statement will return meaningful values for columns not in GROUP BY list. So use this solution at your own risk!&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;If you have many fields in select statement and you want latest  value for all of those fields through optimized code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; table_name\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id,rev &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;) temp\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;How about this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; all_fields.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;  \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; yourtable &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; max_recs  \n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; yourtable &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; all_fields \n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; max_recs.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; all_fields.id\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This solution makes only one selection from YourTable, therefore it&apos;s faster. It works only for MySQL and SQLite(for SQLite remove DESC) according to test on sqlfiddle.com. Maybe it can be tweaked to work on other languages which I am not familiar with.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; id, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content1&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; content\n              &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content2&apos;&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content3&apos;&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content4&apos;&lt;/span&gt;\n            ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; YourTable\n       &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n   ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; YourTable\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a nice way of doing that&lt;/p&gt;\n\n&lt;p&gt;Use following code :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; temp &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt;  ( \n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;(field1) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; summ , field1\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; table_name\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; field1 )\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; temp &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; summ &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(summ) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; temp)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I like to do this by ranking the records by some column. In this case, rank &lt;code&gt;rev&lt;/code&gt; values grouped by &lt;code&gt;id&lt;/code&gt;. Those with higher &lt;code&gt;rev&lt;/code&gt; will have lower rankings. So highest &lt;code&gt;rev&lt;/code&gt; will have ranking of 1.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; id, rev, content\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;@rowNum&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; if(&lt;span class=&quot;hljs-variable&quot;&gt;@prevValue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; id, &lt;span class=&quot;hljs-variable&quot;&gt;@rowNum&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; row_num,\n    id, rev, content,\n    &lt;span class=&quot;hljs-variable&quot;&gt;@prevValue&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; id\n  &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; id, rev, content &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; YOURTABLE &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;asc&lt;/span&gt;, rev &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;) TEMP,\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@rowNum&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; DUAL) X,\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@prevValue&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; DUAL) Y) TEMP\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; row_num &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Not sure if introducing variables makes the whole thing slower. But at least I&apos;m not querying &lt;code&gt;YOURTABLE&lt;/code&gt; twice.&lt;/p&gt;\n    ","\n&lt;p&gt;Sorted the rev field in reverse order and then grouped by id which gave the first row of each grouping which is the one with the highest rev value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; table1 &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) X &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; X.id;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Tested in &lt;a href=&quot;http://sqlfiddle.com/&quot; rel=&quot;nofollow&quot;&gt;http://sqlfiddle.com/&lt;/a&gt; with the following data&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; table1\n    (`id` &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, `rev` &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, `content` &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; table1\n    (`id`, `rev`, `content`)\n&lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;\n    (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;One-One&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;One-Two&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Two-One&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Two-Two&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Three-Two&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Three-One&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Three-Three&apos;&lt;/span&gt;)\n;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This gave the following result in MySql 5.5 and 5.6 &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;id  rev content\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;One&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;Two\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   Two&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;Two\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   Three&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;Two\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;here is another solution hope it will help someone    &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; a.id , a.rev, a.content &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Table1 a\n&lt;span class=&quot;hljs-keyword&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; \n(&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) rev &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Table1 &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id) x &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; x.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;a.id &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; x.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;a.rev\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;None of these answers have worked for me.&lt;/p&gt;\n\n&lt;p&gt;This is what worked for me.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; score &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(score_up) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; history)\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; history.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; score, history &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; history.score_up &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; score.max\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s another solution to retrieving the records only with a field that has the maximum value for that field. This works for SQL400 which is the platform I work on. In this example, the records with the maximum value in field FIELD5 will be retrieved by the following SQL statement.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; A.KEYFIELD1, A.KEYFIELD2, A.FIELD3, A.FIELD4, A.FIELD5\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; MYFILE A\n &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; RRN(A) &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt;\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; RRN(B) \n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; MYFILE B\n     &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; B.KEYFIELD1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; A.KEYFIELD1 &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; B.KEYFIELD2 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; A.KEYFIELD2\n     &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; B.FIELD5 &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;FETCH&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ROW&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ONLY&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can make the select without a join when you combine the &lt;code&gt;rev&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; into one &lt;code&gt;maxRevId&lt;/code&gt; value for &lt;code&gt;MAX()&lt;/code&gt; and then split it back to original values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; maxRevId &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt; ((&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; id, maxRevId &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rev\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(((rev &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; id)) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; maxRevId\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n      &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id) x;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is especially fast when there is a complex join instead of a single table. With the traditional approaches the complex join would be done twice.&lt;/p&gt;\n\n&lt;p&gt;The above combination is simple with bit functions when &lt;code&gt;rev&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; are &lt;code&gt;INT UNSIGNED&lt;/code&gt; (32 bit) and combined value fits to &lt;code&gt;BIGINT UNSIGNED&lt;/code&gt; (64 bit). When the &lt;code&gt;id&lt;/code&gt; &amp;amp; &lt;code&gt;rev&lt;/code&gt; are larger than 32-bit values or made of multiple columns, you need combine the value into e.g. a binary value with suitable padding for &lt;code&gt;MAX()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;h1&gt;Explanation&lt;/h1&gt;\n\n&lt;p&gt;This is not pure SQL. This will use the SQLAlchemy ORM.&lt;/p&gt;\n\n&lt;p&gt;I came here looking for SQLAlchemy help, so I will duplicate Adrian Carneiro&apos;s answer with the python/SQLAlchemy version, specifically the outer join part.&lt;/p&gt;\n\n&lt;p&gt;This query answers the question of:   &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&quot;Can you return me the records in this group of records (based on same id) that have the highest version number&quot;.&lt;/em&gt;  &lt;/p&gt;\n\n&lt;p&gt;This allows me to duplicate the record, update it, increment its version number, and have the copy of the old version in such a way that I can show change over time.&lt;/p&gt;\n\n&lt;h1&gt;Code&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;MyTableAlias &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; aliased(MyTable)\nnewest_records &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; appdb.session.query(MyTable).select_from(&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt;(\n    MyTable, \n    MyTableAlias, \n    onclause&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;and_(\n        MyTable.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MyTableAlias.id,\n        MyTable.version_int &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; MyTableAlias.version_int\n    ),\n    isouter&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n    )\n).&lt;span class=&quot;hljs-keyword&quot;&gt;filter&lt;/span&gt;(\n    MyTableAlias.id  &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;,\n).&lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Tested on a PostgreSQL database.&lt;/p&gt;\n    ","\n&lt;p&gt;I used the below to solve a problem of my own. I first created a temp table and inserted the max rev value per unique id.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; #temp1\n(\n    id &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n    , rev &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; #temp1\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(a.rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n    (\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, content, &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev\n        &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n        &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, content\n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; a \n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; a.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; a.id\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I then joined these max values (#temp1) to all of the possible id/content combinations. By doing this, I naturally filter out the non-maximum id/content combinations, and am left with the only max rev values for each.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.id, a.rev, content\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; #temp1 &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; a\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt;\n    (\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, content, &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev\n        &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n        &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, content\n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; a.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.id &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; a.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.rev\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; a.id, a.rev, b.content\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; a.id\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Do you need the corresponding &lt;code&gt;content&lt;/code&gt; field for the row?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/61974/mark-byers&quot; title=&quot;771,758 reputation&quot; class=&quot;comment-user&quot;&gt;Mark Byers&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment9426841_7745609&quot;&gt;&lt;span title=&quot;2011-10-12 19:45:15Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 12, 2011 at 19:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yes, and that would pose no problem, I have cut out many columns which I&apos;d be adding back.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/66580/majid-fouladpour&quot; title=&quot;27,888 reputation&quot; class=&quot;comment-user owner&quot;&gt;Majid Fouladpour&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment9426895_7745609&quot;&gt;&lt;span title=&quot;2011-10-12 19:48:12Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 12, 2011 at 19:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@MarkByers I have edited my answer to comply with OP needs. Since I was at it, I decided to write a more comprehensive answer on the &lt;a href=&quot;https://stackoverflow.com/questions/tagged/greatest-n-per-group&quot;&gt;greatest-n-per-group&lt;/a&gt; topic.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/570191/adriano-carneiro&quot; title=&quot;55,997 reputation&quot; class=&quot;comment-user&quot;&gt;Adriano Carneiro&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment9428069_7745609&quot;&gt;&lt;span title=&quot;2011-10-12 20:57:59Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 12, 2011 at 20:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is common &lt;a href=&quot;https://stackoverflow.com/questions/tagged/greatest-n-per-group&quot;&gt;greatest-n-per-group&lt;/a&gt; problem, which has well tested and &lt;a href=&quot;http://stackoverflow.com/q/8748986&quot;&gt;optimized solutions&lt;/a&gt;. I prefer the &lt;a href=&quot;http://stackoverflow.com/a/8749095&quot;&gt;left join solution by Bill Karwin&lt;/a&gt; (the &lt;a href=&quot;http://stackoverflow.com/a/123481&quot;&gt;original post&lt;/a&gt;). Note that bunch of solutions to this common problem can surprisingly be found in the one of most official sources, &lt;b&gt;MySQL manual&lt;/b&gt;! See &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/example-maximum-column-group-row.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Examples of Common Queries :: The Rows Holding the Group-wise Maximum of a Certain Column&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/684229/tomas&quot; title=&quot;55,121 reputation&quot; class=&quot;comment-user&quot;&gt;Tomas&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment35741494_7745609&quot;&gt;&lt;span title=&quot;2014-04-28 11:50:34Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 28, 2014 at 11:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;duplicate of &lt;a href=&quot;http://stackoverflow.com/questions/1313120/retrieving-the-last-record-in-each-group&quot;&gt;Retrieving the last record in each group&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/684229/tomas&quot; title=&quot;55,121 reputation&quot; class=&quot;comment-user&quot;&gt;Tomas&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment38189854_7745609&quot;&gt;&lt;span title=&quot;2014-07-08 18:39:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 8, 2014 at 18:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is a really bad idea because the field that you want to maximize might be a double, and comparing doubles for equality is non-deterministic. I think only the O(n^2) algorithm works here.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/12888986/mk3009hppw&quot; title=&quot;89 reputation&quot; class=&quot;comment-user&quot;&gt;mk3009hppw&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment117966692_7745635&quot;&gt;&lt;span title=&quot;2021-03-21 16:31:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 21, 2021 at 16:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Adriano how would this work if there would be an extra column &lt;code&gt;user_id&lt;/code&gt; , and you want to limit your results to that &lt;code&gt;user_id&lt;/code&gt; ? I suppose that filter should happen quite early on to avoid it&apos;s joining stuff together from irrelevant &lt;code&gt;user_id&lt;/code&gt;s that will be ditched later?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/955823/binoculars&quot; title=&quot;2,138 reputation&quot; class=&quot;comment-user&quot;&gt;binoculars&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121840749_7745635&quot;&gt;&lt;span title=&quot;2021-08-26 16:14:33Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 26, 2021 at 16:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;m not sure the two approaches will &quot;bring the exact same result&quot;: I think the second approach will keep records for which the &lt;code&gt;rev&lt;/code&gt; field is NULL (they will have no match in the join), but the first approach will not keep them (their rev is not the max so they are not selected).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/414272/a3nm&quot; title=&quot;8,287 reputation&quot; class=&quot;comment-user&quot;&gt;a3nm&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122321700_7745635&quot;&gt;&lt;span title=&quot;2021-09-16 12:01:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 16, 2021 at 12:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Another way is by using window functions. They seem to offer better performance. I would do something like: &lt;code&gt;SELECT DISTINCT id, MAX(rev) OVER (PARTITION BY id), FIRST_VALUE(content) OVER (PARTITION BY id ORDER BY rev DESC) FROM YourTable&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3348909/marcos&quot; title=&quot;76 reputation&quot; class=&quot;comment-user&quot;&gt;Marcos&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124209644_7745635&quot;&gt;&lt;span title=&quot;2021-12-07 18:37:32Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 7, 2021 at 18:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@mk3009hppw: Comparing doubles for equality is &lt;i&gt;entirely&lt;/i&gt; deterministic, although the idea that it&apos;s somehow not is a common misconception. What people usually mean by it (if they&apos;re not just parroting something they heard from elsewhere) is that inexact floating point calculations (which could be as simple as 0.1 + 0.2) may not return exactly the &quot;expected&quot; result (0.3) due to rounding, or that &lt;a href=&quot;https://randomascii.wordpress.com/2012/06/26/doubles-are-not-floats-so-dont-compare-them/&quot; rel=&quot;nofollow noreferrer&quot;&gt;comparing numeric types with different precision&lt;/a&gt; may behave unexpectedly. But neither of those happens here.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/411022/ilmari-karonen&quot; title=&quot;47,815 reputation&quot; class=&quot;comment-user&quot;&gt;Ilmari Karonen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124215741_7745635&quot;&gt;&lt;span title=&quot;2021-12-08 00:15:58Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 8, 2021 at 0:15&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Curious - which database engine can we use this type of WHERE clause in? This is not supported in SQL Server.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/899846/kash&quot; title=&quot;8,401 reputation&quot; class=&quot;comment-user&quot;&gt;Kash&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10034193_7745679&quot;&gt;&lt;span title=&quot;2011-11-17 17:04:49Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 17, 2011 at 17:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;oracle &amp;amp; mysql (not sure about other databases sorry)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/811035/kevin-burton&quot; title=&quot;11,228 reputation&quot; class=&quot;comment-user&quot;&gt;Kevin Burton&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10035438_7745679&quot;&gt;&lt;span title=&quot;2011-11-17 18:03:30Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 17, 2011 at 18:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Works on PostgreSQL too.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/906511/lcguida&quot; title=&quot;3,697 reputation&quot; class=&quot;comment-user&quot;&gt;lcguida&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31822800_7745679&quot;&gt;&lt;span title=&quot;2014-01-15 17:43:39Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 15, 2014 at 17:43&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Confirmed working in DB2&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/735284/coderatchet&quot; title=&quot;7,760 reputation&quot; class=&quot;comment-user&quot;&gt;coderatchet&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment32316145_7745679&quot;&gt;&lt;span title=&quot;2014-01-29 02:32:40Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 29, 2014 at 2:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Does not work with SQLite.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2516377/marcel-pfeiffer&quot; title=&quot;948 reputation&quot; class=&quot;comment-user&quot;&gt;Marcel Pfeiffer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41772641_7745679&quot;&gt;&lt;span title=&quot;2014-10-26 20:32:48Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 26, 2014 at 20:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;intuition is tricky thing. I find it more intuitive than other answers as it builds explicit data structure that answers the question.  But, again, intuition is the other side of bias...&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/59470/topchef&quot; title=&quot;18,253 reputation&quot; class=&quot;comment-user&quot;&gt;topchef&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment70356163_38854846&quot;&gt;&lt;span title=&quot;2017-01-10 18:22:38Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 10, 2017 at 18:22&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This might work in MariaDB 10.2 and MySQL 8.0.2, but not before.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1766831/rick-james&quot; title=&quot;124,178 reputation&quot; class=&quot;comment-user&quot;&gt;Rick James&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment73399678_38854846&quot;&gt;&lt;span title=&quot;2017-04-01 22:01:17Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 1, 2017 at 22:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The approach of window functions should be preferred due to simplicity.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5344734/mark-andersen&quot; title=&quot;610 reputation&quot; class=&quot;comment-user&quot;&gt;Mark Andersen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118217680_38854846&quot;&gt;&lt;span title=&quot;2021-03-30 20:01:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 30, 2021 at 20:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yes, window function seems to be a better approach. At least it has better performance. I would use MAX and FIRST_VALUE functions, though: SELECT DISTINCT id, MAX(rev) OVER (PARTITION BY id), FIRST_VALUE(content) OVER (PARTITION BY id ORDER BY rev DESC) FROM YourTable&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3348909/marcos&quot; title=&quot;76 reputation&quot; class=&quot;comment-user&quot;&gt;Marcos&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124209582_38854846&quot;&gt;&lt;span title=&quot;2021-12-07 18:35:02Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 7, 2021 at 18:35&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is the more efficient way of doing this compared to correlated queries (performance killer) or other aggregate functions. This should now be marked as accepted answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2723942/paramvir-singh-karwal&quot; title=&quot;557 reputation&quot; class=&quot;comment-user&quot;&gt;Paramvir Singh Karwal&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125413148_38854846&quot;&gt;&lt;span title=&quot;2022-02-01 15:00:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 1 at 15:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This method is hard to understand.  I can&apos;t run the subquery independently, since it refers to the outer query.  It appears the subquery returns a single value at a time, but, per Wikipedia, &quot;the subquery may be evaluated once for each row processed by the outer query.&quot;  Within the subquery, yt.id must produce a single value for the row?   Ultimately, with each row, the subquery seems to get the max of rev for that id.  The idea that a subquery produces different results at different times throughout the query execution seems to take us well under the hood.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/11653404/mark-e&quot; title=&quot;324 reputation&quot; class=&quot;comment-user&quot;&gt;Mark E.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122392300_21310671&quot;&gt;&lt;span title=&quot;2021-09-19 21:31:48Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 19, 2021 at 21:31&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@dolmen, notice that the inner select is evaluated for every row in the table. You are assuming that it is only evaluated once, and that single value is used.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1442987/vajk-hermecz&quot; title=&quot;4,923 reputation&quot; class=&quot;comment-user&quot;&gt;Vajk Hermecz&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment123116611_21310671&quot;&gt;&lt;span title=&quot;2021-10-20 21:01:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 20, 2021 at 21:01&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@VajkHermecz You&apos;re right. I deleted my comment.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/328115/dolmen&quot; title=&quot;7,281 reputation&quot; class=&quot;comment-user&quot;&gt;dolmen&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment128025895_21310671&quot;&gt;&lt;span title=&quot;2022-06-02 08:13:34Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 2 at 8:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The join-less ones wouldn&apos;t cut it?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/66580/majid-fouladpour&quot; title=&quot;27,888 reputation&quot; class=&quot;comment-user owner&quot;&gt;Majid Fouladpour&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment9426954_7745697&quot;&gt;&lt;span title=&quot;2011-10-12 19:51:31Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 12, 2011 at 19:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If they work, then they&apos;re fine too.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/118068/marc-b&quot; title=&quot;349,297 reputation&quot; class=&quot;comment-user&quot;&gt;Marc B&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment9426996_7745697&quot;&gt;&lt;span title=&quot;2011-10-12 19:54:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 12, 2011 at 19:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This seems to be the fastest one (with proper indexes).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/87015/salman-a&quot; title=&quot;250,022 reputation&quot; class=&quot;comment-user&quot;&gt;Salman A&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment96130193_7745697&quot;&gt;&lt;span title=&quot;2019-02-13 12:27:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 13, 2019 at 12:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;That lack of child on the other ON got me!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4040580/gwen-au&quot; title=&quot;689 reputation&quot; class=&quot;comment-user&quot;&gt;Gwen Au&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment112830624_7745697&quot;&gt;&lt;span title=&quot;2020-09-09 07:27:41Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 9, 2020 at 7:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;First query is perfect and majority of SO posts lack that discussion. Its performance efficient and useful when we are getting more columns. majority of the other soln are about getting max value of a column and not multiple rows with multiple columns when individual group have 10s of rows in each. Thnx.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/13020939/sanpat&quot; title=&quot;56 reputation&quot; class=&quot;comment-user&quot;&gt;sanpat&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114220772_48881412&quot;&gt;&lt;span title=&quot;2020-10-29 19:10:04Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 29, 2020 at 19:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Best performance compared to all the other solutions. For my use case this is almost 9 times faster with thousands of partitions and tens of millions of records.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/285440/ali-sarchami&quot; title=&quot;1,058 reputation&quot; class=&quot;comment-user&quot;&gt;Ali Sarchami&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115728198_48881412&quot;&gt;&lt;span title=&quot;2020-12-26 17:14:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 26, 2020 at 17:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Works, and works fast, in MySQL 8 and SQLite too. Also yes, agree MAX() is the best option.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/123371/wizzard0&quot; title=&quot;1,853 reputation&quot; class=&quot;comment-user&quot;&gt;wizzard0&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment120000008_48881412&quot;&gt;&lt;span title=&quot;2021-06-08 16:47:11Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 8, 2021 at 16:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;yes, not exists like this has generally been the preferred way rather than a left join. In older versions of SQL server it was faster, although i think now it makes no difference. I normally do SELECT 1 instead of SELECT *, again because in prior versions it was faster.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3009124/egp&quot; title=&quot;482 reputation&quot; class=&quot;comment-user&quot;&gt;EGP&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41189654_25694562&quot;&gt;&lt;span title=&quot;2014-10-08 12:38:51Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 8, 2014 at 12:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;In MySQL at least, the columns in the &lt;code&gt;SELECT&lt;/code&gt; are ignored for &lt;code&gt;EXISTS&lt;/code&gt; subqueries. So it doesn&apos;t matter what you write there&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/74496/rjh&quot; title=&quot;47,636 reputation&quot; class=&quot;comment-user&quot;&gt;rjh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment121535895_25694562&quot;&gt;&lt;span title=&quot;2021-08-13 09:46:37Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 13, 2021 at 9:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Seems to be the simplest most self-contained method. Comparable to &lt;code&gt;in&lt;/code&gt; but without grouping and functions. Appears to be fast for my use case as well. Simplicity is important especially in cases where ORMs are used and this is just another condition that can be chained with others, it does not complicate the structure of the query like in cases where joins are used.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/520567/akostadinov&quot; title=&quot;16,340 reputation&quot; class=&quot;comment-user&quot;&gt;akostadinov&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment126560873_25694562&quot;&gt;&lt;span title=&quot;2022-03-24 21:47:23Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 24 at 21:47&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;very slow comparing to other methods - group by, windows, not exists&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/307699/nahab&quot; title=&quot;1,248 reputation&quot; class=&quot;comment-user&quot;&gt;nahab&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment84620285_23956147&quot;&gt;&lt;span title=&quot;2018-02-15 13:40:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 15, 2018 at 13:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I think using that subquery as a CTE might at least improve performance&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1985648/don-cheadle&quot; title=&quot;4,713 reputation&quot; class=&quot;comment-user&quot;&gt;Don Cheadle&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment70357195_28861793&quot;&gt;&lt;span title=&quot;2017-01-10 18:52:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 10, 2017 at 18:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Hi! For me it looks like your 1st query needs  ... &lt;code&gt;and o.id = t.id&lt;/code&gt; in the end (and the subquery should return &lt;code&gt;id&lt;/code&gt; for that). Doesn&apos;t it?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4314439/dmitry-grekov&quot; title=&quot;678 reputation&quot; class=&quot;comment-user&quot;&gt;Dmitry Grekov&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment90528262_28861793&quot;&gt;&lt;span title=&quot;2018-08-10 11:37:22Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 10, 2018 at 11:37&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Except that it&apos;s wrong, as there is no guarantee that the order of the inner query means anything, nor is the GROUP BY always guaranteed to take the first encountered row. At least in MySQL and I would assume all others. In fact I was under the assumption that MySQL would simply ignore the whole ORDER BY. Any future version or a change in configuration might break this query.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/535229/jannes&quot; title=&quot;1,752 reputation&quot; class=&quot;comment-user&quot;&gt;Jannes&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41263135_24556626&quot;&gt;&lt;span title=&quot;2014-10-10 10:14:01Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 10, 2014 at 10:14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Jannes this is interesting remark :) I welcome you to answer my question providing proofs: &lt;a href=&quot;http://stackoverflow.com/questions/26301877/mysql-select-from-subquery-order&quot; title=&quot;mysql select from subquery order&quot;&gt;stackoverflow.com/questions/26301877/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1077177/yuriy-nakonechnyy&quot; title=&quot;3,644 reputation&quot; class=&quot;comment-user&quot;&gt;Yuriy Nakonechnyy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41272549_24556626&quot;&gt;&lt;span title=&quot;2014-10-10 14:41:00Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 10, 2014 at 14:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Jannes concerning GROUP BY not guaranteed to take the first encountered row - you are totally right - found this issue &lt;a href=&quot;http://bugs.mysql.com/bug.php?id=71942&quot; rel=&quot;nofollow noreferrer&quot;&gt;bugs.mysql.com/bug.php?id=71942&lt;/a&gt; which asks to provide such guarantees. Will update my answer now&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1077177/yuriy-nakonechnyy&quot; title=&quot;3,644 reputation&quot; class=&quot;comment-user&quot;&gt;Yuriy Nakonechnyy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41273183_24556626&quot;&gt;&lt;span title=&quot;2014-10-10 14:59:48Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 10, 2014 at 14:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I think I remember where I got the ORDER BY being discarded from: MySQL does that with UNIONs if you ORDER BY the inner queries, it&apos;s just ignore: &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/union.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;dev.mysql.com/doc/refman/5.0/en/union.html&lt;/a&gt; says &quot;If ORDER BY appears without LIMIT in a SELECT, it is optimized away because it will have no effect anyway.&quot; I haven&apos;t seen such a statement for the query in question here, but I don&apos;t see why it couldn&apos;t do that.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/535229/jannes&quot; title=&quot;1,752 reputation&quot; class=&quot;comment-user&quot;&gt;Jannes&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment41302001_24556626&quot;&gt;&lt;span title=&quot;2014-10-11 19:09:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 11, 2014 at 19:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This works OK for small tables, but takes 6 passes over the entire dataset, so not fast for large tables.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1766831/rick-james&quot; title=&quot;124,178 reputation&quot; class=&quot;comment-user&quot;&gt;Rick James&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment75055536_32390752&quot;&gt;&lt;span title=&quot;2017-05-17 00:48:28Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 17, 2017 at 0:48&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is the query I needed because there were other columns involved, too.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/567496/mike-viens&quot; title=&quot;2,447 reputation&quot; class=&quot;comment-user&quot;&gt;Mike Viens&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment88310170_32390752&quot;&gt;&lt;span title=&quot;2018-06-01 19:07:45Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 1, 2018 at 19:07&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This doesn&apos;t appear to work for the general case. And, it doesn&apos;t work at all in PostgreSQL, returning: &lt;code&gt;ERROR:  column &quot;your table.reb&quot; must appear in the GROUP BY clause or be used in an aggregate function LINE 1: SELECT *&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/242933/ma11hew28&quot; title=&quot;114,458 reputation&quot; class=&quot;comment-user&quot;&gt;ma11hew28&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34029692_21425067&quot;&gt;&lt;span title=&quot;2014-03-13 16:26:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 13, 2014 at 16:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Sorry I didn&apos;t clarify the first time at which language it worked.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/829321/plavozont&quot; title=&quot;779 reputation&quot; class=&quot;comment-user&quot;&gt;plavozont&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34140470_21425067&quot;&gt;&lt;span title=&quot;2014-03-17 05:11:04Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 17, 2014 at 5:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Only tried approach in MySQL. Oracle has a similar function for ranking records. Idea should work too.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5124980/user5124980&quot; title=&quot;21 reputation&quot; class=&quot;comment-user&quot;&gt;user5124980&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50891133_31462269&quot;&gt;&lt;span title=&quot;2015-07-16 18:54:38Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 16, 2015 at 18:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Reading &amp;amp; writing a variable in a select statement is undefined in MySQL although particular versions happen to give the answer you might expect for certain syntax involving case expressions.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3404097/philipxy&quot; title=&quot;14,480 reputation&quot; class=&quot;comment-user&quot;&gt;philipxy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91854350_31462269&quot;&gt;&lt;span title=&quot;2018-09-22 10:57:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 22, 2018 at 10:57&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This technique used to work, but no longer.  See &lt;a href=&quot;https://mariadb.com/kb/en/mariadb/group-by-trick-has-been-optimized-away/&quot; rel=&quot;nofollow noreferrer&quot;&gt;mariadb.com/kb/en/mariadb/&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1766831/rick-james&quot; title=&quot;124,178 reputation&quot; class=&quot;comment-user&quot;&gt;Rick James&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment73399704_34215516&quot;&gt;&lt;span title=&quot;2017-04-01 22:02:37Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 1, 2017 at 22:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The original question tag is &quot;mysql&quot; and I have stated very clearly that my solution was tested with both Mysql 5.5 and 5.6 in sqlfiddle.com. I have provided all steps to independently verify the solution. I have not made any false claims that my solution works with Mariadb. Mariadb is not Mysql, its just a drop-in replacement for Mysql, owned by 2 different companies. Your comment will help anyone that is trying to implement it in Mariadb but my post in no way deserve a negative vote as it clearly answers the question that was asked.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2857204/blokeish&quot; title=&quot;555 reputation&quot; class=&quot;comment-user&quot;&gt;blokeish&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment73423864_34215516&quot;&gt;&lt;span title=&quot;2017-04-03 00:34:11Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 3, 2017 at 0:34&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yes, it works in older versions.  And I have used that technique in the past, only to be burned when it stopped working.  Also MySQL (in 5.7?) will also be ignoring the &lt;code&gt;ORDER BY&lt;/code&gt; in a subquery.  Since lots of people will read your answer, I am trying to steer them away from a technique that will break in their future.  (And I did not give you the -1 vote.)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1766831/rick-james&quot; title=&quot;124,178 reputation&quot; class=&quot;comment-user&quot;&gt;Rick James&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment73425259_34215516&quot;&gt;&lt;span title=&quot;2017-04-03 02:38:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 3, 2017 at 2:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Tests prove nothing. ORDER BY in a subquery has no guaranteed effect other than for a LIMIT in the same subquery. Even if order was preserved, the GROUP BY would not preserve it. Even if it were preserved, non-standard GROUP BY relying on disabled ONLY_FULL_GROUP_BY is specified to return &lt;i&gt;some&lt;/i&gt; row in a group for a non-grouped column but not necessarily the first. So your query is not correct.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3404097/philipxy&quot; title=&quot;14,480 reputation&quot; class=&quot;comment-user&quot;&gt;philipxy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91855097_34215516&quot;&gt;&lt;span title=&quot;2018-09-22 11:50:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 22, 2018 at 11:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":102,"title":"SQL select only rows with max value on a column [duplicate]","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                    &lt;div class=&quot;flex--item mr8&quot;&gt;\n                        &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLightbulb&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M15 6.38A6.48 6.48 0 0 0 7.78.04h-.02A6.49 6.49 0 0 0 2.05 5.6a6.31 6.31 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0 0 15 6.37ZM4.03 5.85A4.49 4.49 0 0 1 8 2.02a4.48 4.48 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 0 1-1.64-3.94ZM10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2h3Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;Want to improve this post?&lt;/b&gt; Provide detailed answers to this question, including citations and an explanation of why your answer is correct. Answers without enough detail may be edited or deleted.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;This question already has answers here&lt;/b&gt;:\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n                    &lt;div class=&quot;flex--item mb0 mt4&quot;&gt;\n                        &lt;a href=&quot;/questions/1313120/retrieving-the-last-record-in-each-group-mysql&quot; dir=&quot;ltr&quot;&gt;Retrieving the last record in each group - MySQL&lt;/a&gt;\n                            &lt;span class=&quot;question-originals-answer-count&quot;&gt;\n                                (33 answers)\n                            &lt;/span&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item mb0 mt8&quot;&gt;Closed &lt;span title=&quot;2019-03-20 00:19:10Z&quot; class=&quot;relativetime&quot;&gt;3 years ago&lt;/span&gt;.&lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;I have this table for documents (simplified version here):&lt;/p&gt;\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;id&lt;/th&gt;\n&lt;th&gt;rev&lt;/th&gt;\n&lt;th&gt;content&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;...&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;...&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;...&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;3&lt;/td&gt;\n&lt;td&gt;...&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;p&gt;How do I select one row per id and only the greatest rev?&lt;br&gt;\nWith the above data, the result should contain two rows: &lt;code&gt;[1, 3, ...]&lt;/code&gt; and &lt;code&gt;[2, 1, ..]&lt;/code&gt;. I&apos;m using &lt;em&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Currently I use checks in the &lt;code&gt;while&lt;/code&gt; loop to detect and over-write old revs from the resultset. But is this the only method to achieve the result? Isn&apos;t there a &lt;strong&gt;SQL&lt;/strong&gt; solution?&lt;/p&gt;\n    ","slug":"sql-select-only-rows-with-max-value-on-a-column-duplicate-1657384614292","postType":"QUESTION","createdAt":"2022-07-09T16:36:54.000Z","updatedAt":"2022-07-09T16:36:54.000Z","tags":[{"id":374,"name":"aggregate-functions","slug":"aggregate-functions","createdAt":"2022-07-09T16:36:54.000Z","updatedAt":"2022-07-09T16:36:54.000Z","Questions_Tags":{"questionId":102,"tagId":374}},{"id":375,"name":"greatest-n-per-group","slug":"greatest-n-per-group","createdAt":"2022-07-09T16:36:54.000Z","updatedAt":"2022-07-09T16:36:54.000Z","Questions_Tags":{"questionId":102,"tagId":375}},{"id":376,"name":"groupwise-maximum","slug":"groupwise-maximum","createdAt":"2022-07-09T16:36:54.000Z","updatedAt":"2022-07-09T16:36:54.000Z","Questions_Tags":{"questionId":102,"tagId":376}}]}},"__N_SSG":true}