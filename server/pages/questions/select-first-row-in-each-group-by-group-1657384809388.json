{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-select.html#SQL-DISTINCT&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;DISTINCT ON&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; is typically simplest and fastest for this in &lt;strong&gt;PostgreSQL&lt;/strong&gt;.&lt;br&gt;\n&lt;sub&gt;(For performance optimization for certain workloads see below.)&lt;/sub&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (customer)\n       id, customer, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or shorter (if not as clear) with ordinal numbers of output columns:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n       id, customer, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If &lt;code&gt;total&lt;/code&gt; can be NULL, add &lt;code&gt;NULLS LAST&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;...\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt; NULLS &lt;span class=&quot;hljs-keyword&quot;&gt;LAST&lt;/span&gt;, id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Works either way, but you&apos;ll want to &lt;a href=&quot;https://dba.stackexchange.com/q/254731/3684&quot;&gt;match existing indexes&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;db&amp;lt;&amp;gt;fiddle &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=bf589b26f6e9fe8cdf3c6ca6e045eb6d&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;Major points&lt;/h3&gt;\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;DISTINCT ON&lt;/code&gt;&lt;/strong&gt; is a PostgreSQL extension of the standard, where only &lt;code&gt;DISTINCT&lt;/code&gt; on the whole &lt;code&gt;SELECT&lt;/code&gt; list is defined.&lt;/p&gt;\n&lt;p&gt;List any number of expressions in the &lt;code&gt;DISTINCT ON&lt;/code&gt; clause, the combined row value defines duplicates. &lt;a href=&quot;https://www.postgresql.org/docs/current/queries-select-lists.html#QUERIES-DISTINCT&quot; rel=&quot;noreferrer&quot;&gt;The manual:&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Obviously, two rows are considered distinct if they differ in at least\none column value. &lt;strong&gt;Null values are considered equal in this\ncomparison.&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Bold emphasis mine.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;DISTINCT ON&lt;/code&gt; can be combined with &lt;strong&gt;&lt;code&gt;ORDER BY&lt;/code&gt;&lt;/strong&gt;. Leading expressions in &lt;code&gt;ORDER BY&lt;/code&gt; must be in the set of expressions in &lt;code&gt;DISTINCT ON&lt;/code&gt;, but you can rearrange order among those freely. &lt;a href=&quot;https://dba.stackexchange.com/a/89786/3684&quot;&gt;Example.&lt;/a&gt;&lt;br&gt;\nYou can add &lt;em&gt;additional&lt;/em&gt; expressions to &lt;code&gt;ORDER BY&lt;/code&gt; to pick a particular row from each group of peers. Or, as &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-select.html#SQL-DISTINCT&quot; rel=&quot;noreferrer&quot;&gt;the manual puts it&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The &lt;code&gt;DISTINCT ON&lt;/code&gt; expression(s) must match the leftmost &lt;code&gt;ORDER BY&lt;/code&gt;\nexpression(s). The &lt;code&gt;ORDER BY&lt;/code&gt; clause will normally contain additional\nexpression(s) that determine the desired precedence of rows within\neach &lt;code&gt;DISTINCT ON&lt;/code&gt; group.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;I added &lt;code&gt;id&lt;/code&gt; as last item to break ties:&lt;br&gt;\n&lt;em&gt;&quot;Pick the row with the smallest &lt;code&gt;id&lt;/code&gt; from each group sharing the highest &lt;code&gt;total&lt;/code&gt;.&quot;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;To order results in a way that disagrees with the sort order determining the first per group, you can nest above query in an outer query with another &lt;code&gt;ORDER BY&lt;/code&gt;. &lt;a href=&quot;https://stackoverflow.com/a/9796104/939860&quot;&gt;Example.&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;If &lt;code&gt;total&lt;/code&gt; can be NULL, you &lt;em&gt;most probably&lt;/em&gt; want the row with the greatest non-null value. Add &lt;strong&gt;&lt;code&gt;NULLS LAST&lt;/code&gt;&lt;/strong&gt; like demonstrated. See:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/9510509/postgresql-sort-by-datetime-asc-null-first/9511492#9511492&quot;&gt;Sort by column ASC, but NULL values first?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;The &lt;code&gt;SELECT&lt;/code&gt; list&lt;/strong&gt; is not constrained by expressions in &lt;code&gt;DISTINCT ON&lt;/code&gt; or &lt;code&gt;ORDER BY&lt;/code&gt; in any way:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;You &lt;em&gt;don&apos;t have to&lt;/em&gt; include any of the expressions in &lt;code&gt;DISTINCT ON&lt;/code&gt; or &lt;code&gt;ORDER BY&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; include any other expression in the &lt;code&gt;SELECT&lt;/code&gt; list. This is instrumental for replacing complex subqueries and aggregate / window functions.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;I tested with Postgres versions 8.3  15. But the feature has been there at least since version 7.1, so basically always.&lt;/p&gt;\n&lt;h2&gt;Index&lt;/h2&gt;\n&lt;p&gt;The &lt;em&gt;perfect&lt;/em&gt; index for the above query would be a &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-multicolumn.html&quot; rel=&quot;noreferrer&quot;&gt;multi-column index&lt;/a&gt; spanning all three columns in matching sequence and with matching sort order:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; INDEX purchases_3c_idx &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; purchases (customer, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, id);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;May be too specialized. But use it if read performance for the particular query is crucial. If you have &lt;code&gt;DESC NULLS LAST&lt;/code&gt; in the query, use the same in the index so that sort order matches and the index is perfectly applicable.&lt;/p&gt;\n&lt;h2&gt;Effectiveness / Performance optimization&lt;/h2&gt;\n&lt;p&gt;Weigh cost and benefit before creating tailored indexes for each query. The potential of above index largely depends on &lt;strong&gt;data distribution&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;The index is used because it delivers pre-sorted data. In Postgres 9.2 or later the query can also benefit from an &lt;strong&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-index-only-scans.html&quot; rel=&quot;noreferrer&quot;&gt;index only scan&lt;/a&gt;&lt;/strong&gt; if the index is smaller than the underlying table. The index has to be scanned in its entirety, though. &lt;a href=&quot;https://dba.stackexchange.com/a/313755/3684&quot;&gt;Example.&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;For &lt;strong&gt;&lt;em&gt;few&lt;/em&gt; rows per customer&lt;/strong&gt; (high cardinality in column &lt;code&gt;customer&lt;/code&gt;), this is very efficient. Even more so if you need sorted output anyway. The benefit shrinks with a growing number of rows per customer.&lt;br&gt;\nIdeally, you have enough &lt;a href=&quot;https://www.postgresql.org/docs/current/runtime-config-resource.html#GUC-WORK-MEM&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;work_mem&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; to process the involved sort step in RAM and not spill to disk. But generally setting &lt;code&gt;work_mem&lt;/code&gt; &lt;em&gt;too&lt;/em&gt; high can have adverse effects. Consider &lt;code&gt;SET LOCAL&lt;/code&gt; for exceptionally big queries. Find how much you need with &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;. Mention of &quot;&lt;em&gt;Disk:&lt;/em&gt;&quot; in the sort step indicates the need for more:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8106181/configuration-parameter-work-mem-in-postgresql-on-linux/8108807#8108807&quot;&gt;Configuration parameter work_mem in PostgreSQL on Linux&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://dba.stackexchange.com/a/48633/3684&quot;&gt;Optimize simple query using ORDER BY date and text&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;For &lt;strong&gt;&lt;em&gt;many&lt;/em&gt; rows per customer&lt;/strong&gt; (low cardinality in column &lt;code&gt;customer&lt;/code&gt;), a &lt;a href=&quot;https://wiki.postgresql.org/wiki/Loose_indexscan&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;loose index scan&lt;/strong&gt;&lt;/a&gt; (a.k.a. &quot;skip scan&quot;) would be (much) more efficient, but that&apos;s not implemented up to Postgres 14. (An implementation for index-only scans is in development for Postgres 15. See &lt;a href=&quot;https://commitfest.postgresql.org/19/1741/&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://www.postgresql.org/message-id/flat/20200609102247.jdlatmfyeecg52fi%40localhost&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.)&lt;br&gt;\nFor now, there are &lt;strong&gt;faster query techniques&lt;/strong&gt; to substitute for this. In particular if you have a separate table holding unique customers, which is the typical use case. But also if you don&apos;t:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/66893968/select-distinct-is-slower-than-expected-on-my-table-in-postgresql/66894500#66894500&quot;&gt;SELECT DISTINCT is slower than expected on my table in PostgreSQL&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/25536422/optimize-group-by-query-to-retrieve-latest-record-per-user/25536748#25536748&quot;&gt;Optimize GROUP BY query to retrieve latest row per user&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/24244026/optimize-groupwise-maximum-query/24377356#24377356&quot;&gt;Optimize groupwise maximum query&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/25957558/querying-last-n-related-records-in-postgres/25965393#25965393&quot;&gt;Query last N related rows per row&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Benchmarks&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/34715134/939860&quot;&gt;See separate answer.&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;On databases that &lt;a href=&quot;https://en.wikipedia.org/wiki/Hierarchical_and_recursive_queries_in_SQL#Common_table_expression&quot; rel=&quot;noreferrer&quot;&gt;support CTE and windowing functions&lt;/a&gt;:&lt;/h2&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; summary &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; p.id, \n           p.customer, \n           p.total, \n           &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; p.customer \n                                 &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; p.total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rank\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; PURCHASES p)\n &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; summary\n &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; rank &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Supported by any database:&lt;/h2&gt;\n&lt;p&gt;But you need to add logic to break ties:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MIN&lt;/span&gt;(x.id),  &lt;span class=&quot;hljs-comment&quot;&gt;-- change to MAX if you want the highest&lt;/span&gt;\n         x.customer, \n         x.total\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; PURCHASES x\n    &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; p.customer,\n                 &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(total) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; max_total\n            &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; PURCHASES p\n        &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; p.customer) y &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; y.customer &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; x.customer\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; y.max_total &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; x.total\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; x.customer, x.total\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Benchmarks&lt;/h1&gt;\n&lt;p&gt;I tested the most interesting candidates:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Initially with &lt;strong&gt;Postgres 9.4&lt;/strong&gt; and &lt;strong&gt;9.5&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;Added accented tests for &lt;strong&gt;Postgres 13&lt;/strong&gt; later.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Basic test setup&lt;/h3&gt;\n&lt;p&gt;Main table: &lt;code&gt;purchases&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; purchases (\n  id          serial  &lt;span class=&quot;hljs-comment&quot;&gt;-- PK constraint added below&lt;/span&gt;\n, customer_id &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;-- REFERENCES customer&lt;/span&gt;\n, total       &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;-- could be amount of money in Cent&lt;/span&gt;\n, some_column text    &lt;span class=&quot;hljs-comment&quot;&gt;-- to make the row bigger, more realistic&lt;/span&gt;\n);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Dummy data (with some dead tuples), PK, index:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; purchases (customer_id, total, some_column)    &lt;span class=&quot;hljs-comment&quot;&gt;-- 200k rows&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; (random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;)::&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;             &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; customer_id  &lt;span class=&quot;hljs-comment&quot;&gt;-- 10k distinct customers&lt;/span&gt;\n     , (random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;)::&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; total     \n     , &lt;span class=&quot;hljs-string&quot;&gt;&apos;note: &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; repeat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, (random()&lt;span class=&quot;hljs-operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;)::&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   generate_series(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;200000&lt;/span&gt;) g;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;CONSTRAINT&lt;/span&gt; purchases_id_pkey &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY (id);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;-- some dead rows&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; purchases (customer_id, total, some_column)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; (random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;)::&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;             &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; customer_id  &lt;span class=&quot;hljs-comment&quot;&gt;-- 10k customers&lt;/span&gt;\n     , (random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;)::&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; total     \n     , &lt;span class=&quot;hljs-string&quot;&gt;&apos;note: &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; repeat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, (random()&lt;span class=&quot;hljs-operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;)::&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   generate_series(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;) g;  &lt;span class=&quot;hljs-comment&quot;&gt;-- add 20k to make it ~ 200k&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; INDEX purchases_3c_idx &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; purchases (customer_id, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, id);\n\nVACUUM ANALYZE purchases;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;customer&lt;/code&gt; table - used for optimized query:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; customer &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; customer_id, &lt;span class=&quot;hljs-string&quot;&gt;&apos;customer_&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; customer_id &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; customer\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; customer &lt;span class=&quot;hljs-keyword&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;CONSTRAINT&lt;/span&gt; customer_customer_id_pkey &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY (customer_id);\n\nVACUUM ANALYZE customer;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In my second test for 9.5 I used the same setup, but with 100000 distinct &lt;code&gt;customer_id&lt;/code&gt; to get &lt;em&gt;few&lt;/em&gt; rows per &lt;code&gt;customer_id&lt;/code&gt;.&lt;/p&gt;\n&lt;h3&gt;Object sizes for table &lt;code&gt;purchases&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;Basic setup: 200k rows in &lt;code&gt;purchases&lt;/code&gt;, 10k distinct &lt;code&gt;customer_id&lt;/code&gt;, avg. 20 rows per customer.&lt;br&gt;\nFor Postgres 9.5 I added a 2nd test with 86446 distinct customers - avg. 2.3 rows per customer.&lt;/p&gt;\n&lt;p&gt;Generated with a query taken from here:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://dba.stackexchange.com/a/23933/3684&quot;&gt;Measure the size of a PostgreSQL table row&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Gathered for Postgres 9.5:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;               what                | bytes/ct | bytes_pretty | bytes_per_row\n-----------------------------------+----------+--------------+---------------\n core_relation_size                | 20496384 | 20 MB        |           102\n visibility_map                    |        0 | 0 bytes      |             0\n free_space_map                    |    24576 | 24 kB        |             0\n table_size_incl_toast             | 20529152 | 20 MB        |           102\n indexes_size                      | 10977280 | 10 MB        |            54\n total_size_incl_toast_and_indexes | 31506432 | 30 MB        |           157\n live_rows_in_text_representation  | 13729802 | 13 MB        |            68\n ------------------------------    |          |              |\n row_count                         |   200045 |              |\n live_tuples                       |   200045 |              |\n dead_tuples                       |    19955 |              |\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Queries&lt;/h1&gt;\n&lt;h3&gt;1. &lt;code&gt;row_number()&lt;/code&gt; in CTE, (&lt;a href=&quot;https://stackoverflow.com/a/3800572/939860&quot;&gt;see other answer&lt;/a&gt;)&lt;/h3&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; cte &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n        , &lt;span class=&quot;hljs-built_in&quot;&gt;row_number&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rn\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n   )\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   cte\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  rn &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;2. &lt;code&gt;row_number()&lt;/code&gt; in subquery (my optimization)&lt;/h3&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   (\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n        , &lt;span class=&quot;hljs-built_in&quot;&gt;row_number&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rn\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n   ) sub\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  rn &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;3. &lt;code&gt;DISTINCT ON&lt;/code&gt; (&lt;a href=&quot;https://stackoverflow.com/a/7630564/939860&quot;&gt;see other answer&lt;/a&gt;)&lt;/h3&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (customer_id)\n       id, customer_id, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;4. rCTE with &lt;code&gt;LATERAL&lt;/code&gt; subquery (&lt;a href=&quot;https://stackoverflow.com/a/25536748/939860&quot;&gt;see here&lt;/a&gt;)&lt;/h3&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;RECURSIVE&lt;/span&gt; cte &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n   (  &lt;span class=&quot;hljs-comment&quot;&gt;-- parentheses required&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n   &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n   LIMIT  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n   )\n   &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; u.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   cte c\n   ,      &lt;span class=&quot;hljs-keyword&quot;&gt;LATERAL&lt;/span&gt; (\n      &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n      &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  customer_id &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; c.customer_id  &lt;span class=&quot;hljs-comment&quot;&gt;-- lateral reference&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n      LIMIT  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n      ) u\n   )\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   cte\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;5. &lt;code&gt;customer&lt;/code&gt; table with &lt;code&gt;LATERAL&lt;/code&gt; (&lt;a href=&quot;https://stackoverflow.com/a/25536748/939860&quot;&gt;see here&lt;/a&gt;)&lt;/h3&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; l.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   customer c\n,      &lt;span class=&quot;hljs-keyword&quot;&gt;LATERAL&lt;/span&gt; (\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n   &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  customer_id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c.customer_id  &lt;span class=&quot;hljs-comment&quot;&gt;-- lateral reference&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n   LIMIT  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n   ) l;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;6. &lt;code&gt;array_agg()&lt;/code&gt; with &lt;code&gt;ORDER BY&lt;/code&gt; (&lt;a href=&quot;https://stackoverflow.com/a/25534279/939860&quot;&gt;see other answer&lt;/a&gt;)&lt;/h3&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;array_agg&lt;/span&gt;(id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; id\n     , customer_id\n     , &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(total) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Results&lt;/h1&gt;\n&lt;p&gt;Execution time for above queries with &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-explain.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF&lt;/code&gt;&lt;/a&gt;, &lt;em&gt;best of 5 runs&lt;/em&gt; to compare with warm cache.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;All&lt;/em&gt; queries used an &lt;strong&gt;Index Only Scan&lt;/strong&gt; on &lt;code&gt;purchases2_3c_idx&lt;/code&gt; (among other steps). Some only to benefit from the smaller size of the index, others more effectively.&lt;/p&gt;\n&lt;h3&gt;A. Postgres 9.4 with 200k rows and ~ 20 per &lt;code&gt;customer_id&lt;/code&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 273.274 ms  \n2. 194.572 ms  \n3. 111.067 ms  \n4.  92.922 ms  -- !\n5.  37.679 ms  -- winner\n6. 189.495 ms\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;B. Same as A. with Postgres 9.5&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 288.006 ms\n2. 223.032 ms  \n3. 107.074 ms  \n4.  78.032 ms  -- !\n5.  33.944 ms  -- winner\n6. 211.540 ms  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;C. Same as B., but with ~ 2.3 rows per &lt;code&gt;customer_id&lt;/code&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 381.573 ms\n2. 311.976 ms\n3. 124.074 ms  -- winner\n4. 710.631 ms\n5. 311.976 ms\n6. 421.679 ms\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Retest with Postgres 13 on 2021-08-11&lt;/h1&gt;\n&lt;p&gt;Simplified test setup: no deleted rows, because &lt;code&gt;VACUUM ANALYZE&lt;/code&gt; cleans the table completely for the simple case.&lt;/p&gt;\n&lt;p&gt;Important changes for Postgres:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;General performance improvements.&lt;/li&gt;\n&lt;li&gt;CTEs can be inlined since Postgres 12, so query 1. and 2. now perform mostly identical (same query plan).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;D. Like B. ~ 20 rows per customer_id&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 103 ms\n2. 103 ms  \n3.  23 ms  -- winner  \n4.  71 ms  \n5.  22 ms  -- winner\n6.  81 ms  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;db&amp;lt;&amp;gt;fiddle &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=4cfd751a33e9d0ca3b024cb5795a5f6b&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;E. Like C. ~ 2.3 rows per customer_id&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 127 ms\n2. 126 ms  \n3.  36 ms  -- winner  \n4. 620 ms  \n5. 145 ms\n6. 203 ms  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;db&amp;lt;&amp;gt;fiddle &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=e0eda395be68b453f51dc6fba4f3d4a6&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h2&gt;Accented tests with Postgres 13&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;1M rows&lt;/strong&gt;, 10.000 vs. 100 vs. 1.6 rows per customer.&lt;/p&gt;\n&lt;h3&gt;F. with ~ 10.000 rows per customer&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 526 ms\n2. 527 ms  \n3. 127 ms\n4.   2 ms  -- winner !\n5.   1 ms  -- winner !\n6. 356 ms  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;db&amp;lt;&amp;gt;fiddle &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=1ded28c4adedd3292ba5e0a8401a641f&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;G. with ~ 100 rows per customer&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 535 ms\n2. 529 ms  \n3. 132 ms\n4. 108 ms  -- !\n5.  71 ms  -- winner\n6. 376 ms  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;db&amp;lt;&amp;gt;fiddle &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=5f797bb9e694a4f0117ed3c957af1de2&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;H. with ~ 1.6 rows per customer&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1.  691 ms\n2.  684 ms  \n3.  234 ms  -- winner\n4. 4669 ms\n5. 1089 ms\n6. 1264 ms  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;db&amp;lt;&amp;gt;fiddle &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=6cd53673f04cf3b00a3aeb16fc071926&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h1&gt;Conclusions&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;DISTINCT ON&lt;/code&gt; uses the index effectively and typically performs best for &lt;strong&gt;few&lt;/strong&gt; rows per group. And it performs decently even with many rows per group.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;For &lt;strong&gt;many&lt;/strong&gt; rows per group, emulating an index skip scan with an rCTE performs best - second only to the query technique with a separate lookup table (if that&apos;s available).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;row_number()&lt;/code&gt;&lt;/strong&gt; technique demonstrated in the currently accepted answer &lt;strong&gt;never wins any performance test&lt;/strong&gt;. Not then, not now. It never comes even close to &lt;code&gt;DISTINCT ON&lt;/code&gt;, not even when the data distribution is unfavorable for the latter. The only good thing about &lt;code&gt;row_number()&lt;/code&gt;: it does not scale terribly, just mediocre.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;More benchmarks&lt;/h2&gt;\n&lt;p&gt;Benchmark by &quot;ogr&quot; with &lt;strong&gt;10M rows and 60k unique &quot;customers&quot;&lt;/strong&gt; on &lt;strong&gt;Postgres 11.5&lt;/strong&gt;. Results are in line with what we have seen so far:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/57893251/proper-way-to-access-latest-row-for-each-individual-identifier/57975451#57975451&quot;&gt;Proper way to access latest row for each individual identifier?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Original (outdated) benchmark from 2011&lt;/h3&gt;\n&lt;p&gt;I ran three tests with PostgreSQL &lt;strong&gt;9.1&lt;/strong&gt; on a real life table of 65579 rows and single-column btree indexes on each of the three columns involved and took the best &lt;em&gt;execution time&lt;/em&gt; of 5 runs.&lt;br&gt;\nComparing &lt;a href=&quot;https://stackoverflow.com/a/3800572/939860&quot;&gt;@OMGPonies&apos;&lt;/a&gt; first query (&lt;strong&gt;&lt;code&gt;A&lt;/code&gt;&lt;/strong&gt;) to the &lt;a href=&quot;https://stackoverflow.com/a/7630564/939860&quot;&gt;above &lt;code&gt;DISTINCT ON&lt;/code&gt; solution&lt;/a&gt; (&lt;strong&gt;&lt;code&gt;B&lt;/code&gt;&lt;/strong&gt;):&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Select the whole table, results in 5958 rows in this case.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;A: 567.218 ms\nB: 386.673 ms\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Use condition &lt;code&gt;WHERE customer BETWEEN x AND y&lt;/code&gt; resulting in 1000 rows.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;A: 249.136 ms\nB:  55.111 ms\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;Select a single customer with &lt;code&gt;WHERE customer = x&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;A:   0.143 ms\nB:   0.072 ms\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Same test repeated with the index described in the other answer:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; INDEX purchases_3c_idx &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; purchases (customer, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, id);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1A: 277.953 ms  \n1B: 193.547 ms\n\n2A: 249.796 ms -- special index not used  \n2B:  28.679 ms\n\n3A:   0.120 ms  \n3B:   0.048 ms\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is common &lt;a href=&quot;/questions/tagged/greatest-n-per-group&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;greatest-n-per-group&apos;&quot; rel=&quot;tag&quot;&gt;greatest-n-per-group&lt;/a&gt; problem, which already has well tested and highly &lt;a href=&quot;https://stackoverflow.com/q/8748986/684229&quot;&gt;optimized solutions&lt;/a&gt;. Personally I prefer the &lt;a href=&quot;https://stackoverflow.com/a/8749095/684229&quot;&gt;left join solution by Bill Karwin&lt;/a&gt; (the &lt;a href=&quot;https://stackoverflow.com/a/123481/684229&quot;&gt;original post with lots of other solutions&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;Note that bunch of solutions to this common problem can surprisingly be found in the one of most official sources, &lt;strong&gt;MySQL manual&lt;/strong&gt;! See &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/example-maximum-column-group-row.html&quot; rel=&quot;noreferrer&quot;&gt;Examples of Common Queries :: The Rows Holding the Group-wise Maximum of a Certain Column&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In Postgres you can use &lt;code&gt;array_agg&lt;/code&gt; like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;  customer,\n        (&lt;span class=&quot;hljs-built_in&quot;&gt;array_agg&lt;/span&gt;(id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],\n        &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(total)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will give you the &lt;code&gt;id&lt;/code&gt; of each customer&apos;s largest purchase.&lt;/p&gt;\n\n&lt;p&gt;Some things to note:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;array_agg&lt;/code&gt; is an aggregate function, so it works with &lt;code&gt;GROUP BY&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_agg&lt;/code&gt; lets you specify an ordering scoped to just itself, so it doesn&apos;t constrain the structure of the whole query. There is also syntax for how you sort NULLs, if you need to do something different from the default.&lt;/li&gt;\n&lt;li&gt;Once we build the array, we take the first element. (Postgres arrays are 1-indexed, not 0-indexed).&lt;/li&gt;\n&lt;li&gt;You could use &lt;code&gt;array_agg&lt;/code&gt; in a similar way for your third output column, but &lt;code&gt;max(total)&lt;/code&gt; is simpler.&lt;/li&gt;\n&lt;li&gt;Unlike &lt;code&gt;DISTINCT ON&lt;/code&gt;, using &lt;code&gt;array_agg&lt;/code&gt; lets you keep your &lt;code&gt;GROUP BY&lt;/code&gt;, in case you want that for other reasons.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The solution is not very efficient as pointed by Erwin, because of presence of SubQs&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; purchases p1 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(total) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; p1.customer&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;customer) &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The Query:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; purchases.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; p \n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; \n  p.customer &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; purchases.customer \n  &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; \n  purchases.total &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; p.total\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; p.total &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;HOW DOES THAT WORK!&lt;/strong&gt; (I&apos;ve been there)&lt;/p&gt;\n&lt;p&gt;We want to make sure that we only have the highest total for each purchase.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Some Theoretical Stuff&lt;/strong&gt; (skip this part if you only want to understand the query)&lt;/p&gt;\n&lt;p&gt;Let Total be a function T(customer,id) where it returns a value given the name and id\nTo prove that the given total (T(customer,id)) is the highest we have to prove that\nWe want to prove either&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;x T(customer,id) &amp;gt; T(customer,x) (this total is higher than all other\ntotal for that customer)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;OR&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;¬x T(customer, id) &amp;lt; T(customer, x)   (there exists no higher total for\nthat customer)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The first approach will need us to get all the records for that name which I do not really like.&lt;/p&gt;\n&lt;p&gt;The second one will need a smart way to say there can be no record higher than this one.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Back to SQL&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If we left joins the table on the name and total being less than the joined table:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; p \n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; \np.customer &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; purchases.customer \n&lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; \npurchases.total &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; p.total\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;we make sure that all records that have another record with the higher total for the same user to be joined:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--------------+---------------------+-----------------+------+------------+---------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; purchases.id &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;  purchases.customer &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; purchases.total &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p.id &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p.customer &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p.total &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--------------+---------------------+-----------------+------+------------+---------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Tom                 &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Tom        &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Tom                 &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Bob                 &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Bob        &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Bob                 &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Alice               &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Alice      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;700&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Alice               &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;700&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--------------+---------------------+-----------------+------+------------+---------+&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That will help us filter for the highest total for each purchase with no grouping needed:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; p.total &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n    \n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--------------+----------------+-----------------+------+--------+---------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; purchases.id &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; purchases.name &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; purchases.total &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p.id &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p.name &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p.total &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--------------+----------------+-----------------+------+--------+---------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Tom            &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;        &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Bob            &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;        &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Alice          &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;700&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;        &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--------------+----------------+-----------------+------+--------+---------+&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And that&apos;s the answer we need.&lt;/p&gt;\n    ","\n&lt;p&gt;I use this way (postgresql only): &lt;a href=&quot;https://wiki.postgresql.org/wiki/First/last_%28aggregate%29&quot;&gt;https://wiki.postgresql.org/wiki/First/last_%28aggregate%29&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;-- Create a function that always returns the first non-NULL item&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; REPLACE &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION&lt;/span&gt; public.first_agg ( anyelement, anyelement )\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURNS&lt;/span&gt; anyelement &lt;span class=&quot;hljs-keyword&quot;&gt;LANGUAGE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt; IMMUTABLE STRICT &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; $$\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; $&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n$$;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- And then wrap an aggregate around it&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; AGGREGATE public.first (\n        sfunc    &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; public.first_agg,\n        basetype &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anyelement,\n        stype    &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anyelement\n);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Create a function that always returns the last non-NULL item&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; REPLACE &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION&lt;/span&gt; public.last_agg ( anyelement, anyelement )\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURNS&lt;/span&gt; anyelement &lt;span class=&quot;hljs-keyword&quot;&gt;LANGUAGE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt; IMMUTABLE STRICT &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; $$\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; $&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n$$;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- And then wrap an aggregate around it&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; AGGREGATE public.last (\n        sfunc    &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; public.last_agg,\n        basetype &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anyelement,\n        stype    &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anyelement\n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then your example should work &lt;em&gt;almost&lt;/em&gt; as is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt;(id), customer, &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt;(total)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;  purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt;(total) &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;CAVEAT: It ignore&apos;s NULL rows&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;Edit 1 - Use the postgres extension instead&lt;/h1&gt;\n\n&lt;p&gt;Now I use this way: &lt;a href=&quot;http://pgxn.org/dist/first_last_agg/&quot;&gt;http://pgxn.org/dist/first_last_agg/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;To install on ubuntu 14.04:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;apt&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; install postgresql&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;server&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;dev&lt;span class=&quot;hljs-number&quot;&gt;-9.3&lt;/span&gt; git build&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;essential &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;y\ngit clone git:&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;github.com&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;wulczer&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;first_last_agg.git\ncd first_last_app\nmake &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make install\npsql &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;c &lt;span class=&quot;hljs-string&quot;&gt;&apos;create extension first_last_agg&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s a postgres extension that gives you first and last functions; apparently faster than the above way.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;Edit 2 - Ordering and filtering&lt;/h1&gt;\n\n&lt;p&gt;If you use aggregate functions (like these), you can order the results, without the need to have the data already ordered:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;http:&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;www.postgresql.org&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;docs&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;expressions.html#SYNTAX&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;AGGREGATES\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So the equivalent example, with ordering would be something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt;(id &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id), customer, &lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt;(total &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; purchases\n &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer\n &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt;(total);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course you can order and filter as you deem fit within the aggregate; it&apos;s very powerful syntax.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;ARRAY_AGG&lt;/code&gt; function for &lt;a href=&quot;https://www.postgresql.org/docs/9.5/functions-aggregate.html&quot; rel=&quot;noreferrer&quot;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&quot;https://docs.microsoft.com/en-us/u-sql/functions/aggregate/array-agg&quot; rel=&quot;noreferrer&quot;&gt;U-SQL&lt;/a&gt;, &lt;a href=&quot;https://www.ibm.com/support/knowledgecenter/en/SSEPGG_10.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0050494.html&quot; rel=&quot;noreferrer&quot;&gt;IBM DB2&lt;/a&gt;, and &lt;a href=&quot;https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#array_agg&quot; rel=&quot;noreferrer&quot;&gt;Google BigQuery SQL&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; customer, (&lt;span class=&quot;hljs-built_in&quot;&gt;ARRAY_AGG&lt;/span&gt;(id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(total)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In SQL Server you can do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;()\n&lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; StRank, &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Purchases) n\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; StRank &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Explaination:Here  &lt;strong&gt;Group by&lt;/strong&gt; is done on the basis of customer and then order it by total then each such group is given serial number as StRank and we are taking out first 1 customer whose StRank is 1&lt;/p&gt;\n    ","\n&lt;p&gt;Very fast solution&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    purchases a \n    &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; ( \n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; customer, &lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;( id ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; id \n        &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; purchases \n        &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer \n    ) b &lt;span class=&quot;hljs-keyword&quot;&gt;USING&lt;/span&gt; ( id );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and really very fast if table is indexed by id:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; index purchases_id &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; purchases (id);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Snowflake/Teradata supports &lt;a href=&quot;https://docs.snowflake.net/manuals/sql-reference/constructs/qualify.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;QUALIFY&lt;/code&gt;&lt;/a&gt; clause which works like &lt;code&gt;HAVING&lt;/code&gt; for windowed functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; PURCHASES\nQUALIFY &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; p.customer &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; p.total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In PostgreSQL, another possibility is to use the &lt;a href=&quot;https://www.postgresql.org/docs/current/functions-window.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;first_value&lt;/code&gt;&lt;/a&gt; window function in combination with &lt;code&gt;SELECT DISTINCT&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;distinct&lt;/span&gt; customer_id,\n                &lt;span class=&quot;hljs-built_in&quot;&gt;first_value&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;row&lt;/span&gt;(id, total)) &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; customer_id &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;, id)\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;            purchases;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I created a composite &lt;code&gt;(id, total)&lt;/code&gt;, so both values are returned by the same aggregate. You can of course always apply &lt;code&gt;first_value()&lt;/code&gt; twice.&lt;/p&gt;\n    ","\n&lt;p&gt;This way it work for me:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; article, dealer, price\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   shop s1\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  price&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(s2.price)\n              &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; shop s2\n              &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; s1.article &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; s2.article\n              &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; s2.article)\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; article;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Select highest price on each article&lt;/p&gt;\n    ","\n&lt;p&gt;This is how we can achieve this by using windows function:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; purchases (id int4, customer &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;), total &lt;span class=&quot;hljs-type&quot;&gt;integer&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Joe&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sally&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Joe&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sally&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ID, CUSTOMER, TOTAL &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ID, CUSTOMER, TOTAL,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;row_number&lt;/span&gt; () &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; CUSTOMER &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; TOTAL &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;) RN\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; purchases) A &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; RN &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/uwrys.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/uwrys.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The accepted OMG Ponies&apos; &quot;Supported by any database&quot; solution has good speed from my test.&lt;/p&gt;\n\n&lt;p&gt;Here I provide a same-approach, but more complete and clean any-database solution.   Ties are considered (assume desire to get only one row for each customer, even multiple records for max total per customer), and other purchase fields (e.g. purchase_payment_id) will be selected for the real matching rows in the purchase table.&lt;/p&gt;\n\n&lt;p&gt;Supported by any database:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; purchase\n&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(id) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; purchase\n    &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; (\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; customer, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(total) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; purchase\n        &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; customer\n    ) t1 &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (customer, total)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; customer\n) t2 &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (id)\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; customer\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This query is reasonably fast especially when there is a composite index like (customer, total) on the purchase table.&lt;/p&gt;\n\n&lt;p&gt;Remark:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;t1, t2 are subquery alias which could be removed depending on database.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;: the &lt;code&gt;using (...)&lt;/code&gt; clause is currently not supported in MS-SQL and Oracle db as of this edit on Jan 2017. You have to expand it yourself to e.g. &lt;code&gt;on t2.id = purchase.id&lt;/code&gt; etc.  The USING syntax works in SQLite, MySQL and PostgreSQL.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If you want to select any (by your some specific condition) row from the set of aggregated rows. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you want to use another (&lt;code&gt;sum/avg&lt;/code&gt;) aggregation function in addition to &lt;code&gt;max/min&lt;/code&gt;. Thus you can not use clue with &lt;code&gt;DISTINCT ON&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;You can use next subquery:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;  \n    (  \n       &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;id&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t2   \n       &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ANY&lt;/span&gt; ( &lt;span class=&quot;hljs-built_in&quot;&gt;ARRAY_AGG&lt;/span&gt;( tf.id ) ) &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; amount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;( tf.amount )   \n    ) id,  \n    name,   \n    &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(amount) ma,  \n    &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;( ratio )  \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t2  tf  \n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can replace &lt;code&gt;amount = MAX( tf.amount )&lt;/code&gt; with any condition you want with one restriction: This subquery must not return more than one row&lt;/p&gt;\n\n&lt;p&gt;But if you wanna to do such things you probably looking for &lt;a href=&quot;https://www.postgresql.org/docs/current/static/tutorial-window.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;window functions&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For SQl Server the most efficient way is:   &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt;\nids &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; ( &lt;span class=&quot;hljs-comment&quot;&gt;--condition for split table into groups&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; v(i) \n) \n,src &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; ( \n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; yourTable &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;--use this as filter for other conditions&lt;/span&gt;\n)\n,joined &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; tops.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; ids \n    &lt;span class=&quot;hljs-keyword&quot;&gt;cross&lt;/span&gt; apply &lt;span class=&quot;hljs-comment&quot;&gt;--it`s like for each rows&lt;/span&gt;\n    (\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; top(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; src\n        &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; CommodityId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ids.i \n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; tops\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; joined\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and don&apos;t forget to create clustered index for used columns&lt;/p&gt;\n    ","\n&lt;p&gt;My approach via window function &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=01c699f3f47ca9fca8215f8cbf556218&quot; rel=&quot;nofollow noreferrer&quot;&gt;dbfiddle&lt;/a&gt;:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Assign &lt;code&gt;row_number&lt;/code&gt; at each group: &lt;code&gt;row_number() over (partition by agreement_id, order_id ) as nrow&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Take only first row at group: &lt;code&gt;filter (where nrow = 1)&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; intermediate &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; \n &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;,\n &lt;span class=&quot;hljs-built_in&quot;&gt;row_number&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; agreement_id, order_id ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; nrow,\n (&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;( suma ) &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; agreement_id, order_id ))::&lt;span class=&quot;hljs-type&quot;&gt;numeric&lt;/span&gt;( &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; order_suma,\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;your &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; \n  &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;( order_suma ) &lt;span class=&quot;hljs-keyword&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; nrow &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; agreement_id)\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; intermediate\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This can be achieved easily by MAX FUNCTION on total and GROUP BY id and customer.&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(total) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;  purchases &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, customer\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;since you are only looking for each largest one, why not query for &lt;code&gt;MAX(total)&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3779853/phil294&quot; title=&quot;9,333 reputation&quot; class=&quot;comment-user&quot;&gt;phil294&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103264593_3800551&quot;&gt;&lt;span title=&quot;2019-10-19 14:40:25Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 19, 2019 at 14:40&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@phil294 querying for max(total) will not associate that total with the &apos;id&apos; value of the row on which it occurred.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/649133/gwideman&quot; title=&quot;2,551 reputation&quot; class=&quot;comment-user&quot;&gt;gwideman&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106305545_3800551&quot;&gt;&lt;span title=&quot;2020-02-07 01:19:39Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 7, 2020 at 1:19&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Does this answer your question? &lt;a href=&quot;https://stackoverflow.com/questions/1881728/how-do-i-select-the-first-row-per-group-in-an-sql-query&quot;&gt;How do I select the first row per group in an SQL Query?&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/39590/mafu&quot; title=&quot;30,384 reputation&quot; class=&quot;comment-user&quot;&gt;mafu&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment118842773_3800551&quot;&gt;&lt;span title=&quot;2021-04-23 17:58:09Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 23, 2021 at 17:58&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is a great answer for most database sizes, but I want to point out that as you approach ~million rows &lt;code&gt;DISTINCT ON&lt;/code&gt; becomes extremely slow. The implementation &lt;i&gt;always&lt;/i&gt; sorts the entire table and scans through it for duplicates, ignoring all indices (even if you have created the required multi-column index). See &lt;a href=&quot;http://explainextended.com/2009/05/03/postgresql-optimizing-distinct/&quot; rel=&quot;nofollow noreferrer&quot;&gt;explainextended.com/2009/05/03/postgresql-optimizing-distinct&lt;/a&gt; for a possible solution.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/289020/meekohi&quot; title=&quot;9,916 reputation&quot; class=&quot;comment-user&quot;&gt;Meekohi&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment34434519_7630564&quot;&gt;&lt;span title=&quot;2014-03-24 15:52:08Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 24, 2014 at 15:52&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Some overzealous admin or mod keeps deleting all comments except the one by Meekohi. But this comment is incorrect and misleading. &lt;code&gt;DISTINCT ON&lt;/code&gt; can and will use an index. The key question is data distribution, &lt;i&gt;not&lt;/i&gt; the size of the table, as explained above and shown in the benchmarks below.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/939860/erwin-brandstetter&quot; title=&quot;544,999 reputation&quot; class=&quot;comment-user&quot;&gt;Erwin Brandstetter&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment122974141_7630564&quot;&gt;&lt;span title=&quot;2021-10-14 15:51:09Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 14, 2021 at 15:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;ROW_NUMBER() OVER(PARTITION BY [...])&lt;/code&gt; along with some other optimizations helped me get a query down from 30 seconds to a few milliseconds. Thanks! (PostgreSQL 9.2)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/703229/sam&quot; title=&quot;19,456 reputation&quot; class=&quot;comment-user&quot;&gt;Sam&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment40993977_3800572&quot;&gt;&lt;span title=&quot;2014-10-01 21:29:27Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 1, 2014 at 21:29&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;can please you add custom aggregate method to the benchmark? something like &quot;select first(purchases order by id) from purchases group by customer&quot; &lt;a href=&quot;https://wiki.postgresql.org/wiki/First/last_(aggregate)&quot; rel=&quot;nofollow noreferrer&quot;&gt;wiki.postgresql.org/wiki/First/last_(aggregate)&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5015623/adithya-sama&quot; title=&quot;316 reputation&quot; class=&quot;comment-user&quot;&gt;Adithya Sama&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment123394404_34715134&quot;&gt;&lt;span title=&quot;2021-11-02 09:02:40Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 2, 2021 at 9:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Yes, we can please add the group by query in the benchmark. I know it&apos;s not exactly the same in case of duplicates. But it might be in a lot of use cases (like timestamp) and it&apos;s the first solution that folks think of: SELECT id, customer_id, total FROM purchases a JOIN (    SELECT customer_id, MAX(total) AS total GROUP BY customer_id ) b ON a.customer_id = b.customer AND a.total = b.total&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/577764/na-ka-na&quot; title=&quot;1,518 reputation&quot; class=&quot;comment-user&quot;&gt;na_ka_na&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment125397878_34715134&quot;&gt;&lt;span title=&quot;2022-01-31 22:51:13Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 31 at 22:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How is the MySQL manual in any way &quot;official&quot; for Postgres / SQLite (not to mention SQL) questions? Also, to be clear, the &lt;code&gt;DISTINCT ON&lt;/code&gt; version is much shorter, simpler and generally performs better in Postgres than alternatives with a self &lt;code&gt;LEFT JOIN&lt;/code&gt; or semi-anti-join with &lt;code&gt;NOT EXISTS&lt;/code&gt;. It is also &quot;well tested&quot;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/939860/erwin-brandstetter&quot; title=&quot;544,999 reputation&quot; class=&quot;comment-user&quot;&gt;Erwin Brandstetter&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment25498632_17338495&quot;&gt;&lt;span title=&quot;2013-07-08 18:27:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 8, 2013 at 18:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This doesn&apos;t do what the OP asks for.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/939860/erwin-brandstetter&quot; title=&quot;544,999 reputation&quot; class=&quot;comment-user&quot;&gt;Erwin Brandstetter&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment124422040_70376841&quot;&gt;&lt;span title=&quot;2021-12-16 22:55:46Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 16, 2021 at 22:55&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":157,"title":"Select first row in each GROUP BY group?","content":"\n                \n\n&lt;p&gt;As the title suggests, I&apos;d like to select the first row of each set of rows grouped with a &lt;code&gt;GROUP BY&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Specifically, if I&apos;ve got a &lt;code&gt;purchases&lt;/code&gt; table that looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; purchases;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;My Output:&lt;/strong&gt;&lt;/p&gt;\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;id&lt;/th&gt;\n&lt;th&gt;customer&lt;/th&gt;\n&lt;th&gt;total&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;Joe&lt;/td&gt;\n&lt;td&gt;5&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;Sally&lt;/td&gt;\n&lt;td&gt;3&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;3&lt;/td&gt;\n&lt;td&gt;Joe&lt;/td&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;4&lt;/td&gt;\n&lt;td&gt;Sally&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;p&gt;I&apos;d like to query for the &lt;code&gt;id&lt;/code&gt; of the largest purchase (&lt;code&gt;total&lt;/code&gt;) made by each &lt;code&gt;customer&lt;/code&gt;. Something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt;(id), customer, &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt;(total)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;  purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Expected Output:&lt;/strong&gt;&lt;/p&gt;\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;FIRST(id)&lt;/th&gt;\n&lt;th&gt;customer&lt;/th&gt;\n&lt;th&gt;FIRST(total)&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;Joe&lt;/td&gt;\n&lt;td&gt;5&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;Sally&lt;/td&gt;\n&lt;td&gt;3&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;    ","slug":"select-first-row-in-each-group-by-group-1657384809388","postType":"QUESTION","createdAt":"2022-07-09T16:40:09.000Z","updatedAt":"2022-07-09T16:40:09.000Z","tags":[{"id":570,"name":"sqlite","slug":"sqlite","createdAt":"2022-07-09T16:40:09.000Z","updatedAt":"2022-07-09T16:40:09.000Z","Questions_Tags":{"questionId":157,"tagId":570}},{"id":571,"name":"postgresql","slug":"postgresql","createdAt":"2022-07-09T16:40:09.000Z","updatedAt":"2022-07-09T16:40:09.000Z","Questions_Tags":{"questionId":157,"tagId":571}}]}},"__N_SSG":true}