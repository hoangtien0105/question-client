{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Don&apos;t like reading? Jump straight to the sample projects on GitHub:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/smileyborg/TableViewCellWithAutoLayoutiOS8&quot; rel=&quot;noreferrer&quot;&gt;iOS 8 Sample Project&lt;/a&gt; - Requires iOS 8&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/smileyborg/TableViewCellWithAutoLayout&quot; rel=&quot;noreferrer&quot;&gt;iOS 7 Sample Project&lt;/a&gt; - Works on iOS 7+&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;Conceptual Description&lt;/h1&gt;\n&lt;p&gt;The first 2 steps below are applicable regardless of which iOS versions you are developing for.&lt;/p&gt;\n&lt;h2&gt;1. Set Up &amp;amp; Add Constraints&lt;/h2&gt;\n&lt;p&gt;In your &lt;code&gt;UITableViewCell&lt;/code&gt; subclass, add constraints so that the subviews of the cell have their edges pinned to the edges of the cell&apos;s &lt;strong&gt;contentView&lt;/strong&gt; (most importantly to the top AND bottom edges). &lt;strong&gt;NOTE: don&apos;t pin subviews to the cell itself; only to the cell&apos;s &lt;code&gt;contentView&lt;/code&gt;!&lt;/strong&gt; Let the intrinsic content size of these subviews drive the height of the table view cell&apos;s content view by making sure the &lt;em&gt;content compression resistance&lt;/em&gt; and &lt;em&gt;content hugging&lt;/em&gt; constraints in the vertical dimension for each subview are not being overridden by higher-priority constraints you have added. (&lt;a href=&quot;https://stackoverflow.com/questions/22599069/what-is-the-content-compression-resistance-and-content-hugging-of-a-uiview&quot;&gt;Huh? Click here.&lt;/a&gt;)&lt;/p&gt;\n&lt;p&gt;Remember, the idea is to have the cell&apos;s subviews connected vertically to the cell&apos;s content view so that they can &quot;exert pressure&quot; and make the content view expand to fit them. Using an example cell with a few subviews, here is a visual illustration of what &lt;strong&gt;some&lt;/strong&gt; &lt;em&gt;(not all!)&lt;/em&gt; of your constraints would need to look like:&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/CTUPi.png&quot; alt=&quot;Example illustration of constraints on a table view cell.&quot;&gt;&lt;/p&gt;\n&lt;p&gt;You can imagine that as more text is added to the multi-line body label in the example cell above, it will need to grow vertically to fit the text, which will effectively force the cell to grow in height. (Of course, you need to get the constraints right in order for this to work correctly!)&lt;/p&gt;\n&lt;p&gt;Getting your constraints right is definitely the &lt;strong&gt;hardest and most important part&lt;/strong&gt; of getting dynamic cell heights working with Auto Layout. If you make a mistake here, it could prevent everything else from working -- so take your time! I recommend setting up your constraints in code because you know exactly which constraints are being added where, and it&apos;s a lot easier to debug when things go wrong. Adding constraints in code can be just as easy as and significantly more powerful than Interface Builder using layout anchors, or one of the fantastic open source APIs available on GitHub.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you&apos;re adding constraints in code, you should do this once from within the &lt;code&gt;updateConstraints&lt;/code&gt; method of your UITableViewCell subclass. Note that &lt;code&gt;updateConstraints&lt;/code&gt; may be called more than once, so to avoid adding the same constraints more than once, make sure to wrap your constraint-adding code within &lt;code&gt;updateConstraints&lt;/code&gt; in a check for a boolean property such as &lt;code&gt;didSetupConstraints&lt;/code&gt; (which you set to YES after you run your constraint-adding code once). On the other hand, if you have code that updates existing constraints (such as adjusting the &lt;code&gt;constant&lt;/code&gt; property on some constraints), place this in &lt;code&gt;updateConstraints&lt;/code&gt; but outside of the check for &lt;code&gt;didSetupConstraints&lt;/code&gt; so it can run every time the method is called.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;2. Determine Unique Table View Cell Reuse Identifiers&lt;/h2&gt;\n&lt;p&gt;For every unique set of constraints in the cell, use a unique cell reuse identifier. In other words, if your cells have more than one unique layout, each unique layout should receive its own reuse identifier. (A good hint that you need to use a new reuse identifier is when your cell variant has a different number of subviews, or the subviews are arranged in a distinct fashion.)&lt;/p&gt;\n&lt;p&gt;For example, if you were displaying an email message in each cell, you might have 4 unique layouts: messages with just a subject, messages with a subject and a body, messages with a subject and a photo attachment, and messages with a subject, body, and photo attachment. Each layout has completely different constraints required to achieve it, so once the cell is initialized and the constraints are added for one of these cell types, the cell should get a unique reuse identifier specific to that cell type. This means when you dequeue a cell for reuse, the constraints have already been added and are ready to go for that cell type.&lt;/p&gt;\n&lt;p&gt;Note that due to differences in intrinsic content size, cells with the same constraints (type) may still have varying heights! Don&apos;t confuse fundamentally different layouts (different constraints) with different calculated view frames (solved from identical constraints) due to different sizes of content.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Do not add cells with completely different sets of constraints to the same reuse pool (i.e. use the same reuse identifier) and then attempt to remove the old constraints and set up  new constraints from scratch after each dequeue. The internal Auto Layout engine is not designed to handle large scale changes in constraints, and you will see massive performance issues.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;For iOS 8 - Self-Sizing Cells&lt;/h2&gt;\n&lt;h3&gt;3. Enable Row Height Estimation&lt;/h3&gt;\n&lt;blockquote&gt;\n&lt;p&gt;To enable self-sizing table view cells, you must set the table views\nrowHeight property to UITableViewAutomaticDimension. You must also\nassign a value to the estimatedRowHeight property. As soon as both of\nthese properties are set, the system uses Auto Layout to calculate the\nrows actual height&lt;/p&gt;\n&lt;p&gt;&lt;sub&gt;Apple: &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/WorkingwithSelf-SizingTableViewCells.html&quot; rel=&quot;noreferrer&quot;&gt;Working with Self-Sizing Table View Cells&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;With iOS 8, Apple has internalized much of the work that previously had to be implemented by you prior to iOS 8. In order to allow the self-sizing cell mechanism to work, you must first set the &lt;code&gt;rowHeight&lt;/code&gt; property on the table view to the constant &lt;code&gt;UITableView.automaticDimension&lt;/code&gt;. Then, you simply need to enable row height estimation by setting the table view&apos;s &lt;code&gt;estimatedRowHeight&lt;/code&gt; property to a nonzero value, for example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;self.tableView.rowHeight&lt;/span&gt; = UITableView.automaticDimension&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;self.tableView.estimatedRowHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;44.0&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;; // set to whatever your &quot;average&quot; cell height is&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What this does is provide the table view with a temporary estimate/placeholder for the row heights of cells that are not yet onscreen. Then, when these cells are about to scroll on screen, the actual row height will be calculated. To determine the actual height for each row, the table view automatically asks each cell what height its &lt;code&gt;contentView&lt;/code&gt; needs to be based on the known fixed width of the content view (which is based on the table view&apos;s width, minus any additional things like a section index or accessory view) and the auto layout constraints you have added to the cell&apos;s content view and subviews. Once this actual cell height has been determined, the old estimated height for the row is updated with the new actual height (and any adjustments to the table view&apos;s contentSize/contentOffset are made as needed for you).&lt;/p&gt;\n&lt;p&gt;Generally speaking, the estimate you provide doesn&apos;t have to be very accurate -- it is only used to correctly size the scroll indicator in the table view, and the table view does a good job of adjusting the scroll indicator for incorrect estimates as you scroll cells onscreen. You should set the &lt;code&gt;estimatedRowHeight&lt;/code&gt; property on the table view (in &lt;code&gt;viewDidLoad&lt;/code&gt; or similar) to a constant value that is the &quot;average&quot; row height. &lt;em&gt;Only if your row heights have extreme variability (e.g. differ by an order of magnitude) and you notice the scroll indicator &quot;jumping&quot; as you scroll should you bother implementing &lt;code&gt;tableView:estimatedHeightForRowAtIndexPath:&lt;/code&gt; to do the minimal calculation required to return a more accurate estimate for each row.&lt;/em&gt;&lt;/p&gt;\n&lt;h2&gt;For iOS 7 support (implementing auto cell sizing yourself)&lt;/h2&gt;\n&lt;h3&gt;3. Do a Layout Pass &amp;amp; Get The Cell Height&lt;/h3&gt;\n&lt;p&gt;First, instantiate an offscreen instance of a table view cell, &lt;em&gt;one instance for each reuse identifier&lt;/em&gt;, that is used strictly for height calculations. (Offscreen meaning the cell reference is stored in a property/ivar on the view controller and never returned from &lt;code&gt;tableView:cellForRowAtIndexPath:&lt;/code&gt; for the table view to actually render onscreen.) Next, the cell must be configured with the exact content (e.g. text, images, etc) that it would hold if it were to be displayed in the table view.&lt;/p&gt;\n&lt;p&gt;Then, force the cell to immediately layout its subviews, and then use the &lt;code&gt;systemLayoutSizeFittingSize:&lt;/code&gt; method on the &lt;code&gt;UITableViewCell&lt;/code&gt;&apos;s &lt;code&gt;contentView&lt;/code&gt; to find out what the required height of the cell is. Use &lt;code&gt;UILayoutFittingCompressedSize&lt;/code&gt; to get the smallest size required to fit all the contents of the cell. The height can then be returned from the &lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt; delegate method.&lt;/p&gt;\n&lt;h3&gt;4. Use Estimated Row Heights&lt;/h3&gt;\n&lt;p&gt;If your table view has more than a couple dozen rows in it, you will find that doing the Auto Layout constraint solving can quickly bog down the main thread when first loading the table view, as &lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt; is called on each and every row upon first load (in order to calculate the size of the scroll indicator).&lt;/p&gt;\n&lt;p&gt;As of iOS 7, you can (and absolutely should) use the &lt;code&gt;estimatedRowHeight&lt;/code&gt; property on the table view. What this does is provide the table view with a temporary estimate/placeholder for the row heights of cells that are not yet onscreen. Then, when these cells are about to scroll on screen, the actual row height will be calculated (by calling &lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt;), and the estimated height updated with the actual one.&lt;/p&gt;\n&lt;p&gt;Generally speaking, the estimate you provide doesn&apos;t have to be very accurate -- it is only used to correctly size the scroll indicator in the table view, and the table view does a good job of adjusting the scroll indicator for incorrect estimates as you scroll cells onscreen. You should set the &lt;code&gt;estimatedRowHeight&lt;/code&gt; property on the table view (in &lt;code&gt;viewDidLoad&lt;/code&gt; or similar) to a constant value that is the &quot;average&quot; row height. &lt;em&gt;Only if your row heights have extreme variability (e.g. differ by an order of magnitude) and you notice the scroll indicator &quot;jumping&quot; as you scroll should you bother implementing &lt;code&gt;tableView:estimatedHeightForRowAtIndexPath:&lt;/code&gt; to do the minimal calculation required to return a more accurate estimate for each row.&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;5. (If Needed) Add Row Height Caching&lt;/h3&gt;\n&lt;p&gt;If you&apos;ve done all the above and are still finding that performance is unacceptably slow when doing the constraint solving in &lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt;, you&apos;ll unfortunately need to implement some caching for cell heights. (This is the approach suggested by Apple&apos;s engineers.) The general idea is to let the Autolayout engine solve the constraints the first time, then cache the calculated height for that cell and use the cached value for all future requests for that cell&apos;s height. The trick of course is to make sure you clear the cached height for a cell when anything happens that could cause the cell&apos;s height to change -- primarily, this would be when that cell&apos;s content changes or when other important events occur (like the user adjusting the Dynamic Type text size slider).&lt;/p&gt;\n&lt;h3&gt;iOS 7 Generic Sample Code (with lots of juicy comments)&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)tableView:(&lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)tableView cellForRowAtIndexPath:(&lt;span class=&quot;hljs-type&quot;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)indexPath\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Determine which reuse identifier should be used for the cell at this &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// index path, depending on the particular layout required (you may have&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// just one, or may have many).&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;reuseIdentifier &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Dequeue a cell for the reuse identifier.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Note that this method will init and return a new cell if there isn&apos;t&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// one available in the reuse pool, so either way after this line of &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// code you will have a cell with the correct constraints ready to go.&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;cell &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [tableView dequeueReusableCellWithIdentifier:reuseIdentifier];\n         \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Configure the cell with content for the given indexPath, for example:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// cell.textLabel.text = someTextForThisCell;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Make sure the constraints have been set up for this cell, since it &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// may have just been created from scratch. Use the following lines, &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// assuming you are setting up constraints from within the cell&apos;s &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// updateConstraints method:&lt;/span&gt;\n    [cell setNeedsUpdateConstraints];\n    [cell updateConstraintsIfNeeded];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If you are using multi-line UILabels, don&apos;t forget that the &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// preferredMaxLayoutWidth needs to be set correctly. Do it at this &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// point if you are NOT doing it within the UITableViewCell subclass &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// -[layoutSubviews] method. For example: &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// cell.multiLineLabel.preferredMaxLayoutWidth = CGRectGetWidth(tableView.bounds);&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cell;\n}\n\n&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)tableView heightForRowAtIndexPath:(&lt;span class=&quot;hljs-type&quot;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)indexPath\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Determine which reuse identifier should be used for the cell at this &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// index path.&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;reuseIdentifier &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Use a dictionary of offscreen cells to get a cell for the reuse &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// identifier, creating a cell and storing it in the dictionary if one &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// hasn&apos;t already been added for the reuse identifier. WARNING: Don&apos;t &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// call the table view&apos;s dequeueReusableCellWithIdentifier: method here &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// because this will result in a memory leak as the cell is created but &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// never returned from the tableView:cellForRowAtIndexPath: method!&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;cell &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.offscreenCells objectForKey:reuseIdentifier];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;cell) {\n        cell &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [[&lt;span class=&quot;hljs-type&quot;&gt;YourTableViewCellClass&lt;/span&gt; alloc] &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;];\n        [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.offscreenCells setObject:cell forKey:reuseIdentifier];\n    }\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Configure the cell with content for the given indexPath, for example:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// cell.textLabel.text = someTextForThisCell;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Make sure the constraints have been set up for this cell, since it &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// may have just been created from scratch. Use the following lines, &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// assuming you are setting up constraints from within the cell&apos;s &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// updateConstraints method:&lt;/span&gt;\n    [cell setNeedsUpdateConstraints];\n    [cell updateConstraintsIfNeeded];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Set the width of the cell to match the width of the table view. This&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// is important so that we&apos;ll get the correct cell height for different&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// table view widths if the cell&apos;s height depends on its width (due to &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// multi-line UILabels word wrapping, etc). We don&apos;t need to do this &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// above in -[tableView:cellForRowAtIndexPath] because it happens &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// automatically when the cell is used in the table view. Also note, &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the final width of the cell may not be the width of the table view in&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// some cases, for example when a section index is displayed along &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the right side of the table view. You must account for the reduced &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// cell width.&lt;/span&gt;\n    cell.bounds &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;CGRectGetWidth&lt;/span&gt;(tableView.bounds), &lt;span class=&quot;hljs-type&quot;&gt;CGRectGetHeight&lt;/span&gt;(cell.bounds));\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do the layout pass on the cell, which will calculate the frames for &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// all the views based on the constraints. (Note that you must set the &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// preferredMaxLayoutWidth on multiline UILabels inside the &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// -[layoutSubviews] method of the UITableViewCell subclass, or do it &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// manually at this point before the below 2 lines!)&lt;/span&gt;\n    [cell setNeedsLayout];\n    [cell layoutIfNeeded];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Get the actual height required for the cell&apos;s contentView&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; height &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [cell.contentView systemLayoutSizeFittingSize:&lt;span class=&quot;hljs-type&quot;&gt;UILayoutFittingCompressedSize&lt;/span&gt;].height;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Add an extra point to the height to account for the cell separator, &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// which is added between the bottom of the cell&apos;s contentView and the &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// bottom of the table view cell.&lt;/span&gt;\n    height &lt;span class=&quot;hljs-operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; height;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// &lt;span class=&quot;hljs-doctag&quot;&gt;NOTE:&lt;/span&gt; Set the table view&apos;s estimatedRowHeight property instead of &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// implementing the below method, UNLESS you have extreme variability in &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// your row heights and you notice the scroll indicator &quot;jumping&quot; &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// as you scroll.&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)tableView estimatedHeightForRowAtIndexPath:(&lt;span class=&quot;hljs-type&quot;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)indexPath\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do the minimal calculations required to be able to return an &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// estimated row height that&apos;s within an order of magnitude of the &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// actual height. For example:&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; isTallCellAtIndexPath:indexPath]) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;350.0&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;40.0&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Sample Projects&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/smileyborg/TableViewCellWithAutoLayoutiOS8&quot; rel=&quot;noreferrer&quot;&gt;iOS 8 Sample Project&lt;/a&gt; - Requires iOS 8&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/smileyborg/TableViewCellWithAutoLayout&quot; rel=&quot;noreferrer&quot;&gt;iOS 7 Sample Project&lt;/a&gt; - Works on iOS 7+&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;These projects are fully working examples of table views with variable row heights due to table view cells containing dynamic content in UILabels.&lt;/p&gt;\n&lt;h2&gt;Xamarin (C#/.NET)&lt;/h2&gt;\n&lt;p&gt;If you&apos;re using Xamarin, check out this &lt;a href=&quot;https://github.com/kentcb/TableViewCellWithAutoLayout_dotNET&quot; rel=&quot;noreferrer&quot;&gt;sample project&lt;/a&gt; put together by &lt;a href=&quot;https://stackoverflow.com/users/5380/kent-boogaart&quot;&gt;@KentBoogaart&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;For iOS 8 above it&apos;s really simple:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView.estimatedRowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;.automaticDimension\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;heightForRowAtIndexPath&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSIndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;.automaticDimension\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But for iOS 7, the key is calculate the height after autolayout:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;calculateHeightForConfiguredSizingCell&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cell&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;GSTableViewCell&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {\n    cell.setNeedsLayout()\n    cell.layoutIfNeeded()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; height &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; cell.contentView.systemLayoutSizeFittingSize(&lt;span class=&quot;hljs-type&quot;&gt;UILayoutFittingExpandedSize&lt;/span&gt;).height &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; height\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If multiple lines labels, don&apos;t forget set the &lt;code&gt;numberOfLines&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Don&apos;t forget &lt;code&gt;label.preferredMaxLayoutWidth = CGRectGetWidth(tableView.bounds)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The full example code is &lt;a href=&quot;https://github.com/williamhqs/GSTableViewDynamicHeight&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;h1&gt;Swift example of a variable height UITableViewCell&lt;/h1&gt;\n\n&lt;p&gt;&lt;em&gt;Updated for Swift 3&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;William Hu&apos;s Swift answer is good, but it helps me to have some simple yet detailed steps when learning to do something for the first time. The example below is my test project while learning to make a &lt;code&gt;UITableView&lt;/code&gt; with variable cell heights. I based it on &lt;a href=&quot;https://stackoverflow.com/a/33234181/3681880&quot;&gt;this basic UITableView example for Swift&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The finished project should look like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/lxUhH.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/lxUhH.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Create a new project&lt;/h1&gt;\n\n&lt;p&gt;It can be just a Single View Application.&lt;/p&gt;\n\n&lt;h1&gt;Add the code&lt;/h1&gt;\n\n&lt;p&gt;Add a new Swift file to your project. Name it MyCustomCell. This class will hold the outlets for the views that you add to your cell in the storyboard. In this basic example we will only have one label in each cell.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; UIKit\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyCustomCell&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UITableViewCell&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myCellLabel: &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt;!\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We will connect this outlet later.&lt;/p&gt;\n\n&lt;p&gt;Open ViewController.swift and make sure you have the following content:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; UIKit\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;UITableViewDelegate&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;UITableViewDataSource&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// These strings will be the data for the table view cells&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; animals: [&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ten horses:  horse horse horse horse horse horse horse horse horse horse &quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Three cows:  cow, cow, cow&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;One camel:  camel&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ninety-nine sheep:  sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep baaaa sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Thirty goats:  goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat &quot;&lt;/span&gt;]\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Don&apos;t forget to enter this in IB also&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; cellReuseIdentifier &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;cell&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tableView: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;!\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// delegate and data source&lt;/span&gt;\n        tableView.delegate &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;\n        tableView.dataSource &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Along with auto layout, these are the keys for enabling variable cell height&lt;/span&gt;\n        tableView.estimatedRowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;44.0&lt;/span&gt;\n        tableView.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// number of rows in table view&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;section&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.animals.count\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// create a cell for each table view row&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;IndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewCell&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; cell:&lt;span class=&quot;hljs-type&quot;&gt;MyCustomCell&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier) &lt;span class=&quot;hljs-keyword&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;MyCustomCell&lt;/span&gt;\n        cell.myCellLabel.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.animals[indexPath.row]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cell\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// method to run when table view cell is tapped&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;didSelectRowAt&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;IndexPath&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You tapped cell number &lt;span class=&quot;hljs-subst&quot;&gt;\\(indexPath.row)&lt;/span&gt;.&quot;&lt;/span&gt;)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Important Note:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;It is the following two lines of code (along with auto layout) that make the variable cell height possible:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;tableView.estimatedRowHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;44.0&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;tableView.rowHeight&lt;/span&gt; = UITableViewAutomaticDimension\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Setup the storyboard&lt;/h1&gt;\n\n&lt;p&gt;Add a Table View to your view controller and use auto layout to pin it to the four sides. Then drag a Table View Cell onto the Table View. And onto the Prototype cell, drag a Label. Use auto layout to pin the label to the four edges of the content view of the Table View Cell.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/KI5ky.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/KI5ky.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Auto layout works together with the important two lines of code I mentioned above. If you don&apos;t use auto layout it isn&apos;t going to work.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Other IB settings&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Custom class name and Identifier&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Select the Table View Cell and set the custom class to be &lt;code&gt;MyCustomCell&lt;/code&gt; (the name of the class in the Swift file we added). Also set the Identifier to be &lt;code&gt;cell&lt;/code&gt; (the same string that we used for the &lt;code&gt;cellReuseIdentifier&lt;/code&gt; in the code above.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/J7txO.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/J7txO.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Zero Lines for Label&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Set the number of lines to &lt;code&gt;0&lt;/code&gt; in your Label. This means multi-line and allows the label to resize itself based on its content.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/YbCl2.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/YbCl2.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Hook Up the Outlets&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Control drag from the Table View in the storyboard to the &lt;code&gt;tableView&lt;/code&gt; variable in the &lt;code&gt;ViewController&lt;/code&gt; code. &lt;/li&gt;\n&lt;li&gt;Do the same for the Label in your Prototype cell to the &lt;code&gt;myCellLabel&lt;/code&gt; variable in the &lt;code&gt;MyCustomCell&lt;/code&gt; class.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Finished&lt;/h1&gt;\n\n&lt;p&gt;You should be able to run your project now and get cells with variable heights.&lt;/p&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This example only works for iOS 8 and after. If you are still needing to support iOS 7 then this won&apos;t work for you.&lt;/li&gt;\n&lt;li&gt;Your own custom cells in your future projects will probably have more than a single label. Make sure that you get everything pinned right so that auto layout can determine the correct height to use. You may also have to use vertical compression resistance and hugging. See &lt;a href=&quot;http://useyourloaf.com/blog/table-view-cells-with-varying-row-heights/&quot; rel=&quot;noreferrer&quot;&gt;this article&lt;/a&gt; for more about that.&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you are not pinning the leading and trailing (left and right) edges, you may also need to set the label&apos;s &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt; so that it knows when to line wrap. For example, if you had added a Center Horizontally constraint to the label in the project above rather than pin the leading and trailing edges, then you would need to add this line to the &lt;code&gt;tableView:cellForRowAtIndexPath&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt; &lt;span class=&quot;hljs-attr&quot;&gt;cell.myCellLabel.preferredMaxLayoutWidth&lt;/span&gt; = tableView.bounds.width\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;See also&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.appcoda.com/self-sizing-cells/&quot; rel=&quot;noreferrer&quot;&gt;Understanding Self Sizing Cells and Dynamic Type in iOS 8&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://useyourloaf.com/blog/table-view-cells-with-varying-row-heights/&quot; rel=&quot;noreferrer&quot;&gt;Table View Cells with Varying Row Heights&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/33234180/uitableview-example-for-swift&quot;&gt;UITableView example for Swift&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h1&gt;I wrapped @smileyborg&apos;s iOS7 solution in a category&lt;/h1&gt;\n\n&lt;p&gt;I decided to wrap this clever solution by @smileyborg into a &lt;code&gt;UICollectionViewCell+AutoLayoutDynamicHeightCalculation&lt;/code&gt; category.&lt;/p&gt;\n\n&lt;p&gt;The category also rectifies the issues outlined in @wildmonkey&apos;s answer (loading a cell from a nib and &lt;code&gt;systemLayoutSizeFittingSize:&lt;/code&gt; returning &lt;code&gt;CGRectZero&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;It doesn&apos;t take into account any caching but suits my needs right now. Feel free to copy, paste and hack at it.&lt;/p&gt;\n\n&lt;h3&gt;UICollectionViewCell+AutoLayoutDynamicHeightCalculation.h&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#import &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; (^&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewCellAutoLayoutRenderBlock&lt;/span&gt;)(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n *  A category on UICollectionViewCell to aid calculating dynamic heights based on AutoLayout contraints.\n *\n *  Many thanks to @smileyborg and @wildmonkey\n *\n *  @see stackoverflow.com/questions/18746929/using-auto-layout-in-uitableview-for-dynamic-cell-layouts-variable-row-heights\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UICollectionViewCell&lt;/span&gt; (&lt;span class=&quot;hljs-title&quot;&gt;AutoLayoutDynamicHeightCalculation&lt;/span&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n *  Grab an instance of the receiving type to use in order to calculate AutoLayout contraint driven dynamic height. The method pulls the cell from a nib file and moves any Interface Builder defined contrainsts to the content view.\n *\n *  @param name Name of the nib file.\n *\n *  @return collection view cell for using to calculate content based height\n */&lt;/span&gt;\n+ (&lt;span class=&quot;hljs-keyword&quot;&gt;instancetype&lt;/span&gt;)heightCalculationCellFromNibWithName:(&lt;span class=&quot;hljs-built_in&quot;&gt;NSString&lt;/span&gt; *)name;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n *  Returns the height of the receiver after rendering with your model data and applying an AutoLayout pass\n *\n *  @param block Render the model data to your UI elements in this block\n *\n *  @return Calculated constraint derived height\n */&lt;/span&gt;\n- (&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)heightAfterAutoLayoutPassAndRenderingWithBlock:(&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewCellAutoLayoutRenderBlock&lt;/span&gt;)block collectionViewWidth:(&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)width;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n *  Directly calls `heightAfterAutoLayoutPassAndRenderingWithBlock:collectionViewWidth` assuming a collection view width spanning the [UIScreen mainScreen] bounds\n */&lt;/span&gt;\n- (&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)heightAfterAutoLayoutPassAndRenderingWithBlock:(&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewCellAutoLayoutRenderBlock&lt;/span&gt;)block;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;@end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;UICollectionViewCell+AutoLayoutDynamicHeightCalculation.m&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#import &lt;span class=&quot;hljs-string&quot;&gt;&quot;UICollectionViewCell+AutoLayout.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UICollectionViewCell&lt;/span&gt; (&lt;span class=&quot;hljs-title&quot;&gt;AutoLayout&lt;/span&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;pragma&lt;/span&gt; mark Dummy Cell Generator&lt;/span&gt;\n\n+ (&lt;span class=&quot;hljs-keyword&quot;&gt;instancetype&lt;/span&gt;)heightCalculationCellFromNibWithName:(&lt;span class=&quot;hljs-built_in&quot;&gt;NSString&lt;/span&gt; *)name\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewCell&lt;/span&gt; *heightCalculationCell = [[[&lt;span class=&quot;hljs-built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] loadNibNamed:name owner:&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; options:&lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;] lastObject];\n    [heightCalculationCell moveInterfaceBuilderLayoutConstraintsToContentView];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; heightCalculationCell;\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;pragma&lt;/span&gt; mark Moving Constraints&lt;/span&gt;\n\n- (&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)moveInterfaceBuilderLayoutConstraintsToContentView\n{\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.constraints enumerateObjectsUsingBlock:^(&lt;span class=&quot;hljs-built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; *constraint, &lt;span class=&quot;hljs-built_in&quot;&gt;NSUInteger&lt;/span&gt; idx, &lt;span class=&quot;hljs-type&quot;&gt;BOOL&lt;/span&gt; *stop) {\n        [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; removeConstraint:constraint];\n        &lt;span class=&quot;hljs-type&quot;&gt;id&lt;/span&gt; firstItem = constraint.firstItem == &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; ? &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView : constraint.firstItem;\n        &lt;span class=&quot;hljs-type&quot;&gt;id&lt;/span&gt; secondItem = constraint.secondItem == &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; ? &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView : constraint.secondItem;\n        [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView addConstraint:[&lt;span class=&quot;hljs-built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; constraintWithItem:firstItem\n                                                                     attribute:constraint.firstAttribute\n                                                                     relatedBy:constraint.relation\n                                                                        toItem:secondItem\n                                                                     attribute:constraint.secondAttribute\n                                                                    multiplier:constraint.multiplier\n                                                                      constant:constraint.constant]];\n    }];\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;pragma&lt;/span&gt; mark Height&lt;/span&gt;\n\n- (&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)heightAfterAutoLayoutPassAndRenderingWithBlock:(&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewCellAutoLayoutRenderBlock&lt;/span&gt;)block\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; heightAfterAutoLayoutPassAndRenderingWithBlock:block\n                                            collectionViewWidth:&lt;span class=&quot;hljs-built_in&quot;&gt;CGRectGetWidth&lt;/span&gt;([[&lt;span class=&quot;hljs-built_in&quot;&gt;UIScreen&lt;/span&gt; mainScreen] bounds])];\n}\n\n- (&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)heightAfterAutoLayoutPassAndRenderingWithBlock:(&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewCellAutoLayoutRenderBlock&lt;/span&gt;)block collectionViewWidth:(&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)width\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;NSParameterAssert&lt;/span&gt;(block);\n\n    block();\n\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; setNeedsUpdateConstraints];\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; updateConstraintsIfNeeded];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.bounds = &lt;span class=&quot;hljs-built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;f, &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;f, width, &lt;span class=&quot;hljs-built_in&quot;&gt;CGRectGetHeight&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.bounds));\n\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; setNeedsLayout];\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; layoutIfNeeded];\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;CGSize&lt;/span&gt; calculatedSize = [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView systemLayoutSizeFittingSize:&lt;span class=&quot;hljs-built_in&quot;&gt;UILayoutFittingCompressedSize&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; calculatedSize.height;\n\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;@end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Usage example:&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;- (&lt;span class=&quot;hljs-built_in&quot;&gt;CGSize&lt;/span&gt;)collectionView:(&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionView&lt;/span&gt; *)collectionView layout:(&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewLayout&lt;/span&gt; *)collectionViewLayout sizeForItemAtIndexPath:(&lt;span class=&quot;hljs-built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath\n{\n    MYSweetCell *cell = [MYSweetCell heightCalculationCellFromNibWithName:&lt;span class=&quot;hljs-built_in&quot;&gt;NSStringFromClass&lt;/span&gt;([MYSweetCell &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;])];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt; height = [cell heightAfterAutoLayoutPassAndRenderingWithBlock:^{\n        [(&lt;span class=&quot;hljs-type&quot;&gt;id&lt;/span&gt;&amp;lt;MYSweetCellRenderProtocol&amp;gt;)cell renderWithModel:someModel];\n    }];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CGSizeMake&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;CGRectGetWidth&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.collectionView.bounds), height);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Thankfully we won&apos;t have to do this jazz in iOS8, but there it is for now!&lt;/p&gt;\n    ","\n&lt;p&gt;Here is my solution:&lt;/p&gt;\n\n&lt;p&gt;You need to tell the &lt;code&gt;TableView&lt;/code&gt; the &lt;code&gt;estimatedHeight&lt;/code&gt; before it loads the view. Otherwise it wont be able to behave like expected.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Objective-C&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;- (&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)viewWillAppear:(&lt;span class=&quot;hljs-type&quot;&gt;BOOL&lt;/span&gt;)animated {\n    _messageField.delegate = &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;;\n    _tableView.estimatedRowHeight = &lt;span class=&quot;hljs-number&quot;&gt;65.0&lt;/span&gt;;\n    _tableView.rowHeight = &lt;span class=&quot;hljs-built_in&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Update to &lt;strong&gt;Swift 4.2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewWillAppear&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;animated&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt;) {\n    tableView.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;.automaticDimension\n    tableView.estimatedRowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;65.0&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The solution proposed by @smileyborg is almost perfect. If you have a custom cell and you want one or more &lt;code&gt;UILabel&lt;/code&gt; with dynamic heights then the &lt;em&gt;systemLayoutSizeFittingSize&lt;/em&gt; method combined with AutoLayout enabled returns a &lt;code&gt;CGSizeZero&lt;/code&gt; unless you move all your cell constraints from the cell to its contentView (as suggested by @TomSwift here &lt;a href=&quot;https://stackoverflow.com/questions/18118021/how-to-resize-superview-to-fit-all-subviews-with-autolayout&quot;&gt;How to resize superview to fit all subviews with autolayout?&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;To do so you need to insert the following code in your custom UITableViewCell implementation (thanks to @Adrian).&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;- (&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)awakeFromNib{\n    [&lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt; awakeFromNib];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; *cellConstraint &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.constraints) {\n        [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; removeConstraint:cellConstraint];\n        &lt;span class=&quot;hljs-type&quot;&gt;id&lt;/span&gt; firstItem = cellConstraint.firstItem == &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; ? &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView : cellConstraint.firstItem;\n        &lt;span class=&quot;hljs-type&quot;&gt;id&lt;/span&gt; seccondItem = cellConstraint.secondItem == &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; ? &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView : cellConstraint.secondItem;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; *contentViewConstraint =\n        [&lt;span class=&quot;hljs-built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; constraintWithItem:firstItem\n                                 attribute:cellConstraint.firstAttribute\n                                 relatedBy:cellConstraint.relation\n                                    toItem:seccondItem\n                                 attribute:cellConstraint.secondAttribute\n                                multiplier:cellConstraint.multiplier\n                                  constant:cellConstraint.constant];\n        [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView addConstraint:contentViewConstraint];\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Mixing @smileyborg answer with this should works.&lt;/p&gt;\n    ","\n&lt;p&gt;An important enough gotcha I just ran into to post as an answer.&lt;/p&gt;\n\n&lt;p&gt;@smileyborg&apos;s answer is mostly correct. However, if you have any code in the &lt;code&gt;layoutSubviews&lt;/code&gt; method of your custom cell class, for instance setting the &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt;, then it won&apos;t be run with this code:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;[cell.contentView setNeedsLayout]&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;hljs-section&quot;&gt;[cell.contentView layoutIfNeeded]&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It confounded me for awhile. Then I realized it&apos;s because those are only triggering layoutSubviews on the &lt;code&gt;contentView&lt;/code&gt;, not the cell itself.&lt;/p&gt;\n\n&lt;p&gt;My working code looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;TCAnswerDetailAppSummaryCell *cell = [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView dequeueReusableCellWithIdentifier:&lt;span class=&quot;hljs-string&quot;&gt;@&quot;TCAnswerDetailAppSummaryCell&quot;&lt;/span&gt;];\n[cell configureWithThirdPartyObject:&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.app];\n[cell layoutIfNeeded];\n&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt; height = [cell.contentView systemLayoutSizeFittingSize:&lt;span class=&quot;hljs-built_in&quot;&gt;UILayoutFittingCompressedSize&lt;/span&gt;].height;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; height;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that if you are creating a new cell, I&apos;m pretty sure you don&apos;t need to call &lt;code&gt;setNeedsLayout&lt;/code&gt; as it should already be set. In cases where you save a reference to a cell, you should probably call it. Either way it shouldn&apos;t hurt anything.&lt;/p&gt;\n\n&lt;p&gt;Another tip if you are using cell subclasses where you are setting things like &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt;. As @smileyborg mentions, &quot;your table view cell hasn&apos;t yet had its width fixed to the table view&apos;s width&quot;. This is true, and trouble if you are doing your work in your subclass and not in the view controller. However you can simply set the cell frame at this point using the table width:&lt;/p&gt;\n\n&lt;p&gt;For instance in the calculation for height:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.summaryCell = [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView dequeueReusableCellWithIdentifier:&lt;span class=&quot;hljs-string&quot;&gt;@&quot;TCAnswerDetailDefaultSummaryCell&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-built_in&quot;&gt;CGRect&lt;/span&gt; oldFrame = &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.summaryCell.frame;\n&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.summaryCell.frame = &lt;span class=&quot;hljs-built_in&quot;&gt;CGRectMake&lt;/span&gt;(oldFrame.origin.x, oldFrame.origin.y, &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView.frame.size.width, oldFrame.size.height);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(I happen to cache this particular cell for re-use, but that&apos;s irrelevant).&lt;/p&gt;\n    ","\n&lt;p&gt;(for Xcode 8.x / Xcode 9.x read at the bottom)&lt;/p&gt;\n\n&lt;p&gt;Beware of the following issue in in Xcode 7.x, which might be a source of confusion:&lt;/p&gt;\n\n&lt;p&gt;Interface Builder does not handle auto-sizing cell set-up properly. Even if your constraints are  absolutely valid, IB will still complain and give you confusing suggestions and errors. The reason is that IB is unwilling to change the row&apos;s height as your constraints dictate (so that the cell fits around your content). Instead, it keeps the row&apos;s height fixed and starts suggesting you change your constraints, which &lt;strong&gt;&lt;em&gt;you should ignore&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;For example, imagine you&apos;ve set up everything fine, no warnings, no errors, all works.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/qafNl.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/qafNl.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Now if you change the font size (in this example I&apos;m changing the description label font size from 17.0 to 18.0).&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/PSelQ.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/PSelQ.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Because the font size increased, the label now wants to occupy 3 rows (before that it was occupying 2 rows).&lt;/p&gt;\n\n&lt;p&gt;If Interface Builder worked as expected, it would resize the cell&apos;s height to accommodate the new label height. However what actually happens is that IB displays the red auto-layout error icon and suggest that you modify hugging/compression priorities.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/rUzCn.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/rUzCn.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You should ignore these warnings. What you can* do instead is to manually change the row&apos;s height in (select Cell &amp;gt; Size Inspector &amp;gt; Row Height).&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/oC0pw.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/oC0pw.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I was changing this height one click at a time (using the up/down stepper) until the red arrow errors disappear! (you will actually get yellow warnings, at which point just go ahead and do &apos;update frames&apos;, it should all work).&lt;/p&gt;\n\n&lt;p&gt;* Note that you don&apos;t actually have to resolve these red errors or yellow warnings in Interface Builder - at runtime, everything will work correctly (even if IB shows errors/warnings). Just make sure that at runtime in the console log you&apos;re not getting any AutoLayout errors. \n&lt;br&gt;&lt;br&gt;\nIn fact trying to always update row height in IB is super annoying and sometimes close to impossible (because of fractional values).\n&lt;br&gt;&lt;br&gt;\nTo prevent the annoying IB warnings/errors, you can select the views involved and in &lt;code&gt;Size Inspector&lt;/code&gt; for the property &lt;code&gt;Ambiguity&lt;/code&gt; choose &lt;code&gt;Verify Position Only&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/LR7cI.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/LR7cI.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Xcode 8.x / Xcode 9.x seems to (sometimes) be doing things differently than Xcode 7.x, but still incorrectly. For example even when &lt;code&gt;compression resistance priority&lt;/code&gt; / &lt;code&gt;hugging priority&lt;/code&gt; are set to required (1000), Interface Builder might stretch or clip a label to fit the cell (instead of resizing cell height to fit around the label). And in such a case it might not even show any AutoLayout warnings or errors. Or sometimes it does exactly what Xcode 7.x did, described above.&lt;/p&gt;\n    ","\n&lt;p&gt;In case people are still having trouble with this.  I wrote a quick blog post about using Autolayout with UITableViews &lt;a href=&quot;http://www.raizlabs.com/dev/2014/02/leveraging-auto-layout-for-dynamic-cell-heights/&quot;&gt;Leveraging Autolayout For Dynamic Cell Heights&lt;/a&gt; as well as an open source component to help make this more abstract and easier to implement.\n&lt;a href=&quot;https://github.com/Raizlabs/RZCellSizeManager&quot;&gt;https://github.com/Raizlabs/RZCellSizeManager&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As long as your layout in your cell is good.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;-(&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;hljs-built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView heightForRowAtIndexPath:(&lt;span class=&quot;hljs-built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;UITableViewCell&lt;/span&gt; *cell = [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; tableView:tableView cellForRowAtIndexPath:indexPath];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [cell.contentView systemLayoutSizeFittingSize:&lt;span class=&quot;hljs-built_in&quot;&gt;UILayoutFittingCompressedSize&lt;/span&gt;].height;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Update:  You should use dynamic resizing introduced in iOS 8.&lt;/p&gt;\n    ","\n&lt;p&gt;To set automatic dimension for row height &amp;amp; estimated row height, ensure following steps to make, auto dimension effective for cell/row height layout. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Assign and implement tableview dataSource and delegate&lt;/li&gt;\n&lt;li&gt;Assign &lt;code&gt;UITableViewAutomaticDimension&lt;/code&gt; to rowHeight &amp;amp; estimatedRowHeight&lt;/li&gt;\n&lt;li&gt;Implement delegate/dataSource methods (i.e. &lt;code&gt;heightForRowAt&lt;/code&gt; and return a value &lt;code&gt;UITableViewAutomaticDimension&lt;/code&gt; to it)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;-&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Objective C:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// in ViewController.h&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#import &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ViewController&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;UIViewController&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;UITableViewDelegate&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;UITableViewDataSource&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;UITableView&lt;/span&gt; * table;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;@end&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// in ViewController.m&lt;/span&gt;\n\n- (&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)viewDidLoad {\n    [&lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt; viewDidLoad];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.table.dataSource = &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.table.delegate = &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.table.rowHeight = &lt;span class=&quot;hljs-built_in&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.table.estimatedRowHeight = &lt;span class=&quot;hljs-built_in&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;;\n}\n\n-(&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;hljs-built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView heightForRowAtIndexPath:(&lt;span class=&quot;hljs-built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Swift:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; table: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;!\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Don&apos;t forget to set dataSource and delegate for table&lt;/span&gt;\n    table.dataSource &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;\n    table.delegate &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Set automatic dimensions for row height&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Swift 4.2 onwards&lt;/span&gt;\n    table.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;.automaticDimension\n    table.estimatedRowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;.automaticDimension\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Swift 4.1 and below&lt;/span&gt;\n    table.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;\n    table.estimatedRowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;\n\n}\n\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// UITableViewAutomaticDimension calculates height of label contents/text&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;heightForRowAt&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;IndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Swift 4.2 onwards&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;.automaticDimension\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Swift 4.1 and below&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For label instance in UITableviewCell&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Set number of lines = 0 (&amp;amp; line break mode = truncate tail)&lt;/li&gt;\n&lt;li&gt;Set all constraints (top, bottom, right left) with respect to its superview/ cell container.&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;Optional&lt;/em&gt;: Set minimum height for label, if you want minimum vertical area covered by label, even if there is no data.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/T354s.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&apos;ve more than one labels (UIElements) with dynamic length, which should be adjusted according to its content size: Adjust &apos;Content Hugging and Compression Resistance Priority` for labels which you want to expand/compress with higher priority.&lt;/p&gt;\n    ","\n&lt;p&gt;Like &lt;a href=&quot;https://stackoverflow.com/users/287403/bob-spryn&quot;&gt;@Bob-Spryn&lt;/a&gt; I ran into an important enough gotcha that I&apos;m posting this as an answer.&lt;/p&gt;\n\n&lt;p&gt;I struggled with &lt;a href=&quot;https://stackoverflow.com/a/18746930/2591612&quot;&gt;@smileyborg&apos;s&lt;/a&gt; answer for a while. The gotcha that I ran into is if you&apos;ve defined your prototype cell in IB with additional elements (&lt;code&gt;UILabels&lt;/code&gt;, &lt;code&gt;UIButtons&lt;/code&gt;, etc.) in IB when you instantiate the cell with [&lt;code&gt;[YourTableViewCellClass alloc] init]&lt;/code&gt; it will not instantiate all the other elements within that cell unless you&apos;ve written code to do that. (I had a similar experience with &lt;code&gt;initWithStyle&lt;/code&gt;.)&lt;/p&gt;\n\n&lt;p&gt;To have the storyboard instantiate all the additional elements obtain your cell with &lt;code&gt;[tableView dequeueReusableCellWithIdentifier:@&quot;DoseNeeded&quot;]&lt;/code&gt; (Not &lt;code&gt;[tableView dequeueReusableCellWithIdentifier:forIndexPath:]&lt;/code&gt; as this&apos;ll cause interesting problems.) When you do this all the elements you defined in IB will be instantiated.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://www.raywenderlich.com/73602/dynamic-table-view-cell-height-auto-layout&quot;&gt;Dynamic Table View Cell Height and Auto Layout&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;A good way to solve the problem with storyboard Auto Layout:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;- (&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)heightForImageCellAtIndexPath:(&lt;span class=&quot;hljs-built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; RWImageCell *sizingCell = &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^{\n    sizingCell = [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView dequeueReusableCellWithIdentifier:RWImageCellIdentifier];\n  });\n\n  [sizingCell setNeedsLayout];\n  [sizingCell layoutIfNeeded];\n\n  &lt;span class=&quot;hljs-built_in&quot;&gt;CGSize&lt;/span&gt; size = [sizingCell.contentView systemLayoutSizeFittingSize:&lt;span class=&quot;hljs-built_in&quot;&gt;UILayoutFittingCompressedSize&lt;/span&gt;];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; size.height;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;tableView.estimatedRowHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;343.0&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;tableView.rowHeight&lt;/span&gt; = UITableViewAutomaticDimension\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Xa4V8.jpg&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Xa4V8.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Another &quot;solution&quot;: skip all this frustration and use a UIScrollView instead to get a result that looks and feels identical to UITableView.&lt;/p&gt;\n&lt;p&gt;That was the painful &quot;solution&quot; for me, after having put in literally 20+ very frustrating hours total trying to build something like what smileyborg suggested and failing over many months and three versions of App Store releases.&lt;/p&gt;\n&lt;p&gt;My take is that if you really need iOS 7 support (for us, it&apos;s essential) then the technology is just too brittle and you&apos;ll pull your hair out trying. And that UITableView is complete overkill generally unless you&apos;re using some of the advanced row editing features and/or really need to support 1000+ &quot;rows&quot; (in our app, it&apos;s realistically never more than 20 rows).&lt;/p&gt;\n&lt;p&gt;The added bonus is that the code gets insanely simple versus all the delegate crap and back and forth that comes with UITableView. It&apos;s just one single loop of code in viewOnLoad that looks elegant and is easy to manage.&lt;/p&gt;\n&lt;p&gt;Here are some tips on how to do it:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Using either Storyboard or a nib file, create a ViewController and associated root view.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Drag over a UIScrollView onto your root view.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Add constraints top, bottom, left, and right constraints to the top-level view so the UIScrollView fills the entire root view.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Add a UIView inside the UIScrollView and call it &quot;container&quot;. Add top, bottom, left and right constraints to the UIScrollView (its parent). KEY TRICK: Also add an &quot;Equal widths&quot; constraint to link the UIScrollView and UIView.&lt;/p&gt;\n&lt;p&gt;NOTE: You will get an error &quot;scroll view has ambiguous scrollable content height&quot; and that your container UIView should have a height of 0 pixels. Neither error seems to matter when the app is running.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Create nib files and controllers for each of your &quot;cells&quot;. Use UIView not UITableViewCell.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In your root ViewController, you essentially add all the &quot;rows&quot; to the container UIView and programmatically add constraints linking their left and right edges to the container view, their top edges to either the container view top (for the first item) or the previous cell. Then link the final cell to the container bottom.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;For us, each &quot;row&quot; is in a nib file. So the code looks something like this:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;YourRootViewController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; container: &lt;span class=&quot;hljs-type&quot;&gt;UIView&lt;/span&gt;! &lt;span class=&quot;hljs-comment&quot;&gt;//container mentioned in step 4&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lastView: &lt;span class=&quot;hljs-type&quot;&gt;UIView&lt;/span&gt;?\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; yourDataSource {\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cell &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;YourCellController&lt;/span&gt;(nibName: &lt;span class=&quot;hljs-string&quot;&gt;&quot;YourCellNibName&quot;&lt;/span&gt;, bundle: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)\n            &lt;span class=&quot;hljs-type&quot;&gt;UITools&lt;/span&gt;.addViewToTop(container, child: cell.view, sibling: lastView)\n            lastView &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; cell.view\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Insert code here to populate your cell&lt;/span&gt;\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(lastView &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;) {\n            container.addConstraint(&lt;span class=&quot;hljs-type&quot;&gt;NSLayoutConstraint&lt;/span&gt;(\n                item: lastView&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;,\n                attribute: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Bottom&lt;/span&gt;,\n                relatedBy: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutRelation&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Equal&lt;/span&gt;,\n                toItem: container,\n                attribute: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Bottom&lt;/span&gt;,\n                multiplier: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n                constant: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;///Add a refresh control, if you want - it seems to work fine in our app:&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; refreshControl &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIRefreshControl&lt;/span&gt;()\n        container.addSubview(refreshControl&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And here&apos;s the code for UITools.addViewToTop:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITools&lt;/span&gt; {\n    ///&lt;span class=&quot;hljs-type&quot;&gt;Add&lt;/span&gt; child to container, full width of the container and directly under sibling (&lt;span class=&quot;hljs-title&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sibling&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;nil&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; func addViewToTop(&lt;span class=&quot;hljs-title&quot;&gt;container&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIView&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIView&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;sibling&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIView&lt;/span&gt;? = &lt;span class=&quot;hljs-title&quot;&gt;nil&lt;/span&gt;)\n    {\n        child.setTranslatesAutoresizingMaskIntoConstraints(&lt;span class=&quot;hljs-title&quot;&gt;false&lt;/span&gt;)\n        container.addSubview(&lt;span class=&quot;hljs-title&quot;&gt;child&lt;/span&gt;)\n        \n        //&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; left and right constraints so fills full horz width:\n        \n        container.addConstraint(&lt;span class=&quot;hljs-type&quot;&gt;NSLayoutConstraint&lt;/span&gt;(\n            &lt;span class=&quot;hljs-title&quot;&gt;item&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;child&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;attribute&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Leading&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;relatedBy&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutRelation&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Equal&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;toItem&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;container&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;attribute&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Left&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;multiplier&lt;/span&gt;: 1,\n            &lt;span class=&quot;hljs-title&quot;&gt;constant&lt;/span&gt;: 0))\n        \n        container.addConstraint(&lt;span class=&quot;hljs-type&quot;&gt;NSLayoutConstraint&lt;/span&gt;(\n            &lt;span class=&quot;hljs-title&quot;&gt;item&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;child&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;attribute&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Trailing&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;relatedBy&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutRelation&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Equal&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;toItem&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;container&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;attribute&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Right&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;multiplier&lt;/span&gt;: 1,\n            &lt;span class=&quot;hljs-title&quot;&gt;constant&lt;/span&gt;: 0))\n        \n        //&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; vertical position from last item (&lt;span class=&quot;hljs-title&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;first&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;superview&lt;/span&gt;):\n        container.addConstraint(&lt;span class=&quot;hljs-type&quot;&gt;NSLayoutConstraint&lt;/span&gt;(\n            &lt;span class=&quot;hljs-title&quot;&gt;item&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;child&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;attribute&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Top&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;relatedBy&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutRelation&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Equal&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;toItem&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;sibling&lt;/span&gt; == &lt;span class=&quot;hljs-title&quot;&gt;nil&lt;/span&gt; ? &lt;span class=&quot;hljs-title&quot;&gt;container&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;sibling&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;attribute&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;sibling&lt;/span&gt; == &lt;span class=&quot;hljs-title&quot;&gt;nil&lt;/span&gt; ? &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Top&lt;/span&gt; : &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Bottom&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;multiplier&lt;/span&gt;: 1,\n            &lt;span class=&quot;hljs-title&quot;&gt;constant&lt;/span&gt;: 0))\n    }\n}\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The only &quot;gotcha&quot; I&apos;ve found with this approach so far is that UITableView has a nice feature of &quot;floating&quot; section headers at the top of the view as you scroll. The above solution won&apos;t do that unless you add more programming but for our particular case this feature wasn&apos;t 100% essential and nobody noticed when it went away.&lt;/p&gt;\n&lt;p&gt;If you want dividers between your cells, just add a 1 pixel high UIView at the bottom of your custom &quot;cell&quot; that looks like a divider.&lt;/p&gt;\n&lt;p&gt;Be sure to turn on &quot;bounces&quot; and &quot;bounce vertically&quot; for the refresh control to work and so it seems more like a tableview.&lt;/p&gt;\n&lt;p&gt;TableView shows some empty rows and dividers under your content, if it doesn&apos;t fill the full screen where as this solution doesn&apos;t. But personally, I prefer if those empty rows weren&apos;t there anyway - with variable cell height it always looked &quot;buggy&quot; to me anyway to have the empty rows in there.&lt;/p&gt;\n&lt;p&gt;Here&apos;s hoping some other programmer reads my post BEFORE wasting 20+ hours trying to figure it out with Table View in their own app. :)&lt;/p&gt;\n    ","\n&lt;p&gt;I had to use dynamic views (setup views and constraints by code) and when I wanted to set preferredMaxLayoutWidth label&apos;s width was 0. So I&apos;ve got wrong cell height.&lt;/p&gt;\n\n&lt;p&gt;Then I added &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;[cell layoutSubviews]&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;before executing&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;[cell setNeedsUpdateConstraints]&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;hljs-section&quot;&gt;[cell updateConstraintsIfNeeded]&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After that label&apos;s width was as expected and dynamic height was calculating right.&lt;/p&gt;\n    ","\n&lt;p&gt;Let&apos;s say you have a cell with a subview, and you want the cell&apos;s height to be high enough to encompass the subview + padding.&lt;/p&gt;\n\n&lt;p&gt;1) Set the subview&apos;s bottom constraint equal to the cell.contentView minus the padding you want. Do not set constraints on the cell or cell.contentView itself.&lt;/p&gt;\n\n&lt;p&gt;2) Set either the tableView&apos;s &lt;code&gt;rowHeight&lt;/code&gt; property or &lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt; to &lt;code&gt;UITableViewAutomaticDimension&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;3) Set either the tableView&apos;s &lt;code&gt;estimatedRowHeight&lt;/code&gt; property or &lt;code&gt;tableView:estimatedHeightForRowAtIndexPath:&lt;/code&gt; to a best guess of the height.&lt;/p&gt;\n\n&lt;p&gt;That&apos;s it.&lt;/p&gt;\n    ","\n&lt;p&gt;If you do you layout programmatically, here is what to consider for iOS 10 using anchors in Swift.&lt;/p&gt;\n\n&lt;p&gt;There are three rules/ steps&lt;/p&gt;\n\n&lt;p&gt;NUMBER 1: set this two properties of tableview on viewDidLoad, the first one is telling to the tableview that should expect dynamic sizes on their cells, the second one is just to let the app calculate the size of the scrollbar indicator, so it helps for performance.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;tableView.rowHeight&lt;/span&gt; = UITableViewAutomaticDimension\n    &lt;span class=&quot;hljs-attr&quot;&gt;tableView.estimatedRowHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;NUMBER 2: This is important you need to add the subviews to the contentView of the cell not to the view, and also use its layoutsmarginguide to anchor the subviews to the top and bottom, this is a working example of how to do it.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;override &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;: UITableViewCellStyle, &lt;span class=&quot;hljs-attr&quot;&gt;reuseIdentifier&lt;/span&gt;: String?) {\n    super.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;: style, &lt;span class=&quot;hljs-attr&quot;&gt;reuseIdentifier&lt;/span&gt;: reuseIdentifier)\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setUpViews&lt;/span&gt;()\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; func &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setUpViews&lt;/span&gt;() {\n\n    contentView.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;addSubview&lt;/span&gt;(movieImageView)\n    contentView.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;addSubview&lt;/span&gt;(descriptionLabel)\n    let marginGuide = contentView.layoutMarginsGuide\n\n    NSLayoutConstraint.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;activate&lt;/span&gt;([\n        movieImageView.heightAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalToConstant&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;),\n        movieImageView.widthAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalToConstant&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;),\n        movieImageView.leftAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalTo&lt;/span&gt;: marginGuide.leftAnchor),\n        movieImageView.topAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalTo&lt;/span&gt;: marginGuide.topAnchor, &lt;span class=&quot;hljs-attr&quot;&gt;constant&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),\n\n        descriptionLabel.leftAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalTo&lt;/span&gt;: movieImageView.rightAnchor, &lt;span class=&quot;hljs-attr&quot;&gt;constant&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;),\n        descriptionLabel.rightAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalTo&lt;/span&gt;: marginGuide.rightAnchor),\n        descriptionLabel.bottomAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalTo&lt;/span&gt;: marginGuide.bottomAnchor, &lt;span class=&quot;hljs-attr&quot;&gt;constant&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;),\n        descriptionLabel.topAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalTo&lt;/span&gt;: movieImageView.topAnchor)\n\n        ])\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Create a method that will add the subviews and perform the layout, call it in the init method. &lt;/p&gt;\n\n&lt;p&gt;NUMBER 3: DON&apos;T CALL THE METHOD:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;heightForRowAt&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;IndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you do it you will override your implementation.&lt;/p&gt;\n\n&lt;p&gt;Follow this 3 rules for dynamic cells in tableviews.&lt;/p&gt;\n\n&lt;p&gt;here is a working implementation \n&lt;a href=&quot;https://github.com/jamesrochabrun/MinimalViewController&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/jamesrochabrun/MinimalViewController&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you have a &lt;strong&gt;long&lt;/strong&gt; string. e.g. one which &lt;strong&gt;doesn&apos;t&lt;/strong&gt; have a line break. Then you you might run into some problems.&lt;/p&gt;\n\n&lt;p&gt;The &quot;alleged&quot; fix is mentioned by the accepted answer and few other answers. You just need to add&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;cell.myCellLabel.preferredMaxLayoutWidth&lt;/span&gt; = tableView.bounds.width\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I find &lt;a href=&quot;https://stackoverflow.com/a/36422189/5175709&quot;&gt;Suragh&apos;s answer&lt;/a&gt; the most complete and &lt;strong&gt;concise&lt;/strong&gt;, hence not confusing. &lt;/p&gt;\n\n&lt;p&gt;Though non explain &lt;strong&gt;why&lt;/strong&gt; these changes are needed. Let&apos;s do that. &lt;/p&gt;\n\n&lt;p&gt;Drop the following code in to a project. &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; UIKit\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; label : &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; lbl &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt;()\n        lbl.translatesAutoresizingMaskIntoConstraints &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n        lbl.backgroundColor &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .red\n        lbl.textColor &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .black\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; lbl\n    }()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step0: (0.0, 0.0)&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;empty Text intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ----------&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step1: (29.0, 20.5)&lt;/span&gt;\n        label.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hiiiii&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hiiiii intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ----------&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step2: (328.0, 20.5)&lt;/span&gt;\n        label.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;translatesAutoresizingMaskIntoConstraints&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 translate intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ----------&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step3: (992.0, 20.5)&lt;/span&gt;\n        label.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;translatesAutoresizingMaskIntoConstraints translatesAutoresizingMaskIntoConstraints translatesAutoresizingMaskIntoConstraints&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3 translate intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ----------&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step4: (328.0, 20.5)&lt;/span&gt;\n        label.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;translatesAutoresizingMaskIntoConstraints&lt;span class=&quot;hljs-subst&quot;&gt;\\n&lt;/span&gt;translatesAutoresizingMaskIntoConstraints&lt;span class=&quot;hljs-subst&quot;&gt;\\n&lt;/span&gt;translatesAutoresizingMaskIntoConstraints&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3 translate w/ line breaks (but the line breaks get ignored, because numberOfLines is defaulted to `1` and it will force it all to fit into one line! intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ----------&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step5: (328.0, 61.0)&lt;/span&gt;\n        label.numberOfLines &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3 translate w/ line breaks and &apos;0&apos; numberOfLines intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ----------&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step6: (98.5, 243.5)&lt;/span&gt;\n        label.preferredMaxLayoutWidth &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3 translate w/ line breaks | &apos;0&apos; numberOfLines | preferredMaxLayoutWidth: 100 intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n\n        setupLayout()\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setupLayout&lt;/span&gt;(){\n        view.addSubview(label)\n        label.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n        label.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that I haven&apos;t added any &lt;em&gt;size&lt;/em&gt; constraints. I&apos;ve only added centerX, centerY constraints. But still the label will be sized correctly Why? &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Because of &lt;code&gt;contentSize&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To better process this, first keep step0, then comment out out steps 1-6. Let &lt;code&gt;setupLayout()&lt;/code&gt; stay. Observe the behavior. &lt;/p&gt;\n\n&lt;p&gt;Then uncomment step1, and observe.&lt;/p&gt;\n\n&lt;p&gt;Then uncomment step2 and observe. &lt;/p&gt;\n\n&lt;p&gt;Do this until you&apos;ve uncommented all 6 steps and observed their behaviors. &lt;/p&gt;\n\n&lt;h1&gt;What can conclude from all this? What factors can change the &lt;code&gt;contenSize&lt;/code&gt;?&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Text Length:&lt;/strong&gt; If you have a longer text then your intrinsicContentSize&apos;s &lt;em&gt;width&lt;/em&gt; will increase&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Line breaks:&lt;/strong&gt; If you add &lt;code&gt;\\n&lt;/code&gt; then the intrinsicContentSize&apos;s width will the maximum width of all lines. If one line has 25 characters, another has 2 characters and another has 21 characters then your width will be calculated based the 25 characters&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Number of allowed lines:&lt;/strong&gt; You must set the &lt;code&gt;numberOfLines&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; otherwise the you won&apos;t have multiple lines. Your &lt;code&gt;numberOfLines&lt;/code&gt; will adjust your intrinsicContentSize&apos;s &lt;em&gt;height&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Making adjustments:&lt;/strong&gt; Imagine that based on your text, your intrinsicContentSize&apos;s width was &lt;code&gt;200&lt;/code&gt; and height was &lt;code&gt;100&lt;/code&gt;, but you wanted to limited the width to the label&apos;s container what are you going to do? The solution is to set it to a desired width. You do that by setting &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uilabel/1620534-preferredmaxlayoutwidth&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;130&lt;/code&gt; then your new intrinsicContentSize will have a width of roughly &lt;code&gt;130&lt;/code&gt;. The height would obviously be more than &lt;code&gt;100&lt;/code&gt; because you&apos;d need more lines. \nThat being said if your constraints are set correctly then you won&apos;t need to use this at all! For more on that see &lt;a href=&quot;https://stackoverflow.com/a/52709988/5175709&quot;&gt;this answer&lt;/a&gt; and its comments. You only need to use &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt; if you don&apos;t have constraints restricting the width/height as in one might say &quot;don&apos;t wrap the text unless it exceeds the &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt;&quot;. But with 100% certainty if you set the leading/trailing and &lt;code&gt;numberOfLines&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; then you&apos;re good! &lt;strong&gt;Long story short most answers here which recommend using it are WRONG! You don&apos;t need it. Needing it is a sign that your constraints are not set correctly or that you just don&apos;t have constraints&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Font Size:&lt;/strong&gt; Also note that if you increase your fontSize then the intrinsicContentSize&apos;s &lt;em&gt;height&lt;/em&gt; will increase. I didn&apos;t show that in my code. You can try that on your own.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;So back to your tableViewCell example:&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;All you need to do is:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;set the &lt;code&gt;numberOfLines&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;constrain the label correctly to the margins/edges&lt;/li&gt;\n&lt;li&gt;There is no need to set &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;In my case i have to create a custom cell with a image which is coming from server and can be of any width and height. And two UILabels with dynamic size(both width &amp;amp; height)&lt;/p&gt;\n\n&lt;p&gt;i have achieved the same here in my answer with autolayout and programmatically:&lt;/p&gt;\n\n&lt;p&gt;Basically above @smileyBorg answer helped but systemLayoutSizeFittingSize never worked for me, In my approach :&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;1. No use of automatic row height calculation property. 2.No use of estimated height 3.No need of unnecessary updateConstraints. 4.No use of Automatic Preferred Max Layout Width. 5. No use of &lt;strong&gt;systemLayoutSizeFittingSize&lt;/strong&gt; (should have use but not working for me, i dont know what it is doing internally), but instead my method -(float)getViewHeight working and i know what it&apos;s doing internally.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/37235605/is-it-possible-to-have-differing-heights-in-a-uitableview-cell-when-i-use-severa/37236303#37236303&quot;&gt;Is it possible to have differing heights in a UITableView Cell when I use several different ways of displaying the cell?&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In my case, the padding was because of the sectionHeader and sectionFooter heights, where storyboard allowed me to change it to minimum 1. So in viewDidLoad method:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;tableView.sectionHeaderHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;tableView.sectionFooterHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I just did some dumb try and error with the 2 values of &lt;code&gt;rowHeight&lt;/code&gt; and &lt;code&gt;estimatedRowHeight&lt;/code&gt; and just thought it might provide some debugging insight:&lt;/p&gt;\n\n&lt;p&gt;If you set them both OR only set the &lt;code&gt;estimatedRowHeight&lt;/code&gt; you will get the desired behavior:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;tableView.rowHeight&lt;/span&gt; = UITableViewAutomaticDimension\n&lt;span class=&quot;hljs-attr&quot;&gt;tableView.estimatedRowHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1.00001&lt;/span&gt; // MUST be greater than &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s suggested that you do your best to get the correct estimate, but the end result isn&apos;t different. It will just affect your performance.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/b8pfSl.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/b8pfSl.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you only set the rowHeight ie only do:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;tableView.rowHeight&lt;/span&gt; = UITableViewAutomaticDimension\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;your end result would not be as desired:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/koQnPl.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/koQnPl.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt; &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you set the &lt;code&gt;estimatedRowHeight&lt;/code&gt; to 1 or smaller then you will &lt;strong&gt;crash&lt;/strong&gt; regardless of the &lt;code&gt;rowHeight&lt;/code&gt;. &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;tableView.rowHeight&lt;/span&gt; = UITableViewAutomaticDimension\n&lt;span class=&quot;hljs-attr&quot;&gt;tableView.estimatedRowHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I crashed with the following error message:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-delphi&quot;&gt;Terminating app due &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; uncaught exception\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;NSInternalInconsistencyException&apos;&lt;/span&gt;, reason: &lt;span class=&quot;hljs-string&quot;&gt;&apos;table view row height\nmust not be negative - provided height for index path (&amp;lt;NSIndexPath:\n0xc000000000000016&amp;gt; {length = 2, path = 0 - 0}) is -1.000000&apos;&lt;/span&gt;\n    ...some other lines...\n\nlibc++abi.dylib: terminating &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; uncaught exception &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt;\nNSException\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With regard to the accepted answer by @smileyborg, I have found&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;cell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to be unreliable in some cases where constraints are ambiguous.  Better to force the layout engine to calculate the height in one direction, by using the helper category on UIView below:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;-(&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)systemLayoutHeightForWidth:(&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)w{\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; setNeedsLayout];\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; layoutIfNeeded];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;CGSize&lt;/span&gt; size = [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; systemLayoutSizeFittingSize:&lt;span class=&quot;hljs-built_in&quot;&gt;CGSizeMake&lt;/span&gt;(w, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) withHorizontalFittingPriority:&lt;span class=&quot;hljs-built_in&quot;&gt;UILayoutPriorityRequired&lt;/span&gt; verticalFittingPriority:&lt;span class=&quot;hljs-built_in&quot;&gt;UILayoutPriorityFittingSizeLevel&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt; h = size.height;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; h;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where w: is the width of the tableview&lt;/p&gt;\n    ","\n&lt;p&gt;Simply add these two functions in your viewcontroller it will solve your problem. Here, list is a string array which contain your string of every row.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, \n   &lt;span class=&quot;hljs-params&quot;&gt;estimatedHeightForRowAt&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;IndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {\n        tableView.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.calculateHeight(inString: list[indexPath.row])\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (tableView.rowHeight) \n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;calculateHeight&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;inString&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; messageString &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; input.text\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; attributes : [&lt;span class=&quot;hljs-type&quot;&gt;NSAttributedStringKey&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;hljs-type&quot;&gt;NSAttributedStringKey&lt;/span&gt;(rawValue: &lt;span class=&quot;hljs-type&quot;&gt;NSAttributedStringKey&lt;/span&gt;.font.rawValue) : &lt;span class=&quot;hljs-type&quot;&gt;UIFont&lt;/span&gt;.systemFont(ofSize: &lt;span class=&quot;hljs-number&quot;&gt;15.0&lt;/span&gt;)]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; attributedString : &lt;span class=&quot;hljs-type&quot;&gt;NSAttributedString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSAttributedString&lt;/span&gt;(string: messageString&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;, attributes: attributes)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; rect : &lt;span class=&quot;hljs-type&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; attributedString.boundingRect(with: &lt;span class=&quot;hljs-type&quot;&gt;CGSize&lt;/span&gt;(width: &lt;span class=&quot;hljs-number&quot;&gt;222.0&lt;/span&gt;, height: &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;.greatestFiniteMagnitude), options: .usesLineFragmentOrigin, context: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; requredSize:&lt;span class=&quot;hljs-type&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; rect\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; requredSize.height\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;swift &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tableViewHeightConstraint: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutConstraint&lt;/span&gt;!\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tableView: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;!\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; context &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView.addObserver(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, forKeyPath: &lt;span class=&quot;hljs-string&quot;&gt;&quot;contentSize&quot;&lt;/span&gt;, options: [.new,.prior], context: &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt;context)\n    }\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Added observer to adjust tableview height based on the content&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;observeValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;forKeyPath&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;keyPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?, &lt;span class=&quot;hljs-params&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;object&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;change&lt;/span&gt;: [&lt;span class=&quot;hljs-params&quot;&gt;NSKeyValueChangeKey&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;]&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;context&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UnsafeMutableRawPointer&lt;/span&gt;?) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; context &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.context{\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; size &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; change&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;[&lt;span class=&quot;hljs-type&quot;&gt;NSKeyValueChangeKey&lt;/span&gt;.newKey] &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGSize&lt;/span&gt;{\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----&quot;&lt;/span&gt;)\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(size.height)\n                tableViewHeightConstraint.constant &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; size.height &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;\n            }\n        }\n    }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Remove observer&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;deinit&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-type&quot;&gt;NotificationCenter&lt;/span&gt;.default.removeObserver(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;)\n\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If the cell height is dynamic by the content, you should precisely count it out and then return the height value before the cell is rendered. An easy way is to define the counting method in the table view cell code for controller to call at the table cell height delegate method. Don&apos;t forget to count out the &lt;strong&gt;real cell frame width&lt;/strong&gt; (default is 320) if the height is rely on the width of the table or screen. That is, &lt;strong&gt;in the table cell height delegate method, use cell.frame to correct the cell width first, then call the counting height method defined in the cell to get the suitable value and return it&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;p&gt;PS. The code for generating cell object could be defined in another method for different table view cell delegate method to call.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;UITableView.automaticDimension&lt;/code&gt; can be set via Interface Builder:&lt;/p&gt;\n\n&lt;p&gt;Xcode &amp;gt; Storyboard &amp;gt; Size Inspector&lt;/p&gt;\n\n&lt;p&gt;Table View Cell &amp;gt; Row Height &amp;gt; &lt;strong&gt;Automatic&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/FsczL.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/FsczL.png&quot; alt=&quot;Size Inspector&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;yet another iOs7+iOs8 solution in Swift&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cell2height:&lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n    theTable.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;\n    theTable.estimatedRowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;44.0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;cellForRowAtIndexPath&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSIndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewCell&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; cell &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;  tableView.dequeueReusableCellWithIdentifier(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myTableViewCell&quot;&lt;/span&gt;, forIndexPath: indexPath) &lt;span class=&quot;hljs-keyword&quot;&gt;as!&lt;/span&gt; myTableViewCell\n    cell2height&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;cell.contentView.height\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cell\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;heightForRowAtIndexPath&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSIndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;#available&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;iOS&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8.0&lt;/span&gt;, &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cell2height\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":352,"title":"Using Auto Layout in UITableView for dynamic cell layouts & variable row heights","content":"\n                \n&lt;p&gt;How do you use Auto Layout within &lt;code&gt;UITableViewCell&lt;/code&gt;s in a table view to let each cell&apos;s content and subviews determine the row height (itself/automatically), while maintaining smooth scrolling performance?&lt;/p&gt;\n    ","slug":"using-auto-layout-in-uitableview-for-dynamic-cell-layouts-and-variable-row-heights-1657387722263","postType":"QUESTION","createdAt":"2022-07-09T17:28:42.000Z","updatedAt":"2022-07-09T17:28:42.000Z","tags":[{"id":1974,"name":"uitableview","slug":"uitableview","createdAt":"2022-07-09T17:28:42.000Z","updatedAt":"2022-07-09T17:28:42.000Z","Questions_Tags":{"questionId":352,"tagId":1974}},{"id":1975,"name":"autolayout","slug":"autolayout","createdAt":"2022-07-09T17:28:42.000Z","updatedAt":"2022-07-09T17:28:42.000Z","Questions_Tags":{"questionId":352,"tagId":1975}},{"id":1976,"name":"row-height","slug":"row-height","createdAt":"2022-07-09T17:28:42.000Z","updatedAt":"2022-07-09T17:28:42.000Z","Questions_Tags":{"questionId":352,"tagId":1976}}],"relatedQuestions":[{"title":"Using Auto Layout in UITableView for dynamic cell layouts & variable row heights","slug":"using-auto-layout-in-uitableview-for-dynamic-cell-layouts-and-variable-row-heights-1657387722263","tags":[{"name":"uitableview","Questions_Tags":{"questionId":352,"tagId":1974}},{"name":"autolayout","Questions_Tags":{"questionId":352,"tagId":1975}},{"name":"row-height","Questions_Tags":{"questionId":352,"tagId":1976}}]}]},"randomQuestions":[{"title":"How do I use arrays in C++?","slug":"how-do-i-use-arrays-in-c++-1657387456118"},{"title":"Is it possible for flex items to align tightly to the items above them?","slug":"is-it-possible-for-flex-items-to-align-tightly-to-the-items-above-them-1657388511179"},{"title":"Why are mutable structs “evil”?","slug":"why-are-mutable-structs-\"evil\"-1657388508974"},{"title":"scanf() leaves the newline character in the buffer","slug":"scanf()-leaves-the-newline-character-in-the-buffer-1657384699202"},{"title":"Center one and right/left align other flexbox element","slug":"center-one-and-rightleft-align-other-flexbox-element-1657387899083"},{"title":"How do I pass JavaScript variables to PHP?","slug":"how-do-i-pass-javascript-variables-to-php-1657388157033"},{"title":"What is PECS (Producer Extends Consumer Super)?","slug":"what-is-pecs-(producer-extends-consumer-super)-1657384828870"},{"title":"How to generate all permutations of a list","slug":"how-to-generate-all-permutations-of-a-list-1657388537371"},{"title":"Trouble with UTF-8 characters; what I see is not what I stored","slug":"trouble-with-utf-8-characters-what-i-see-is-not-what-i-stored-1657384817490"},{"title":"How to affect other elements when one element is hovered","slug":"how-to-affect-other-elements-when-one-element-is-hovered-1657387832363"},{"title":"Parameterize an SQL IN clause","slug":"parameterize-an-sql-in-clause-1657387536064"},{"title":"How to test multiple variables for equality against a single value?","slug":"how-to-test-multiple-variables-for-equality-against-a-single-value-1657384358504"},{"title":"How to choose the right bean scope?","slug":"how-to-choose-the-right-bean-scope-1657387596513"},{"title":"How to use SharedPreferences in Android to store, fetch and edit values [closed]","slug":"how-to-use-sharedpreferences-in-android-to-store-fetch-and-edit-values-closed-1657387683057"},{"title":"How do I generate random integers within a specific range in Java?","slug":"how-do-i-generate-random-integers-within-a-specific-range-in-java-1657385458888"},{"title":"Remove duplicate values from JS array [duplicate]","slug":"remove-duplicate-values-from-js-array-duplicate-1657387801931"},{"title":"How to return value from an asynchronous callback function? [duplicate]","slug":"how-to-return-value-from-an-asynchronous-callback-function-duplicate-1657387545611"},{"title":"Selenium \"selenium.common.exceptions.NoSuchElementException\" when using Chrome","slug":"selenium-\"selenium.common.exceptions.nosuchelementexception\"-when-using-chrome-1657388136699"},{"title":"JSTL in JSF2 Facelets... makes sense?","slug":"jstl-in-jsf2-facelets...-makes-sense-1657387667435"},{"title":"How to iterate over rows in a DataFrame in Pandas","slug":"how-to-iterate-over-rows-in-a-dataframe-in-pandas-1657387358115"}]},"__N_SSG":true}