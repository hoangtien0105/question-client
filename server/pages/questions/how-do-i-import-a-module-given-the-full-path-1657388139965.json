{"pageProps":{"data":{"answer":["\n&lt;p&gt;For Python 3.5+ use (&lt;a href=&quot;https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; importlib.util\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nspec = importlib.util.spec_from_file_location(&lt;span class=&quot;hljs-string&quot;&gt;&quot;module.name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/file.py&quot;&lt;/span&gt;)\nfoo = importlib.util.module_from_spec(spec)\nsys.modules[&lt;span class=&quot;hljs-string&quot;&gt;&quot;module.name&quot;&lt;/span&gt;] = foo\nspec.loader.exec_module(foo)\nfoo.MyClass()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For Python 3.3 and 3.4 use:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; importlib.machinery &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; SourceFileLoader\n\nfoo = SourceFileLoader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;module.name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/file.py&quot;&lt;/span&gt;).load_module()\nfoo.MyClass()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(Although this has been deprecated in Python 3.4.)&lt;/p&gt;\n&lt;p&gt;For Python 2 use:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; imp\n\nfoo = imp.load_source(&lt;span class=&quot;hljs-string&quot;&gt;&apos;module.name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/path/to/file.py&apos;&lt;/span&gt;)\nfoo.MyClass()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There are equivalent convenience functions for compiled Python files and DLLs.&lt;/p&gt;\n&lt;p&gt;See also &lt;a href=&quot;http://bugs.python.org/issue21436&quot; rel=&quot;noreferrer&quot;&gt;http://bugs.python.org/issue21436&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.  For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-comment&quot;&gt;# the mock-0.3.1 dir contains testcase.py, testutils.py &amp;amp; mock.py&lt;/span&gt;\nsys.path.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/foo/bar/mock-0.3.1&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; testcase &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; TestCase\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; testutils &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; RunTests\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; mock &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Mock, sentinel, patch\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To import your module, you need to add its directory to the environment variable, either temporarily or permanently.&lt;/p&gt;\n&lt;h1&gt;Temporarily&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nsys.path.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/my/modules/&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; my_module\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Permanently&lt;/h1&gt;\n&lt;p&gt;Adding the following line to your &lt;code&gt;.bashrc&lt;/code&gt; (or alternative) file in Linux\nand excecute &lt;code&gt;source ~/.bashrc&lt;/code&gt; (or alternative) in the terminal:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;export PYTHONPATH=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${PYTHONPATH}:/path/to/my/modules/&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Credit/Source: &lt;a href=&quot;https://stackoverflow.com/users/2312075/saarrrr&quot;&gt;saarrrr&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/3402176/7428659&quot;&gt;another Stack&amp;nbsp;Exchange question&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If your top-level module is not a file but is packaged as a directory with __init__.py, then the accepted solution almost works, but not quite. In Python 3.5+ the following code is needed (note the added line that begins with &apos;sys.modules&apos;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;MODULE_PATH = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/your/module/__init__.py&quot;&lt;/span&gt;\nMODULE_NAME = &lt;span class=&quot;hljs-string&quot;&gt;&quot;mymodule&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; importlib\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nspec = importlib.util.spec_from_file_location(MODULE_NAME, MODULE_PATH)\nmodule = importlib.util.module_from_spec(spec)\nsys.modules[spec.name] = module \nspec.loader.exec_module(module)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Without this line, when exec_module is executed, it tries to bind relative imports in your top level __init__.py to the top level module name -- in this case &quot;mymodule&quot;. But &quot;mymodule&quot; isn&apos;t loaded yet so you&apos;ll get the error &quot;SystemError: Parent module &apos;mymodule&apos; not loaded, cannot perform relative import&quot;. So you need to bind the name before you load it. The reason for this is the fundamental invariant of the relative import system: &quot;The invariant holding is that if you have sys.modules[&apos;spam&apos;] and sys.modules[&apos;spam.foo&apos;] (as you would after the above import), the latter must appear as the foo attribute of the former&quot; &lt;a href=&quot;https://docs.python.org/3/reference/import.html#submodules&quot; rel=&quot;noreferrer&quot;&gt;as discussed here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It sounds like you don&apos;t want to specifically import the configuration file (which has a whole lot of side effects and additional complications involved). You just want to run it, and be able to access the resulting namespace. The standard library provides an API specifically for that in the form of &lt;a href=&quot;https://docs.python.org/3/library/runpy.html#runpy.run_path&quot; rel=&quot;noreferrer&quot;&gt;runpy.run_path&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; runpy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; run_path\nsettings = run_path(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/file.py&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That interface is available in Python 2.7 and Python 3.2+.&lt;/p&gt;\n    ","\n&lt;p&gt;You can also do something like this and add the directory that the configuration file is sitting in to the Python load path, and then just do a normal import, assuming you know the name of the file in advance, in this case &quot;config&quot;.&lt;/p&gt;\n\n&lt;p&gt;Messy, but it works.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;configfile = &lt;span class=&quot;hljs-string&quot;&gt;&apos;~/config.py&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n\nsys.path.append(os.path.dirname(os.path.expanduser(configfile)))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; config\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use the&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;load_source(module_name, path_to_file)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;method from the &lt;a href=&quot;https://docs.python.org/library/imp.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;imp module&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Do you mean load or import?&lt;/p&gt;\n&lt;p&gt;You can manipulate the &lt;code&gt;sys.path&lt;/code&gt; list specify the path to your module, and then import your module. For example, given a module at:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;/foo/bar.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You could do:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nsys.path[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;/foo&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Puts the /foo directory at the start of your path&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; bar\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is some code that works in all Python versions, from 2.7-3.5 and probably even others.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;config_file = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/tmp/config.py&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(config_file) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    code = &lt;span class=&quot;hljs-built_in&quot;&gt;compile&lt;/span&gt;(f.read(), config_file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;exec&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt;(code, &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;(), &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;())\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I tested it. It may be ugly, but so far it is the only one that works in all versions.&lt;/p&gt;\n    ","\n&lt;p&gt;I have come up with a slightly modified version of &lt;a href=&quot;https://stackoverflow.com/a/67692/2988730&quot;&gt;@SebastianRittau&apos;s wonderful answer&lt;/a&gt; (for Python &amp;gt; 3.4 I think), which will allow you to load a file with any extension as a module using &lt;a href=&quot;https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_loader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;spec_from_loader&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_file_location&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;spec_from_file_location&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; importlib.util &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; spec_from_loader, module_from_spec\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; importlib.machinery &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; SourceFileLoader \n\nspec = spec_from_loader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;module.name&quot;&lt;/span&gt;, SourceFileLoader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;module.name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/file.py&quot;&lt;/span&gt;))\nmod = module_from_spec(spec)\nspec.loader.exec_module(mod)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The advantage of encoding the path in an explicit &lt;a href=&quot;https://docs.python.org/3/library/importlib.html#importlib.machinery.SourceFileLoader&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;SourceFileLoader&lt;/code&gt;&lt;/a&gt; is that the &lt;a href=&quot;https://docs.python.org/3/library/importlib.html#module-importlib.machinery&quot; rel=&quot;nofollow noreferrer&quot;&gt;machinery&lt;/a&gt; will not try to figure out the type of the file from the extension. This means that you can load something like a &lt;code&gt;.txt&lt;/code&gt; file using this method, but you could not do it with &lt;code&gt;spec_from_file_location&lt;/code&gt; without specifying the loader because &lt;code&gt;.txt&lt;/code&gt; is not in &lt;a href=&quot;https://docs.python.org/3/library/importlib.html#importlib.machinery.SOURCE_SUFFIXES&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;importlib.machinery.SOURCE_SUFFIXES&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;I&apos;ve placed an implementation based on this, and &lt;a href=&quot;https://stackoverflow.com/a/50395128/2988730&quot;&gt;@SamGrondahl&apos;s useful modification&lt;/a&gt; into my utility library, &lt;a href=&quot;https://haggis.readthedocs.io/en/stable/&quot; rel=&quot;nofollow noreferrer&quot;&gt;haggis&lt;/a&gt;. The function is called &lt;a href=&quot;https://haggis.readthedocs.io/en/latest/api.html#haggis.load.load_module&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;haggis.load.load_module&lt;/code&gt;&lt;/a&gt;. It adds a couple of neat tricks, like the ability to inject variables into the module namespace as it is loaded.&lt;/p&gt;\n    ","\n&lt;p&gt;You can do this using &lt;code&gt;__import__&lt;/code&gt; and &lt;code&gt;chdir&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;import_file&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;full_path_to_module&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n        module_dir, module_file = os.path.split(full_path_to_module)\n        module_name, module_ext = os.path.splitext(module_file)\n        save_cwd = os.getcwd()\n        os.chdir(module_dir)\n        module_obj = &lt;span class=&quot;hljs-built_in&quot;&gt;__import__&lt;/span&gt;(module_name)\n        module_obj.__file__ = full_path_to_module\n        &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[module_name] = module_obj\n        os.chdir(save_cwd)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; e:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; ImportError(e)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; module_obj\n\n\nimport_file(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/home/somebody/somemodule.py&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If we have scripts in the same project but in different directory means, we can solve this problem by the following method.&lt;/p&gt;\n\n&lt;p&gt;In this situation &lt;code&gt;utils.py&lt;/code&gt; is in &lt;code&gt;src/main/util/&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nsys.path.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;./&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; src.main.util.utils\n&lt;span class=&quot;hljs-comment&quot;&gt;#or&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; src.main.util.utils &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; json_converter &lt;span class=&quot;hljs-comment&quot;&gt;# json_converter is example method&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I believe you can use &lt;a href=&quot;https://docs.python.org/2/library/imp.html#imp.find_module&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;imp.find_module()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/2/library/imp.html#imp.load_module&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;imp.load_module()&lt;/code&gt;&lt;/a&gt; to load the specified module.  You&apos;ll need to split the module name off of the path, i.e. if you wanted to load &lt;code&gt;/home/mypath/mymodule.py&lt;/code&gt; you&apos;d need to do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;imp.find_module(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mymodule&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/home/mypath/&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...but that should get the job done.&lt;/p&gt;\n    ","\n&lt;p&gt;Create Python module &lt;em&gt;test.py&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nsys.path.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;project-path&amp;gt;/lib/&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; tes1 &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Client1\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; tes2 &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Client2\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; tes3\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Create Python module &lt;em&gt;test_check.py&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Client1\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Client2\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; test3\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can import the imported module from module.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use the &lt;code&gt;pkgutil&lt;/code&gt; module (specifically the &lt;a href=&quot;https://docs.python.org/3/library/pkgutil.html#pkgutil.walk_packages&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;walk_packages&lt;/code&gt;&lt;/a&gt; method) to get a list of the packages in the current directory. From there it&apos;s trivial to use the &lt;code&gt;importlib&lt;/code&gt; machinery to import the modules you want:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pkgutil\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; importlib\n\npackages = pkgutil.walk_packages(path=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; importer, name, is_package &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; packages:\n    mod = importlib.import_module(name)\n    &lt;span class=&quot;hljs-comment&quot;&gt;# do whatever you want with module now, it&apos;s been imported!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There&apos;s a &lt;a href=&quot;https://pypi.org/project/thesmuggler/&quot; rel=&quot;noreferrer&quot;&gt;package&lt;/a&gt; that&apos;s dedicated to this specifically:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; thesmuggler &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; smuggle\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# À la `import weapons`&lt;/span&gt;\nweapons = smuggle(&lt;span class=&quot;hljs-string&quot;&gt;&apos;weapons.py&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# À la `from contraband import drugs, alcohol`&lt;/span&gt;\ndrugs, alcohol = smuggle(&lt;span class=&quot;hljs-string&quot;&gt;&apos;drugs&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;alcohol&apos;&lt;/span&gt;, source=&lt;span class=&quot;hljs-string&quot;&gt;&apos;contraband.py&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# À la `from contraband import drugs as dope, alcohol as booze`&lt;/span&gt;\ndope, booze = smuggle(&lt;span class=&quot;hljs-string&quot;&gt;&apos;drugs&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;alcohol&apos;&lt;/span&gt;, source=&lt;span class=&quot;hljs-string&quot;&gt;&apos;contraband.py&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s tested across Python versions (Jython and PyPy too), but it might be overkill depending on the size of your project.&lt;/p&gt;\n    ","\n&lt;p&gt;This area of Python 3.4 seems to be extremely tortuous to understand! However with a bit of hacking using the code from Chris Calloway as a start I managed to get something working. Here&apos;s the basic function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;import_module_from_file&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;full_path_to_module&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    Import a module given the full path/filename of the .py file\n\n    Python 3.4\n\n    &quot;&quot;&quot;&lt;/span&gt;\n\n    module = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Get module name and path from full path&lt;/span&gt;\n        module_dir, module_file = os.path.split(full_path_to_module)\n        module_name, module_ext = os.path.splitext(module_file)\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Get module &quot;spec&quot; from filename&lt;/span&gt;\n        spec = importlib.util.spec_from_file_location(module_name,full_path_to_module)\n\n        module = spec.loader.load_module()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; ec:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Simple error printing&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Insert &quot;sophisticated&quot; stuff here&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ec)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; module\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This appears to use non-deprecated modules from Python 3.4. I don&apos;t pretend to understand why, but it seems to work from within a program. I found Chris&apos; solution worked on the command line but not from inside a program.&lt;/p&gt;\n    ","\n&lt;p&gt;I made a package that uses &lt;code&gt;imp&lt;/code&gt; for you. I call it &lt;code&gt;import_file&lt;/code&gt; and this is how it&apos;s used:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; import_file &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; import_file\n&amp;gt;&amp;gt;&amp;gt;mylib = import_file(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c:\\\\mylib.py&apos;&lt;/span&gt;)\n&amp;gt;&amp;gt;&amp;gt;another = import_file(&lt;span class=&quot;hljs-string&quot;&gt;&apos;relative_subdir/another.py&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can get it at:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://pypi.python.org/pypi/import_file&quot; rel=&quot;nofollow&quot;&gt;http://pypi.python.org/pypi/import_file&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;or at&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/import-file/&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/p/import-file/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To import a module from a given filename, you can temporarily extend the path, and restore the system path in the finally block &lt;a href=&quot;http://effbot.org/zone/import-string.htm&quot; rel=&quot;nofollow&quot;&gt;reference:&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;filename = &lt;span class=&quot;hljs-string&quot;&gt;&quot;directory/module.py&quot;&lt;/span&gt;\n\ndirectory, module_name = os.path.split(filename)\nmodule_name = os.path.splitext(module_name)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n\npath = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(sys.path)\nsys.path.insert(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, directory)\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n    module = &lt;span class=&quot;hljs-built_in&quot;&gt;__import__&lt;/span&gt;(module_name)\n&lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;:\n    sys.path[:] = path &lt;span class=&quot;hljs-comment&quot;&gt;# restore&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A simple solution using &lt;code&gt;importlib&lt;/code&gt; instead of the &lt;code&gt;imp&lt;/code&gt; package (tested for Python 2.7, although it should work for Python 3 too):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; importlib\n\ndirname, basename = os.path.split(pyfilepath) &lt;span class=&quot;hljs-comment&quot;&gt;# pyfilepath: &apos;/my/path/mymodule.py&apos;&lt;/span&gt;\nsys.path.append(dirname) &lt;span class=&quot;hljs-comment&quot;&gt;# only directories should be added to PYTHONPATH&lt;/span&gt;\nmodule_name = os.path.splitext(basename)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# &apos;/my/path/mymodule.py&apos; --&amp;gt; &apos;mymodule&apos;&lt;/span&gt;\nmodule = importlib.import_module(module_name) &lt;span class=&quot;hljs-comment&quot;&gt;# name space of defined module (otherwise we would literally look for &quot;module_name&quot;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can directly use the namespace of the imported module, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = module.myvar\nb = module.myfunc(a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The advantage of this solution is that &lt;strong&gt;we don&apos;t even need to know the actual name of the module we would like to import&lt;/strong&gt;, in order to use it in our code. This is useful, e.g. in case the path of the module is a configurable argument.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m not saying that it is better, but for the sake of completeness, I wanted to suggest the &lt;a href=&quot;https://docs.python.org/3/library/functions.html#exec&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt; function, available in both Python&amp;nbsp;2 and Python&amp;nbsp;3.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;exec&lt;/code&gt; allows you to execute arbitrary code in either the global scope, or in an internal scope, provided as a dictionary.&lt;/p&gt;\n&lt;p&gt;For example, if you have a module stored in &lt;code&gt;&quot;/path/to/module&lt;/code&gt;&quot; with the function &lt;code&gt;foo()&lt;/code&gt;, you could run it by doing the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;module = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;()\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/module&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt;(f.read(), module)\nmodule[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;]()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This makes it a bit more explicit that you&apos;re loading code dynamically, and grants you some additional power, such as the ability to provide custom builtins.&lt;/p&gt;\n&lt;p&gt;And if having access through attributes, instead of keys is important to you, you can design a custom dict class for the globals, that provides such access, e.g.:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyModuleClass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;dict&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__getattr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.__getitem__(name)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To add to &lt;a href=&quot;https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path/67692#67692&quot;&gt;Sebastian Rittau&lt;/a&gt;&apos;s answer:\nAt least for &lt;a href=&quot;https://en.wikipedia.org/wiki/CPython&quot; rel=&quot;nofollow noreferrer&quot;&gt;CPython&lt;/a&gt;, there&apos;s &lt;a href=&quot;https://docs.python.org/3/library/pydoc.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;pydoc&lt;/a&gt;, and, while not officially declared, importing files is what it does:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pydoc &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; importfile\nmodule = importfile(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/path/to/module.py&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; For the sake of completeness, there&apos;s a reference to the current implementation at the moment of writing: &lt;a href=&quot;https://github.com/python/cpython/blob/9c3eaf88dc5d5bed80cc45936de06b7b3162bc6d/Lib/pydoc.py#L392&quot; rel=&quot;nofollow noreferrer&quot;&gt;pydoc.py&lt;/a&gt;, and I&apos;m pleased to say that in the vein of &lt;a href=&quot;https://xkcd.com/1987/&quot; rel=&quot;nofollow noreferrer&quot;&gt;xkcd 1987&lt;/a&gt; it uses neither of the implementations mentioned in &lt;a href=&quot;https://bugs.python.org/issue21436&quot; rel=&quot;nofollow noreferrer&quot;&gt;issue 21436&lt;/a&gt; -- at least, not verbatim.&lt;/p&gt;\n    ","\n&lt;p&gt;This should work&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;path = os.path.join(&lt;span class=&quot;hljs-string&quot;&gt;&apos;./path/to/folder/with/py/files&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;*.py&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; infile &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; glob.glob(path):\n    basename = os.path.basename(infile)\n    basename_without_extension = basename[:-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# http://docs.python.org/library/imp.html?highlight=imp#module-imp&lt;/span&gt;\n    imp.load_source(basename_without_extension, infile)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Import package modules at runtime (Python recipe)&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://code.activestate.com/recipes/223972/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://code.activestate.com/recipes/223972/&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;###################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##                #&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;## classloader.py #&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##                #&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;###################&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys, types\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_get_mod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;modulePath&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        aMod = sys.modules[modulePath]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(aMod, types.ModuleType):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; KeyError\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; KeyError:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# The last [&apos;&apos;] is very important!&lt;/span&gt;\n        aMod = &lt;span class=&quot;hljs-built_in&quot;&gt;__import__&lt;/span&gt;(modulePath, &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;(), &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;(), [&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;])\n        sys.modules[modulePath] = aMod\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; aMod\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_get_func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fullFuncName&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Retrieve a function object from a full dotted-package name.&quot;&quot;&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Parse out the path, module, and function&lt;/span&gt;\n    lastDot = fullFuncName.rfind(&lt;span class=&quot;hljs-string&quot;&gt;u&quot;.&quot;&lt;/span&gt;)\n    funcName = fullFuncName[lastDot + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]\n    modPath = fullFuncName[:lastDot]\n\n    aMod = _get_mod(modPath)\n    aFunc = &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(aMod, funcName)\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Assert that the function is a *callable* attribute.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;callable&lt;/span&gt;(aFunc), &lt;span class=&quot;hljs-string&quot;&gt;u&quot;%s is not callable.&quot;&lt;/span&gt; % fullFuncName\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Return a reference to the function itself,&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# not the results of the function.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; aFunc\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_get_class&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fullClassName, parentClass=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Load a module and retrieve a class (NOT an instance).\n\n    If the parentClass is supplied, className must be of parentClass\n    or a subclass of parentClass (or None is returned).\n    &quot;&quot;&quot;&lt;/span&gt;\n    aClass = _get_func(fullClassName)\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Assert that the class is a subclass of parentClass.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; parentClass &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;issubclass&lt;/span&gt;(aClass, parentClass):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; TypeError(&lt;span class=&quot;hljs-string&quot;&gt;u&quot;%s is not a subclass of %s&quot;&lt;/span&gt; %\n                            (fullClassName, parentClass))\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Return a reference to the class itself, not an instantiated object.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; aClass\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;######################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##       Usage      ##&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;######################&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StorageManager&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StorageManagerMySQL&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;StorageManager&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;storage_object&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;aFullClassName, allOptions={}&lt;/span&gt;):\n    aStoreClass = _get_class(aFullClassName, StorageManager)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; aStoreClass(allOptions)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Linux, adding a symbolic link in the directory your Python script is located works.&lt;/p&gt;\n&lt;p&gt;I.e.:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;ln -s /absolute/path/to/module/module.py /absolute/path/to/script/module.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The Python interpreter will create &lt;code&gt;/absolute/path/to/script/module.pyc&lt;/code&gt; and will update it if you change the contents of &lt;code&gt;/absolute/path/to/module/module.py&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Then include the following in file &lt;em&gt;mypythonscript.py&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; module &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; *\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This will allow imports of compiled (pyd) Python modules in 3.4:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; importlib.machinery\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;load_module&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, filename&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# If the Loader finds the module name in this list it will use&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# module_name.__file__ instead so we need to delete it here&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sys.modules:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; sys.modules[name]\n    loader = importlib.machinery.ExtensionFileLoader(name, filename)\n    module = loader.load_module()\n    &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;()[name] = module\n    &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[name] = module\n\nload_module(&lt;span class=&quot;hljs-string&quot;&gt;&apos;something&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;r&apos;C:\\Path\\To\\something.pyd&apos;&lt;/span&gt;)\nsomething.do_something()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A quite simple way: suppose you want import file with relative path ../../MyLibs/pyfunc.py&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;libPath = &lt;span class=&quot;hljs-string&quot;&gt;&apos;../../MyLibs&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; libPath &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sys.path: sys.path.append(libPath)\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pyfunc &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pf\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But if you make it without a guard you can finally get a very long path.&lt;/p&gt;\n    ","\n&lt;p&gt;I have written my own global and portable import function, based on &lt;code&gt;importlib&lt;/code&gt; module, for:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Be able to import both modules as submodules and to import the content of a module to a parent module (or into a globals if has no parent module).&lt;/li&gt;\n&lt;li&gt;Be able to import modules with a period characters in a file name.&lt;/li&gt;\n&lt;li&gt;Be able to import modules with any extension.&lt;/li&gt;\n&lt;li&gt;Be able to use a standalone name for a submodule instead of a file name without extension which is by default.&lt;/li&gt;\n&lt;li&gt;Be able to define the import order based on previously imported module instead of dependent on &lt;code&gt;sys.path&lt;/code&gt; or on a what ever search path storage.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The examples directory structure:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;root&amp;gt;\n |\n +- test.py\n |\n +- testlib.py\n |\n +- /std1\n |   |\n |   +- testlib.std1.py\n |\n +- /std2\n |   |\n |   +- testlib.std2.py\n |\n +- /std3\n     |\n     +- testlib.std3.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Inclusion dependency and order:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;test.py\n  -&amp;gt; testlib.py\n    -&amp;gt; testlib.std1.py\n      -&amp;gt; testlib.std2.py\n    -&amp;gt; testlib.std3.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Implementation:&lt;/p&gt;\n&lt;p&gt;Latest changes store: &lt;a href=&quot;https://sourceforge.net/p/tacklelib/tacklelib/HEAD/tree/trunk/python/tacklelib/tacklelib.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://sourceforge.net/p/tacklelib/tacklelib/HEAD/tree/trunk/python/tacklelib/tacklelib.py&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;test.py&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os, sys, inspect, copy\n\nSOURCE_FILE = os.path.abspath(inspect.getsourcefile(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;)\nSOURCE_DIR = os.path.dirname(SOURCE_FILE)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# portable import to the global space&lt;/span&gt;\nsys.path.append(TACKLELIB_ROOT) &lt;span class=&quot;hljs-comment&quot;&gt;# TACKLELIB_ROOT - path to the library directory&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; tacklelib &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; tkl\n\ntkl.tkl_init(tkl)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# cleanup&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; tkl &lt;span class=&quot;hljs-comment&quot;&gt;# must be instead of `tkl = None`, otherwise the variable would be still persist&lt;/span&gt;\nsys.path.pop()\n\ntkl_import_module(SOURCE_DIR, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.py&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;().keys())\n\ntestlib.base_test()\ntestlib.testlib_std1.std1_test()\ntestlib.testlib_std1.testlib_std2.std2_test()\n&lt;span class=&quot;hljs-comment&quot;&gt;#testlib.testlib.std3.std3_test()                             # does not reachable directly ...&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.std3&apos;&lt;/span&gt;).std3_test()     &lt;span class=&quot;hljs-comment&quot;&gt;# ... but reachable through the `globals` + `getattr`&lt;/span&gt;\n\ntkl_import_module(SOURCE_DIR, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.py&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;().keys())\n\nbase_test()\ntestlib_std1.std1_test()\ntestlib_std1.testlib_std2.std2_test()\n&lt;span class=&quot;hljs-comment&quot;&gt;#testlib.std3.std3_test()                                     # does not reachable directly ...&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.std3&apos;&lt;/span&gt;].std3_test()                         &lt;span class=&quot;hljs-comment&quot;&gt;# ... but reachable through the `globals` + `getattr`&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;testlib.py&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# optional for 3.4.x and higher&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#import os, inspect&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace(&apos;\\\\&apos;,&apos;/&apos;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_DIR = os.path.dirname(SOURCE_FILE)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 testlib::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\ntkl_import_module(SOURCE_DIR + &lt;span class=&quot;hljs-string&quot;&gt;&apos;/std1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.std1.py&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib_std1&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# SOURCE_DIR is restored here&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2 testlib::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\ntkl_import_module(SOURCE_DIR + &lt;span class=&quot;hljs-string&quot;&gt;&apos;/std3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.std3.py&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3 testlib::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;base_test&lt;/span&gt;():\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;base_test&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;testlib.std1.py&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# optional for 3.4.x and higher&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#import os, inspect&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace(&apos;\\\\&apos;,&apos;/&apos;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_DIR = os.path.dirname(SOURCE_FILE)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;testlib.std1::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\ntkl_import_module(SOURCE_DIR + &lt;span class=&quot;hljs-string&quot;&gt;&apos;/../std2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.std2.py&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib_std2&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;std1_test&lt;/span&gt;():\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;std1_test&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;testlib.std2.py&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# optional for 3.4.x and higher&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#import os, inspect&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace(&apos;\\\\&apos;,&apos;/&apos;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_DIR = os.path.dirname(SOURCE_FILE)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;testlib.std2::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;std2_test&lt;/span&gt;():\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;std2_test&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;testlib.std3.py&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# optional for 3.4.x and higher&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#import os, inspect&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace(&apos;\\\\&apos;,&apos;/&apos;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#SOURCE_DIR = os.path.dirname(SOURCE_FILE)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;testlib.std3::SOURCE_FILE: &quot;&lt;/span&gt;, SOURCE_FILE)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;std3_test&lt;/span&gt;():\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;std3_test&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt; (&lt;code&gt;3.7.4&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;test::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/test.py\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/testlib.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib -&amp;gt; []\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; testlib::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/testlib.py\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/std1/testlib.std1.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib_std1 -&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/std1/../std2/testlib.std2.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib_std2 -&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib_std1&apos;&lt;/span&gt;]\ntestlib.std2::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/std1/../std2/testlib.std2.py\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; testlib::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/testlib.py\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/std3/testlib.std3.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib.std3 -&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;]\ntestlib.std3::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/std3/testlib.std3.py\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; testlib::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/testlib.py\ndict_keys([&lt;span class=&quot;hljs-string&quot;&gt;&apos;__name__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__package__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__loader__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__spec__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__annotations__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__builtins__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__file__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__cached__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;os&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;sys&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;inspect&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;SOURCE_FILE&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;SOURCE_DIR&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;TackleGlobalImportModuleState&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_membercopy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_merge_module&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_get_parent_imported_module_state&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_declare_global&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_import_module&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;TackleSourceModuleState&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_source_module&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;TackleLocalImportModuleState&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;])\nbase_test\nstd1_test\nstd2_test\nstd3_test\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/testlib.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; . -&amp;gt; []\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; testlib::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/testlib.py\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/std1/testlib.std1.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib_std1 -&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/std1/../std2/testlib.std2.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib_std2 -&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib_std1&apos;&lt;/span&gt;]\ntestlib.std2::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/std1/../std2/testlib.std2.py\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; testlib::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/testlib.py\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; : &amp;lt;root&amp;gt;/test01/std3/testlib.std3.py &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; testlib.std3 -&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;]\ntestlib.std3::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/std3/testlib.std3.py\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; testlib::SOURCE_FILE:  &amp;lt;root&amp;gt;/test01/testlib.py\ndict_keys([&lt;span class=&quot;hljs-string&quot;&gt;&apos;__name__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__package__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__loader__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__spec__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__annotations__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__builtins__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__file__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__cached__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;os&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;sys&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;inspect&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;SOURCE_FILE&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;SOURCE_DIR&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;TackleGlobalImportModuleState&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_membercopy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_merge_module&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_get_parent_imported_module_state&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_declare_global&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_import_module&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;TackleSourceModuleState&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;tkl_source_module&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;TackleLocalImportModuleState&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib_std1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;testlib.std3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;base_test&apos;&lt;/span&gt;])\nbase_test\nstd1_test\nstd2_test\nstd3_test\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Tested in Python &lt;code&gt;3.7.4&lt;/code&gt;, &lt;code&gt;3.2.5&lt;/code&gt;, &lt;code&gt;2.7.16&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Can import both module as a submodule and can import content of a module to a parent module (or into a globals if has no parent module).&lt;/li&gt;\n&lt;li&gt;Can import modules with periods in a file name.&lt;/li&gt;\n&lt;li&gt;Can import any extension module from any extension module.&lt;/li&gt;\n&lt;li&gt;Can use a standalone name for a submodule instead of a file name without extension which is by default (for example, &lt;code&gt;testlib.std.py&lt;/code&gt; as &lt;code&gt;testlib&lt;/code&gt;, &lt;code&gt;testlib.blabla.py&lt;/code&gt; as &lt;code&gt;testlib_blabla&lt;/code&gt; and so on).&lt;/li&gt;\n&lt;li&gt;Does not depend on a &lt;code&gt;sys.path&lt;/code&gt; or on a what ever search path storage.&lt;/li&gt;\n&lt;li&gt;Does not require to save/restore global variables like &lt;code&gt;SOURCE_FILE&lt;/code&gt; and &lt;code&gt;SOURCE_DIR&lt;/code&gt; between calls to &lt;code&gt;tkl_import_module&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;[for &lt;code&gt;3.4.x&lt;/code&gt; and higher] Can mix the module namespaces in nested &lt;code&gt;tkl_import_module&lt;/code&gt; calls (ex: &lt;code&gt;named-&amp;gt;local-&amp;gt;named&lt;/code&gt; or &lt;code&gt;local-&amp;gt;named-&amp;gt;local&lt;/code&gt; and so on).&lt;/li&gt;\n&lt;li&gt;[for &lt;code&gt;3.4.x&lt;/code&gt; and higher] Can auto export global variables/functions/classes from where being declared to all children modules imported through the &lt;code&gt;tkl_import_module&lt;/code&gt; (through the &lt;code&gt;tkl_declare_global&lt;/code&gt; function).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;[for &lt;code&gt;3.3.x&lt;/code&gt; and lower] Require to declare &lt;code&gt;tkl_import_module&lt;/code&gt; in all modules which calls to &lt;code&gt;tkl_import_module&lt;/code&gt; (code duplication)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Update 1,2&lt;/strong&gt; (for &lt;code&gt;3.4.x&lt;/code&gt; and higher only):&lt;/p&gt;\n&lt;p&gt;In Python 3.4 and higher you can bypass the requirement to declare &lt;code&gt;tkl_import_module&lt;/code&gt; in each module by declare &lt;code&gt;tkl_import_module&lt;/code&gt; in a top level module and the function would inject itself to all children modules in a single call (it&apos;s a kind of self deploy import).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Update 3&lt;/strong&gt;:&lt;/p&gt;\n&lt;p&gt;Added function &lt;code&gt;tkl_source_module&lt;/code&gt; as analog to bash &lt;code&gt;source&lt;/code&gt; with support execution guard upon import (implemented through the module merge instead of import).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Update 4&lt;/strong&gt;:&lt;/p&gt;\n&lt;p&gt;Added function &lt;code&gt;tkl_declare_global&lt;/code&gt; to auto export a module global variable to all children modules where a module global variable is not visible because is not a part of a child module.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Update 5&lt;/strong&gt;:&lt;/p&gt;\n&lt;p&gt;All functions has moved into the tacklelib library, see the link above.&lt;/p&gt;\n    ","\n&lt;p&gt;These are my two utility functions using only pathlib. It infers the module name from the path.&lt;/p&gt;\n&lt;p&gt;By default, it recursively loads all Python files from folders and replaces &lt;strong&gt;init&lt;/strong&gt;.py by the parent folder name. But you can also give a Path and/or a glob to select some specific files.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Path\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; importlib.util &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; spec_from_file_location, module_from_spec\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; typing &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Optional&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_module_from_path&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path: Path, relative_to: &lt;span class=&quot;hljs-type&quot;&gt;Optional&lt;/span&gt;[Path] = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; relative_to:\n        relative_to = Path.cwd()\n\n    abs_path = path.absolute()\n    relative_path = abs_path.relative_to(relative_to.absolute())\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; relative_path.name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__init__.py&quot;&lt;/span&gt;:\n        relative_path = relative_path.parent\n    module_name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;.join(relative_path.with_suffix(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;).parts)\n    mod = module_from_spec(spec_from_file_location(module_name, path))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mod\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_modules_from_folder&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;folder: &lt;span class=&quot;hljs-type&quot;&gt;Optional&lt;/span&gt;[Path] = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, glob_str: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*/**/*.py&quot;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; folder:\n        folder = Path(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)\n\n    mod_list = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file_path &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(folder.glob(glob_str)):\n        mod_list.append(get_module_from_path(file_path))\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mod_list\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s a way of loading files sort of like C, etc.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; importlib.machinery &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; SourceFileLoader\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;LOAD&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;MODULE_PATH&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (MODULE_PATH[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;):\n        FULL_PATH = MODULE_PATH;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        DIR_PATH = os.path.dirname (os.path.realpath (__file__))\n        FULL_PATH = os.path.normpath (DIR_PATH + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt; + MODULE_PATH)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; SourceFileLoader (FULL_PATH, FULL_PATH).load_module ()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Implementations where:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Y = LOAD(&lt;span class=&quot;hljs-string&quot;&gt;&quot;../Z.py&quot;&lt;/span&gt;)\nA = LOAD(&lt;span class=&quot;hljs-string&quot;&gt;&quot;./A.py&quot;&lt;/span&gt;)\nD = LOAD(&lt;span class=&quot;hljs-string&quot;&gt;&quot;./C/D.py&quot;&lt;/span&gt;)\nA_ = LOAD(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/IMPORTS/A.py&quot;&lt;/span&gt;)\n\nY.DEF();\nA.DEF();\nD.DEF();\nA_.DEF();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Where each of the files looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;DEF&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    "],"comment":["\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Nice and simple question - and useful answers but they make me wonder what happened with the python mantra &quot;There is &lt;i&gt;one&lt;/i&gt; &lt;i&gt;obvious&lt;/i&gt; way&quot; to do it.. It doesn&apos;t seem like anything like a single or a simple and obvious answer to it.. Seems ridiculously hacky and version-dependent for such a fundamental operation (and it looks and more bloated in newer versions..).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/174284/inger&quot; title=&quot;18,604 reputation&quot; class=&quot;comment-user&quot;&gt;inger&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment104641985_67631&quot;&gt;&lt;span title=&quot;2019-12-06 12:08:07Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 6, 2019 at 12:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@inger &lt;b&gt;what happened with the python mantra &quot;There is one obvious way&quot; to do it [...] [not] a single or a simple and obvious answer to it [...] ridiculously hacky[...] more bloated in newer versions&lt;/b&gt; Welcome to the terrible world of python package management. Python&apos;s &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;setuptools&lt;/code&gt; whatnot should all be thrown out and replaced with working code. I just tried to grok &lt;code&gt;virtualenv&lt;/code&gt; or was it &lt;code&gt;pipenv&lt;/code&gt; and had to work thru the equivalent of a Jumbo Jet manual. How that contrivance is paraded as The Solution to dealing with deps totally escapes me.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7568091/john-frazer&quot; title=&quot;888 reputation&quot; class=&quot;comment-user&quot;&gt;John Frazer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment110708637_67631&quot;&gt;&lt;span title=&quot;2020-06-26 20:59:56Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 26, 2020 at 20:59&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;relevant XKCD &lt;a href=&quot;https://xkcd.com/1987/&quot; rel=&quot;nofollow noreferrer&quot;&gt;xkcd.com/1987&lt;/a&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7568091/john-frazer&quot; title=&quot;888 reputation&quot; class=&quot;comment-user&quot;&gt;John Frazer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment110708791_67631&quot;&gt;&lt;span title=&quot;2020-06-26 21:08:30Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 26, 2020 at 21:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@JohnFrazer it&apos;s been made worse by constant nagging of people who couldn&apos;t be bothered to read 2 paragraphs of documentation. Your XKCD isn&apos;t really relevant, as it shows what these kinds of people can achieve when trying things until something works. Also, just because there&apos;s a new way doesn&apos;t mean there&apos;s now &quot;two obvious ways&quot;. The old way is obvious for some cases, the new way introduces ease of use to other. That&apos;s what happens when you actually care about DevX.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2146491/b%c5%82a%c5%bcej-michalik&quot; title=&quot;3,767 reputation&quot; class=&quot;comment-user&quot;&gt;Błażej Michalik&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment115092160_67631&quot;&gt;&lt;span title=&quot;2020-12-02 00:13:47Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 2, 2020 at 0:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;And think that Java or even PHP (these days) have clear and simple way of splitting things in packages/namespaces and reuse it. It&apos;s a shock to see such pain in Python which adopted simplicity in every other aspect.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1087370/alex&quot; title=&quot;5,195 reputation&quot; class=&quot;comment-user&quot;&gt;Alex&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment116542438_67631&quot;&gt;&lt;span title=&quot;2021-01-27 07:46:37Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 27, 2021 at 7:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;If I knew the namespace - &apos;module.name&apos; - I would already use &lt;code&gt;__import__&lt;/code&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/55246/sridhar-ratnakumar&quot; title=&quot;76,551 reputation&quot; class=&quot;comment-user&quot;&gt;Sridhar Ratnakumar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment1084400_67692&quot;&gt;&lt;span title=&quot;2009-08-10 21:54:15Z, License: CC BY-SA 2.5&quot; class=&quot;relativetime-clean&quot;&gt;Aug 10, 2009 at 21:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@SridharRatnakumar the value of the first argument of &lt;code&gt;imp.load_source&lt;/code&gt; only sets the &lt;code&gt;.__name__&lt;/code&gt; of the returned module. it doesn&apos;t effect loading.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/388787/dan-d&quot; title=&quot;70,871 reputation&quot; class=&quot;comment-user&quot;&gt;Dan D.&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment10519574_67692&quot;&gt;&lt;span title=&quot;2011-12-14 04:51:24Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 14, 2011 at 4:51&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@DanD.  the first argument of &lt;code&gt;imp.load_source()&lt;/code&gt; determines the key of the new entry created in the &lt;code&gt;sys.modules&lt;/code&gt; dictionary, so the first argument does indeed affect loading.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/85360/brandon-rhodes&quot; title=&quot;76,969 reputation&quot; class=&quot;comment-user&quot;&gt;Brandon Rhodes&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment23046504_67692&quot;&gt;&lt;span title=&quot;2013-04-21 16:32:33Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 21, 2013 at 16:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@AXO and more to the point one wonders why something as simple and basic as this &lt;i&gt;has&lt;/i&gt; to be so complicated. It isn&apos;t in many many other languages.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/546218/rocky&quot; title=&quot;6,693 reputation&quot; class=&quot;comment-user&quot;&gt;rocky&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment62265603_67692&quot;&gt;&lt;span title=&quot;2016-05-22 17:04:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 22, 2016 at 17:04&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Mahesha999 Because importlib.import_module() does not allow you to import modules by filename, which is what the original question was about.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7779/sebastian-rittau&quot; title=&quot;19,173 reputation&quot; class=&quot;comment-user&quot;&gt;Sebastian Rittau&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment66792176_67692&quot;&gt;&lt;span title=&quot;2016-09-28 12:50:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 28, 2016 at 12:50&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;How do we use &lt;code&gt;sys.path.append&lt;/code&gt; to point to a single python file instead of a directory?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1224076/phani&quot; title=&quot;3,127 reputation&quot; class=&quot;comment-user&quot;&gt;Phani&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment31737849_129374&quot;&gt;&lt;span title=&quot;2014-01-13 17:46:21Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 13, 2014 at 17:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;:-)  Perhaps your question would be better suited as a StackOverflow question, not a comment on an answer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4766/daryl-spitzer&quot; title=&quot;134,649 reputation&quot; class=&quot;comment-user&quot;&gt;Daryl Spitzer&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46041493_129374&quot;&gt;&lt;span title=&quot;2015-03-06 00:12:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Mar 6, 2015 at 0:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;The python path can contain zip archives, &quot;eggs&quot; (a complex kind of zip archives), etc. Modules can be imported out of them. So the path elements are indeed &lt;i&gt;containers&lt;/i&gt; of files, but they are not necessarily directories.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/699305/alexis&quot; title=&quot;46,651 reputation&quot; class=&quot;comment-user&quot;&gt;alexis&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48075532_129374&quot;&gt;&lt;span title=&quot;2015-04-30 21:21:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 30, 2015 at 21:21&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Beware of the fact that Python caches import statements. In the rare case that you have two different folders sharing a single class name (classX), the approach of adding a path to sys.path, importing classX, removing the path and repeating for the reamaining paths won&apos;t work. Python will always load the class from the first path from its cache. In my case I aimed at creating a plugin system where all plugins implement a specific classX. I ended up using &lt;a href=&quot;http://stackoverflow.com/a/67692&quot;&gt;SourceFileLoader&lt;/a&gt;, note that its &lt;a href=&quot;http://bugs.python.org/issue21436&quot; rel=&quot;nofollow noreferrer&quot;&gt;deprecation is controversial&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/603003/comfreek&quot; title=&quot;28,260 reputation&quot; class=&quot;comment-user&quot;&gt;ComFreek&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment50424944_129374&quot;&gt;&lt;span title=&quot;2015-07-03 17:18:37Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 3, 2015 at 17:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note this approach allows the imported module to import other modules from the same dir, which modules often do, while the accepted answer&apos;s approach does not (at least on 3.7). &lt;code&gt;importlib.import_module(mod_name)&lt;/code&gt; can be used instead of the explicit import here if the module name isn&apos;t known at runtime I would add a &lt;code&gt;sys.path.pop()&lt;/code&gt; in the end, though, assuming the imported code doesn&apos;t try to import more modules as it is used.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/531158/eli-b&quot; title=&quot;163 reputation&quot; class=&quot;comment-user&quot;&gt;Eli_B&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98670569_129374&quot;&gt;&lt;span title=&quot;2019-05-06 21:45:47Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 6, 2019 at 21:45&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This &quot;temp&quot; solution is a great answer if you want to prod a project around in a jupyter notebook elsewhere.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4277212/fordy&quot; title=&quot;2,280 reputation&quot; class=&quot;comment-user&quot;&gt;fordy&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93564061_53311583&quot;&gt;&lt;span title=&quot;2018-11-16 17:20:29Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 16, 2018 at 17:20&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;But... it&apos;s dangerous tampering with the path&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1852977/shai-alon&quot; title=&quot;915 reputation&quot; class=&quot;comment-user&quot;&gt;Shai Alon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103862439_53311583&quot;&gt;&lt;span title=&quot;2019-11-10 15:56:00Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 10, 2019 at 15:56&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ShaiAlon You are adding paths, so no danger other than when you transfer codes from one computer to another, paths might get messed up. So, for package development, I only import local packages. Also, package names should be unique. If you are worried, use the temporary solution.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/7428659/miladiouss&quot; title=&quot;3,572 reputation&quot; class=&quot;comment-user&quot;&gt;Miladiouss&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103933213_53311583&quot;&gt;&lt;span title=&quot;2019-11-13 00:11:35Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 13, 2019 at 0:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Thanks a lot! This method enables relative imports between submodules. Great!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2356267/tebanep&quot; title=&quot;614 reputation&quot; class=&quot;comment-user&quot;&gt;tebanep&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103008313_50395128&quot;&gt;&lt;span title=&quot;2019-10-10 14:09:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 10, 2019 at 14:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer matches the documentation here: &lt;a href=&quot;https://docs.python.org/3/library/importlib.html#importing-programmatically&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs.python.org/3/library/&lt;/a&gt;.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1413201/tim-ludwinski&quot; title=&quot;2,418 reputation&quot; class=&quot;comment-user&quot;&gt;Tim Ludwinski&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment104714970_50395128&quot;&gt;&lt;span title=&quot;2019-12-09 16:08:24Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 9, 2019 at 16:08&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;but what is &lt;code&gt;mymodule&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/913098/gulzar&quot; title=&quot;17,796 reputation&quot; class=&quot;comment-user&quot;&gt;Gulzar&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment105778844_50395128&quot;&gt;&lt;span title=&quot;2020-01-20 10:02:45Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jan 20, 2020 at 10:02&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Gulzar, it is whatever name you&apos;d like to give your module, such that you can later do: &quot;from mymodule import myclass&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9413905/idodo&quot; title=&quot;1,172 reputation&quot; class=&quot;comment-user&quot;&gt;Idodo&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment106578889_50395128&quot;&gt;&lt;span title=&quot;2020-02-16 22:44:15Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Feb 16, 2020 at 22:44&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Though unconventional, if your package entry point is something other than &lt;code&gt;__init__.py&lt;/code&gt;, you can still import it as a package. Include &lt;code&gt;spec.submodule_search_locations = [os.path.dirname(MODULE_PATH)]&lt;/code&gt; after creating the spec. You can also treat a &lt;code&gt;__init__.py&lt;/code&gt; as a non-package (e.g. single module) by setting this value to &lt;code&gt;None&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/379572/azmisov&quot; title=&quot;5,451 reputation&quot; class=&quot;comment-user&quot;&gt;Azmisov&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114406597_50395128&quot;&gt;&lt;span title=&quot;2020-11-05 20:32:38Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 5, 2020 at 20:32&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I like this method but when I get the result of run_path its a dictionary which I cannot seem to access?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1945756/stephen-ellwood&quot; title=&quot;364 reputation&quot; class=&quot;comment-user&quot;&gt;Stephen Ellwood&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91491715_37339817&quot;&gt;&lt;span title=&quot;2018-09-11 09:00:37Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 11, 2018 at 9:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;What do you mean by &quot;cannot access&quot;? You can&apos;t import from it (that&apos;s why this is only a good option when import-style access isn&apos;t actually required), but the contents should be available via the regular dict API (&lt;code&gt;result[name]&lt;/code&gt;, &lt;code&gt;result.get(&apos;name&apos;, default_value)&lt;/code&gt;, etc)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/597742/ncoghlan&quot; title=&quot;38,074 reputation&quot; class=&quot;comment-user&quot;&gt;ncoghlan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment91559535_37339817&quot;&gt;&lt;span title=&quot;2018-09-13 03:16:14Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 13, 2018 at 3:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Maggyero The command line never goes through &lt;code&gt;runpy.run_path&lt;/code&gt;, but if a given path is a directory or zipfile, then it ends up delegating to &lt;code&gt;runpy.run_module&lt;/code&gt; for the &lt;code&gt;__main__&lt;/code&gt; execution. The duplicated logic for &quot;Is it a script, directory, or zipfile?&quot; isn&apos;t complicated enough to be worth delegating to Python code.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/597742/ncoghlan&quot; title=&quot;38,074 reputation&quot; class=&quot;comment-user&quot;&gt;ncoghlan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113181143_37339817&quot;&gt;&lt;span title=&quot;2020-09-22 07:39:15Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 22, 2020 at 7:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Also by looking at the &lt;a href=&quot;https://github.com/python/cpython/blob/v3.8.5/Modules/main.c#L280&quot; rel=&quot;nofollow noreferrer&quot;&gt;implementation&lt;/a&gt; of the C function &lt;code&gt;pymain_run_module&lt;/code&gt;, it seems that CPython delegates to the Python function &lt;code&gt;runpy._run_module_as_main&lt;/code&gt; instead of &lt;code&gt;runpy.run_module&lt;/code&gt;though if I understood correctly the only difference is that the first function executes the code in the built-in &lt;code&gt;__main__&lt;/code&gt; environment (cf. &lt;a href=&quot;https://github.com/python/cpython/blob/v3.8.5/Lib/runpy.py#L191&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;) while the second function executes it in a new environment?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2326961/maggyero&quot; title=&quot;4,750 reputation&quot; class=&quot;comment-user&quot;&gt;Maggyero&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment113184464_37339817&quot;&gt;&lt;span title=&quot;2020-09-22 09:33:44Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 22, 2020 at 9:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Maggyero Yep, that&apos;s the only difference. Originally it used the public function, but that turned out to interact badly with the interpreter&apos;s &lt;code&gt;-i&lt;/code&gt; option (which drops you into an interactive shell in the original &lt;code&gt;__main__&lt;/code&gt; module, so &lt;code&gt;-m&lt;/code&gt; running in a new module was inconvenient)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/597742/ncoghlan&quot; title=&quot;38,074 reputation&quot; class=&quot;comment-user&quot;&gt;ncoghlan&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment114106962_37339817&quot;&gt;&lt;span title=&quot;2020-10-26 07:10:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 26, 2020 at 7:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;That is not dynamically.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1852977/shai-alon&quot; title=&quot;915 reputation&quot; class=&quot;comment-user&quot;&gt;Shai Alon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103862689_67708&quot;&gt;&lt;span title=&quot;2019-11-10 16:10:42Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 10, 2019 at 16:10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I tried: config_file = &apos;setup-for-chats&apos;,     setup_file = get_setup_file(config_file + &quot;.py&quot;),     sys.path.append(os.path.dirname(os.path.expanduser(setup_file))),     import config_file  &amp;gt;&amp;gt; &quot;ImportError: No module named config_file&quot;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1852977/shai-alon&quot; title=&quot;915 reputation&quot; class=&quot;comment-user&quot;&gt;Shai Alon&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment103862799_67708&quot;&gt;&lt;span title=&quot;2019-11-10 16:17:40Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 10, 2019 at 16:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;... and &lt;code&gt;imp.load_dynamic(module_name, path_to_file)&lt;/code&gt; for DLLs&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/2961540/hekto&quot; title=&quot;3,617 reputation&quot; class=&quot;comment-user&quot;&gt;HEKTO&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment56381780_67693&quot;&gt;&lt;span title=&quot;2015-12-16 19:03:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 16, 2015 at 19:03&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;heads up that imp is deprecated now.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1812329/t1m0&quot; title=&quot;715 reputation&quot; class=&quot;comment-user&quot;&gt;t1m0&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment60530281_67693&quot;&gt;&lt;span title=&quot;2016-04-06 18:11:38Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 6, 2016 at 18:11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;B/c sys.path[0] = xy overwrites the first path item while path[0:0] =xy is equivalent to path.insert(0, xy)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/675646/dom0&quot; title=&quot;7,188 reputation&quot; class=&quot;comment-user&quot;&gt;dom0&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18304526_67715&quot;&gt;&lt;span title=&quot;2012-11-15 14:16:10Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 15, 2012 at 14:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;hm the path.insert worked for me but the [0:0] trick did not.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/132408/jsh&quot; title=&quot;1,979 reputation&quot; class=&quot;comment-user&quot;&gt;jsh&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment28215149_67715&quot;&gt;&lt;span title=&quot;2013-09-30 03:18:05Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 30, 2013 at 3:18&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;sys.path[0:0] = [&apos;/foo&apos;]&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/244173/kevin-edwards&quot; title=&quot;340 reputation&quot; class=&quot;comment-user&quot;&gt;Kevin Edwards&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment46969429_67715&quot;&gt;&lt;span title=&quot;2015-04-01 17:00:07Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Apr 1, 2015 at 17:00&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;&lt;code&gt;Explicit is better than implicit.&lt;/code&gt; So why not &lt;code&gt;sys.path.insert(0, ...)&lt;/code&gt; instead of &lt;code&gt;sys.path[0:0]&lt;/code&gt;?&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3459910/winklerrr&quot; title=&quot;9,863 reputation&quot; class=&quot;comment-user&quot;&gt;winklerrr&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment98722330_67715&quot;&gt;&lt;span title=&quot;2019-05-08 11:54:01Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;May 8, 2019 at 11:54&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@dom0 Just go with &lt;code&gt;sys.path.append(...)&lt;/code&gt; then. It&apos;s clearer.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/9282844/guimoute&quot; title=&quot;3,381 reputation&quot; class=&quot;comment-user&quot;&gt;Guimoute&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment104016922_67715&quot;&gt;&lt;span title=&quot;2019-11-15 10:05:32Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 15, 2019 at 10:05&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This answer worked for me where &lt;code&gt;load_source&lt;/code&gt; did not because it imports the script and provides the script access to the modules and globals at the time of importing.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1406888/klik&quot; title=&quot;1,689 reputation&quot; class=&quot;comment-user&quot;&gt;Klik&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment81839606_37611448&quot;&gt;&lt;span title=&quot;2017-11-22 19:13:12Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 22, 2017 at 19:13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Note that the behavior of this answer is &lt;b&gt;different&lt;/b&gt; from importing a module, as for a module (imported the normal way or not) the &quot;global&quot; scope of the code is &lt;i&gt;the module object&lt;/i&gt;, while for this answer it&apos;s the globals scope of the called object. (although this answer can be modified to change the scope too, any dictionary can be passed in as &lt;code&gt;globals&lt;/code&gt; and &lt;code&gt;locals&lt;/code&gt;)&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5267751/user202729&quot; title=&quot;2,832 reputation&quot; class=&quot;comment-user&quot;&gt;user202729&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment123187919_37611448&quot;&gt;&lt;span title=&quot;2021-10-24 01:09:41Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 24, 2021 at 1:09&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;Why write 14 lines of buggy code when this is already addressed by the standard library? You haven&apos;t done error checking on format or content of full_path_to_module or the os.whatever operations; and using a catch-all &lt;code&gt;except:&lt;/code&gt; clause is rarely a good idea.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/763269/chris-johnson&quot; title=&quot;19,152 reputation&quot; class=&quot;comment-user&quot;&gt;Chris Johnson&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment24547758_68628&quot;&gt;&lt;span title=&quot;2013-06-07 19:17:48Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 7, 2013 at 19:17&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;You should use more &quot;try-finally&quot;s in here. E.g. &lt;code&gt;save_cwd = os.getcwd()&lt;/code&gt; &lt;code&gt;try: &lt;/code&gt; &lt;code&gt;finally: os.chdir(save_cwd)&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/416224/kay&quot; title=&quot;24,556 reputation&quot; class=&quot;comment-user&quot;&gt;kay&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment40635187_68628&quot;&gt;&lt;span title=&quot;2014-09-21 01:33:44Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Sep 21, 2014 at 1:33&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@ChrisJohnson &lt;code&gt;this is already addressed by the standard library&lt;/code&gt; yeah, but python has nasty habit of not being backward-compatible... as the checked answer says there&apos;re 2 different ways before and after 3.3. In that case I&apos;d rather like to write my own universal function than check version on the fly. And yes, maybe this code isn&apos;t too well error-protected, but it shows an idea (which is os.chdir(), I haven&apos;t though about it), basing on which I can write a better code. Hence +1.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1425153/sushi271&quot; title=&quot;534 reputation&quot; class=&quot;comment-user&quot;&gt;Sushi271&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment48614012_68628&quot;&gt;&lt;span title=&quot;2015-05-15 10:27:14Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;May 15, 2015 at 10:27&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 3 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;It would be cool if this actually returned the module.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/474563/pithikos&quot; title=&quot;17,072 reputation&quot; class=&quot;comment-user&quot;&gt;Pithikos&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment111715104_68628&quot;&gt;&lt;span title=&quot;2020-07-30 14:41:17Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 30, 2020 at 14:41&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;os.chdir ? (minimal characters to approve comment).&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/212044/ychaouche&quot; title=&quot;4,611 reputation&quot; class=&quot;comment-user&quot;&gt;ychaouche&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment17440847_6284270&quot;&gt;&lt;span title=&quot;2012-10-14 10:46:53Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Oct 14, 2012 at 10:46&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;I&apos;ve spent all day troubleshooting an import bug in a pyinstaller generated exe. In the end this is the only thing that worked for me. Thank you so much for making this!&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/3439096/frakman1&quot; title=&quot;772 reputation&quot; class=&quot;comment-user&quot;&gt;frakman1&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment93963321_6284270&quot;&gt;&lt;span title=&quot;2018-11-29 22:12:20Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Nov 29, 2018 at 22:12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This way you are modifying the &lt;code&gt;sys.path&lt;/code&gt;, which does not fit every use case.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1394590/bgusach&quot; title=&quot;13,610 reputation&quot; class=&quot;comment-user&quot;&gt;bgusach&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment89821385_50509034&quot;&gt;&lt;span title=&quot;2018-07-19 14:26:26Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 19, 2018 at 14:26&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@bgusach This may be true, but it is also desirable in some cases (adding a path to sys.path simplifies things when importing more than one module from a single package). At any rate, if this not desirable, one can immediately afterwards do &lt;code&gt;sys.path.pop()&lt;/code&gt;&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/4055338/ataxias&quot; title=&quot;920 reputation&quot; class=&quot;comment-user&quot;&gt;Ataxias&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment89864145_50509034&quot;&gt;&lt;span title=&quot;2018-07-20 16:38:21Z, License: CC BY-SA 4.0&quot; class=&quot;relativetime-clean&quot;&gt;Jul 20, 2018 at 16:38&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;A more general way to cut the extension out is: &lt;code&gt;name, ext = os.path.splitext(os.path.basename(infile))&lt;/code&gt;. Your method works because the previous restriction to .py extension. Also, you should probably import the module to some variable/dictionary entry.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1157317/renesac&quot; title=&quot;521 reputation&quot; class=&quot;comment-user&quot;&gt;ReneSac&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment18886615_8721254&quot;&gt;&lt;span title=&quot;2012-12-06 13:16:36Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Dec 6, 2012 at 13:16&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 2 times&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;This is the hack I used, and it has caused me some problems.  One of the more painful ones was that IDEA has an issue where it doesn&apos;t pickup altered code from within the link, but yet attempts to save what it thinks is there.  A race condition where the last to save is what sticks... I lost a decent amount of work because of this.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/1204049/gripp&quot; title=&quot;166 reputation&quot; class=&quot;comment-user&quot;&gt;Gripp&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment49800738_26995106&quot;&gt;&lt;span title=&quot;2015-06-16 23:23:16Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Jun 16, 2015 at 23:23&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        ","\n            &lt;div class=&quot;comment-body js-comment-edit-hide&quot;&gt;\n                \n                &lt;span class=&quot;comment-copy&quot;&gt;@Gripp not sure if I am understanding your issue, but I frequently (almost exclusively) edit my scripts on a remote server from my desktop via SFTP with a client like CyberDuck, and in that case as well it is a bad idea to try and edit the symlinked file, instead its much safer to edit the original file. You can catch some of these issues by using &lt;code&gt;git&lt;/code&gt; and checking your &lt;code&gt;git status&lt;/code&gt; to verify that your changes to the script are actually making it back to the source document and not getting lost in the ether.&lt;/span&gt;\n                \n              &lt;div class=&quot;d-inline-flex ai-center&quot;&gt;\n&amp;nbsp;&lt;a href=&quot;/users/5359531/user5359531&quot; title=&quot;3,005 reputation&quot; class=&quot;comment-user&quot;&gt;user5359531&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;span class=&quot;comment-date&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;comment-link&quot; href=&quot;#comment77853760_26995106&quot;&gt;&lt;span title=&quot;2017-08-01 19:39:49Z, License: CC BY-SA 3.0&quot; class=&quot;relativetime-clean&quot;&gt;Aug 1, 2017 at 19:39&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;\n                        &lt;span title=&quot;this comment was edited 1 time&quot;&gt;\n                            &lt;svg aria-hidden=&quot;true&quot; class=&quot;va-text-bottom o50 svg-icon iconPencilSm&quot; width=&quot;14&quot; height=&quot;14&quot; viewBox=&quot;0 0 14 14&quot;&gt;&lt;path d=&quot;m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                        &lt;/span&gt;\n            &lt;/div&gt;\n        "],"id":482,"title":"How do I import a module given the full path?","content":"\n                \n&lt;p&gt;How do I load a Python module given its full path?&lt;/p&gt;\n&lt;p&gt;Note that the file can be anywhere in the filesystem.&lt;/p&gt;\n    ","slug":"how-do-i-import-a-module-given-the-full-path-1657388139965","postType":"QUESTION","createdAt":"2022-07-09T17:35:39.000Z","updatedAt":"2022-07-09T17:35:39.000Z","tags":[{"id":2433,"name":"python-import","slug":"python-import","createdAt":"2022-07-09T17:35:40.000Z","updatedAt":"2022-07-09T17:35:40.000Z","Questions_Tags":{"questionId":482,"tagId":2433}}]}},"__N_SSG":true}