{"pageProps":{"data":{"answer":["\n&lt;p&gt;First of all you should know which statements are affected by the automatic semicolon insertion (also known as ASI for brevity):&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;empty statement&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;var&lt;/code&gt; statement&lt;/li&gt;\n&lt;li&gt;expression statement&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;do-while&lt;/code&gt; statement&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;continue&lt;/code&gt; statement&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;break&lt;/code&gt; statement&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;return&lt;/code&gt; statement&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;throw&lt;/code&gt; statement&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The concrete rules of ASI, are described in the specification &lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-rules-of-automatic-semicolon-insertion&quot; rel=&quot;noreferrer&quot;&gt;ยง11.9.1 Rules of Automatic Semicolon Insertion&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Three cases are described:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;When an offending token is encountered that is not allowed by the grammar, a semicolon is inserted before it if:&lt;/li&gt;\n&lt;/ol&gt;\n&lt;ul&gt;\n&lt;li&gt;The token is separated from the previous token by at least one &lt;code&gt;LineTerminator&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;The token is &lt;code&gt;}&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;em&gt;e.g.&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; } &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is transformed to&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    ;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ;} &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;NumericLiteral&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; meets the first condition, the following token is a line terminator.&lt;br&gt;\nThe &lt;code&gt;2&lt;/code&gt; meets the second condition, the following token is &lt;code&gt;}&lt;/code&gt;.&lt;/p&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;When the end of the input stream of tokens is encountered and the parser is unable to parse the input token stream as a single complete Program, then a semicolon is automatically inserted at the end of the input stream.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;em&gt;e.g.&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    a = b\n    ++c\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is transformed to:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    a = b;\n    ++c;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;This case occurs when a token is allowed by some production of the grammar, but the production is a &lt;em&gt;restricted production&lt;/em&gt;, a semicolon is automatically inserted before the restricted token.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Restricted productions:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-title class_&quot;&gt;UpdateExpression&lt;/span&gt; :\n        &lt;span class=&quot;hljs-title class_&quot;&gt;LeftHandSideExpression&lt;/span&gt; [no &lt;span class=&quot;hljs-title class_&quot;&gt;LineTerminator&lt;/span&gt; here] ++\n        &lt;span class=&quot;hljs-title class_&quot;&gt;LeftHandSideExpression&lt;/span&gt; [no &lt;span class=&quot;hljs-title class_&quot;&gt;LineTerminator&lt;/span&gt; here] --\n    \n    &lt;span class=&quot;hljs-title class_&quot;&gt;ContinueStatement&lt;/span&gt; :\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt; ;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt; [no &lt;span class=&quot;hljs-title class_&quot;&gt;LineTerminator&lt;/span&gt; here] &lt;span class=&quot;hljs-title class_&quot;&gt;LabelIdentifier&lt;/span&gt; ;\n    \n    &lt;span class=&quot;hljs-title class_&quot;&gt;BreakStatement&lt;/span&gt; :\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt; ;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt; [no &lt;span class=&quot;hljs-title class_&quot;&gt;LineTerminator&lt;/span&gt; here] &lt;span class=&quot;hljs-title class_&quot;&gt;LabelIdentifier&lt;/span&gt; ;\n    \n    &lt;span class=&quot;hljs-title class_&quot;&gt;ReturnStatement&lt;/span&gt; :\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [no &lt;span class=&quot;hljs-title class_&quot;&gt;LineTerminator&lt;/span&gt; here] &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt; ;\n    \n    &lt;span class=&quot;hljs-title class_&quot;&gt;ThrowStatement&lt;/span&gt; :\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; [no &lt;span class=&quot;hljs-title class_&quot;&gt;LineTerminator&lt;/span&gt; here] &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt; ; \n\n    &lt;span class=&quot;hljs-title class_&quot;&gt;ArrowFunction&lt;/span&gt; :\n        &lt;span class=&quot;hljs-title class_&quot;&gt;ArrowParameters&lt;/span&gt; [no &lt;span class=&quot;hljs-title class_&quot;&gt;LineTerminator&lt;/span&gt; here] =&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ConciseBody&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-title class_&quot;&gt;YieldExpression&lt;/span&gt; :\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; [no &lt;span class=&quot;hljs-title class_&quot;&gt;LineTerminator&lt;/span&gt; here] * &lt;span class=&quot;hljs-title class_&quot;&gt;AssignmentExpression&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; [no &lt;span class=&quot;hljs-title class_&quot;&gt;LineTerminator&lt;/span&gt; here] &lt;span class=&quot;hljs-title class_&quot;&gt;AssignmentExpression&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The classic example, with the &lt;code&gt;ReturnStatement&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; \n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;something&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is transformed to&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;something&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I could not understand those 3 rules in the specs too well -- hope to have something that is more plain English -- but here is what I gathered from JavaScript: The Definitive Guide, 6th Edition, David Flanagan, O&apos;Reilly, 2011:&lt;/p&gt;\n&lt;p&gt;Quote:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;JavaScript does not treat every line break as a semicolon: it usually treats line breaks as semicolons only if it cant parse the code without the semicolons.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Another quote: for the code&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a\na\n=\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;JavaScript does not treat the second line break as a semicolon because it can continue parsing the longer statement a = 3;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;and:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;two exceptions to the general rule that JavaScript interprets line breaks as semicolons when it cannot parse the second line as a continuation of the statement on the first line. The first exception involves the return, break, and continue statements&lt;/p&gt;\n&lt;p&gt;... If a line break appears after any of these words ... JavaScript will always interpret that line break as a semicolon.&lt;/p&gt;\n&lt;p&gt;... The second exception involves the ++ and  operators ... If you want to use either of these operators as postfix operators, they must appear on the same line as the expression they apply to. Otherwise, the line break will be treated as a semicolon, and the ++ or -- will be parsed as a prefix operator applied to the code that follows. Consider this code, for example:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;x \n++ \ny\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;It is parsed as &lt;code&gt;x; ++y;&lt;/code&gt;, not as &lt;code&gt;x++; y&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So I think to simplify it, that means:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;In general, JavaScript will treat it as continuation of code as long as it makes sense -- except 2 cases:  (1) after some keywords like &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, and (2) if it sees &lt;code&gt;++&lt;/code&gt; or &lt;code&gt;--&lt;/code&gt; on a new line, then it will add the &lt;code&gt;;&lt;/code&gt; at the end of the previous line.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The part about &quot;treat it as continuation of code as long as it makes sense&quot; makes it feel like regular expression&apos;s greedy matching.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;With the above said, that means for &lt;code&gt;return&lt;/code&gt; with a line break, the JavaScript interpreter will insert a &lt;code&gt;;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;(quoted again: If a line break appears after any of these words [such as &lt;code&gt;return&lt;/code&gt;] ... JavaScript will always interpret that line break as a semicolon)&lt;/p&gt;\n&lt;p&gt;and due to this reason, the classic example of&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n{ \n  &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;will not work as expected, because the JavaScript interpreter will treat it as:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;// returning nothing&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There has to be no line-break immediately after the &lt;code&gt;return&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; { \n  &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;for it to work properly.  And you may insert a &lt;code&gt;;&lt;/code&gt; yourself if you were to follow the rule of using a &lt;code&gt;;&lt;/code&gt; after any statement:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; { \n  &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Straight from the &lt;a href=&quot;http://WWW.ECMA-International.Org/publications/standards/Ecma-262.htm&quot; rel=&quot;noreferrer&quot;&gt;ECMA-262, Fifth Edition ECMAScript Specification&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h1&gt;7.9.1 Rules of Automatic Semicolon Insertion&lt;/h1&gt;\n  \n  &lt;p&gt;There are three basic rules of semicolon insertion:&lt;/p&gt;\n  \n  &lt;ol&gt;\n  &lt;li&gt;When, as the program is parsed from left to right, a token (called the &lt;em&gt;offending token&lt;/em&gt;) is encountered that is not allowed by any production of the grammar,  then a semicolon is automatically inserted before the offending token if one or more of the following conditions is true:\n  \n  &lt;ul&gt;\n  &lt;li&gt;The offending token is separated from the previous token by at least one &lt;code&gt;LineTerminator&lt;/code&gt;.&lt;/li&gt;\n  &lt;li&gt;The offending token is &lt;kbd&gt;}&lt;/kbd&gt;.&lt;/li&gt;\n  &lt;/ul&gt;&lt;/li&gt;\n  &lt;li&gt;When, as the program is parsed from left to right,  the end of the input stream of tokens is encountered and the parser is unable to parse the input token stream as a single complete ECMAScript &lt;code&gt;Program&lt;/code&gt;, then a semicolon is automatically inserted at the end of the input stream.&lt;/li&gt;\n  &lt;li&gt;When, as the program is parsed from left to right, a token is encountered that is allowed by some production of the grammar, but the production is a &lt;em&gt;restricted production&lt;/em&gt; and the token would be the first token for a terminal or nonterminal immediately following the annotation &quot;&lt;sub&gt;[no &lt;code&gt;LineTerminator&lt;/code&gt; here]&lt;/sub&gt;&quot; within the restricted production (and therefore such a token is called a restricted token), and the restricted token is separated from the previous token by at least one &lt;strong&gt;LineTerminator&lt;/strong&gt;, then a semicolon is automatically inserted before the restricted token.&lt;/li&gt;\n  &lt;/ol&gt;\n  \n  &lt;p&gt;However, there is an additional overriding condition on  the preceding rules: a semicolon is never inserted automatically if the semicolon would then be parsed as an empty statement or if that semicolon would become one of the two semicolons in the header of a &lt;kbd&gt;for&lt;/kbd&gt; statement (see 12.6.3).&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Regarding semicolon insertion and the var statement, beware forgetting the comma when using var but spanning multiple lines.  Somebody found this in my code yesterday:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; srcRecords = src.&lt;span class=&quot;hljs-property&quot;&gt;records&lt;/span&gt;\n        srcIds = [];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It ran but the effect was that the srcIds declaration/assignment was global because the local declaration with var on the previous line no longer applied as that statement was considered finished due to automatic semi-colon insertion.&lt;/p&gt;\n    ","\n&lt;p&gt;The most contextual description of JavaScript&apos;s &lt;a href=&quot;http://www.ecma-international.org/ecma-262/10.0/index.html#sec-automatic-semicolon-insertion&quot; rel=&quot;noreferrer&quot;&gt;Automatic Semicolon Insertion&lt;/a&gt; I have found comes from a book about &lt;a href=&quot;http://www.craftinginterpreters.com/scanning.html&quot; rel=&quot;noreferrer&quot;&gt;Crafting Interpreters&lt;/a&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;JavaScripts automatic semicolon insertion rule is the odd one. Where other languages assume most newlines are meaningful and only a few should be ignored in multi-line statements, JS assumes the opposite. It treats all of your newlines as meaningless whitespace unless it encounters a parse error. If it does, it goes back and tries turning the previous newline into a semicolon to get something grammatically valid.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;He goes on to describe it as you would &lt;a href=&quot;http://wiki.c2.com/?CodeSmell&quot; rel=&quot;noreferrer&quot;&gt;code smell&lt;/a&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This design note would turn into a design diatribe if I went into complete detail about how that even works, much less all the various ways that that is a bad idea. Its a mess. JavaScript is the only language I know where many style guides demand explicit semicolons after every statement even though the language theoretically lets you elide them.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Just to add,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; } &lt;span class=&quot;hljs-comment&quot;&gt;//this doesn&apos;t add a semicolon here.&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;aa&quot;&lt;/span&gt;);\n})()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;see this, &lt;a href=&quot;https://stackoverflow.com/questions/59208059/using-immediately-invoked-function-expressioniife&quot;&gt;using immediately invoked function expression(IIFE)&lt;/a&gt;&lt;/p&gt;\n    "],"id":272,"title":"What are the rules for JavaScript's automatic semicolon insertion (ASI)?","content":"\n                \n&lt;p&gt;Well, first I should probably ask if this is browser dependent.&lt;/p&gt;\n\n&lt;p&gt;I&apos;ve read that if an invalid token is found, but the section of code is valid until that invalid token, a semicolon is inserted before the token if it is preceded by a line break.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;However, the common example cited for bugs caused by semicolon insertion is:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n  _a+b;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;..which doesn&apos;t seem to follow this rule, since _a would be a valid token.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;On the other hand, breaking up call chains works as expected:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#myButton&apos;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;)});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Does anyone have a more in-depth description of the rules?&lt;/p&gt;\n    ","slug":"what-are-the-rules-for-javascript's-automatic-semicolon-insertion-(asi)-1657387472789","postType":"QUESTION","createdAt":"2022-07-09T17:24:32.000Z","updatedAt":"2022-07-09T17:24:32.000Z","tags":[{"id":1703,"name":"automatic-semicolon-insertion","slug":"automatic-semicolon-insertion","createdAt":"2022-07-09T17:24:32.000Z","updatedAt":"2022-07-09T17:24:32.000Z","Questions_Tags":{"questionId":272,"tagId":1703}}],"relatedQuestions":[{"title":"What are the rules for JavaScript's automatic semicolon insertion (ASI)?","slug":"what-are-the-rules-for-javascript's-automatic-semicolon-insertion-(asi)-1657387472789","tags":[{"name":"automatic-semicolon-insertion","Questions_Tags":{"questionId":272,"tagId":1703}}]}]},"randomQuestions":[{"title":"Efficiently convert rows to columns in sql server","slug":"efficiently-convert-rows-to-columns-in-sql-server-1657387919213"},{"title":"Convert one date format into another in PHP","slug":"convert-one-date-format-into-another-in-php-1657384566234"},{"title":"How can I fix 'android.os.NetworkOnMainThreadException'?","slug":"how-can-i-fix-'android.os.networkonmainthreadexception'-1657384454963"},{"title":"When to use LinkedList over ArrayList in Java?","slug":"when-to-use-linkedlist-over-arraylist-in-java-1657388107480"},{"title":"Why is using the JavaScript eval function a bad idea?","slug":"why-is-using-the-javascript-eval-function-a-bad-idea-1657387485165"},{"title":"Daylight saving time and time zone best practices [closed]","slug":"daylight-saving-time-and-time-zone-best-practices-closed-1657387973687"},{"title":"How do I generate random integers within a specific range in Java?","slug":"how-do-i-generate-random-integers-within-a-specific-range-in-java-1657385458888"},{"title":"When to use virtual destructors?","slug":"when-to-use-virtual-destructors-1657388152135"},{"title":"Reference - What does this regex mean?","slug":"reference-what-does-this-regex-mean-1657384291445"},{"title":"The definitive guide to form-based website authentication [closed]","slug":"the-definitive-guide-to-form-based-website-authentication-closed-1657388456475"},{"title":"What happens if you use the 32-bit int 0x80 Linux ABI in 64-bit code?","slug":"what-happens-if-you-use-the-32-bit-int-0x80-linux-abi-in-64-bit-code-1657388560485"},{"title":"Find object by id in an array of JavaScript objects","slug":"find-object-by-id-in-an-array-of-javascript-objects-1657387572087"},{"title":"Pandas Merging 101","slug":"pandas-merging-101-1657384447080"},{"title":"Can I bind an array to an IN() condition in a PDO query?","slug":"can-i-bind-an-array-to-an-in()-condition-in-a-pdo-query-1657388382858"},{"title":"What is the difference between single-quoted and double-quoted strings in PHP?","slug":"what-is-the-difference-between-single-quoted-and-double-quoted-strings-in-php-1657384624345"},{"title":"HTTP GET with request body","slug":"http-get-with-request-body-1657387379038"},{"title":"How to Sort a Multi-dimensional Array by Value","slug":"how-to-sort-a-multi-dimensional-array-by-value-1657387746110"},{"title":"How do I pass data between Activities in Android application?","slug":"how-do-i-pass-data-between-activities-in-android-application-1657384739839"},{"title":"Using async/await with a forEach loop","slug":"using-asyncawait-with-a-foreach-loop-1657384512667"},{"title":"Flatten an irregular list of lists","slug":"flatten-an-irregular-list-of-lists-1657387315571"}]},"__N_SSG":true}