{"pageProps":{"data":{"answer":["\n&lt;p&gt;Use this:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; oldArray = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newArray = oldArray.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;({newArray});&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Basically, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/a&gt; operation clones the array and returns a reference to a new array.&lt;/p&gt;\n&lt;h3&gt;Also note that:&lt;/h3&gt;\n&lt;p&gt;For references, strings and numbers (and not the actual object), &lt;strong&gt;&lt;code&gt;slice()&lt;/code&gt; copies object references into the new array.&lt;/strong&gt; Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.&lt;/p&gt;\n&lt;p&gt;Primitives such as strings and numbers are immutable, so changes to the string or number are impossible.&lt;/p&gt;\n    ","\n&lt;p&gt;In Javascript, deep-copy techniques depend on the elements in an array. Let&apos;s start there.&lt;/p&gt;\n&lt;h2&gt;Three types of elements&lt;/h2&gt;\n&lt;p&gt;Elements can be: literal values, literal structures, or prototypes.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Literal values (type1)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; booleanLiteral = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; numberLiteral = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; stringLiteral = &lt;span class=&quot;hljs-string&quot;&gt;&apos;true&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Literal structures (type2)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayLiteral = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; objectLiteral = {};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Prototypes (type3)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; booleanPrototype = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bool&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; numberPrototype = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; stringPrototype = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;true&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayPrototype = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; objectPrototype = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// or `new function () {}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;From these elements we can create three types of arrays.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 1) Array of literal-values (boolean, number, string) &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; type1 = [ &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; ];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2) Array of literal-structures (array, object)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; type2 = [ [], {} ];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 3) Array of prototype-objects (function)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; type3 = [ &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {} ];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Deep copy techniques depend on the three array types&lt;/h2&gt;\n&lt;p&gt;Based on the types of elements in the array, we can use various techniques to deep copy.&lt;/p&gt;\n&lt;h4&gt;Deep copy techniques&lt;/h4&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/UL33O.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/UL33O.png&quot; alt=&quot;Javascript deep copy techniques by element types&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;h4&gt;Benchmarks&lt;/h4&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.measurethat.net/Benchmarks/Show/17502/0/deep-copy-comparison&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.measurethat.net/Benchmarks/Show/17502/0/deep-copy-comparison&lt;/a&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Array of literal-values (type1)&lt;/strong&gt;&lt;br&gt;\nThe &lt;code&gt;[ ...myArray ]&lt;/code&gt;, &lt;code&gt;myArray.splice(0)&lt;/code&gt;, &lt;code&gt;myArray.slice()&lt;/code&gt;, and &lt;code&gt;myArray.concat()&lt;/code&gt; techniques can be used to deep copy arrays with literal values (boolean, number, and string) only; where &lt;code&gt;slice()&lt;/code&gt; has the highest performance in Chrome, and spread &lt;code&gt;...&lt;/code&gt; has the highest performance in Firefox.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Array of literal-values (type1) and literal-structures (type2)&lt;/strong&gt;&lt;br&gt;\nThe &lt;code&gt;JSON.parse(JSON.stringify(myArray))&lt;/code&gt; technique can be used to deep copy literal values (boolean, number, string) and literal structures (array, object), but not prototype objects.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;All arrays (type1, type2, type3)&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The &lt;a href=&quot;https://i.stack.imgur.com/UL33O.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;Lo-dash&lt;/a&gt; &lt;code&gt;cloneDeep(myArray)&lt;/code&gt; or &lt;a href=&quot;https://lodash.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery&lt;/a&gt; &lt;code&gt;extend(true, [], myArray)&lt;/code&gt; techniques can be used to deep-copy all array-types. Where the Lodash &lt;code&gt;cloneDeep()&lt;/code&gt; technique has the highest performance.&lt;/li&gt;\n&lt;li&gt;And for those who avoid third-party libraries, the custom function below will deep-copy all array-types, with lower performance than &lt;code&gt;cloneDeep()&lt;/code&gt; and higher performance than &lt;code&gt;extend(true)&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;aObject&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Prevent undefined objects&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// if (!aObject) return aObject;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; bObject = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(aObject) ? [] : {};\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; value;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; aObject) {\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Prevent self-references to parent object&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// if (Object.is(aObject[key], aObject)) continue;&lt;/span&gt;\n    \n    value = aObject[key];\n\n    bObject[key] = (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; value === &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) ? &lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;(value) : value;\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bObject;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;So to answer the question...&lt;/h2&gt;\n&lt;h4&gt;Question&lt;/h4&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = arr1;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;I realized that arr2 refers to the same array as arr1, rather than a new, independent array. How can I copy the array to get two independent arrays?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h4&gt;Answer&lt;/h4&gt;\n&lt;p&gt;Because &lt;code&gt;arr1&lt;/code&gt; is an array of literal values (boolean, number, or string), you can use any deep copy technique discussed above, where &lt;code&gt;slice()&lt;/code&gt; and spread &lt;code&gt;...&lt;/code&gt; have the highest performance.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;arr2 = arr1.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;();\narr2 = [...arr1];\narr2 = arr1.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\narr2 = arr1.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;();\narr2 = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(arr1));\narr2 = &lt;span class=&quot;hljs-title function_&quot;&gt;copy&lt;/span&gt;(arr1); &lt;span class=&quot;hljs-comment&quot;&gt;// Custom function needed, and provided above&lt;/span&gt;\narr2 = _.&lt;span class=&quot;hljs-title function_&quot;&gt;cloneDeep&lt;/span&gt;(arr1); &lt;span class=&quot;hljs-comment&quot;&gt;// Lo-dash.js needed&lt;/span&gt;\narr2 = jQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, [], arr1); &lt;span class=&quot;hljs-comment&quot;&gt;// jQuery.js needed&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use array spreads &lt;code&gt;...&lt;/code&gt; to copy arrays.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;const itemsCopy = [...items];&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Also if want to create a new array with the existing one being part of it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parts = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;shoulders&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;knees&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lyrics = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;head&apos;&lt;/span&gt;, ...parts, &lt;span class=&quot;hljs-string&quot;&gt;&apos;and&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;toes&apos;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Array spreads are now &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator#Browser_compatibility&quot; rel=&quot;noreferrer&quot;&gt;supported in all major browsers&lt;/a&gt; but if you need older support use typescript or babel and compile to ES5.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot; rel=&quot;noreferrer&quot;&gt;More info on spreads&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;No jQuery needed...  &lt;strong&gt;&lt;a href=&quot;http://jsfiddle.net/KBYvL/1/&quot; rel=&quot;noreferrer&quot;&gt;Working Example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = arr1.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This copys the array from the starting position &lt;code&gt;0&lt;/code&gt; through the end of the array.&lt;/p&gt;\n\n&lt;p&gt;It is important to note that it will work as expected for primitive types (string, number, etc.), and to also explain the expected behavior for reference types...&lt;/p&gt;\n\n&lt;p&gt;If you have an array of Reference types, say of type &lt;code&gt;Object&lt;/code&gt;.  The array &lt;strong&gt;will&lt;/strong&gt; be copied, but both of the arrays will contain references to the same &lt;code&gt;Object&lt;/code&gt;&apos;s.  So in this case it would seem like the array is copied by reference even though the array &lt;strong&gt;is actually copied.&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is how I&apos;ve done it after trying many approaches:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newArray = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(orgArray));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will create a new deep copy not related to the first one (not a shallow copy).&lt;/p&gt;\n\n&lt;p&gt;Also this obviously will not clone events and functions, but the good thing you can do it in one line, and it can be used for any kind of object (arrays, strings, numbers, objects ...)&lt;/p&gt;\n    ","\n&lt;p&gt;An alternative to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;slice&lt;/code&gt;&lt;/a&gt; is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;concat&lt;/code&gt;&lt;/a&gt;, which can be used in 2 ways. The first of these is perhaps more readable as the intended behaviour is very clear:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array2 = [].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(array1);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The second method is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array2 = array1.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Cohen (in the comments) pointed out that this latter method &lt;a href=&quot;https://jsperf.com/copy-simple-array&quot; rel=&quot;noreferrer&quot;&gt;has better performance&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The way this works is that the &lt;code&gt;concat&lt;/code&gt; method creates a new array consisting of the elements in the object on which it is called followed by the elements of any arrays passed to it as arguments. So when no arguments are passed, it simply copies the array.&lt;/p&gt;\n\n&lt;p&gt;Lee Penkman, also in the comments, points out that if there&apos;s a chance &lt;code&gt;array1&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, you can return an empty array as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array2 = [].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(array1 || []);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or, for the second method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array2 = (array1 || []).&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that you can also do this with &lt;code&gt;slice&lt;/code&gt;: &lt;code&gt;var array2 = (array1 || []).slice();&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Most of answers here works for &lt;em&gt;&lt;strong&gt;particular cases&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;If you don&apos;t care about deep/nested objects and props use (&lt;strong&gt;ES6&lt;/strong&gt;):&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;let clonedArray = [...array]&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;but if you want to do deep clone use this instead:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;let cloneArray = JSON.parse(JSON.stringify(array))&lt;/code&gt;*&lt;/p&gt;\n&lt;p&gt;*functions won&apos;t be preserved (serialized) while using stringify, you will get result without them.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;For lodash users:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;let clonedArray = _.clone(array)&lt;/code&gt; &lt;a href=&quot;https://lodash.com/docs/4.17.10#clone&quot; rel=&quot;noreferrer&quot; title=&quot;doc&quot;&gt;documentation&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;and&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;let clonedArray = _.cloneDeep(array)&lt;/code&gt; &lt;a href=&quot;https://lodash.com/docs/4.17.10#cloneDeep&quot; rel=&quot;noreferrer&quot; title=&quot;doc&quot;&gt;documentation&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I personally think &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&quot; rel=&quot;noreferrer&quot;&gt;Array.from&lt;/a&gt; is a more readable solution. By the way, just beware of its browser support.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// clone&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; x = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; y = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(x);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;({y});\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// deep clone&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt; = arr =&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(arr, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(item) ? &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(item) : item);\nx = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, [], [[]]];\ny = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(x);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;({y});&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Some of mentioned methods work well when working with simple data types like number or string, but when the array contains other objects these methods fail. When we try to pass any object from one array to another it is passed as a reference, not the object.&lt;/p&gt;\n\n&lt;p&gt;Add the following code in your JavaScript file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;clone&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newObj = (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;) ? [] : {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i == &lt;span class=&quot;hljs-string&quot;&gt;&apos;clone&apos;&lt;/span&gt;) \n            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) {\n            newObj[i] = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i].&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;();\n        } \n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; \n            newObj[i] = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i]\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newObj;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And simply use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;val_1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;val_2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;val_3&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = arr1.&lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will work.&lt;/p&gt;\n    ","\n&lt;p&gt;From ES2015,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = [...arr1];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you are in an environment of &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#Harmony.2C_6th_Edition&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript 6&lt;/a&gt;, using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot; rel=&quot;noreferrer&quot;&gt;Spread Operator&lt;/a&gt; you could do it this way:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = [...arr1]; &lt;span class=&quot;hljs-comment&quot;&gt;//copy arr1&lt;/span&gt;\narr2.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr1)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr2)&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.wzvang.com/snippet/ignore_this_file.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;h1&gt;Primitive values are always pass by its value (copied). Compound values however are passed by reference.&lt;/h1&gt;\n\n&lt;p&gt;So how do we copy this arr? &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt; Copy an Array in ES6 &lt;/h1&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arrCopy = [...arr]; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt; Copy n Array in ES5 &lt;/h1&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arrCopy = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(); \n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arrCopy = [].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(arr);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt; Why `let arrCopy = arr` is not passing by value?&lt;/h1&gt;\n\n&lt;p&gt;Passing one varible to another on Compound values such as Object/Array behave difrently. Using asign operator on copand values we pass reference to an object. This is why the value of both arrays are changing when removing/adding arr elements.&lt;/p&gt;\n\n&lt;h1&gt;Exceptions: &lt;/h1&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;arrCopy[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;adding new value this way will unreference&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When you assign a new value to the variable, you are changing the reference itself and it doesnt affect the original Object/Array. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/javascript-reference-and-copy-variables-b0103074fdf0&quot; rel=&quot;noreferrer&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Adding to the solution of &lt;strong&gt;array.slice();&lt;/strong&gt; be aware that if you have &lt;strong&gt;multidimensional array&lt;/strong&gt; sub-arrays will be copied by references.\nWhat you can do is to loop and slice() each sub-array individually  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;();\n\narr2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arrCpy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arrSrc, arrDis&lt;/span&gt;){\n &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(elm &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arrSrc){\n  arrDis.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(arrSrc[elm].&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;());\n}\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr3=[];\n&lt;span class=&quot;hljs-title function_&quot;&gt;arrCpy&lt;/span&gt;(arr,arr3);\n\narr3[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;77&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr3[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;same things goes to array of objects, they will be copied by reference, you have to copy them manually&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can do any one of the following to make a copy of an array.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(a); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;OR&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; b = [...a];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;OR&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(...a); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;OR&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; b = a.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;OR&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; b = a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; e);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, if i change a,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, a is [1,2,3,5] but b is still [1,2,3] as it has different reference.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;But i think, in all the methods above&lt;/strong&gt; &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&quot; rel=&quot;noreferrer&quot;&gt;Array.from&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;is better and made mainly to copy an array.&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I would personally prefer this way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;( originalObject ));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You must use best practice for this question when there are a lot of answers.&lt;/p&gt;\n&lt;p&gt;I recommend to you use  array spreads  to copy arrays.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;var arr1 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;var arr2 = [arr1];&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As we know in Javascript &lt;strong&gt;arrays&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt; are by reference, but what ways we can do copy the array without changing the original array later one? &lt;/p&gt;\n\n&lt;p&gt;Here are few ways to do it:&lt;/p&gt;\n\n&lt;p&gt;Imagine we have this array in your code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;1) Looping through the array in a function and return a new array, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;newArr&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, res = [];\n      &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt;arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;){\n       res.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(arr[i]);\n        i++;\n       }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res;\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;2) Using slice method, slice is for slicing part of the array, it will slice some part of your array without touching the original, in the slice, if don&apos;t specify the start and end of the array, it will slice the whole array and basically make a full copy of the array, so we can easily say:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// make a copy of the original array&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;3) Also contact method, this is for merging two array, but we can just specify one of arrays and then this basically make a copy of the values in the new contacted array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;4) Also stringify and parse method, it&apos;s not recommended, but can be an easy way to copy Array and Objects:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(arr));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;5) Array.from method, this is not widely supported, before use check the support in different browsers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr2 = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(arr);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;6) ECMA6 way, also not fully supported, but babelJs can help you if you want to transpile:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr2 = [...arr];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Dan, no need to use fancy tricks. All you need to do is make copy of arr1 by doing this.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(arr1);\n\narr2.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// Now, arr2 = [[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],&apos;d&apos;]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;arr1:&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr1);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;arr2:&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr2);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Following did the trick:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr3 = [...arr1];\narr3.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// Now, arr3 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;];&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;arr3:&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr3);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Now &lt;code&gt;arr1&lt;/code&gt; and &lt;code&gt;arr2&lt;/code&gt; are two different array variables stored in separate stacks.\n&lt;a href=&quot;https://jsfiddle.net/wm67wuzo/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Check this out on jsfiddle&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In my particular case I needed to ensure the array remained intact so this worked for me:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Empty array&lt;/span&gt;\narr1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Add items from source array to target array&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr2.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n    arr1.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(arr2[i]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Make copy of multidimensional array/object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepCopy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(obj) === &lt;span class=&quot;hljs-string&quot;&gt;&apos;[object Array]&apos;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; out = [], i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = obj.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( ; i &amp;lt; len; i++ ) {\n         out[i] = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;callee&lt;/span&gt;(obj[i]);\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; out;\n   }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; out = {}, i;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj ) {\n         out[i] = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;callee&lt;/span&gt;(obj[i]);\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; out;\n   }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Thanks to James Padolsey for this function.&lt;/p&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;http://james.padolsey.com/javascript/deep-copying-of-objects-and-arrays/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If your array contains elements of the &lt;strong&gt;primitive data type&lt;/strong&gt; such as &lt;strong&gt;int, char, or string etc&lt;/strong&gt; then you can user one of those methods which returns a copy of the original array such as .slice() or .map() or spread operator(thanks to ES6).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;new_array = old_array.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;new_array = old_array.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem&lt;/span&gt;) =&amp;gt;&lt;/span&gt; elem)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; new_array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(...old_array);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;BUT&lt;/strong&gt; if your array contains &lt;strong&gt;complex elements&lt;/strong&gt; such as objects(or arrays) or more &lt;strong&gt;nested objects&lt;/strong&gt;, then, you will have to make sure that you are making a copy of all the elements from the top level to the last level else reference of the inner objects will be used and that means changing values in object_elements in new_array will still affect the old_array. You can call this method of copying at each level as making a &lt;strong&gt;DEEP COPY&lt;/strong&gt;\nof the old_array.&lt;/p&gt;\n\n&lt;p&gt;For deep copying, you can use the above-mentioned methods for primitive data types at each level depending upon the type of data or you can use this &lt;strong&gt;costly method(mentioned below)&lt;/strong&gt; for making a deep copy without doing much work.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; new_array = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(old_array));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are a lot of other methods out there which you can use depending on your requirements. I have mentioned only some of those for giving a general idea of what happens when we try to copy an array into the other &lt;strong&gt;by value&lt;/strong&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to make a new copy of an object or array, you must explicitly copy the properties of the object or the elements of the array, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr1.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n   arr2[i] = arr1[i];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can search for more information on Google about immutable primitive values and mutable object references.&lt;/p&gt;\n    ","\n&lt;p&gt;You could use ES6 with spread Opeartor, its simpler.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;arr2 = [...arr1];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are limitations..check  docs &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spread syntax @ mozilla&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;When we want to copy an array using the assignment operator ( &lt;code&gt;=&lt;/code&gt; ) it doesn&apos;t create a copy it merely copies the pointer/reference to the array. For example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; oldArr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArr = oldArr;  &lt;span class=&quot;hljs-comment&quot;&gt;// now oldArr points to the same place in memory &lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(oldArr === newArr);  &lt;span class=&quot;hljs-comment&quot;&gt;// Points to the same place in memory thus is true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; copy = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(copy === newArr);  &lt;span class=&quot;hljs-comment&quot;&gt;// Doesn&apos;t point to the same place in memory and thus is false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Often when we transform data we want to keep our initial datastructure (e.g. Array) intact. We do this by making a exact copy of our array so this one can be transformed while the initial one stays intact.&lt;/p&gt;\n\n&lt;h2&gt;Ways of copying an array:&lt;/h2&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; oldArr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Uses the spread operator to spread out old values into the new array literal&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArr1 = [...oldArr];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Slice with no arguments returns the newly copied Array&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArr2 = oldArr.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Map applies the callback to every element in the array and returns a new array&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArr3 = oldArr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;) =&amp;gt;&lt;/span&gt; el);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Concat is used to merge arrays and returns a new array. Concat with no args copies an array&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArr4 = oldArr.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Object.assign can be used to transfer all the properties into a new array literal&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArr5 = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;([], oldArr);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Creating via the Array constructor using the new keyword&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArr6 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(...oldArr);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// For loop&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;base&lt;/span&gt;) {\n\t&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArray = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; base.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n\t    newArray[i] = base[i];\n\t}\n\t&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newArray;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArr7 = &lt;span class=&quot;hljs-title function_&quot;&gt;clone&lt;/span&gt;(oldArr);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newArr1, newArr2, newArr3, newArr4, newArr5, newArr6, newArr7);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h2&gt;Be careful when arrays or objects are nested!:&lt;/h2&gt;\n\n&lt;p&gt;When arrays are nested the values are copied by reference. Here is an example of how this could lead to issues:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr2 = [...arr1];\n\narr2[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// we change arr2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr1);  &lt;span class=&quot;hljs-comment&quot;&gt;// arr1 is also changed because the array inside arr1 was copied by reference&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;So don&apos;t use these methods when there are objects or arrays inside your array you want to copy. i.e. Use these methods on arrays of primitives only. &lt;/p&gt;\n\n&lt;p&gt;If you do want to deepclone a javascript array use &lt;code&gt;JSON.parse&lt;/code&gt; in conjunction with &lt;code&gt;JSON.stringify&lt;/code&gt;, like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr2 = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(arr1)) ;\n\narr2[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr1);  &lt;span class=&quot;hljs-comment&quot;&gt;// now I&apos;m not modified because I&apos;m a deep clone&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h2&gt;Performance of copying:&lt;/h2&gt;\n\n&lt;p&gt;So which one do we choose for optimal performance. It turns out that the most verbose method, the &lt;code&gt;for&lt;/code&gt; loop has the highest performance. Use the &lt;code&gt;for&lt;/code&gt; loop for really CPU intensive copying (large/many arrays). &lt;/p&gt;\n\n&lt;p&gt;After that the &lt;code&gt;.slice()&lt;/code&gt; method also has decent performance and is also less verbose and easier for the programmer to implement. I suggest to use &lt;code&gt;.slice()&lt;/code&gt; for your everyday copying of arrays which aren&apos;t very CPU intensive. Also avoid using the &lt;code&gt;JSON.parse(JSON.stringify(arr))&lt;/code&gt; (lots of overhead) if no deep clone is required and performance is an issue.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.codefellows.org/blog/speed-alley-the-fastest-way-to-copy-an-array/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Source performance test&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;var arr2 = arr1.slice(0);&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This way &lt;strong&gt;just&lt;/strong&gt; work for &lt;strong&gt;simple Arrays&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;If you have &lt;em&gt;&lt;strong&gt;Complex&lt;/strong&gt;&lt;/em&gt; Array like &lt;em&gt;array of Objects&lt;/em&gt; then you must use another solutions like:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arr2 = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(arr1)); \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For example, we have an array of objects that each cell have another &lt;em&gt;array field&lt;/em&gt; in its object ... in this situation if we use &lt;strong&gt;slice&lt;/strong&gt; method then the array fields will copy &lt;em&gt;&lt;strong&gt;by Ref&lt;/strong&gt;&lt;/em&gt; and that&apos;s mean these fields &lt;em&gt;updates&lt;/em&gt; will &lt;em&gt;affect&lt;/em&gt; on orginal array same element and fields.&lt;/p&gt;\n    ","\n&lt;p&gt;Using jQuery deep copy could be made as following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = $.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, [], arr1);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can also use ES6 spread operator to copy Array&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr=[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copyArr=[...arr];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here are few more way to copy:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayCopy1 = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;(array);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayCopy2 = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;([], array);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayCopy3 = array.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; i);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayCopy4 = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;of&lt;/span&gt;(...array );&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For ES6 array containing objects&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;cloneArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({ ...x }));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Quick Examples:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;If elements in the array are &lt;strong&gt;primitive types&lt;/strong&gt; (string, number, etc.)&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-comment&quot;&gt;// arr1 and arr2 are independent and primitive elements are stored in &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// different places in the memory&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = arr1.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(); \narr2.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr1); &lt;span class=&quot;hljs-comment&quot;&gt;// [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr2); &lt;span class=&quot;hljs-comment&quot;&gt;// [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;If elements in the array are &lt;strong&gt;object literals, another array ({}, [])&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr1 = [{ &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;}, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]];\n&lt;span class=&quot;hljs-comment&quot;&gt;// arr1 and arr2 are independent and reference&apos;s/addresses are stored in different&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// places in the memory. But those reference&apos;s/addresses points to some common place&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// in the memory.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = arr1.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(); \narr2.&lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;();      &lt;span class=&quot;hljs-comment&quot;&gt;// OK - don&apos;t affect arr1 bcos only the address in the arr2 is&lt;/span&gt;\n                 &lt;span class=&quot;hljs-comment&quot;&gt;// deleted not the data pointed by that address&lt;/span&gt;\narr2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// not OK - affect arr1 bcos changes made in the common area &lt;/span&gt;\n                 &lt;span class=&quot;hljs-comment&quot;&gt;// pointed by the addresses in both arr1 and arr2&lt;/span&gt;\narr2[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;;\t &lt;span class=&quot;hljs-comment&quot;&gt;// not OK - same above reason&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr1); &lt;span class=&quot;hljs-comment&quot;&gt;// [ { x: &apos;z&apos;, y: &apos;b&apos; }, [ 9, 2 ], [ 3, 4 ] ]&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr2); &lt;span class=&quot;hljs-comment&quot;&gt;// [ { x: &apos;z&apos;, y: &apos;b&apos; }, [ 9, 2 ] ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;&lt;strong&gt;Solution for 2&lt;/strong&gt;: Deep Copy by element by element&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr1 = [{ &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;}, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]];\narr2 = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(arr1));\narr2.&lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;();\t  &lt;span class=&quot;hljs-comment&quot;&gt;// OK - don&apos;t affect arr1&lt;/span&gt;\narr2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// OK - don&apos;t affect arr1&lt;/span&gt;\narr2[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;;\t  &lt;span class=&quot;hljs-comment&quot;&gt;// OK - don&apos;t affect arr1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr1); &lt;span class=&quot;hljs-comment&quot;&gt;// [ { x: &apos;a&apos;, y: &apos;b&apos; }, [ 1, 2 ], [ 3, 4 ] ]&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr2); &lt;span class=&quot;hljs-comment&quot;&gt;// [ { x: &apos;z&apos;, y: &apos;b&apos; }, [ 9, 2 ] ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    "],"id":327,"title":"Copy array by value","content":"\n                \n&lt;p&gt;When copying an array in JavaScript to another array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2 = arr1;\narr2.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//Now, arr1 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I realized that &lt;code&gt;arr2&lt;/code&gt; refers to the same array as &lt;code&gt;arr1&lt;/code&gt;, rather than a new, independent array. How can I copy the array to get two independent arrays?&lt;/p&gt;\n    ","slug":"copy-array-by-value-1657387649531","postType":"QUESTION","createdAt":"2022-07-09T17:27:29.000Z","updatedAt":"2022-07-09T17:27:29.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"No 'Access-Control-Allow-Origin' header is present on the requested resource—when trying to get data from a REST API","slug":"no-'access-control-allow-origin'-header-is-present-on-the-requested-resourcewhen-trying-to-get-data-from-a-rest-api-1657387628467"},{"title":"Why does my recursive function return None?","slug":"why-does-my-recursive-function-return-none-1657387792894"},{"title":"What are drawbacks or disadvantages of singleton pattern? [closed]","slug":"what-are-drawbacks-or-disadvantages-of-singleton-pattern-closed-1657387360749"},{"title":"When to use LinkedList over ArrayList in Java?","slug":"when-to-use-linkedlist-over-arraylist-in-java-1657388107480"},{"title":"How to use SharedPreferences in Android to store, fetch and edit values [closed]","slug":"how-to-use-sharedpreferences-in-android-to-store-fetch-and-edit-values-closed-1657387683057"},{"title":"Is there a unique Android device ID?","slug":"is-there-a-unique-android-device-id-1657388089268"},{"title":"Use dynamic variable names in JavaScript","slug":"use-dynamic-variable-names-in-javascript-1657388468075"},{"title":"Why is iostream::eof inside a loop condition (i.e. `while (!stream.eof())`) considered wrong?","slug":"why-is-iostream::eof-inside-a-loop-condition-(i.e.-while-(!stream.eof()))-considered-wrong-1657384355427"},{"title":"How do I get PHP errors to display?","slug":"how-do-i-get-php-errors-to-display-1657384570095"},{"title":"How to make a div 100% height of the browser window","slug":"how-to-make-a-div-100percent-height-of-the-browser-window-1657388265955"},{"title":"Open a URL in a new tab (and not a new window)","slug":"open-a-url-in-a-new-tab-(and-not-a-new-window)-1657387699598"},{"title":"Importing installed package from script raises \"AttributeError: module has no attribute\" or \"ImportError: cannot import name\"","slug":"importing-installed-package-from-script-raises-\"attributeerror:-module-has-no-attribute\"-or-\"importerror:-cannot-import-name\"-1657387790607"},{"title":"Storing Images in DB - Yea or Nay?","slug":"storing-images-in-db-yea-or-nay-1657387248067"},{"title":"Which equals operator (== vs ===) should be used in JavaScript comparisons?","slug":"which-equals-operator-(-vs-)-should-be-used-in-javascript-comparisons-1657384663105"},{"title":"What does the comma operator , do?","slug":"what-does-the-comma-operator-do-1657388258021"},{"title":"How can I tell if a DOM element is visible in the current viewport?","slug":"how-can-i-tell-if-a-dom-element-is-visible-in-the-current-viewport-1657388316510"},{"title":"Ways to deal with #document under iframe","slug":"ways-to-deal-with-document-under-iframe-1657388403345"},{"title":"Int division: Why is the result of 1/3 == 0?","slug":"int-division:-why-is-the-result-of-13-0-1657387547814"},{"title":"What is the difference between a deep copy and a shallow copy?","slug":"what-is-the-difference-between-a-deep-copy-and-a-shallow-copy-1657388445063"},{"title":"How can I iterate through two lists in parallel?","slug":"how-can-i-iterate-through-two-lists-in-parallel-1657387278930"}]},"__N_SSG":true}