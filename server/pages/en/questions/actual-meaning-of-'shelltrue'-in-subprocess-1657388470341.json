{"pageProps":{"data":{"answer":["\n&lt;p&gt;The benefit of not calling via the shell is that you are not invoking a &apos;mystery program.&apos;  On POSIX, the environment variable &lt;code&gt;SHELL&lt;/code&gt; controls which binary is invoked as the &quot;shell.&quot;  On Windows, there is no bourne shell descendent, only cmd.exe.&lt;/p&gt;\n\n&lt;p&gt;So invoking the shell invokes a program of the user&apos;s choosing and is platform-dependent.  Generally speaking, avoid invocations via the shell.&lt;/p&gt;\n\n&lt;p&gt;Invoking via the shell does allow you to expand environment variables and file globs according to the shell&apos;s usual mechanism.  On POSIX systems, the shell expands file globs to a list of files.  On Windows, a file glob (e.g., &quot;*.*&quot;) is not expanded by the shell, anyway (but environment variables on a command line &lt;em&gt;are&lt;/em&gt; expanded by cmd.exe).&lt;/p&gt;\n\n&lt;p&gt;If you think you want environment variable expansions and file globs, research the &lt;code&gt;ILS&lt;/code&gt; attacks of 1992-ish on network services which performed subprogram invocations via the shell.  Examples include the various &lt;code&gt;sendmail&lt;/code&gt; backdoors involving &lt;code&gt;ILS&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In summary, use &lt;code&gt;shell=False&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; subprocess\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;subprocess.call(&lt;span class=&quot;hljs-string&quot;&gt;&apos;echo $HOME&apos;&lt;/span&gt;)\nTraceback (most recent call last):\n...\nOSError: [Errno &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] No such file &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; directory\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;subprocess.call(&lt;span class=&quot;hljs-string&quot;&gt;&apos;echo $HOME&apos;&lt;/span&gt;, shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n/user/khong\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Setting the shell argument to a true value causes subprocess to spawn an intermediate shell process, and tell it to run the command. In other words, using an intermediate shell means that variables, glob patterns, and other special shell features in the command string are processed before the command is run. Here, in the example, $HOME was processed before the echo command. Actually, this is the case of command with shell expansion while the command ls -l considered as a simple command.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;source: &lt;a href=&quot;http://www.bogotobogo.com/python/python_subprocess_module.php&quot; rel=&quot;noreferrer&quot;&gt;Subprocess Module&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;An example where things could go wrong with Shell=True is shown here&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; subprocess &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; call\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;filename = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;What file would you like to display?\\n&quot;&lt;/span&gt;)\nWhat file would you like to display?\nnon_existent; rm -rf / &lt;span class=&quot;hljs-comment&quot;&gt;# THIS WILL DELETE EVERYTHING IN ROOT PARTITION!!!&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;call(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cat &quot;&lt;/span&gt; + filename, shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Uh-oh. This will end badly...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Check the doc here: &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#frequently-used-arguments&quot;&gt;subprocess.call()&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Executing programs through the shell means that all user input passed to the program is interpreted according to the syntax and semantic rules of the invoked shell.  At best, this only causes inconvenience to the user, because the user has to obey these rules.  For instance, paths containing special shell characters like quotation marks or blanks must be escaped.  At worst, it causes security leaks, because the user can execute arbitrary programs.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;shell=True&lt;/code&gt; is sometimes convenient to make use of specific shell features like word splitting or parameter expansion.  However, if such a feature is required, make use of other modules are given to you (e.g. &lt;code&gt;os.path.expandvars()&lt;/code&gt; for parameter expansion or &lt;code&gt;shlex&lt;/code&gt; for word splitting).  This means more work, but avoids other problems.&lt;/p&gt;\n\n&lt;p&gt;In short: Avoid &lt;code&gt;shell=True&lt;/code&gt; by all means.&lt;/p&gt;\n    ","\n&lt;p&gt;The other answers here adequately explain the security caveats which are also mentioned in the &lt;code&gt;subprocess&lt;/code&gt; documentation.  But in addition to that, the overhead of starting a shell to start the program you want to run is often unnecessary and definitely silly for situations where you don&apos;t actually use any of the shell&apos;s functionality.  Moreover, the additional hidden complexity should scare you, &lt;em&gt;especially&lt;/em&gt; if you are not very familiar with the shell or the services it provides.&lt;/p&gt;\n&lt;p&gt;Where the interactions with the shell are nontrivial, you now require the reader and maintainer of the Python script (which may or may not be your future self) to understand both Python and shell script. Remember the Python motto &lt;em&gt;&quot;explicit is better than implicit&quot;;&lt;/em&gt; even when the Python code is going to be somewhat more complex than the equivalent (and often very terse) shell script, you might be better off removing the shell and replacing the functionality with native Python constructs. Minimizing the work done in an external process and keeping control within your own code as far as possible is often a good idea simply because it improves visibility and reduces the risks of -- wanted or unwanted -- side effects.&lt;/p&gt;\n&lt;p&gt;Wildcard expansion, variable interpolation, and redirection are all simple to replace with native Python constructs.  A complex shell pipeline where parts or all cannot be reasonably rewritten in Python would be the one situation where perhaps you could consider using the shell.  You should still make sure you understand the performance and security implications.&lt;/p&gt;\n&lt;p&gt;In the trivial case, to avoid &lt;code&gt;shell=True&lt;/code&gt;, simply replace&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;subprocess.Popen(&lt;span class=&quot;hljs-string&quot;&gt;&quot;command -with -options &apos;like this&apos; and\\\\ an\\\\ argument&quot;&lt;/span&gt;, shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;with&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;subprocess.Popen([&lt;span class=&quot;hljs-string&quot;&gt;&apos;command&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-with&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-options&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;like this&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;and an argument&apos;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Notice how the first argument is a list of strings to pass to &lt;code&gt;execvp()&lt;/code&gt;, and how quoting strings and backslash-escaping shell metacharacters is generally not necessary (or useful, or correct).\nMaybe see also &lt;a href=&quot;https://stackoverflow.com/questions/10067266/when-to-wrap-quotes-around-a-shell-variable/27701642&quot;&gt;When to wrap quotes around a shell variable?&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;If you don&apos;t want to figure this out yourself, the &lt;code&gt;shlex.split()&lt;/code&gt; function can do this for you. It&apos;s part of the Python standard library, but of course, if your shell command string is static, you can just run it once, during development, and paste the result into your script.&lt;/p&gt;\n&lt;p&gt;As an aside, you very often want to avoid &lt;code&gt;Popen&lt;/code&gt; if one of the simpler wrappers in the &lt;code&gt;subprocess&lt;/code&gt; package does what you want. If you have a recent enough Python, you should probably use &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.run&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;subprocess.run&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;With &lt;code&gt;check=True&lt;/code&gt; it will fail if the command you ran failed.&lt;/li&gt;\n&lt;li&gt;With &lt;code&gt;stdout=subprocess.PIPE&lt;/code&gt; it will capture the command&apos;s output.&lt;/li&gt;\n&lt;li&gt;With &lt;code&gt;text=True&lt;/code&gt; (or somewhat obscurely, with the synonym &lt;code&gt;universal_newlines=True&lt;/code&gt;) it will decode output into a proper Unicode string (it&apos;s just &lt;code&gt;bytes&lt;/code&gt; in the system encoding otherwise, on Python 3).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If not, for many tasks, you want &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#subprocess.check_output&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;check_output&lt;/code&gt;&lt;/a&gt; to obtain the output from a command, whilst checking that it succeeded, or &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#subprocess.check_call&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;check_call&lt;/code&gt;&lt;/a&gt; if there is no output to collect.&lt;/p&gt;\n&lt;p&gt;I&apos;ll close with a quote from David Korn: &quot;It&apos;s easier to write a portable shell than a portable shell script.&quot; Even &lt;code&gt;subprocess.run(&apos;echo &quot;$HOME&quot;&apos;, shell=True)&lt;/code&gt; is not portable to Windows.&lt;/p&gt;\n    ","\n&lt;p&gt;Anwser above explains it correctly, but not straight enough.\nLet use &lt;code&gt;ps&lt;/code&gt; command to see what happens.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; subprocess\n\ns = subprocess.Popen([&lt;span class=&quot;hljs-string&quot;&gt;&quot;sleep 100&quot;&lt;/span&gt;], shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(s.pid)\ntime.sleep(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\ns.kill()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;finish&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Run it, and shows&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;start\n&lt;span class=&quot;hljs-number&quot;&gt;832758&lt;/span&gt;\nfinish\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can then use &lt;code&gt;ps -auxf &amp;gt; 1&lt;/code&gt; before &lt;code&gt;finish&lt;/code&gt;, and then &lt;code&gt;ps -auxf &amp;gt; 2&lt;/code&gt; after &lt;code&gt;finish&lt;/code&gt;. Here is the output&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;cy         &lt;span class=&quot;hljs-number&quot;&gt;71209&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;9184&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4580&lt;/span&gt; pts/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    Ss   Oct20   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;  |       \\_ /&lt;span class=&quot;hljs-built_in&quot;&gt;bin&lt;/span&gt;/bash\ncy        &lt;span class=&quot;hljs-number&quot;&gt;832757&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;13324&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;9600&lt;/span&gt; pts/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    S+   &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;  |       |   \\_ python /home/cy/Desktop/test.py\ncy        &lt;span class=&quot;hljs-number&quot;&gt;832758&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2616&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;612&lt;/span&gt; pts/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    S+   &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;  |       |       \\_ /&lt;span class=&quot;hljs-built_in&quot;&gt;bin&lt;/span&gt;/sh -c sleep &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\ncy        &lt;span class=&quot;hljs-number&quot;&gt;832759&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5448&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;532&lt;/span&gt; pts/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    S+   &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;  |       |           \\_ sleep &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See? Instead of directly running &lt;code&gt;sleep 100&lt;/code&gt;. it actually runs &lt;code&gt;/bin/sh&lt;/code&gt;. and the &lt;code&gt;pid&lt;/code&gt; it prints out is actually the &lt;code&gt;pid&lt;/code&gt; of &lt;code&gt;/bin/sh&lt;/code&gt;. After if you call &lt;code&gt;s.kill()&lt;/code&gt;, it kills &lt;code&gt;/bin/sh&lt;/code&gt; but &lt;code&gt;sleep&lt;/code&gt; is still there.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;cy         &lt;span class=&quot;hljs-number&quot;&gt;69369&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;533764&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;8160&lt;/span&gt; ?        Ssl  Oct20   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;  \\_ /usr/libexec/xdg-desktop-portal\ncy         &lt;span class=&quot;hljs-number&quot;&gt;69411&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;491652&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14856&lt;/span&gt; ?        Ssl  Oct20   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:04  \\_ /usr/libexec/xdg-desktop-portal-gtk\ncy        &lt;span class=&quot;hljs-number&quot;&gt;832646&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5448&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;596&lt;/span&gt; pts/&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    S    &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;  \\_ sleep &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So the next question is , what can &lt;code&gt;/bin/sh&lt;/code&gt; do? Every linux user knows it, heard it, and uses it. But i bet there are so many people who doesn&apos;t really understand what is &lt;code&gt;shell&lt;/code&gt; indeed. Maybe you also hear &lt;code&gt;/bin/bash&lt;/code&gt;, they&apos;re similar.&lt;/p&gt;\n&lt;p&gt;One obvious function of shell is for users convenience to run linux application. because of shell programm like &lt;code&gt;sh&lt;/code&gt; or &lt;code&gt;bash&lt;/code&gt;, you can directly use command like &lt;code&gt;ls&lt;/code&gt; rather than &lt;code&gt;/usr/bin/ls&lt;/code&gt;. it will search where &lt;code&gt;ls&lt;/code&gt; is and runs it for you.&lt;/p&gt;\n&lt;p&gt;Other function is it will interpret string after &lt;code&gt;$&lt;/code&gt; as environment variable. You can compare these two python script to findout yourself.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;subprocess.call([&lt;span class=&quot;hljs-string&quot;&gt;&quot;echo $PATH&quot;&lt;/span&gt;], shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;subprocess.call([&lt;span class=&quot;hljs-string&quot;&gt;&quot;echo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;$PATH&quot;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;And the most important, it makes possible to run linux command as script. Such as &lt;code&gt;if&lt;/code&gt; &lt;code&gt;else&lt;/code&gt; are introduced by shell. it&apos;s not native linux command&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;let&apos;s assume you are using shell=False and providing the command as a list. And some malicious  user tried injecting an &apos;rm&apos; command.\nYou will see, that &apos;rm&apos; will be interpreted as an argument and effectively &apos;ls&apos; will try to find a file called &apos;rm&apos;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;subprocess.run([&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-ld&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;/home&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;rm&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;/etc/passwd&apos;&lt;/span&gt;])\nls: rm: No such file &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; directory\n-rw-r--r--    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;hljs-number&quot;&gt;1172&lt;/span&gt; May &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt; /etc/passwd\ndrwxr-xr-x    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; root     root          &lt;span class=&quot;hljs-number&quot;&gt;4096&lt;/span&gt; May &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt; /home\nCompletedProcess(args=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-ld&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/home&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rm&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/etc/passwd&apos;&lt;/span&gt;], returncode=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;shell=False is not a secure by default, if you don&apos;t control the input properly. You can still execute dangerous commands.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;subprocess.run([&lt;span class=&quot;hljs-string&quot;&gt;&apos;rm&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-rf&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;/home&apos;&lt;/span&gt;])\nCompletedProcess(args=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;rm&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-rf&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/home&apos;&lt;/span&gt;], returncode=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;subprocess.run([&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-ld&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;/home&apos;&lt;/span&gt;])\nls: /home: No such file &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; directory\nCompletedProcess(args=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-ld&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/home&apos;&lt;/span&gt;], returncode=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I am writing most of my applications in container environments, I know which shell is being invoked and i am not taking any user input.&lt;/p&gt;\n&lt;p&gt;So in my use case, I see no security risk. And it is much easier creating long string of commands. Hope I am not wrong.&lt;/p&gt;\n    "],"id":577,"title":"Actual meaning of 'shell=True' in subprocess","content":"\n                \n&lt;p&gt;I am calling different processes with the &lt;code&gt;subprocess&lt;/code&gt; module. However, I have a question.&lt;/p&gt;\n\n&lt;p&gt;In the following codes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;callProcess = subprocess.Popen([&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-l&apos;&lt;/span&gt;], shell=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;callProcess = subprocess.Popen([&lt;span class=&quot;hljs-string&quot;&gt;&apos;ls&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-l&apos;&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;# without shell&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both work. After reading the docs, I came to know that &lt;code&gt;shell=True&lt;/code&gt; means executing the code through the shell. So that means in absence, the process is directly started. &lt;/p&gt;\n\n&lt;p&gt;So what should I prefer for my case - I need to run a process and get its output. What benefit do I have from calling it from within the shell or outside of it.&lt;/p&gt;\n    ","slug":"actual-meaning-of-'shelltrue'-in-subprocess-1657388470341","postType":"QUESTION","createdAt":"2022-07-09T17:41:10.000Z","updatedAt":"2022-07-09T17:41:10.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Ways to deal with #document under iframe","slug":"ways-to-deal-with-document-under-iframe-1657388403345"},{"title":"What is the copy-and-swap idiom?","slug":"what-is-the-copy-and-swap-idiom-1657384840329"},{"title":"Query based on multiple where clauses in Firebase","slug":"query-based-on-multiple-where-clauses-in-firebase-1657387494547"},{"title":"How to avoid using Select in Excel VBA","slug":"how-to-avoid-using-select-in-excel-vba-1657384286300"},{"title":"Arrays, linked lists and other data structures in cmd.exe (batch) script","slug":"arrays-linked-lists-and-other-data-structures-in-cmd.exe-(batch)-script-1657387558484"},{"title":"What's the meaning of \"=>\" (an arrow formed from equals & greater than) in JavaScript?","slug":"what's-the-meaning-of-\"greater\"-(an-arrow-formed-from-equals-and-greater-than)-in-javascript-1657387977118"},{"title":"Why does printf not flush after the call unless a newline is in the format string?","slug":"why-does-printf-not-flush-after-the-call-unless-a-newline-is-in-the-format-string-1657387853407"},{"title":"The definitive guide to form-based website authentication [closed]","slug":"the-definitive-guide-to-form-based-website-authentication-closed-1657388456475"},{"title":"How to randomize (shuffle) a JavaScript array?","slug":"how-to-randomize-(shuffle)-a-javascript-array-1657384790171"},{"title":"Why is using \"for...in\" for array iteration a bad idea?","slug":"why-is-using-\"for...in\"-for-array-iteration-a-bad-idea-1657384653458"},{"title":"What are the nuances of scope prototypal / prototypical inheritance in AngularJS?","slug":"what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs-1657387340067"},{"title":"Useless use of cat?","slug":"useless-use-of-cat-1657388390794"},{"title":"Undefined behavior and sequence points","slug":"undefined-behavior-and-sequence-points-1657384639493"},{"title":"How to deal with floating point number precision in JavaScript?","slug":"how-to-deal-with-floating-point-number-precision-in-javascript-1657387293762"},{"title":"How should a model be structured in MVC? [closed]","slug":"how-should-a-model-be-structured-in-mvc-closed-1657388394807"},{"title":"What is __init__.py for?","slug":"what-is-__init__.py-for-1657388415243"},{"title":"What is the difference between \"INNER JOIN\" and \"OUTER JOIN\"?","slug":"what-is-the-difference-between-\"inner-join\"-and-\"outer-join\"-1657387501982"},{"title":"What is the difference between single-quoted and double-quoted strings in PHP?","slug":"what-is-the-difference-between-single-quoted-and-double-quoted-strings-in-php-1657384624345"},{"title":"Is there a difference between \"==\" and \"is\"?","slug":"is-there-a-difference-between-\"\"-and-\"is\"-1657387902231"},{"title":"Remove duplicate values from JS array [duplicate]","slug":"remove-duplicate-values-from-js-array-duplicate-1657387801931"}]},"__N_SSG":true}