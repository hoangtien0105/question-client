{"pageProps":{"data":{"answer":["\n&lt;p&gt;You have &lt;code&gt;=&lt;/code&gt; the &lt;strong&gt;assignment operator&lt;/strong&gt;, &lt;code&gt;==&lt;/code&gt; the &lt;strong&gt;&apos;equal&apos; comparison operator&lt;/strong&gt; and &lt;code&gt;===&lt;/code&gt; the &lt;strong&gt;&apos;identical&apos; comparison operator&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;$a = $b     Assign      Sets $a to be equal to $b.\n$a == $b    Equal       TRUE if $a is equal to $b.\n$a === $b   Identical   TRUE if $a is equal to $b, and they are of the same type. (introduced in PHP 4)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more info on the need for &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;, and situations to use each, look at &lt;a href=&quot;http://il.php.net/manual/en/language.operators.comparison.php&quot; rel=&quot;noreferrer&quot;&gt;the docs&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;=&lt;/code&gt; is the assignment operator &lt;/li&gt;\n&lt;li&gt;&lt;code&gt;==&lt;/code&gt;\nis the comparison operator (checks if\ntwo variables have equal values)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;===&lt;/code&gt; is the identical comparison\noperator (checks if two variables\nhave equal values and are of the same\ntype).&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;=   assignment operator&lt;/p&gt;\n\n&lt;p&gt;==  checks if two variables have the same value&lt;/p&gt;\n\n&lt;p&gt;=== checks if two variables have the same value AND if their types are the same&lt;/p&gt;\n    ","\n&lt;p&gt;The = operator assigns the value to a variable\n$six = 6; value 6 is assigned to variable $six&lt;/p&gt;\n\n&lt;p&gt;== operator check if the value of both variables is equal and mostly used in conditions like if statements&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; == &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) { \n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; both variables have the same value; \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;=== operator similar to == (check if the value equals) and also check if both of same data type&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; === &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;both variable have same value and of same data type&quot;&lt;/span&gt;;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;both variable is either not equal or not of same data type&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;// here $a is of type int whereas $b is of type string. So here the output&lt;/p&gt;\n    ","\n&lt;p&gt;For advanced PHP users, knowing the difference between &lt;code&gt;==&lt;/code&gt;and &lt;code&gt;===&lt;/code&gt; and asking themselves &quot;is it faster to compare with &lt;code&gt;==&lt;/code&gt; or with &lt;code&gt;===&lt;/code&gt; when I&apos;m sure that both the operands are the same type?&quot;&lt;/p&gt;\n\n&lt;p&gt;The short and general answer is: &lt;strong&gt;There is no performance gain in using &lt;code&gt;===&lt;/code&gt; in this cases, so you should probably use &lt;code&gt;==&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For the ones interested in benchmarking it themselves, you can use the following code I wrote ad-hoc and try different values for &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// CONFIGURATION&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;random string 1&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;random string 2&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// FUNCTIONS&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;compare_two_equals&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; == &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;compare_three_equals&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; === &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// EXECUTION&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt;++) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;compare_two_equals&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time_two_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;) - &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt;++) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;compare_three_equals&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time_three_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;) - &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt;++) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;compare_two_equals&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time_two_b&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;) - &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt;++) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;compare_three_equals&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time_three_b&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;) - &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// RESULTS PRINTING&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;\\nCOMPARE == (FIRST TRY): &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;number_format&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_two_a&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; seconds&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;\\nCOMPARE == (SECOND TRY): &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;number_format&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_two_b&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; seconds&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;\\nCOMPARE === (FIRST TRY): &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;number_format&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_three_a&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; seconds&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;\\nCOMPARE === (SECOND TRY): &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;number_format&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_three_b&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; seconds&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;NOTE: The comparison is valid only when each &quot;FIRST TRY&quot; is very close to its &quot;SECOND TRY&quot;. If they are significantly different, it means that the processor was busy doing something else while executing the comparisons and so the results are unreliable and the benchmark should be run again.&lt;/p&gt;\n    "],"id":203,"title":"The 3 different equals","content":"\n                \n&lt;p&gt;What is the difference between &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, and &lt;code&gt;===&lt;/code&gt;?&lt;/p&gt;\n\n&lt;p&gt;I think using one equal sign is to declare a variable while two equal signs are for a comparison condition and lastly three equal signs are for comparing values of declared variables.&lt;/p&gt;\n    ","slug":"the-3-different-equals-1657385490242","postType":"QUESTION","createdAt":"2022-07-09T16:51:30.000Z","updatedAt":"2022-07-09T16:51:30.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How can I get useful error messages in PHP?","slug":"how-can-i-get-useful-error-messages-in-php-1657384609065"},{"title":"How can I pivot a dataframe?","slug":"how-can-i-pivot-a-dataframe-1657384433802"},{"title":"Useless use of cat?","slug":"useless-use-of-cat-1657388390794"},{"title":"Why are these numbers not equal?","slug":"why-are-these-numbers-not-equal-1657384729559"},{"title":"Transpose / reshape dataframe without \"timevar\" from long to wide format","slug":"transpose-reshape-dataframe-without-\"timevar\"-from-long-to-wide-format-1657388213347"},{"title":"What is the `self` parameter in class methods?","slug":"what-is-the-self-parameter-in-class-methods-1657387518448"},{"title":"Using fflush(stdin)","slug":"using-fflush(stdin)-1657387602771"},{"title":"What is a smart pointer and when should I use one?","slug":"what-is-a-smart-pointer-and-when-should-i-use-one-1657387905461"},{"title":"Persist variables between page loads","slug":"persist-variables-between-page-loads-1657388558452"},{"title":"Why does Tkinter image not show up if created in a function?","slug":"why-does-tkinter-image-not-show-up-if-created-in-a-function-1657387388233"},{"title":"Using Auto Layout in UITableView for dynamic cell layouts & variable row heights","slug":"using-auto-layout-in-uitableview-for-dynamic-cell-layouts-and-variable-row-heights-1657387722263"},{"title":"What methods of ‘clearfix’ can I use?","slug":"what-methods-of-'clearfix'-can-i-use-1657387672727"},{"title":"What are the basic rules and idioms for operator overloading?","slug":"what-are-the-basic-rules-and-idioms-for-operator-overloading-1657384449752"},{"title":"How to print a number with commas as thousands separators in JavaScript","slug":"how-to-print-a-number-with-commas-as-thousands-separators-in-javascript-1657387777379"},{"title":"How to evaluate a math expression given in string form?","slug":"how-to-evaluate-a-math-expression-given-in-string-form-1657387797852"},{"title":"Use of 'prototype' vs. 'this' in JavaScript?","slug":"use-of-'prototype'-vs.-'this'-in-javascript-1657388117307"},{"title":"srand() — why call it only once?","slug":"srand()-why-call-it-only-once-1657387794760"},{"title":"When should I use a return statement in ES6 arrow functions","slug":"when-should-i-use-a-return-statement-in-es6-arrow-functions-1657388472113"},{"title":"Simulating group_concat MySQL function in Microsoft SQL Server 2005?","slug":"simulating-group_concat-mysql-function-in-microsoft-sql-server-2005-1657384832169"},{"title":"How do I set a variable to the output of a command in Bash?","slug":"how-do-i-set-a-variable-to-the-output-of-a-command-in-bash-1657387250909"}]},"__N_SSG":true}