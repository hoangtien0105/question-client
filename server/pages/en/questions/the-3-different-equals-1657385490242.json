{"pageProps":{"data":{"answer":["\n&lt;p&gt;You have &lt;code&gt;=&lt;/code&gt; the &lt;strong&gt;assignment operator&lt;/strong&gt;, &lt;code&gt;==&lt;/code&gt; the &lt;strong&gt;&apos;equal&apos; comparison operator&lt;/strong&gt; and &lt;code&gt;===&lt;/code&gt; the &lt;strong&gt;&apos;identical&apos; comparison operator&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;$a = $b     Assign      Sets $a to be equal to $b.\n$a == $b    Equal       TRUE if $a is equal to $b.\n$a === $b   Identical   TRUE if $a is equal to $b, and they are of the same type. (introduced in PHP 4)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more info on the need for &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;, and situations to use each, look at &lt;a href=&quot;http://il.php.net/manual/en/language.operators.comparison.php&quot; rel=&quot;noreferrer&quot;&gt;the docs&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;=&lt;/code&gt; is the assignment operator &lt;/li&gt;\n&lt;li&gt;&lt;code&gt;==&lt;/code&gt;\nis the comparison operator (checks if\ntwo variables have equal values)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;===&lt;/code&gt; is the identical comparison\noperator (checks if two variables\nhave equal values and are of the same\ntype).&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;=   assignment operator&lt;/p&gt;\n\n&lt;p&gt;==  checks if two variables have the same value&lt;/p&gt;\n\n&lt;p&gt;=== checks if two variables have the same value AND if their types are the same&lt;/p&gt;\n    ","\n&lt;p&gt;The = operator assigns the value to a variable\n$six = 6; value 6 is assigned to variable $six&lt;/p&gt;\n\n&lt;p&gt;== operator check if the value of both variables is equal and mostly used in conditions like if statements&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; == &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) { \n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; both variables have the same value; \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;=== operator similar to == (check if the value equals) and also check if both of same data type&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; === &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;both variable have same value and of same data type&quot;&lt;/span&gt;;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;both variable is either not equal or not of same data type&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;// here $a is of type int whereas $b is of type string. So here the output&lt;/p&gt;\n    ","\n&lt;p&gt;For advanced PHP users, knowing the difference between &lt;code&gt;==&lt;/code&gt;and &lt;code&gt;===&lt;/code&gt; and asking themselves &quot;is it faster to compare with &lt;code&gt;==&lt;/code&gt; or with &lt;code&gt;===&lt;/code&gt; when I&apos;m sure that both the operands are the same type?&quot;&lt;/p&gt;\n\n&lt;p&gt;The short and general answer is: &lt;strong&gt;There is no performance gain in using &lt;code&gt;===&lt;/code&gt; in this cases, so you should probably use &lt;code&gt;==&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For the ones interested in benchmarking it themselves, you can use the following code I wrote ad-hoc and try different values for &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// CONFIGURATION&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;random string 1&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;random string 2&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// FUNCTIONS&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;compare_two_equals&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; == &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;compare_three_equals&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; === &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// EXECUTION&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt;++) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;compare_two_equals&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time_two_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;) - &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt;++) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;compare_three_equals&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time_three_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;) - &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt;++) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;compare_two_equals&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time_two_b&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;) - &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$cycles&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$count_a&lt;/span&gt;++) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;compare_three_equals&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time_three_b&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;) - &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$time&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// RESULTS PRINTING&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;\\nCOMPARE == (FIRST TRY): &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;number_format&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_two_a&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; seconds&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;\\nCOMPARE == (SECOND TRY): &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;number_format&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_two_b&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; seconds&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;\\nCOMPARE === (FIRST TRY): &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;number_format&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_three_a&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; seconds&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br /&amp;gt;\\nCOMPARE === (SECOND TRY): &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;number_format&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_three_b&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; seconds&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;NOTE: The comparison is valid only when each &quot;FIRST TRY&quot; is very close to its &quot;SECOND TRY&quot;. If they are significantly different, it means that the processor was busy doing something else while executing the comparisons and so the results are unreliable and the benchmark should be run again.&lt;/p&gt;\n    "],"id":203,"title":"The 3 different equals","content":"\n                \n&lt;p&gt;What is the difference between &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, and &lt;code&gt;===&lt;/code&gt;?&lt;/p&gt;\n\n&lt;p&gt;I think using one equal sign is to declare a variable while two equal signs are for a comparison condition and lastly three equal signs are for comparing values of declared variables.&lt;/p&gt;\n    ","slug":"the-3-different-equals-1657385490242","postType":"QUESTION","createdAt":"2022-07-09T16:51:30.000Z","updatedAt":"2022-07-09T16:51:30.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Syntax error due to using a reserved word as a table or column name in MySQL","slug":"syntax-error-due-to-using-a-reserved-word-as-a-table-or-column-name-in-mysql-1657384689274"},{"title":"Learning Regular Expressions [closed]","slug":"learning-regular-expressions-closed-1657384719460"},{"title":"Short description of the scoping rules?","slug":"short-description-of-the-scoping-rules-1657384853121"},{"title":"Pandas Merging 101","slug":"pandas-merging-101-1657384447080"},{"title":"Use dynamic variable names in JavaScript","slug":"use-dynamic-variable-names-in-javascript-1657388468075"},{"title":"Why not use tables for layout in HTML? [closed]","slug":"why-not-use-tables-for-layout-in-html-closed-1657387752327"},{"title":"What is a StackOverflowError?","slug":"what-is-a-stackoverflowerror-1657388319634"},{"title":"Retrieve only the queried element in an object array in MongoDB collection","slug":"retrieve-only-the-queried-element-in-an-object-array-in-mongodb-collection-1657384890457"},{"title":"Query based on multiple where clauses in Firebase","slug":"query-based-on-multiple-where-clauses-in-firebase-1657387494547"},{"title":"Is there a unique Android device ID?","slug":"is-there-a-unique-android-device-id-1657388089268"},{"title":"event.preventDefault() vs. return false","slug":"event.preventdefault()-vs.-return-false-1657387458377"},{"title":"Why not use Double or Float to represent currency?","slug":"why-not-use-double-or-float-to-represent-currency-1657387417964"},{"title":"Understanding slicing","slug":"understanding-slicing-1657384397680"},{"title":"How to add JTable in JPanel with null layout?","slug":"how-to-add-jtable-in-jpanel-with-null-layout-1657384590912"},{"title":"MySQL pivot row into dynamic number of columns","slug":"mysql-pivot-row-into-dynamic-number-of-columns-1657387981930"},{"title":"What is an efficient way to implement a singleton pattern in Java? [closed]","slug":"what-is-an-efficient-way-to-implement-a-singleton-pattern-in-java-closed-1657387970474"},{"title":"Dynamically access object property using variable","slug":"dynamically-access-object-property-using-variable-1657384439324"},{"title":"How to create RecyclerView with multiple view types","slug":"how-to-create-recyclerview-with-multiple-view-types-1657388121512"},{"title":"Why does this UnboundLocalError occur (closure)? [duplicate]","slug":"why-does-this-unboundlocalerror-occur-(closure)-duplicate-1657388531538"},{"title":"The Definitive C Book Guide and List","slug":"the-definitive-c-book-guide-and-list-1657384747653"}]},"__N_SSG":true}