{"pageProps":{"data":{"answer":["\n&lt;h2&gt;The &lt;code&gt;document.domain&lt;/code&gt; method&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Method type: &lt;strong&gt;iframe&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Note that this is an iframe method that sets the value of document.domain to a suffix of the current domain. If it does so, the shorter domain is used for subsequent origin checks. For example, assume a script in the document at &lt;code&gt;http://store.company.com/dir/other.html&lt;/code&gt; executes the following statement:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;domain&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;company.com&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After that statement executes, the page would pass the origin check with &lt;code&gt;http://company.com/dir/page.html&lt;/code&gt;. However, by the same reasoning, company.com could not set &lt;code&gt;document.domain&lt;/code&gt;  to &lt;code&gt;othercompany.com&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;With this method, you would be allowed to exectue javascript from an iframe sourced on a subdomain on a page sourced on the main domain. This method is not suited for cross-domain resources as browsers like Firefox will not allow you to change the &lt;code&gt;document.domain&lt;/code&gt; to a completely alien domain.&lt;/p&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;https://developer.mozilla.org/en/Same_origin_policy_for_JavaScript&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en/Same_origin_policy_for_JavaScript&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;The Cross-Origin Resource Sharing method&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Method type: &lt;strong&gt;AJAX&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/access-control/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Cross-Origin Resource Sharing&lt;/a&gt; (CORS) is a W3C Working Draft that defines how the browser and server must communicate when accessing sources across origins. The basic idea behind CORS is to use custom HTTP headers to allow both the browser and the server to know enough about each other to determine if the request or response should succeed or fail.&lt;/p&gt;\n\n&lt;p&gt;For a simple request, one that uses either &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt; with no custom headers and whose body is &lt;code&gt;text/plain&lt;/code&gt;, the request is sent with an extra header called &lt;code&gt;Origin&lt;/code&gt;. The Origin  header contains the origin (protocol, domain name, and port) of the requesting page so that the server can easily determine whether or not it should serve a response. An example &lt;code&gt;Origin&lt;/code&gt; header might look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Origin&lt;/span&gt;: &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//www.stackoverflow.com&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If the server decides that the request should be allowed, it sends a &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header echoing back the same origin that was sent or &lt;code&gt;*&lt;/code&gt; if its a public resource. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Origin&lt;/span&gt;: &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//www.stackoverflow.com&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If this header is missing, or the origins dont match, then the browser disallows the request. If all is well, then the browser processes the request. Note that neither the requests nor responses include cookie information.&lt;/p&gt;\n\n&lt;p&gt;The Mozilla team suggests in &lt;a href=&quot;http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/&quot; rel=&quot;nofollow noreferrer&quot;&gt;their post about CORS&lt;/a&gt; that you should check for the existence of the &lt;code&gt;withCredentials&lt;/code&gt;  property to determine if the browser supports CORS via XHR. You can then couple with the existence of the &lt;code&gt;XDomainRequest&lt;/code&gt; object to cover all browsers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createCORSRequest&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;method, url&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;withCredentials&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xhr){\n        xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(method, url, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XDomainRequest&lt;/span&gt; != &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;){\n        xhr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XDomainRequest&lt;/span&gt;();\n        xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(method, url);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        xhr = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; xhr;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; request = &lt;span class=&quot;hljs-title function_&quot;&gt;createCORSRequest&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;get&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.stackoverflow.com/&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (request){\n    request.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    };\n    request.&lt;span class=&quot;hljs-property&quot;&gt;onreadystatechange&lt;/span&gt; = handler;\n    request.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that for the CORS method to work, you need to have access to any type of server header mechanic and can&apos;t simply access any third-party resource.&lt;/p&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;The &lt;code&gt;window.postMessage&lt;/code&gt; method&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Method type: &lt;strong&gt;iframe&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;code&gt;window.postMessage&lt;/code&gt;, when called, causes a &lt;code&gt;MessageEvent&lt;/code&gt; to be dispatched at the target window when any pending script that must be executed completes (e.g. remaining event handlers if &lt;code&gt;window.postMessage&lt;/code&gt; is called from an event handler, previously-set pending timeouts, etc.). The &lt;code&gt;MessageEvent&lt;/code&gt; has the type message, a &lt;code&gt;data&lt;/code&gt; property which is set to the string value of the first argument provided to &lt;code&gt;window.postMessage&lt;/code&gt;, an &lt;code&gt;origin&lt;/code&gt; property corresponding to the origin of the main document in the window calling &lt;code&gt;window.postMessage&lt;/code&gt; at the time &lt;code&gt;window.postMessage&lt;/code&gt; was called, and a &lt;code&gt;source&lt;/code&gt; property which is the window from which &lt;code&gt;window.postMessage&lt;/code&gt; is called.&lt;/p&gt;\n\n&lt;p&gt;To use &lt;code&gt;window.postMessage&lt;/code&gt;, an event listener must be attached:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// Internet Explorer&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;attachEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;onmessage&apos;&lt;/span&gt;,receiveMessage);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Opera/Mozilla/Webkit&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;message&quot;&lt;/span&gt;, receiveMessage, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And a &lt;code&gt;receiveMessage&lt;/code&gt; function must be declared:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;receiveMessage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// do something with event.data;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The off-site iframe must also send events properly via &lt;code&gt;postMessage&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;parent&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;postMessage&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;)&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Any window may access this method on any other window, at any time, regardless of the location of the document in the window, to send it a message. Consequently, any event listener used to receive messages must  first check the identity of the sender of the message, using the origin  and possibly source properties. This cannot be understated: &lt;strong&gt;Failure to check the &lt;code&gt;origin&lt;/code&gt; and possibly &lt;code&gt;source&lt;/code&gt; properties enables cross-site scripting attacks.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;https://developer.mozilla.org/en/DOM/window.postMessage&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en/DOM/window.postMessage&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;&lt;strong&gt;The Reverse Proxy method&lt;/strong&gt;&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Method type: &lt;strong&gt;Ajax&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Setting up a simple &lt;a href=&quot;http://en.wikipedia.org/wiki/Reverse_proxy&quot; rel=&quot;nofollow noreferrer&quot;&gt;reverse proxy&lt;/a&gt; on the server, will allow the browser to use relative paths for the Ajax requests, while the server would be acting as a proxy to any remote location. &lt;/p&gt;\n\n&lt;p&gt;If using &lt;a href=&quot;http://httpd.apache.org/docs/2.0/mod/mod_proxy.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;mod_proxy&lt;/a&gt; in Apache, the fundamental configuration directive to set up a reverse proxy is the &lt;code&gt;ProxyPass&lt;/code&gt;. It is typically used as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;ProxyPass&lt;/span&gt;     /ajax/     &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//other-domain.com/ajax/&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case, the browser would be able to request &lt;code&gt;/ajax/web_service.xml&lt;/code&gt; as a relative URL, but the server would serve this by acting as a proxy to &lt;code&gt;http://other-domain.com/ajax/web_service.xml&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;One interesting feature of the this method is that the reverse proxy can easily distribute requests towards multiple back-ends, thus acting as a &lt;a href=&quot;http://en.wikipedia.org/wiki/Load_balancer&quot; rel=&quot;nofollow noreferrer&quot;&gt;load balancer&lt;/a&gt;. &lt;/p&gt;\n    ","\n&lt;p&gt;I use JSONP.&lt;/p&gt;\n\n&lt;p&gt;Basically, you add&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script src=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://..../someData.js?callback=some_func&quot;&lt;/span&gt;/&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;on your page.&lt;/p&gt;\n\n&lt;p&gt;some_func() should get called so that you are notified that the data is in.&lt;/p&gt;\n    ","\n&lt;p&gt;AnyOrigin didn&apos;t function well with some https sites, so I just wrote an open source alternative called &lt;a href=&quot;http://whateverorigin.org&quot; rel=&quot;noreferrer&quot;&gt;whateverorigin.org&lt;/a&gt; that seems to work well with https.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/ripper234/Whatever-Origin&quot; rel=&quot;noreferrer&quot;&gt;Code on github&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The most recent way of overcoming the same-origin policy that I&apos;ve found is &lt;a href=&quot;http://anyorigin.com/&quot;&gt;http://anyorigin.com/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The site&apos;s made so that you just give it any url and it generates javascript/jquery code for you that lets you get the html/data, regardless of it&apos;s origin.  In other words, it makes any url or webpage a JSONP request.&lt;/p&gt;\n\n&lt;p&gt;I&apos;ve found it pretty useful :)&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s some example javascript code from anyorigin:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;getJSON&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://anyorigin.com/get?url=google.com&amp;amp;callback=?&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;){\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#output&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;contents&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/JSON#JSONP&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSONP&lt;/a&gt; comes to mind:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;JSONP or &quot;JSON with padding&quot; is a\n  complement to the base JSON data\n  format, a usage pattern that allows a\n  page to request and more meaningfully\n  use JSON from a server other than the\n  primary server. JSONP is an\n  alternative to a more recent method\n  called Cross-Origin Resource Sharing.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Personally, &lt;code&gt;window.postMessage&lt;/code&gt; is the most reliable way that I&apos;ve found for modern browsers. You do have to do a slight bit more work to make sure you&apos;re not leaving yourself open to XSS attacks, but it&apos;s a reasonable tradeoff.&lt;/p&gt;\n\n&lt;p&gt;There are also several plugins for the popular Javascript toolkits out there that wrap &lt;code&gt;window.postMessage&lt;/code&gt; that provide similar functionality to older browsers using the other methods discussed above.&lt;/p&gt;\n    ","\n&lt;p&gt;Well, I used curl in PHP to circumvent this. I have a webservice running in port 82.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;?php\n\n$curl = &lt;span class=&quot;hljs-title function_&quot;&gt;curl_init&lt;/span&gt;();\n$timeout = &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;;\n$ret = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n$url=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:82/put_val?val=&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;val&quot;&lt;/span&gt;];\ncurl_setopt ($curl, &lt;span class=&quot;hljs-variable constant_&quot;&gt;CURLOPT_URL&lt;/span&gt;, $url);\ncurl_setopt ($curl, &lt;span class=&quot;hljs-variable constant_&quot;&gt;CURLOPT_FOLLOWLOCATION&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\ncurl_setopt ($curl, &lt;span class=&quot;hljs-variable constant_&quot;&gt;CURLOPT_MAXREDIRS&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;);\ncurl_setopt ($curl, &lt;span class=&quot;hljs-variable constant_&quot;&gt;CURLOPT_RETURNTRANSFER&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\ncurl_setopt ($curl, &lt;span class=&quot;hljs-variable constant_&quot;&gt;CURLOPT_USERAGENT&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.5) Gecko/2008120122 Firefox/3.0.5&quot;&lt;/span&gt;);\ncurl_setopt ($curl, &lt;span class=&quot;hljs-variable constant_&quot;&gt;CURLOPT_CONNECTTIMEOUT&lt;/span&gt;, $timeout);\n$text = &lt;span class=&quot;hljs-title function_&quot;&gt;curl_exec&lt;/span&gt;($curl);\necho $text;\n\n?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is the javascript that makes the call to the PHP file&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getdata&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj1, obj2&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xmlhttp;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;XMLHttpRequest&lt;/span&gt;)\n            xmlhttp=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            xmlhttp=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ActiveXObject&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Microsoft.XMLHTTP&quot;&lt;/span&gt;);\n\n    xmlhttp.&lt;span class=&quot;hljs-property&quot;&gt;onreadystatechange&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (xmlhttp.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt;==&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &amp;amp;&amp;amp; xmlhttp.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt;==&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;)\n        {\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;txtHint&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt;=xmlhttp.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;;\n        }\n    }\n    xmlhttp.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;phpURLFile.php?eqp=&quot;&lt;/span&gt;+obj1+&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;val=&quot;&lt;/span&gt;+obj2,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    xmlhttp.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My HTML runs on WAMP in port 80. So there we go, same origin policy has been circumvented :-)&lt;/p&gt;\n    "],"id":148,"title":"Ways to circumvent the same-origin policy","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                    &lt;div class=&quot;flex--item mr8&quot;&gt;\n                        &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLock&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M16 9a2 2 0 0 0-2-2V6A5 5 0 0 0 4 6v1a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V9Zm-7 5a2 2 0 1 1 0-4 2 2 0 0 1 0 4Zm3.1-7H5.9V6a3.1 3.1 0 0 1 6.2 0v1Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;Locked&lt;/b&gt;. This question and its answers are &lt;a href=&quot;/help/locked-posts&quot;&gt;locked&lt;/a&gt; because the question is off-topic but has historical significance. It is not currently accepting new answers or interactions.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;h2&gt;The same origin policy&lt;/h2&gt;\n\n&lt;p&gt;I wanted to make a community wiki regarding HTML/JS &lt;strong&gt;same-origin policies&lt;/strong&gt; to hopefully help anyone searching for this topic. This is one of the most searched-for topics on SO and there is no consolidated wiki for it so here I go :)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The same origin policy prevents a\n  document or script loaded from one\n  origin from getting or setting\n  properties of a document from another\n  origin. This policy dates all the way\n  back to Netscape Navigator 2.0.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;What are some of your favorite ways to go around same-origin policies?&lt;/h2&gt;\n\n&lt;p&gt;Please keep examples verbose and preferably also link your sources.&lt;/p&gt;\n    ","slug":"ways-to-circumvent-the-same-origin-policy-1657384763316","postType":"QUESTION","createdAt":"2022-07-09T16:39:23.000Z","updatedAt":"2022-07-09T16:39:23.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Daylight saving time and time zone best practices [closed]","slug":"daylight-saving-time-and-time-zone-best-practices-closed-1657387973687"},{"title":"Undefined, unspecified and implementation-defined behavior","slug":"undefined-unspecified-and-implementation-defined-behavior-1657384516085"},{"title":"How to use java.net.URLConnection to fire and handle HTTP requests","slug":"how-to-use-java.net.urlconnection-to-fire-and-handle-http-requests-1657387245934"},{"title":"Why are mutable structs “evil”?","slug":"why-are-mutable-structs-\"evil\"-1657388508974"},{"title":"How can you represent inheritance in a database?","slug":"how-can-you-represent-inheritance-in-a-database-1657388076553"},{"title":"Convert form data to JavaScript object with jQuery","slug":"convert-form-data-to-javascript-object-with-jquery-1657388036834"},{"title":"How can I merge properties of two JavaScript objects dynamically?","slug":"how-can-i-merge-properties-of-two-javascript-objects-dynamically-1657387492535"},{"title":"How to join (merge) data frames (inner, outer, left, right)","slug":"how-to-join-(merge)-data-frames-(inner-outer-left-right)-1657384406445"},{"title":"How do I use reflection to call a generic method?","slug":"how-do-i-use-reflection-to-call-a-generic-method-1657387256751"},{"title":"How to append text to an existing file in Java?","slug":"how-to-append-text-to-an-existing-file-in-java-1657388492377"},{"title":"How to Sort a Multi-dimensional Array by Value","slug":"how-to-sort-a-multi-dimensional-array-by-value-1657387746110"},{"title":"How to print a number with commas as thousands separators in JavaScript","slug":"how-to-print-a-number-with-commas-as-thousands-separators-in-javascript-1657387777379"},{"title":"How do I use arrays in C++?","slug":"how-do-i-use-arrays-in-c++-1657387456118"},{"title":"The Definitive C++ Book Guide and List","slug":"the-definitive-c++-book-guide-and-list-1657384247395"},{"title":"Short description of the scoping rules?","slug":"short-description-of-the-scoping-rules-1657384853121"},{"title":"Using Auto Layout in UITableView for dynamic cell layouts & variable row heights","slug":"using-auto-layout-in-uitableview-for-dynamic-cell-layouts-and-variable-row-heights-1657387722263"},{"title":"Creating multiline strings in JavaScript","slug":"creating-multiline-strings-in-javascript-1657388025414"},{"title":"How to center an element horizontally and vertically","slug":"how-to-center-an-element-horizontally-and-vertically-1657388132330"},{"title":"Why aren't variable-length arrays part of the C++ standard?","slug":"why-aren't-variable-length-arrays-part-of-the-c++-standard-1657384712975"},{"title":"How to serve static files in Flask","slug":"how-to-serve-static-files-in-flask-1657387862496"}]},"__N_SSG":true}