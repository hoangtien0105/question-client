{"pageProps":{"data":{"answer":["\n&lt;h1&gt;Short version of answer:&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;Use &lt;code&gt;getClass().getResource(...)&lt;/code&gt; or &lt;code&gt;SomeOtherClass.class.getResource(...)&lt;/code&gt; to create a &lt;code&gt;URL&lt;/code&gt; to the resource&lt;/li&gt;\n&lt;li&gt;Pass either an absolute path (with a leading &lt;code&gt;/&lt;/code&gt;) or a relative path (without a leading &lt;code&gt;/&lt;/code&gt;) to the &lt;code&gt;getResource(...)&lt;/code&gt; method. The path is the &lt;em&gt;package&lt;/em&gt; containing the resource, with &lt;code&gt;.&lt;/code&gt; replaced with &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Do not use&lt;/strong&gt; &lt;code&gt;..&lt;/code&gt; in the resource path. If and when the application is bundled as a jar file, this will not work. If the resource is not in the same package or in a subpackage of the class, use an absolute path.&lt;/li&gt;\n&lt;li&gt;For FXML files, pass the &lt;code&gt;URL&lt;/code&gt; directly to the &lt;code&gt;FXMLLoader&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;For images and stylesheets, call &lt;code&gt;toExternalForm()&lt;/code&gt; on the &lt;code&gt;URL&lt;/code&gt; to generate the &lt;code&gt;String&lt;/code&gt; to pass to the &lt;code&gt;Image&lt;/code&gt; or &lt;code&gt;ImageView&lt;/code&gt; constructor, or to add to the &lt;code&gt;stylesheets&lt;/code&gt; list.&lt;/li&gt;\n&lt;li&gt;To troubleshoot, examine the content of your &lt;em&gt;build&lt;/em&gt; folder (or jar file), not your &lt;em&gt;source&lt;/em&gt; folder.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h1&gt;Full Answer&lt;/h1&gt;\n&lt;h2&gt;Contents&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;Scope of this answer&lt;/li&gt;\n&lt;li&gt;Resources are loaded at runtime&lt;/li&gt;\n&lt;li&gt;JavaFX uses URLs to load resources&lt;/li&gt;\n&lt;li&gt;Rules for resource names&lt;/li&gt;\n&lt;li&gt;Creating a resource URL with &lt;code&gt;getClass().getResource(...)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Organizing code and resources&lt;/li&gt;\n&lt;li&gt;Maven (and similar) standard layouts&lt;/li&gt;\n&lt;li&gt;Troubleshooting&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;\nScope of this answer&lt;/h2&gt;\n&lt;p&gt;Note that this answer &lt;em&gt;only&lt;/em&gt; addresses loading resources (for example FXML files, images, and stylesheets) that are part of the application, and bundled with it. So, for example, loading images that the user chooses from the file system on the machine on which the application is running would require different techniques that are not covered here.&lt;/p&gt;\n&lt;h2&gt;\nResources are loaded at runtime&lt;/h2&gt;\n&lt;p&gt;The first thing to understand about loading resources is that they, of course, are loaded at runtime. Typically, during development, an application is run from the file system: that is, the class files and resources required to run it are individual files on the file system. However, once the application is built, it is usually executed from a jar file. In this case, the resources such as FXML files, stylesheets, and images, are no longer individual files on the filesystem but are entries in the jar file. Therefore:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Code cannot use &lt;code&gt;File&lt;/code&gt;, &lt;code&gt;FileInputStream&lt;/code&gt;, or &lt;code&gt;file:&lt;/code&gt; URLs to load a resource&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;\nJavaFX uses URLs to load resources&lt;/h2&gt;\n&lt;p&gt;JavaFX loads FXML, Images, and CSS stylesheets using URLs.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;FXMLLoader&lt;/code&gt; explicitly expects a &lt;code&gt;java.net.URL&lt;/code&gt; object to be passed to it (either to the &lt;code&gt;static&lt;/code&gt; &lt;code&gt;FXMLLoader.load(...)&lt;/code&gt; method, to the &lt;code&gt;FXMLLoader&lt;/code&gt; constructor, or to the &lt;code&gt;setLocation()&lt;/code&gt; method).&lt;/p&gt;\n&lt;p&gt;Both &lt;code&gt;Image&lt;/code&gt; and &lt;code&gt;Scene.getStylesheets().add(...)&lt;/code&gt; expect &lt;code&gt;String&lt;/code&gt;s that represent URLs. If URLs are passed without a scheme, they are interpreted relative to the classpath. These strings can be created from a &lt;code&gt;URL&lt;/code&gt; in a robust way by calling &lt;code&gt;toExternalForm()&lt;/code&gt; on the &lt;code&gt;URL&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The recommended mechanism for creating the correct URL for a resource is to use &lt;code&gt;Class.getResource(...)&lt;/code&gt;, which is called on an appropriate &lt;code&gt;Class&lt;/code&gt; instance. Such a class instance can be obtained by calling &lt;code&gt;getClass()&lt;/code&gt; (which gives the class of the current object), or &lt;code&gt;ClassName.class&lt;/code&gt;. The &lt;code&gt;Class.getResource(...)&lt;/code&gt; method takes a &lt;code&gt;String&lt;/code&gt; representing the resource name.&lt;/p&gt;\n&lt;h2&gt;\nRules for resource names&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;Resource names are &lt;code&gt;/&lt;/code&gt;-separated path names. Each component represents a package or sub-package name component.&lt;/li&gt;\n&lt;li&gt;Resource names are case-sensitive.&lt;/li&gt;\n&lt;li&gt;The individual components in the resource name &lt;strong&gt;must be valid Java identifiers&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The last point has an important consequence:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; are not valid Java identifiers, so they &lt;em&gt;&lt;strong&gt;cannot be used in resource names&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;These may actually work when the application is running from the filesystem, though this is really more of an accident of the implementation of &lt;code&gt;getResource()&lt;/code&gt;. They will fail when the application is bundled as a jar file.&lt;/p&gt;\n&lt;p&gt;Similarly, if you are running on an operating system that does not distinguish between filenames that differ only by case, then using the wrong case in a resource name might work while running from the filesystem, but will fail when running from a jar file.&lt;/p&gt;\n&lt;p&gt;Resource names beginning with a leading &lt;code&gt;/&lt;/code&gt; are &lt;em&gt;absolute&lt;/em&gt;: in other words they are interpreted relative to the classpath. Resource names without a leading &lt;code&gt;/&lt;/code&gt; are interpreted relative to the class on which &lt;code&gt;getResource()&lt;/code&gt; was called.&lt;/p&gt;\n&lt;p&gt;A slight variation on this is to use &lt;code&gt;getClass().getClassLoader().getResource(...)&lt;/code&gt;. The path supplied to &lt;code&gt;ClassLoader.getResource(...)&lt;/code&gt; &lt;strong&gt;must not&lt;/strong&gt; begin with a &lt;code&gt;/&lt;/code&gt; and is &lt;em&gt;always&lt;/em&gt; absolute, i.e. it is relative to the classpath. It should also be noted that in modular applications, access to resources using &lt;code&gt;ClassLoader.getResource()&lt;/code&gt; is, under some circumstances, subject to rules of strong encapsulation, and additionally the package containing the resource must be opened unconditionally. See the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#getResource(java.lang.String)&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt;\n&lt;h2&gt;\nCreating a resource URL with &lt;code&gt;getClass().getResource()&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;To create a resource URL, use &lt;code&gt;someClass.getResource(...)&lt;/code&gt;. Usually, &lt;code&gt;someClass&lt;/code&gt; represents the class of the current object, and is obtained using &lt;code&gt;getClass()&lt;/code&gt;. However, this doesn&apos;t have to be the case, as described in the next section.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If the resource is in the same package as the current class, or in a subpackage of that class, use a relative path to the resource:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// FXML file in the same package as the current class:&lt;/span&gt;\n &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fxmlURL&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyFile.fxml&quot;&lt;/span&gt;);\n &lt;span class=&quot;hljs-type&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; FXMLLoader.load(fxmlURL);\n\n &lt;span class=&quot;hljs-comment&quot;&gt;// FXML file in a subpackage called `fxml`:&lt;/span&gt;\n &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fxmlURL2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fxml/MyFile.fxml&quot;&lt;/span&gt;);\n &lt;span class=&quot;hljs-type&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;root2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; FXMLLoader.load(fxmlURL2);\n\n &lt;span class=&quot;hljs-comment&quot;&gt;// Similarly for images:&lt;/span&gt;\n &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;imageURL&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myimages/image.png&quot;&lt;/span&gt;);\n &lt;span class=&quot;hljs-type&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Image&lt;/span&gt;(imageURL.toExternalForm());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the resource is in a package that is not a subpackage of the current class, use an absolute path. For example, if the current class is in the package &lt;code&gt;org.jamesd.examples.view&lt;/code&gt;, and we need to load a CSS file &lt;code&gt;style.css&lt;/code&gt; which is in the package &lt;code&gt;org.jamesd.examples.css&lt;/code&gt;, we have to use an absolute path:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;cssURL&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/org/jamesd/examples/css/style.css&quot;&lt;/span&gt;);\n scene.getStylesheets().add(cssURL.toExternalForm());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s worth re-emphasizing for this example that the path &lt;code&gt;&quot;../css/style.css&quot;&lt;/code&gt; does not contain valid Java resource names, and &lt;strong&gt;will not work&lt;/strong&gt; if the application is bundled as a jar file.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;\nOrganizing code and resources&lt;/h2&gt;\n&lt;p&gt;I recommend organizing your code and resources into packages determined by the part of the UI they are associated with. The following source layout in Eclipse gives an example of this organization:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/fPFmF.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/fPFmF.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Using this structure, each resource has a class in the same package, so it is easy to generate the correct URL for any resource:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;FXMLLoader&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;editorLoader&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FXMLLoader&lt;/span&gt;(EditorController.class.getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Editor.fxml&quot;&lt;/span&gt;));\n&lt;span class=&quot;hljs-type&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; editorLoader.load();\n&lt;span class=&quot;hljs-type&quot;&gt;FXMLLoader&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sidebarLoader&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FXMLLoader&lt;/span&gt;(SidebarController.class.getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sidebar.fxml&quot;&lt;/span&gt;));\n&lt;span class=&quot;hljs-type&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sidebar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sidebarLoader.load();\n\n&lt;span class=&quot;hljs-type&quot;&gt;ImageView&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;logo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ImageView&lt;/span&gt;();\nlogo.setImage(newImage(SidebarController.class.getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;logo.png&quot;&lt;/span&gt;).toExternalForm()));\n\nmainScene.getStylesheets().add(App.class.getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;style.css&quot;&lt;/span&gt;).toExternalForm());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you have a package with only resources and no classes, for example, the &lt;code&gt;images&lt;/code&gt; package in the layout below&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/s26lK.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/s26lK.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;you can even consider creating a &quot;marker interface&quot; solely for the purposes of looking up the resource names:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; org.jamesd.examples.sample.images ;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ImageLocation&lt;/span&gt; { }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which now lets you find these resources easily:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;clubs&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Image&lt;/span&gt;(ImageLocation.class.getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clubs.png&quot;&lt;/span&gt;).toExternalForm());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Loading resources from a subpackage of a class is also reasonably straightforward. Given the following layout:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/5VFSe.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/5VFSe.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;we can load resources in the &lt;code&gt;App&lt;/code&gt; class as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; org.jamesd.examples.resourcedemo;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.net.URL;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javafx.application.Application;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javafx.fxml.FXMLLoader;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javafx.scene.Parent;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javafx.scene.Scene;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javafx.stage.Stage;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Application&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Stage primaryStage)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception {        \n        \n        &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fxmlResource&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fxml/MainView.fxml&quot;&lt;/span&gt;);\n        \n        \n        &lt;span class=&quot;hljs-type&quot;&gt;FXMLLoader&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;loader&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FXMLLoader&lt;/span&gt;();\n        loader.setLocation(fxmlResource);\n        &lt;span class=&quot;hljs-type&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; loader.load();\n        &lt;span class=&quot;hljs-type&quot;&gt;Scene&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Scene&lt;/span&gt;(root);\n        scene.getStylesheets().add(getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;style/main-style.css&quot;&lt;/span&gt;).toExternalForm());\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        Application.launch(args);\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To load resources which are not in the same package, or a subpackage, of the class from which you&apos;re loading them, you need to use the absolute path:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fxmlResource&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getClass().getResource(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/org/jamesd/examples/resourcedemo/fxml/MainView.fxml&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;\nMaven (and similar) standard layouts&lt;/h2&gt;\n&lt;p&gt;Maven and other dependency management and build tools recommend a &lt;em&gt;source&lt;/em&gt; folder layout in which resources are separated from Java source files. The Maven layout version of the previous example looks like:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/JW08B.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/JW08B.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;It is important to understand how this is built to assemble the application:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;*.java&lt;/code&gt; files in the &lt;em&gt;source&lt;/em&gt; folder &lt;code&gt;src/main/java&lt;/code&gt; are compiled to class files, which are deployed to the build folder or jar file.&lt;/li&gt;\n&lt;li&gt;Resources in the &lt;em&gt;resource&lt;/em&gt; folder &lt;code&gt;src/main/resources&lt;/code&gt; are &lt;em&gt;copied&lt;/em&gt; to the build folder or jar file.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In this example, because the resources are in folders that correspond to subpackages of the packages where the source code is defined, the resulting build (which, by default with Maven, is in &lt;code&gt;target/classes&lt;/code&gt;) consists of a single structure.&lt;/p&gt;\n&lt;p&gt;Note that both &lt;code&gt;src/main/java&lt;/code&gt; and &lt;code&gt;src/main/resources&lt;/code&gt; are considered the root for the corresponding structure in the build, so only their content, not the folders themselves, are part of the build. In other words, there is no &lt;code&gt;resources&lt;/code&gt; folder available at runtime. The build structure is shown below in the &quot;troubleshooting&quot; section.&lt;/p&gt;\n&lt;p&gt;Notice that the IDE in this case (Eclipse) displays the &lt;code&gt;src/main/java&lt;/code&gt; source folder differently to the &lt;code&gt;src/main/resources&lt;/code&gt; folder; in the first case it displays &lt;em&gt;packages&lt;/em&gt;, but for the resource folder it displays &lt;em&gt;folders&lt;/em&gt;. Make sure you know if you are creating packages (whose names are &lt;code&gt;.&lt;/code&gt;-delimited) or folders (whose names must not contain &lt;code&gt;.&lt;/code&gt;, or any other character not valid in a Java identifier) in your IDE.&lt;/p&gt;\n&lt;h2&gt;\nTroubleshooting&lt;/h2&gt;\n&lt;p&gt;If you get errors you do not expect, first check the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Make sure you are not using invalid names for your resources. This includes using &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;..&lt;/code&gt; in the resource path.&lt;/li&gt;\n&lt;li&gt;Make sure you are using relative paths where expected, and absolute paths where expected. for &lt;code&gt;Class.getResource(...)&lt;/code&gt; the path is absolute if it has a leading &lt;code&gt;/&lt;/code&gt;, and relative otherwise. For &lt;code&gt;ClassLoader.getResource(...)&lt;/code&gt;, the path is always absolute, and &lt;strong&gt;must not&lt;/strong&gt; start with a &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Remember that absolute paths are defined relative to the &lt;em&gt;classpath&lt;/em&gt;. Typically the root of the classpath is the union of all source and resource folders in your IDE.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If all this seems correct, and you still see errors, check the &lt;em&gt;build&lt;/em&gt; or deployment folder. The exact location of this folder will vary by IDE and build tool. If you are using Maven, by default it is &lt;code&gt;target/classes&lt;/code&gt;. Other build tools and IDEs will deploy to folders named &lt;code&gt;bin&lt;/code&gt;, &lt;code&gt;classes&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, or &lt;code&gt;out&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Often, your IDE will not show the build folder, so you may need to check it with the system file explorer.&lt;/p&gt;\n&lt;p&gt;The combined source and build structure  for the Maven example above is&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/qX18M.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/qX18M.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;If you are generating a jar file, some IDEs may allow you to expand the jar file in a tree view to inspect its contents. You can also check the contents from the command line with &lt;code&gt;jar tf file.jar&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;$ jar -tf resource-demo-0.0.1-SNAPSHOT.jar \nMETA-INF/\nMETA-INF/MANIFEST.MF\norg/\norg/jamesd/\norg/jamesd/examples/\norg/jamesd/examples/resourcedemo/\norg/jamesd/examples/resourcedemo/images/\norg/jamesd/examples/resourcedemo/style/\norg/jamesd/examples/resourcedemo/fxml/\norg/jamesd/examples/resourcedemo/images/so-logo.png\norg/jamesd/examples/resourcedemo/style/main-style.css\norg/jamesd/examples/resourcedemo/Controller.class\norg/jamesd/examples/resourcedemo/fxml/MainView.fxml\norg/jamesd/examples/resourcedemo/App.class\nmodule-info.class\nMETA-INF/maven/\nMETA-INF/maven/org.jamesd.examples/\nMETA-INF/maven/org.jamesd.examples/resource-demo/\nMETA-INF/maven/org.jamesd.examples/resource-demo/pom.xml\nMETA-INF/maven/org.jamesd.examples/resource-demo/pom.properties\n$ \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If the resources are not being deployed, or are being deployed to an unexpected location, check the configuration of your build tool or IDE.&lt;/p&gt;\n&lt;h2&gt;Example image loading troubleshooting code&lt;/h2&gt;\n&lt;p&gt;This code is deliberately more verbose than is strictly necessarily to facilitate adding additional debugging information for the image loading process.  It also uses System.out rather than a logger for easier portability.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;resourcePathString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/img/wumpus.png&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; loadImage(resourcePathString);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Image &lt;span class=&quot;hljs-title function_&quot;&gt;loadImage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String resourcePathString)&lt;/span&gt; {\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Attempting to load an image from the resourcePath: &quot;&lt;/span&gt; + resourcePathString);\n    &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; HelloApplication.class.getResource(resourcePathString);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (resource == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Resource does not exist: &quot;&lt;/span&gt; + resourcePathString);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; resource.toExternalForm();\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Image path: &quot;&lt;/span&gt; + path);\n\n    &lt;span class=&quot;hljs-type&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Image&lt;/span&gt;(path);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Image load error?  &quot;&lt;/span&gt; + image.isError());\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Image load exception? &quot;&lt;/span&gt; + image.getException());\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!image.isError()) {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Successfully loaded an image from &quot;&lt;/span&gt; + resourcePathString);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; image;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;External Tutorial Reference&lt;/h2&gt;\n&lt;p&gt;A useful external tutorial for resource location is Eden coding&apos;s tutorial:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://edencoding.com/where-to-put-resource-files-in-javafx/&quot; rel=&quot;noreferrer&quot;&gt;Where to put resource files in JavaFX&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The nice thing about the Eden coding tutorial is that it is comprehensive.  In addition to covering the information on lookups from Java code which is in this question.  The Eden tutorial covers topics such as locating resources that are encoded as urls in CSS, or resource references in FXML using an &lt;code&gt;@&lt;/code&gt; specifier or &lt;code&gt;fx:include&lt;/code&gt; element (which are topics currently not directly covered in this answer).&lt;/p&gt;\n    "],"id":484,"title":"How do I determine the correct path for FXML files, CSS files, Images, and other resources needed by my JavaFX Application?","content":"\n                \n&lt;p&gt;My JavaFX application needs to be able to find the FXML files to load them with the &lt;code&gt;FXMLLoader&lt;/code&gt;, as well as stylesheets (CSS files) and images. When I try to load these, I often get errors, or the item I&apos;m trying to load simply doesn&apos;t load at runtime.&lt;/p&gt;\n\n&lt;p&gt;For FXML files, the error message I see includes&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Caused by: java.lang.NullPointerException: location is not set\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For images, the stack trace includes&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Caused by: java.lang.IllegalArgumentException: Invalid URL: Invalid URL or resource not found\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How do I figure out the correct resource path for these resources?&lt;/p&gt;\n    ","slug":"how-do-i-determine-the-correct-path-for-fxml-files-css-files-images-and-other-resources-needed-by-my-javafx-application-1657388143988","postType":"QUESTION","createdAt":"2022-07-09T17:35:43.000Z","updatedAt":"2022-07-09T17:35:43.000Z","tags":[{"id":2439,"name":"javafx","slug":"javafx","createdAt":"2022-07-09T17:35:44.000Z","updatedAt":"2022-07-09T17:35:44.000Z","Questions_Tags":{"questionId":484,"tagId":2439}}],"relatedQuestions":[{"title":"How do I determine the correct path for FXML files, CSS files, Images, and other resources needed by my JavaFX Application?","slug":"how-do-i-determine-the-correct-path-for-fxml-files-css-files-images-and-other-resources-needed-by-my-javafx-application-1657388143988","tags":[{"name":"javafx","Questions_Tags":{"questionId":484,"tagId":2439}}]}]},"randomQuestions":[{"title":"Difference between sh and Bash","slug":"difference-between-sh-and-bash-1657388197713"},{"title":"Sorting an array of objects by property values","slug":"sorting-an-array-of-objects-by-property-values-1657387447490"},{"title":"Why does this PDO statement silently fail?","slug":"why-does-this-pdo-statement-silently-fail-1657384892133"},{"title":"How do I import a module given the full path?","slug":"how-do-i-import-a-module-given-the-full-path-1657388139965"},{"title":"How to add JTable in JPanel with null layout?","slug":"how-to-add-jtable-in-jpanel-with-null-layout-1657384590912"},{"title":"Get the cartesian product of a series of lists?","slug":"get-the-cartesian-product-of-a-series-of-lists-1657387709890"},{"title":"How do you convert a byte array to a hexadecimal string, and vice versa?","slug":"how-do-you-convert-a-byte-array-to-a-hexadecimal-string-and-vice-versa-1657388010428"},{"title":"How do I use extern to share variables between source files?","slug":"how-do-i-use-extern-to-share-variables-between-source-files-1657387453605"},{"title":"What is the canonical way to check for errors using the CUDA runtime API?","slug":"what-is-the-canonical-way-to-check-for-errors-using-the-cuda-runtime-api-1657387302698"},{"title":"How can I fix 'android.os.NetworkOnMainThreadException'?","slug":"how-can-i-fix-'android.os.networkonmainthreadexception'-1657384454963"},{"title":"Trouble with UTF-8 characters; what I see is not what I stored","slug":"trouble-with-utf-8-characters-what-i-see-is-not-what-i-stored-1657384817490"},{"title":"How to deal with mysqli problems? mysqli_fetch_array(): Argument #1 must be of type mysqli_result","slug":"how-to-deal-with-mysqli-problems-mysqli_fetch_array():-argument-1-must-be-of-type-mysqli_result-1657384360922"},{"title":"PHP code is not being executed, but the code shows in the browser source code","slug":"php-code-is-not-being-executed-but-the-code-shows-in-the-browser-source-code-1657384553581"},{"title":"What to do Regular expression pattern doesn't match anywhere in string?","slug":"what-to-do-regular-expression-pattern-doesn't-match-anywhere-in-string-1657388095896"},{"title":"Why do I get a segmentation fault when writing to a \"char *s\" initialized with a string literal, but not \"char s[]\"?","slug":"why-do-i-get-a-segmentation-fault-when-writing-to-a-\"char-*s\"-initialized-with-a-string-literal-but-not-\"char-s\"-1657385511046"},{"title":"How to make function decorators and chain them together?","slug":"how-to-make-function-decorators-and-chain-them-together-1657388180803"},{"title":"My regex is matching too much. How do I make it stop? [duplicate]","slug":"my-regex-is-matching-too-much.-how-do-i-make-it-stop-duplicate-1657384845028"},{"title":"Cleansing User Passwords","slug":"cleansing-user-passwords-1657387365583"},{"title":"What is JSONP, and why was it created?","slug":"what-is-jsonp-and-why-was-it-created-1657387770563"},{"title":"How to access the correct `this` inside a callback","slug":"how-to-access-the-correct-this-inside-a-callback-1657384283261"}]},"__N_SSG":true}