{"pageProps":{"data":{"answer":["\n&lt;p&gt;The &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/scanf.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;scanf()&lt;/code&gt;&lt;/a&gt; function skips leading whitespace automatically before trying to parse conversions other than characters.  The character formats (primarily &lt;code&gt;%c&lt;/code&gt;; also scan sets &lt;code&gt;%[]&lt;/code&gt;  and &lt;code&gt;%n&lt;/code&gt;) are the exception; they don&apos;t skip whitespace.&lt;/p&gt;\n\n&lt;p&gt;Use &lt;code&gt;&quot; %c&quot;&lt;/code&gt; with a leading blank to skip optional white space.  Do not use a trailing blank in a &lt;code&gt;scanf()&lt;/code&gt; format string.&lt;/p&gt;\n\n&lt;p&gt;Note that this still doesn&apos;t consume any trailing whitespace left in the input stream, not even to the end of a line, so beware of that if also using &lt;a href=&quot;http://en.cppreference.com/w/c/io/getchar&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getchar()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://en.cppreference.com/w/c/io/fgets&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;fgets()&lt;/code&gt;&lt;/a&gt; on the same input stream.  We&apos;re just getting scanf to skip over whitespace &lt;em&gt;before&lt;/em&gt; conversions, like it does for &lt;code&gt;%d&lt;/code&gt; and other non-character conversions.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Note that non-whitespace &quot;directives&quot; (to use &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/scanf.html&quot; rel=&quot;noreferrer&quot;&gt;POSIX scanf terminology&lt;/a&gt;) other than conversions, like the literal text in &lt;code&gt;scanf(&quot;order = %d&quot;, &amp;amp;order);&lt;/code&gt; doesn&apos;t skip whitespace either.  The literal &lt;code&gt;order&lt;/code&gt; has to match the next character to be read.&lt;/p&gt;\n\n&lt;p&gt;So you probably want &lt;code&gt;&quot; order = %d&quot;&lt;/code&gt; there if you want to skip a newline from the previous line but still require a literal match on a fixed string, &lt;a href=&quot;https://stackoverflow.com/questions/49923312/scanf-run-twice-instead-of-one-time-at-assembly-x86-64&quot;&gt;like this question&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;scanf(&quot; %c&quot;, &amp;amp;c2);&lt;/code&gt;. This will solve your problem.&lt;/p&gt;\n    ","\n&lt;p&gt;Another option (that I got from &lt;a href=&quot;https://faq.cprogramming.com/cgi-bin/smartfaq.cgi?answer=1352443831&amp;amp;id=1043284392&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;) is to read and discard the newline by using the &lt;em&gt;assignment-supression option&lt;/em&gt;. To do that, we just put a format to read a character with an asterisk between &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d%*c&quot;&lt;/span&gt;,&amp;amp;a); &lt;span class=&quot;hljs-comment&quot;&gt;// line 1&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c%*c&quot;&lt;/span&gt;,&amp;amp;c1); &lt;span class=&quot;hljs-comment&quot;&gt;// line 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;scanf&lt;/code&gt; will then read the next char (that is, the newline) but not assign it to any pointer.&lt;/p&gt;\n\n&lt;p&gt;In the end, however, I would second &lt;a href=&quot;https://faq.cprogramming.com/cgi-bin/smartfaq.cgi?answer=1352443831&amp;amp;id=1043284392&quot; rel=&quot;noreferrer&quot;&gt;the FAQ&apos;s last option&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Or, depending on your requirements, you could also forget about scanf()/getchar(), use fgets() to get a line of text from the user and parse it yourself. &lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;getchar()&lt;/code&gt; before calling second &lt;code&gt;scanf()&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;, &amp;amp;c1);\ngetchar();  &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;== remove newline&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;, &amp;amp;c2);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To echo what I have posted in &lt;a href=&quot;https://stackoverflow.com/a/52720064/6372809&quot;&gt;another answer about C++&lt;/a&gt;: I suggest to toss &lt;code&gt;scanf()&lt;/code&gt; away, to never use it, and to instead use &lt;code&gt;fgets()&lt;/code&gt; and &lt;code&gt;sscanf()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The reason for this is, that at least in Unix-like systems by default, the terminal your CLI program runs on does some processing of the user input before your program sees it. It buffers input until a newline is entered, and allows for some rudimentary line editing, like making backspace work.&lt;/p&gt;\n&lt;p&gt;So, you can never get a single character at a time, or a few single characters, just a full line. But that&apos;s not what e.g. &lt;code&gt;scanf(&quot;%d&quot;)&lt;/code&gt; processes, instead it processes just the digits, &lt;em&gt;and stops there&lt;/em&gt;, leaving the rest buffered in the C library, for a future &lt;code&gt;stdio&lt;/code&gt; function to use. If your program has e.g.&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;a);\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a word: &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, word);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and you enter the line &lt;code&gt;123 abcd&lt;/code&gt;, it completes &lt;em&gt;both&lt;/em&gt; &lt;code&gt;scanf()&lt;/code&gt;s at once, but only after a newline is given. The first &lt;code&gt;scanf()&lt;/code&gt; doesn&apos;t return when a user has hit space, even though that&apos;s where the number ends (because at that point the line is still in the terminal&apos;s line buffer); and the second &lt;code&gt;scanf()&lt;/code&gt; doesn&apos;t wait for you to enter another line (because the input buffer already contains enough to fill the &lt;code&gt;%s&lt;/code&gt; conversion).&lt;/p&gt;\n&lt;p&gt;This isn&apos;t what users usually expect!&lt;/p&gt;\n&lt;p&gt;Instead, they expect that hitting enter completes the input, and if you hit enter, you either get a default value, or an error, with possibly a suggestion to please really just give the answer.&lt;/p&gt;\n&lt;p&gt;You can&apos;t really do that with &lt;code&gt;scanf(&quot;%d&quot;)&lt;/code&gt;. If the user just hits enter, nothing happens. Because &lt;code&gt;scanf()&lt;/code&gt; is still waiting for the number. The terminal sends the line onward, but your program doesn&apos;t see it, because &lt;code&gt;scanf()&lt;/code&gt; eats it. You don&apos;t get a chance to react to the user&apos;s mistake.&lt;/p&gt;\n&lt;p&gt;That&apos;s also not very useful.&lt;/p&gt;\n&lt;p&gt;Hence, I suggest using &lt;code&gt;fgets()&lt;/code&gt; or &lt;code&gt;getline()&lt;/code&gt; to read a full line of input at a time. This exactly matches what the terminal gives, and always gives your program control after the user has entered a line. What you do with the input line is up to you, if you want a number, you can use &lt;code&gt;atoi()&lt;/code&gt;, &lt;code&gt;strtol()&lt;/code&gt;, or even &lt;code&gt;sscanf(buf, &quot;%d&quot;, &amp;amp;a)&lt;/code&gt; to parse the number. &lt;code&gt;sscanf()&lt;/code&gt; doesn&apos;t have the same mismatch as &lt;code&gt;scanf()&lt;/code&gt;, because the buffer it reads from is limited in size, and when it ends, it ends -- the function can&apos;t wait for more.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;(&lt;code&gt;fscanf()&lt;/code&gt; on a regular file can also be fine if the file format is one that supports how it skims over newlines like any whitespace. For line-oriented data, I&apos;d still use &lt;code&gt;fgets()&lt;/code&gt; and &lt;code&gt;sscanf()&lt;/code&gt;.)&lt;/sup&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;So, instead of what I had above, use something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;);\n\nfgets(buf, bufsize, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;sscanf&lt;/span&gt;(buf, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;a);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or, actually, check the return value of &lt;code&gt;sscanf()&lt;/code&gt; too, so you can detect empty lines and otherwise invalid data:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; bufsize = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; buf[bufsize];\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ret;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; word[bufsize];\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;);\n    fgets(buf, bufsize, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n\n    ret = &lt;span class=&quot;hljs-built_in&quot;&gt;sscanf&lt;/span&gt;(buf, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;a);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ret != &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ok, you don&apos;t have to.\\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a word: &quot;&lt;/span&gt;);\n    fgets(buf, bufsize, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n\n    ret = &lt;span class=&quot;hljs-built_in&quot;&gt;sscanf&lt;/span&gt;(buf, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, word);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ret != &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;You make me sad.\\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You entered %d and %s\\n&quot;&lt;/span&gt;, a, word);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Of course, if you want the program to insist, you can create a simple function to loop over the &lt;code&gt;fgets()&lt;/code&gt; and &lt;code&gt;sscanf()&lt;/code&gt; until the user deigns to do what they&apos;re told; or to just exit with an error immediately. Depends on what you think your program should do if the user doesn&apos;t want to play ball.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;You could do something similar e.g. by looping over &lt;code&gt;getchar()&lt;/code&gt; to read characters until a newline after &lt;code&gt;scanf(&quot;%d&quot;)&lt;/code&gt; returned, thus clearing up any garbage left in the buffer, but that doesn&apos;t do anything about the case where the user just hits enter on an empty line. Anyway, &lt;code&gt;fgets()&lt;/code&gt; would read until a newline, so you don&apos;t have to do it yourself.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*Take char input using scanf after int input using scanf just use fflush(stdin) function  after int input */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;conio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x;\n  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; y;\n  clrscr();\n  &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot; enter an int &quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;x);\n  fflush(&lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n  &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n Now enter a char&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;,&amp;amp;y);\n  &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n X=%d and Y=%c&quot;&lt;/span&gt;,x,y);\n  getch();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":126,"title":"scanf() leaves the newline character in the buffer","content":"\n                \n&lt;p&gt;I have the following program:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, b;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c1, c2;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter something: &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;a); &lt;span class=&quot;hljs-comment&quot;&gt;// line 1&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter other something: &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;b); &lt;span class=&quot;hljs-comment&quot;&gt;// line 2&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter a char: &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;, &amp;amp;c1); &lt;span class=&quot;hljs-comment&quot;&gt;// line 3&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter another char: &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;, &amp;amp;c2); &lt;span class=&quot;hljs-comment&quot;&gt;// line 4&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Done&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// line 5&lt;/span&gt;\n\n    system(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PAUSE&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As I read in the C book, the author says that &lt;code&gt;scanf()&lt;/code&gt; left a newline character in the buffer, therefore, the program does not stop at line 4 for user to enter the data, rather it stores the new line character in &lt;code&gt;c2&lt;/code&gt; and moves to line 5.&lt;/p&gt;\n&lt;p&gt;Is that right?&lt;/p&gt;\n&lt;p&gt;However, does this only happen with &lt;code&gt;char&lt;/code&gt; data types? Because I did not see this problem with &lt;code&gt;int&lt;/code&gt; data types as in line 1, 2, 3. Is it right?&lt;/p&gt;\n    ","slug":"scanf()-leaves-the-newline-character-in-the-buffer-1657384699202","postType":"QUESTION","createdAt":"2022-07-09T16:38:19.000Z","updatedAt":"2022-07-09T16:38:19.000Z","tags":[{"id":459,"name":"scanf","slug":"scanf","createdAt":"2022-07-09T16:38:19.000Z","updatedAt":"2022-07-09T16:38:19.000Z","Questions_Tags":{"questionId":126,"tagId":459}}],"relatedQuestions":[{"title":"scanf() leaves the newline character in the buffer","slug":"scanf()-leaves-the-newline-character-in-the-buffer-1657384699202","tags":[{"name":"scanf","Questions_Tags":{"questionId":126,"tagId":459}}]}]},"randomQuestions":[{"title":"What is this weird colon-member (\" : \") syntax in the constructor?","slug":"what-is-this-weird-colon-member-(\"-:-\")-syntax-in-the-constructor-1657387264047"},{"title":"Using i and j as variables in MATLAB","slug":"using-i-and-j-as-variables-in-matlab-1657388506358"},{"title":"How to append text to an existing file in Java?","slug":"how-to-append-text-to-an-existing-file-in-java-1657388492377"},{"title":"What is the !! (not not) operator in JavaScript?","slug":"what-is-the-!!-(not-not)-operator-in-javascript-1657387947844"},{"title":"What's the simplest way to print a Java array?","slug":"what's-the-simplest-way-to-print-a-java-array-1657384702397"},{"title":"Iterating through a Collection, avoiding ConcurrentModificationException when removing objects in a loop","slug":"iterating-through-a-collection-avoiding-concurrentmodificationexception-when-removing-objects-in-a-loop-1657387311824"},{"title":"How to use PHP's password_hash to hash and verify passwords","slug":"how-to-use-php's-password_hash-to-hash-and-verify-passwords-1657387808784"},{"title":"How to filter object array based on attributes?","slug":"how-to-filter-object-array-based-on-attributes-1657388211247"},{"title":"How to deal with SettingWithCopyWarning in Pandas","slug":"how-to-deal-with-settingwithcopywarning-in-pandas-1657384778377"},{"title":"The ViewData item that has the key 'XXX' is of type 'System.Int32' but must be of type 'IEnumerable<SelectListItem>'","slug":"the-viewdata-item-that-has-the-key-'xxx'-is-of-type-'system.int32'-but-must-be-of-type-'ienumerablelessselectlistitemgreater'-1657388454191"},{"title":"How do I merge two dictionaries in a single expression?","slug":"how-do-i-merge-two-dictionaries-in-a-single-expression-1657387593160"},{"title":"How do I profile C++ code running on Linux?","slug":"how-do-i-profile-c++-code-running-on-linux-1657384754272"},{"title":"What is the purpose of the var keyword and when should I use it (or omit it)?","slug":"what-is-the-purpose-of-the-var-keyword-and-when-should-i-use-it-(or-omit-it)-1657387525538"},{"title":"How to unnest (explode) a column in a pandas DataFrame, into multiple rows","slug":"how-to-unnest-(explode)-a-column-in-a-pandas-dataframe-into-multiple-rows-1657387806735"},{"title":"Self-references in object literals / initializers","slug":"self-references-in-object-literals-initializers-1657384835356"},{"title":"How does the SQL injection from the \"Bobby Tables\" XKCD comic work?","slug":"how-does-the-sql-injection-from-the-\"bobby-tables\"-xkcd-comic-work-1657384621653"},{"title":"Dynamically access object property using variable","slug":"dynamically-access-object-property-using-variable-1657384439324"},{"title":"What does if __name__ == \"__main__\": do?","slug":"what-does-if-__name__-\"__main__\":-do-1657384825815"},{"title":"Why are floating point numbers inaccurate?","slug":"why-are-floating-point-numbers-inaccurate-1657387346111"},{"title":"How do I sort a dictionary by value?","slug":"how-do-i-sort-a-dictionary-by-value-1657385485049"}]},"__N_SSG":true}