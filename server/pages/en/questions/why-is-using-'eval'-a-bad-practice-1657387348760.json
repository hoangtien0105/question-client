{"pageProps":{"data":{"answer":["\n&lt;p&gt;Yes, using &lt;code&gt;eval&lt;/code&gt; is a bad practice. Just to name a few reasons:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;There is almost always a better way to do it&lt;/li&gt;\n&lt;li&gt;Very dangerous and insecure&lt;/li&gt;\n&lt;li&gt;Makes debugging difficult&lt;/li&gt;\n&lt;li&gt;Slow&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;In your case you can use &lt;a href=&quot;http://docs.python.org/library/functions.html#setattr&quot; rel=&quot;noreferrer&quot;&gt;setattr&lt;/a&gt; instead:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Song&lt;/span&gt;:\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;The class to store the details of each song&quot;&quot;&quot;&lt;/span&gt;\n    attsToStore=(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Artist&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Album&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Genre&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Location&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; att &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self.attsToStore:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(self, att.lower(), &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setDetail&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, key, val&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self.attsToStore:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(self, key.lower(), val)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There are some cases where you have to use &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;exec&lt;/code&gt;. But they are rare. Using &lt;code&gt;eval&lt;/code&gt; in your case is a bad practice for sure. I&apos;m emphasizing on bad practice because &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt; are frequently used in the wrong place.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Replying to the comments:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;It looks like some disagree that &lt;code&gt;eval&lt;/code&gt; is &apos;very dangerous and insecure&apos; in the OP case. That might be true for this specific case but not in general. The question was general and the reasons I listed are true for the general case as well.&lt;/p&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;eval&lt;/code&gt; is weak, not a clearly &lt;em&gt;bad&lt;/em&gt; practice.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;It violates the &quot;Fundamental Principle of Software&quot;.  Your source is not the sum total of what&apos;s executable.  In addition to your source, there are the arguments to &lt;code&gt;eval&lt;/code&gt;, which must be clearly understood.  For this reason, it&apos;s the tool of last resort.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It&apos;s usually a sign of thoughtless design.  There&apos;s rarely a good reason for dynamic source code, built on-the-fly.  Almost anything can be done with delegation and other OO design techniques.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It leads to relatively slow on-the-fly compilation of small pieces of code.  An overhead which can be avoided by using better design patterns.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;As a footnote, in the hands of deranged sociopaths, it may not work out well.  However, when confronted with deranged sociopathic users or administrators, it&apos;s best to not give them interpreted Python in the first place.  In the hands of the truly evil, Python can a liability; &lt;code&gt;eval&lt;/code&gt; doesn&apos;t increase the risk at all.  &lt;/p&gt;\n    ","\n&lt;p&gt;Yes, it is:&lt;/p&gt;\n\n&lt;p&gt;Hack using Python:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;())\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;__import__(&apos;os&apos;).listdir(&apos;.&apos;)&quot;&lt;/span&gt;\n...........\n...........   &lt;span class=&quot;hljs-comment&quot;&gt;#dir listing&lt;/span&gt;\n...........\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The below code will list all tasks running on a Windows machine.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;())\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;__import__(&apos;subprocess&apos;).Popen([&apos;tasklist&apos;],stdout=__import__(&apos;subprocess&apos;).PIPE).communicate()[0]&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Linux:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;())\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;__import__(&apos;subprocess&apos;).Popen([&apos;ps&apos;, &apos;aux&apos;],stdout=__import__(&apos;subprocess&apos;).PIPE).communicate()[0]&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In this case, yes. Instead of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;self.Foo=val&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you should use the &lt;a href=&quot;http://docs.python.org/library/functions.html&quot; rel=&quot;noreferrer&quot;&gt;builtin&lt;/a&gt; function &lt;code&gt;setattr&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(self, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo&apos;&lt;/span&gt;, val)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s worth noting that for the specific problem in question, there are several alternatives to using &lt;code&gt;eval&lt;/code&gt;:&lt;/p&gt;\n\n&lt;p&gt;The simplest, as noted, is using &lt;code&gt;setattr&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; attsToStore:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(self, name, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A less obvious approach is updating the object&apos;s &lt;code&gt;__dict__&lt;/code&gt; object directly.  If all you want to do is initialize the attributes to &lt;code&gt;None&lt;/code&gt;, then this is less straightforward than the above.  But consider this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, **kwargs&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self.attsToStore:\n       self.__dict__[name] = kwargs.get(name, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This allows you to pass keyword arguments to the constructor, e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s = Song(name=&lt;span class=&quot;hljs-string&quot;&gt;&apos;History&apos;&lt;/span&gt;, artist=&lt;span class=&quot;hljs-string&quot;&gt;&apos;The Verve&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It also allows you to make your use of &lt;code&gt;locals()&lt;/code&gt; more explicit, e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s = Song(**&lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...and, if you really want to assign &lt;code&gt;None&lt;/code&gt; to the attributes whose names are found in &lt;code&gt;locals()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s = Song(**&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;([(k, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;().keys()]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another approach to providing an object with default values for a list of attributes is to define the class&apos;s &lt;code&gt;__getattr__&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__getattr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self.attsToStore:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; NameError, name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This method gets called when the named attribute isn&apos;t found in the normal way.  This approach somewhat less straightforward than simply setting the attributes in the constructor or updating the &lt;code&gt;__dict__&lt;/code&gt;, but it has the merit of not actually creating the attribute unless it exists, which can pretty substantially reduce the class&apos;s memory usage.&lt;/p&gt;\n\n&lt;p&gt;The point of all this:  There are lots of reasons, in general, to avoid &lt;code&gt;eval&lt;/code&gt; - the security problem of executing code that you don&apos;t control, the practical problem of code you can&apos;t debug, etc.  But an even more important reason is that generally, you don&apos;t need to use it.  Python exposes so much of its internal mechanisms to the programmer that you rarely really need to write code that writes code.&lt;/p&gt;\n    ","\n&lt;p&gt;Other users pointed out how your code can be changed as to not depend on &lt;code&gt;eval&lt;/code&gt;; I&apos;ll offer a legitimate use-case for using &lt;code&gt;eval&lt;/code&gt;, one that is found even in CPython: &lt;em&gt;testing&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s one example I found in &lt;a href=&quot;https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Lib/test/test_unary.py#L43&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;test_unary.py&lt;/code&gt;&lt;/a&gt; where a test on whether &lt;code&gt;(+|-|~)b&apos;a&apos;&lt;/code&gt; raises a &lt;code&gt;TypeError&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_bad_types&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; op &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;~&apos;&lt;/span&gt;:\n        self.assertRaises(TypeError, &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;, op + &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&apos;a&apos;&quot;&lt;/span&gt;)\n        self.assertRaises(TypeError, &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;, op + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;a&apos;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The usage is clearly not bad practice here; &lt;em&gt;you define the input&lt;/em&gt; and merely observe behavior. &lt;code&gt;eval&lt;/code&gt; is handy for testing.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/python/cpython/search?l=Python&amp;amp;p=1&amp;amp;q=eval&amp;amp;utf8=%E2%9C%93&quot; rel=&quot;noreferrer&quot;&gt;Take a look at this search&lt;/a&gt; for &lt;code&gt;eval&lt;/code&gt;, performed on the CPython git repository; testing with eval is heavily used.&lt;/p&gt;\n    ","\n&lt;p&gt;When &lt;code&gt;eval()&lt;/code&gt; is used to process user-provided input, you enable the user to &lt;a href=&quot;https://docs.python.org/3/library/code.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Drop-to-REPL&lt;/a&gt; providing something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;__import__(&apos;code&apos;).InteractiveConsole(locals=globals()).interact()&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may get away with it, but normally you don&apos;t want vectors for &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrary_code_execution&quot; rel=&quot;nofollow noreferrer&quot;&gt;arbitrary code execution&lt;/a&gt; in your applications.&lt;/p&gt;\n    ","\n&lt;p&gt;In addition to @Nadia Alramli answer, since I am new to Python and was eager to check how using &lt;code&gt;eval&lt;/code&gt; will affect the &lt;em&gt;timings&lt;/em&gt;, I tried a small program and below were the observations: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Difference while using print() with eval() and w/o eval() to print an int = 0.528969s per 100000 evals()&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strOfNos&lt;/span&gt;():\n    s = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;):\n        s.append(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(x))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s\n\nstrOfNos()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(datetime.now())\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; strOfNos():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x) &lt;span class=&quot;hljs-comment&quot;&gt;#print(eval(x))&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(datetime.now())\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#when using eval(int)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#2018-10-29 12:36:08.206022&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#2018-10-29 12:36:10.407911&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#diff = 2.201889 s&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#when using int only&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#2018-10-29 12:37:50.022753&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#2018-10-29 12:37:51.090045&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#diff = 1.67292&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":231,"title":"Why is using 'eval' a bad practice?","content":"\n                \n&lt;p&gt;I use the following class to easily store data of my songs.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Song&lt;/span&gt;:\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;The class to store the details of each song&quot;&quot;&quot;&lt;/span&gt;\n    attsToStore=(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Artist&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Album&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Genre&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Location&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; att &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self.attsToStore:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;self.%s=None&apos;&lt;/span&gt;%(att.lower()) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setDetail&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, key, val&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; self.attsToStore:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;self.%s=val&apos;&lt;/span&gt;%(key.lower()) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I feel that this is just much more extensible than writing out an &lt;code&gt;if/else&lt;/code&gt; block. However, I have heard that &lt;code&gt;eval&lt;/code&gt; is unsafe. Is it? What is the risk? How can I solve the underlying problem in my class (setting attributes of &lt;code&gt;self&lt;/code&gt; dynamically) without incurring that risk?&lt;/p&gt;\n    ","slug":"why-is-using-'eval'-a-bad-practice-1657387348760","postType":"QUESTION","createdAt":"2022-07-09T17:22:28.000Z","updatedAt":"2022-07-09T17:22:28.000Z","tags":[{"id":1554,"name":"eval","slug":"eval","createdAt":"2022-07-09T17:22:28.000Z","updatedAt":"2022-07-09T17:22:28.000Z","Questions_Tags":{"questionId":231,"tagId":1554}}],"relatedQuestions":[{"title":"Why is using 'eval' a bad practice?","slug":"why-is-using-'eval'-a-bad-practice-1657387348760","tags":[{"name":"eval","Questions_Tags":{"questionId":231,"tagId":1554}}]}]},"randomQuestions":[{"title":"input() error - NameError: name '...' is not defined","slug":"input()-error-nameerror:-name-'...'-is-not-defined-1657388497243"},{"title":"Switch between two frames in tkinter?","slug":"switch-between-two-frames-in-tkinter-1657388528781"},{"title":"Converting string into datetime","slug":"converting-string-into-datetime-1657387717295"},{"title":"How do you parse and process HTML/XML in PHP?","slug":"how-do-you-parse-and-process-htmlxml-in-php-1657384351267"},{"title":"Why can't an element with a z-index value cover its child?","slug":"why-can't-an-element-with-a-z-index-value-cover-its-child-1657387707187"},{"title":"Collapse / concatenate / aggregate a column to a single comma separated string within each group","slug":"collapse-concatenate-aggregate-a-column-to-a-single-comma-separated-string-within-each-group-1657387870901"},{"title":"How to include a PHP variable inside a MySQL statement","slug":"how-to-include-a-php-variable-inside-a-mysql-statement-1657387669365"},{"title":"What is JavaScript's highest integer value that a number can go to without losing precision?","slug":"what-is-javascript's-highest-integer-value-that-a-number-can-go-to-without-losing-precision-1657387622983"},{"title":"When does SQLiteOpenHelper onCreate() / onUpgrade() run?","slug":"when-does-sqliteopenhelper-oncreate()-onupgrade()-run-1657384883864"},{"title":"Why can't I store a value and a reference to that value in the same struct?","slug":"why-can't-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct-1657387506828"},{"title":"Get the data received in a Flask request","slug":"get-the-data-received-in-a-flask-request-1657387804432"},{"title":"How to close/hide the Android soft keyboard programmatically?","slug":"how-to-closehide-the-android-soft-keyboard-programmatically-1657388217420"},{"title":"Identifying and solving javax.el.PropertyNotFoundException: Target Unreachable","slug":"identifying-and-solving-javax.el.propertynotfoundexception:-target-unreachable-1657388164753"},{"title":"Event binding on dynamically created elements?","slug":"event-binding-on-dynamically-created-elements-1657384268057"},{"title":"Fetch the rows which have the Max value for a column for each distinct value of another column","slug":"fetch-the-rows-which-have-the-max-value-for-a-column-for-each-distinct-value-of-another-column-1657387423925"},{"title":"How do I make Git forget about a file that was tracked, but is now in .gitignore?","slug":"how-do-i-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-.gitignore-1657387328843"},{"title":"Get all unique values in a JavaScript array (remove duplicates)","slug":"get-all-unique-values-in-a-javascript-array-(remove-duplicates)-1657387435296"},{"title":"Why is the gets function so dangerous that it should not be used?","slug":"why-is-the-gets-function-so-dangerous-that-it-should-not-be-used-1657384544362"},{"title":"What is the JavaScript version of sleep()?","slug":"what-is-the-javascript-version-of-sleep()-1657387391406"},{"title":"How to replace all occurrences of a string in JavaScript","slug":"how-to-replace-all-occurrences-of-a-string-in-javascript-1657384895467"}]},"__N_SSG":true}