{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;code&gt;key&lt;/code&gt; is just a variable name.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will simply loop over the keys in the dictionary, rather than the keys and values.  To loop over both key and value you can use the following:&lt;/p&gt;\n\n&lt;p&gt;For Python 3.x:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For Python 2.x:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.iteritems():\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To test for yourself, change the word &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;poop&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In Python 3.x, &lt;code&gt;iteritems()&lt;/code&gt; was replaced with simply &lt;code&gt;items()&lt;/code&gt;, which returns a set-like view backed by the dict, like &lt;code&gt;iteritems()&lt;/code&gt; but even better. \nThis is also available in 2.7 as &lt;code&gt;viewitems()&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;The operation &lt;code&gt;items()&lt;/code&gt; will work for both 2 and 3, but in 2 it will return a list of the dictionary&apos;s &lt;code&gt;(key, value)&lt;/code&gt; pairs, which will not reflect changes to the dict that happen after the &lt;code&gt;items()&lt;/code&gt; call. If you want the 2.x behavior in 3.x, you can call &lt;code&gt;list(d.items())&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s not that key is a special word, but that dictionaries implement the iterator protocol.  You could do this in your class, e.g. see &lt;a href=&quot;https://stackoverflow.com/questions/19151/build-a-basic-python-iterator/24377#24377&quot;&gt;this question&lt;/a&gt; for how to build class iterators.&lt;/p&gt;\n\n&lt;p&gt;In the case of dictionaries, it&apos;s implemented at the C level.  The details are available in &lt;a href=&quot;http://www.python.org/dev/peps/pep-0234/&quot; rel=&quot;noreferrer&quot;&gt;PEP 234&lt;/a&gt;.  In particular, the section titled &quot;Dictionary Iterators&quot;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;ul&gt;\n  &lt;li&gt;&lt;p&gt;Dictionaries implement a tp_iter slot that returns an efficient\n  iterator that iterates over the keys of the dictionary. [...] This \n  means that we can write&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;: ...\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;which is equivalent to, but much faster than&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;.keys(): ...\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;as long as the restriction on modifications to the dictionary\n  (either by the loop or by another thread) are not violated.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;Add methods to dictionaries that return different kinds of\n  iterators explicitly:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;.iterkeys(): ...\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;.itervalues(): ...\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;.iteritems(): ...\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;This means that &lt;code&gt;for x in dict&lt;/code&gt; is shorthand for &lt;code&gt;for x in\n   dict.iterkeys()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In Python 3, &lt;code&gt;dict.iterkeys()&lt;/code&gt;, &lt;code&gt;dict.itervalues()&lt;/code&gt; and &lt;code&gt;dict.iteritems()&lt;/code&gt; are no longer supported. Use &lt;code&gt;dict.keys()&lt;/code&gt;, &lt;code&gt;dict.values()&lt;/code&gt; and &lt;code&gt;dict.items()&lt;/code&gt; instead.&lt;/p&gt;\n    ","\n&lt;p&gt;Iterating over a &lt;code&gt;dict&lt;/code&gt; iterates through its keys in no particular order, as you can see here:&lt;/p&gt;\n&lt;p&gt;(This is &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/39980323/dictionaries-are-ordered-in-python-3-6&quot;&gt;no longer the case in Python 3.6&lt;/a&gt;&lt;/strong&gt;, but note that it&apos;s &lt;strong&gt;not guaranteed&lt;/strong&gt; behaviour yet.)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(d)\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d.keys()\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For your example, it is a better idea to use &lt;code&gt;dict.items()&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d.items()\n[(&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This gives you a list of tuples. When you loop over them like this, each tuple is unpacked into &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; automatically:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k,v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(k, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, v)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; as variable names when looping over a &lt;code&gt;dict&lt;/code&gt; is quite common if the body of the loop is only a few lines. For more complicated loops it may be a good idea to use more descriptive names:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; letter, number &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(letter, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, number)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s a good idea to get into the habit of using format strings:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; letter, number &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;{0} corresponds to {1}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(letter, number))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;key&lt;/code&gt; is simply a variable.&lt;/p&gt;\n&lt;p&gt;For &lt;strong&gt;Python2.X&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; my_var &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; my_var, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, d[my_var]\n\nx corresponds to &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ny corresponds to &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nz corresponds to &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;... or better,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; the_key, the_value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.iteritems():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; the_key, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, the_value\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For &lt;strong&gt;Python3.X&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; the_key, the_value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(the_key, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, the_value)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When you iterate through dictionaries using the &lt;code&gt;for .. in ..&lt;/code&gt;-syntax, it always iterates over the keys (the values are accessible using &lt;code&gt;dictionary[key]&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;To iterate over key-value pairs, use the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;for k,v in dict.iteritems()&lt;/code&gt; in Python 2&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;for k,v in dict.items()&lt;/code&gt; in Python 3&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;This is a very common looping idiom. &lt;code&gt;in&lt;/code&gt; is an operator. For when to use &lt;code&gt;for key in dict&lt;/code&gt; and when it must be &lt;code&gt;for key in dict.keys()&lt;/code&gt; see &lt;a href=&quot;https://web.archive.org/web/20180411011411/http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html&quot; rel=&quot;noreferrer&quot;&gt;David Goodger&apos;s Idiomatic Python article (archived copy)&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I have a use case where I have to iterate through the dict to get the key, value pair, also the index indicating where I am. This is how I do it:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, (key, value) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(d.items()):\n   &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i, key, value)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that the parentheses around the key, value are important, without them, you&apos;d get an &lt;code&gt;ValueError&lt;/code&gt; &quot;not enough values to unpack&quot;.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;h2&gt;Iterating over dictionaries using &apos;for&apos; loops&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;How does Python recognize that it needs only to read the key from the\n  dictionary? Is key a special word in Python? Or is it simply a\n  variable?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&apos;s not just &lt;code&gt;for&lt;/code&gt; loops. The important word here is &quot;iterating&quot;.&lt;/p&gt;\n\n&lt;p&gt;A dictionary is a mapping of keys to values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Any time we iterate over it, we iterate over the keys. The variable name &lt;code&gt;key&lt;/code&gt; is only intended to be descriptive - and it is quite apt for the purpose.&lt;/p&gt;\n\n&lt;p&gt;This happens in a list comprehension:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[k &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It happens when we pass the dictionary to list (or any other collection type object):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(d)\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The way Python iterates is, in a context where it needs to, it calls the &lt;code&gt;__iter__&lt;/code&gt; method of the object (in this case the dictionary) which returns an iterator (in this case, a keyiterator object):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d.__iter__()\n&amp;lt;dict_keyiterator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x7fb1747bee08&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We shouldn&apos;t use these special methods ourselves, instead, use the respective builtin function to call it, &lt;code&gt;iter&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;key_iterator = &lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(d)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;key_iterator\n&amp;lt;dict_keyiterator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x7fb172fa9188&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Iterators have a &lt;code&gt;__next__&lt;/code&gt; method - but we call it with the builtin function, &lt;code&gt;next&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(key_iterator)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(key_iterator)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(key_iterator)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(key_iterator)\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nStopIteration\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When an iterator is exhausted, it raises &lt;code&gt;StopIteration&lt;/code&gt;. This is how Python knows to exit a &lt;code&gt;for&lt;/code&gt; loop, or a list comprehension, or a generator expression, or any other iterative context. Once an iterator raises &lt;code&gt;StopIteration&lt;/code&gt; it will always raise it - if you want to iterate again, you need a new one.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(key_iterator)\n[]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;new_key_iterator = &lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(d)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(new_key_iterator)\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Returning to dicts&lt;/h2&gt;\n\n&lt;p&gt;We&apos;ve seen dicts iterating in many contexts. What we&apos;ve seen is that any time we iterate over a dict, we get the keys. Back to the original example:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;If we change the variable name, we still get the keys. Let&apos;s try it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; each_key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(each_key, &lt;span class=&quot;hljs-string&quot;&gt;&apos;=&amp;gt;&apos;&lt;/span&gt;, d[each_key])\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\nx =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ny =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nz =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If we want to iterate over the values, we need to use the &lt;code&gt;.values&lt;/code&gt; method of dicts, or for both together, &lt;code&gt;.items&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(d.values())\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(d.items())\n[(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the example given, it would be more efficient to iterate over the items like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a_key, corresponding_value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a_key, corresponding_value)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But for academic purposes, the question&apos;s example is just fine.&lt;/p&gt;\n    ","\n&lt;p&gt;For Iterating through dictionaries, The below code can be used.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;dictionary= {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#To iterate over the keys&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dictionary.keys():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(key)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#To Iterate over the values&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dictionary.values():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(value)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#To Iterate both the keys and values&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dictionary.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(key,&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\t&apos;&lt;/span&gt;, value)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can check the implementation of CPython&apos;s &lt;code&gt;dicttype&lt;/code&gt; on GitHub. This is the signature of method that implements the dict iterator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;_PyDict_Next(PyObject *op, Py_ssize_t *ppos, PyObject **pkey,\n             PyObject **pvalue, Py_hash_t *phash)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/python/cpython/blob/b2e5794870eb4728ddfaafc0f79a40299576434f/Objects/dictobject.c&quot; rel=&quot;noreferrer&quot;&gt;CPython dictobject.c&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To iterate over keys, it is slower but better to use &lt;code&gt;my_dict.keys()&lt;/code&gt;. If you tried to do something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_dict:\n    my_dict[key+&lt;span class=&quot;hljs-string&quot;&gt;&quot;-1&quot;&lt;/span&gt;] = my_dict[key]-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;it would create a runtime error because you are changing the keys while the program is running. If you are absolutely set on reducing time, use the &lt;code&gt;for key in my_dict&lt;/code&gt; way, but you have been warned.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are looking for a clear and visual example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;cat  = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Snowy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;White&apos;&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key , value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; cat.items():\n   &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(key, &lt;span class=&quot;hljs-string&quot;&gt;&apos;: &apos;&lt;/span&gt;, value)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Result:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;name:  Snowy\ncolor:  White\nage:  14\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This will print the output in &lt;em&gt;sorted&lt;/em&gt; order by &lt;em&gt;values&lt;/em&gt; in ascending order.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;by_value&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; item[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=by_value):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(key, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&amp;gt;&apos;&lt;/span&gt;, value)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;y -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nx -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Let&apos;s get straight to the point. If the word key is just a variable, as you have mentioned then the main thing to note is that when you run a &lt;strong&gt;&apos;FOR LOOP&apos;&lt;/strong&gt; over a dictionary it runs through only the &lt;em&gt;&apos;keys&apos;&lt;/em&gt; and ignores the &lt;em&gt;&apos;values&apos;&lt;/em&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (key, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, d[key])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;rather try this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (i, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, d[i])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;but if you use a function like:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(d.keys())\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;in the above case &lt;strong&gt;&apos;keys&apos;&lt;/strong&gt; is just not a variable, its a function.&lt;/p&gt;\n    ","\n&lt;p&gt;A dictionary in Python is a collection of key-value pairs. Each key is connected to a value, and you can use a key to access the value associated with that key. A key&apos;s value can be a number, a string, a list, or even another dictionary. In this case, threat each &quot;key-value pair&quot; as a separate row in the table: d is your table with two columns. the key is the first column, key[value] is your second column. Your for loop is a standard way to iterate over a table.&lt;/p&gt;\n    "],"id":533,"title":"Iterating over dictionaries using 'for' loops","content":"\n                \n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(key, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, d[key])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;How does Python recognize that it needs only to read the &lt;code&gt;key&lt;/code&gt; from the dictionary? Is &lt;code&gt;key&lt;/code&gt; a special keyword, or is it simply a variable?&lt;/p&gt;\n    ","slug":"iterating-over-dictionaries-using-'for'-loops-1657388334481","postType":"QUESTION","createdAt":"2022-07-09T17:38:54.000Z","updatedAt":"2022-07-09T17:38:54.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How to use java.net.URLConnection to fire and handle HTTP requests","slug":"how-to-use-java.net.urlconnection-to-fire-and-handle-http-requests-1657387245934"},{"title":"How do I split a delimited string so I can access individual items?","slug":"how-do-i-split-a-delimited-string-so-i-can-access-individual-items-1657388042385"},{"title":"What are the basic rules and idioms for operator overloading?","slug":"what-are-the-basic-rules-and-idioms-for-operator-overloading-1657384449752"},{"title":"Object comparison in JavaScript [duplicate]","slug":"object-comparison-in-javascript-duplicate-1657387675463"},{"title":"SQL injection that gets around mysql_real_escape_string()","slug":"sql-injection-that-gets-around-mysql_real_escape_string()-1657384364747"},{"title":"How do I format a date in JavaScript?","slug":"how-do-i-format-a-date-in-javascript-1657384649498"},{"title":"What does \"Fatal error: Unexpectedly found nil while unwrapping an Optional value\" mean?","slug":"what-does-\"fatal-error:-unexpectedly-found-nil-while-unwrapping-an-optional-value\"-mean-1657384593944"},{"title":"How do I modify the URL without reloading the page?","slug":"how-do-i-modify-the-url-without-reloading-the-page-1657387509731"},{"title":"scanf() leaves the newline character in the buffer","slug":"scanf()-leaves-the-newline-character-in-the-buffer-1657384699202"},{"title":"How can I upload files to a server using JSP/Servlet?","slug":"how-can-i-upload-files-to-a-server-using-jspservlet-1657384847658"},{"title":"Split comma-separated strings in a column into separate rows","slug":"split-comma-separated-strings-in-a-column-into-separate-rows-1657387785823"},{"title":"How can I sort arrays and data in PHP?","slug":"how-can-i-sort-arrays-and-data-in-php-1657384726665"},{"title":"How to convert string representation of list to a list","slug":"how-to-convert-string-representation-of-list-to-a-list-1657387384181"},{"title":"Get selected value in dropdown list using JavaScript","slug":"get-selected-value-in-dropdown-list-using-javascript-1657387631638"},{"title":"How do I pass data between Activities in Android application?","slug":"how-do-i-pass-data-between-activities-in-android-application-1657384739839"},{"title":"What is a raw type and why shouldn't we use it?","slug":"what-is-a-raw-type-and-why-shouldn't-we-use-it-1657384481079"},{"title":"How to read a file line-by-line into a list?","slug":"how-to-read-a-file-line-by-line-into-a-list-1657387865894"},{"title":"What is the difference between const int*, const int * const, and int const *?","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604"},{"title":"What are good ways to prevent SQL injection? [duplicate]","slug":"what-are-good-ways-to-prevent-sql-injection-duplicate-1657388431570"},{"title":"Crash or \"segmentation fault\" when data is copied/scanned/read to an uninitialized pointer","slug":"crash-or-\"segmentation-fault\"-when-data-is-copiedscannedread-to-an-uninitialized-pointer-1657387520581"}]},"__N_SSG":true}