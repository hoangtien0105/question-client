{"pageProps":{"data":{"answer":["\n&lt;p&gt;Consider this code:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;b = Button(admin, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;as&apos;&lt;/span&gt;, command=button(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hey&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It does exactly the same as this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;result = button(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hey&apos;&lt;/span&gt;)\nb = button(admin, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;as&apos;&lt;/span&gt;, command=result)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Likewise, if you create a binding like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;listbox.bind(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;&amp;lt;ListboxSelect&amp;gt;&amp;gt;&quot;&lt;/span&gt;, some_function())\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;... it&apos;s the same as this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;result = some_function()\nlistbox.bind(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;&amp;lt;ListboxSelect&amp;gt;&amp;gt;&quot;&lt;/span&gt;, result)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;command&lt;/code&gt; option takes a reference to a function, which is a fancy way of saying you need to pass it the name of the function.  To pass a reference you must use the name only, without using parenthesis or arguments. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;b = Button(... command = button)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to pass a parameter such as &quot;hey&quot; you must use a little extra code:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;You can create an intermediate function that can be called without your argument and which then calls your &lt;code&gt;button&lt;/code&gt; function,&lt;/li&gt;\n&lt;li&gt;You can use &lt;code&gt;lambda&lt;/code&gt; to create what is referred to as an &lt;em&gt;anonymous function&lt;/em&gt;. In every way it&apos;s a function except it doesn&apos;t have a name. When you call the &lt;code&gt;lambda&lt;/code&gt; command it returns a &lt;em&gt;reference&lt;/em&gt; to the created function, which means it can be used for the value of the &lt;code&gt;command&lt;/code&gt; option to the button.&lt;/li&gt;\n&lt;li&gt;You can use &lt;a href=&quot;https://docs.python.org/2/library/functools.html#functools.partial&quot; rel=&quot;noreferrer&quot;&gt;functools.partial&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;For me, &lt;code&gt;lambda&lt;/code&gt; is the simplest since it doesn&apos;t require any additional imports like &lt;code&gt;functools.partial&lt;/code&gt; does, though some people think that &lt;code&gt;functools.partial&lt;/code&gt; is easier to understand.&lt;/p&gt;\n&lt;p&gt;To create a lambda function that calls your &lt;code&gt;button&lt;/code&gt; function with an argument you would do something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: button(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hey&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You end up with a function that is functionally equivalent to:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;some_name&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; button(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hey&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As I said earlier, &lt;code&gt;lambda&lt;/code&gt; returns a reference to this nameless function. Since a reference is what the &lt;code&gt;command&lt;/code&gt; option expects you can use &lt;code&gt;lambda&lt;/code&gt; directly in the creation of the button:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;b = Button(... command = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: button(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hey&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There&apos;s a question on this site that has a lot of interesting comments about lambda, in general. See the question &lt;a href=&quot;https://stackoverflow.com/questions/890128/why-python-lambdas-are-useful&quot;&gt;Why Python lambdas are useful?&lt;/a&gt;. That same discussion has &lt;a href=&quot;https://stackoverflow.com/questions/890128/python-lambda-why/5771855#5771855&quot;&gt;an answer that shows how to use lambdas in a loop&lt;/a&gt; when you need to pass in a variable to the callback.&lt;/p&gt;\n&lt;p&gt;Finally, see the &lt;a href=&quot;https://web.archive.org/web/20201109015707id_/http://www.effbot.org/zone/&quot; rel=&quot;noreferrer&quot;&gt;zone.effbot.org&lt;/a&gt; article titled &lt;a href=&quot;https://web.archive.org/web/20200315142708id_/http://effbot.org/zone/tkinter-callbacks.htm&quot; rel=&quot;noreferrer&quot;&gt;Tkinter Callbacks&lt;/a&gt; for a nice tutorial. The coverage of &lt;code&gt;lambda&lt;/code&gt; is pretty lean, but the information there might still be useful.&lt;/p&gt;\n    ","\n&lt;p&gt;You need to create a function without parameters that you can use as the command:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;b = Button(admin, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;as&apos;&lt;/span&gt;, command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: button(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hey&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See the &quot;Passing Argument to Callbacks&quot; section of &lt;a href=&quot;https://web.archive.org/web/20200302040546id_/http://effbot.org/zone/tkinter-callbacks.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;this document&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;h3&gt;Example GUI:&lt;/h3&gt;\n&lt;p&gt;Let&apos;s say I have the GUI:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; tkinter &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; tk\n\nroot = tk.Tk()\n\nbtn = tk.Button(root, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Press&quot;&lt;/span&gt;)\nbtn.pack()\n\nroot.mainloop()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h4&gt;What Happens When a Button Is Pressed&lt;/h4&gt;\n&lt;p&gt;See that when &lt;code&gt;btn&lt;/code&gt; is pressed it calls &lt;em&gt;its own&lt;/em&gt; function which is very similar to &lt;code&gt;button_press_handle&lt;/code&gt; in the following example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;button_press_handle&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; callback:\n        callback() &lt;span class=&quot;hljs-comment&quot;&gt;# Where exactly the method assigned to btn[&apos;command&apos;] is being callled&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;with:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;button_press_handle(btn[&lt;span class=&quot;hljs-string&quot;&gt;&apos;command&apos;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can simply think that &lt;code&gt;command&lt;/code&gt; option should be set as, the reference to the method we want to be called, similar to &lt;code&gt;callback&lt;/code&gt; in &lt;code&gt;button_press_handle&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h4&gt;Calling a Method (a &lt;a href=&quot;https://stackoverflow.com/questions/824234/what-is-a-callback-function&quot;&gt;Callback&lt;/a&gt;) When the Button is Pressed&lt;/h4&gt;\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Without&lt;/em&gt; arguments&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;So if I wanted to &lt;code&gt;print&lt;/code&gt; something when the button is pressed I would need to set:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;btn[&lt;span class=&quot;hljs-string&quot;&gt;&apos;command&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# default to print is new line&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Pay close attention to the &lt;em&gt;lack&lt;/em&gt; of &lt;code&gt;()&lt;/code&gt; with the &lt;code&gt;print&lt;/code&gt; method which is omitted in the meaning that: &lt;em&gt;&quot;This is the method&apos;s name which I want you to call when pressed &lt;strong&gt;but&lt;/strong&gt; don&apos;t call it just this very instant.&quot;&lt;/em&gt; However, I didn&apos;t pass any arguments for the &lt;code&gt;print&lt;/code&gt; so it printed whatever it prints when called without arguments.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;With&lt;/em&gt; Argument(s)&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Now If I wanted to also pass arguments to &lt;em&gt;the method I want to be called&lt;/em&gt; when the button is pressed I could make use of the anonymous functions, which can be created with &lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions&quot; rel=&quot;nofollow noreferrer&quot;&gt;lambda&lt;/a&gt; statement, in this case for &lt;code&gt;print&lt;/code&gt; built-in method, like the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;btn[&lt;span class=&quot;hljs-string&quot;&gt;&apos;command&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; arg1=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, arg2=&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, arg3=&lt;span class=&quot;hljs-string&quot;&gt;&quot;World!&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(arg1 + arg2 + arg3)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h4&gt;Calling &lt;em&gt;Multiple&lt;/em&gt; Methods when the Button Is Pressed&lt;/h4&gt;\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Without&lt;/em&gt; Arguments&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;You can also achieve that using &lt;code&gt;lambda&lt;/code&gt; statement but it is considered bad practice and thus I won&apos;t include it here. The good practice is to define a separate method, &lt;code&gt;multiple_methods&lt;/code&gt;, that calls the methods wanted and then set it as the callback to the button press:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;multiple_methods&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Vicariously&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# the first inner callback&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# another inner callback&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;With&lt;/em&gt; Argument(s)&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;In order to pass argument(s) to method that calls other methods, again make use of &lt;code&gt;lambda&lt;/code&gt; statement, but first:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;multiple_methods&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(args[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;# the first inner callback&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(kwargs[&lt;span class=&quot;hljs-string&quot;&gt;&apos;opt1&apos;&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;# another inner callback&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and then set:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;btn[&lt;span class=&quot;hljs-string&quot;&gt;&apos;command&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; arg=&lt;span class=&quot;hljs-string&quot;&gt;&quot;live&quot;&lt;/span&gt;, kw=&lt;span class=&quot;hljs-string&quot;&gt;&quot;as the&quot;&lt;/span&gt; : a_new_method(arg, opt1=kw)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h4&gt;Returning Object(s) From the Callback&lt;/h4&gt;\n&lt;p&gt;Also further note that &lt;code&gt;callback&lt;/code&gt; can&apos;t really &lt;code&gt;return&lt;/code&gt; because it&apos;s only called inside &lt;code&gt;button_press_handle&lt;/code&gt; with &lt;code&gt;callback()&lt;/code&gt; as opposed to &lt;code&gt;return callback()&lt;/code&gt;. It does &lt;code&gt;return&lt;/code&gt; but &lt;em&gt;not&lt;/em&gt; anywhere outside that function. Thus you should rather &lt;em&gt;modify&lt;/em&gt; object(s) that are accessible in the current scope.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h4&gt;Complete Example with &lt;a href=&quot;https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python&quot; rel=&quot;nofollow noreferrer&quot;&gt;global&lt;/a&gt; Object Modification(s)&lt;/h4&gt;\n&lt;p&gt;Below example will call a method that changes &lt;code&gt;btn&lt;/code&gt;&apos;s text each time the button is pressed:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; tkinter &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; tk\n\ni = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;text_mod&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; i, btn           &lt;span class=&quot;hljs-comment&quot;&gt;# btn can be omitted but not sure if should be&lt;/span&gt;\n    txt = (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Vicariously&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;live&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;as&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;the&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;whole&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;world&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;dies&quot;&lt;/span&gt;)\n    btn[&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;] = txt[i]    &lt;span class=&quot;hljs-comment&quot;&gt;# the global object that is modified&lt;/span&gt;\n    i = (i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) % &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(txt)  &lt;span class=&quot;hljs-comment&quot;&gt;# another global object that gets modified&lt;/span&gt;\n\nroot = tk.Tk()\n\nbtn = tk.Button(root, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;My Button&quot;&lt;/span&gt;)\nbtn[&lt;span class=&quot;hljs-string&quot;&gt;&apos;command&apos;&lt;/span&gt;] = text_mod\n\nbtn.pack(fill=&lt;span class=&quot;hljs-string&quot;&gt;&apos;both&apos;&lt;/span&gt;, expand=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n\nroot.mainloop()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/47996979/7032856&quot;&gt;Mirror&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The engine evaluates the result of the function when it is assigning the value at the line &quot;... command = ...&quot;&lt;/p&gt;\n\n&lt;p&gt;The &quot;command&quot; expects a function to be returned, that&apos;s why using a lambda can do the job because it is creating an anomymous function that is returned to the &quot;command&quot; during evaluation. \nYou can also code your own function, it will do the job also.&lt;/p&gt;\n\n&lt;p&gt;this is an example with lambda and without lambda:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# coding=utf-8&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Tkinter &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; *\n&lt;span class=&quot;hljs-comment&quot;&gt;# Creation de la fenêtre principale (main window)&lt;/span&gt;\nMafenetre = Tk()\nres1 = StringVar()\nres2 = StringVar()\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isValidInput&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;hasattr&lt;/span&gt;(obj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;get&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;callable&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(obj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;get&apos;&lt;/span&gt;)):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; TRUE\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; FALSE\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# stupid action 2 (return 12 on purpose to show potential mistake)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;action1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*arguments&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;action1 running&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; arg &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arguments:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; isValidInput(arg):\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;input value: &quot;&lt;/span&gt;, arg.get()\n            res1.&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(arg.get())\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;other value:&quot;&lt;/span&gt;, arg\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# stupid action 2&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;action2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*arguments&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;action2 running&quot;&lt;/span&gt;\n    a = arguments[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n    b = arguments[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; isValidInput(a) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; isValidInput(b):\n        c = a.get() + b.get()\n        res2.&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(c)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; c\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# a stupid workflow manager ordered by name&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;start_tasks&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*arguments, **keywords&lt;/span&gt;):\n    keys = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(keywords.keys())\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; kw &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; keys:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; kw, &lt;span class=&quot;hljs-string&quot;&gt;&quot;plugged &quot;&lt;/span&gt;\n        keywords[kw](*arguments)\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# valid callback wrapper with lambda&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;action1_callback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;my_input&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; args=[my_input]: action1(*args)\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# valid callback wrapper without lambda&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;action1_callback_nolambda&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kw&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;anon&lt;/span&gt;():\n        action1(*args)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; anon\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# first input string&lt;/span&gt;\ninput1 = StringVar()\ninput1.&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;delete me...&quot;&lt;/span&gt;)\nf1 = Entry(Mafenetre, textvariable=input1, bg=&lt;span class=&quot;hljs-string&quot;&gt;&apos;bisque&apos;&lt;/span&gt;, fg=&lt;span class=&quot;hljs-string&quot;&gt;&apos;maroon&apos;&lt;/span&gt;)\nf1.focus_set()\nf1.pack(fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;both&quot;&lt;/span&gt;, expand=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;, padx=&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# failed callback because the action1 function is evaluated, it will return 12. &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# in this case the button won&apos;t work at all, because the assignement expect a function &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# in order to have the button command to execute something&lt;/span&gt;\nba1 = Button(Mafenetre)\nba1[&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;show input 1 (ko)&quot;&lt;/span&gt;\nba1[&lt;span class=&quot;hljs-string&quot;&gt;&apos;command&apos;&lt;/span&gt;] = action1(input1)\nba1.pack(fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;both&quot;&lt;/span&gt;, expand=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;, padx=&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# working button using a wrapper&lt;/span&gt;\nba3 = Button(Mafenetre)\nba3[&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;show input 1 (ok)&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# without a lambda it is also working if the assignment is a function&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#ba1[&apos;command&apos;] = action1_callback_nolambda(input1)&lt;/span&gt;\nba3[&lt;span class=&quot;hljs-string&quot;&gt;&apos;command&apos;&lt;/span&gt;] = action1_callback(input1)\nba3.pack(fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;both&quot;&lt;/span&gt;, expand=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;, padx=&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# display result label&lt;/span&gt;\nLabel1 = Label(Mafenetre, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Action 1 result:&quot;&lt;/span&gt;)\nLabel1.pack(fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;both&quot;&lt;/span&gt;, expand=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;, padx=&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# display result value&lt;/span&gt;\nresl1 = Label(Mafenetre, textvariable=res1)\nresl1.pack(fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;both&quot;&lt;/span&gt;, expand=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;, padx=&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# second input string&lt;/span&gt;\ninput2 = StringVar()\nf2 = Entry(Mafenetre, textvariable=input2, bg=&lt;span class=&quot;hljs-string&quot;&gt;&apos;bisque&apos;&lt;/span&gt;, fg=&lt;span class=&quot;hljs-string&quot;&gt;&apos;maroon&apos;&lt;/span&gt;)\nf2.focus_set()\nf2.pack(fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;both&quot;&lt;/span&gt;, expand=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;, padx=&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# third test without wrapper, but making sure that several arguments are well handled by a lambda function&lt;/span&gt;\nba2 = Button(Mafenetre)\nba2[&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;execute action 2&quot;&lt;/span&gt;\nba2[&lt;span class=&quot;hljs-string&quot;&gt;&apos;command&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; args=[input1, input2], action=action2: start_tasks(*args, do=action)\nba2.pack(fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;both&quot;&lt;/span&gt;, expand=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;, padx=&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# display result label&lt;/span&gt;\nLabel2 = Label(Mafenetre, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Action 2 result:&quot;&lt;/span&gt;)\nLabel2.pack(fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;both&quot;&lt;/span&gt;, expand=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;, padx=&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# display result value&lt;/span&gt;\nresl2 = Label(Mafenetre, textvariable=res2)\nresl2.pack(fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;both&quot;&lt;/span&gt;, expand=&lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;, padx=&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n\nMafenetre.mainloop()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think the best way to solve this problem is to use a lambda function.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; tkinter &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; *\nadmin= Tk()\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;button&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;an&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(an)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;het&quot;&lt;/span&gt;)\nb = Button(admin, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;as&quot;&lt;/span&gt;, command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: button(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hey&quot;&lt;/span&gt;))\nb.pack()\nmainloop()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you don&apos;t want to use the command keyword, you can use the .bind() method instead:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; tkinter &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; *\nadmin= Tk()\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;button&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;an&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(an)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;het&quot;&lt;/span&gt;)\nb = Button(admin, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;as&quot;&lt;/span&gt;)\nb.pack()\nb.bind(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;Button-1&amp;gt;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; bb: button(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hey&quot;&lt;/span&gt;))\nmainloop()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using a mother function (no parameter) which owns the child function (at least 1 parameter) you want to call is stupid.&lt;/p&gt;\n&lt;p&gt;Just to share with you, this is one of my program:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; tkinter\nwindow = tkinter.Tk()\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;plus_them&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;field_1, field_2, field_3&lt;/span&gt;):\n    field_3.delete(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;end&apos;&lt;/span&gt;)\n    num1 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    num2 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        num1 = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(field_1.get())\n        num2 = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(field_2.get())\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Exception occurs&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Continue&quot;&lt;/span&gt;)\n    result = num1 + num2\n    field_3.insert(tkinter.END, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(result))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;minus_them&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;field_1, field_2, field_3&lt;/span&gt;):\n    field_3.delete(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;end&apos;&lt;/span&gt;)\n    num1 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    num2 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        num1 = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(field_1.get())\n        num2 = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(field_2.get())\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Exception occurs&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Continue&quot;&lt;/span&gt;)\n    result = num1 - num2\n    field_3.insert(tkinter.END, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(result))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Input Panel:&lt;/span&gt;\nlabel_1 = tkinter.Label(window, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;First Number:&quot;&lt;/span&gt;)\nlabel_1.grid(row=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, column=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\nlabel_2 = tkinter.Label(window, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Second Number:&quot;&lt;/span&gt;)\nlabel_2.grid(row=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, column=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\nentry_1 = tkinter.Entry(window)\nentry_1.grid(row=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, column=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\nentry_2 = tkinter.Entry(window)\nentry_2.grid(row=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, column=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Button Panel:&lt;/span&gt;\nbutton_1 = tkinter.Button(window, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Plus&quot;&lt;/span&gt;)\nbutton_1.grid(row=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, column=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\nbutton_2 = tkinter.Button(window, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Minus&quot;&lt;/span&gt;)\nbutton_2.grid(row=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, column=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Answer Panel:&lt;/span&gt;\nlabel_3 = tkinter.Label(window, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;The Answer:&quot;&lt;/span&gt;)\nlabel_3.grid(row=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, column=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\nentry_3 = tkinter.Entry(window)\nentry_3.grid(row=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, column=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Event Handling:&lt;/span&gt;\nbutton_1.bind(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;Button-1&amp;gt;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; p: plus_them(entry_1, entry_2, entry_3))\nbutton_2.bind(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;Button-1&amp;gt;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; m: minus_them(entry_1, entry_2, entry_3))\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Window Stuff:&lt;/span&gt;\nwindow.title(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Plus and Minus Calculator&quot;&lt;/span&gt;)\nwindow.mainloop()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That&apos;s it.&lt;/p&gt;\n    "],"id":178,"title":"Why is the command bound to a Button or event executed when declared?","content":"\n                \n&lt;p&gt;My code is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Tkinter &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; *\n\nadmin = Tk()\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;button&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;an&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; an\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;het&apos;&lt;/span&gt;\n\nb = Button(admin, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;as&apos;&lt;/span&gt;, command=button(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hey&apos;&lt;/span&gt;))\nb.pack()\nmainloop()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The button doesn&apos;t work, it prints &apos;hey&apos; and &apos;het&apos; once without my command, and then, when I press the button nothing happens.&lt;/p&gt;\n    ","slug":"why-is-the-command-bound-to-a-button-or-event-executed-when-declared-1657384872054","postType":"QUESTION","createdAt":"2022-07-09T16:41:12.000Z","updatedAt":"2022-07-09T16:41:12.000Z","tags":[{"id":655,"name":"tkinter","slug":"tkinter","createdAt":"2022-07-09T16:41:12.000Z","updatedAt":"2022-07-09T16:41:12.000Z","Questions_Tags":{"questionId":178,"tagId":655}}],"relatedQuestions":[{"title":"Why is the command bound to a Button or event executed when declared?","slug":"why-is-the-command-bound-to-a-button-or-event-executed-when-declared-1657384872054","tags":[{"name":"tkinter","Questions_Tags":{"questionId":178,"tagId":655}}]}]},"randomQuestions":[{"title":"How do I use extern to share variables between source files?","slug":"how-do-i-use-extern-to-share-variables-between-source-files-1657387453605"},{"title":"Make container shrink-to-fit child elements as they wrap","slug":"make-container-shrink-to-fit-child-elements-as-they-wrap-1657388134549"},{"title":"How to affect other elements when one element is hovered","slug":"how-to-affect-other-elements-when-one-element-is-hovered-1657387832363"},{"title":"How to extract and access data from JSON with PHP?","slug":"how-to-extract-and-access-data-from-json-with-php-1657384483259"},{"title":"How can I make Bootstrap columns all the same height?","slug":"how-can-i-make-bootstrap-columns-all-the-same-height-1657388551403"},{"title":"What does ** (double star/asterisk) and * (star/asterisk) do for parameters?","slug":"what-does-**-(double-starasterisk)-and-*-(starasterisk)-do-for-parameters-1657384800967"},{"title":"Deep cloning objects","slug":"deep-cloning-objects-1657387930865"},{"title":"How to manage startActivityForResult on Android","slug":"how-to-manage-startactivityforresult-on-android-1657387967393"},{"title":"Why does a RegExp with global flag give wrong results?","slug":"why-does-a-regexp-with-global-flag-give-wrong-results-1657387788550"},{"title":"JSTL in JSF2 Facelets... makes sense?","slug":"jstl-in-jsf2-facelets...-makes-sense-1657387667435"},{"title":"Swing GUI listeners without AWT","slug":"swing-gui-listeners-without-awt-1657387522426"},{"title":"What is the scope of variables in JavaScript?","slug":"what-is-the-scope-of-variables-in-javascript-1657384464291"},{"title":"Using async/await with a forEach loop","slug":"using-asyncawait-with-a-foreach-loop-1657384512667"},{"title":"How to include a PHP variable inside a MySQL statement","slug":"how-to-include-a-php-variable-inside-a-mysql-statement-1657387669365"},{"title":"How to avoid having class data shared among instances?","slug":"how-to-avoid-having-class-data-shared-among-instances-1657387687732"},{"title":"Why is “while( !feof(file) )” always wrong?","slug":"why-is-\"while(-!feof(file)-)\"-always-wrong-1657384367349"},{"title":"How can I get useful error messages in PHP?","slug":"how-can-i-get-useful-error-messages-in-php-1657384609065"},{"title":"Understanding slicing","slug":"understanding-slicing-1657384397680"},{"title":"Difference between sh and Bash","slug":"difference-between-sh-and-bash-1657388197713"},{"title":"How can I get query string values in JavaScript?","slug":"how-can-i-get-query-string-values-in-javascript-1657384443631"}]},"__N_SSG":true}