{"pageProps":{"data":{"answer":["\n&lt;p&gt;The MySQL extension:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Is not under active development&lt;/li&gt;\n&lt;li&gt;Is &lt;strong&gt;officially &lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot; rel=&quot;noreferrer&quot;&gt;deprecated&lt;/a&gt;&lt;/strong&gt; as of PHP 5.5 (released June 2013).&lt;/li&gt;\n&lt;li&gt;Has been &lt;strong&gt;&lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7#extmysql&quot; rel=&quot;noreferrer&quot;&gt;removed&lt;/a&gt; entirely&lt;/strong&gt; as of PHP 7.0 (released December 2015)\n\n&lt;ul&gt;\n&lt;li&gt;This means that as of &lt;a href=&quot;https://www.php.net/eol.php&quot; rel=&quot;noreferrer&quot;&gt;31 Dec 2018&lt;/a&gt; it does not exist in any supported version of PHP. If you are using a version of PHP which supports it, you are using a version which doesn&apos;t get security problems fixed.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Lacks an OO interface&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t support:\n\n&lt;ul&gt;\n&lt;li&gt;Non-blocking, asynchronous queries&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://php.net/manual/en/mysqli.quickstart.prepared-statements.php&quot; rel=&quot;noreferrer&quot;&gt;Prepared statements&lt;/a&gt; or parameterized queries&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Stored procedures&lt;/li&gt;\n&lt;li&gt;Multiple Statements&lt;/li&gt;\n&lt;li&gt;Transactions&lt;/li&gt;\n&lt;li&gt;The &quot;new&quot; password authentication method (on by default in MySQL 5.6; required in 5.7)&lt;/li&gt;\n&lt;li&gt;Any of the new functionality in MySQL 5.1 or later&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Since it is deprecated, using it makes your code less future proof. &lt;/p&gt;\n\n&lt;p&gt;Lack of support for prepared statements is particularly important as they provide a clearer, less error-prone method of escaping and quoting external data than manually escaping it with a separate function call.&lt;/p&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;the comparison of SQL extensions&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;PHP offers three different APIs to connect to MySQL. These are the &lt;a href=&quot;http://in1.php.net/manual/en/book.mysql.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysql&lt;/code&gt;&lt;/a&gt;(removed as of PHP 7), &lt;a href=&quot;http://uk.php.net/manual/en/book.mysqli.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysqli&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;PDO&lt;/code&gt;&lt;/a&gt; extensions.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;mysql_*&lt;/code&gt; functions used to be very popular, but their use is not encouraged anymore. The documentation team is discussing the database security situation, and educating users to move away from the commonly used ext/mysql extension is part of this (check &lt;em&gt;&lt;a href=&quot;http://news.php.net/php.internals/53799&quot; rel=&quot;noreferrer&quot;&gt;php.internals: deprecating ext/mysql&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;\n\n&lt;p&gt;And the later PHP developer team has taken the decision to generate &lt;a href=&quot;https://github.com/php/php-src/commit/b7091aaf0137d97cf4aa4a402ec50b3946d369c0&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;E_DEPRECATED&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; errors when users connect to MySQL, whether through &lt;code&gt;mysql_connect()&lt;/code&gt;, &lt;code&gt;mysql_pconnect()&lt;/code&gt; or the implicit connection functionality built into &lt;code&gt;ext/mysql&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;ext/mysql&lt;/code&gt;&lt;/strong&gt; was &lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;officially deprecated as of PHP 5.5&lt;/strong&gt;&lt;/a&gt; and has been &lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;removed as of PHP 7&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;See the Red Box?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When you go on any &lt;code&gt;mysql_*&lt;/code&gt; function manual page, you see a red box, explaining it should not be used anymore.&lt;/p&gt;\n\n&lt;h2&gt;Why&lt;/h2&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Moving away from &lt;code&gt;ext/mysql&lt;/code&gt; is not only about security, but also about having access to all the features of the MySQL database.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;ext/mysql&lt;/code&gt; was built for &lt;strong&gt;MySQL 3.23&lt;/strong&gt; and only got very few additions since then while mostly keeping compatibility with this old version which makes the code a bit harder to maintain. Missing features that is not supported by &lt;code&gt;ext/mysql&lt;/code&gt; include: (&lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot; rel=&quot;noreferrer&quot;&gt;from PHP manual&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Stored_procedure&quot; rel=&quot;noreferrer&quot;&gt;Stored procedures&lt;/a&gt; (can&apos;t handle multiple result sets)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot; rel=&quot;noreferrer&quot;&gt;Prepared statements&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Encryption (SSL)&lt;/li&gt;\n&lt;li&gt;Compression&lt;/li&gt;\n&lt;li&gt;Full Charset support&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Reason to not use &lt;code&gt;mysql_*&lt;/code&gt; function&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Not under active development&lt;/li&gt;\n&lt;li&gt;Removed as of PHP 7&lt;/li&gt;\n&lt;li&gt;Lacks an OO interface&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t support non-blocking, asynchronous queries&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t support prepared statements or &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot; rel=&quot;noreferrer&quot;&gt;parameterized queries&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t support stored procedures&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t support multiple statements&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t support &lt;a href=&quot;http://en.wikipedia.org/wiki/Database_transaction&quot; rel=&quot;noreferrer&quot;&gt;transactions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t support all of the functionality in MySQL 5.1&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/12860046/1723893&quot;&gt;Above point quoted from Quentin&apos;s answer&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Lack of support for prepared statements is particularly important as they provide a clearer, less error prone method of escaping and quoting external data than manually escaping it with a separate function call.&lt;/p&gt;\n\n&lt;p&gt;See the &lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot; rel=&quot;noreferrer&quot;&gt;comparison of SQL extensions&lt;/a&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Suppressing deprecation warnings&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;While code is being converted to &lt;code&gt;MySQLi&lt;/code&gt;/&lt;code&gt;PDO&lt;/code&gt;, &lt;code&gt;E_DEPRECATED&lt;/code&gt; errors can be suppressed by setting &lt;code&gt;error_reporting&lt;/code&gt; in &lt;strong&gt;php.ini&lt;/strong&gt; to exclude &lt;code&gt;E_DEPRECATED:&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;error_reporting&lt;/span&gt; = E_ALL ^ E_DEPRECATED\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that this will also hide &lt;strong&gt;other deprecation warnings&lt;/strong&gt;, which, however, may be for things other than MySQL. (&lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation#workarounds&quot; rel=&quot;noreferrer&quot;&gt;from PHP manual&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;\n\n&lt;p&gt;The article &lt;em&gt;&lt;a href=&quot;http://net.tutsplus.com/tutorials/php/pdo-vs-mysqli-which-should-you-use/&quot; rel=&quot;noreferrer&quot;&gt;PDO vs. MySQLi: Which Should You Use?&lt;/a&gt;&lt;/em&gt; by &lt;a href=&quot;http://webarto.com/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Dejan Marjanovic&lt;/strong&gt;&lt;/a&gt; will help you to choose.&lt;/p&gt;\n\n&lt;p&gt;And a better way is &lt;code&gt;PDO&lt;/code&gt;, and I am now writing a simple &lt;code&gt;PDO&lt;/code&gt; tutorial.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;A simple and short PDO tutorial&lt;/h2&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Q. First question in my mind was: what is `PDO`?&lt;/h3&gt;\n\n&lt;p&gt;A. &lt;strong&gt;PDO  PHP Data Objects&lt;/strong&gt;  is a database access layer providing a uniform method of access to multiple databases.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/Vd7ve.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Connecting to MySQL &lt;/h3&gt;\n\n&lt;p&gt;With &lt;code&gt;mysql_*&lt;/code&gt; function or we can say it the old way (deprecated in PHP 5.5 and above)&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = mysql_connect(&lt;span class=&quot;hljs-string&quot;&gt;&apos;localhost&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pass&apos;&lt;/span&gt;);\nmysql_select_db(&lt;span class=&quot;hljs-string&quot;&gt;&apos;testdb&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\nmysql_set_charset(&lt;span class=&quot;hljs-string&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With &lt;code&gt;PDO&lt;/code&gt;: All you need to do is create a new &lt;code&gt;PDO&lt;/code&gt; object. The constructor accepts parameters for specifying the database source &lt;code&gt;PDO&lt;/code&gt;&apos;s constructor mostly takes four parameters which are &lt;code&gt;DSN&lt;/code&gt; (data source name) and  optionally &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here I think you are familiar with all except &lt;code&gt;DSN&lt;/code&gt;; this is new in &lt;code&gt;PDO&lt;/code&gt;. A &lt;code&gt;DSN&lt;/code&gt; is basically a string of options that tell &lt;code&gt;PDO&lt;/code&gt; which driver to use, and connection details. For further reference, check &lt;a href=&quot;http://www.php.net/manual/en/ref.pdo-mysql.connection.php&quot; rel=&quot;noreferrer&quot;&gt;PDO MySQL DSN&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;PDO&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mysql:host=localhost;dbname=testdb;charset=utf8&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;username&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can also use &lt;code&gt;charset=UTF-8&lt;/code&gt;, but sometimes it causes an error, so it&apos;s better to use &lt;code&gt;utf8&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;If there is any connection error, it will throw a &lt;code&gt;PDOException&lt;/code&gt; object that can be caught to handle &lt;code&gt;Exception&lt;/code&gt; further.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Good read&lt;/strong&gt;: &lt;a href=&quot;http://php.net/manual/en/pdo.connections.php&quot; rel=&quot;noreferrer&quot;&gt;Connections and Connection management ¶&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;You can also pass in several driver options as an array to the fourth parameter. I recommend passing the parameter which puts &lt;code&gt;PDO&lt;/code&gt; into exception mode. Because some &lt;code&gt;PDO&lt;/code&gt; drivers don&apos;t support native prepared statements, so &lt;code&gt;PDO&lt;/code&gt; performs emulation of the prepare. It also lets you manually enable this emulation. To use the native server-side prepared statements, you should explicitly set it &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The other is to turn off prepare emulation which is enabled in the &lt;code&gt;MySQL&lt;/code&gt; driver by default, but prepare emulation should be turned off to use &lt;code&gt;PDO&lt;/code&gt; safely. &lt;/p&gt;\n\n&lt;p&gt;I will later explain why prepare emulation should be turned off. To find reason please check &lt;a href=&quot;https://stackoverflow.com/a/12202218/1723893&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;It is only usable if you are using an old version of &lt;code&gt;MySQL&lt;/code&gt; which I do not recommended.&lt;/p&gt;\n\n&lt;p&gt;Below is an example of how you can do it:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;PDO&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mysql:host=localhost;dbname=testdb;charset=UTF-8&apos;&lt;/span&gt;, \n              &lt;span class=&quot;hljs-string&quot;&gt;&apos;username&apos;&lt;/span&gt;, \n              &lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;,\n              &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_EMULATE_PREPARES&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n              PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_ERRMODE&lt;/span&gt; =&amp;gt; PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ERRMODE_EXCEPTION&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Can we set attributes after PDO construction?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Yes&lt;/strong&gt;, we can also set some attributes after PDO construction with the &lt;code&gt;setAttribute&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;PDO&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mysql:host=localhost;dbname=testdb;charset=UTF-8&apos;&lt;/span&gt;, \n              &lt;span class=&quot;hljs-string&quot;&gt;&apos;username&apos;&lt;/span&gt;, \n              &lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setAttribute&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_ERRMODE&lt;/span&gt;, PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ERRMODE_EXCEPTION&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setAttribute&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_EMULATE_PREPARES&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Error Handling &lt;/h2&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Error handling is much easier in &lt;code&gt;PDO&lt;/code&gt; than &lt;code&gt;mysql_*&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;A common practice when using &lt;code&gt;mysql_*&lt;/code&gt; is:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Connected to MySQL&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM table&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_error&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;OR die()&lt;/code&gt; is not a good way to handle the error since we can not handle the thing in &lt;code&gt;die&lt;/code&gt;. It will just end the script abruptly and then echo the error to the screen which you usually do NOT want to show to your end users, and let bloody hackers discover your schema. Alternately, the return values of &lt;code&gt;mysql_*&lt;/code&gt; functions can often be used in conjunction with &lt;a href=&quot;http://php.net/mysql_error&quot; rel=&quot;noreferrer&quot;&gt;mysql_error()&lt;/a&gt; to handle errors.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;PDO&lt;/code&gt; offers a better solution: exceptions. Anything we do with &lt;code&gt;PDO&lt;/code&gt; should be wrapped in a &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; block. We can force &lt;code&gt;PDO&lt;/code&gt; into one of three error modes by setting the error mode attribute. Three error handling modes are below.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;PDO::ERRMODE_SILENT&lt;/code&gt;. It&apos;s just setting error codes and acts pretty much the same as &lt;code&gt;mysql_*&lt;/code&gt; where you must check each result and then look at &lt;code&gt;$db-&amp;gt;errorInfo();&lt;/code&gt; to get the error details.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;PDO::ERRMODE_WARNING&lt;/code&gt; Raise &lt;code&gt;E_WARNING&lt;/code&gt;. (Run-time warnings (non-fatal errors). Execution of the script is not halted.)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;PDO::ERRMODE_EXCEPTION&lt;/code&gt;: Throw exceptions. It represents an error raised by PDO. You should not throw a &lt;code&gt;PDOException&lt;/code&gt; from your own code. See &lt;em&gt;Exceptions&lt;/em&gt; for more information about exceptions in PHP. It acts very much like &lt;code&gt;or die(mysql_error());&lt;/code&gt;, when it isn&apos;t caught. But unlike &lt;code&gt;or die()&lt;/code&gt;, the &lt;code&gt;PDOException&lt;/code&gt; can be caught and handled gracefully if you choose to do so.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Good read&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/pdo.error-handling.php&quot; rel=&quot;noreferrer&quot;&gt;Errors and error handling ¶&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/class.pdoexception.php&quot; rel=&quot;noreferrer&quot;&gt;The PDOException class ¶&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.php.net/manual/en/language.exceptions.php&quot; rel=&quot;noreferrer&quot;&gt;Exceptions ¶&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Like:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setAttribute&lt;/span&gt;( PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_ERRMODE&lt;/span&gt;, PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ERRMODE_SILENT&lt;/span&gt; );\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setAttribute&lt;/span&gt;( PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_ERRMODE&lt;/span&gt;, PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ERRMODE_WARNING&lt;/span&gt; );\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setAttribute&lt;/span&gt;( PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_ERRMODE&lt;/span&gt;, PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ERRMODE_EXCEPTION&lt;/span&gt; );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And you can wrap it in &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt;, like below:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Connect as appropriate as above&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hi&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//Invalid query!&lt;/span&gt;\n} \n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (PDOException &lt;span class=&quot;hljs-variable&quot;&gt;$ex&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;An Error occured!&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//User friendly message/message you want to show to user&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;some_logging_function&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$ex&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getMessage&lt;/span&gt;());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You do not have to handle with &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; right now. You can catch it at any time appropriate, but I strongly recommend you to use &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt;. Also it may make more sense to catch it at outside the function that calls the &lt;code&gt;PDO&lt;/code&gt; stuff:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;data_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM table&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetchAll&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;FETCH_ASSOC&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Then later&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;data_fun&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(PDOException &lt;span class=&quot;hljs-variable&quot;&gt;$ex&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Here you can handle error and show message/perform action you want.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, you can handle by &lt;code&gt;or die()&lt;/code&gt; or we can say like &lt;code&gt;mysql_*&lt;/code&gt;, but it will be really varied. You can hide the dangerous error messages in production by turning &lt;code&gt;display_errors off&lt;/code&gt; and just reading your error log.&lt;/p&gt;\n\n&lt;p&gt;Now, after reading all the things above, you are probably thinking: what the heck is that when I just want to start leaning simple &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, or &lt;code&gt;DELETE&lt;/code&gt; statements? Don&apos;t worry, here we go:&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Selecting Data&lt;/h2&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/AhIlC.png&quot; alt=&quot;PDO select image&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;So what you are doing in &lt;code&gt;mysql_*&lt;/code&gt; is:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * from table&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_error&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$num_rows&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_num_rows&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_fetch_assoc&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;)) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;field1&apos;&lt;/span&gt;];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now in &lt;code&gt;PDO&lt;/code&gt;, you can do this like:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM table&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetch&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;FETCH_ASSOC&lt;/span&gt;)) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;field1&apos;&lt;/span&gt;];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM table&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$results&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetchAll&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;FETCH_ASSOC&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Use $results&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are using the method like below (&lt;code&gt;query()&lt;/code&gt;), this method returns a &lt;code&gt;PDOStatement&lt;/code&gt; object. So if you want to fetch the result, use it like above.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM table&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;field1&apos;&lt;/span&gt;];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In PDO Data, it is obtained via the &lt;code&gt;-&amp;gt;fetch()&lt;/code&gt;, a method of your statement handle. Before calling fetch, the best approach would be telling PDO how youd like the data to be fetched. In the below section I am explaining this.&lt;/p&gt;\n\n&lt;h2&gt;Fetch Modes&lt;/h2&gt;\n\n&lt;p&gt;Note the use of &lt;code&gt;PDO::FETCH_ASSOC&lt;/code&gt; in the &lt;code&gt;fetch()&lt;/code&gt; and &lt;code&gt;fetchAll()&lt;/code&gt; code above. This tells &lt;code&gt;PDO&lt;/code&gt; to return the rows as an associative array with the field names as keys. There are many other fetch modes too which I will explain one by one.&lt;/p&gt;\n\n&lt;p&gt;First of all, I explain how to select fetch mode:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetch&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;FETCH_ASSOC&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the above, I have been using &lt;code&gt;fetch()&lt;/code&gt;. You can also use:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchall.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;PDOStatement::fetchAll()&lt;/code&gt;&lt;/a&gt; - Returns an array containing all of the result set rows&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchcolumn.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;PDOStatement::fetchColumn()&lt;/code&gt;&lt;/a&gt; - Returns a single column from the next row of a result set&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchobject.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;PDOStatement::fetchObject()&lt;/code&gt;&lt;/a&gt; - Fetches the next row and returns it as an object.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/pdostatement.setfetchmode.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;PDOStatement::setFetchMode()&lt;/code&gt;&lt;/a&gt; - Set the default fetch mode for this statement&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Now I come to fetch mode:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;PDO::FETCH_ASSOC&lt;/code&gt;: returns an array indexed by column name as returned in your result set&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;PDO::FETCH_BOTH&lt;/code&gt; (default): returns an array indexed by both column name and 0-indexed column number as returned in your result set&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;There are even more choices! Read about them all in &lt;a href=&quot;http://www.php.net/manual/en/pdostatement.fetch.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;PDOStatement&lt;/code&gt; Fetch documentation.&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Getting the row count&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;Instead of using &lt;code&gt;mysql_num_rows&lt;/code&gt; to get the number of returned rows, you can get a &lt;code&gt;PDOStatement&lt;/code&gt; and do &lt;code&gt;rowCount()&lt;/code&gt;, like:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM table&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$row_count&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;rowCount&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$row_count&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos; rows selected&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Getting the Last Inserted ID&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;exec&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO table(firstname, lastname) VAULES(&apos;John&apos;, &apos;Doe&apos;)&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$insertId&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;lastInsertId&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Insert and Update or Delete statements&lt;/h2&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/yQhPC.png&quot; alt=&quot;Insert and update PDO image&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;What we are doing in &lt;code&gt;mysql_*&lt;/code&gt; function is:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$results&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UPDATE table SET field=&apos;value&apos;&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_error&lt;/span&gt;());\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_affected_rows&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And in pdo, this same thing can be done by:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$affected_rows&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;exec&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UPDATE table SET field=&apos;value&apos;&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$affected_rows&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the above query &lt;a href=&quot;http://php.net/manual/en/pdo.exec.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;PDO::exec&lt;/code&gt;&lt;/a&gt; execute an SQL statement and returns the number of affected rows.&lt;/p&gt;\n\n&lt;p&gt;&lt;sub&gt;&lt;em&gt;Insert and delete will be covered later.&lt;/em&gt;&lt;/sub&gt;&lt;/p&gt;\n\n&lt;p&gt;The above method is only useful when you are not using variable in query. But when you need to use a variable in a query, do not ever ever try like the above and there for  &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;prepared statement or parameterized statement&lt;/strong&gt;&lt;/a&gt; is.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;&lt;strong&gt;Prepared Statements&lt;/strong&gt;&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; What is a prepared statement and why do I need them?&lt;br&gt;\n&lt;strong&gt;A.&lt;/strong&gt; A prepared statement is a pre-compiled SQL statement that can be executed multiple times by sending only the data to the server.&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;The typical workflow of using a prepared statement is as follows (&lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot; rel=&quot;noreferrer&quot;&gt;quoted from Wikipedia three 3 point&lt;/a&gt;):&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Prepare&lt;/strong&gt;: The statement template is created by the application and sent to the database management system (DBMS). Certain values are left unspecified, called parameters, placeholders or bind variables (labelled &lt;code&gt;?&lt;/code&gt; below):&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;INSERT INTO PRODUCT (name, price) VALUES (?, ?)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The DBMS parses, compiles, and performs query optimization on the statement template, and stores the result without executing it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Execute&lt;/strong&gt;: At a later time, the application supplies (or binds) values for the parameters, and the DBMS executes the statement (possibly returning a result). The application may execute the statement as many times as it wants with different values. In this example, it might supply &apos;Bread&apos; for the first parameter and &lt;code&gt;1.00&lt;/code&gt; for the second parameter.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can use a prepared statement by including placeholders in your SQL. There are basically three ones without placeholders (don&apos;t try this with variable its above one), one with unnamed placeholders, and one with named placeholders.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; So now, what are named placeholders and how do I use them?&lt;br&gt;\n&lt;strong&gt;A.&lt;/strong&gt; Named placeholders. Use descriptive names preceded by a colon, instead of question marks. We don&apos;t care about position/order of value in name place holder:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;bindParam(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:bla&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$bla&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/pdostatement.bindparam.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;bindParam(parameter,variable,data_type,length,driver_options)&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You can also bind using an execute array as well:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM table WHERE id=:id AND name=:name&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:name&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;:id&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable&quot;&gt;$rows&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetchAll&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;FETCH_ASSOC&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another nice feature for &lt;code&gt;OOP&lt;/code&gt; friends is that named placeholders have the ability to insert objects directly into your database, assuming the properties match the named fields. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;person&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$add&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__construct&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;name = &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;add = &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;;\n    }\n\n}\n&lt;span class=&quot;hljs-variable&quot;&gt;$demo&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;john&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;29 bla district&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO table (name, add) value (:name, :add)&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;((&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;)&lt;span class=&quot;hljs-variable&quot;&gt;$demo&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; So now, what are unnamed placeholders and how do I use them?&lt;br&gt;\n&lt;strong&gt;A.&lt;/strong&gt; Let&apos;s have an example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO folks (name, add) values (?, ?)&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;bindValue&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;, PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;PARAM_STR&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;bindValue&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$add&lt;/span&gt;, PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;PARAM_STR&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO folks (name, add) values (?, ?)&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;john&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;29 bla district&apos;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the above, you can see those &lt;code&gt;?&lt;/code&gt; instead of a name like in a name place holder. Now in the first example, we assign variables to the various placeholders (&lt;code&gt;$stmt-&amp;gt;bindValue(1, $name, PDO::PARAM_STR);&lt;/code&gt;). Then, we assign values to those placeholders and execute the statement. In the second example, the first array element goes to the first &lt;code&gt;?&lt;/code&gt; and the second to the second &lt;code&gt;?&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: In &lt;strong&gt;unnamed placeholders&lt;/strong&gt; we must take care of the proper order of the elements in the array that we are passing to the &lt;code&gt;PDOStatement::execute()&lt;/code&gt; method.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;&lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; prepared queries&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;SELECT&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM table WHERE id=:id AND name=:name&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:name&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;:id&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable&quot;&gt;$rows&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetchAll&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;FETCH_ASSOC&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;INSERT&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO table(field1,field2) VALUES(:field1,:field2)&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:field1&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$field1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;:field2&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$field2&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable&quot;&gt;$affected_rows&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;rowCount&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;DELETE FROM table WHERE id=:id&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;bindValue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:id&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;, PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;PARAM_STR&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable&quot;&gt;$affected_rows&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;rowCount&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;UPDATE&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UPDATE table SET name=? WHERE id=?&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable&quot;&gt;$affected_rows&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;rowCount&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/h2&gt;\n\n&lt;p&gt;However &lt;code&gt;PDO&lt;/code&gt; and/or &lt;code&gt;MySQLi&lt;/code&gt; are not completely safe. Check the answer &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/12202218/1723893&quot;&gt;Are PDO prepared statements sufficient to prevent SQL injection?&lt;/a&gt;&lt;/em&gt; by &lt;a href=&quot;https://stackoverflow.com/users/338665/ircmaxell&quot;&gt;ircmaxell&lt;/a&gt;. Also, I am quoting some part from his answer:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setAttribute&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_EMULATE_PREPARES&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SET NAMES GBK&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM test WHERE name = ? LIMIT 1&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;chr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0xbf&lt;/span&gt;) . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;chr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0x27&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; OR 1=1 /*&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;First, let&apos;s begin with the standard comment we give everyone: &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/q/12859942&quot;&gt;&lt;strong&gt;Please, don&apos;t use &lt;code&gt;mysql_*&lt;/code&gt; functions in new code&lt;/strong&gt;&lt;/a&gt;. They are no longer maintained &lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot; rel=&quot;noreferrer&quot;&gt;and are officially deprecated&lt;/a&gt;. See the &lt;a href=&quot;http://uk.php.net/manual/en/function.mysql-connect.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;red box&lt;/strong&gt;&lt;/a&gt;? Learn about &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;prepared statements&lt;/em&gt;&lt;/a&gt; instead, and use &lt;a href=&quot;http://php.net/pdo&quot; rel=&quot;noreferrer&quot;&gt;PDO&lt;/a&gt; or &lt;a href=&quot;http://php.net/mysqli&quot; rel=&quot;noreferrer&quot;&gt;MySQLi&lt;/a&gt; - &lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot; rel=&quot;noreferrer&quot;&gt;this article&lt;/a&gt; will help you decide which. If you choose PDO, &lt;a href=&quot;http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers&quot; rel=&quot;noreferrer&quot;&gt;here is a good tutorial&lt;/a&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Let&apos;s go through this, sentence by sentence, and explain:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;They are no longer maintained, and are officially deprecated&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This means that the PHP community is gradually dropping support for these very old functions. They are likely to not exist in a future (recent) version of PHP! Continued use of these functions may break your code in the (not so) far future.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;NEW! - ext/mysql is now &lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot; rel=&quot;noreferrer&quot;&gt;officially deprecated as of PHP 5.5!&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;h2&gt;Newer! ext/mysql &lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7&quot; rel=&quot;noreferrer&quot;&gt;has been removed in PHP 7&lt;/a&gt;&lt;/em&gt;.&lt;/h2&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Instead, you should learn of prepared statements&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;mysql_*&lt;/code&gt; extension does not support &lt;strong&gt;prepared statements&lt;/strong&gt;, which is (among other things) a very effective countermeasure against &lt;strong&gt;SQL Injection&lt;/strong&gt;. It fixed a very serious vulnerability in MySQL dependent applications which allows attackers to gain access to your script and perform &lt;strong&gt;any possible query&lt;/strong&gt; on your database.&lt;/p&gt;\n\n&lt;p&gt;For more information, see &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/60174/best-way-to-prevent-sql-injection-in-php&quot;&gt;How can I prevent SQL injection in PHP?&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;See the Red Box?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When you go to any &lt;code&gt;mysql&lt;/code&gt; function manual page, you see a red box, explaining it should not be used anymore.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use either PDO or MySQLi&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;There are better, more robust and well-built alternatives, &lt;strong&gt;&lt;a href=&quot;http://php.net/pdo&quot; rel=&quot;noreferrer&quot;&gt;PDO - PHP Database Object&lt;/a&gt;&lt;/strong&gt;, which offers a complete OOP approach to database interaction, and &lt;strong&gt;&lt;a href=&quot;http://php.net/mysqli&quot; rel=&quot;noreferrer&quot;&gt;MySQLi&lt;/a&gt;&lt;/strong&gt;, which is a MySQL specific improvement.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h2&gt;Ease of use&lt;/h2&gt;\n\n&lt;p&gt;The analytic and synthetic reasons were already mentioned. For newcomers there&apos;s a more significant incentive to stop using the dated mysql_ functions. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Contemporary database APIs are just &lt;em&gt;easier&lt;/em&gt; to use.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It&apos;s mostly the &lt;em&gt;bound parameters&lt;/em&gt; which can simplify code. And with &lt;a href=&quot;https://stackoverflow.com/a/14110189&quot;&gt;excellent tutorials (as seen above)&lt;/a&gt; the transition to &lt;a href=&quot;http://php.net/PDO&quot; rel=&quot;noreferrer&quot;&gt;PDO&lt;/a&gt; isn&apos;t overly arduous.&lt;/p&gt;\n\n&lt;p&gt;Rewriting a larger code base at once however takes time. Raison d&apos;être for this intermediate alternative:&lt;/p&gt;\n\n&lt;h3&gt;Equivalent pdo_* functions in place of &lt;s&gt;mysql_*&lt;/s&gt;&lt;/h3&gt;\n\n&lt;p&gt;Using &lt;a href=&quot;http://fossil.include-once.org/upgradephp/artifact/43ab742241e5a3be43d31764dd333ba68e245360&quot; rel=&quot;noreferrer&quot;&gt;&amp;lt;&lt;strong&gt;pdo_mysql.php&lt;/strong&gt;&amp;gt;&lt;/a&gt; you can switch from the old mysql_ functions with &lt;em&gt;minimal effort&lt;/em&gt;. It adds &lt;code&gt;pdo_&lt;/code&gt; function wrappers which replace their &lt;code&gt;mysql_&lt;/code&gt; counterparts.&lt;br&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Simply &lt;code&gt;include_once(&lt;/code&gt;&lt;a href=&quot;http://fossil.include-once.org/upgradephp/artifact/43ab742241e5a3be43d31764dd333ba68e245360&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;&quot;pdo_mysql.php&quot;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;);&lt;/code&gt; in each invocation script that has to interact with the database.\n&lt;br&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Remove the &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt; function prefix &lt;em&gt;everywhere&lt;/em&gt; and replace it with &lt;strong&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;connect()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;query()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;query()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;num_rows()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;num_rows()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;insert_id()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;insert_id()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;fetch_array()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;fetch_array()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;fetch_assoc()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;fetch_assoc()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;real_escape_string()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;real_escape_string()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;and so on...&lt;/em&gt; &lt;br&gt;&lt;br&gt;  &lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Your code will work alike and still mostly look the same:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;include_once&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pdo_mysql.php&quot;&lt;/span&gt;); \n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pdo_connect&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;usrABC&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pw1234567&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pdo_select_db&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pdo_query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT title, html FROM pages&quot;&lt;/span&gt;);  \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pdo_fetch_assoc&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;)) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$row&lt;/span&gt;[title] - &lt;span class=&quot;hljs-subst&quot;&gt;$row&lt;/span&gt;[html]&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Et voilà.&lt;br&gt;\nYour code is &lt;em&gt;using&lt;/em&gt; PDO.&lt;br&gt;\nNow it&apos;s time to actually &lt;em&gt;utilize&lt;/em&gt; it.  &lt;/p&gt;\n\n&lt;h3&gt;Bound parameters can be easy to use&lt;/h3&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/78Ddi.jpg&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;You just need a less unwieldy API.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;pdo_query()&lt;/code&gt; adds very facile support for bound parameters. Converting old code is straightforward:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/PeuHl.png&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Move your variables out of the SQL string.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Add them as comma delimited function parameters to &lt;code&gt;pdo_query()&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Place question marks &lt;code&gt;?&lt;/code&gt; as placeholders where the variables were before.&lt;/li&gt;\n&lt;li&gt;Get rid of &lt;code&gt;&apos;&lt;/code&gt; single quotes that previously enclosed string values/variables.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The advantage becomes more obvious for lengthier code.&lt;/p&gt;\n\n&lt;p&gt;Often string variables aren&apos;t just interpolated into SQL, but concatenated with escaping calls in between.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lisp&quot;&gt;pdo_query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT id, links, html, title, user, date FROM articles\n   WHERE title=&apos;&quot;&lt;/span&gt; . pdo_real_escape_string($title) . &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; OR id=&apos;&quot;&lt;/span&gt;.\n   pdo_real_escape_string($title) . &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; AND user &amp;lt;&amp;gt; &apos;&quot;&lt;/span&gt; .\n   pdo_real_escape_string($root) . &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; ORDER BY date&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With &lt;code&gt;?&lt;/code&gt; placeholders applied you don&apos;t have to bother with that:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;pdo_query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT id, links, html, title, user, date FROM articles\n   WHERE title=? OR id=? AND user&amp;lt;&amp;gt;? ORDER BY date&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$title&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$root&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Remember that pdo_* still allows &lt;em&gt;either or&lt;/em&gt;.&lt;br&gt;\nJust don&apos;t escape a variable &lt;em&gt;and&lt;/em&gt; bind it in the same query.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The placeholder feature is provided by the real PDO behind it.&lt;/li&gt;\n&lt;li&gt;Thus also allowed &lt;code&gt;:named&lt;/code&gt; placeholder lists later.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;More importantly you can pass $_REQUEST[] variables safely behind any query. When submitted &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; fields match the database structure exactly it&apos;s even shorter:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;pdo_query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO pages VALUES (?,?,?,?,?)&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So much simplicity. But let&apos;s get back to some more rewriting advises and technical reasons on why you may want to get rid of &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt; and escaping.&lt;/p&gt;\n\n&lt;h3&gt;Fix or remove any oldschool &lt;a href=&quot;https://stackoverflow.com/questions/3126072/what-are-the-best-php-input-sanitizing-functions&quot;&gt;&lt;code&gt;sanitize()&lt;/code&gt;&lt;/a&gt; function&lt;/h3&gt;\n\n&lt;p&gt;Once you have converted all &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt; calls to &lt;code&gt;pdo_query&lt;/code&gt; with bound params, remove all redundant &lt;code&gt;pdo_real_escape_string&lt;/code&gt; calls.&lt;/p&gt;\n\n&lt;p&gt;In particular you should fix any &lt;code&gt;sanitize&lt;/code&gt; or &lt;code&gt;clean&lt;/code&gt; or &lt;code&gt;filterThis&lt;/code&gt; or &lt;code&gt;clean_data&lt;/code&gt; functions as advertised by dated tutorials in one form or the other:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sanitize&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;trim&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strip_tags&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;htmlentities&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pdo_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;))));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Most glaring bug here is the lack of documentation. More significantly the order of filtering was in exactly the wrong order.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Correct order would have been: deprecatedly &lt;code&gt;stripslashes&lt;/code&gt; as the innermost call, then &lt;code&gt;trim&lt;/code&gt;, afterwards &lt;code&gt;strip_tags&lt;/code&gt;, &lt;code&gt;htmlentities&lt;/code&gt; for output context, and only lastly the &lt;code&gt;_escape_string&lt;/code&gt; as its application should directly preceed the SQL intersparsing.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;But as first step just &lt;strong&gt;get rid of the &lt;code&gt;_real_escape_string&lt;/code&gt;&lt;/strong&gt; call.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You may have to keep the rest of your &lt;code&gt;sanitize()&lt;/code&gt; function for now if your database and application flow expect HTML-context-safe strings. Add a comment that it applies only HTML escaping henceforth.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;String/value handling is delegated to PDO and its parameterized statements.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If there was any mention of &lt;code&gt;stripslashes()&lt;/code&gt; in your sanitize function, it may indicate a higher level oversight.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;That was commonly there to undo damage (double escaping) from the deprecated &lt;a href=&quot;http://php.net/magic_quotes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;magic_quotes&lt;/code&gt;&lt;/a&gt;. Which however is &lt;a href=&quot;https://stackoverflow.com/questions/517008/how-to-turn-off-magic-quotes-on-shared-hosting&quot;&gt;best fixed centrally&lt;/a&gt;, not string by string.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use one of the &lt;a href=&quot;http://php.net/security.magicquotes.disabling&quot; rel=&quot;noreferrer&quot;&gt;userland reversal&lt;/a&gt; approaches. Then remove the &lt;code&gt;stripslashes()&lt;/code&gt; in the &lt;code&gt;sanitize&lt;/code&gt; function.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Historic note on magic_quotes.&lt;/strong&gt; That feature is rightly deprecated. It&apos;s often incorrectly portrayed as failed &lt;em&gt;security&lt;/em&gt; feature however. But magic_quotes are as much a failed security feature as tennis balls have failed as nutrition source. That simply wasn&apos;t their purpose.&lt;/p&gt;\n  \n  &lt;p&gt;The original implementation in PHP2/FI introduced it explicitly with just &quot;&lt;em&gt;quotes will be automatically escaped making it easier to pass form data directly to msql queries&lt;/em&gt;&quot;. Notably it was accidentially safe to use with &lt;a href=&quot;http://www.hughes.com.au/products/msql/&quot; rel=&quot;noreferrer&quot;&gt;mSQL&lt;/a&gt;, as that supported ASCII only.&lt;br&gt;\n  Then PHP3/Zend reintroduced magic_quotes for MySQL and misdocumented it. But originally it was just a &lt;a href=&quot;https://stackoverflow.com/questions/16098194/why-magic-quotes-has-been-removed-from-php-5-4&quot;&gt;convenience feature&lt;/a&gt;, not intend for security. &lt;/p&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;How prepared statements differ&lt;/h3&gt;\n\n&lt;p&gt;When you scramble string variables into the SQL queries, it doesn&apos;t just get more intricate for you to follow. It&apos;s also extraneous effort for MySQL to segregate code and data again.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/niZ7j.png&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;SQL injections simply are when &lt;em&gt;data bleeds into code&lt;/em&gt; context. A database server can&apos;t later spot where PHP originally glued variables inbetween query clauses.&lt;/p&gt;\n\n&lt;p&gt;With bound parameters you separate SQL code and SQL-context values in your PHP code. But it doesn&apos;t get shuffled up again behind the scenes (except with PDO::EMULATE_PREPARES). Your database receives the unvaried SQL commands and 1:1 variable values.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/M7PXp.png&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;While this answer stresses that you should care about the readability advantages of dropping &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;. There&apos;s occasionally also a performance advantage (repeated INSERTs with just differing values) due to this visible and technical data/code separation. &lt;/p&gt;\n\n&lt;p&gt;Beware that parameter binding still isn&apos;t a magic one-stop solution against &lt;em&gt;all&lt;/em&gt; SQL injections. It handles the most common use for data/values. But can&apos;t whitelist column name / table identifiers, help with dynamic clause construction, or just plain array value lists.&lt;/p&gt;\n\n&lt;h3&gt;Hybrid PDO use&lt;/h3&gt;\n\n&lt;p&gt;These &lt;code&gt;pdo_*&lt;/code&gt; wrapper functions make a coding-friendly stop-gap API. (It&apos;s pretty much what &lt;code&gt;MYSQLI&lt;/code&gt; could have been if it wasn&apos;t for the idiosyncratic function signature shift). They also expose the real PDO at most times.&lt;br&gt;\nRewriting doesn&apos;t have to stop at using the new pdo_ function names. You could one by one transition each pdo_query() into a plain $pdo-&amp;gt;prepare()-&amp;gt;execute() call.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s best to start at simplifying again however. For example the common result fetching:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = pdo_query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM tbl&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt; = pdo_fetch_assoc(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;)) {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Can be replaced with just an foreach iteration:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;) {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or better yet a direct and complete array retrieval:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;fetchAll&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You&apos;ll get more helpful warnings in most cases than PDO or mysql_ usually provide after failed queries.&lt;/p&gt;\n\n&lt;h3&gt;Other options&lt;/h3&gt;\n\n&lt;p&gt;So this hopefully visualized some &lt;em&gt;practical&lt;/em&gt; reasons and a worthwile pathway to drop &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;.&lt;/p&gt;\n\n&lt;p&gt;Just switching to &lt;a href=&quot;/questions/tagged/pdo&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;pdo&apos;&quot; rel=&quot;tag&quot;&gt;pdo&lt;/a&gt; doesn&apos;t quite cut it. &lt;code&gt;pdo_query()&lt;/code&gt; is also just a frontend onto it.&lt;/p&gt;\n\n&lt;p&gt;Unless you also introduce parameter binding or can utilize something else from the nicer API, it&apos;s a pointless switch. I hope it&apos;s portrayed simple enough to not further the discouragement to newcomers. (Education usually works better than prohibition.)&lt;/p&gt;\n\n&lt;p&gt;While it qualifies for the simplest-thing-that-could-possibly-work category, it&apos;s also still very experimental code. I just wrote it over the weekend. There&apos;s a plethora of alternatives however. Just google for &lt;a href=&quot;https://www.google.de/search?client=stackoverflow&amp;amp;q=PHP+database+abstraction&quot; rel=&quot;noreferrer&quot;&gt;PHP database abstraction&lt;/a&gt; and browse a little. There always have been and will be lots of excellent libraries for such tasks.&lt;/p&gt;\n\n&lt;p&gt;If you want to simplify your database interaction further, mappers like &lt;a href=&quot;http://j4mie.github.io/idiormandparis/&quot; rel=&quot;noreferrer&quot;&gt;Paris/Idiorm&lt;/a&gt; are worth a try. Just like nobody uses the bland DOM in JavaScript anymore, you don&apos;t have to babysit a raw database interface nowadays.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;mysql_&lt;/code&gt; functions:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;are out of date - they&apos;re not maintained any more&lt;/li&gt;\n&lt;li&gt;don&apos;t allow you to move easily to another database backend&lt;/li&gt;\n&lt;li&gt;don&apos;t support prepared statements, hence&lt;/li&gt;\n&lt;li&gt;encourage programmers to use concatenation to build queries, leading to SQL injection vulnerabilities&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Speaking of &lt;em&gt;technical&lt;/em&gt; reasons, there are only a few, extremely specific and rarely used. Most likely you will never ever use them in your life.&lt;br&gt;\nMaybe I am too ignorant, but I never had an opportunity to use them things like &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;non-blocking, asynchronous queries&lt;/li&gt;\n&lt;li&gt;stored procedures returning multiple resultsets&lt;/li&gt;\n&lt;li&gt;Encryption (SSL)&lt;/li&gt;\n&lt;li&gt;Compression&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you need them - these are no doubt technical reasons to move away from mysql extension toward something more stylish and modern-looking.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Nevertheless, there are also some non-technical issues, which can make your experience a bit harder&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;further use of these functions with modern PHP versions will raise deprecated-level notices. They simply can be turned off.&lt;/li&gt;\n&lt;li&gt;in a distant future, they can be possibly removed from the default PHP build. Not a big deal too, as mydsql ext will be moved into PECL and every hoster will be happy to compile PHP with it, as they don&apos;t want to lose clients whose sites were working for decades.   &lt;/li&gt;\n&lt;li&gt;strong resistance from Stackoverflow community. Еverytime you mention these honest functions, you being told that they are under strict taboo.&lt;/li&gt;\n&lt;li&gt;being an average PHP user, most likely your idea of using these functions is error-prone and wrong. Just because of all these numerous tutorials and manuals which teach you the wrong way. Not the functions themselves - I have to emphasize it - but the way they are used.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This latter issue is a problem.&lt;br&gt;\nBut, in my opinion, the proposed solution is no better either.&lt;br&gt;\nIt seems to me &lt;strong&gt;too idealistic&lt;/strong&gt; a dream that all those PHP users will learn how to handle SQL queries properly at once. Most likely they would just change mysql_* to mysqli_* mechanically, &lt;strong&gt;leaving the approach the same&lt;/strong&gt;. Especially because mysqli makes prepared statements usage incredible painful and troublesome.&lt;br&gt;\nNot to mention that &lt;em&gt;native&lt;/em&gt; prepared statements &lt;strong&gt;aren&apos;t enough to protect&lt;/strong&gt; from SQL injections, and neither mysqli nor PDO offers a solution. &lt;/p&gt;\n\n&lt;p&gt;So, instead of fighting this honest extension, I&apos;d prefer to fight wrong practices and educate people in the right ways. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Also, there are some false or non-significant reasons, like&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Doesn&apos;t support Stored Procedures (we were using &lt;code&gt;mysql_query(&quot;CALL my_proc&quot;);&lt;/code&gt; for ages)&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t support Transactions (same as above)&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t support Multiple Statements (who need them?)&lt;/li&gt;\n&lt;li&gt;Not under active development (so what? does it affect &lt;em&gt;you&lt;/em&gt; in any practical way?)&lt;/li&gt;\n&lt;li&gt;Lacks an OO interface (to create one is a matter of several hours)&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t support Prepared Statements or Parametrized Queries&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The last one is an interesting point. Although mysql ext do not support &lt;em&gt;native&lt;/em&gt; prepared statements, they aren&apos;t required for the safety. We can easily fake prepared statements using manually handled placeholders (just like PDO does):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;paraQuery&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$args&lt;/span&gt;  = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;func_get_args&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_shift&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$args&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;str_replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;%s&apos;&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;); \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$args&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$args&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;] = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;  = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;vsprintf&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$args&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_error&lt;/span&gt;().&lt;span class=&quot;hljs-string&quot;&gt;&quot; [&lt;span class=&quot;hljs-subst&quot;&gt;$query&lt;/span&gt;]&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;  = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM table where a=%s AND b LIKE %s LIMIT %d&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;paraQuery&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&lt;span class=&quot;hljs-subst&quot;&gt;$b&lt;/span&gt;%&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$limit&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;voila&lt;/em&gt;, everything is parameterized and safe.&lt;/p&gt;\n\n&lt;p&gt;But okay, if you don&apos;t like the red box in the manual, a problem of choice arises: mysqli or PDO?&lt;/p&gt;\n\n&lt;p&gt;Well, the answer would be as follows:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you understand the necessity of using a &lt;em&gt;database abstraction layer&lt;/em&gt; and looking for an API to create one, &lt;strong&gt;mysqli&lt;/strong&gt; is a very good choice, as it indeed supports many mysql-specific features.&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If, like vast majority of PHP folks, you are using raw API calls right in the application code (which is essentially wrong practice) - &lt;strong&gt;PDO is the only choice&lt;/strong&gt;, as this extension pretends to be not just API but rather a semi-DAL, still incomplete but offers many important features, with two of them makes PDO critically distinguished from mysqli:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;unlike mysqli, PDO can bind placeholders &lt;em&gt;by value&lt;/em&gt;, which makes dynamically built queries feasible without several screens of quite messy code.&lt;/li&gt;\n&lt;li&gt;unlike mysqli, PDO can always return query result in a simple usual array, while mysqli can do it only on mysqlnd installations.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So, if you are an average PHP user and want to save yourself a ton of headaches when using native prepared statements, PDO - again - is the only choice.&lt;br&gt;\nHowever, PDO is not a silver bullet too and has its hardships.&lt;br&gt;\nSo, I wrote solutions for all the common pitfalls and complex cases in the &lt;a href=&quot;https://stackoverflow.com/tags/pdo/info&quot;&gt;&lt;strong&gt;PDO tag wiki&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Nevertheless, everyone talking about extensions always missing the &lt;strong&gt;2 important facts&lt;/strong&gt; about Mysqli and PDO:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Prepared statement &lt;strong&gt;isn&apos;t a silver bullet&lt;/strong&gt;. There are dynamical identifiers which cannot be bound using prepared statements. There are dynamical queries with an unknown number of parameters which makes query building a difficult task.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Neither mysqli_* nor PDO functions should have appeared in the application code.&lt;/strong&gt;&lt;br&gt;\nThere ought to be an &lt;strong&gt;abstraction layer&lt;/strong&gt; between them and application code, which will do all the dirty job of binding, looping, error handling, etc. inside, making application code DRY and clean. Especially for the complex cases like dynamical query building.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;So, just switching to PDO or mysqli is not enough. One has to use an ORM, or a query builder, or whatever database abstraction class instead of calling raw API functions in their code.&lt;br&gt;\nAnd contrary - if you have an abstraction layer between your application code and mysql API - &lt;strong&gt;it doesn&apos;t actually matter which engine is used.&lt;/strong&gt; You can use mysql ext until it goes deprecated and then easily rewrite your abstraction class to another engine, &lt;strong&gt;having all the application code intact.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Here are some examples based on my &lt;a href=&quot;https://github.com/colshrapnel/safemysql/blob/master/safemysql.class.php&quot; rel=&quot;noreferrer&quot;&gt;safemysql class&lt;/a&gt; to show how such an abstraction class ought to be:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$city_ids&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$cities&lt;/span&gt;   = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getCol&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name FROM cities WHERE is IN(?a)&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$city_ids&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Compare this one single line with &lt;a href=&quot;https://stackoverflow.com/a/15991146/285587&quot;&gt;amount of code you will need with PDO&lt;/a&gt;.&lt;br&gt;\nThen compare with &lt;a href=&quot;https://stackoverflow.com/a/17874410/285587&quot;&gt;crazy amount of code&lt;/a&gt; you will need with raw Mysqli prepared statements.\nNote that error handling, profiling, query logging already built in and running.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$insert&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;surname&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;O&apos;Hara&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO users SET ?u&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$insert&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Compare it with usual PDO inserts, when every single field name being repeated six to ten times - in all these numerous named placeholders, bindings, and query definitions.&lt;/p&gt;\n\n&lt;p&gt;Another example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;-&amp;gt;getAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM goods ORDER BY ?n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can hardly find an example for PDO to handle such practical case.&lt;br&gt;\nAnd it will be too wordy and most likely unsafe.    &lt;/p&gt;\n\n&lt;p&gt;So, once more - it is not just raw driver should be your concern but abstraction class, useful not only for silly examples from beginner&apos;s manual but to solve whatever real-life problems. &lt;/p&gt;\n    ","\n&lt;p&gt;There are many reasons, but perhaps the most important one is that those functions encourage insecure programming practices because they do not support prepared statements. Prepared statements help prevent SQL injection attacks.&lt;/p&gt;\n\n&lt;p&gt;When using &lt;code&gt;mysql_*&lt;/code&gt; functions, you have to remember to run user-supplied parameters through &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;. If you forget in just one place or if you happen to escape only part of the input, your database may be subject to attack.&lt;/p&gt;\n\n&lt;p&gt;Using prepared statements in &lt;code&gt;PDO&lt;/code&gt; or &lt;code&gt;mysqli&lt;/code&gt; will make it so that these sorts of programming errors are more difficult to make.&lt;/p&gt;\n    ","\n&lt;p&gt;Because (amongst other reasons) it&apos;s much harder to ensure the input data is sanitized. If you use parametrized queries, as one does with PDO or mysqli you can entirely avoid the risk.&lt;/p&gt;\n\n&lt;p&gt;As an example, someone could use &lt;code&gt;&quot;enhzflep); drop table users&quot;&lt;/code&gt; as a username. The old functions will allow executing multiple statements per query, so something like that nasty bugger can delete a whole table.&lt;/p&gt;\n\n&lt;p&gt;If one were to use PDO of mysqli, the user-name would end-up being &lt;code&gt;&quot;enhzflep); drop table users&quot;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://bobby-tables.com/&quot; rel=&quot;noreferrer&quot;&gt;bobby-tables.com&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This answer is written to show just how trivial it is to bypass poorly written PHP user-validation code, how (and using what) these attacks work and how to replace the old MySQL functions with a secure prepared statement - and basically, why StackOverflow users (probably with a lot of rep) are barking at new users asking questions to improve their code.&lt;/p&gt;\n&lt;p&gt;First off, please feel free to create this test mysql database (I have called mine prep):&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;mysql&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; users(\n    &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; id &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;primary&lt;/span&gt; key auto_increment,\n    &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; userid tinytext,\n    &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; pass tinytext);\nQuery OK, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt; sec)\n\nmysql&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Fluffeh&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;mypass&apos;&lt;/span&gt;);\nQuery OK, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;hljs-number&quot;&gt;0.04&lt;/span&gt; sec)\n\nmysql&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;prepared&apos;&lt;/span&gt;@&lt;span class=&quot;hljs-string&quot;&gt;&apos;localhost&apos;&lt;/span&gt; identified &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;example&apos;&lt;/span&gt;;\nQuery OK, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt; sec)\n\nmysql&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt; privileges &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; prep.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;prepared&apos;&lt;/span&gt;@&lt;span class=&quot;hljs-string&quot;&gt;&apos;localhost&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;grant&lt;/span&gt; option;\nQuery OK, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt; sec)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;With that done, we can move to our PHP code.&lt;/p&gt;\n&lt;p&gt;Lets assume the following script is the verification process for an admin on a website (simplified but working if you copy and use it for testing):&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;]))\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;];\n    }   \n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;bob&apos;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;pass&apos;&lt;/span&gt;]))\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$pass&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;pass&apos;&lt;/span&gt;];\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$pass&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;bob&apos;&lt;/span&gt;;\n    }\n    \n    &lt;span class=&quot;hljs-variable&quot;&gt;$database&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;prep&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_connect&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;localhost&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;prepared&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;example&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_select_db&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$database&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to select database&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;select id, userid, pass from users where userid=&apos;&lt;span class=&quot;hljs-subst&quot;&gt;$user&lt;/span&gt;&apos; and pass=&apos;&lt;span class=&quot;hljs-subst&quot;&gt;$pass&lt;/span&gt;&apos;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//echo $sql.&quot;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&quot;;&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;=&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$isAdmin&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_fetch_assoc&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;My id is &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&quot; and my username is &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;userid&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&quot; and lastly, my password is &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;pass&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$isAdmin&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// We have correctly matched the Username and Password&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Lets give this person full access&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$isAdmin&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;The check passed. We have a verified admin!&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;You could not be verified. Please try again...&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_close&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;exploited&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;post&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    User: &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    Pass: &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;pass&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;submit&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Seems legit enough at first glance.&lt;/p&gt;\n&lt;p&gt;The user has to enter a login and password, right?&lt;/p&gt;\n&lt;p&gt;Brilliant, now enter the following:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-http&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;: &lt;/span&gt;bob\n&lt;span class=&quot;hljs-attribute&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;: &lt;/span&gt;somePass\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and submit it.&lt;/p&gt;\n&lt;p&gt;The output is as follows:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-erlang&quot;&gt;You could &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; be verified. Please &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; again...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Super! Working as expected, now lets try the actual username and password:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-http&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;: &lt;/span&gt;Fluffeh\n&lt;span class=&quot;hljs-attribute&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;: &lt;/span&gt;mypass\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Amazing! Hi-fives all round, the code correctly verified an admin. It&apos;s perfect!&lt;/p&gt;\n&lt;p&gt;Well, not really. Lets say the user is a clever little person. Lets say the person is me.&lt;/p&gt;\n&lt;p&gt;Enter in the following:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;user:&lt;/span&gt; bob\n&lt;span class=&quot;hljs-symbol&quot;&gt;pass:&lt;/span&gt; n&lt;span class=&quot;hljs-comment&quot;&gt;&apos; or 1=1 or &apos;m=m&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And the output is:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;The check passed. We have &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt; verified admin!\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Congrats, you just allowed me to enter your super-protected admins only section with me entering a false username and a false password. Seriously, if you don&apos;t believe me, create the database with the code I provided, and run this PHP code - which at glance REALLY does seem to verify the username and password rather nicely.&lt;/p&gt;\n&lt;p&gt;So, in answer, THAT IS WHY YOU ARE BEING YELLED AT.&lt;/p&gt;\n&lt;p&gt;So, lets have a look at what went wrong, and why I just got into your super-admin-only-bat-cave. I took a guess and assumed that you weren&apos;t being careful with your inputs and simply passed them to the database directly. I constructed the input in a way tht would CHANGE the query that you were actually running. So, what was it supposed to be, and what did it end up being?&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;select &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;, userid, &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; users where userid=&lt;span class=&quot;hljs-string&quot;&gt;&apos;$user&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;$pass&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That&apos;s the query, but when we replace the variables with the actual inputs that we used, we get the following:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;select &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;, userid, &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; users where userid=&lt;span class=&quot;hljs-string&quot;&gt;&apos;bob&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;m=m&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See how I constructed my &quot;password&quot; so that it would first close the single quote around the password, then introduce a completely new comparison? Then just for safety, I added another &quot;string&quot; so that the single quote would get closed as expected in the code we originally had.&lt;/p&gt;\n&lt;p&gt;However, this isn&apos;t about folks yelling at you now, this is about showing you how to make your code more secure.&lt;/p&gt;\n&lt;p&gt;Okay, so what went wrong, and how can we fix it?&lt;/p&gt;\n&lt;p&gt;This is a classic SQL injection attack. One of the simplest for that matter. On the scale of attack vectors, this is a toddler attacking a tank - and winning.&lt;/p&gt;\n&lt;p&gt;So, how do we protect your sacred admin section and make it nice and secure? The first thing to do will be to stop using those really old and deprecated &lt;code&gt;mysql_*&lt;/code&gt; functions. I know, you followed a tutorial you found online and it works, but it&apos;s old, it&apos;s outdated and in the space of a few minutes, I have just broken past it without so much as breaking a sweat.&lt;/p&gt;\n&lt;p&gt;Now, you have the better options of using &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;mysqli_&lt;/a&gt; or &lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;PDO&lt;/a&gt;. I am personally a big fan of PDO, so I will be using PDO in the rest of this answer. There are pro&apos;s and con&apos;s, but personally I find that the pro&apos;s far outweigh the con&apos;s. It&apos;s portable across multiple database engines - whether you are using MySQL or Oracle or just about bloody anything - just by changing the connection string, it has all the fancy features we want to use and it is nice and clean. I like clean.&lt;/p&gt;\n&lt;p&gt;Now, lets have a look at that code again, this time written using a PDO object:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;]))\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;];\n    }   \n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;bob&apos;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;pass&apos;&lt;/span&gt;]))\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$pass&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;pass&apos;&lt;/span&gt;];\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$pass&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;bob&apos;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$isAdmin&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    \n    &lt;span class=&quot;hljs-variable&quot;&gt;$database&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;prep&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;PDO&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;mysql:host=localhost;dbname=prep&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;prepared&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;example&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;select id, userid, pass from users where userid=:user and pass=:password&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$myPDO&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_CURSOR&lt;/span&gt; =&amp;gt; PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;CURSOR_FWDONLY&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$myPDO&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:user&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;:password&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$pass&lt;/span&gt;)))\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$myPDO&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetch&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;FETCH_ASSOC&lt;/span&gt;))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;My id is &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&quot; and my username is &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;userid&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&quot; and lastly, my password is &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;pass&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$isAdmin&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// We have correctly matched the Username and Password&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Lets give this person full access&lt;/span&gt;\n        }\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$isAdmin&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;The check passed. We have a verified admin!&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;You could not be verified. Please try again...&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;\n    }\n\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;exploited&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;post&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    User: &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    Pass: &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;pass&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;submit&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The major differences are that there are no more &lt;code&gt;mysql_*&lt;/code&gt; functions. It&apos;s all done via a PDO object, secondly, it is using a prepared statement. Now, what&apos;s a prepared statement you ask? It&apos;s a way to tell the database ahead of running a query, what the query is that we are going to run. In this case, we tell the database: &quot;Hi, I am going to run a select statement wanting id, userid and pass from the table users where the userid is a variable and the pass is also a variable.&quot;.&lt;/p&gt;\n&lt;p&gt;Then, in the execute statement, we pass the database an array with all the variables that it now expects.&lt;/p&gt;\n&lt;p&gt;The results are fantastic. Lets try those username and password combinations from before again:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-http&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;: &lt;/span&gt;bob\n&lt;span class=&quot;hljs-attribute&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;: &lt;/span&gt;somePass\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;User wasn&apos;t verified. Awesome.&lt;/p&gt;\n&lt;p&gt;How about:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-http&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;: &lt;/span&gt;Fluffeh\n&lt;span class=&quot;hljs-attribute&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;: &lt;/span&gt;mypass\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Oh, I just got a little excited, it worked: The check passed. We have a verified admin!&lt;/p&gt;\n&lt;p&gt;Now, lets try the data that a clever chap would enter to try to get past our little verification system:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;user:&lt;/span&gt; bob\n&lt;span class=&quot;hljs-symbol&quot;&gt;pass:&lt;/span&gt; n&lt;span class=&quot;hljs-comment&quot;&gt;&apos; or 1=1 or &apos;m=m&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This time, we get the following:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-erlang&quot;&gt;You could &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; be verified. Please &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; again...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is why you are being yelled at when posting questions - it&apos;s because people can see that your code can be bypassed wihout even trying. Please, do use this question and answer to improve your code, to make it more secure and to use functions that are current.&lt;/p&gt;\n&lt;p&gt;Lastly, this isn&apos;t to say that this is PERFECT code. There are many more things that you could do to improve it, use hashed passwords for example, ensure that when you store sensitive information in the database, you don&apos;t store it in plain text, have multiple levels of verification - but really, if you just change your old injection prone code to this, you will be WELL along the way to writing good code - and the fact that you have gotten this far and are still reading gives me a sense of hope that you will not only implement this type of code when writing your websites and applications, but that you might go out and research those other things I just mentioned - and more. Write the best code you can, not the most basic code that barely functions.&lt;/p&gt;\n    ","\n&lt;p&gt;The MySQL extension is the oldest of the three and was the original way that developers used to communicate with MySQL. This extension is now being &lt;a href=&quot;http://php.net/manual/en/migration55.deprecated.php&quot;&gt;deprecated&lt;/a&gt; in favor of the other &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;two&lt;/a&gt; &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;alternatives&lt;/a&gt; because of improvements made in newer releases of both PHP and MySQL.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;MySQLi&lt;/a&gt; is the &apos;improved&apos; extension for working with MySQL databases. It takes advantage of features that are available in newer versions of the MySQL server, exposes both a function-oriented and an object-oriented interface to the developer and a does few other nifty things.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; offers an API that consolidates most of the functionality that was previously spread across the major database access extensions, i.e. MySQL, PostgreSQL, SQLite, MSSQL, etc. The interface exposes high-level objects for the programmer to work with database connections, queries and result sets, and low-level drivers perform communication and resource handling with the database server. A lot of discussion and work is going into PDO and its considered the appropriate method of working with databases in modern, professional code.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I find the above answers really lengthy, so to summarize:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The mysqli extension has a number of\n  benefits, the key enhancements over\n  the mysql extension being:&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;Object-oriented interface&lt;/li&gt;\n  &lt;li&gt;Support for Prepared Statements&lt;/li&gt;\n  &lt;li&gt;Support for Multiple Statements&lt;/li&gt;\n  &lt;li&gt;Support for Transactions&lt;/li&gt;\n  &lt;li&gt;Enhanced debugging capabilities&lt;/li&gt;\n  &lt;li&gt;Embedded server support&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;http://us2.php.net/manual/en/mysqli.overview.php&quot; rel=&quot;noreferrer&quot;&gt;MySQLi overview&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;As explained in the above answers, the alternatives to mysql are mysqli and PDO (PHP Data Objects).&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;API supports server-side Prepared Statements: Supported by MYSQLi and PDO&lt;/li&gt;\n&lt;li&gt;API supports client-side Prepared Statements: Supported only by PDO&lt;/li&gt;\n&lt;li&gt;API supports Stored Procedures: Both MySQLi and PDO&lt;/li&gt;\n&lt;li&gt;API supports Multiple Statements and all MySQL 4.1+ functionality - Supported by MySQLi and mostly also by PDO&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Both MySQLi and PDO were introduced in PHP 5.0, whereas MySQL was introduced prior to PHP 3.0. A point to note is that MySQL is included in PHP5.x though deprecated in later versions. &lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s possible to define almost all &lt;code&gt;mysql_*&lt;/code&gt; functions using mysqli or PDO. Just include them on top of your old PHP application, and it will work on PHP7. My solution &lt;a href=&quot;https://github.com/sunhater/php7-mysql/blob/master/php7-mysql.php&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MYSQL_LINK&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dbl&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$GLOBALS&lt;/span&gt;[MYSQL_LINK] = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) ? &lt;span class=&quot;hljs-variable&quot;&gt;$GLOBALS&lt;/span&gt;[MYSQL_LINK] : &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_connect&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$host&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$pass&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$GLOBALS&lt;/span&gt;[MYSQL_LINK] = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_connect&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$host&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$pass&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$GLOBALS&lt;/span&gt;[MYSQL_LINK];\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_pconnect&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$host&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$pass&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_connect&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$host&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$pass&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_select_db&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_select_db&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_close&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_close&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_error&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_error&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_errno&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_errno&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_ping&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_ping&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_stat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_stat&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_affected_rows&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_affected_rows&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_client_encoding&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_character_set_name&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_thread_id&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_thread_id&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_unbuffered_query&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;, MYSQLI_USE_RESULT);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_set_charset&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$charset&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_set_charset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$charset&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_get_host_info&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_get_host_info&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_get_proto_info&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_get_proto_info&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_get_server_info&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_get_server_info&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_info&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_info&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_get_client_info&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_get_client_info&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_create_db&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;str_replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;`&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;CREATE DATABASE `&lt;span class=&quot;hljs-subst&quot;&gt;$db&lt;/span&gt;`&quot;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_drop_db&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;str_replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;`&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;DROP DATABASE `&lt;span class=&quot;hljs-subst&quot;&gt;$db&lt;/span&gt;`&quot;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_list_dbs&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SHOW DATABASES&quot;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_list_fields&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$table&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;str_replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;`&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;));\n    &lt;span class=&quot;hljs-variable&quot;&gt;$table&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;str_replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;`&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$table&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SHOW COLUMNS FROM `&lt;span class=&quot;hljs-subst&quot;&gt;$db&lt;/span&gt;`.`&lt;span class=&quot;hljs-subst&quot;&gt;$table&lt;/span&gt;`&quot;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_list_tables&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;str_replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;`&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SHOW TABLES FROM `&lt;span class=&quot;hljs-subst&quot;&gt;$db&lt;/span&gt;`&quot;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_db_query&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_link&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_select_db&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_fetch_row&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_fetch_row&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_fetch_assoc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_fetch_assoc&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_fetch_array&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;=MYSQLI_BOTH&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_fetch_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_fetch_lengths&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_fetch_lengths&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_insert_id&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_insert_id&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_num_rows&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_num_rows&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_num_fields&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_num_fields&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_data_seek&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_data_seek&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_field_seek&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_field_seek&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_fetch_object&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stdClass&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n        ? &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_fetch_object&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$class&lt;/span&gt;)\n        : &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_fetch_object&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$class&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_db_name&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Database&apos;&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_data_seek&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_fetch_assoc&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$db&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;];\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_fetch_field&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_field_seek&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_fetch_field&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_result&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_field_seek&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_fetch_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;) || !&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;]))\n        ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n        : &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;];\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_field_len&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_fetch_field_direct&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_object&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;) ? &lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;-&amp;gt;length : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_field_name&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_fetch_field_direct&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_object&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;-&amp;gt;orgname) ? &lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;-&amp;gt;name : &lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;-&amp;gt;orgname;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_field_table&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_fetch_field_direct&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_object&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;-&amp;gt;orgtable) ? &lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;-&amp;gt;table : &lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;-&amp;gt;orgtable;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_field_type&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_fetch_field_direct&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_object&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;) ? &lt;span class=&quot;hljs-variable&quot;&gt;$field&lt;/span&gt;-&amp;gt;type : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mysql_free_result&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_free_result&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$qlink&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$e&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Don&apos;t use mysql because is deprecated use Mysqli Instead.&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;What Deprecated Means:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;It means don&apos;t use some specific function/method/software feature/particular software practice it just means that it should not be used because there is (or there will be) a better alternative in that software that should be used instead.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Several common issues can arise when using deprecated functions:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;1. Functions just flat-out stop working:&lt;/strong&gt; Applications or scripts might rely on functions that are simply no longer supported, Thus use their improved versions or alternative.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;2. Warning messages display about deprecation&lt;/strong&gt;: These messages dont normally interfere with site functionality. However, in some cases, they might disrupt the process of the server sending headers.&lt;/p&gt;\n&lt;p&gt;For Example: This can cause login issues (cookies/sessions dont get set properly) or forwarding issues (301/302/303 redirects).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;keep in mind that:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;-Deprecated software is still a part of the software.&lt;/p&gt;\n&lt;p&gt;-Deprecated code is just a status (label) of the code.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Key Differences in MYSQL vs MYSQLI&lt;/strong&gt;\nmysql*&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;old database driver&lt;/li&gt;\n&lt;li&gt;MySQL can only be used procedurally&lt;/li&gt;\n&lt;li&gt;No protection from SQL injection attack&lt;/li&gt;\n&lt;li&gt;Was deprecated in PHP 5.5.0 and was removed in PHP 7&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;mysqli&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;new database driver&lt;/li&gt;\n&lt;li&gt;Currently under usage&lt;/li&gt;\n&lt;li&gt;prepared statements protect from attacks&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;There is no need to update if you are sure you don&apos;t want to upgrade php version , But at the same time you won&apos;t get security updates too which will make your website more vulnerable to hackers that&apos;s the main reason.&lt;/p&gt;\n    "],"id":12,"title":"Why shouldn't I use mysql_* functions in PHP?","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                    &lt;div class=&quot;flex--item mr8&quot;&gt;\n                        &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon iconLightbulb&quot; width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 18 18&quot;&gt;&lt;path d=&quot;M15 6.38A6.48 6.48 0 0 0 7.78.04h-.02A6.49 6.49 0 0 0 2.05 5.6a6.31 6.31 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0 0 15 6.37ZM4.03 5.85A4.49 4.49 0 0 1 8 2.02a4.48 4.48 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 0 1-1.64-3.94ZM10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2h3Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;Want to improve this post?&lt;/b&gt; Provide detailed answers to this question, including citations and an explanation of why your answer is correct. Answers without enough detail may be edited or deleted.\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;What are the technical reasons for why one shouldn&apos;t use &lt;code&gt;mysql_*&lt;/code&gt; functions? (e.g. &lt;code&gt;mysql_query()&lt;/code&gt;, &lt;code&gt;mysql_connect()&lt;/code&gt; or &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;)?&lt;/p&gt;\n\n&lt;p&gt;Why should I use something else even if they work on my site?&lt;/p&gt;\n\n&lt;p&gt;If they don&apos;t work on my site, why do I get errors like &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Warning: mysql_connect(): No such file or directory&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","slug":"why-shouldn't-i-use-mysql_*-functions-in-php-1657384260352","postType":"QUESTION","createdAt":"2022-07-09T16:31:00.000Z","updatedAt":"2022-07-09T16:31:00.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"How do I properly clean up Excel interop objects?","slug":"how-do-i-properly-clean-up-excel-interop-objects-1657388329706"},{"title":"Error: could not find function ... in R","slug":"error:-could-not-find-function-...-in-r-1657388476492"},{"title":"Reference: What is variable scope, which variables are accessible from where and what are \"undefined variable\" errors?","slug":"reference:-what-is-variable-scope-which-variables-are-accessible-from-where-and-what-are-\"undefined-variable\"-errors-1657384644697"},{"title":"CSS selector for first element with class","slug":"css-selector-for-first-element-with-class-1657388028765"},{"title":"Why does a RegExp with global flag give wrong results?","slug":"why-does-a-regexp-with-global-flag-give-wrong-results-1657387788550"},{"title":"Percentage Height HTML 5/CSS","slug":"percentage-height-html-5css-1657387471048"},{"title":"How do I compare strings in Java?","slug":"how-do-i-compare-strings-in-java-1657384243187"},{"title":"How to test multiple variables for equality against a single value?","slug":"how-to-test-multiple-variables-for-equality-against-a-single-value-1657384358504"},{"title":"Why does this PDO statement silently fail?","slug":"why-does-this-pdo-statement-silently-fail-1657384892133"},{"title":"How do I modify the URL without reloading the page?","slug":"how-do-i-modify-the-url-without-reloading-the-page-1657387509731"},{"title":"Actual meaning of 'shell=True' in subprocess","slug":"actual-meaning-of-'shelltrue'-in-subprocess-1657388470341"},{"title":"How can I remove a specific item from an array?","slug":"how-can-i-remove-a-specific-item-from-an-array-1657387552077"},{"title":"What is a clearfix?","slug":"what-is-a-clearfix-1657387337825"},{"title":"Reshaping multiple sets of measurement columns (wide format) into single columns (long format)","slug":"reshaping-multiple-sets-of-measurement-columns-(wide-format)-into-single-columns-(long-format)-1657388016983"},{"title":"How to reshape data from long to wide format","slug":"how-to-reshape-data-from-long-to-wide-format-1657384486421"},{"title":"PHP mail function doesn't complete sending of e-mail","slug":"php-mail-function-doesn't-complete-sending-of-e-mail-1657384307499"},{"title":"How do I make Git forget about a file that was tracked, but is now in .gitignore?","slug":"how-do-i-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-.gitignore-1657387328843"},{"title":"How do servlets work? Instantiation, sessions, shared variables and multithreading","slug":"how-do-servlets-work-instantiation-sessions-shared-variables-and-multithreading-1657387540375"},{"title":"How do you remove duplicates from a list whilst preserving order?","slug":"how-do-you-remove-duplicates-from-a-list-whilst-preserving-order-1657387877978"},{"title":"What's the difference between INNER JOIN, LEFT JOIN, RIGHT JOIN and FULL JOIN? [duplicate]","slug":"what's-the-difference-between-inner-join-left-join-right-join-and-full-join-duplicate-1657388082887"}]},"__N_SSG":true}