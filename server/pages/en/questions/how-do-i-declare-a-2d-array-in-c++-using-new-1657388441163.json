{"pageProps":{"data":{"answer":["\n&lt;p&gt;If your row length is a compile time constant, C++11 allows&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; arr2d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; [nrows][CONSTANT];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/questions/936687/how-do-i-declare-a-2d-array-in-c-using-new/16239446#16239446&quot;&gt;this answer&lt;/a&gt;.  Compilers like gcc that allow variable-length arrays as an extension to C++ can use &lt;code&gt;new&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.com/a/8837664/224132&quot;&gt;as shown here&lt;/a&gt; to get fully runtime-variable array dimension functionality like C99 allows, but portable ISO C++ is limited to only the first dimension being variable.&lt;/p&gt;\n&lt;p&gt;Another efficient option is to do the 2d indexing manually into a big 1d array, as &lt;a href=&quot;https://stackoverflow.com/questions/936687/how-do-i-declare-a-2d-array-in-c-using-new/28841507#28841507&quot;&gt;another answer shows&lt;/a&gt;, allowing the same compiler optimizations as a real 2D array (e.g. proving or checking that arrays don&apos;t alias each other / overlap).&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Otherwise, you can use an array of &lt;em&gt;pointers to arrays&lt;/em&gt; to allow 2D syntax like contiguous 2D arrays, even though it&apos;s not an efficient single large allocation. You can initialize it using a loop, like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;** a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*[rowCount];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; rowCount; ++i)\n    a[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[colCount];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The above, for &lt;code&gt;colCount= 5&lt;/code&gt; and &lt;code&gt;rowCount = 4&lt;/code&gt;, would produce the following:&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/M75kn.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n&lt;p&gt;Don&apos;t forget to &lt;code&gt;delete&lt;/code&gt; each row separately with a loop, before deleting the array of pointers.  Example in &lt;a href=&quot;https://stackoverflow.com/a/936709/224132&quot;&gt;another answer&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;** ary = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[sizeY][sizeX]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;should be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; **ary = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*[sizeY];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; sizeY; ++i) {\n    ary[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[sizeX];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then clean up would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; sizeY; ++i) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; [] ary[i];\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; [] ary;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; as Dietrich Epp pointed out in the comments this is not exactly a light weight solution. An alternative approach would be to use one large block of memory:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ary = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[sizeX*sizeY];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ary[i][j] is then rewritten as&lt;/span&gt;\nary[i*sizeY+j]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Although &lt;a href=&quot;https://stackoverflow.com/a/936702/358475&quot;&gt;this popular answer&lt;/a&gt; will give you your desired indexing syntax, it is doubly inefficient: big and slow both in space and time. There&apos;s a better way.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Why That Answer is Big and Slow&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The proposed solution is to create a dynamic array of pointers, then initializing each pointer to its own, independent dynamic array. The &lt;strong&gt;advantage&lt;/strong&gt; of this approach is that it gives you the indexing syntax you&apos;re used to, so if you want to find the value of the matrix at position x,y, you say:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; val = matrix[ x ][ y ];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works because matrix[x] returns a pointer to an array, which is then indexed with [y]. Breaking it down:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* row = matrix[ x ];\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;  val = row[ y ];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Convenient, yes? We like our [ x ][ y ] syntax. &lt;/p&gt;\n\n&lt;p&gt;But the solution has a big &lt;strong&gt;disadvantage&lt;/strong&gt;, which is that it is both fat and slow. &lt;/p&gt;\n\n&lt;p&gt;Why?&lt;/p&gt;\n\n&lt;p&gt;The reason that it&apos;s both fat and slow is actually the same. Each &quot;row&quot; in the matrix is a separately allocated dynamic array. Making a heap allocation is expensive both in time and space. The allocator takes time to make the allocation, sometimes running O(n) algorithms to do it. And the allocator &quot;pads&quot; each of your row arrays with extra bytes for bookkeeping and alignment. That extra space costs...well...extra space. The deallocator will &lt;em&gt;also&lt;/em&gt; take extra time when you go to deallocate the matrix, painstakingly free-ing up each individual row allocation. Gets me in a sweat just thinking about it.&lt;/p&gt;\n\n&lt;p&gt;There&apos;s another reason it&apos;s slow. These separate allocations tend to live in discontinuous parts of memory. One row may be at address 1,000, another at address 100,000you get the idea. This means that when you&apos;re traversing the matrix, you&apos;re leaping through memory like a wild person. This tends to result in cache misses that vastly slow down your processing time.&lt;/p&gt;\n\n&lt;p&gt;So, if you absolute must have your cute [x][y] indexing syntax, use that solution. If you want quickness and smallness (and if you don&apos;t care about those, why are you working in C++?), you need a different solution.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;A Different Solution&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The better solution is to allocate your whole matrix as a single dynamic array, then use (slightly) clever indexing math of your own to access cells. The indexing math is only very slightly clever; nah, it&apos;s not clever at all: it&apos;s obvious.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Matrix&lt;/span&gt;\n{\n    ...\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y )&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x + m_width * y; }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Given this &lt;code&gt;index()&lt;/code&gt; function (which I&apos;m imagining is a member of a class because it needs to know the &lt;code&gt;m_width&lt;/code&gt; of your matrix), you can access cells within your matrix array. The matrix array is allocated like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[ width * height ];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So the equivalent of this in the slow, fat solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;array[ x ][ y ]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...is this in the quick, small solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;array[ &lt;span class=&quot;hljs-built_in&quot;&gt;index&lt;/span&gt;( x, y )]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sad, I know. But you&apos;ll get used to it. And your CPU will thank you.&lt;/p&gt;\n    ","\n&lt;p&gt;In C++11 it is possible:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;[M][N]; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way, the memory is not initialized. To initialize it do this instead:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;[M][N]();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sample program (compile with &quot;g++ -std=c++11&quot;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;utility&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typeinfo&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cxxabi.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; M = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; N = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// allocate (no initializatoin)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;[M][N];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// pollute the memory&lt;/span&gt;\n    array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n    array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// re-allocate, probably will fetch the same memory block (not portable)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] array;\n    array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;[M][N];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// show that memory is not initialized&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; r = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; r &amp;lt; M; r++)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; c &amp;lt; N; c++)\n            cout &amp;lt;&amp;lt; array[r][c] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;;\n        cout &amp;lt;&amp;lt; endl;\n    }\n    cout &amp;lt;&amp;lt; endl;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] array;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the proper way to zero-initialize the array&lt;/span&gt;\n    array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;[M][N]();\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// show the memory is initialized&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; r = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; r &amp;lt; M; r++)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; c &amp;lt; N; c++)\n            cout &amp;lt;&amp;lt; array[r][c] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;;\n        cout &amp;lt;&amp;lt; endl;\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; info;\n    cout &amp;lt;&amp;lt; abi::__cxa_demangle(&lt;span class=&quot;hljs-built_in&quot;&gt;typeid&lt;/span&gt;(array).&lt;span class=&quot;hljs-built_in&quot;&gt;name&lt;/span&gt;(),&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&amp;amp;info) &amp;lt;&amp;lt; endl;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; \n\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; \n&lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; (*) [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I presume from your static array example that you want a rectangular array, and not a jagged one. You can use the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ary = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[sizeX * sizeY];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you can access elements as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;ary[y*sizeX + x]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Don&apos;t forget to use delete[] on &lt;code&gt;ary&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;There are two general techniques that I would recommend for this in C++11 and above, one for compile time dimensions and one for run time. Both answers assume you want uniform, two-dimensional arrays (not jagged ones).&lt;/p&gt;\n\n&lt;h3&gt;Compile time dimensions&lt;/h3&gt;\n\n&lt;p&gt;Use a &lt;code&gt;std::array&lt;/code&gt; of &lt;code&gt;std::array&lt;/code&gt; and then use &lt;code&gt;new&lt;/code&gt; to put it on the heap:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// the alias helps cut down on the noise:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; grid = std::array&amp;lt;std::array&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, sizeX&amp;gt;, sizeY&amp;gt;;\ngrid * ary = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; grid;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Again, this only works if the sizes of the dimensions are known at compile time.&lt;/p&gt;\n\n&lt;h3&gt;Run time dimensions&lt;/h3&gt;\n\n&lt;p&gt;The best way to accomplish a 2 dimensional array with sizes only known at runtime is to wrap it into a class. The class will allocate a 1d array and then overload &lt;code&gt;operator []&lt;/code&gt; to provide indexing for the first dimension. \nThis works because in C++ a 2D array is row-major:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Jx5kE.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Jx5kE.png&quot; alt=&quot; matrix shown in logical form and one-dimensional form&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;(Taken from &lt;a href=&quot;http://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/&quot; rel=&quot;noreferrer&quot;&gt;http://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/&lt;/a&gt;)&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;A contiguous sequence of memory is good for performance reasons and is also easy to clean up. Here&apos;s an example class that omits a lot of useful methods but shows the basic idea:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Grid&lt;/span&gt; {\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; _rows;\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; _columns;\n  std::unique_ptr&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[]&amp;gt; data;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-built_in&quot;&gt;Grid&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; rows, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; columns)\n      : _rows{rows},\n        _columns{columns},\n        data{std::&lt;span class=&quot;hljs-built_in&quot;&gt;make_unique&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[]&amp;gt;(rows * columns)} {}\n\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _rows; }\n\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _columns; }\n\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;[](&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; row) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; row * _columns + data.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;(); }\n\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &amp;amp;&lt;span class=&quot;hljs-title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; row, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; column)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data[row * _columns + column];\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So we create an array with &lt;code&gt;std::make_unique&amp;lt;int[]&amp;gt;(rows * columns)&lt;/code&gt; entries. We overload &lt;code&gt;operator []&lt;/code&gt; which will index the row for us. It returns an &lt;code&gt;int *&lt;/code&gt; which points to the beginning of the row, which can then be dereferenced as normal for the column. Note that &lt;code&gt;make_unique&lt;/code&gt; first ships in C++14 but you can polyfill it in C++11 if necessary.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s also common for these types of structures to overload &lt;code&gt;operator()&lt;/code&gt; as well:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &amp;amp;&lt;span class=&quot;hljs-title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; row, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; column)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data[row * _columns + column];\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;sup&gt;Technically I haven&apos;t used &lt;code&gt;new&lt;/code&gt; here, but it&apos;s trivial to move from &lt;code&gt;std::unique_ptr&amp;lt;int[]&amp;gt;&lt;/code&gt; to &lt;code&gt;int *&lt;/code&gt; and use &lt;code&gt;new&lt;/code&gt;/&lt;code&gt;delete&lt;/code&gt;.&lt;/sup&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Why not use STL:vector? So easy, and you don&apos;t need to delete the vector.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; rows = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; cols = &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;;\nvector&amp;lt; vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;f&lt;/span&gt;(rows, &lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;(cols));\nf[rows - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][cols - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// use it like arrays&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also initialise the &apos;arrays&apos;, just give it a default value&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; DEFAULT = &lt;span class=&quot;hljs-number&quot;&gt;1234&lt;/span&gt;;\nvector&amp;lt; vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;f&lt;/span&gt;(rows, &lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;(cols, DEFAULT));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;https://helloacm.com/how-to-create-2-3-or-multi-dimensional-arrays-in-c-c/&quot; rel=&quot;noreferrer&quot;&gt;How to Create 2, 3 (or Multi) Dimensional Arrays in C/C++?&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This question was bugging me - it&apos;s a common enough problem that a good solution should already exist, something better than the vector of vectors or rolling your own array indexing.&lt;/p&gt;\n\n&lt;p&gt;When something ought to exist in C++ but doesn&apos;t, the first place to look is &lt;a href=&quot;http://www.boost.org/&quot; rel=&quot;noreferrer&quot;&gt;boost.org&lt;/a&gt;. There I found the &lt;a href=&quot;http://www.boost.org/doc/libs/1_37_0/libs/multi_array/doc/index.html&quot; rel=&quot;noreferrer&quot;&gt;Boost Multidimensional Array Library, &lt;b&gt;&lt;code&gt;multi_array&lt;/code&gt;&lt;/b&gt;&lt;/a&gt;. It even includes a &lt;code&gt;multi_array_ref&lt;/code&gt; class that can be used to wrap your own one-dimensional array buffer.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;A 2D array is basically a 1D array of pointers, where every pointer is pointing to a 1D array, which will hold the actual data.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Here N is row and M is column.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;dynamic allocation&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;** ary = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*[N];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)\n      ary[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[M];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;fill&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; M; j++)\n      ary[i][j] = i;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;print&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; M; j++)\n      std::cout &amp;lt;&amp;lt; ary[i][j] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;free&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; [] ary[i];\n&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; [] ary;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This problem has bothered me for 15 years, and all the solutions supplied weren&apos;t satisfactory for me. How do you create a dynamic multidimensional array contiguously in memory? Today I finally found the answer. Using the following code, you can do just that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (argc != &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n    {\n        std::cerr &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;You have to specify the two array dimensions&quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; sizeX, sizeY;\n\n    sizeX = std::&lt;span class=&quot;hljs-built_in&quot;&gt;stoi&lt;/span&gt;(argv[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n    sizeY = std::&lt;span class=&quot;hljs-built_in&quot;&gt;stoi&lt;/span&gt;(argv[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sizeX &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    {\n        std::cerr &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid dimension x&quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sizeY &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    {\n        std::cerr &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid dimension y&quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/******** Create a two dimensional dynamic array in continuous memory ******\n     *\n     * - Define the pointer holding the array\n     * - Allocate memory for the array (linear)\n     * - Allocate memory for the pointers inside the array\n     * - Assign the pointers inside the array the corresponding addresses\n     *   in the linear array\n     **************************************************************************/&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// The resulting array&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;** array2d;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Linear memory allocation&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* temp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[sizeX * sizeY];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// These are the important steps:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Allocate the pointers inside the array,&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// which will be used to index the linear memory&lt;/span&gt;\n    array2d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*[sizeY];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Let the pointers inside the array point to the correct memory addresses&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; sizeY; ++i)\n    {\n        array2d[i] = (temp + i * sizeX);\n    }\n\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Fill the array with ascending numbers&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; y &amp;lt; sizeY; ++y)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; x &amp;lt; sizeX; ++x)\n        {\n            array2d[y][x] = x + y * sizeX;\n        }\n    }\n\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Code for testing&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Print the addresses&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; y &amp;lt; sizeY; ++y)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; x &amp;lt; sizeX; ++x)\n        {\n            std::cout &amp;lt;&amp;lt; std::hex &amp;lt;&amp;lt; &amp;amp;(array2d[y][x]) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;;\n        }\n    }\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n\\n&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Print the array&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; y &amp;lt; sizeY; ++y)\n    {\n        std::cout &amp;lt;&amp;lt; std::hex &amp;lt;&amp;lt; &amp;amp;(array2d[y][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) &amp;lt;&amp;lt; std::dec;\n        std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; x &amp;lt; sizeX; ++x)\n        {\n            std::cout &amp;lt;&amp;lt; array2d[y][x] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;;\n        }\n        std::cout &amp;lt;&amp;lt; std::endl;\n    }\n\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Free memory&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] array2d[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] array2d;\n    array2d = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When you invoke the program with the values sizeX=20 and sizeY=15, the output will be the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0x603010&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603014&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603018&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60301c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603020&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603024&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603028&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60302c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603030&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603034&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603038&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60303c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603040&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603044&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603048&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60304c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603050&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603054&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603058&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60305c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603060&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603064&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603068&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60306c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603070&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603074&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603078&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60307c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603080&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603084&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603088&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60308c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603090&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603094&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603098&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60309c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030a0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030a4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030a8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030ac&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030b0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030b4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030b8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030bc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030c0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030c4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030c8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030cc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030d0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030d4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030d8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030dc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030e0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030e4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030e8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030ec&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030f0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030f4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030f8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6030fc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603100&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603104&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603108&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60310c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603110&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603114&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603118&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60311c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603120&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603124&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603128&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60312c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603130&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603134&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603138&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60313c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603140&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603144&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603148&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60314c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603150&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603154&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603158&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60315c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603160&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603164&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603168&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60316c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603170&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603174&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603178&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60317c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603180&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603184&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603188&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60318c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603190&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603194&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603198&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60319c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031a0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031a4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031a8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031ac&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031b0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031b4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031b8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031bc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031c0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031c4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031c8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031cc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031d0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031d4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031d8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031dc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031e0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031e4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031e8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031ec&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031f0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031f4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031f8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6031fc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603200&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603204&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603208&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60320c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603210&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603214&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603218&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60321c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603220&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603224&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603228&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60322c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603230&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603234&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603238&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60323c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603240&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603244&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603248&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60324c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603250&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603254&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603258&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60325c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603260&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603264&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603268&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60326c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603270&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603274&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603278&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60327c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603280&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603284&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603288&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60328c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603290&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603294&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603298&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60329c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032a0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032a4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032a8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032ac&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032b0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032b4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032b8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032bc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032c0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032c4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032c8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032cc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032d0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032d4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032d8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032dc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032e0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032e4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032e8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032ec&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032f0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032f4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032f8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6032fc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603300&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603304&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603308&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60330c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603310&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603314&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603318&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60331c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603320&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603324&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603328&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60332c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603330&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603334&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603338&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60333c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603340&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603344&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603348&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60334c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603350&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603354&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603358&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60335c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603360&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603364&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603368&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60336c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603370&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603374&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603378&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60337c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603380&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603384&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603388&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60338c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603390&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603394&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603398&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60339c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033a0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033a4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033a8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033ac&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033b0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033b4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033b8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033bc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033c0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033c4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033c8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033cc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033d0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033d4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033d8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033dc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033e0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033e4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033e8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033ec&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033f0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033f4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033f8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6033fc&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603400&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603404&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603408&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60340c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603410&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603414&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603418&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60341c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603420&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603424&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603428&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60342c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603430&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603434&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603438&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60343c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603440&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603444&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603448&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60344c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603450&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603454&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603458&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60345c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603460&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603464&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603468&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60346c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603470&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603474&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603478&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60347c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603480&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603484&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603488&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60348c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603490&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603494&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x603498&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x60349c&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6034a0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6034a4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6034a8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6034ac&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6034b0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6034b4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6034b8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x6034bc&lt;/span&gt; \n\n&lt;span class=&quot;hljs-number&quot;&gt;0x603010&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x603060&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x6030b0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;48&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;51&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;58&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x603100&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;61&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;62&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;66&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;68&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;69&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;71&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;73&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;74&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;76&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;77&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;78&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;79&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x603150&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;82&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;83&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;84&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;85&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;86&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;88&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;89&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;90&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;92&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;94&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;95&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;96&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;97&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;98&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x6031a0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;102&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;103&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;104&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;105&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;106&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;107&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;108&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;109&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;110&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;112&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;113&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;114&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;115&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;116&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;117&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;118&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;119&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x6031f0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;120&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;121&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;122&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;124&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;125&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;126&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;127&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;129&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;130&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;131&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;132&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;133&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;134&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;135&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;136&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;137&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;138&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;139&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x603240&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;140&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;141&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;142&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;143&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;144&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;145&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;146&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;147&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;148&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;149&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;150&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;151&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;152&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;153&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;154&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;155&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;156&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;157&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;158&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;159&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x603290&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;160&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;161&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;162&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;163&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;164&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;165&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;166&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;167&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;168&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;169&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;170&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;171&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;172&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;173&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;174&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;175&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;176&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;177&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;178&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;179&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x6032e0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;180&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;181&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;182&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;183&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;184&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;185&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;186&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;187&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;188&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;189&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;190&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;191&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;192&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;193&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;194&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;195&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;196&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;197&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;198&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;199&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x603330&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;201&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;202&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;203&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;204&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;205&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;206&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;207&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;208&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;209&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;210&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;211&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;212&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;213&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;214&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;215&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;216&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;217&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;218&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;219&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x603380&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;220&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;221&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;223&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;224&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;225&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;226&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;227&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;228&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;229&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;230&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;231&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;232&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;233&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;235&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;236&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;237&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;238&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;239&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x6033d0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;240&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;241&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;242&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;243&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;244&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;245&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;246&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;247&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;248&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;249&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;250&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;251&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;252&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;253&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;254&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;257&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;258&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;259&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x603420&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;260&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;261&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;262&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;263&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;264&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;265&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;266&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;267&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;268&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;269&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;270&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;271&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;272&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;273&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;274&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;275&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;276&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;277&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;278&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;279&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;0x603470&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;280&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;281&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;282&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;283&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;284&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;285&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;286&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;287&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;288&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;289&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;290&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;291&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;292&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;293&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;294&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;295&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;296&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;297&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;298&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;299&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see, the multidimensional array lies contiguously in memory, and no two memory addresses are overlapping. Even the routine for freeing the array is simpler than the standard way of dynamically allocating memory for every single column (or row, depending on how you view the array). Since the array basically consists of two linear arrays, only these two have to be (and can be) freed.&lt;/p&gt;\n\n&lt;p&gt;This method can be extended for more than two dimensions with the same concept. I won&apos;t do it here, but when you get the idea behind it, it is a simple task.&lt;/p&gt;\n\n&lt;p&gt;I hope this code will help you as much as it helped me.&lt;/p&gt;\n    ","\n&lt;p&gt;How to allocate a contiguous multidimensional array in GNU C++?  There&apos;s a GNU extension that allows the &quot;standard&quot; syntax to work.&lt;/p&gt;\n\n&lt;p&gt;It seems the problem come from operator new []. Make sure you use operator new instead :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; (* in)[n][n] = &lt;span class=&quot;hljs-built_in&quot;&gt;new&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;[m][n][n]);  &lt;span class=&quot;hljs-comment&quot;&gt;// GNU extension&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And that&apos;s all : you get a C-compatible multidimensional array...&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;typedef is your friend&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;After going back and looking at many of the other answers I found that a deeper explanation is in order, as many of the other answers either suffer from performance problems or force you to use unusual or burdensome syntax to declare the array, or access the array elements ( or all the above ).&lt;/p&gt;\n\n&lt;p&gt;First off, this answer assumes you know the dimensions of the array at compile time.  If you do, then this is the best solution as it will both give &lt;strong&gt;the best performance&lt;/strong&gt; and allows you to use &lt;strong&gt;standard array syntax to access the array elements&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;p&gt;The reason this gives the best performance is because it allocates all of the arrays as a contiguous block of memory meaning that you are likely to have less page misses and better spacial locality.  Allocating in a loop may cause the individual arrays to end up scattered on multiple non-contiguous pages through the virtual memory space as the allocation loop could be interrupted ( possibly multiple times ) by other threads or processes, or simply due to the discretion of the allocator filling in small, empty memory blocks it happens to have available.  &lt;/p&gt;\n\n&lt;p&gt;The other benefits are a simple declaration syntax and standard array access syntax.&lt;/p&gt;\n\n&lt;p&gt;In C++ using new:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;{\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;array5k_t&lt;/span&gt;)&lt;/span&gt;[5000]&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-type&quot;&gt;array5k_t&lt;/span&gt; *array5k = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;array5k_t&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;];\n\narray5k[&lt;span class=&quot;hljs-number&quot;&gt;4999&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;4999&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;array5k[4999][4999] == %f\\n&quot;&lt;/span&gt;, array5k[&lt;span class=&quot;hljs-number&quot;&gt;4999&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;4999&lt;/span&gt;]);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or C style using calloc:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;{\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(*&lt;span class=&quot;hljs-type&quot;&gt;array5k_t&lt;/span&gt;)&lt;/span&gt;[5000]&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-type&quot;&gt;array5k_t&lt;/span&gt; array5k = &lt;span class=&quot;hljs-built_in&quot;&gt;calloc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n\narray5k[&lt;span class=&quot;hljs-number&quot;&gt;4999&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;4999&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;array5k[4999][4999] == %f\\n&quot;&lt;/span&gt;, array5k[&lt;span class=&quot;hljs-number&quot;&gt;4999&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;4999&lt;/span&gt;]);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The purpose of this answer is not to add anything new that the others don&apos;t already cover, but to extend @Kevin Loney&apos;s answer.&lt;/p&gt;\n\n&lt;p&gt;You could use the lightweight declaration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ary = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[SizeX*SizeY]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and access syntax will be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;ary[i*SizeY+j]     &lt;span class=&quot;hljs-comment&quot;&gt;// ary[i][j]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but this is cumbersome for most, and can lead to confusion. So, you can define a macro as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; ary(i, j)   ary[(i)*SizeY + (j)]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can access the array using the very similar syntax &lt;code&gt;ary(i, j)  // means ary[i][j]&lt;/code&gt;.\nThis has the advantages of being simple and beautiful, and at the same time, using expressions in place of the indices is also simpler and less confusing.&lt;/p&gt;\n\n&lt;p&gt;To access, say, ary[2+5][3+8], you can write &lt;code&gt;ary(2+5, 3+8)&lt;/code&gt; instead of the complex-looking &lt;code&gt;ary[(2+5)*SizeY + (3+8)]&lt;/code&gt; i.e. it saves parentheses and helps readability.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Caveats:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Although the syntax is very similar, it is NOT the same.&lt;/li&gt;\n&lt;li&gt;In case you pass the array to other functions, &lt;code&gt;SizeY&lt;/code&gt; has to be passed with the same name (or instead be declared as a global variable).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Or, if you need to use the array in multiple functions, then you could add SizeY also as another parameter in the macro definition like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; ary(i, j, SizeY)  ary[(i)*(SizeY)+(j)]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You get the idea. Of course, this becomes too long to be useful, but it can still prevent the confusion of + and *.&lt;/p&gt;\n\n&lt;p&gt;This is not recommended definitely, and it will be condemned as bad practice by most experienced users, but I couldn&apos;t resist sharing it because of its elegance.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;br&gt;\nIf you want a portable solution that works for any number of arrays, you can use this syntax:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; access(ar, i, j, SizeY) ar[(i)*(SizeY)+(j)]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then you can pass on any array to the call, with any size using the access syntax:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;access&lt;/span&gt;(ary, i, j, SizeY)      &lt;span class=&quot;hljs-comment&quot;&gt;// ary[i][j]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;P.S.: I&apos;ve tested these, and the same syntax works (as both an lvalue and an rvalue) on g++14 and g++11 compilers.&lt;/p&gt;\n    ","\n&lt;p&gt;Try doing this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; **ary = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* [sizeY];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; sizeY; i++)\n    ary[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[sizeX];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here, I have two options. The first one shows the concept of an array of arrays or pointer of pointers. I prefer the second one because the addresses are contiguous, as you can see in the image.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/GXAI5.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/GXAI5.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; **arr_01,**arr_02,i,j,rows=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,cols=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Implementation 1&lt;/span&gt;\n    arr_01=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*[rows];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;rows;i++)\n        arr_01[i]=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[cols];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;rows;i++){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;j&amp;lt;cols;j++)\n            cout &amp;lt;&amp;lt; arr_01[i]+j &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; ;\n        cout &amp;lt;&amp;lt; endl;\n    }\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;rows;i++)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] arr_01[i];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] arr_01;\n\n\n    cout &amp;lt;&amp;lt; endl;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Implementation 2&lt;/span&gt;\n    arr_02=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*[rows];\n    arr_02[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[rows*cols];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;i&amp;lt;rows;i++)\n        arr_02[i]=arr_02[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]+cols*i;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;rows;i++){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;j&amp;lt;cols;j++)\n            cout &amp;lt;&amp;lt; arr_02[i]+j &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; ;\n        cout &amp;lt;&amp;lt; endl;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] arr_02[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] arr_02;\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Below example may help,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; **a2d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;*[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]; \n    &lt;span class=&quot;hljs-comment&quot;&gt;/* initializing Number of rows, in this case 5 rows) */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++)\n    {\n        a2d[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;/* initializing Number of columns, in this case 3 columns */&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++)\n        {\n            a2d[i][j] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/* Assigning value 1 to all elements */&lt;/span&gt;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++)\n        {\n            cout &amp;lt;&amp;lt; a2d[i][j] &amp;lt;&amp;lt; endl;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Printing all elements to verify all elements have been correctly assigned or not */&lt;/span&gt;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] a2d[i];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] a2d;\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;If your project is CLI (Common Language Runtime Support)&lt;/strong&gt;, then:&lt;/p&gt;\n\n&lt;p&gt;You can use the array class, not that one you get when you write:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In other words, not the unmanaged array class you get when using the std namespace and when including the array header, not the unmanaged array class defined in the std namespace and in the array header, but the managed class array of the CLI.&lt;/p&gt;\n\n&lt;p&gt;with this class, you can create an array of any &lt;strong&gt;rank&lt;/strong&gt; you want.&lt;/p&gt;\n\n&lt;p&gt;The following code below creates new two dimensional array of 2 rows and 3 columns and of type int, and I name it &quot;arr&quot;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;array&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, 2&amp;gt;^ arr = gcnew &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can access elements in the array, by name it and write &lt;strong&gt;only one&lt;/strong&gt; squared parentheses &lt;code&gt;[]&lt;/code&gt;, and inside them, add the row and column, and separate them with the comma &lt;code&gt;,&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The following code below access an element in 2nd row and 1st column of the array I already created in previous code above:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;arr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;writing only this line is to read the value in that cell, i.e. get the value in this cell, but if you add the equal &lt;code&gt;=&lt;/code&gt; sign, you are about to write the value in that cell, i.e. set the value in this cell.\nYou also can use the +=, -=, *= and /= operators of course, for numbers only (int, float, double, __int16, __int32, __int64 and etc), but sure you know it already.&lt;/p&gt;\n\n&lt;p&gt;If your project is &lt;strong&gt;not&lt;/strong&gt; CLI, then you can use the unmanaged array class of the std namespace, if you &lt;code&gt;#include &amp;lt;array&amp;gt;&lt;/code&gt;, of course, but the problem is that this array class is different than the CLI array. Create array of this type is same like the CLI, except that you will have to remove the &lt;code&gt;^&lt;/code&gt; sign and the &lt;code&gt;gcnew&lt;/code&gt; keyword. But unfortunately the second int parameter in the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; parentheses specifies the &lt;strong&gt;length (i.e. size)&lt;/strong&gt; of the array, &lt;strong&gt;not&lt;/strong&gt; its rank!&lt;/p&gt;\n\n&lt;p&gt;There is no way to specify rank in this kind of array, rank is CLI array&apos;s feature &lt;strong&gt;only.&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;std array behaves like normal array in c++, that you define with pointer, for example &lt;code&gt;int*&lt;/code&gt; and then: &lt;code&gt;new int[size]&lt;/code&gt;, or without pointer: &lt;code&gt;int arr[size]&lt;/code&gt;, but unlike the normal array of the c++, std array provides functions that you can use with the elements of the array, like fill, begin, end, size, and etc, but normal array provides &lt;strong&gt;nothing&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;But still std array are one dimensional array, like the normal c++ arrays.\nBut thanks to the solutions that the other guys suggest about how you can make the normal c++ one dimensional array to two dimensional array, we can adapt the same ideas to std array, e.g. according to Mehrdad Afshari&apos;s idea, we can write the following code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;array&amp;lt;array&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, 3&amp;gt;, 2&amp;gt; array2d = array&amp;lt;array&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This line of code creates a &lt;strong&gt;&quot;jugged array&quot;&lt;/strong&gt;, which is an one dimensional array that each of its cells is or points to another one dimensional array.&lt;/p&gt;\n\n&lt;p&gt;If all one dimensional arrays in one dimensional array are equal in their length/size, then you can treat the array2d variable as a real two dimensional array, plus you can use the special methods to treat rows or columns, depends on how you view it in mind, in the 2D array, that std array supports.&lt;/p&gt;\n\n&lt;p&gt;You also can use Kevin Loney&apos;s solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ary = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[sizeX*sizeY];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ary[i][j] is then rewritten as&lt;/span&gt;\nary[i*sizeY+j]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but if you use std array, the code must look different:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;array&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, sizeX*sizeY&amp;gt; ary = &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, sizeX*sizeY&amp;gt;();\nary.&lt;span class=&quot;hljs-built_in&quot;&gt;at&lt;/span&gt;(i*sizeY+j);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And still have the unique functions of the std array.&lt;/p&gt;\n\n&lt;p&gt;Note that you still can access the elements of the std array using the &lt;code&gt;[]&lt;/code&gt; parentheses, and you don&apos;t have to call the &lt;code&gt;at&lt;/code&gt; function.\nYou also can define and assign new int variable that will calculate and keep the total number of elements in the std array, and use its value, instead of repeating &lt;code&gt;sizeX*sizeY&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;You can define your own two dimensional array generic class, and define the constructor of the two dimensional array class to receive two integers to specify the number of rows and columns in the new two dimensional array, and define get function that receive two parameters of integer that access an element in the two dimensional array and returns its value, and set function that receives three parameters, that the two first are integers that specify the row and column in the two dimensional array, and the third parameter is the new value of the element. Its type depends on the type you chose in the generic class.&lt;/p&gt;\n\n&lt;p&gt;You will be able to implement all this by using &lt;strong&gt;either&lt;/strong&gt; the normal c++ array (pointers or without) &lt;strong&gt;or&lt;/strong&gt; the std array and use one of the ideas that other people suggested, and make it easy to use like the cli array, or like the two dimensional array that you can define, assign and use in C#.&lt;/p&gt;\n    ","\n&lt;p&gt;Start by defining the array using pointers (Line 1):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;** a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* [x];     &lt;span class=&quot;hljs-comment&quot;&gt;//x is the number of rows&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; x; i++)\n    a[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[y];     &lt;span class=&quot;hljs-comment&quot;&gt;//y is the number of columns&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want an 2d array of integers, which elements are allocated sequentially in memory, you must declare it like &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; (*intPtr)[n] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[x][n]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where instead of &lt;strong&gt;x&lt;/strong&gt; you can write any dimension, but &lt;strong&gt;n&lt;/strong&gt; must be the same in two places. Example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; (*intPtr)[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;];\nintPtr[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\ncout&amp;lt;&amp;lt;intPtr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;]&amp;lt;&amp;lt;endl;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;must print 6.&lt;/p&gt;\n    ","\n&lt;p&gt;I don&apos;t know for sure if the following answer wasn&apos;t provided\nbut I decided to add some local optimizations to the allocation of 2d array\n(e.g., a square matrix is done through only one allocation):\n&lt;code&gt;\nint** mat = new int*[n];\nmat[0] = new int [n * n];\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;However, deletion goes like this because of linearity of the allocation above:\n&lt;code&gt;\ndelete [] mat[0];\ndelete [] mat;\n&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;this is an old answer but I like to declarer dynamic arrays like this for C++&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; sizeY,sizeX = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n &lt;span class=&quot;hljs-comment&quot;&gt;//declaring dynamic 2d array:&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; **ary = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*[sizeY];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; sizeY; i++) \n    {\n     ary[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[sizeX];\n   }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;you can change the size in run time like this.\nthis is tested in c++ 98&lt;/p&gt;\n    ","\n&lt;p&gt;I have left you with a solution which works the best for me, in certain cases. Especially if one knows [the size of?] one dimension of the array. Very useful for an array of chars, for instance if we need an array of varying size of arrays of char[20].&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;  size = &lt;span class=&quot;hljs-number&quot;&gt;1492&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; (*array)[&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;];\n\narray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[size][&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;];\n...\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(array[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;hola!&quot;&lt;/span&gt;);\n...\n&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; [] array;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The key is the parentheses in the array declaration.&lt;/p&gt;\n    ","\n&lt;p&gt;I used this not elegant but FAST,EASY and WORKING system. I do not see why can not work because the only way for the system to allow create a big size array and access parts is without cutting it in parts:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DIM 3&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; WORMS 50000 &lt;span class=&quot;hljs-comment&quot;&gt;//gusanos&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;halla_centros_V000&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; CENW[][DIM])&lt;/span&gt;\n&lt;/span&gt;{\n    CENW[i][j]=...\n    ...\n}\n\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;main&lt;/span&gt;()\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; *CENW_MEM=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;[WORMS*DIM];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; (*CENW)[DIM];\n    CENW=(&lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; (*)[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]) &amp;amp;CENW_MEM[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;halla_centros_V000&lt;/span&gt;(CENW);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] CENW_MEM;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I would suggest using 2D vectors over 2D arrays. Basically using vectors as much as possible mostly because&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;dynamic memory allocation is hassle-free&lt;/li&gt;\n&lt;li&gt;automatic memory management&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;here is a small code snippet where you can create a dynamic sized array&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;vector&amp;lt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; arr;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; i++)\n{    \n    vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; temp;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;k; j++)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; val;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//assign values&lt;/span&gt;\n        temp.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(val);\n    }\n    arr.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(temp);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;if you want to declare a pre-defined pointer array:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; **x;\nx = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] { \n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] { &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; },\n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] { &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; } \n    };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;access:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;cout &amp;lt;&amp;lt; x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you only use the array locally or inside a class, you can use lambda expression to create an array-like object.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-built_in&quot;&gt;srand&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;time&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;));\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; w = &lt;span class=&quot;hljs-built_in&quot;&gt;rand&lt;/span&gt;() % &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; h = &lt;span class=&quot;hljs-built_in&quot;&gt;rand&lt;/span&gt;() % &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n  {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Here. Only one line and no memory leak.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; arr = [=, p = std::&lt;span class=&quot;hljs-built_in&quot;&gt;make_unique&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[]&amp;gt;(w * h)](&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &amp;amp; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&amp;amp;p[i * w + j]; };\n    &lt;span class=&quot;hljs-built_in&quot;&gt;arr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;arr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The object is not compatible with &lt;code&gt;int[][]&lt;/code&gt;, and to pass it as an argument, you will need templates. But it can release you from the trouble of getting &lt;code&gt;[i * w + j]&lt;/code&gt; right when you access an element.&lt;/p&gt;\n&lt;p&gt;You can also use a bare &lt;code&gt;std::unique_ptr&amp;lt;int[]&amp;gt;&lt;/code&gt; along with a getter implemented in lambda. But you may make mistakes and have dangling references.&lt;/p&gt;\n    ","\n&lt;p&gt;declaring 2D array dynamically:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, y = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; **ptr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *[x];\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;y; i++)\n        {\n            ptr[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[y];\n        }\n        &lt;span class=&quot;hljs-built_in&quot;&gt;srand&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;time&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;));\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;x; j++)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; k&amp;lt;y; k++)\n            {\n                &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-built_in&quot;&gt;rand&lt;/span&gt;()%&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n                ptr[j][k] = a;\n                cout&amp;lt;&amp;lt;ptr[j][k]&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;;\n            }\n            cout&amp;lt;&amp;lt;endl;\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now in the above code we took a double pointer and assigned it a dynamic memory and gave a value of the columns. Here the memory allocated is only for the columns, now for the rows we just need a for loop and assign the value for every row a dynamic memory. Now we can use the pointer just the way we use a 2D array. In the above example we then assigned random numbers to our 2D array(pointer).Its all about DMA of 2D array.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m using this when creating dynamic array. If you have a class or a struct. And this works. Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Sprite&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x;\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;;\n   Sprite **spritearray;&lt;span class=&quot;hljs-comment&quot;&gt;//a pointer to a pointer to an object from the Sprite class&lt;/span&gt;\n   spritearray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Sprite *[num];\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; n &amp;lt; num; n++) {\n       spritearray[n] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Sprite;\n       spritearray-&amp;gt;x = n * &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n  }\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;//delete from random position&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; n &amp;lt; num; n++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (spritearray[n]-&amp;gt;x &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; spritearray[n];\n      spritearray[n] = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\n        }\n    }\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;//delete the array&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; n &amp;lt; num; n++) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (spritearray[n] != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;){\n         &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; spritearray[n];\n         spritearray[n] = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\n      }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; []spritearray;\n    spritearray = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  } \n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":567,"title":"How do I declare a 2d array in C++ using new?","content":"\n                \n&lt;p&gt;How do i declare a 2d array using new?&lt;/p&gt;\n\n&lt;p&gt;Like, for a &quot;normal&quot; array I would:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* ary = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[Size]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;** ary = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[sizeY][sizeX]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;a) doesn&apos;t work/compile and b) doesn&apos;t accomplish what:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ary[sizeY][sizeX] \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;does.&lt;/p&gt;\n    ","slug":"how-do-i-declare-a-2d-array-in-c++-using-new-1657388441163","postType":"QUESTION","createdAt":"2022-07-09T17:40:41.000Z","updatedAt":"2022-07-09T17:40:41.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Javascript infamous Loop issue? [duplicate]","slug":"javascript-infamous-loop-issue-duplicate-1657387498530"},{"title":"How to determine equality for two JavaScript objects?","slug":"how-to-determine-equality-for-two-javascript-objects-1657387638650"},{"title":"The useState set method is not reflecting a change immediately","slug":"the-usestate-set-method-is-not-reflecting-a-change-immediately-1657384524775"},{"title":"How do I match any character across multiple lines in a regular expression?","slug":"how-do-i-match-any-character-across-multiple-lines-in-a-regular-expression-1657387839720"},{"title":"Ways to circumvent the same-origin policy","slug":"ways-to-circumvent-the-same-origin-policy-1657384763316"},{"title":"What is move semantics?","slug":"what-is-move-semantics-1657387702625"},{"title":"Accessing nested JavaScript objects and arrays by string path","slug":"accessing-nested-javascript-objects-and-arrays-by-string-path-1657387321754"},{"title":"How can I avoid Java code in JSP files, using JSP 2?","slug":"how-can-i-avoid-java-code-in-jsp-files-using-jsp-2-1657384618866"},{"title":"How do I detect a click outside an element?","slug":"how-do-i-detect-a-click-outside-an-element-1657387505351"},{"title":"Why is processing a sorted array faster than processing an unsorted array?","slug":"why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array-1657385497444"},{"title":"What is array to pointer decay?","slug":"what-is-array-to-pointer-decay-1657384709608"},{"title":"Percentage Height HTML 5/CSS","slug":"percentage-height-html-5css-1657387471048"},{"title":"How can I vertically center a div element for all browsers using CSS?","slug":"how-can-i-vertically-center-a-div-element-for-all-browsers-using-css-1657385488425"},{"title":"How to test multiple variables for equality against a single value?","slug":"how-to-test-multiple-variables-for-equality-against-a-single-value-1657384358504"},{"title":"Android permission doesn't work even if I have declared it","slug":"android-permission-doesn't-work-even-if-i-have-declared-it-1657387726990"},{"title":"What is the canonical way to check for errors using the CUDA runtime API?","slug":"what-is-the-canonical-way-to-check-for-errors-using-the-cuda-runtime-api-1657387302698"},{"title":"What is the difference between a definition and a declaration?","slug":"what-is-the-difference-between-a-definition-and-a-declaration-1657387851618"},{"title":"Why do I get a segmentation fault when writing to a \"char *s\" initialized with a string literal, but not \"char s[]\"?","slug":"why-do-i-get-a-segmentation-fault-when-writing-to-a-\"char-*s\"-initialized-with-a-string-literal-but-not-\"char-s\"-1657385511046"},{"title":"Dynamically access object property using variable","slug":"dynamically-access-object-property-using-variable-1657384439324"},{"title":"Templated check for the existence of a class member function?","slug":"templated-check-for-the-existence-of-a-class-member-function-1657388363414"}]},"__N_SSG":true}