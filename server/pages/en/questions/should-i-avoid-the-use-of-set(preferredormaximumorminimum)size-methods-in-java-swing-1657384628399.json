{"pageProps":{"data":{"answer":["\n&lt;ol&gt;\n&lt;li&gt;&lt;blockquote&gt;\n  &lt;p&gt;Should I completely avoid the use of those methods?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes for application code.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;blockquote&gt;\n  &lt;p&gt;The methods have been defined for a reason. So when should I use them? In which context? For what purposes?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I don&apos;t know, personally I think of it as an API design accident. Slightly forced by compound components having special ideas about child sizes. &quot;Slightly&quot;, because they should have implemented their needs with a custom LayoutManager.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;blockquote&gt;\n  &lt;p&gt;What exactly are the negative consequences of using those methods? (I can only think adding portability between systems with different screen resolution.)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Some (incomplete, and unfortunately the links are broken due to migration of SwingLabs to java.net) technical reasons are for instance mentioned in the &lt;a href=&quot;http://web.archive.org/web/20110614145256/http://wiki.java.net/twiki/bin/view/Javadesktop/SwingLabsImperialRules?TWIKISID=e1a6667476691b56753dc9b0744828c6#Do_not_use_component_setXXSize&quot; rel=&quot;noreferrer&quot;&gt;Rules (hehe)&lt;/a&gt; or in the &lt;a href=&quot;http://web.archive.org/web/20100207211337/http://www.jguru.com/faq/view.jsp?EID=237070&quot; rel=&quot;noreferrer&quot;&gt;link&lt;/a&gt; @bendicott found in his/her comment to &lt;a href=&quot;https://stackoverflow.com/questions/7074514/images-in-jtable-cells-off-by-one-pixel&quot;&gt;my answer&lt;/a&gt;. Socially, posing tons of work onto your unfortunate fellow who has to maintain the code and has to track down a broken layout.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;blockquote&gt;\n  &lt;p&gt;I don&apos;t think any LayoutManager can exactly satisfy all desired layout needs. Do I really need to implement a new LayoutManager for every little variation on my layout?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes, there are LayoutManagers powerful enough to satisfy a very good approximation to &quot;all layout needs&quot;. The big three are JGoodies FormLayout, MigLayout, DesignGridLayout. So no, in practice, you rarely write LayoutManagers except for simple highly specialized environments.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;blockquote&gt;\n  &lt;p&gt;If the answer to 4 is &quot;yes&quot;, won&apos;t this lead to a proliferation of LayoutManager classes which will become difficult to maintain? &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;(The answer to 4 is &quot;no&quot;.)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;blockquote&gt;\n  &lt;p&gt;In a situation where I need to define proportions between children of a Component (for example, child 1 should use 10% of space, child 2 40%, child 3 50%), is it possible to achieve that without implementing a custom LayoutManager?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Any of the Big-Three can, can&apos;t even GridBag (never bothered to really master, too much trouble for too little power).&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;A few heuristics:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Don&apos;t use &lt;code&gt;set[Preferred|Maximum|Minimum]Size()&lt;/code&gt; when you really mean to override &lt;code&gt;get[Preferred|Maximum|Minimum]Size()&lt;/code&gt;, as might be done in creating your own component, shown &lt;a href=&quot;https://stackoverflow.com/a/10110232/230513&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Don&apos;t use &lt;code&gt;set[Preferred|Maximum|Minimum]Size()&lt;/code&gt; when you could rely on a component&apos;s carefully overridden &lt;code&gt;getPreferred|Maximum|Minimum]Size&lt;/code&gt;, as shown &lt;a href=&quot;https://stackoverflow.com/questions/3174765/variable-layout-in-swing/3175280#3175280&quot;&gt;here&lt;/a&gt; and below.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Do use &lt;code&gt;set[Preferred|Maximum|Minimum]Size()&lt;/code&gt; to derive post-&lt;code&gt;validate()&lt;/code&gt; geometry, as shown below and &lt;a href=&quot;https://stackoverflow.com/questions/3174765/variable-layout-in-swing/3175280#3175280&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If a component has no preferred size, e.g. &lt;code&gt;JDesktopPane&lt;/code&gt;, you may have to size the container, but any such choice is arbitrary. A comment may help clarify the intent.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Consider alternate or custom layouts when you find that you would have to loop through many components to obtain derived sizes, as mentioned in these &lt;a href=&quot;https://stackoverflow.com/questions/3174765/variable-layout-in-swing/3175280#3175280&quot;&gt;comments&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/hYh36.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.Component;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.Dimension;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.EventQueue;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.GridLayout;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.KeyboardFocusManager;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.beans.PropertyChangeEvent;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.beans.PropertyChangeListener;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JComponent;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JDesktopPane;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JFrame;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JInternalFrame;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JLabel;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JPanel;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JScrollPane;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JTextField;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.SwingUtilities;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@see&lt;/span&gt; https://stackoverflow.com/questions/7229226\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@see&lt;/span&gt; https://stackoverflow.com/questions/7228843\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DesignTest&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;JTextField&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;JTextField&amp;gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JScrollPane&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JScrollPane&lt;/span&gt;(panel);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String args[])&lt;/span&gt; {\n        EventQueue.invokeLater(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;() {\n\n            &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n                &lt;span class=&quot;hljs-type&quot;&gt;DesignTest&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DesignTest&lt;/span&gt;();\n                id.create(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My Project&quot;&lt;/span&gt;);\n            }\n        });\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addField&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;JTextField&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;jtf&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTextField&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n        panel.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;(name, JLabel.LEFT));\n        panel.add(jtf);\n        list.add(jtf);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String strProjectName)&lt;/span&gt; {\n        panel.setLayout(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GridLayout&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n        addField(&lt;span class=&quot;hljs-string&quot;&gt;&quot;First Name:&quot;&lt;/span&gt;);\n        addField(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Last Name:&quot;&lt;/span&gt;);\n        addField(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Address:&quot;&lt;/span&gt;);\n        addField(&lt;span class=&quot;hljs-string&quot;&gt;&quot;City:&quot;&lt;/span&gt;);\n        addField(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Zip Code:&quot;&lt;/span&gt;);\n        addField(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Phone:&quot;&lt;/span&gt;);\n        addField(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Email Id:&quot;&lt;/span&gt;);\n        KeyboardFocusManager.getCurrentKeyboardFocusManager()\n            .addPropertyChangeListener(&lt;span class=&quot;hljs-string&quot;&gt;&quot;permanentFocusOwner&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FocusDrivenScroller&lt;/span&gt;(panel));\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Show half the fields&lt;/span&gt;\n        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n        sp.validate();\n        &lt;span class=&quot;hljs-type&quot;&gt;Dimension&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sp.getPreferredSize();\n        d.setSize(d.width, d.height / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n        sp.setPreferredSize(d);\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JInternalFrame&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;internaFrame&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JInternalFrame&lt;/span&gt;();\n        internaFrame.add(sp);\n        internaFrame.pack();\n        internaFrame.setVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JDesktopPane&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;desktopPane&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JDesktopPane&lt;/span&gt;();\n        desktopPane.add(internaFrame);\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JFrame&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;frmtest&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JFrame&lt;/span&gt;();\n        frmtest.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frmtest.add(desktopPane);\n        frmtest.pack();\n        &lt;span class=&quot;hljs-comment&quot;&gt;// User&apos;s preference should be read from java.util.prefs.Preferences&lt;/span&gt;\n        frmtest.setSize(&lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;);\n        frmtest.setLocationRelativeTo(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n        frmtest.setVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        list.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).requestFocusInWindow();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FocusDrivenScroller&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PropertyChangeListener&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; JComponent parent;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;FocusDrivenScroller&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(JComponent parent)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.parent = parent;\n        }\n\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;propertyChange&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(PropertyChangeEvent evt)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;focused&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Component) evt.getNewValue();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (focused != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n                &amp;amp;&amp;amp; SwingUtilities.isDescendingFrom(focused, parent)) {\n                parent.scrollRectToVisible(focused.getBounds());\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;Should I completely avoid the use of those methods?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;No, there is no formal evidence to suggest calling or overriding these methods is not allowed. In fact, Oracle says these methods are used for giving size hints: &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/using.html#sizealignment&quot; rel=&quot;noreferrer&quot;&gt;http://docs.oracle.com/javase/tutorial/uiswing/layout/using.html#sizealignment&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;They may also be overridden (which is the best practice for Swing) when &lt;em&gt;extending&lt;/em&gt; a Swing component (rather than calling the method on the custom component instance)&lt;/p&gt;\n\n&lt;p&gt;Most importantly no matter how you specify your component&apos;s size, be sure that your component&apos;s container uses a layout manager that respects the requested size of the component. &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The methods have been defined for a reason. So when should I use them?\n  In which context? For what purposes?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;When you need to provide customized size hints to the containers Layout manager so that the component will be laid out well&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;What exactly are the negative consequences of using those methods? (I\n  can only think to add portability between systems with different\n  screen resolution).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Many layout managers do not pay attention to a component&apos;s requested maximum size. However, &lt;code&gt;BoxLayout&lt;/code&gt; and &lt;code&gt;SpringLayout&lt;/code&gt; do. Furthermore, &lt;code&gt;GroupLayout&lt;/code&gt; provides the ability to set the minimum, preferred or maximum size explicitly, without touching the component.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Make sure that you really need to set the component&apos;s exact size. Each Swing component has a different preferred size, depending on the font it uses and the look and feel. Thus having a set size might produce varied &lt;em&gt;looks&lt;/em&gt; of the UI on different Systems&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;sometimes problems can be encountered with &lt;code&gt;GridBagLayout&lt;/code&gt; and text fields, wherein if the size of the container is smaller than the preferred size, the minimum size gets used, which can cause text fields to shrink quite substantially.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt; does not enforce overriden &lt;code&gt;getMinimumSize()&lt;/code&gt; only calling &lt;code&gt;setMinimumSize(..)&lt;/code&gt; on its works&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;I don&apos;t think any LayoutManager can exactly satisfy all desired layout\n  needs. Do I really need to implement a new LayoutManager for every\n  little variation on my layout?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;If by implementing you mean using then yes. Not one &lt;code&gt;LayoutManger&lt;/code&gt; can handle everything, each &lt;code&gt;LayoutManager&lt;/code&gt; has its pros and cons thus each can be used together to produce the final layout.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/problems.html&quot; rel=&quot;noreferrer&quot;&gt;http://docs.oracle.com/javase/tutorial/uiswing/layout/problems.html&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;There are a lot of good answers here but I want to add a little more about the reasons &lt;em&gt;why&lt;/em&gt; you should normally avoid these (the question just came up again in a duplicate topic):&lt;/p&gt;\n\n&lt;p&gt;With few exceptions, if you are using these methods you are probably fine-tuning your GUI to look good on a specific look-and-feel (and with your system-specific settings, e.g. your preferred desktop font, etc.). The methods themselves aren&apos;t inherently evil, but the typical reasons for using them &lt;em&gt;are&lt;/em&gt;. As soon as you start tuning pixel positions and sizes in a layout you run the risk of your GUI breaking (or at minimum, looking bad), on other platforms.&lt;/p&gt;\n\n&lt;p&gt;As an example of this, try changing your application&apos;s default look-and-feel. Even just with the options available on your platform, you may be surprised at how poorly the results can be rendered.&lt;/p&gt;\n\n&lt;p&gt;So, in the name of keeping your GUI functional and nice-looking on all platforms (remember, one of the major benefits of Java is its cross-platformness), you should rely on layout managers, etc., to automatically adjust the sizes of your components so that it renders correctly outside of your specific development environment.&lt;/p&gt;\n\n&lt;p&gt;All that said, you can certainly conceive of situations where these methods are justified. Again, they aren&apos;t inherently evil, but their usage is normally a &lt;strong&gt;big&lt;/strong&gt; red flag indicating potential GUI issues. Just make sure you are aware of the high potential for complications if/when you use them, and always try and think if there is another look-and-feel-independent solution to your problems -- more often than not you will find that these methods are not necessary.&lt;/p&gt;\n\n&lt;p&gt;By the way, if you find yourself getting frustrated with standard layout managers, there are a lot of good free, open-source third-party ones, for example &lt;a href=&quot;http://www.jgoodies.com/freeware/libraries/forms/&quot;&gt;JGoodies&apos; &lt;code&gt;FormLayout&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;http://www.miglayout.com/&quot;&gt;&lt;code&gt;MigLayout&lt;/code&gt;&lt;/a&gt;. Some GUI builders even have built-in support for third-party layout managers -- Eclipse&apos;s WindowBuilder GUI editor, for example, ships with support for &lt;code&gt;FormLayout&lt;/code&gt; and &lt;code&gt;MigLayout&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are having trouble with layouts in Java Swing, then I can highly recommend the JGoodies &lt;code&gt;FormLayout&lt;/code&gt; provided freely as part of the Forms freeware library by Karsten Lentzsch &lt;a href=&quot;http://www.jgoodies.com/freeware/libraries/forms/&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;This very popular layout manager is extremely flexible, allowing for very polished Java UIs to be developed.&lt;/p&gt;\n\n&lt;p&gt;You&apos;ll find Karsten&apos;s documentation in &lt;a href=&quot;http://manual.openestate.org/extern/forms-1.2.1/tutorial/introduction.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;, and some rather good documentation from eclipse &lt;a href=&quot;http://help.eclipse.org/oxygen/topic/org.eclipse.wb.swing.doc.user/html/layoutmanagers/swing/jgoodies_formlayout.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;These methods are poorly understood by most people. You should absolutely not ignore these methods. It is up to the layout manager if they honor these methods. This page has a table that shows which layout managers honor which of those methods:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://thebadprogrammer.com/swing-layout-manager-sizing/&quot;&gt;http://thebadprogrammer.com/swing-layout-manager-sizing/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I have been writing Swing code for 8+ years and the layout managers included in the JDK have always served my needs. I have never needed a 3rd party layout manager to achieve my layouts.&lt;/p&gt;\n\n&lt;p&gt;I will say that you shouldn&apos;t try to give the layout manager hints with these methods until you are sure you need them. Do your layout without giving any sizing hints (i.e. let the layout manager do its job) and then you can make minor corrections if you need to.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;In a situation where I need to define proportions between children of a Component (child 1 should use 10% of space, child2 40% ,child3 50%), is it possible to achieve that without implementing a custom layout manager?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Maybe &lt;code&gt;GridBagLayout&lt;/code&gt; would satisfy your needs. Besides that, there&apos;s a ton of layout managers on the web, and I bet there&apos;s one that fits your requirements.&lt;/p&gt;\n    ","\n&lt;p&gt;I am seeing it differenty than the accepted answer.&lt;/p&gt;\n&lt;h3&gt;1) Should I completely avoid the use of those methods?&lt;/h3&gt;\n&lt;p&gt;Never avoid! They&apos;re there to express the size constraints of your components to the layout manager. You can avoid using them if you&apos;re not using any layout manager and try to manage the visual layout on your own.&lt;/p&gt;\n&lt;p&gt;Unfortunately, Swing is not coming with reasonable default dimensions. However, instead of setting the dimensions of a component, it is better OOP to descend your own component with reasonable defaults. (In that case you call setXXX in your descendant class.) Alternatively, you can override the getXXX methods for the same effect.&lt;/p&gt;\n&lt;h3&gt;2) The methods have been defined for a reason. So when should I use them? In which context? For what purposes?&lt;/h3&gt;\n&lt;p&gt;Always. When you create a component, set its realistic min/preferred/max size according to the use of that component. For example, if you have a JTextField for entering country symbols such as UK, its preferred size shall be as wide to fit two chars (with the current font, etc.) but probably it is meaningless to let it grow any bigger. After all, country symbols are two chars.\nAs opposite, if you have a JTextField for entering e.g. a customer name, it can have a preferred size for like the pixel size for 20 chars, but can grow to bigger if the layout is resized, so set the maximum size to more. At the same time, having a 0px wide JTextField is pointless, so set a realistic minimum size (I would say the pixel size of 2 chars).&lt;/p&gt;\n&lt;h3&gt;3) What exactly are the negative consequences of using those methods?&lt;/h3&gt;\n&lt;p&gt;(I can only think adding portability between systems with different screen resolution).&lt;/p&gt;\n&lt;p&gt;No negative consequences. These are hints for the layout manager.&lt;/p&gt;\n&lt;h3&gt;4) I don&apos;t think any LayoutManager can exactly satisfy all desired layout needs.&lt;/h3&gt;\n&lt;p&gt;Do I really need to implement a new LayoutManager for every little variation on my layout ?&lt;/p&gt;\n&lt;p&gt;No, definitely not. The usual approach is to cascade different basic layoutmanagers such as horizontal and vertical layout.&lt;/p&gt;\n&lt;p&gt;For example, the layout below:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;pre&amp;gt;\n+--------------+--------+\n| ###JTABLE### | [Add]  | \n| ...data...   |[Remove]|\n| ...data...   |        |\n| ...data...   |        |\n+--------------+--------+\n&amp;lt;/pre&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is having two parts. The left and right parts are a horizontal layout. The right part is a JPanel added to the horizontal layout, and this JPanel is having a vertical layout which lays out the buttons vertically.&lt;/p&gt;\n&lt;p&gt;Of course, this can grow tricky with a real life layout. Therefore grid-based layout managers such as MigLayout are much better if you&apos;re about to develop anything serious.&lt;/p&gt;\n&lt;h3&gt;5) If the answer to 4 is &quot;yes&quot;, won&apos;t this lead to a proliferation of LayoutManager classes which will become difficult to maintain?&lt;/h3&gt;\n&lt;p&gt;No, you definitely shall not develop layout managers, unless you need something very special.&lt;/p&gt;\n&lt;h3&gt;6) In a situation where I need to define proportions...&lt;/h3&gt;\n&lt;p&gt;between children of a Component (eg, child1 should use 10% of space, child2 40% ,child3 50%), is it possible to achieve that without implementing a custom LayoutManager?&lt;/p&gt;\n&lt;p&gt;Basically, once the preferred sizes are set right, you may not want to do anything in percentage. Simply, because percentages are pointless (e.g. it is pointless to have a JTextField 10% of the window size - since one can shrink the window so that JTextField becomes 0px wide, or can expand the window so that the JTextField is across two displays on a multi-display setup).&lt;/p&gt;\n&lt;p&gt;But, may times you may use the percentages to control sizes of bigger building blocks of your gui (panels, for example).&lt;/p&gt;\n&lt;p&gt;You can use JSplitPane where you can pre-set the ratio of the two sides. Or, you can use MigLayout which allows you to set such constraints in percentage, pixels, and other units.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Should I completely avoid the use of those methods?&lt;/strong&gt;\nI wouldn&apos;t say &quot;avoid&quot; them. I&apos;d say that if you think you need them, you&apos;re probably doing something wrong. Component sizes are determined in context. For example, Text component sizes are determined by the number of rows and columns you specify, combined with the font you may have chosen. Your button and label size will be the size of the graphic, if you set one, or the space needed to display the text you set. Each component has a natural size, and the layout managers will use those to lay everything out without you needing to specify sizes. The main exception is the JScrollPane, which has a size independent of whatever it contains. For those, I will sometimes call &lt;code&gt;setSize()&lt;/code&gt;, and let that size determine the initial window size, by calling &lt;code&gt;JFrame.pack()&lt;/code&gt;. Usually, I will let the window size determine the JScrollPane size. The user will determine the size of the window. Many layout managers ignore the sizes you set anyway, so they often don&apos;t do much good.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The methods have been defined for a reason. So when should I use them? In which context? For what purposes?&lt;/strong&gt;\nI believe they were added to provide hints to the layout managers. They may have been written for historical reasons, because layout managers were new, and people didn&apos;t fully trust them. I know a few developers who avoided layout managers and placed everything manually, just because they didn&apos;t want to bother with learning a new paradigm. It&apos;s a terrible idea.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What exactly are the negative consequences of using those methods? (I can only think adding portability between systems with different screen resolution).&lt;/strong&gt;\nThey&apos;re ineffective, and they produce bad layouts, with objects getting squeezed or stretched to non-natural sizes. And the layouts will be brittle. Changes to the window size will sometimes break the layout and put things in the wrong places.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;I don&apos;t think any LayoutManager can exactly satisfy all desired layout needs. Do I really need to implement a new LayoutManager for every little variation on my layout ?&lt;/strong&gt; You shouldn&apos;t &quot;implement&quot; a new LayoutManager. You should instantiate existing ones. I often use several layout managers in a single window. Each JPanel will have its own layout manager. Some people balk at nested layouts, because they&apos;re hard to maintain. When I use them, I give each one its own creation method to make it easier to see what each one does. But I never &quot;implement&quot; a layout manager. I just instantiate them. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;If the answer to 4 is &quot;yes&quot;, won&apos;t this lead to a proliferation of LayoutManager classes which will become difficult to maintain?&lt;/strong&gt;\nIf you&apos;re implementing new layout manager classes for slight variations in layout, you&apos;re using them wrong. If you&apos;re just implementing new layout managers, you&apos;re probably doing something wrong. The only time I&apos;ve extended a LayoutManager class, it was to add a zoom slider to a JScrollPane.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;In a situation where I need to define proportions between children of a Component (eg, child1 should use 10% of space, child2 40% ,child3 50%), is it possible to achieve that without implementing a custom LayoutManager?&lt;/strong&gt;\nThe JSplitPane has a way of specifying the percentage each component should get. The divider is movable by default, but you can turn that off if you want. I don&apos;t use that feature much. I usually have some components that take up a set size, and the rest of the space is taken up by a scroll pane. The scroll pane size will adjust with the window size. If you have two scroll panes side by side, you can put them in a JSplitPane and specify the percentage of new space given to each one as the user expands and contracts the windows.&lt;/p&gt;\n    "],"id":106,"title":"Should I avoid the use of set(Preferred|Maximum|Minimum)Size methods in Java Swing?","content":"\n                \n&lt;p&gt;Several times I&apos;ve been criticized for having suggested the use of the following methods:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;setPreferredSize&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;setMinimumSize&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;setMaximumSize&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;on &lt;code&gt;Swing&lt;/code&gt; components. I don&apos;t see any alternative to their use when I want to define proportions between displayed components. I have been told this:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;With layouts the answer is always the same: use a suitable\n  LayoutManager&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I have searched the web a little bit, but I haven&apos;t found any comprehensive analysis of the subject. So I have the following questions:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Should I completely avoid the use of those methods?&lt;/li&gt;\n&lt;li&gt;The methods have been defined for a reason. So when should I use them? In which context? For what purposes? &lt;/li&gt;\n&lt;li&gt;What exactly are the negative consequences of using those methods? (I can only think adding portability between systems with different screen resolution).&lt;/li&gt;\n&lt;li&gt;I don&apos;t think any LayoutManager can exactly satisfy all desired layout needs. Do I really need to implement a new LayoutManager for every little variation on my layout ? &lt;/li&gt;\n&lt;li&gt;If the answer to 4 is &quot;yes&quot;, won&apos;t this lead to a proliferation of LayoutManager classes which will become difficult to maintain?&lt;/li&gt;\n&lt;li&gt;In a situation where I need to define proportions between children of a Component (eg, child1 should use 10% of space, child2 40% ,child3 50%), is it possible to achieve that without implementing a custom LayoutManager?&lt;/li&gt;\n&lt;/ol&gt;\n    ","slug":"should-i-avoid-the-use-of-set(preferredormaximumorminimum)size-methods-in-java-swing-1657384628399","postType":"QUESTION","createdAt":"2022-07-09T16:37:08.000Z","updatedAt":"2022-07-09T16:37:08.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"\"Notice: Undefined variable\", \"Notice: Undefined index\", \"Warning: Undefined array key\", and \"Notice: Undefined offset\" using PHP","slug":"\"notice:-undefined-variable\"-\"notice:-undefined-index\"-\"warning:-undefined-array-key\"-and-\"notice:-undefined-offset\"-using-php-1657384250748"},{"title":"How do I match any character across multiple lines in a regular expression?","slug":"how-do-i-match-any-character-across-multiple-lines-in-a-regular-expression-1657387839720"},{"title":"What do querySelectorAll and getElementsBy* methods return?","slug":"what-do-queryselectorall-and-getelementsby*-methods-return-1657384425935"},{"title":"Correctly allocating multi-dimensional arrays","slug":"correctly-allocating-multi-dimensional-arrays-1657387733756"},{"title":"Why are these constructs using pre and post-increment undefined behavior?","slug":"why-are-these-constructs-using-pre-and-post-increment-undefined-behavior-1657384520109"},{"title":"var functionName = function() {} vs function functionName() {}","slug":"var-functionname-function()-vs-function-functionname()-1657384724077"},{"title":"Why does the order in which libraries are linked sometimes cause errors in GCC?","slug":"why-does-the-order-in-which-libraries-are-linked-sometimes-cause-errors-in-gcc-1657387609554"},{"title":"Why can templates only be implemented in the header file?","slug":"why-can-templates-only-be-implemented-in-the-header-file-1657384341933"},{"title":"Make a div fill the height of the remaining screen space","slug":"make-a-div-fill-the-height-of-the-remaining-screen-space-1657387482387"},{"title":"Which equals operator (== vs ===) should be used in JavaScript comparisons?","slug":"which-equals-operator-(-vs-)-should-be-used-in-javascript-comparisons-1657384663105"},{"title":"Align inline-block DIVs to top of container element","slug":"align-inline-block-divs-to-top-of-container-element-1657387489610"},{"title":"Importing installed package from script raises \"AttributeError: module has no attribute\" or \"ImportError: cannot import name\"","slug":"importing-installed-package-from-script-raises-\"attributeerror:-module-has-no-attribute\"-or-\"importerror:-cannot-import-name\"-1657387790607"},{"title":"Using fflush(stdin)","slug":"using-fflush(stdin)-1657387602771"},{"title":"What is array to pointer decay?","slug":"what-is-array-to-pointer-decay-1657384709608"},{"title":"My attempt at value initialization is interpreted as a function declaration, and why doesn't A a(()); solve it?","slug":"my-attempt-at-value-initialization-is-interpreted-as-a-function-declaration-and-why-doesn't-a-a(())-solve-it-1657388474057"},{"title":"Why aren't variable-length arrays part of the C++ standard?","slug":"why-aren't-variable-length-arrays-part-of-the-c++-standard-1657384712975"},{"title":"Using LIMIT within GROUP BY to get N results per group?","slug":"using-limit-within-group-by-to-get-n-results-per-group-1657388324167"},{"title":"How to get all possible combinations of a list’s elements?","slug":"how-to-get-all-possible-combinations-of-a-list's-elements-1657388271070"},{"title":"Using regular expressions to parse HTML: why not?","slug":"using-regular-expressions-to-parse-html:-why-not-1657387543969"},{"title":"Syntax error due to using a reserved word as a table or column name in MySQL","slug":"syntax-error-due-to-using-a-reserved-word-as-a-table-or-column-name-in-mysql-1657384689274"}]},"__N_SSG":true}