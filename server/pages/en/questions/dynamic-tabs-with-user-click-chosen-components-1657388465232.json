{"pageProps":{"data":{"answer":["\n&lt;p&gt;\n&lt;strong&gt;update&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackblitz.com/edit/angular-ygz3jg&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Angular 5 StackBlitz example&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;ngComponentOutlet&lt;/code&gt; was added to 4.0.0-beta.3&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;There is a &lt;code&gt;NgComponentOutlet&lt;/code&gt; work in progress that does something similar &lt;a href=&quot;https://github.com/angular/angular/pull/11235&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/angular/angular/pull/11235&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;RC.7&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://plnkr.co/edit/UGzoPTCHlXKWrn4p8gd1?p=preview&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Plunker example RC.7&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-ts s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Helper component to add dynamic components&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;selector&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;dcl-wrapper&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;template&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;div #target&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;\n})\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DclWrapper&lt;/span&gt; {\n  &lt;span class=&quot;hljs-meta&quot;&gt;@ViewChild&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;target&apos;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;read&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ViewContainerRef&lt;/span&gt;}) &lt;span class=&quot;hljs-attr&quot;&gt;target&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ViewContainerRef&lt;/span&gt;;\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Input&lt;/span&gt;() &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Component&lt;/span&gt;&amp;gt;;\n  &lt;span class=&quot;hljs-attr&quot;&gt;cmpRef&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ComponentRef&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Component&lt;/span&gt;&amp;gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;isViewInitialized&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;boolean&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; componentFactoryResolver: ComponentFactoryResolver, &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; compiler: Compiler&lt;/span&gt;) {}\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;updateComponent&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;isViewInitialized&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// when the `type` input changes we destroy a previously &lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;// created component before creating the new one&lt;/span&gt;\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;destroy&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; factory = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;componentFactoryResolver&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolveComponentFactory&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createComponent&lt;/span&gt;(factory)\n    &lt;span class=&quot;hljs-comment&quot;&gt;// to access the created instance use&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this.compRef.instance.someProperty = &apos;someValue&apos;;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this.compRef.instance.someOutput.subscribe(val =&amp;gt; doSomething());&lt;/span&gt;\n  }\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;ngOnChanges&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;updateComponent&lt;/span&gt;();\n  }\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;ngAfterViewInit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;isViewInitialized&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;updateComponent&lt;/span&gt;();  \n  }\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;ngOnDestroy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;destroy&lt;/span&gt;();\n    }    \n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-ts s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Use dcl-wrapper component&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;selector&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;my-tabs&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;template&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;`\n  &amp;lt;h2&amp;gt;Tabs&amp;lt;/h2&amp;gt;\n  &amp;lt;div *ngFor=&quot;let tab of tabs&quot;&amp;gt;\n    &amp;lt;dcl-wrapper [type]=&quot;tab&quot;&amp;gt;&amp;lt;/dcl-wrapper&amp;gt;\n  &amp;lt;/div&amp;gt;\n`&lt;/span&gt;\n})\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Tabs&lt;/span&gt; {\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Input&lt;/span&gt;() tabs;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-ts s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;selector&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;my-app&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;template&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;`\n  &amp;lt;h2&amp;gt;Hello {{name}}&amp;lt;/h2&amp;gt;\n  &amp;lt;my-tabs [tabs]=&quot;types&quot;&amp;gt;&amp;lt;/my-tabs&amp;gt;\n`&lt;/span&gt;\n})\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;App&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// The list of components to create tabs from&lt;/span&gt;\n  types = [&lt;span class=&quot;hljs-variable constant_&quot;&gt;C3&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C1&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C2&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C3&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C3&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C1&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C1&lt;/span&gt;];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;pre class=&quot;lang-ts s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@NgModule&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;imports&lt;/span&gt;: [ &lt;span class=&quot;hljs-title class_&quot;&gt;BrowserModule&lt;/span&gt; ],\n  &lt;span class=&quot;hljs-attr&quot;&gt;declarations&lt;/span&gt;: [ &lt;span class=&quot;hljs-title class_&quot;&gt;App&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;DclWrapper&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Tabs&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C1&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C2&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C3&lt;/span&gt;],\n  &lt;span class=&quot;hljs-attr&quot;&gt;entryComponents&lt;/span&gt;: [&lt;span class=&quot;hljs-variable constant_&quot;&gt;C1&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C2&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C3&lt;/span&gt;],\n  &lt;span class=&quot;hljs-attr&quot;&gt;bootstrap&lt;/span&gt;: [ &lt;span class=&quot;hljs-title class_&quot;&gt;App&lt;/span&gt; ]\n})\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AppModule&lt;/span&gt; {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;See also &lt;a href=&quot;https://angular.io/docs/ts/latest/cookbook/dynamic-component-loader.html&quot; rel=&quot;noreferrer&quot;&gt;angular.io DYNAMIC COMPONENT LOADER&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;older versions&lt;/strong&gt; &lt;strong&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This changed again in Angular2 RC.5&lt;/p&gt;\n\n&lt;p&gt;I will update the example below but it&apos;s the last day before vacation.&lt;/p&gt;\n\n&lt;p&gt;This &lt;a href=&quot;http://plnkr.co/edit/3dzkMVXe4AGSRhk11TXG?p=preview&quot; rel=&quot;noreferrer&quot;&gt;Plunker example&lt;/a&gt; demonstrates how to dynamically create components in RC.5&lt;/p&gt;\n\n\n\n&lt;p&gt;&lt;strong&gt;Update - use &lt;a href=&quot;https://angular.io/docs/ts/latest/api/core/index/ViewContainerRef-class.html&quot; rel=&quot;noreferrer&quot;&gt;ViewContainerRef&lt;/a&gt;.createComponent()&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Because &lt;code&gt;DynamicComponentLoader&lt;/code&gt; is deprecated, the approach needs to be update again.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-ts s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;selector&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;dcl-wrapper&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;template&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;div #target&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;\n})\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DclWrapper&lt;/span&gt; {\n  &lt;span class=&quot;hljs-meta&quot;&gt;@ViewChild&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;target&apos;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;read&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ViewContainerRef&lt;/span&gt;}) target;\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Input&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attr&quot;&gt;cmpRef&lt;/span&gt;:&lt;span class=&quot;hljs-title class_&quot;&gt;ComponentRef&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;isViewInitialized&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;boolean&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; resolver: ComponentResolver&lt;/span&gt;) {}\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;updateComponent&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;isViewInitialized&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;destroy&lt;/span&gt;();\n    }\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;resolver&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolveComponent&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;factory:ComponentFactory&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;&amp;gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createComponent&lt;/span&gt;(factory)\n      &lt;span class=&quot;hljs-comment&quot;&gt;// to access the created instance use&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;// this.compRef.instance.someProperty = &apos;someValue&apos;;&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;// this.compRef.instance.someOutput.subscribe(val =&amp;gt; doSomething());&lt;/span&gt;\n    });\n  }\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;ngOnChanges&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;updateComponent&lt;/span&gt;();\n  }\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;ngAfterViewInit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;isViewInitialized&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;updateComponent&lt;/span&gt;();  \n  }\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;ngOnDestroy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;destroy&lt;/span&gt;();\n    }    \n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://plnkr.co/edit/GJTLrnQdRDBvZenX59PZ?p=preview&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Plunker example RC.4&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://plnkr.co/edit/PpgMvS?p=preview&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Plunker example beta.17&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Update - use loadNextToLocation&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-ts s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DclWrapper&lt;/span&gt; {\n  &lt;span class=&quot;hljs-meta&quot;&gt;@ViewChild&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;target&apos;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;read&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ViewContainerRef&lt;/span&gt;}) target;\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Input&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attr&quot;&gt;cmpRef&lt;/span&gt;:&lt;span class=&quot;hljs-title class_&quot;&gt;ComponentRef&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;isViewInitialized&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;boolean&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; dcl:DynamicComponentLoader&lt;/span&gt;) {}\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;updateComponent&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// should be executed every time `type` changes but not before `ngAfterViewInit()` was called &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// to have `target` initialized&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;isViewInitialized&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;destroy&lt;/span&gt;();\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;dcl&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;loadNextToLocation&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cmpRef&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt; = cmpRef;\n    });\n  }\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;ngOnChanges&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;updateComponent&lt;/span&gt;();\n  }\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;ngAfterViewInit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;isViewInitialized&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;updateComponent&lt;/span&gt;();  \n  }\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;ngOnDestroy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;destroy&lt;/span&gt;();\n    }    \n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://plnkr.co/edit/kc2Bgg?p=preview&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Plunker example beta.17&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;original&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Not entirely sure from your question what your requirements are but I think this should do what you want.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;Tabs&lt;/code&gt; component gets an array of types passed and it creates &quot;tabs&quot; for each item in the array.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-ts s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;selector&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;dcl-wrapper&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;template&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;div #target&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;\n})\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DclWrapper&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; elRef:ElementRef, &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; dcl:DynamicComponentLoader&lt;/span&gt;) {}\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Input&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;ngOnChanges&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;dispose&lt;/span&gt;();\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;dcl&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;loadIntoLocation&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;elRef&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;target&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cmpRef&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt; = cmpRef;\n    });\n  }\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;selector&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;c1&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;template&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;h2&amp;gt;c1&amp;lt;/h2&amp;gt;`&lt;/span&gt;\n\n})\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C1&lt;/span&gt; {\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;selector&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;c2&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;template&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;h2&amp;gt;c2&amp;lt;/h2&amp;gt;`&lt;/span&gt;\n\n})\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C2&lt;/span&gt; {\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;selector&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;c3&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;template&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;`&amp;lt;h2&amp;gt;c3&amp;lt;/h2&amp;gt;`&lt;/span&gt;\n\n})\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C3&lt;/span&gt; {\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;selector&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;my-tabs&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;directives&lt;/span&gt;: [&lt;span class=&quot;hljs-title class_&quot;&gt;DclWrapper&lt;/span&gt;],\n  &lt;span class=&quot;hljs-attr&quot;&gt;template&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;`\n  &amp;lt;h2&amp;gt;Tabs&amp;lt;/h2&amp;gt;\n  &amp;lt;div *ngFor=&quot;let tab of tabs&quot;&amp;gt;\n    &amp;lt;dcl-wrapper [type]=&quot;tab&quot;&amp;gt;&amp;lt;/dcl-wrapper&amp;gt;\n  &amp;lt;/div&amp;gt;\n`&lt;/span&gt;\n})\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Tabs&lt;/span&gt; {\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Input&lt;/span&gt;() tabs;\n}\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;selector&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;my-app&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;directives&lt;/span&gt;: [&lt;span class=&quot;hljs-title class_&quot;&gt;Tabs&lt;/span&gt;]\n  &lt;span class=&quot;hljs-attr&quot;&gt;template&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;`\n  &amp;lt;h2&amp;gt;Hello {{name}}&amp;lt;/h2&amp;gt;\n  &amp;lt;my-tabs [tabs]=&quot;types&quot;&amp;gt;&amp;lt;/my-tabs&amp;gt;\n`&lt;/span&gt;\n})\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;App&lt;/span&gt; {\n  types = [&lt;span class=&quot;hljs-variable constant_&quot;&gt;C3&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C1&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C2&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C3&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C3&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C1&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;C1&lt;/span&gt;];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://plnkr.co/edit/kc2Bgg?p=preview&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Plunker example beta.15&lt;/strong&gt;&lt;/a&gt; (not based on your Plunker)&lt;/p&gt;\n\n&lt;p&gt;There is also a way to pass data along that can be passed to the dynamically created component like (&lt;code&gt;someData&lt;/code&gt; would need to be passed like &lt;code&gt;type&lt;/code&gt;)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-ts s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;dcl&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;loadIntoLocation&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;elRef&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;target&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cmpRef&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  cmpRef.&lt;span class=&quot;hljs-property&quot;&gt;instance&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;someProperty&lt;/span&gt; = someData;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cmpRef&lt;/span&gt; = cmpRef;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is also some support to use dependency injection with shared services.&lt;/p&gt;\n\n&lt;p&gt;For more details see &lt;a href=&quot;https://angular.io/docs/ts/latest/cookbook/dynamic-component-loader.html&quot; rel=&quot;noreferrer&quot;&gt;https://angular.io/docs/ts/latest/cookbook/dynamic-component-loader.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m not cool enough for comments. I fixed the plunker from the accepted answer to work for rc2. Nothing fancy, links to the CDN were just broken is all.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&apos;@angular/core&apos;: {\n  main: &apos;bundles/core.umd.js&apos;,\n  defaultExtension: &apos;js&apos;\n},\n&apos;@angular/compiler&apos;: {\n  main: &apos;bundles/compiler.umd.js&apos;,\n  defaultExtension: &apos;js&apos;\n},\n&apos;@angular/common&apos;: {\n  main: &apos;bundles/common.umd.js&apos;,\n  defaultExtension: &apos;js&apos;\n},\n&apos;@angular/platform-browser-dynamic&apos;: {\n  main: &apos;bundles/platform-browser-dynamic.umd.js&apos;,\n  defaultExtension: &apos;js&apos;\n},\n&apos;@angular/platform-browser&apos;: {\n  main: &apos;bundles/platform-browser.umd.js&apos;,\n  defaultExtension: &apos;js&apos;\n},\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://plnkr.co/edit/kVJvI1vkzrLZJeRFsZuv?p=preview&quot; rel=&quot;noreferrer&quot;&gt;https://plnkr.co/edit/kVJvI1vkzrLZJeRFsZuv?p=preview&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;there is component ready to use (rc5 compatible)\n&lt;a href=&quot;https://github.com/neuronetpl/ng2-steps&quot; rel=&quot;noreferrer&quot;&gt;ng2-steps&lt;/a&gt;\nwhich uses &lt;code&gt;Compiler&lt;/code&gt; to inject component to step container\nand service for wiring everything together (data sync)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    import { Directive , Input, OnInit, Compiler , ViewContainerRef } from &apos;@angular/core&apos;;\n\nimport { StepsService } from &apos;./ng2-steps&apos;;\n\n@Directive({\n  selector:&apos;[ng2-step]&apos;\n})\nexport class StepDirective implements OnInit{\n\n  @Input(&apos;content&apos;) content:any;\n  @Input(&apos;index&apos;) index:string;\n  public instance;\n\n  constructor(\n    private compiler:Compiler,\n    private viewContainerRef:ViewContainerRef,\n    private sds:StepsService\n  ){}\n\n  ngOnInit(){\n    //Magic!\n    this.compiler.compileComponentAsync(this.content).then((cmpFactory)=&amp;gt;{\n      const injector = this.viewContainerRef.injector;\n      this.viewContainerRef.createComponent(cmpFactory, 0,  injector);\n    });\n  }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":575,"title":"Dynamic tabs with user-click chosen components","content":"\n                \n&lt;p&gt;I&apos;m trying to setup a tab system that allows for components to register themselves (with a title). The first tab is like an inbox, there&apos;s plenty of actions/link items to choose from for the users, and each of these clicks should be able to instantiate a new component, on click. The actions / links comes in from JSON.&lt;/p&gt;\n\n&lt;p&gt;The instantiated component will then register itself as a new tab.&lt;/p&gt;\n\n&lt;p&gt;I&apos;m not sure if this is the &apos;best&apos; approach? So far, the only guides I&apos;ve seen are for static tabs, which doesn&apos;t help.&lt;/p&gt;\n\n&lt;p&gt;So far, I&apos;ve only got the tabs service which is bootstrapped in main to persist throughout the app. It looks something like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export interface ITab { title: string; }\n\n@Injectable()\nexport class TabsService {\n    private tabs = new Set&amp;lt;ITab&amp;gt;();\n\n    addTab(title: string): ITab {\n        let tab: ITab = { title };\n        this.tabs.add(tab);\n        return tab;\n    }\n\n    removeTab(tab: ITab) {\n        this.tabs.delete(tab);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Questions:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;How can I have a dynamic list in the inbox that creates new (different) tabs? I am sort of guessing the &lt;code&gt;DynamicComponentBuilder&lt;/code&gt; would be used?&lt;/li&gt;\n&lt;li&gt;How can the components be created from the inbox (on click) register themselves as tabs and also be shown? I&apos;m guessing &lt;code&gt;ng-content&lt;/code&gt;, but I can&apos;t find much info on how to use it&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; An attempt to clarify.&lt;/p&gt;\n\n&lt;p&gt;Think of the inbox as a mail inbox. Items are fetched as JSON and it displays several items. Once one of the items is clicked, a new tab is created with that items action &apos;type&apos;. The type is then a component.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT 2:&lt;/strong&gt; &lt;a href=&quot;https://i.imgur.com/yzfMOXJ.png&quot; rel=&quot;noreferrer&quot;&gt;Image&lt;/a&gt;.&lt;/p&gt;\n    ","slug":"dynamic-tabs-with-user-click-chosen-components-1657388465232","postType":"QUESTION","createdAt":"2022-07-09T17:41:05.000Z","updatedAt":"2022-07-09T17:41:05.000Z","tags":[{"id":2764,"name":"angular-template","slug":"angular-template","createdAt":"2022-07-09T17:41:05.000Z","updatedAt":"2022-07-09T17:41:05.000Z","Questions_Tags":{"questionId":575,"tagId":2764}}],"relatedQuestions":[{"title":"Dynamic tabs with user-click chosen components","slug":"dynamic-tabs-with-user-click-chosen-components-1657388465232","tags":[{"name":"angular-template","Questions_Tags":{"questionId":575,"tagId":2764}}]}]},"randomQuestions":[{"title":"Pandas Merging 101","slug":"pandas-merging-101-1657384447080"},{"title":"What is the difference between client-side and server-side programming?","slug":"what-is-the-difference-between-client-side-and-server-side-programming-1657384372926"},{"title":"How to use java.net.URLConnection to fire and handle HTTP requests","slug":"how-to-use-java.net.urlconnection-to-fire-and-handle-http-requests-1657387245934"},{"title":"How can I upload files asynchronously with jQuery?","slug":"how-can-i-upload-files-asynchronously-with-jquery-1657384815389"},{"title":"Calculate distance between two latitude-longitude points? (Haversine formula)","slug":"calculate-distance-between-two-latitude-longitude-points-(haversine-formula)-1657388500103"},{"title":"Retrieving the last record in each group - MySQL","slug":"retrieving-the-last-record-in-each-group-mysql-1657384887369"},{"title":"Persist variables between page loads","slug":"persist-variables-between-page-loads-1657388558452"},{"title":"What is a smart pointer and when should I use one?","slug":"what-is-a-smart-pointer-and-when-should-i-use-one-1657387905461"},{"title":".prop() vs .attr()","slug":".prop()-vs-.attr()-1657384898328"},{"title":"Can I bind an array to an IN() condition in a PDO query?","slug":"can-i-bind-an-array-to-an-in()-condition-in-a-pdo-query-1657388382858"},{"title":"What is the difference between char s[] and char *s?","slug":"what-is-the-difference-between-char-s-and-char-*s-1657387823570"},{"title":"SQL select only rows with max value on a column [duplicate]","slug":"sql-select-only-rows-with-max-value-on-a-column-duplicate-1657384614292"},{"title":"jQuery Ajax POST example with PHP","slug":"jquery-ajax-post-example-with-php-1657387402634"},{"title":"How to add to the PYTHONPATH in Windows, so it finds my modules/packages?","slug":"how-to-add-to-the-pythonpath-in-windows-so-it-finds-my-modulespackages-1657388540360"},{"title":"How to extract and access data from JSON with PHP?","slug":"how-to-extract-and-access-data-from-json-with-php-1657384483259"},{"title":"Change the maximum upload file size","slug":"change-the-maximum-upload-file-size-1657388495156"},{"title":"What does a space mean in a CSS selector? i.e. What is the difference between .classA.classB and .classA .classB?","slug":"what-does-a-space-mean-in-a-css-selector-i.e.-what-is-the-difference-between-.classa.classb-and-.classa-.classb-1657387912095"},{"title":"event.preventDefault() vs. return false","slug":"event.preventdefault()-vs.-return-false-1657387458377"},{"title":"var functionName = function() {} vs function functionName() {}","slug":"var-functionname-function()-vs-function-functionname()-1657384724077"},{"title":"Is storing a delimited list in a database column really that bad?","slug":"is-storing-a-delimited-list-in-a-database-column-really-that-bad-1657384474773"}]},"__N_SSG":true}