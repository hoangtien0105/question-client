{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;strong&gt;Most vexing parse&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This is related to what is known as &quot;C++&apos;s most vexing parse&quot;. Basically, anything that can be interpreted by the compiler as a function declaration will be interpreted as a function declaration.&lt;/p&gt;\n\n&lt;p&gt;Another instance of the same problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::ifstream &lt;span class=&quot;hljs-title&quot;&gt;ifs&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file.txt&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;T&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::istream_iterator&amp;lt;T&amp;gt;(ifs), std::istream_iterator&amp;lt;T&amp;gt;())&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;v&lt;/code&gt; is interpreted as a declaration of function with 2 parameters.&lt;/p&gt;\n\n&lt;p&gt;The workaround is to add another pair of parentheses:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;T&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;((std::istream_iterator&amp;lt;T&amp;gt;(ifs)), std::istream_iterator&amp;lt;T&amp;gt;())&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or, if you have C++11 and list-initialization (also known as uniform initialization) available:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::vector&amp;lt;T&amp;gt; v{std::istream_iterator&amp;lt;T&amp;gt;{ifs}, std::istream_iterator&amp;lt;T&amp;gt;{}};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With this, there is no way it could be interpreted as a function declaration.&lt;/p&gt;\n    ","\n&lt;p&gt;Because it is treated as the declaration for a function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyFunction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// clearly a function&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;MyObject &lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// also a function declaration&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The same syntax is used for function declaration - e.g. the function &lt;code&gt;object&lt;/code&gt;, taking no parameters and returning &lt;code&gt;MyObject&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Because the compiler thinks it is a declaration of a function that takes no arguments and returns a MyObject instance.&lt;/p&gt;\n    ","\n&lt;p&gt;I guess, the compiler would not know if this statement:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;MyObject object(); &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;is a constructor call or a function prototype declaring a function named &lt;em&gt;object&lt;/em&gt; with return type &lt;em&gt;MyObject&lt;/em&gt; and no  parameters.&lt;/p&gt;\n    ","\n&lt;p&gt;You could also use the more verbose way of construction:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;MyObject object1 = &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;();\nMyObject object2 = &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;(object1);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In C++0x this also allows for &lt;code&gt;auto&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; object1 = &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; object2 = &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;(object1);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As mentioned many times, it&apos;s a declaration.  It&apos;s that way for backward compatibility.  One of the many areas of C++ that are goofy/inconsistent/painful/bogus because of its legacy.  &lt;/p&gt;\n    ","\n&lt;p&gt;From n4296 [dcl.init]:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;[ Note:&lt;br&gt; Since &lt;code&gt;()&lt;/code&gt; is not permitted by the syntax for &lt;em&gt;initializer&lt;/em&gt;, \n  &lt;code&gt;X a();&lt;/code&gt; is not the declaration of an &lt;em&gt;object&lt;/em&gt; of class X, but the\n  declaration of a &lt;em&gt;function&lt;/em&gt; taking no argument and returning an X. The\n  form () is permitted in certain other initialization contexts (5.3.4,\n  5.2.3, 12.6.2). \n  &lt;br&gt;end note ]&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n3337/dcl.init#10&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++11 Link&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n4140/dcl.init#11&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++14 Link&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As the others said, it is a function declaration. Since C++11 you can use brace initialization if you need to see the empty &lt;em&gt;something&lt;/em&gt; that explicitly tells you that a default constructor is used.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Jedi luke{}; &lt;span class=&quot;hljs-comment&quot;&gt;//default constructor&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":514,"title":"Default constructor with empty brackets","content":"\n                \n&lt;p&gt;Is there any good reason that an empty set of round brackets (parentheses) isn&apos;t valid for calling the default constructor in C++?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;MyObject  object;  &lt;span class=&quot;hljs-comment&quot;&gt;// ok - default ctor&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;MyObject  &lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(blah)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// ok&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;MyObject  &lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I seem to type &quot;()&quot; automatically everytime. Is there a good reason this isn&apos;t allowed?&lt;/p&gt;\n    ","slug":"default-constructor-with-empty-brackets-1657388246967","postType":"QUESTION","createdAt":"2022-07-09T17:37:26.000Z","updatedAt":"2022-07-09T17:37:26.000Z","tags":[{"id":2548,"name":"default-constructor","slug":"default-constructor","createdAt":"2022-07-09T17:37:27.000Z","updatedAt":"2022-07-09T17:37:27.000Z","Questions_Tags":{"questionId":514,"tagId":2548}},{"id":2550,"name":"most-vexing-parse","slug":"most-vexing-parse","createdAt":"2022-07-09T17:37:27.000Z","updatedAt":"2022-07-09T17:37:27.000Z","Questions_Tags":{"questionId":514,"tagId":2550}}],"relatedQuestions":[{"title":"Default constructor with empty brackets","slug":"default-constructor-with-empty-brackets-1657388246967","tags":[{"name":"default-constructor","Questions_Tags":{"questionId":514,"tagId":2548}},{"name":"most-vexing-parse","Questions_Tags":{"questionId":514,"tagId":2550}}]}]},"randomQuestions":[{"title":"Why are mutable structs “evil”?","slug":"why-are-mutable-structs-\"evil\"-1657388508974"},{"title":"How can I vertically align elements in a div?","slug":"how-can-i-vertically-align-elements-in-a-div-1657385504431"},{"title":"Why is iostream::eof inside a loop condition (i.e. `while (!stream.eof())`) considered wrong?","slug":"why-is-iostream::eof-inside-a-loop-condition-(i.e.-while-(!stream.eof()))-considered-wrong-1657384355427"},{"title":"How does Access-Control-Allow-Origin header work?","slug":"how-does-access-control-allow-origin-header-work-1657384881723"},{"title":"Of the many findElement(s)/By functions in Selenium, when would you use one over the other?","slug":"of-the-many-findelement(s)by-functions-in-selenium-when-would-you-use-one-over-the-other-1657388412658"},{"title":"How do I copy to the clipboard in JavaScript?","slug":"how-do-i-copy-to-the-clipboard-in-javascript-1657385501223"},{"title":"CSS margin terror; Margin adds space outside parent element [duplicate]","slug":"css-margin-terror-margin-adds-space-outside-parent-element-duplicate-1657388142199"},{"title":"Calculate distance between two latitude-longitude points? (Haversine formula)","slug":"calculate-distance-between-two-latitude-longitude-points-(haversine-formula)-1657388500103"},{"title":"The useState set method is not reflecting a change immediately","slug":"the-usestate-set-method-is-not-reflecting-a-change-immediately-1657384524775"},{"title":"Non-static variable cannot be referenced from a static context","slug":"non-static-variable-cannot-be-referenced-from-a-static-context-1657387386240"},{"title":"Retrieving the last record in each group - MySQL","slug":"retrieving-the-last-record-in-each-group-mysql-1657384887369"},{"title":"How to compare arrays in JavaScript?","slug":"how-to-compare-arrays-in-javascript-1657387352277"},{"title":"Collapse / concatenate / aggregate a column to a single comma separated string within each group","slug":"collapse-concatenate-aggregate-a-column-to-a-single-comma-separated-string-within-each-group-1657387870901"},{"title":"How to create RecyclerView with multiple view types","slug":"how-to-create-recyclerview-with-multiple-view-types-1657388121512"},{"title":"Object comparison in JavaScript [duplicate]","slug":"object-comparison-in-javascript-duplicate-1657387675463"},{"title":"Which equals operator (== vs ===) should be used in JavaScript comparisons?","slug":"which-equals-operator-(-vs-)-should-be-used-in-javascript-comparisons-1657384663105"},{"title":"The difference between bracket [ ] and double bracket [[ ]] for accessing the elements of a list or dataframe","slug":"the-difference-between-bracket-and-double-bracket-for-accessing-the-elements-of-a-list-or-dataframe-1657388451711"},{"title":"mysqli or die, does it have to die?","slug":"mysqli-or-die-does-it-have-to-die-1657388533922"},{"title":"When can I use a forward declaration?","slug":"when-can-i-use-a-forward-declaration-1657388251827"},{"title":"How to parse JSON in Java","slug":"how-to-parse-json-in-java-1657384575136"}]},"__N_SSG":true}