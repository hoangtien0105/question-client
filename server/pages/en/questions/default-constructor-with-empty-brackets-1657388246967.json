{"pageProps":{"data":{"answer":["\n&lt;p&gt;&lt;strong&gt;Most vexing parse&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This is related to what is known as &quot;C++&apos;s most vexing parse&quot;. Basically, anything that can be interpreted by the compiler as a function declaration will be interpreted as a function declaration.&lt;/p&gt;\n\n&lt;p&gt;Another instance of the same problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::ifstream &lt;span class=&quot;hljs-title&quot;&gt;ifs&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file.txt&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;T&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::istream_iterator&amp;lt;T&amp;gt;(ifs), std::istream_iterator&amp;lt;T&amp;gt;())&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;v&lt;/code&gt; is interpreted as a declaration of function with 2 parameters.&lt;/p&gt;\n\n&lt;p&gt;The workaround is to add another pair of parentheses:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;T&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;((std::istream_iterator&amp;lt;T&amp;gt;(ifs)), std::istream_iterator&amp;lt;T&amp;gt;())&lt;/span&gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or, if you have C++11 and list-initialization (also known as uniform initialization) available:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::vector&amp;lt;T&amp;gt; v{std::istream_iterator&amp;lt;T&amp;gt;{ifs}, std::istream_iterator&amp;lt;T&amp;gt;{}};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With this, there is no way it could be interpreted as a function declaration.&lt;/p&gt;\n    ","\n&lt;p&gt;Because it is treated as the declaration for a function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyFunction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// clearly a function&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;MyObject &lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// also a function declaration&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The same syntax is used for function declaration - e.g. the function &lt;code&gt;object&lt;/code&gt;, taking no parameters and returning &lt;code&gt;MyObject&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Because the compiler thinks it is a declaration of a function that takes no arguments and returns a MyObject instance.&lt;/p&gt;\n    ","\n&lt;p&gt;I guess, the compiler would not know if this statement:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;MyObject object(); &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;is a constructor call or a function prototype declaring a function named &lt;em&gt;object&lt;/em&gt; with return type &lt;em&gt;MyObject&lt;/em&gt; and no  parameters.&lt;/p&gt;\n    ","\n&lt;p&gt;You could also use the more verbose way of construction:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;MyObject object1 = &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;();\nMyObject object2 = &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;(object1);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In C++0x this also allows for &lt;code&gt;auto&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; object1 = &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; object2 = &lt;span class=&quot;hljs-built_in&quot;&gt;MyObject&lt;/span&gt;(object1);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As mentioned many times, it&apos;s a declaration.  It&apos;s that way for backward compatibility.  One of the many areas of C++ that are goofy/inconsistent/painful/bogus because of its legacy.  &lt;/p&gt;\n    ","\n&lt;p&gt;From n4296 [dcl.init]:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;[ Note:&lt;br&gt; Since &lt;code&gt;()&lt;/code&gt; is not permitted by the syntax for &lt;em&gt;initializer&lt;/em&gt;, \n  &lt;code&gt;X a();&lt;/code&gt; is not the declaration of an &lt;em&gt;object&lt;/em&gt; of class X, but the\n  declaration of a &lt;em&gt;function&lt;/em&gt; taking no argument and returning an X. The\n  form () is permitted in certain other initialization contexts (5.3.4,\n  5.2.3, 12.6.2). \n  &lt;br&gt;end note ]&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n3337/dcl.init#10&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++11 Link&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n4140/dcl.init#11&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++14 Link&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As the others said, it is a function declaration. Since C++11 you can use brace initialization if you need to see the empty &lt;em&gt;something&lt;/em&gt; that explicitly tells you that a default constructor is used.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Jedi luke{}; &lt;span class=&quot;hljs-comment&quot;&gt;//default constructor&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":514,"title":"Default constructor with empty brackets","content":"\n                \n&lt;p&gt;Is there any good reason that an empty set of round brackets (parentheses) isn&apos;t valid for calling the default constructor in C++?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;MyObject  object;  &lt;span class=&quot;hljs-comment&quot;&gt;// ok - default ctor&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;MyObject  &lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(blah)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// ok&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;MyObject  &lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I seem to type &quot;()&quot; automatically everytime. Is there a good reason this isn&apos;t allowed?&lt;/p&gt;\n    ","slug":"default-constructor-with-empty-brackets-1657388246967","postType":"QUESTION","createdAt":"2022-07-09T17:37:26.000Z","updatedAt":"2022-07-09T17:37:26.000Z","tags":[{"id":2548,"name":"default-constructor","slug":"default-constructor","createdAt":"2022-07-09T17:37:27.000Z","updatedAt":"2022-07-09T17:37:27.000Z","Questions_Tags":{"questionId":514,"tagId":2548}},{"id":2550,"name":"most-vexing-parse","slug":"most-vexing-parse","createdAt":"2022-07-09T17:37:27.000Z","updatedAt":"2022-07-09T17:37:27.000Z","Questions_Tags":{"questionId":514,"tagId":2550}}],"relatedQuestions":[{"title":"Default constructor with empty brackets","slug":"default-constructor-with-empty-brackets-1657388246967","tags":[{"name":"default-constructor","Questions_Tags":{"questionId":514,"tagId":2548}},{"name":"most-vexing-parse","Questions_Tags":{"questionId":514,"tagId":2550}}]}]},"randomQuestions":[{"title":"Captured variable in a loop in C#","slug":"captured-variable-in-a-loop-in-c-1657387696779"},{"title":"Using regular expressions to parse HTML: why not?","slug":"using-regular-expressions-to-parse-html:-why-not-1657387543969"},{"title":"JavaScript property access: dot notation vs. brackets?","slug":"javascript-property-access:-dot-notation-vs.-brackets-1657384717494"},{"title":"How do I properly compare strings in C?","slug":"how-do-i-properly-compare-strings-in-c-1657387467202"},{"title":"How do I pass variables and data from PHP to JavaScript?","slug":"how-do-i-pass-variables-and-data-from-php-to-javascript-1657384684553"},{"title":"Why does std::getline() skip input after a formatted extraction?","slug":"why-does-std::getline()-skip-input-after-a-formatted-extraction-1657384756118"},{"title":"How to create a MySQL hierarchical recursive query?","slug":"how-to-create-a-mysql-hierarchical-recursive-query-1657387662163"},{"title":"Why are global variables evil? [closed]","slug":"why-are-global-variables-evil-closed-1657388260006"},{"title":"Using async/await with a forEach loop","slug":"using-asyncawait-with-a-foreach-loop-1657384512667"},{"title":"Disable same origin policy in Chrome","slug":"disable-same-origin-policy-in-chrome-1657387743804"},{"title":"What is an efficient way to implement a singleton pattern in Java? [closed]","slug":"what-is-an-efficient-way-to-implement-a-singleton-pattern-in-java-closed-1657387970474"},{"title":"Self-references in object literals / initializers","slug":"self-references-in-object-literals-initializers-1657384835356"},{"title":"Dynamically access object property using variable","slug":"dynamically-access-object-property-using-variable-1657384439324"},{"title":"What is the difference between const int*, const int * const, and int const *?","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604"},{"title":"input() error - NameError: name '...' is not defined","slug":"input()-error-nameerror:-name-'...'-is-not-defined-1657388497243"},{"title":"Read file line by line using ifstream in C++","slug":"read-file-line-by-line-using-ifstream-in-c++-1657388236966"},{"title":"Performance optimization strategies of last resort [closed]","slug":"performance-optimization-strategies-of-last-resort-closed-1657388420614"},{"title":"Learning Regular Expressions [closed]","slug":"learning-regular-expressions-closed-1657384719460"},{"title":"How to use Regular Expressions (Regex) in Microsoft Excel both in-cell and loops","slug":"how-to-use-regular-expressions-(regex)-in-microsoft-excel-both-in-cell-and-loops-1657387487287"},{"title":"How do I split a list into equally-sized chunks?","slug":"how-do-i-split-a-list-into-equally-sized-chunks-1657384580399"}]},"__N_SSG":true}