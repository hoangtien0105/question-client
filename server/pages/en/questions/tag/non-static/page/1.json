{"pageProps":{"data":{"count":1,"rows":[{"id":245,"title":"Non-static variable cannot be referenced from a static context","slug":"non-static-variable-cannot-be-referenced-from-a-static-context-1657387386240","postType":"QUESTION","createdAt":"2022-07-09T17:23:06.000Z","updatedAt":"2022-07-09T17:23:06.000Z","tags":[{"id":1606,"name":"non-static","slug":"non-static","createdAt":"2022-07-09T17:23:06.000Z","updatedAt":"2022-07-09T17:23:06.000Z","Questions_Tags":{"questionId":245,"tagId":1606}}]}]},"slug":"non-static","page":"1","answers":{"245":["\n&lt;p&gt;You must understand the difference between a class and an instance of that class. If you see a car on the street, you know immediately that it&apos;s a car even if you can&apos;t see which model or type. This is because you compare what you see with the &lt;em&gt;class&lt;/em&gt; &quot;car&quot;. The class contains which is similar to all cars. Think of it as a template or an idea.&lt;/p&gt;\n\n&lt;p&gt;At the same time, the car you see is an instance of the class &quot;car&quot; since it has all the properties which you expect: There is someone driving it, it has an engine, wheels.&lt;/p&gt;\n\n&lt;p&gt;So the class says &quot;all cars have a color&quot; and the instance says &quot;this specific car is red&quot;.&lt;/p&gt;\n\n&lt;p&gt;In the OO world, you define the class and inside the class, you define a field of type &lt;code&gt;Color&lt;/code&gt;. When the class is instantiated (when you create a specific instance), memory is reserved for the color and you can give this specific instance a color. Since these attributes are specific, they are non-static.&lt;/p&gt;\n\n&lt;p&gt;Static fields and methods are shared with all instances. They are for values which are specific to the class and not a specific instance. For methods, this usually are global helper methods (like &lt;code&gt;Integer.parseInt()&lt;/code&gt;). For fields, it&apos;s usually constants (like car types, i.e. something where you have a limited set which doesn&apos;t change often).&lt;/p&gt;\n\n&lt;p&gt;To solve your problem, you need to instantiate an instance (create an object) of your class so the runtime can reserve memory for the instance (otherwise, different instances would overwrite each other which you don&apos;t want).&lt;/p&gt;\n\n&lt;p&gt;In your case, try this code as a starting block:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;MyProgram7&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyProgram7&lt;/span&gt; ();\n        obj.run (args);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e)\n    {\n        e.printStackTrace ();\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// instance variables here&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// put your code here&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The new &lt;code&gt;main()&lt;/code&gt; method creates an instance of the class it contains (sounds strange but since &lt;code&gt;main()&lt;/code&gt; is created with the class instead of with the instance, it can do this) and then calls an instance method (&lt;code&gt;run()&lt;/code&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;Static fields and methods are connected to the class itself and not to its instances. If you have a class &lt;code&gt;A&lt;/code&gt;, a &apos;normal&apos; (usually called instance) method &lt;code&gt;b&lt;/code&gt;, and a static method &lt;code&gt;c&lt;/code&gt;, and you make an instance &lt;code&gt;a&lt;/code&gt; of your class &lt;code&gt;A&lt;/code&gt;, the calls to &lt;code&gt;A.c()&lt;/code&gt; and &lt;code&gt;a.b()&lt;/code&gt; are valid. Method &lt;code&gt;c()&lt;/code&gt; has no idea which instance is connected, so it cannot use non-static fields.&lt;/p&gt;\n&lt;p&gt;The solution for you is that you either make your fields static or your methods non-static. Your main could look like this then:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Programm&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Programm&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;programm&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Programm&lt;/span&gt;();\n        programm.start();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// can now access non-static fields&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;static&lt;/code&gt; keyword modifies the lifecycle of a method or variable within a class. A &lt;code&gt;static&lt;/code&gt; method or variable is created at the time a class is loaded. A method or variable that is not declared as &lt;code&gt;static&lt;/code&gt; is created only when the class is instantiated as an object for example by using the &lt;code&gt;new&lt;/code&gt; operator.&lt;/p&gt;\n\n&lt;p&gt;The lifecycle of a class, in broad terms, is: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;the source code for the class is written creating a template or\npattern or stamp which can then be used to&lt;/li&gt;\n&lt;li&gt;create an object with the &lt;code&gt;new&lt;/code&gt; operator using the class to make an instance of the class as an actual object and then when done with the object &lt;/li&gt;\n&lt;li&gt;destroy the object reclaiming the resources it is holding such as memory during garbage collection.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In order to have an initial entry point for an application, Java has adopted the convention that the Java program must have a class that contains a method with an agreed upon or special name. This special method is called &lt;code&gt;main()&lt;/code&gt;. Since the method must exist whether the class containing the main method has been instantiated or not, the &lt;code&gt;main()&lt;/code&gt; method must be declared with the &lt;code&gt;static&lt;/code&gt; modifier so that as soon as the class is loaded, the &lt;code&gt;main()&lt;/code&gt; method is available.&lt;/p&gt;\n\n&lt;p&gt;The result is that when you start your Java application by a command line such as &lt;code&gt;java helloworld&lt;/code&gt; a series of actions happen. First of all a Java Virtual Machine is started up and initialized. Next the helloworld.class file containing the compiled Java code is loaded into the Java Virtual Machine. Then the Java Virtual Machine looks for a method in the &lt;code&gt;helloworld&lt;/code&gt; class that is called &lt;code&gt;main(String [] args)&lt;/code&gt;. this method must be &lt;code&gt;static&lt;/code&gt; so that it will exist even though the class has not actually been instantiated as an object. The Java Virtual Machine does not create an instance of the class by creating an object from the class. It just loads the class and starts execution at the &lt;code&gt;main()&lt;/code&gt; method.&lt;/p&gt;\n\n&lt;p&gt;So you need to create an instance of your class as an object and then you can access the methods and variables of the class that have not been declared with the &lt;code&gt;static&lt;/code&gt; modifier. Once your Java program has started with the &lt;code&gt;main()&lt;/code&gt; function you can then use any variables or methods that have the modifier of &lt;code&gt;static&lt;/code&gt; since they exist as part of the class being loaded. &lt;/p&gt;\n\n&lt;p&gt;However, those variables and methods of the class which are outside of the &lt;code&gt;main()&lt;/code&gt; method which do not have the &lt;code&gt;static&lt;/code&gt; modifier can not be used until an instance of the class has been created as an object within the &lt;code&gt;main()&lt;/code&gt; method. After creating the object you can then use the variables and methods of the object. An attempt to use the variables and methods of the class which do not have the &lt;code&gt;static&lt;/code&gt; modifier without going through an object of the class is caught by the Java compiler at compile time and flagged as an error.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HelloWorld&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; myInt;      &lt;span class=&quot;hljs-comment&quot;&gt;// this is a class variable that is unique to each object&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; myInt2;  &lt;span class=&quot;hljs-comment&quot;&gt;// this is a class variable shared by all objects of this class&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(String [] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// this is the main entry point for this Java application&lt;/span&gt;\n        System.out.println (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello, World\\n&quot;&lt;/span&gt;);\n        myInt2 = &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;// able to access the static int&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myWorld&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HelloWorld&lt;/span&gt;();\n        myWorld.myInt = &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;// able to access non-static through an object&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To be able to access them from your static methods they need to be static member variables, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyProgram7&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;scan&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Scanner&lt;/span&gt;(System.in);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;compareCount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Scanner temp;  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[]list;  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String menu, outputString;  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(String[]args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException {\n  ...\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Let&apos;s analyze your program first..\nIn your program, your first method is &lt;code&gt;main()&lt;/code&gt;, and keep it in mind it is the static method... Then you declare the local variable for that method (compareCount, low, high, etc..). The scope of this variable is only the declared method, regardless of it being a static or non static method. So you can&apos;t use those variables outside that method. This is the basic error u made.&lt;/p&gt;\n\n&lt;p&gt;Then we come to next point. You told static is killing you. (It may be killing you but it only gives life to your program!!) First you must understand the basic thing.\n*Static method calls only the static method and use only the static variable.\n*Static variable or static method are not dependent on any instance of that class. (i.e. If you change any state of the static variable it will reflect in all objects of the class)\n*Because of this you call it as a class variable or a class method.\nAnd a lot more is there about the &quot;static&quot; keyword.\nI hope now you get the idea. First change the scope of the variable and declare it as a static (to be able to use it in static methods).&lt;/p&gt;\n\n&lt;p&gt;And the advice for you is: you misunderstood the idea of the scope of the variables and static functionalities. Get clear idea about that.&lt;/p&gt;\n    ","\n&lt;p&gt;The very basic thing is static variables or static methods are at class level. Class level variables or methods gets loaded prior to instance level methods or variables.And obviously the thing which is not loaded can not be used. So java compiler not letting the things to be handled at run time resolves at compile time. That&apos;s why it is giving you error non-static things can not be referred from static context. You just need to read about Class Level Scope, Instance Level Scope and Local Scope.&lt;/p&gt;\n    ","\n&lt;p&gt;Now you can add/use instances with in the method &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Myprogram7&lt;/span&gt; {\n\n  Scanner scan;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;compareCount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;  \n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;  \n  Scanner temp;  \n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[]list;  \n  String menu, outputString;  \n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;  \n  &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;  \n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;findkey&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printCount&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;{\n\n    Myprogram7 myprg=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Myprogram7&lt;/span&gt;();\n    myprg.readLine();\n    myprg.findkey();\n    myprg.printCount();\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I will try to explain the static thing to you. First of all static variables do not belong to any particular instance of the class. They are recognized with the name of the class. Static methods again do not belong again to any particular instance. They can access only static variables. Imagine you call MyClass.myMethod() and myMethod is a static method. If you use non-static variables inside the method, how the hell on earth would it know which variables to use? That&apos;s why you can use from static methods only static variables. I repeat again they do NOT belong to any particular instance.&lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The first thing is to know the difference between an instance of a class, and the class itself. A class models certain properties, and the behaviour of the whole in the context of those properties. An instance will define specific values for those properties.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Anything bound to the static keyword is available in the context of the class rather than in the context of an instance of the class &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;As a corollary to the above  &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;variables within a method can not be static&lt;/li&gt;\n&lt;li&gt;static fields, and methods must be invoked using the class-name e.g. MyProgram7.main(...)&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The lifetime of a static field/method is equivalent to the lifetime of your application &lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;E.g. \nSay, car has the property colour, and exhibits the behaviour &apos;motion&apos;.\nAn instance of the car would be a Red Volkswagen Beetle in motion at 25kmph.&lt;/p&gt;\n\n&lt;p&gt;Now a static property of the car would be the number of wheels (4) on the road, and this would apply to all cars.&lt;/p&gt;\n\n&lt;p&gt;HTH&lt;/p&gt;\n    ","\n&lt;p&gt;Before you call an instance method or instance variable It needs a object(Instance). When instance variable is called from static method compiler doesn&apos;t know which is the object this variable belongs to. Because static methods doesn&apos;t have an object (Only one copy always). When you call an instance variable or instance methods from instance method it refer the &lt;code&gt;this&lt;/code&gt; object. It means the variable belongs to whatever object created and each object have it&apos;s own copy of instance methods and variables. &lt;/p&gt;\n\n&lt;p&gt;Static variables are marked as &lt;code&gt;static&lt;/code&gt; and instance variables doesn&apos;t have specific keyword.  &lt;/p&gt;\n    ","\n&lt;p&gt;It is ClassLoader responsible to load the class files.Let&apos;s see what happens when we write our own classes.&lt;/p&gt;\n\n&lt;p&gt;Example 1:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StaticTest&lt;/span&gt; {\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;\n      &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b;\n      &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now we can see that class &quot;StaticTest&quot; has 3 fields.But actually there is no existence of b,c member variable.But why ???. OK Lest&apos;s see. Here b,c are instance variable.Since instance variable gets the memory at the time of object creation. So here b,c are not getting any memory yet. That&apos;s why there is no existence of b,c. So There is only existence of a.\nFor ClassLoader it has only one information about a. ClassLoader yet not recognize b,c because it&apos;s object not instantiated yet.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s see another example:\nExample 2:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StaticTest&lt;/span&gt; {\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n          System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Static Test&quot;&lt;/span&gt;);\n      }\n\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String []cmd)&lt;/span&gt; {\n\n             display();       \n      }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now if we try to compile this code compiler will give CE error.\nCE: non-static method display() cannot be referenced from a static context.&lt;/p&gt;\n\n&lt;p&gt;Now For ClassLoader it looks like: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StaticTest&lt;/span&gt; {\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String []cmd)&lt;/span&gt; {\n\n             display();       \n      }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Example 2 CE error is because we call non static method from a static context. So it is not possible for ClassLoader to recognize method display() at compile time.So compile time error is occurred.    &lt;/p&gt;\n    ","\n&lt;p&gt;This is bit diff to explain about static key word for all beginners.&lt;br&gt;\nYou wil get to know it clearly when you work more with Classes and Objects.&lt;/p&gt;\n\n&lt;p&gt;|*| &lt;b&gt;Static :&lt;/b&gt; Static items can be called with Class Name &lt;br&gt;\nIf you observe in codes, Some functions are directly called with Class names like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;NamCls.NamFnc();\n\nSystem.out.println();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is because NamFnc and println wil be declared using key word static before them.&lt;/p&gt;\n\n&lt;p&gt;|*| &lt;b&gt;Non Static :&lt;/b&gt;Non Static items can be called with Class Variable&lt;br&gt;\nIf its not static, you need a variable of the class,&lt;br&gt;\nput dot after the class variable and&lt;br&gt;\nthen call function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;NamCls&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;NamObjVar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NamCls&lt;/span&gt;();\nNamObjVar.NamFnc();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;hr&gt;\nBelow code explains you neatly&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;|*| Static and non Static function in class :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NamCls&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;\n    {\n        PlsPrnFnc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tst Txt&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-type&quot;&gt;NamCls&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;NamObjVar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NamCls&lt;/span&gt;();\n        NamObjVar.PrnFnc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tst Txt&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;PlsPrnFnc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String SrgPsgVal)&lt;/span&gt;\n    {\n        System.out.println(SrgPsgVal);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;PrnFnc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String SrgPsgVal)&lt;/span&gt;\n    {\n        System.out.println(SrgPsgVal);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;hr&gt;\n|*| Static and non Static Class inside a Class :&lt;p&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NamCls&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;NamTicCls&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;NamTicVaj&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NamTicCls&lt;/span&gt;();\n        NamTicVaj.PrnFnc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tst Txt&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-type&quot;&gt;NamCls&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;NamObjVar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NamCls&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;NamNicCls&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;NamNicVar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; NamObjVar.&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NamNicCls&lt;/span&gt;();\n        NamNicVar.PrnFnc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tst Txt&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NamTicCls&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;PrnFnc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String SrgPsgVal)&lt;/span&gt;\n        {\n            System.out.println(SrgPsgVal);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NamNicCls&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;PrnFnc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String SrgPsgVal)&lt;/span&gt;\n        {\n            System.out.println(SrgPsgVal);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In the Java programming language, the keyword &lt;code&gt;static&lt;/code&gt; indicates that the particular member belongs to a type itself, rather than to an instance of that type.&lt;/p&gt;\n&lt;p&gt;This means that only one instance of that &lt;code&gt;static&lt;/code&gt; member is created which is shared across all instances of the class.&lt;/p&gt;\n&lt;p&gt;So if you want to use your &lt;code&gt;int count = 0;&lt;/code&gt; in &lt;code&gt;static void main()&lt;/code&gt; , &lt;code&gt;count&lt;/code&gt; variable must be declared as &lt;code&gt;static&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In this Program you want to use count, so declare count method as a static&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyProgram&lt;/span&gt;&amp;lt;br&amp;gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;\n    {\n        System.out.println(count);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Hear you can declare this method as a public private and protected also. If you are using this method you can create a secure application.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyProgram&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;\n    {\n        System.out.println(count);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;This is because you do not create instance of the model class, you have to create instances every time you use non-static methods or variables.&lt;/strong&gt;&lt;/p&gt;\n&lt;h2&gt;you can easily fix this see below images&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/GU2ic.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/GU2ic.png&quot; alt=&quot;Without Instance making&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;without making instance of class&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/xayeM.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/xayeM.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;My model class file&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/l5vGN.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/l5vGN.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;By just creating instance then use class non-static methods or variables easily error gone&lt;/strong&gt;&lt;/p&gt;\n    "]},"randomTags":[{"name":"android-layout","slug":"android-layout"},{"name":"data.table","slug":"data.table"},{"name":"delayedvariableexpansion","slug":"delayedvariableexpansion"},{"name":"long-integer","slug":"long-integer"},{"name":"sticky-footer","slug":"sticky-footer"},{"name":"collision-detection","slug":"collision-detection"},{"name":"pygame-surface","slug":"pygame-surface"},{"name":"dynamic","slug":"dynamic"},{"name":"linker","slug":"linker"},{"name":"cpu-architecture","slug":"cpu-architecture"},{"name":"razor","slug":"razor"},{"name":"operators","slug":"operators"},{"name":"download","slug":"download"},{"name":"syntax","slug":"syntax"},{"name":"pygame2","slug":"pygame2"},{"name":"eval","slug":"eval"},{"name":"session","slug":"session"},{"name":"replace","slug":"replace"},{"name":"iostream","slug":"iostream"},{"name":"recursive-query","slug":"recursive-query"}]},"__N_SSG":true}