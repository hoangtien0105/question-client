{"pageProps":{"data":{"count":1,"rows":[{"id":576,"title":"Use dynamic variable names in JavaScript","slug":"use-dynamic-variable-names-in-javascript-1657388468075","postType":"QUESTION","createdAt":"2022-07-09T17:41:08.000Z","updatedAt":"2022-07-09T17:41:08.000Z","tags":[{"id":2766,"name":"dynamic-variables","slug":"dynamic-variables","createdAt":"2022-07-09T17:41:08.000Z","updatedAt":"2022-07-09T17:41:08.000Z","Questions_Tags":{"questionId":576,"tagId":2766}}]}]},"slug":"dynamic-variables","page":1,"answers":{"576":["\n&lt;p&gt;Since ECMA-/Javascript is all about &lt;code&gt;Objects&lt;/code&gt; and &lt;code&gt;Contexts&lt;/code&gt; (which, are also somekind of Object), every variable is stored in a such called &lt;strong&gt;Variable-&lt;/strong&gt; (or in case of a Function, &lt;strong&gt;Activation Object&lt;/strong&gt;).&lt;/p&gt;\n\n&lt;p&gt;So if you create variables like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n    c = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the &lt;strong&gt;Global scope&lt;/strong&gt; (= NO function context), you implicitly write those variables into the &lt;strong&gt;Global object&lt;/strong&gt; (= &lt;code&gt;window&lt;/code&gt; in a browser).&lt;/p&gt;\n\n&lt;p&gt;Those can get accessed by using the &quot;dot&quot; or &quot;bracket&quot; notation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This only works for the global object in this particular instance, because the &lt;strong&gt;Variable Object&lt;/strong&gt; of the &lt;strong&gt;Global Object&lt;/strong&gt; is the &lt;code&gt;window&lt;/code&gt; object itself. Within the Context of a function, you don&apos;t have direct access to the &lt;strong&gt;Activation Object&lt;/strong&gt;. For instance:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// === undefined&lt;/span&gt;\n   &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(name);\n   name = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// === 1&lt;/span&gt;\n   &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(name);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;new&lt;/code&gt; creates a new instance of a self-defined object (context). Without &lt;code&gt;new&lt;/code&gt; the scope of the function would be also &lt;code&gt;global&lt;/code&gt; (=window). This example would alert &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; respectively. If we would replace &lt;code&gt;this.a = 1; this.b = 2&lt;/code&gt; with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both alert outputs would be undefined. In that scenario, the variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; would get stored in the Activation Object from &lt;code&gt;foobar&lt;/code&gt;, which we cannot access (of course we could access those directly by calling &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; is one option.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(name)); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Note that using the &lt;code&gt;eval()&lt;/code&gt; function is not recommended if you don&apos;t know what you are doing, since it brings multiple security issues. Use something else unless absolutely necessary. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot; rel=&quot;noreferrer&quot;&gt;the MDN page for eval&lt;/a&gt; for more info.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use the window object to get at it . &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;myVar&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;window&lt;/code&gt; has a reference to all global variables and global functions you are using. &lt;/p&gt;\n    ","\n&lt;p&gt;Just don&apos;t know what a bad answer gets so many votes. It&apos;s quite easy answer but you make it complex.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// If you want to get article_count&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// var article_count = 1000;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; type = &lt;span class=&quot;hljs-string&quot;&gt;&apos;article&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[type+&lt;span class=&quot;hljs-string&quot;&gt;&apos;_count&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// in a function we use &quot;this&quot;;&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(article_count);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is an example : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;+i] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello &quot;&lt;/span&gt; + i;\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(p0); &lt;span class=&quot;hljs-comment&quot;&gt;// hello 0&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(p1); &lt;span class=&quot;hljs-comment&quot;&gt;// hello 1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(p2); &lt;span class=&quot;hljs-comment&quot;&gt;// hello 2&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(p3); &lt;span class=&quot;hljs-comment&quot;&gt;// hello 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another example :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myVariable = &lt;span class=&quot;hljs-string&quot;&gt;&apos;coco&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[myVariable] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;riko&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(coco); &lt;span class=&quot;hljs-comment&quot;&gt;// display : riko&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, the value &quot;&lt;em&gt;coco&lt;/em&gt;&quot; of &lt;strong&gt;myVariable&lt;/strong&gt; becomes a variable &lt;strong&gt;coco&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Because all the variables in the global scope are properties of the Window object.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = &lt;span class=&quot;hljs-string&quot;&gt;&apos;varname&apos;&lt;/span&gt;;\nstr = a+&lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(str)\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(varname);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Try this...&lt;/p&gt;\n    ","\n&lt;p&gt;In Javascript you can use the fact that all properties are key value pairs. jAndy already mentioned this but I don&apos;t think his answer show how it can be exploited.&lt;/p&gt;\n\n&lt;p&gt;Usually you are not trying to create a variable to hold a variable name but are trying to generate variable names and then use them. PHP does it with &lt;code&gt;$$var&lt;/code&gt; notation but Javascript doesn&apos;t need to because property keys are interchangeable with array keys.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mine = {};\nmine[id] = &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(mine.&lt;span class=&quot;hljs-property&quot;&gt;abc&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;gives 123. Usually you want to construct the variable which is why there is the indirection so you can also do it the other way around.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mine = {};\nmine.&lt;span class=&quot;hljs-property&quot;&gt;abc&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(mine[&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot;bc&quot;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you don&apos;t want to use a global object like window or global (node), you can try something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {};\nobj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;whatever&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;There\\&apos;s no need to store even more stuff in a global object.&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;whatever&apos;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;2019 &lt;/p&gt;\n\n&lt;h3&gt;TL;DR&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;eval&lt;/code&gt; operator can run string expression in the context it called and return variables from that context; &lt;/li&gt;\n&lt;li&gt;&lt;code&gt;literal object&lt;/code&gt; theoretically can do that by write:&lt;code&gt;{[varName]}&lt;/code&gt;, but it blocked by definition. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So I come across this question and everyone here just play around without bringing a real solution. but @Axel Heider has a good approaching.&lt;/p&gt;\n\n&lt;p&gt;The solution is &lt;code&gt;eval&lt;/code&gt;.\nalmost most forgotten operator. ( think most one is &lt;code&gt;with()&lt;/code&gt; ) &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; operator can dynamically run expression in the context it called. and return the result of that expression. we can use that to dynamically return a  variable&apos;s value in function&apos;s context. &lt;/p&gt;\n\n&lt;p&gt;example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;exmaple1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(name)\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;example1&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// return 1&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;example2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;option&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, defaultValue = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(option){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;: name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;defaultValue&apos;&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt; (name);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;example2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return 1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;example2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return 2&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;example2&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// return 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note that I always write explicitly the expression &lt;code&gt;eval&lt;/code&gt; will run.\nTo avoid unnecessary surprises in the code. &lt;code&gt;eval&lt;/code&gt; is very strong&lt;/strong&gt;\nBut I&apos;m sure you know that already&lt;/p&gt;\n\n&lt;p&gt;BTW, if it was legal we could use &lt;code&gt;literal object&lt;/code&gt; to capture the variable name and value, but we cant combine computed property names and property value shorthand, sadly, is invalid&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;functopn &lt;span class=&quot;hljs-title function_&quot;&gt;example&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; varName &lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; var1 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, var2 =&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; capture = {[varName]}\n\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;example&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;var1&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//trow &apos;Uncaught SyntaxError: Unexpected token }`&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I needed to draw multiple FormData on the fly and object way worked well&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; forms = {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then in my loops whereever i needed to create a form data i used&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;forms[&lt;span class=&quot;hljs-string&quot;&gt;&quot;formdata&quot;&lt;/span&gt;+counter]=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;();\nforms[&lt;span class=&quot;hljs-string&quot;&gt;&quot;formdata&quot;&lt;/span&gt;+counter].&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(var_name, var_value);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is an alternative for those who need to export a dynamically named variable&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; {\n  [someVariable]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;some value&apos;&lt;/span&gt;,\n  [anotherVariable]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;another value&apos;&lt;/span&gt;,\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// then.... import from another file like this:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; vars &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;./some-file&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another alternative is to simply create an object whose keys are named dynamically&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; vars = { [someVariable]: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, [otherVariable]: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// consume it like this&lt;/span&gt;\nvars[someVariable];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;use Object is great too.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b=&lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;:a,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:b}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(temp[&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;],temp[&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Although this have an accepted answer I would like to add an observation: &lt;/p&gt;\n\n&lt;p&gt;In ES6 using &lt;code&gt;let&lt;/code&gt; &lt;strong&gt;doesn&apos;t work&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*this is NOT working*/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; t = &lt;span class=&quot;hljs-string&quot;&gt;&quot;skyBlue&quot;&lt;/span&gt;,\n    m = &lt;span class=&quot;hljs-string&quot;&gt;&quot;gold&quot;&lt;/span&gt;,\n    b = &lt;span class=&quot;hljs-string&quot;&gt;&quot;tomato&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; color = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(color);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;However using &lt;code&gt;var&lt;/code&gt; &lt;strong&gt;works&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*this IS working*/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t = &lt;span class=&quot;hljs-string&quot;&gt;&quot;skyBlue&quot;&lt;/span&gt;,\n    m = &lt;span class=&quot;hljs-string&quot;&gt;&quot;gold&quot;&lt;/span&gt;,\n    b = &lt;span class=&quot;hljs-string&quot;&gt;&quot;tomato&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; color = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(color);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;I hope this may be useful to some.&lt;/p&gt;\n    ","\n&lt;p&gt;This will do exactly what you done in php:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ccc = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[name] ); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;what they mean is no, you can&apos;t.\nthere is no way to get it done.\nso it was possible you could do something like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;){\n&lt;span class=&quot;hljs-comment&quot;&gt;// where obj is an object and const is a variable name&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;const&lt;/span&gt; () {}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myProperty&lt;/span&gt; = property_value;\n&lt;span class=&quot;hljs-comment&quot;&gt;// .. more prototype&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;const&lt;/span&gt;();\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;having a create function just like the one implemented in ECMAScript 5.&lt;/p&gt;\n    ","\n&lt;p&gt;eval() did not work in my tests. But adding new JavaScript code to the DOM tree is possible. So here is a function that adds a new variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createVariable&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;varName,varContent&lt;/span&gt;)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; scriptStr = &lt;span class=&quot;hljs-string&quot;&gt;&quot;var &quot;&lt;/span&gt;+varName+&lt;span class=&quot;hljs-string&quot;&gt;&quot;= \\&quot;&quot;&lt;/span&gt;+varContent+&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\&quot;&quot;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; node_scriptCode = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createTextNode&lt;/span&gt;( scriptStr )\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; node_script = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;script&quot;&lt;/span&gt;);\n  node_script.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;\n  node_script.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(node_scriptCode);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; node_head = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByTagName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;head&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n  node_head.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(node_script);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;createVariable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dynamicVar&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;some content&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(dynamicVar)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It is always better to use create a namespace and declare a variable in it instead of adding it to the global object. We can also create a function to get and set the value&lt;/p&gt;\n&lt;p&gt;See the below code snippet:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//creating a namespace in which all the variables will be defined.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myObjects={};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//function that will set the name property in the myObjects namespace&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;val&lt;/span&gt;){\n  myObjects.&lt;span class=&quot;hljs-property&quot;&gt;Name&lt;/span&gt;=val;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//function that will return the name property in the myObjects namespace&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myObjects.&lt;span class=&quot;hljs-property&quot;&gt;Name&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//now we can use it like:&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kevin&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = x;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(y)  &lt;span class=&quot;hljs-comment&quot;&gt;//&quot;kevin&quot;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; z = &lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(z); &lt;span class=&quot;hljs-comment&quot;&gt;//&quot;y&quot;&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(z)); &lt;span class=&quot;hljs-comment&quot;&gt;//&quot;kevin&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In this similar way, we can declare and use multiple variables. Although this will increase the line of code but the code will be more robust and less error-prone.&lt;/p&gt;\n    "]},"randomTags":[{"name":"css-selectors","slug":"css-selectors"},{"name":"public","slug":"public"},{"name":"ggplot2","slug":"ggplot2"},{"name":"string-matching","slug":"string-matching"},{"name":"hash","slug":"hash"},{"name":"database","slug":"database"},{"name":"most-vexing-parse","slug":"most-vexing-parse"},{"name":"threetenabp","slug":"threetenabp"},{"name":"command-line","slug":"command-line"},{"name":"utf-8","slug":"utf-8"},{"name":"comparator","slug":"comparator"},{"name":"double-quotes","slug":"double-quotes"},{"name":"pygame2","slug":"pygame2"},{"name":"exception","slug":"exception"},{"name":"stack","slug":"stack"},{"name":"autolayout","slug":"autolayout"},{"name":"razor","slug":"razor"},{"name":"python-datamodel","slug":"python-datamodel"},{"name":"while-loop","slug":"while-loop"},{"name":"join","slug":"join"}]},"__N_SSG":true}