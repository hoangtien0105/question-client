{"pageProps":{"data":{"count":1,"rows":[{"id":16,"title":"JavaScript closure inside loops â€“ simple practical example","slug":"javascript-closure-inside-loops-simple-practical-example-1657384278449","postType":"QUESTION","createdAt":"2022-07-09T16:31:18.000Z","updatedAt":"2022-07-09T16:31:18.000Z","tags":[{"id":55,"name":"closures","slug":"closures","createdAt":"2022-07-09T16:31:19.000Z","updatedAt":"2022-07-09T16:31:19.000Z","Questions_Tags":{"questionId":16,"tagId":55}}]}]},"slug":"closures","page":"1","answers":{"16":["\n&lt;p&gt;Well, the problem is that the variable &lt;code&gt;i&lt;/code&gt;, within each of your anonymous functions, is bound to the same variable outside of the function.&lt;/p&gt;\n&lt;h1&gt;ES6 solution: &lt;code&gt;let&lt;/code&gt;&lt;/h1&gt;\n&lt;p&gt;ECMAScript 6 (ES6) introduces new &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keywords that are scoped differently than &lt;code&gt;var&lt;/code&gt;-based variables. For example, in a loop with a &lt;code&gt;let&lt;/code&gt;-based index, each iteration through the loop will have a new variable &lt;code&gt;i&lt;/code&gt; with loop scope, so your code would work as you expect. There are many resources, but I&apos;d recommend &lt;a href=&quot;http://www.2ality.com/2015/02/es6-scoping.html&quot; rel=&quot;noreferrer&quot;&gt;2ality&apos;s block-scoping post&lt;/a&gt; as a great source of information.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n  };\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Beware, though, that IE9-IE11 and Edge prior to Edge 14 support &lt;code&gt;let&lt;/code&gt; but get the above wrong (they don&apos;t create a new &lt;code&gt;i&lt;/code&gt; each time, so all the functions above would log 3 like they would if we used &lt;code&gt;var&lt;/code&gt;). Edge 14 finally gets it right.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;ES5.1 solution: forEach&lt;/h1&gt;\n&lt;p&gt;With the relatively widespread availability of the &lt;code&gt;Array.prototype.forEach&lt;/code&gt; function (in 2015), it&apos;s worth noting that in those situations involving iteration primarily over an array of values, &lt;code&gt;.forEach()&lt;/code&gt; provides a clean, natural way to get a distinct closure for every iteration. That is, assuming you&apos;ve got some sort of array containing values (DOM references, objects, whatever), and the problem arises of setting up callbacks specific to each element, you can do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someArray = [ &lt;span class=&quot;hljs-comment&quot;&gt;/* whatever */&lt;/span&gt; ];\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\nsomeArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arrayElement&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ... code code code for this one element&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;someAsynchronousFunction&lt;/span&gt;(arrayElement, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    arrayElement.&lt;span class=&quot;hljs-title function_&quot;&gt;doSomething&lt;/span&gt;();\n  });\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The idea is that each invocation of the callback function used with the &lt;code&gt;.forEach&lt;/code&gt; loop will be its own closure. The parameter passed in to that handler is the array element specific to that particular step of the iteration. If it&apos;s used in an asynchronous callback, it won&apos;t collide with any of the other callbacks established at other steps of the iteration.&lt;/p&gt;\n&lt;p&gt;If you happen to be working in jQuery, the &lt;code&gt;$.each()&lt;/code&gt; function gives you a similar capability.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;Classic solution: Closures&lt;/h1&gt;\n&lt;p&gt;What you want to do is bind the variable within each function to a separate, unchanging value outside of the function:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createfunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n  };\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  funcs[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;createfunc&lt;/span&gt;(i);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n  funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Since there is no block scope in JavaScript - only function scope - by wrapping the function creation in a new function, you ensure that the value of &quot;i&quot; remains as you intended.&lt;/p&gt;\n    ","\n&lt;p&gt;Try:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n    \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    funcs[i] = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;index&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + index);\n        };\n    }(i));\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt; (2014):&lt;/p&gt;\n\n&lt;p&gt;Personally I think @Aust&apos;s &lt;a href=&quot;https://stackoverflow.com/a/19323214/918959&quot;&gt;more recent answer about using &lt;code&gt;.bind&lt;/code&gt;&lt;/a&gt; is the best way to do this kind of thing now. There&apos;s also lo-dash/underscore&apos;s &lt;code&gt;_.partial&lt;/code&gt; when you don&apos;t need or want to mess with &lt;code&gt;bind&lt;/code&gt;&apos;s &lt;code&gt;thisArg&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Another way that hasn&apos;t been mentioned yet is the use of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Function.prototype.bind&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;My value: &apos;&lt;/span&gt; + x);\n  }.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, i);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n  funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;As pointed out by @squint and @mekdev, you get better performance by creating the function outside the loop first and then binding the results within the loop.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;My value: &apos;&lt;/span&gt; + x);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  funcs[i] = log.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, i);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n  funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Using an &lt;a href=&quot;http://en.wikipedia.org/wiki/Immediately-invoked_function_expression&quot; rel=&quot;noreferrer&quot;&gt;Immediately-Invoked Function Expression&lt;/a&gt;, the simplest and most readable way to enclose an index variable:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;index&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;iterator: &apos;&lt;/span&gt; + index);\n        &lt;span class=&quot;hljs-comment&quot;&gt;//now you can also loop an ajax call here &lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//without losing track of the iterator value:   $.ajax({});&lt;/span&gt;\n    \n    })(i);\n\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;This sends the iterator &lt;code&gt;i&lt;/code&gt; into the anonymous function of which we define as &lt;code&gt;index&lt;/code&gt;.  This creates a closure, where the variable &lt;code&gt;i&lt;/code&gt; gets saved for later use in any asynchronous functionality within the IIFE.&lt;/p&gt;\n    ","\n&lt;p&gt;Bit late to the party, but I was exploring this issue today and noticed that many of the answers don&apos;t completely address how Javascript treats scopes, which is essentially what this boils down to.&lt;/p&gt;\n&lt;p&gt;So as many others mentioned, the problem is that the inner function is referencing the same &lt;code&gt;i&lt;/code&gt; variable. So why don&apos;t we just create a new local variable each iteration, and have the inner function reference that instead?&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//overwrite console.log() so you can see the console output&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;p&amp;gt;&apos;&lt;/span&gt; + msg + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/p&amp;gt;&apos;&lt;/span&gt;;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ilocal = i; &lt;span class=&quot;hljs-comment&quot;&gt;//create a new local variable&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + ilocal); &lt;span class=&quot;hljs-comment&quot;&gt;//each should reference its own local variable&lt;/span&gt;\n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Just like before, where each inner function outputted the last value assigned to &lt;code&gt;i&lt;/code&gt;, now each inner function just outputs the last value assigned to &lt;code&gt;ilocal&lt;/code&gt;. But shouldn&apos;t each iteration have it&apos;s own &lt;code&gt;ilocal&lt;/code&gt;?&lt;/p&gt;\n&lt;p&gt;Turns out, that&apos;s the issue. Each iteration is sharing the same scope, so every iteration after the first is just overwriting &lt;code&gt;ilocal&lt;/code&gt;. From &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block#No_block_scope&quot; rel=&quot;noreferrer&quot;&gt;MDN&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Important: JavaScript does not have block scope. Variables introduced with a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. Although &quot;standalone&quot; blocks are valid syntax, you do not want to use standalone blocks in JavaScript, because they don&apos;t do what you think they do, if you think they do anything like such blocks in C or Java.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Reiterated for emphasis:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;h2&gt;JavaScript does not have block scope. Variables introduced with a block are scoped to the containing function or script&lt;/h2&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;We can see this by checking &lt;code&gt;ilocal&lt;/code&gt; before we declare it in each iteration:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//overwrite console.log() so you can see the console output&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;p&amp;gt;&apos;&lt;/span&gt; + msg + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/p&amp;gt;&apos;&lt;/span&gt;;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(ilocal);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ilocal = i;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;This is exactly why this bug is so tricky. Even though you are redeclaring a variable, Javascript won&apos;t throw an error, and JSLint won&apos;t even throw a warning. This is also why the best way to solve this is to take advantage of closures, which is essentially the idea that in Javascript, inner functions have access to outer variables because inner scopes &quot;enclose&quot; outer scopes.&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/60fH9.png&quot; alt=&quot;Closures&quot;&gt;&lt;/p&gt;\n&lt;p&gt;This also means that inner functions &quot;hold onto&quot; outer variables and keep them alive, even if the outer function returns. To utilize this, we create and call a wrapper function purely to make a new scope, declare &lt;code&gt;ilocal&lt;/code&gt; in the new scope, and return an inner function that uses &lt;code&gt;ilocal&lt;/code&gt; (more explanation below):&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//overwrite console.log() so you can see the console output&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;p&amp;gt;&apos;&lt;/span&gt; + msg + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/p&amp;gt;&apos;&lt;/span&gt;;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    funcs[i] = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;//create a new scope using a wrapper function&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ilocal = i; &lt;span class=&quot;hljs-comment&quot;&gt;//capture i into a local var&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;//return the inner function&lt;/span&gt;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + ilocal);\n        };\n    })(); &lt;span class=&quot;hljs-comment&quot;&gt;//remember to run the wrapper function&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Creating the inner function inside a wrapper function gives the inner function a private environment that only it can access, a &quot;closure&quot;. Thus, every time we call the wrapper function we create a new inner function with it&apos;s own separate environment, ensuring that the &lt;code&gt;ilocal&lt;/code&gt; variables don&apos;t collide and overwrite each other. A few minor optimizations gives the final answer that many other SO users gave:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//overwrite console.log() so you can see the console output&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;p&amp;gt;&apos;&lt;/span&gt; + msg + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/p&amp;gt;&apos;&lt;/span&gt;;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    funcs[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(i);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;//creates a separate environment for the inner function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ilocal&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;//return the inner function&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + ilocal);\n    };\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;With ES6 now mainstream, we can now use the new &lt;code&gt;let&lt;/code&gt; keyword to create block-scoped variables:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//overwrite console.log() so you can see the console output&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; += &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;p&amp;gt;&apos;&lt;/span&gt; + msg + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/p&amp;gt;&apos;&lt;/span&gt;;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) { &lt;span class=&quot;hljs-comment&quot;&gt;// use &quot;let&quot; to declare &quot;i&quot;&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;//each should reference its own local variable&lt;/span&gt;\n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) { &lt;span class=&quot;hljs-comment&quot;&gt;// we can use &quot;var&quot; here without issue&lt;/span&gt;\n    funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Look how easy it is now! For more information see &lt;a href=&quot;https://stackoverflow.com/a/16661498/1852456&quot;&gt;this answer&lt;/a&gt;, which my info is based off of.&lt;/p&gt;\n    ","\n&lt;p&gt;With ES6 now widely supported, the best answer to this question has changed.  ES6 provides the &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keywords for this exact circumstance.  Instead of messing around with closures, we can just use &lt;code&gt;let&lt;/code&gt; to set a loop scope variable like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {          \n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            \n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); \n    };\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif15&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;val&lt;/code&gt; will then point to an object that is specific to that particular turn of the loop, and will return the correct value without the additional closure notation.  This obviously significantly simplifies this problem.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;const&lt;/code&gt; is similar to &lt;code&gt;let&lt;/code&gt; with the additional restriction that the variable name can&apos;t be rebound to a new reference after initial assignment.&lt;/p&gt;\n\n&lt;p&gt;Browser support is now here for those targeting the latest versions of browsers. &lt;code&gt;const&lt;/code&gt;/&lt;code&gt;let&lt;/code&gt; are currently supported in the latest Firefox, Safari, Edge and Chrome. It also is supported in Node, and you can use it anywhere by taking advantage of build tools like Babel.  You can see a working example here: &lt;a href=&quot;http://jsfiddle.net/ben336/rbU4t/2/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/ben336/rbU4t/2/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Docs here:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const&quot; rel=&quot;noreferrer&quot;&gt;const&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let&quot; rel=&quot;noreferrer&quot;&gt;let&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Beware, though, that IE9-IE11 and Edge prior to Edge 14 support &lt;code&gt;let&lt;/code&gt; but get the above wrong (they don&apos;t create a new &lt;code&gt;i&lt;/code&gt; each time, so all the functions above would log 3 like they would if we used &lt;code&gt;var&lt;/code&gt;). Edge 14 finally gets it right.&lt;/p&gt;\n    ","\n&lt;p&gt;Another way of saying it is that the &lt;code&gt;i&lt;/code&gt; in your function is bound at the time of executing the function, not the time of creating the function.&lt;/p&gt;\n\n&lt;p&gt;When you create the closure, &lt;code&gt;i&lt;/code&gt; is a reference to the variable defined in the outside scope, not a copy of it as it was when you created the closure. It will be evaluated at the time of execution.&lt;/p&gt;\n\n&lt;p&gt;Most of the other answers provide ways to work around by creating another variable that won&apos;t change the value for you.&lt;/p&gt;\n\n&lt;p&gt;Just thought I&apos;d add an explanation for clarity. For a solution, personally, I&apos;d go with Harto&apos;s since it is the most self-explanatory way of doing it from the answers here. Any of the code posted will work, but I&apos;d opt for a closure factory over having to write a pile of comments to explain why I&apos;m declaring a new variable(Freddy and 1800&apos;s) or have weird embedded closure syntax(apphacker).&lt;/p&gt;\n    ","\n&lt;p&gt;What you need to understand is the scope of the variables in javascript is based on the function. This is an important difference than say c# where you have block scope, and just copying the variable to one inside the for will work.&lt;/p&gt;\n\n&lt;p&gt;Wrapping it in a function that evaluates returning the function like apphacker&apos;s answer will do the trick, as the variable now has the function scope.&lt;/p&gt;\n\n&lt;p&gt;There is also a let keyword instead of var, that would allow using the block scope rule. In that case defining a variable inside the for would do the trick. That said, the let keyword isn&apos;t a practical solution because of compatibility.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = {};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; index = i; &lt;span class=&quot;hljs-comment&quot;&gt;//add this&lt;/span&gt;\n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + index); &lt;span class=&quot;hljs-comment&quot;&gt;//change to the copy&lt;/span&gt;\n  };\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n  funcs[j]();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif16&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s another variation on the technique, similar to Bjorn&apos;s (apphacker), which lets you assign the variable value inside the function rather than passing it as a parameter, which might be clearer sometimes:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    funcs[i] = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index = i;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + index);\n        }\n    })();\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif17&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Note that whatever technique you use, the &lt;code&gt;index&lt;/code&gt; variable becomes a sort of static variable, bound to the returned copy of the inner function. I.e., changes to its value are preserved between calls. It can be very handy.&lt;/p&gt;\n    ","\n&lt;p&gt;This describes the common mistake with using closures in JavaScript.&lt;/p&gt;\n\n&lt;h2&gt;A function defines a new environment&lt;/h2&gt;\n\n&lt;p&gt;Consider:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeCounter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;counter&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;};\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;inc&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){obj.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt; ++;},\n    &lt;span class=&quot;hljs-attr&quot;&gt;get&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt;;}\n  };\n}\n\ncounter1 = &lt;span class=&quot;hljs-title function_&quot;&gt;makeCounter&lt;/span&gt;();\ncounter2 = &lt;span class=&quot;hljs-title function_&quot;&gt;makeCounter&lt;/span&gt;();\n\ncounter1.&lt;span class=&quot;hljs-title function_&quot;&gt;inc&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(counter1.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(counter2.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For each time &lt;code&gt;makeCounter&lt;/code&gt; is invoked, &lt;code&gt;{counter: 0}&lt;/code&gt; results in a new object being created. Also, a new copy of &lt;code&gt;obj&lt;/code&gt; \nis created as well to reference the new object. Thus, &lt;code&gt;counter1&lt;/code&gt; and &lt;code&gt;counter2&lt;/code&gt; are independent of each other.&lt;/p&gt;\n\n&lt;h2&gt;Closures in loops&lt;/h2&gt;\n\n&lt;p&gt;Using a closure in a loop is tricky.&lt;/p&gt;\n\n&lt;p&gt;Consider: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; counters = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeCounters&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;num&lt;/span&gt;)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; num; i++)\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;counter&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;};\n    counters[i] = {\n      &lt;span class=&quot;hljs-attr&quot;&gt;inc&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){obj.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt;++;},\n      &lt;span class=&quot;hljs-attr&quot;&gt;get&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt;;}\n    }; \n  }\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;makeCounters&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n\ncounters[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;inc&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(counters[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(counters[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice that &lt;code&gt;counters[0]&lt;/code&gt; and &lt;code&gt;counters[1]&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; independent. In fact, they operate on the same &lt;code&gt;obj&lt;/code&gt;!&lt;/p&gt;\n\n&lt;p&gt;This is because there is only one copy of &lt;code&gt;obj&lt;/code&gt; shared across all iterations of the loop, perhaps for performance reasons.\nEven though &lt;code&gt;{counter: 0}&lt;/code&gt; creates a new object in each iteration, the same copy of &lt;code&gt;obj&lt;/code&gt; will just get updated with a\nreference to the newest object.&lt;/p&gt;\n\n&lt;p&gt;Solution is to use another helper function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeHelper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;inc&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){obj.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt;++;},\n    &lt;span class=&quot;hljs-attr&quot;&gt;get&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt;;}\n  }; \n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeCounters&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;num&lt;/span&gt;)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; num; i++)\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;counter&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;};\n    counters[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;makeHelper&lt;/span&gt;(obj);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works because local variables in the function scope directly, as well as function argument variables, are allocated \nnew copies upon entry.&lt;/p&gt;\n    ","\n&lt;p&gt;The most simple solution would be,&lt;/p&gt;\n\n&lt;p&gt;Instead of using:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i =&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++){\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(i);\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j =&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++){\n    funcs[j]();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which alerts &quot;2&quot;, for 3 times. This is because anonymous functions created in for loop, shares same closure, and in that closure, the value of &lt;code&gt;i&lt;/code&gt; is the same. Use this to prevent shared closure:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; new_i =&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; new_i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; new_i++){\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;){\n        funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n            &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(i);\n        }\n    })(new_i);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j =&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++){\n    funcs[j]();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The idea behind this is, encapsulating the entire body of the for loop with an &lt;a href=&quot;https://en.wikipedia.org/wiki/Immediately-invoked_function_expression&quot; rel=&quot;noreferrer&quot;&gt;IIFE&lt;/a&gt; (Immediately-Invoked Function Expression) and passing &lt;code&gt;new_i&lt;/code&gt; as a parameter and capturing it as &lt;code&gt;i&lt;/code&gt;. Since the anonymous function is executed immediately, the &lt;code&gt;i&lt;/code&gt; value is different for each function defined inside the anonymous function.&lt;/p&gt;\n\n&lt;p&gt;This solution seems to fit any such problem since it will require minimal changes to the original code suffering from this issue. In fact, this is by design, it should not be an issue at all!&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a simple solution that uses &lt;code&gt;forEach&lt;/code&gt; (works back to IE9):&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {          &lt;span class=&quot;hljs-comment&quot;&gt;// let&apos;s create 3 functions&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            &lt;span class=&quot;hljs-comment&quot;&gt;// and store them in funcs&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;// each should log its value.&lt;/span&gt;\n    };\n})\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();                        &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif18&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Prints:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;My&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;My&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;My&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;h2&gt;try this shorter one&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;no array&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;no extra for loop&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;createfunc&lt;/span&gt;(i)();\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createfunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);};\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/7P6EN/&quot;&gt;http://jsfiddle.net/7P6EN/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The main issue with the code shown by the OP is that &lt;code&gt;i&lt;/code&gt; is never read until the second loop. To demonstrate, imagine seeing an error inside of the code&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            &lt;span class=&quot;hljs-comment&quot;&gt;// and store them in funcs&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;// each should log its value.&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The error actually does not occur until &lt;code&gt;funcs[someIndex]&lt;/code&gt; is executed &lt;code&gt;()&lt;/code&gt;. Using this same logic, it should be apparent that the value of &lt;code&gt;i&lt;/code&gt; is also not collected until this point either. Once the original loop finishes, &lt;code&gt;i++&lt;/code&gt; brings &lt;code&gt;i&lt;/code&gt; to the value of &lt;code&gt;3&lt;/code&gt; which results in the condition &lt;code&gt;i &amp;lt; 3&lt;/code&gt; failing and the loop ending. At this point, &lt;code&gt;i&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt; and so when &lt;code&gt;funcs[someIndex]()&lt;/code&gt; is used, and &lt;code&gt;i&lt;/code&gt; is evaluated, it is 3 - every time.&lt;/p&gt;\n\n&lt;p&gt;To get past this, you must evaluate &lt;code&gt;i&lt;/code&gt; as it is encountered. Note that this has already happened in the form of &lt;code&gt;funcs[i]&lt;/code&gt; (where there are 3 unique indexes). There are several ways to capture this value. One is to pass it in as a parameter to a function which is shown in several ways already here. &lt;/p&gt;\n\n&lt;p&gt;Another option is to construct a function object which will be able to close over the variable. That can be accomplished thusly&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;http://jsfiddle.net/QcUjH/&quot;&gt;&lt;code&gt;jsFiddle Demo&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {   \n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; closedVariable = i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + closedVariable); \n    };\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;JavaScript functions &quot;close over&quot; the scope they have access to upon declaration, and retain access to that scope even as variables in that scope change.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i)\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; k &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; k += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n  funcs[k]()\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif19&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Each function in the array above closes over the global scope (global, simply because that happens to be the scope they&apos;re declared in).&lt;/p&gt;\n\n&lt;p&gt;Later those functions are invoked logging the most current value of &lt;code&gt;i&lt;/code&gt; in the global scope. That&apos;s the magic, and frustration, of closure.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&quot;JavaScript Functions close over the scope they are declared in, and retain access to that scope even as variable values inside of that scope change.&quot;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Using &lt;code&gt;let&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt; solves this by creating a new scope each time the &lt;code&gt;for&lt;/code&gt; loop runs, creating a separated scope for each function to close over. Various other techniques do the same thing with extra functions.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i)\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; k &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; k += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n  funcs[k]()\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif20&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;(&lt;code&gt;let&lt;/code&gt; makes variables block scoped. Blocks are denoted by curly braces, but in the case of the for loop the initialization variable, &lt;code&gt;i&lt;/code&gt; in our case, is considered to be declared in the braces.)&lt;/p&gt;\n    ","\n&lt;p&gt;After reading through various solutions, I&apos;d like to add that the reason those solutions work is to rely on the concept of &lt;strong&gt;scope chain&lt;/strong&gt;. It&apos;s the way JavaScript resolve a variable during execution.  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Each function definition forms a scope consisting of all the local \nvariables declared by &lt;code&gt;var&lt;/code&gt; and its &lt;code&gt;arguments&lt;/code&gt;.   &lt;/li&gt;\n&lt;li&gt;If we have inner function defined inside another (outer) function, this \nforms a chain, and will be used during execution   &lt;/li&gt;\n&lt;li&gt;When a function gets executed, the runtime evaluates variables by searching the &lt;strong&gt;scope chain&lt;/strong&gt;. If a variable can be found in a certain point of the chain it will stop searching and use it, otherwise it continues until the global scope reached which belongs to &lt;code&gt;window&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In the initial code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {         \n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {        &lt;span class=&quot;hljs-comment&quot;&gt;// function inner&apos;s scope contains nothing&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);    \n  };\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt;)                  &lt;span class=&quot;hljs-comment&quot;&gt;// test value &apos;i&apos;, print 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When &lt;code&gt;funcs&lt;/code&gt; gets executed, the scope chain will be &lt;code&gt;function inner -&amp;gt; global&lt;/code&gt;. Since the variable &lt;code&gt;i&lt;/code&gt; cannot be found in &lt;code&gt;function inner&lt;/code&gt; (neither declared using &lt;code&gt;var&lt;/code&gt; nor passed as arguments), it continues to search, until the value of &lt;code&gt;i&lt;/code&gt; is eventually found in the global scope which is &lt;code&gt;window.i&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;By wrapping it in an outer function either explicitly define a helper function like &lt;a href=&quot;https://stackoverflow.com/a/750506&quot;&gt;harto&lt;/a&gt; did or use an anonymous function like &lt;a href=&quot;https://stackoverflow.com/a/750495&quot;&gt;Bjorn&lt;/a&gt; did:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;funcs = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outer&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {              &lt;span class=&quot;hljs-comment&quot;&gt;// function outer&apos;s scope contains &apos;i&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {      &lt;span class=&quot;hljs-comment&quot;&gt;// function inner, closure created&lt;/span&gt;\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n  };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  funcs[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;outer&lt;/span&gt;(i);\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt;)          &lt;span class=&quot;hljs-comment&quot;&gt;// print 3 still&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When &lt;code&gt;funcs&lt;/code&gt; gets executed, now the scope chain will be &lt;code&gt;function inner -&amp;gt; function outer&lt;/code&gt;. This time &lt;code&gt;i&lt;/code&gt; can be found in the outer function&apos;s scope which is executed 3 times in the for loop, each time has value &lt;code&gt;i&lt;/code&gt; bound correctly. It won&apos;t use the value of &lt;code&gt;window.i&lt;/code&gt; when inner executed.&lt;/p&gt;\n\n&lt;p&gt;More detail can be found &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;br&gt;\nIt includes the common mistake in creating closure in the loop as what we have here, as well as why we need closure and the performance consideration.&lt;/p&gt;\n    ","\n&lt;p&gt;With new features of ES6 block level scoping is managed:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {          &lt;span class=&quot;hljs-comment&quot;&gt;// let&apos;s create 3 functions&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            &lt;span class=&quot;hljs-comment&quot;&gt;// and store them in funcs&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;// each should log its value.&lt;/span&gt;\n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();                        &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The code in OP&apos;s question is replaced with &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; instead of &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m surprised no one yet has suggested using the &lt;code&gt;forEach&lt;/code&gt; function to better avoid (re)using local variables. In fact, I&apos;m not using &lt;code&gt;for(var i ...)&lt;/code&gt; at all anymore for this reason.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;){ &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;My value:&apos;&lt;/span&gt;, i); });\n&lt;span class=&quot;hljs-comment&quot;&gt;// My value: 0&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// My value: 2&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// My value: 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;// edited to use &lt;code&gt;forEach&lt;/code&gt; instead of map.&lt;/p&gt;\n    ","\n&lt;p&gt;This question really shows the history of JavaScript! Now we can avoid block scoping with arrow functions and handle loops directly from DOM nodes using Object methods.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; funcs = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i));\nfuncs.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;())&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif21&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; buttons = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByTagName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(buttons)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; buttons[i].&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i)));&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif22&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;We will check , what actually happens when you declare &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;\none by one.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;&lt;strong&gt;Case1&lt;/strong&gt; : &lt;strong&gt;using &lt;code&gt;var&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n     funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;debugger&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n     };\n   }\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(funcs);\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now open your &lt;strong&gt;chrome console window&lt;/strong&gt; by pressing &lt;strong&gt;F12&lt;/strong&gt; and refresh the page.\nExpend every 3 functions inside the array.You will see an property called &lt;code&gt;[[Scopes]]&lt;/code&gt;.Expand that one. You will see one\narray object called &lt;code&gt;&quot;Global&quot;&lt;/code&gt;,expand that one. You will find a property &lt;code&gt;&apos;i&apos;&lt;/code&gt; declared into the object which having value 3.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/f6I2J.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/f6I2J.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/kF3Yv.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/kF3Yv.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;When you declare a variable using &lt;code&gt;&apos;var&apos;&lt;/code&gt; outside a function ,it becomes global variable(you can check by typing &lt;code&gt;i&lt;/code&gt; or\n&lt;code&gt;window.i&lt;/code&gt; in console window.It will return 3).&lt;/li&gt;\n&lt;li&gt;The anonymous function you declared will not call and check the value inside the function unless you invoke the\nfunctions.&lt;/li&gt;\n&lt;li&gt;When you invoke the function , &lt;code&gt;console.log(&quot;My value: &quot; + i)&lt;/code&gt; takes the value from its &lt;code&gt;Global&lt;/code&gt; object and display the\nresult.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;&lt;strong&gt;CASE2 : using let&lt;/strong&gt;&lt;/h2&gt;\n&lt;p&gt;Now replace the &lt;code&gt;&apos;var&apos;&lt;/code&gt; with &lt;code&gt;&apos;let&apos;&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n        funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n           &lt;span class=&quot;hljs-keyword&quot;&gt;debugger&lt;/span&gt;;\n           &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n        };\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(funcs);\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Do the same thing, Go to the scopes . Now you will see two objects &lt;code&gt;&quot;Block&quot;&lt;/code&gt; and &lt;code&gt;&quot;Global&quot;&lt;/code&gt;. Now expand &lt;code&gt;Block&lt;/code&gt; object , you\nwill see &apos;i&apos; is defined there , and the strange thing is that , for every functions , the value if &lt;code&gt;i&lt;/code&gt; is different (0 , 1, 2).&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/HGqXU.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/HGqXU.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;When you declare variable using &lt;code&gt;&apos;let&apos;&lt;/code&gt; even outside the function but inside the loop , this variable will not be a Global\nvariable , it will become a &lt;code&gt;Block&lt;/code&gt; level variable which is only available for the same function only.That is the reason , we\nare getting value of &lt;code&gt;i&lt;/code&gt; different for each function when we invoke the functions.&lt;/p&gt;\n&lt;p&gt;For more detail about how closer works , please go through the awesome video tutorial &lt;a href=&quot;https://youtu.be/71AtaJpJHw0&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://youtu.be/71AtaJpJHw0&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The reason your original example did not work is that all the closures you created in the loop referenced the same frame. In effect, having 3 methods on one object with only a single &lt;code&gt;i&lt;/code&gt; variable. They all printed out the same value.&lt;/p&gt;\n    ","\n&lt;p&gt;First of all, understand what&apos;s wrong with this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {          &lt;span class=&quot;hljs-comment&quot;&gt;// let&apos;s create 3 functions&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            &lt;span class=&quot;hljs-comment&quot;&gt;// and store them in funcs&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;// each should log its value.&lt;/span&gt;\n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();                        &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here when the &lt;code&gt;funcs[]&lt;/code&gt; array is being initialized, &lt;code&gt;i&lt;/code&gt; is being incremented, the &lt;code&gt;funcs&lt;/code&gt; array is initialized and the size of &lt;code&gt;func&lt;/code&gt; array becomes 3,  so &lt;code&gt;i = 3,&lt;/code&gt;. \nNow when the &lt;code&gt;funcs[j]()&lt;/code&gt; is called, it is again using the variable &lt;code&gt;i&lt;/code&gt;, which has already been incremented to 3.&lt;/p&gt;\n\n&lt;p&gt;Now to solve this, we have many options. Below are two of them:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;We can initialize &lt;code&gt;i&lt;/code&gt; with &lt;code&gt;let&lt;/code&gt; or initialize a new variable &lt;code&gt;index&lt;/code&gt; with &lt;code&gt;let&lt;/code&gt; and make it equal to &lt;code&gt;i&lt;/code&gt;. So when the call is being made, &lt;code&gt;index&lt;/code&gt; will be used and its scope will end after initialization. And for calling, &lt;code&gt;index&lt;/code&gt; will be initialized again:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {          \n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; index = i;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            \n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + index); \n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();                        \n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Other Option can be to introduce a &lt;code&gt;tempFunc&lt;/code&gt; which returns the actual function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tempFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {  \n    funcs[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;tempFunc&lt;/span&gt;(i);                                     \n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();                        \n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot; rel=&quot;noreferrer&quot;&gt;closure&lt;/a&gt; structure, this would reduce your extra for loop. You can do it in a single for loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {     \n  (funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {         \n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); \n  })(i);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Till ES5, This problem can only be solved using &lt;strong&gt;closure&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;But now in ES6, we have block level scope variables. Changing &lt;strong&gt;var&lt;/strong&gt; to &lt;strong&gt;let&lt;/strong&gt; in first &lt;strong&gt;for loop&lt;/strong&gt; will solve the problem.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {      &lt;span class=&quot;hljs-comment&quot;&gt;// let&apos;s create 3 functions&lt;/span&gt;\n  funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {          &lt;span class=&quot;hljs-comment&quot;&gt;// and store them in funcs&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;// each should log its value.&lt;/span&gt;\n  };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n  funcs[j]();                      &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif23&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re having this sort of problem with a &lt;code&gt;while&lt;/code&gt; loop, rather than a &lt;code&gt;for&lt;/code&gt; loop, for example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i);\n  }, i * &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n  i++;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif24&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The technique to close over the current value is a bit different. Declare a block-scoped variable with &lt;code&gt;const&lt;/code&gt; inside the &lt;code&gt;while&lt;/code&gt; block, and assign the current &lt;code&gt;i&lt;/code&gt; to it. Then, wherever the variable is being used asynchronously, replace &lt;code&gt;i&lt;/code&gt; with the new block-scoped variable:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; thisIterationI = i;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(thisIterationI);\n  }, i * &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n  i++;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif25&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;For older browsers that don&apos;t support block-scoped variables, you can use an IIFE called with &lt;code&gt;i&lt;/code&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n  (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;innerI&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(innerI);\n    }, innerI * &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n  })(i);\n  i++;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif26&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;If the asynchronous action to be invoked happens to be &lt;code&gt;setTimeout&lt;/code&gt; like the above, you can also call &lt;code&gt;setTimeout&lt;/code&gt; with a &lt;em&gt;third&lt;/em&gt; parameter to indicate the argument to call the passed function with:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(\n    &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;thisIterationI&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// Callback&lt;/span&gt;\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(thisIterationI);\n    },\n    i * &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// Delay&lt;/span&gt;\n    i &lt;span class=&quot;hljs-comment&quot;&gt;// Gets passed to the callback; becomes thisIterationI&lt;/span&gt;\n  );\n  i++;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif27&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You could use a declarative module for lists of data such as &lt;a href=&quot;https://github.com/runefs/query-js&quot; rel=&quot;nofollow&quot;&gt;query-js&lt;/a&gt;(*). In these situations I personally find a declarative approach less surprising&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = &lt;span class=&quot;hljs-title class_&quot;&gt;Query&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;){\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n    };\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You could then use your second loop and get the expected result or you could do &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;funcs.&lt;span class=&quot;hljs-title function_&quot;&gt;iterate&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;){ &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(); });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(*) I&apos;m the author of query-js and therefor biased towards using it, so don&apos;t take my words as a recommendation for said library only for the declarative approach :)&lt;/p&gt;\n    ","\n&lt;p&gt;I prefer to use &lt;code&gt;forEach&lt;/code&gt; function, which has its own closure with creating a pseudo range:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;_, i&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// creating a range&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {            \n        &lt;span class=&quot;hljs-comment&quot;&gt;// now i is safely incapsulated &lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n    };\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j](); &lt;span class=&quot;hljs-comment&quot;&gt;// 0, 1, 2&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That looks uglier than ranges in other languages, but IMHO less monstrous than other solutions.&lt;/p&gt;\n    ","\n&lt;p&gt;And yet another solution: instead of creating another loop, just bind the &lt;code&gt;this&lt;/code&gt; to the return function.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;My value: &apos;&lt;/span&gt; + i); &lt;span class=&quot;hljs-comment&quot;&gt;//log value of i.&lt;/span&gt;\n  }.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++) {  &lt;span class=&quot;hljs-comment&quot;&gt;//5 functions&lt;/span&gt;\n  funcs[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;createFunc&lt;/span&gt;(i);     &lt;span class=&quot;hljs-comment&quot;&gt;// call createFunc() i=5 times&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif28&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;By binding &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;, solves the problem as well.&lt;/p&gt;\n    ","\n&lt;p&gt;Many solutions seem correct but they don&apos;t mention it&apos;s called &lt;a href=&quot;https://www.sitepoint.com/currying-in-functional-javascript/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Currying&lt;/code&gt;&lt;/a&gt; which is a functional programming design pattern for situations like here. 3-10 times faster than bind depending on the browser.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {      &lt;span class=&quot;hljs-comment&quot;&gt;// let&apos;s create 3 functions&lt;/span&gt;\n  funcs[i] = &lt;span class=&quot;hljs-title function_&quot;&gt;curryShowValue&lt;/span&gt;(i);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n  funcs[j]();                      &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;curryShowValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;showValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://jsperf.com/bind-vs-curry&quot; rel=&quot;nofollow noreferrer&quot;&gt;the performance gain in different browsers&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Your code doesn&apos;t work, because what it does is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Create&lt;/span&gt; variable &lt;span class=&quot;hljs-string&quot;&gt;`funcs`&lt;/span&gt; and assign it an empty array;  \n&lt;span class=&quot;hljs-title class_&quot;&gt;Loop&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; up until it is less than &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; and assign it to variable &lt;span class=&quot;hljs-string&quot;&gt;`i`&lt;/span&gt;;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Push&lt;/span&gt; to variable &lt;span class=&quot;hljs-string&quot;&gt;`funcs`&lt;/span&gt; next &lt;span class=&quot;hljs-attr&quot;&gt;function&lt;/span&gt;:  \n        &lt;span class=&quot;hljs-comment&quot;&gt;// Only push (save), but don&apos;t execute&lt;/span&gt;\n        **&lt;span class=&quot;hljs-title class_&quot;&gt;Write&lt;/span&gt; to &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt; current value &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; variable &lt;span class=&quot;hljs-string&quot;&gt;`i`&lt;/span&gt;;**\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// First loop has ended, i = 3;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Loop&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; up until it is less than &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; and assign it to variable &lt;span class=&quot;hljs-string&quot;&gt;`j`&lt;/span&gt;;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Call&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`j`&lt;/span&gt;-th &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; variable &lt;span class=&quot;hljs-string&quot;&gt;`funcs`&lt;/span&gt;:  \n        **&lt;span class=&quot;hljs-title class_&quot;&gt;Write&lt;/span&gt; to &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt; current value &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; variable &lt;span class=&quot;hljs-string&quot;&gt;`i`&lt;/span&gt;;**  \n        &lt;span class=&quot;hljs-comment&quot;&gt;// Ask yourself NOW! What is the value of i?&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now the question is, what is the value of variable &lt;code&gt;i&lt;/code&gt; when the function is called? Because the first loop is created with the condition of &lt;code&gt;i &amp;lt; 3&lt;/code&gt;, it stops immediately when the condition is false, so it is &lt;code&gt;i = 3&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;You need to understand that, in time when your functions are created, none of their code is executed, it is only saved for later. And so when they are called later, the interpreter executes them and asks: &quot;What is the current value of &lt;code&gt;i&lt;/code&gt;?&quot;&lt;/p&gt;\n\n&lt;p&gt;So, your goal is to first save the value of &lt;code&gt;i&lt;/code&gt; to function and only after that save the function to &lt;code&gt;funcs&lt;/code&gt;. This could be done for example this way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funcs = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {          &lt;span class=&quot;hljs-comment&quot;&gt;// let&apos;s create 3 functions&lt;/span&gt;\n    funcs[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {            &lt;span class=&quot;hljs-comment&quot;&gt;// and store them in funcs&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + x); &lt;span class=&quot;hljs-comment&quot;&gt;// each should log its value.&lt;/span&gt;\n    }.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, i);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; j++) {\n    funcs[j]();                        &lt;span class=&quot;hljs-comment&quot;&gt;// and now let&apos;s run each one to see&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way, each function will have it&apos;s own variable &lt;code&gt;x&lt;/code&gt; and we set this &lt;code&gt;x&lt;/code&gt; to the value of &lt;code&gt;i&lt;/code&gt; in each iteration.&lt;/p&gt;\n\n&lt;p&gt;This is only one of the multiple ways to solve this problem.&lt;/p&gt;\n    "]},"randomTags":[{"name":"google-chrome-extension","slug":"google-chrome-extension"},{"name":"addeventlistener","slug":"addeventlistener"},{"name":"argument-unpacking","slug":"argument-unpacking"},{"name":"aggregation","slug":"aggregation"},{"name":"preg-replace","slug":"preg-replace"},{"name":"copy-paste","slug":"copy-paste"},{"name":"pivot-table","slug":"pivot-table"},{"name":"hex","slug":"hex"},{"name":"parameter-passing","slug":"parameter-passing"},{"name":"object-notation","slug":"object-notation"},{"name":"namespaces","slug":"namespaces"},{"name":"storage","slug":"storage"},{"name":"twitter-bootstrap","slug":"twitter-bootstrap"},{"name":"semantics","slug":"semantics"},{"name":"browser-detection","slug":"browser-detection"},{"name":"git-revert","slug":"git-revert"},{"name":"clone","slug":"clone"},{"name":"pip","slug":"pip"},{"name":"webdriverwait","slug":"webdriverwait"},{"name":"boolean-expression","slug":"boolean-expression"}]},"__N_SSG":true}