{"pageProps":{"data":{"count":1,"rows":[{"id":102,"title":"SQL select only rows with max value on a column [duplicate]","slug":"sql-select-only-rows-with-max-value-on-a-column-duplicate-1657384614292","postType":"QUESTION","createdAt":"2022-07-09T16:36:54.000Z","updatedAt":"2022-07-09T16:36:54.000Z","tags":[{"id":374,"name":"aggregate-functions","slug":"aggregate-functions","createdAt":"2022-07-09T16:36:54.000Z","updatedAt":"2022-07-09T16:36:54.000Z","Questions_Tags":{"questionId":102,"tagId":374}}]}]},"slug":"aggregate-functions","page":1,"answers":{"102":["\n&lt;h2&gt;At first glance...&lt;/h2&gt;\n&lt;p&gt;All you need is a &lt;code&gt;GROUP BY&lt;/code&gt; clause with the &lt;code&gt;MAX&lt;/code&gt; aggregate function:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;It&apos;s never that simple, is it?&lt;/h2&gt;\n&lt;p&gt;I just noticed you need the &lt;code&gt;content&lt;/code&gt; column as well.&lt;/p&gt;\n&lt;p&gt;This is a very common question in SQL: find the whole data for the row with some max value in a column per some group identifier. I heard that a lot during my career. Actually, it was one the questions I answered in my current job&apos;s technical interview.&lt;/p&gt;\n&lt;p&gt;It is, actually, so common that Stack Overflow community has created a single tag just to deal with questions like that: &lt;a href=&quot;/questions/tagged/greatest-n-per-group&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;greatest-n-per-group&apos;&quot; rel=&quot;tag&quot;&gt;greatest-n-per-group&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Basically, you have two approaches to solve that problem:&lt;/p&gt;\n&lt;h2&gt;Joining with simple &lt;code&gt;group-identifier, max-value-in-group&lt;/code&gt; Sub-query&lt;/h2&gt;\n&lt;p&gt;In this approach, you first find the &lt;code&gt;group-identifier, max-value-in-group&lt;/code&gt; (already solved above) in a sub-query. Then you join your table to the sub-query with equality on both &lt;code&gt;group-identifier&lt;/code&gt; and &lt;code&gt;max-value-in-group&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.id, a.rev, a.contents\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable a\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) rev\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n    &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n) b &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; a.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.id &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; a.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.rev\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Left Joining with self, tweaking join conditions and filters&lt;/h2&gt;\n&lt;p&gt;In this approach, you left join the table with itself. Equality goes in the &lt;code&gt;group-identifier&lt;/code&gt;. Then, 2 smart moves:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;The second join condition is having left side value less than right value&lt;/li&gt;\n&lt;li&gt;When you do step 1, the row(s) that actually have the max value will have &lt;code&gt;NULL&lt;/code&gt; in the right side (it&apos;s a &lt;code&gt;LEFT JOIN&lt;/code&gt;, remember?). Then, we filter the joined result, showing only the rows where the right side is &lt;code&gt;NULL&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;So you end up with:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable a\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; YourTable b\n    &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; a.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.id &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; a.rev &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; b.rev\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; b.id &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Conclusion&lt;/h2&gt;\n&lt;p&gt;Both approaches bring the exact same result.&lt;/p&gt;\n&lt;p&gt;If you have two rows with &lt;code&gt;max-value-in-group&lt;/code&gt; for &lt;code&gt;group-identifier&lt;/code&gt;, both rows will be in the result in both approaches.&lt;/p&gt;\n&lt;p&gt;Both approaches are SQL ANSI compatible, thus, will work with your favorite RDBMS, regardless of its &quot;flavor&quot;.&lt;/p&gt;\n&lt;p&gt;Both approaches are also performance friendly, however your mileage may vary (RDBMS, DB Structure, Indexes, etc.). So when you pick one approach over the other, &lt;em&gt;benchmark&lt;/em&gt;. And make sure you pick the one which make most of sense to you.&lt;/p&gt;\n    ","\n&lt;p&gt;My preference is to use as little code as possible...&lt;/p&gt;\n\n&lt;p&gt;You can do it using &lt;code&gt;IN&lt;/code&gt;\ntry this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1 &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; (id,rev) &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; \n( &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n  &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to my mind it is less complicated... easier to read and maintain.&lt;/p&gt;\n    ","\n&lt;p&gt;I am flabbergasted that no answer offered SQL window function solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.id, a.rev, a.contents\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, rev, contents,\n               &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) ranked_order\n          &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable) a\n &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; a.ranked_order &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Added in SQL standard ANSI/ISO Standard SQL:2003  and later extended with ANSI/ISO Standard SQL:2008, window (or windowing) functions are available with all major vendors now. There are more types of rank functions available to deal with a tie issue: &lt;code&gt;RANK, DENSE_RANK, PERSENT_RANK&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Yet another solution is to use a correlated subquery:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; yt.id, yt.rev, yt.contents\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; YourTable yt\n    &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n        (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; YourTable st &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; yt.id&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;st.id)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Having an index on (id,rev) renders the subquery almost as a simple lookup...&lt;/p&gt;\n\n&lt;p&gt;Following are comparisons to the solutions in @AdrianCarneiro&apos;s answer (subquery, leftjoin), based on MySQL measurements with InnoDB table of ~1million records, group size being: 1-3.&lt;/p&gt;\n\n&lt;p&gt;While for full table scans subquery/leftjoin/correlated timings relate to each other as 6/8/9, when it comes to direct lookups or batch (&lt;code&gt;id in (1,2,3)&lt;/code&gt;), subquery is much slower then the others (Due to rerunning the subquery). However I couldnt differentiate between leftjoin and correlated solutions in speed.&lt;/p&gt;\n\n&lt;p&gt;One final note, as leftjoin creates n*(n+1)/2 joins in groups, its performance can be heavily affected by the size of groups...&lt;/p&gt;\n    ","\n&lt;p&gt;I can&apos;t vouch for the performance, but here&apos;s a trick inspired by the limitations of Microsoft Excel.  It has some good features&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;GOOD STUFF&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It should force return of only one &quot;max record&quot; even if there is a tie (sometimes useful)&lt;/li&gt;\n&lt;li&gt;It doesn&apos;t require a join&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;APPROACH&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It is a little bit ugly and requires that you know something about the range of valid values of the &lt;strong&gt;&lt;em&gt;rev&lt;/em&gt;&lt;/strong&gt; column.  Let us assume that we know the &lt;strong&gt;&lt;em&gt;rev&lt;/em&gt;&lt;/strong&gt; column is a number between 0.00 and 999 including decimals but that there will only ever be two digits to the right of the decimal point (e.g. 34.17 would be a valid value).&lt;/p&gt;\n\n&lt;p&gt;The gist of the thing is that you create a single synthetic column by string concatenating/packing the primary comparison field along with the data you want.  In this way, you can force SQL&apos;s MAX() aggregate function to return all of the data (because it has been packed into a single column).  Then you have to unpack the data.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s how it looks with the above example, written in SQL&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, \n       &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(packed_col) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; max_rev,\n       &lt;span class=&quot;hljs-built_in&quot;&gt;SUBSTRING&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(packed_col) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; content_for_max_rev \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;  (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, \n       &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; rev &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;.001&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CHAR&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;---&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;(content &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; packed_col\n       &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; yourtable\n      ) \n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The packing begins by forcing the &lt;strong&gt;&lt;em&gt;rev&lt;/em&gt;&lt;/strong&gt; column to be a number of known character length regardless of the value of &lt;strong&gt;&lt;em&gt;rev&lt;/em&gt;&lt;/strong&gt; so that for example&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;3.2    becomes    1003.201&lt;/li&gt;\n&lt;li&gt;57     becomes    1057.001&lt;/li&gt;\n&lt;li&gt;923.88 becomes    1923.881&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you do it right, string comparison of two numbers should yield the same &quot;max&quot; as numeric comparison of the two numbers and it&apos;s easy to convert back to the original number using the substring function (which is available in one form or another pretty much everywhere).&lt;/p&gt;\n    ","\n&lt;h3&gt;Unique Identifiers?  Yes!  Unique identifiers!&lt;/h3&gt;\n&lt;p&gt;One of the best ways to develop a MySQL DB is &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/example-auto-increment.html&quot; rel=&quot;noreferrer&quot;&gt;to have each &lt;code&gt;id&lt;/code&gt; &lt;code&gt;AUTOINCREMENT&lt;/code&gt;&lt;/a&gt; (Source MySQL.com).  This allows a variety of advantages, too many to cover here.  The problem with the question is that its example has duplicate ids.  This disregards these tremendous advantages of unique identifiers, and at the same time, is confusing to those familiar with this already.&lt;/p&gt;\n&lt;h3&gt;Cleanest Solution&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.db-fiddle.com/f/8AmYpUxAo2z3yoR7yr9TKp/0&quot; rel=&quot;noreferrer&quot;&gt;DB Fiddle&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Newer versions of MySQL come with &lt;code&gt;ONLY_FULL_GROUP_BY&lt;/code&gt; enabled by default, and many of the solutions here will &lt;em&gt;fail&lt;/em&gt; in testing with this condition.&lt;/p&gt;\n&lt;p&gt;Even so, we can simply select &lt;code&gt;DISTINCT&lt;/code&gt; &lt;em&gt;someuniquefield&lt;/em&gt;, &lt;code&gt;MAX(&lt;/code&gt; &lt;em&gt;whateverotherfieldtoselect&lt;/em&gt; &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt; *somethirdfield &lt;code&gt;)&lt;/code&gt;, etc., and have no worries understanding the result or how the query works :&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; t1.id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(t1.rev), &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(t2.content)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Table1 &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; Table1 &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; t2 &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t2.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.id &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; t2.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Table1 t3 &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t3.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.id\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; t1.id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;SELECT DISTINCT Table1.id, max(Table1.rev), max(Table2.content)&lt;/code&gt; : Return &lt;code&gt;DISTINCT&lt;/code&gt; somefield, &lt;code&gt;MAX()&lt;/code&gt; some otherfield, the last &lt;code&gt;MAX()&lt;/code&gt; is redundant, because I know it&apos;s just one row, but it&apos;s required by the query.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;FROM Employee&lt;/code&gt; : Table searched on.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;JOIN Table1 AS Table2 ON Table2.rev = Table1.rev&lt;/code&gt; : Join the second table on the first, because, we need to get the max(table1.rev)&apos;s comment.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;GROUP BY Table1.id&lt;/code&gt;: Force the top-sorted, Salary row of each employee to be the returned result.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Note that since &quot;content&quot; was &quot;...&quot; in OP&apos;s question, there&apos;s no way to test that this works.  So, I changed that to &quot;..a&quot;, &quot;..b&quot;, so, we can actually now see that the results are correct:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;id  &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(Table1.rev) &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(Table2.content)\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   ..d\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   ..b\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Why is it clean?&lt;/em&gt;  &lt;code&gt;DISTINCT()&lt;/code&gt;, &lt;code&gt;MAX()&lt;/code&gt;, etc., all make wonderful use of MySQL indices.  This will be faster.  Or, it will be much faster, if you have indexing, and you compare it to a query that looks at all rows.&lt;/p&gt;\n&lt;h3&gt;Original Solution&lt;/h3&gt;\n&lt;p&gt;With &lt;code&gt;ONLY_FULL_GROUP_BY&lt;/code&gt; disabled, we can use still use &lt;code&gt;GROUP BY&lt;/code&gt;, but then we are only using it on the Salary, and not the id:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Employee\n    &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Salary &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; employeesub\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; employeesub.Salary;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;SELECT *&lt;/code&gt; : Return all fields.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;FROM Employee&lt;/code&gt; : Table searched on.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;(SELECT *...)&lt;/code&gt; subquery : Return all people, sorted by Salary.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;GROUP BY employeesub.Salary&lt;/code&gt;: Force the top-sorted, Salary row of each employee to be the returned result.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Unique-Row Solution&lt;/h3&gt;\n&lt;p&gt;Note the &lt;a href=&quot;https://en.wikipedia.org/wiki/Relational_database&quot; rel=&quot;noreferrer&quot;&gt;Definition of a Relational Database&lt;/a&gt;: &quot;Each row in a table has its own unique key.&quot;  This would mean that, in the question&apos;s example, id would &lt;em&gt;have to be&lt;/em&gt; unique, and in that case, we can just do :&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Employee\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; Employee.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12345&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Employee.Salary &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\nLIMIT &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Hopefully this is a solution that solves the problem and helps everyone better understand what&apos;s happening in the DB.&lt;/p&gt;\n    ","\n&lt;p&gt;Something like this?&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; yourtable.id, rev, content\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; yourtable\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; maxrev\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; yourtable\n    &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; child &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (yourtable.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; child.id) &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; (yourtable.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; maxrev)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another manner to do the job is using &lt;code&gt;MAX()&lt;/code&gt; analytic function in OVER PARTITION clause&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id\n          ,rev\n          ,contents\n          ,&lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; max_rev\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n    ) t\n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t.max_rev \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The other &lt;code&gt;ROW_NUMBER()&lt;/code&gt; OVER PARTITION solution already documented in this post is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id\n          ,rev\n          ,contents\n          ,&lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) rank\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n    ) t\n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t.rank &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This 2 SELECT work well on Oracle 10g.&lt;/p&gt;\n\n&lt;p&gt;MAX() solution runs certainly FASTER that &lt;code&gt;ROW_NUMBER()&lt;/code&gt; solution because &lt;code&gt;MAX()&lt;/code&gt; complexity is &lt;code&gt;O(n)&lt;/code&gt; while &lt;code&gt;ROW_NUMBER()&lt;/code&gt; complexity is at minimum &lt;code&gt;O(n.log(n))&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; represent the number of records in table !&lt;/p&gt;\n    ","\n&lt;p&gt;I like to use a &lt;code&gt;NOT EXIST&lt;/code&gt;-based solution for this problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n  id, \n  rev\n  &lt;span class=&quot;hljs-comment&quot;&gt;-- you can select other columns here&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable t\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;EXISTS&lt;/span&gt; (\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable t &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; rev &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; t.rev\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will select all records with max value within the group and allows you to select other columns.&lt;/p&gt;\n    ","\n&lt;p&gt;I think, You want this?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; docs &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; (id, rev) &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; docs &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id)  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;SQL Fiddle :\n&lt;a href=&quot;http://sqlfiddle.com/#!9/a6c585/82473/0&quot; rel=&quot;noreferrer&quot;&gt;Check here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Employee\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; Employee.Salary &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(salary) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Employee &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; Employe_id)\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Employee.Salary\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Note: I probably wouldn&apos;t recommend this anymore in MySQL 8+ days. Haven&apos;t used it in years.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;A third solution I hardly ever see mentioned is MySQL specific and looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rev\n , &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;SUBSTRING_INDEX(GROUP_CONCAT(numeric_content &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; numeric_content\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t1\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Yes it looks awful (converting to string and back etc.) but in my experience it&apos;s usually faster than the other solutions. Maybe that&apos;s just for my use cases, but I have used it on tables with millions of records and many unique ids. Maybe it&apos;s because MySQL is pretty bad at optimizing the other solutions (at least in the 5.0 days when I came up with this solution).&lt;/p&gt;\n&lt;p&gt;One important thing is that GROUP_CONCAT has a maximum length for the string it can build up. You probably want to raise this limit by setting the &lt;code&gt;group_concat_max_len&lt;/code&gt; variable. And keep in mind that this will be a limit on scaling if you have a large number of rows.&lt;/p&gt;\n&lt;p&gt;Anyway, the above doesn&apos;t directly work if your content field is already text. In that case you probably want to use a different separator, like \\0 maybe. You&apos;ll also run into the &lt;code&gt;group_concat_max_len&lt;/code&gt; limit quicker.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;NOT mySQL&lt;/strong&gt;, but for other people finding this question and using SQL, another way to resolve the &lt;a href=&quot;/questions/tagged/greatest-n-per-group&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;greatest-n-per-group&apos;&quot; rel=&quot;tag&quot;&gt;greatest-n-per-group&lt;/a&gt; problem is using &lt;a href=&quot;http://technet.microsoft.com/en-us/library/ms175156(v=sql.105).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Cross Apply&lt;/code&gt;&lt;/a&gt; in MS SQL&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; DocIds &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; docs)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; d2.id, d2.rev, d2.content\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; DocIds d1\n&lt;span class=&quot;hljs-keyword&quot;&gt;CROSS&lt;/span&gt; APPLY (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Top &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; docs d\n  &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; d.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; d1.id\n  &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n) d2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;&lt;a href=&quot;http://sqlfiddle.com/#!18/25b5c/1&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&apos;s an example in SqlFiddle&lt;/a&gt;&lt;/h3&gt;\n    ","\n&lt;p&gt;I would use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; t.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; t\n&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt;\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; test\n    &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; o\n&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; o.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t.rev\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Subquery SELECT is not too eficient maybe, but in JOIN clause seems to be usable. I&apos;m not an expert in optimizing queries, but I&apos;ve tried at MySQL, PostgreSQL, FireBird and it does work very good.&lt;/p&gt;\n\n&lt;p&gt;You can use this schema in multiple joins and with WHERE clause. It is my working example (solving identical to yours problem with table &quot;firmy&quot;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; platnosci &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; p\n&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; firmy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f\n&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; p.id_rel_firmy &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; f.id_rel\n&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(id_obj) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; id_obj\n      &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; firmy\n      &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id_rel) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; o\n&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; o.id_obj &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; f.id_obj &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; p.od &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;2014-03-01&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is asked on tables having teens thusands of records, and it takes less then 0,01 second on really not too strong machine.&lt;/p&gt;\n\n&lt;p&gt;I wouldn&apos;t use IN clause (as it is mentioned somewhere above). IN is given to use with short lists of constans, and not as to be the query filter built on subquery. It is because subquery in IN is performed for every scanned record which can made query taking very loooong time.&lt;/p&gt;\n    ","\n&lt;p&gt;Since this is most popular question with regard to this problem, I&apos;ll re-post another answer to it here as well:&lt;/p&gt;\n\n&lt;p&gt;It looks like there is simpler way to do this (but &lt;strong&gt;only in MySQL&lt;/strong&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; mytable &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id, rev &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt; ) x\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Please credit answer of user Bohemian&lt;/strong&gt; in &lt;a href=&quot;https://stackoverflow.com/questions/12102200/get-records-with-max-value-for-each-group-of-grouped-sql-results&quot;&gt;this question&lt;/a&gt; for providing such a concise and elegant answer to this problem.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; though this solution works for many people it may not be stable in the long run, since MySQL doesn&apos;t guarantee that GROUP BY statement will return meaningful values for columns not in GROUP BY list. So use this solution at your own risk!&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;If you have many fields in select statement and you want latest  value for all of those fields through optimized code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; table_name\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id,rev &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;) temp\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;How about this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; all_fields.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;  \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; yourtable &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; max_recs  \n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; yourtable &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; all_fields \n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; max_recs.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; all_fields.id\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This solution makes only one selection from YourTable, therefore it&apos;s faster. It works only for MySQL and SQLite(for SQLite remove DESC) according to test on sqlfiddle.com. Maybe it can be tweaked to work on other languages which I am not familiar with.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; id, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content1&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; content\n              &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content2&apos;&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content3&apos;&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content4&apos;&lt;/span&gt;\n            ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; YourTable\n       &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n   ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; YourTable\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a nice way of doing that&lt;/p&gt;\n\n&lt;p&gt;Use following code :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; temp &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt;  ( \n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;(field1) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; summ , field1\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; table_name\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; field1 )\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; temp &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; summ &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(summ) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; temp)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I like to do this by ranking the records by some column. In this case, rank &lt;code&gt;rev&lt;/code&gt; values grouped by &lt;code&gt;id&lt;/code&gt;. Those with higher &lt;code&gt;rev&lt;/code&gt; will have lower rankings. So highest &lt;code&gt;rev&lt;/code&gt; will have ranking of 1.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; id, rev, content\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;@rowNum&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; if(&lt;span class=&quot;hljs-variable&quot;&gt;@prevValue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; id, &lt;span class=&quot;hljs-variable&quot;&gt;@rowNum&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; row_num,\n    id, rev, content,\n    &lt;span class=&quot;hljs-variable&quot;&gt;@prevValue&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; id\n  &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; id, rev, content &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; YOURTABLE &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;asc&lt;/span&gt;, rev &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;) TEMP,\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@rowNum&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; DUAL) X,\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@prevValue&lt;/span&gt; :&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; DUAL) Y) TEMP\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; row_num &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Not sure if introducing variables makes the whole thing slower. But at least I&apos;m not querying &lt;code&gt;YOURTABLE&lt;/code&gt; twice.&lt;/p&gt;\n    ","\n&lt;p&gt;Sorted the rev field in reverse order and then grouped by id which gave the first row of each grouping which is the one with the highest rev value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; table1 &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, rev &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) X &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; X.id;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Tested in &lt;a href=&quot;http://sqlfiddle.com/&quot; rel=&quot;nofollow&quot;&gt;http://sqlfiddle.com/&lt;/a&gt; with the following data&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; table1\n    (`id` &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, `rev` &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, `content` &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; table1\n    (`id`, `rev`, `content`)\n&lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;\n    (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;One-One&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;One-Two&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Two-One&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Two-Two&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Three-Two&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Three-One&apos;&lt;/span&gt;),\n    (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Three-Three&apos;&lt;/span&gt;)\n;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This gave the following result in MySql 5.5 and 5.6 &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;id  rev content\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;One&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;Two\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   Two&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;Two\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   Three&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;Two\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;here is another solution hope it will help someone    &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; a.id , a.rev, a.content &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Table1 a\n&lt;span class=&quot;hljs-keyword&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; \n(&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(rev) rev &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Table1 &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id) x &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; x.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;a.id &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; x.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;a.rev\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;None of these answers have worked for me.&lt;/p&gt;\n\n&lt;p&gt;This is what worked for me.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; score &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(score_up) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; history)\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; history.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; score, history &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; history.score_up &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; score.max\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s another solution to retrieving the records only with a field that has the maximum value for that field. This works for SQL400 which is the platform I work on. In this example, the records with the maximum value in field FIELD5 will be retrieved by the following SQL statement.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; A.KEYFIELD1, A.KEYFIELD2, A.FIELD3, A.FIELD4, A.FIELD5\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; MYFILE A\n &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; RRN(A) &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt;\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; RRN(B) \n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; MYFILE B\n     &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; B.KEYFIELD1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; A.KEYFIELD1 &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; B.KEYFIELD2 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; A.KEYFIELD2\n     &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; B.FIELD5 &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;FETCH&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ROW&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ONLY&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can make the select without a join when you combine the &lt;code&gt;rev&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; into one &lt;code&gt;maxRevId&lt;/code&gt; value for &lt;code&gt;MAX()&lt;/code&gt; and then split it back to original values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; maxRevId &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt; ((&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; id, maxRevId &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rev\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(((rev &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; id)) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; maxRevId\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n      &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id) x;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is especially fast when there is a complex join instead of a single table. With the traditional approaches the complex join would be done twice.&lt;/p&gt;\n\n&lt;p&gt;The above combination is simple with bit functions when &lt;code&gt;rev&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; are &lt;code&gt;INT UNSIGNED&lt;/code&gt; (32 bit) and combined value fits to &lt;code&gt;BIGINT UNSIGNED&lt;/code&gt; (64 bit). When the &lt;code&gt;id&lt;/code&gt; &amp;amp; &lt;code&gt;rev&lt;/code&gt; are larger than 32-bit values or made of multiple columns, you need combine the value into e.g. a binary value with suitable padding for &lt;code&gt;MAX()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;h1&gt;Explanation&lt;/h1&gt;\n\n&lt;p&gt;This is not pure SQL. This will use the SQLAlchemy ORM.&lt;/p&gt;\n\n&lt;p&gt;I came here looking for SQLAlchemy help, so I will duplicate Adrian Carneiro&apos;s answer with the python/SQLAlchemy version, specifically the outer join part.&lt;/p&gt;\n\n&lt;p&gt;This query answers the question of:   &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&quot;Can you return me the records in this group of records (based on same id) that have the highest version number&quot;.&lt;/em&gt;  &lt;/p&gt;\n\n&lt;p&gt;This allows me to duplicate the record, update it, increment its version number, and have the copy of the old version in such a way that I can show change over time.&lt;/p&gt;\n\n&lt;h1&gt;Code&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;MyTableAlias &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; aliased(MyTable)\nnewest_records &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; appdb.session.query(MyTable).select_from(&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt;(\n    MyTable, \n    MyTableAlias, \n    onclause&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;and_(\n        MyTable.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MyTableAlias.id,\n        MyTable.version_int &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; MyTableAlias.version_int\n    ),\n    isouter&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n    )\n).&lt;span class=&quot;hljs-keyword&quot;&gt;filter&lt;/span&gt;(\n    MyTableAlias.id  &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;,\n).&lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Tested on a PostgreSQL database.&lt;/p&gt;\n    ","\n&lt;p&gt;I used the below to solve a problem of my own. I first created a temp table and inserted the max rev value per unique id.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; #temp1\n(\n    id &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n    , rev &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; #temp1\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.id, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(a.rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n    (\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, content, &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev\n        &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n        &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, content\n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; a \n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; a.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; a.id\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I then joined these max values (#temp1) to all of the possible id/content combinations. By doing this, I naturally filter out the non-maximum id/content combinations, and am left with the only max rev values for each.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.id, a.rev, content\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; #temp1 &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; a\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt;\n    (\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, content, &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(rev) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; rev\n        &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YourTable\n        &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, content\n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; a.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.id &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; a.rev &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; b.rev\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; a.id, a.rev, b.content\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; a.id\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"main","slug":"main"},{"name":"instantiation","slug":"instantiation"},{"name":"cat","slug":"cat"},{"name":"module","slug":"module"},{"name":"git-checkout","slug":"git-checkout"},{"name":"count","slug":"count"},{"name":"pivot","slug":"pivot"},{"name":"default-parameters","slug":"default-parameters"},{"name":"jsp","slug":"jsp"},{"name":"array-difference","slug":"array-difference"},{"name":"typename","slug":"typename"},{"name":"batch-file","slug":"batch-file"},{"name":"gprof","slug":"gprof"},{"name":"image","slug":"image"},{"name":"hierarchical-data","slug":"hierarchical-data"},{"name":"flexbox","slug":"flexbox"},{"name":"nullreferenceexception","slug":"nullreferenceexception"},{"name":"spl","slug":"spl"},{"name":"database-design","slug":"database-design"},{"name":"instance-variables","slug":"instance-variables"}]},"__N_SSG":true}