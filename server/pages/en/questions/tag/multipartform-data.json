{"pageProps":{"data":{"count":1,"rows":[{"id":509,"title":"What does enctype='multipart/form-data' mean?","slug":"what-does-enctype'multipartform-data'-mean-1657388229352","postType":"QUESTION","createdAt":"2022-07-09T17:37:09.000Z","updatedAt":"2022-07-09T17:37:09.000Z","tags":[{"id":2532,"name":"multipartform-data","slug":"multipartform-data","createdAt":"2022-07-09T17:37:09.000Z","updatedAt":"2022-07-09T17:37:09.000Z","Questions_Tags":{"questionId":509,"tagId":2532}}]}]},"slug":"multipartform-data","page":1,"answers":{"509":["\n&lt;p&gt;When you make a POST request, you have to encode the data that forms the body of the request in some way.&lt;/p&gt;\n&lt;p&gt;HTML forms provide &lt;a href=&quot;https://www.w3.org/html/wg/spec/association-of-controls-and-forms.html#attr-fs-enctype&quot; rel=&quot;nofollow noreferrer&quot;&gt;three methods of encoding&lt;/a&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; (the default)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;text/plain&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Work was being done on adding &lt;a href=&quot;http://www.w3.org/TR/html-json-forms/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;application/json&lt;/code&gt;&lt;/a&gt;, but that has been abandoned.&lt;/p&gt;\n&lt;p&gt;(Other encodings are possible with HTTP requests generated using other means than an HTML form submission. JSON is a common format for use with web services and some still use SOAP.)&lt;/p&gt;\n&lt;p&gt;The specifics of the formats don&apos;t matter to most developers. The important points are:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Never use &lt;code&gt;text/plain&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;When you are writing client-side code:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;use &lt;code&gt;multipart/form-data&lt;/code&gt; when your form includes any &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; elements&lt;/li&gt;\n&lt;li&gt;otherwise you can use &lt;code&gt;multipart/form-data&lt;/code&gt; or &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; but &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; will be more efficient&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;When you are writing server-side code:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Use a prewritten form handling library&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Most (such as Perl&apos;s &lt;code&gt;CGI-&amp;gt;param&lt;/code&gt; or the one exposed by PHP&apos;s &lt;code&gt;$_POST&lt;/code&gt; superglobal) will take care of the differences for you. Don&apos;t bother trying to parse the raw input received by the server.&lt;/p&gt;\n&lt;p&gt;Sometimes you will find a library that can&apos;t handle both formats.  Node.js&apos;s most popular library for handling form data is &lt;a href=&quot;https://github.com/expressjs/body-parser&quot; rel=&quot;nofollow noreferrer&quot;&gt;body-parser&lt;/a&gt; which cannot handle multipart requests (but has documentation that recommends some alternatives which can).&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;If you are writing (or debugging) a library for parsing or generating the raw data, then you need to start worrying about the format. You might also want to know about it for interest&apos;s sake.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; is more or less the same as a query string on the end of the URL.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;multipart/form-data&lt;/code&gt; is significantly more complicated but it allows entire files to be included in the data. An example of the result can be found in the &lt;a href=&quot;http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML 4 specification&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;text/plain&lt;/code&gt; is introduced by HTML 5 and is useful only for debugging  from &lt;a href=&quot;http://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm&quot; rel=&quot;nofollow noreferrer&quot;&gt;the spec&lt;/a&gt;: &lt;em&gt;They are not reliably interpretable by computer&lt;/em&gt;  and I&apos;d argue that the others combined with tools (like &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network&quot; rel=&quot;nofollow noreferrer&quot;&gt;the Network Panel&lt;/a&gt; in the developer tools of most browsers) are better for that).&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;when should we use it?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/4526286&quot;&gt;Quentin&apos;s answer&lt;/a&gt; is right: use &lt;code&gt;multipart/form-data&lt;/code&gt; if the form contains a file upload, and &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; otherwise, which is the default if you omit &lt;code&gt;enctype&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;I&apos;m going to:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;add some more HTML5 references&lt;/li&gt;\n&lt;li&gt;explain &lt;strong&gt;why&lt;/strong&gt; he is right with a form submit example&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;HTML5 references&lt;/h2&gt;\n&lt;p&gt;There are &lt;a href=&quot;https://www.w3.org/TR/html5/sec-forms.html#element-attrdef-form-enctype&quot; rel=&quot;noreferrer&quot;&gt;three possibilities&lt;/a&gt; for &lt;code&gt;enctype&lt;/code&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/html5/sec-forms.html#urlencoded-form-data&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/html5/sec-forms.html#multipart-form-data&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;&lt;/a&gt; (spec points to &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7578&quot; rel=&quot;noreferrer&quot;&gt;RFC7578&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/html5/sec-forms.html#plain-text-form-data&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;text/plain&lt;/code&gt;&lt;/a&gt;. This is &quot;not reliably interpretable by computer&quot;, so it should never be used in production, and we will not look further into it.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;How to generate the examples&lt;/h2&gt;\n&lt;p&gt;Once you see an example of each method, it becomes obvious how they work, and when you should use each one.&lt;/p&gt;\n&lt;p&gt;You can produce examples using:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;nc -l&lt;/code&gt; or an ECHO server: &lt;a href=&quot;https://stackoverflow.com/questions/5725430/http-test-server-accepting-get-post-requests/52351480#52351480&quot;&gt;HTTP test server accepting GET/POST requests&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;a user agent like a browser or cURL&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Save the form to a minimal &lt;code&gt;.html&lt;/code&gt; file:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;upload&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:8000&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;enctype&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text default&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text2&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;#x03C9;&lt;/span&gt;b&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We set the default text value to &lt;code&gt;a&amp;amp;#x03C9;b&lt;/code&gt;, which means &lt;code&gt;aωb&lt;/code&gt; because &lt;code&gt;ω&lt;/code&gt; is &lt;code&gt;U+03C9&lt;/code&gt;, which are the bytes &lt;code&gt;61 CF 89 62&lt;/code&gt; in UTF-8.&lt;/p&gt;\n&lt;p&gt;Create files to upload:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;echo &apos;Content of a.txt.&apos; &amp;gt; a.txt\n\necho &apos;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Content of a.html.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&apos; &amp;gt; a.html\n\n# Binary file containing 4 bytes: &apos;a&apos;, 1, 2 and &apos;b&apos;.\nprintf &apos;a\\xCF\\x89b&apos; &amp;gt; binary\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Run our little echo server:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;while true; do printf &apos;&apos; | nc -l localhost 8000; done\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Open the HTML on your browser, select the files and click on submit and check the terminal.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;nc&lt;/code&gt; prints the request received.&lt;/p&gt;\n&lt;p&gt;Tested on: Ubuntu 14.04.3, &lt;code&gt;nc&lt;/code&gt; BSD 1.105, Firefox 40.&lt;/p&gt;\n&lt;h2&gt;multipart/form-data&lt;/h2&gt;\n&lt;p&gt;Firefox sent:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;POST / HTTP/1.1\n[[ Less interesting headers ... ]]\nContent-Type: multipart/form-data; boundary=---------------------------735323031399963166993862150\nContent-Length: 834\n\n-----------------------------735323031399963166993862150\nContent-Disposition: form-data; name=&quot;text1&quot;\n\ntext default\n-----------------------------735323031399963166993862150\nContent-Disposition: form-data; name=&quot;text2&quot;\n\naωb\n-----------------------------735323031399963166993862150\nContent-Disposition: form-data; name=&quot;file1&quot;; filename=&quot;a.txt&quot;\nContent-Type: text/plain\n\nContent of a.txt.\n\n-----------------------------735323031399963166993862150\nContent-Disposition: form-data; name=&quot;file2&quot;; filename=&quot;a.html&quot;\nContent-Type: text/html\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Content of a.html.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n-----------------------------735323031399963166993862150\nContent-Disposition: form-data; name=&quot;file3&quot;; filename=&quot;binary&quot;\nContent-Type: application/octet-stream\n\naωb\n-----------------------------735323031399963166993862150--\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For the binary file and text field, the bytes &lt;code&gt;61 CF 89 62&lt;/code&gt; (&lt;code&gt;aωb&lt;/code&gt; in UTF-8) are sent literally. You could verify that with &lt;code&gt;nc -l localhost 8000 | hd&lt;/code&gt;, which says that the bytes:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;61 CF 89 62\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;were sent (&lt;code&gt;61&lt;/code&gt; == &apos;a&apos; and &lt;code&gt;62&lt;/code&gt; == &apos;b&apos;).&lt;/p&gt;\n&lt;p&gt;Therefore it is clear that:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Content-Type: multipart/form-data; boundary=---------------------------735323031399963166993862150&lt;/code&gt; sets the content type to &lt;code&gt;multipart/form-data&lt;/code&gt; and says that the fields are separated by the given &lt;code&gt;boundary&lt;/code&gt; string.&lt;/p&gt;\n&lt;p&gt;But note that the:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;boundary=---------------------------735323031399963166993862150\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;has two less dashes &lt;code&gt;--&lt;/code&gt; than the actual barrier&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;-----------------------------735323031399963166993862150\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is because the standard requires the boundary to start with two dashes &lt;code&gt;--&lt;/code&gt;. The other dashes appear to be just how Firefox chose to implement the arbitrary boundary. RFC 7578 &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7578#section-4.1&quot; rel=&quot;noreferrer&quot;&gt;clearly mentions&lt;/a&gt; that those two leading dashes &lt;code&gt;--&lt;/code&gt; are required:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;4.1.  &quot;Boundary&quot; Parameter of multipart/form-data&lt;/p&gt;\n&lt;p&gt;As with other multipart types, the parts are delimited with a\nboundary delimiter, constructed using CRLF, &quot;--&quot;, and the value of\nthe &quot;boundary&quot; parameter.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;every field gets some sub headers before its data: &lt;code&gt;Content-Disposition: form-data;&lt;/code&gt;, the field &lt;code&gt;name&lt;/code&gt;, the &lt;code&gt;filename&lt;/code&gt;, followed by the data.&lt;/p&gt;\n&lt;p&gt;The server reads the data until the next boundary string. The browser must choose a boundary that will not appear in any of the fields, so this is why the boundary may vary between requests.&lt;/p&gt;\n&lt;p&gt;Because we have the unique boundary, no encoding of the data is necessary: binary data is sent as is.&lt;/p&gt;\n&lt;p&gt;TODO: what is the optimal boundary size (&lt;code&gt;log(N)&lt;/code&gt; I bet), and name / running time of the algorithm that finds it? Asked at: &lt;a href=&quot;https://cs.stackexchange.com/questions/39687/find-the-shortest-sequence-that-is-not-a-sub-sequence-of-a-set-of-sequences&quot;&gt;https://cs.stackexchange.com/questions/39687/find-the-shortest-sequence-that-is-not-a-sub-sequence-of-a-set-of-sequences&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;Content-Type&lt;/code&gt; is automatically determined by the browser.&lt;/p&gt;\n&lt;p&gt;How it is determined exactly was asked at: &lt;a href=&quot;https://stackoverflow.com/questions/1201945/how-is-mime-type-of-an-uploaded-file-determined-by-browser&quot;&gt;How is mime type of an uploaded file determined by browser?&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;application/x-www-form-urlencoded&lt;/h2&gt;\n&lt;p&gt;Now change the &lt;code&gt;enctype&lt;/code&gt; to &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;, reload the browser, and resubmit.&lt;/p&gt;\n&lt;p&gt;Firefox sent:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;POST / HTTP/1.1\n[[ Less interesting headers ... ]]\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 51\n\ntext1=text+default&amp;amp;text2=a%CF%89b&amp;amp;file1=a.txt&amp;amp;file2=a.html&amp;amp;file3=binary\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Clearly the file data was not sent, only the basenames. So this cannot be used for files.&lt;/p&gt;\n&lt;p&gt;As for the text field, we see that usual printable characters like &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; were sent in one byte, while non-printable ones like &lt;code&gt;0xCF&lt;/code&gt; and &lt;code&gt;0x89&lt;/code&gt; took up &lt;strong&gt;3 bytes&lt;/strong&gt; each: &lt;code&gt;%CF%89&lt;/code&gt;!&lt;/p&gt;\n&lt;h2&gt;Comparison&lt;/h2&gt;\n&lt;p&gt;File uploads often contain lots of non-printable characters (e.g. images), while text forms almost never do.&lt;/p&gt;\n&lt;p&gt;From the examples we have seen that:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;: adds a few bytes of boundary overhead to the message, and must spend some time calculating it, but sends each byte in one byte.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;: has a single byte boundary per field (&lt;code&gt;&amp;amp;&lt;/code&gt;), but adds a &lt;em&gt;linear&lt;/em&gt; overhead factor of &lt;strong&gt;3x&lt;/strong&gt; for every non-printable character.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Therefore, even if we could send files with &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;, we wouldn&apos;t want to, because it is so inefficient.&lt;/p&gt;\n&lt;p&gt;But for printable characters found in text fields, it does not matter and generates less overhead, so we just use it.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;enctype=&apos;multipart/form-data&lt;/code&gt; is an encoding type that allows files to be sent through a &lt;em&gt;POST&lt;/em&gt;. Quite simply, without this encoding the files cannot be sent through &lt;em&gt;POST&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you want to allow a user to upload a file via a form, you must use this &lt;em&gt;enctype&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;When submitting a form, you tell your browser to send, via the HTTP protocol, a message on the network, properly enveloped in a TCP/IP protocol message structure. An HTML page has a way to send data to the server: by using &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;s.&lt;/p&gt;\n&lt;p&gt;When a form is submitted, an HTTP Request is created and sent to the server, the message will contain the field names in the form and the values filled in by the user. This transmission can happen with &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;GET&lt;/code&gt; &lt;em&gt;HTTP methods&lt;/em&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/a&gt; tells your browser to build an HTTP message and put all content in the body of the message (a very useful way of doing things, more safe and also flexible).&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/a&gt; will submit the form data in the &lt;em&gt;querystring&lt;/em&gt;. It has some constraints about data representation and length.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Stating how to send your form to the server&lt;/h3&gt;\n&lt;p&gt;Attribute &lt;code&gt;enctype&lt;/code&gt; has sense only when using &lt;code&gt;POST&lt;/code&gt; method. When specified, it instructs the browser to send the form by encoding its content in a specific way. From &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-enctype&quot; rel=&quot;nofollow noreferrer&quot;&gt;MDN - Form enctype&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;When the value of the method attribute is post, enctype is the MIME\ntype of content that is used to submit the form to the server.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;: This is the default. When the form is sent, all names and values are collected and &lt;a href=&quot;https://en.wikipedia.org/wiki/Percent-encoding&quot; rel=&quot;nofollow noreferrer&quot;&gt;URL Encoding&lt;/a&gt; is performed on the final string.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;: Characters are NOT encoded. This is important when the form has a file upload control. You want to send the file binary and this ensures that bitstream is not altered.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;text/plain&lt;/code&gt;: Spaces get converted, but no more encoding is performed.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Security&lt;/h3&gt;\n&lt;p&gt;When submitting forms, some security concerns can arise as stated in &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7578#section-7&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC 7578 Section 7: Multipart form data - Security considerations&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;All form-processing software should treat user supplied form-data&lt;br&gt;\nwith sensitivity, as it often contains confidential or personally&lt;br&gt;\nidentifying information. There is widespread use of form &quot;auto-fill&quot;\nfeatures in web browsers; these might be used to trick users to&lt;br&gt;\nunknowingly send confidential information when completing otherwise&lt;br&gt;\ninnocuous tasks. multipart/form-data does not supply any features&lt;br&gt;\nfor checking integrity, ensuring confidentiality, avoiding user&lt;br&gt;\nconfusion, or other security features; those concerns must be&lt;br&gt;\naddressed by the form-filling and form-data-interpreting applications.&lt;/p&gt;\n&lt;p&gt;Applications that receive forms and process them must be careful\nnot to supply data back to the requesting form-processing site that\nwas not intended to be sent.&lt;/p&gt;\n&lt;p&gt;It is important when interpreting the filename of the Content-&lt;br&gt;\nDisposition header field to not inadvertently overwrite files in the&lt;br&gt;\nrecipient&apos;s file space.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This concerns you if you are a developer and your server will process forms submitted by users which might end up containing sensitive information.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;enctype=&apos;multipart/form-data&apos;&lt;/code&gt; means that no characters will be encoded. that is why this type is used while uploading files to server.&lt;br&gt;\nSo &lt;code&gt;multipart/form-data&lt;/code&gt; is used when a form requires binary data, like the contents of a file, to be uploaded&lt;/p&gt;\n    ","\n&lt;p&gt;Set the method attribute to POST because file content can&apos;t be put inside a URL       parameter using a form.&lt;/p&gt;\n\n&lt;p&gt;Set the value of enctype to multipart/form-data because the data will be split into multiple parts, one for each file plus one for the text of the form body that may be sent with them.&lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;enctype(&lt;strong&gt;ENC&lt;/strong&gt;ode &lt;strong&gt;TYPE&lt;/strong&gt;)  attribute specifies how the form-data should be encoded when submitting it to the server.  &lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;multipart/form-data&lt;/strong&gt;  is one of the value of enctype attribute, which is used in form element that have a file upload. &lt;strong&gt;multi-part&lt;/strong&gt; means form data divides into &lt;strong&gt;multiple parts&lt;/strong&gt; and send to server.  &lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Usually this is when you have a POST form which needs to take a file upload as data... this will tell the server how it will encode the data transferred, in such case it won&apos;t get encoded because it will just transfer and upload the files to the server, Like for example when uploading an image or a pdf&lt;/p&gt;\n    ","\n&lt;p&gt;This value is necessary if the user will upload a file through the form&lt;/p&gt;\n&lt;p&gt;Kindly read this&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.w3schools.com/tags/att_form_enctype.asp&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.w3schools.com/tags/att_form_enctype.asp&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;The enctype attribute specifies how the form-data should be encoded when submitting it to the server.&lt;/p&gt;\n  \n  &lt;p&gt;The enctype attribute can be used only if method=&quot;post&quot;.&lt;/p&gt;\n  \n  &lt;p&gt;No characters are encoded. This value is required when you are using forms that have a file upload control&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;From &lt;a href=&quot;https://www.w3schools.com/TAGs/att_form_enctype.asp&quot; rel=&quot;nofollow noreferrer&quot;&gt;W3Schools&lt;/a&gt;&lt;/p&gt;\n    "]},"randomTags":[{"name":"css-selectors","slug":"css-selectors"},{"name":"variable-length-array","slug":"variable-length-array"},{"name":"double-quotes","slug":"double-quotes"},{"name":"c89","slug":"c89"},{"name":"c++-standard-library","slug":"c++-standard-library"},{"name":"reshape2","slug":"reshape2"},{"name":"excel","slug":"excel"},{"name":"latitude-longitude","slug":"latitude-longitude"},{"name":"scriptlet","slug":"scriptlet"},{"name":"href","slug":"href"},{"name":"database-design","slug":"database-design"},{"name":"python-datamodel","slug":"python-datamodel"},{"name":"http-redirect","slug":"http-redirect"},{"name":"httpurlconnection","slug":"httpurlconnection"},{"name":"jquery-selectors","slug":"jquery-selectors"},{"name":"thread-safety","slug":"thread-safety"},{"name":"tostring","slug":"tostring"},{"name":"multithreading","slug":"multithreading"},{"name":"dangling-pointer","slug":"dangling-pointer"},{"name":"dimension","slug":"dimension"}]},"__N_SSG":true}