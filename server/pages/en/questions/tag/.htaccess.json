{"pageProps":{"data":{"count":1,"rows":[{"id":190,"title":"Reference: mod_rewrite, URL rewriting and \"pretty links\" explained","slug":"reference:-mod_rewrite-url-rewriting-and-\"pretty-links\"-explained-1657384905504","postType":"QUESTION","createdAt":"2022-07-09T16:41:45.000Z","updatedAt":"2022-07-09T16:41:45.000Z","tags":[{"id":697,"name":".htaccess","slug":".htaccess","createdAt":"2022-07-09T16:41:45.000Z","updatedAt":"2022-07-09T16:41:45.000Z","Questions_Tags":{"questionId":190,"tagId":697}}]}]},"slug":".htaccess","page":1,"answers":{"190":["\n&lt;p&gt;To understand what mod_rewrite does you first need to understand how a web server works. A web server responds to &lt;a href=&quot;http://en.wikipedia.org/wiki/Http&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;HTTP requests&lt;/em&gt;&lt;/a&gt;. An HTTP request at its most basic level looks like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;GET /foo/bar.html HTTP/1.1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is the simple request of a browser to a web server requesting the &lt;em&gt;URL&lt;/em&gt; &lt;code&gt;/foo/bar.html&lt;/code&gt; from it. It is important to stress that it does not request a &lt;em&gt;file&lt;/em&gt;, it requests just some arbitrary URL. The request may also look like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;GET /foo/bar?baz=42 HTTP/1.1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is just as valid a request for a URL, and it has more obviously nothing to do with files.&lt;/p&gt;\n\n&lt;p&gt;The web server is an application listening on a port, accepting HTTP requests coming in on that port and returning a response. A web server is entirely free to respond to any request in any way it sees fit/in any way you have configured it to respond. This response is not a file, it&apos;s an &lt;em&gt;HTTP response&lt;/em&gt; which may or may not have anything to do with physical files on any disk. A web server doesn&apos;t have to be Apache, there are many other web servers which are all just programs which run persistently and are attached to a port which respond to HTTP requests. You can write one yourself. This paragraph was intended to divorce you from any notion that URLs directly equal files, which is really important to understand. :)&lt;/p&gt;\n\n&lt;p&gt;The default configuration of most web servers is to look for a file that matches the URL on the hard disk. If the &lt;em&gt;document root&lt;/em&gt; of the server is set to, say, &lt;code&gt;/var/www&lt;/code&gt;, it may look whether the file &lt;code&gt;/var/www/foo/bar.html&lt;/code&gt; exists and serve it if so. If the file ends in &quot;.php&quot; it will invoke the PHP interpreter and &lt;em&gt;then&lt;/em&gt; return the result. All this association is completely configurable; a file doesn&apos;t have to end in &quot;.php&quot; for the web server to run it through the PHP interpreter, and the URL doesn&apos;t have to match any particular file on disk for something to happen.&lt;/p&gt;\n\n&lt;p&gt;mod_rewrite is a way to &lt;em&gt;rewrite&lt;/em&gt; the internal request handling. When the web server receives a request for the URL &lt;code&gt;/foo/bar&lt;/code&gt;, you can &lt;em&gt;rewrite&lt;/em&gt; that URL into something else before the web server will look for a file on disk to match it. Simple example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;RewriteEngine On\nRewriteRule   /foo/bar /foo/baz\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This rule says &lt;em&gt;whenever a request matches &quot;/foo/bar&quot;, rewrite it to &quot;/foo/baz&quot;.&lt;/em&gt; The request will then be handled as if &lt;code&gt;/foo/baz&lt;/code&gt; had been requested instead. This can be used for various effects, for example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;RewriteRule (.*) $1.html\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This rule matches anything (&lt;code&gt;.*&lt;/code&gt;) and &lt;em&gt;captures&lt;/em&gt; it (&lt;code&gt;(..)&lt;/code&gt;), then rewrites it to append &quot;.html&quot;. In other words, if &lt;code&gt;/foo/bar&lt;/code&gt; was the requested URL, it will be handled as if &lt;code&gt;/foo/bar.html&lt;/code&gt; had been requested. See &lt;a href=&quot;http://regular-expressions.info&quot; rel=&quot;noreferrer&quot;&gt;http://regular-expressions.info&lt;/a&gt; for more information about regular expression matching, capturing and replacements.&lt;/p&gt;\n\n&lt;p&gt;Another often encountered rule is this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;RewriteRule (.*) index.php?url=$1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This, again, matches anything and rewrites it to the file index.php with the originally requested URL appended in the &lt;code&gt;url&lt;/code&gt; query parameter. I.e., for any and all requests coming in, the file index.php is executed and this file will have access to the original request in &lt;code&gt;$_GET[&apos;url&apos;]&lt;/code&gt;, so it can do anything it wants with it.&lt;/p&gt;\n\n&lt;p&gt;Primarily you put these rewrite rules into your &lt;em&gt;web server configuration file&lt;/em&gt;. Apache also allows* you to put them into a file called &lt;code&gt;.htaccess&lt;/code&gt; within your document root (i.e. next to your .php files).&lt;/p&gt;\n\n&lt;p&gt;&lt;sub&gt;* &lt;em&gt;If&lt;/em&gt; allowed by the primary Apache configuration file; it&apos;s optional, but often enabled.&lt;/sub&gt;&lt;/p&gt;\n\n&lt;h1&gt;What mod_rewrite does &lt;em&gt;not&lt;/em&gt; do&lt;/h1&gt;\n\n&lt;p&gt;mod_rewrite does not magically make all your URLs &quot;pretty&quot;. This is a common misunderstanding. If you have this link in your web site:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&quot;/my/ugly/link.php?is=not&amp;amp;amp;very=pretty&quot;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;there&apos;s nothing mod_rewrite can do to make that pretty. In order to make this a pretty link, you have to:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Change the link to a pretty link:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&quot;/my/pretty/link&quot;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use mod_rewrite on the server to handle the request to the URL &lt;code&gt;/my/pretty/link&lt;/code&gt; using any one of the methods described above.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;em&gt;(One could use &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_substitute.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mod_substitute&lt;/code&gt;&lt;/a&gt; in conjunction to transform outgoing HTML pages and their contained links. Though this is usally more effort than just updating your HTML resources.)&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;There&apos;s a lot mod_rewrite can do and very complex matching rules you can create, including chaining several rewrites, proxying requests to a completely different service or machine, returning specific HTTP status codes as responses, redirecting requests etc. It&apos;s very powerful and can be used to great good if you understand the fundamental HTTP request-response mechanism. It does &lt;em&gt;not&lt;/em&gt; automatically make your links pretty.&lt;/p&gt;\n\n&lt;p&gt;See the &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_rewrite.html&quot; rel=&quot;noreferrer&quot;&gt;official documentation&lt;/a&gt; for all the possible flags and options.&lt;/p&gt;\n    ","\n&lt;p&gt;To expand on &lt;a href=&quot;https://stackoverflow.com/a/20563773/1011145&quot;&gt;deceze&apos;s answer&lt;/a&gt;, I wanted to provide a few examples and explanation of some other mod_rewrite functionality.&lt;/p&gt;\n\n&lt;p&gt;All of the below examples assume that you have already included &lt;code&gt;RewriteEngine On&lt;/code&gt; in your &lt;code&gt;.htaccess&lt;/code&gt; file.&lt;/p&gt;\n\n&lt;h1&gt;Rewrite Example&lt;/h1&gt;\n\n&lt;p&gt;Lets take this example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;RewriteRule ^blog/([0-9]+)/([A-Za-z0-9-\\+]+)/?$ /blog/index.php?id=$1&amp;amp;title=$2 [NC,L,QSA]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The rule is split into 4 sections:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;RewriteRule&lt;/code&gt; - starts the rewrite rule&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;^blog/([0-9]+)/([A-Za-z0-9-\\+]+)/?$&lt;/code&gt; - This is called the pattern, however I&apos;ll just refer to it as the left hand side of the rule - what you want to rewrite from&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;blog/index.php?id=$1&amp;amp;title=$2&lt;/code&gt; - called the substitution, or right hand side of a rewrite rule - what you want to rewrite to&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;[NC,L,QSA]&lt;/code&gt; are flags for the rewrite rule, separated by a comma, which I will explain more on later&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The above rewrite would allow you to link to something like &lt;code&gt;/blog/1/foo/&lt;/code&gt; and it would actually load &lt;code&gt;/blog/index.php?id=1&amp;amp;title=foo&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Left hand side of the rule&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;^&lt;/code&gt; indicates the start of the page name - so it will rewrite &lt;code&gt;example.com/blog/...&lt;/code&gt; but not &lt;code&gt;example.com/foo/blog/...&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Each set of &lt;code&gt;()&lt;/code&gt; parentheses represents a regular expression that we can capture as a variable in the right hand side of the rule. In this example:\n\n&lt;ul&gt;\n&lt;li&gt;The first set of brackets - &lt;code&gt;([0-9]+)&lt;/code&gt; - matches a string with a minimum of 1 character in length and with only numeric values (i.e. 0-9). This can be referenced with &lt;code&gt;$1&lt;/code&gt; in the right hand side of the rule&lt;/li&gt;\n&lt;li&gt;The second set of parentheses matches a string with a minimum of 1 character in length, containing only alphanumeric characters (A-Z, a-z, or 0-9) or &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; (note &lt;code&gt;+&lt;/code&gt; is escaped with a backslash as without escaping it this will execute as a &lt;a href=&quot;http://www.regular-expressions.info/repeat.html&quot; rel=&quot;noreferrer&quot;&gt;regex repetition character&lt;/a&gt;). This can be referenced with &lt;code&gt;$2&lt;/code&gt; in the right hand side of the rule&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;?&lt;/code&gt; means that the preceding character is optional, so in this case both &lt;code&gt;/blog/1/foo/&lt;/code&gt; and &lt;code&gt;/blog/1/foo&lt;/code&gt; would rewrite to the same place&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$&lt;/code&gt; indicates this is the end of the string we want to match&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Flags&lt;/h2&gt;\n\n&lt;p&gt;These are options that are added in square brackets at the end of your rewrite rule to specify certain conditions. Again, there are a lot of different flags which you can read up on in &lt;a href=&quot;http://httpd.apache.org/docs/2.2/rewrite/flags.html&quot; rel=&quot;noreferrer&quot;&gt;the documentation&lt;/a&gt;, but I&apos;ll go through some of the more common flags:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;NC\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The no case flag means that the rewrite rule is case insensitive, so for the example rule above this would mean that both &lt;code&gt;/blog/1/foo/&lt;/code&gt; and &lt;code&gt;/BLOG/1/foo/&lt;/code&gt; (or any variation of this) would be matched.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;L\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The last flag indicates that this is the last rule that should be processed. This means that if and only if this rule matches, no further rules will be evaluated in the current rewrite processing run. If the rule does not match, all other rules will be tried in order as usual. If you do not set the &lt;code&gt;L&lt;/code&gt; flag, all following rules will be applied to the &lt;em&gt;rewritten&lt;/em&gt; URL afterwards.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;END\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since Apache 2.4 you can also use the &lt;code&gt;[END]&lt;/code&gt; flag. A matching rule with it will &lt;em&gt;completely&lt;/em&gt; terminate further alias/rewrite processing. (Whereas the &lt;code&gt;[L]&lt;/code&gt; flag can oftentimes trigger a second round, for example when rewriting into or out of subdirectories.)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;QSA\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The query string append flag allows us to pass in extra variables to the specified URL which will get added to the original get parameters. For our example this means that something like &lt;code&gt;/blog/1/foo/?comments=15&lt;/code&gt; would load &lt;code&gt;/blog/index.php?id=1&amp;amp;title=foo&amp;amp;comments=15&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;R\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This flag isn&apos;t one I used in the example above, but is one I thought is worth mentioning. This allows you to specify a http redirect, with the option to include a status code (e.g. &lt;code&gt;R=301&lt;/code&gt;). For example if you wanted to do a 301 redirect on /myblog/ to /blog/ you would simply write a rule something like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;RewriteRule ^/myblog/(*.)$ /blog/$1 [R=301,QSA,L]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Rewrite Conditions&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html#rewritecond&quot; rel=&quot;noreferrer&quot;&gt;Rewrite conditions&lt;/a&gt; make rewrites even more powerful, allowing you to specify rewrites for more specific situations. There are a lot of conditions which you can read about in &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html#rewritecond&quot; rel=&quot;noreferrer&quot;&gt;the documentation&lt;/a&gt;, but I&apos;ll touch on a few common examples and explain them:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# if the host doesn&apos;t start with www. then add it and redirect\nRewriteCond %{HTTP_HOST} !^www\\.\nRewriteRule ^ http://www.%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is a very common practice, which will prepend your domain with &lt;code&gt;www.&lt;/code&gt; (if it isn&apos;t there already) and execute a 301 redirect. For example, loading up &lt;code&gt;http://example.com/blog/&lt;/code&gt; it would redirect you to &lt;code&gt;http://www.example.com/blog/&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# if it cant find the image, try find the image on another domain\nRewriteCond %{REQUEST_URI} \\.(jpg|jpeg|gif|png)$ [NC]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule (.*)$ http://www.example.com/$1 [L]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is slightly less common, but is a good example of a rule that doesn&apos;t execute if the filename is a directory or file that exists on the server.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;%{REQUEST_URI} \\.(jpg|jpeg|gif|png)$ [NC]&lt;/code&gt; will only execute the rewrite for files with a file extension of jpg, jpeg, gif or png (case insensitive). &lt;/li&gt;\n&lt;li&gt;&lt;code&gt;%{REQUEST_FILENAME} !-f&lt;/code&gt; will check to see if the file exists on the current server, and only execute the rewrite if it doesn&apos;t&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;%{REQUEST_FILENAME} !-d&lt;/code&gt; will check to see if the file exists on the current server, and only execute the rewrite if it doesn&apos;t&lt;/li&gt;\n&lt;li&gt;The rewrite will attempt to load the same file on another domain&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h3&gt;References&lt;/h3&gt;\n\n&lt;p&gt;Stack Overflow has &lt;em&gt;many&lt;/em&gt; other great resources to get started:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://serverfault.com/questions/214512/redirect-change-urls-or-redirect-http-to-https-in-apache-everything-you-ever&quot;&gt;Serverfault: &lt;strong&gt;Everything you ever wanted to know about mod_rewrite&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;\n&lt;sup&gt;(Keep in mind to remove the slash in &lt;code&gt;^/&lt;/code&gt; pattern prefixes for &lt;code&gt;.htaccess&lt;/code&gt; usage.)&lt;/sup&gt;\n&lt;/li&gt;\n&lt;li&gt;Do&apos;s and Dont&apos;s in &lt;a href=&quot;https://stackoverflow.com/questions/286004/hidden-features-of-mod-rewrite&quot;&gt;Hidden features of mod_rewrite&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Look through our &lt;a href=&quot;https://stackoverflow.com/questions/tagged/mod-rewrite?sort=frequent&quot;&gt;most popular mod-rewrite&lt;/a&gt; questions and answers.&lt;/li&gt;\n&lt;li&gt;Apache &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/remapping.html&quot; rel=&quot;noreferrer&quot;&gt;redirecting and remapping&lt;/a&gt; guide.&lt;/li&gt;\n&lt;li&gt;AskApache &lt;a href=&quot;http://www.askapache.com/htaccess/htaccess.html&quot; rel=&quot;noreferrer&quot;&gt;ultimate .htaccess guide&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;And the &lt;a href=&quot;/questions/tagged/mod-rewrite&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;mod-rewrite&apos;&quot; rel=&quot;tag&quot;&gt;mod-rewrite&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/tags/mod-rewrite/info&quot;&gt;tag wiki references&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;And newcomer-friendly regex overviews even:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Our &lt;a href=&quot;/questions/tagged/regex&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;regex&apos;&quot; rel=&quot;tag&quot;&gt;regex&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/tags/regex/info&quot;&gt;tag wiki&lt;/a&gt; for a syntax compendium.&lt;/li&gt;\n&lt;li&gt;And the short &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/intro.html#regex&quot; rel=&quot;noreferrer&quot;&gt;Apache regex summary&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Else &lt;a href=&quot;http://www.regular-expressions.info/quickstart.html&quot; rel=&quot;noreferrer&quot;&gt;regexp.info&lt;/a&gt; for easy-to-understand basics.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Oft-used placeholders&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;.*&lt;/code&gt; matches anything, even an empty string. You don&apos;t want to use this pattern everywhere, but often in the last fallback rule.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;[^/]+&lt;/code&gt; is more often used for path segments. It matches anything but the forward slash.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\\d+&lt;/code&gt; only matches numeric strings.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\\w+&lt;/code&gt; matches alphanumeric characters. It&apos;s basically shorthand for &lt;code&gt;[A-Za-z0-9_]&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;[\\w\\-]+&lt;/code&gt; for &quot;slug&quot;-style path segments, using letters, numbers, dash &lt;code&gt;-&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;_&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;[\\w\\-.,]+&lt;/code&gt; adds periods and commas. Prefer an escaped &lt;code&gt;\\-&lt;/code&gt; dash in &lt;code&gt;[]&lt;/code&gt; charclasses.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\\.&lt;/code&gt; denotes a literal period. Otherwise &lt;code&gt;.&lt;/code&gt; outside of &lt;code&gt;[]&lt;/code&gt; is placeholder for any symbol.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Each of these placeholders is usually wrapped in &lt;code&gt;()&lt;/code&gt; parentheses as capture group. And the whole pattern often in &lt;code&gt;^$&lt;/code&gt; start + end markers. Quoting &quot;patterns&quot; is optional.&lt;/p&gt;\n\n&lt;h1&gt;RewriteRules&lt;/h1&gt;\n\n&lt;p&gt;The following examples are PHP-centric and a bit more incremental, easier to adapt for similar cases.\nThey&apos;re just summaries, often link to more variations or detailed Q&amp;amp;As.&lt;/p&gt;\n\n\n\n&lt;ul&gt;\n&lt;li&gt;&lt;h3&gt;Static mapping &lt;br&gt;  &lt;kbd&gt;&lt;code&gt;/contact&lt;/code&gt;&lt;/kbd&gt;, &lt;kbd&gt;&lt;code&gt;/about&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;Shortening a few page names to internal file schemes is most simple:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteRule ^contact$  templ/contact.html\n RewriteRule ^about$    about.php\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Numeric identifiers &lt;br&gt;  &lt;kbd&gt;&lt;code&gt;/object/123&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;Introducing shortcuts like &lt;code&gt;http://example.com/article/531&lt;/code&gt; to existing PHP scripts is also easy. The numeric placeholder can just be remapped to a &lt;code&gt;$_GET&lt;/code&gt; parameter:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteRule ^article/(\\d+)$    article-show.php?id=$1\n #                      \n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Slug-style placeholders &lt;br&gt;  &lt;kbd&gt;&lt;code&gt;/article/with-some-title-slug&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;You can easily extend that rule to allow for &lt;code&gt;/article/title-string&lt;/code&gt; placeholders:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteRule ^article/([\\w-]+)$    article-show.php?title=$1\n #                       \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that &lt;em&gt;your script&lt;/em&gt; &lt;strong&gt;must&lt;/strong&gt; be able (or be adapted) to map those titles back to database-ids. RewriteRules alone can&apos;t create or guess information out of thin air.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Slugs with numeric prefixes &lt;br&gt;  &lt;kbd&gt;&lt;code&gt;/readable/123-plus-title&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;Therefore you&apos;ll often see mixed &lt;code&gt;/article/529-title-slug&lt;/code&gt; paths used in practice:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteRule ^article/(\\d+)-([\\w-]+)$    article.php?id=$1&amp;amp;title=$2\n #                      \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you could just skip passing the &lt;code&gt;title=$2&lt;/code&gt; anyway, because your script will typically rely on the database-id anyway. The &lt;code&gt;-title-slug&lt;/code&gt; has become arbitrary URL decoration.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Uniformity with alternative lists &lt;br&gt;  &lt;kbd&gt;&lt;code&gt;/foo/&lt;/code&gt;&lt;/kbd&gt; &lt;kbd&gt;&lt;code&gt;/bar/&lt;/code&gt;&lt;/kbd&gt; &lt;kbd&gt;&lt;code&gt;/baz/&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;If you have similar rules for multiple virtual page paths, then you can match and compact them with &lt;code&gt;|&lt;/code&gt; alternative lists. And again just reassign them to internal GET parameters:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; #                               \n RewriteRule ^(blog|post|user)/(\\w+)$  disp.php?type=$1&amp;amp;id=$2\n #               \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can split them out into individual &lt;code&gt;RewriteRule&lt;/code&gt;s should this get too complex.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Dispatching related URLs to different backends &lt;br&gt;  &lt;kbd&gt;&lt;code&gt;/date/SWITCH/backend&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;A more practical use of alternative lists are mapping request paths to distinct scripts. For example to provide uniform URLs for an older and a newer web application based on dates:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; #                   \n #                                    \n RewriteRule ^blog/(2009|2010|2011)/([\\d-]+)/?$ old/blog.php?date=$2\n RewriteRule ^blog/(\\d+)/([\\d-]+)/?$  modern/blog/index.php?start=$2\n #                          \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This simply remaps 2009-2011 posts onto one script, and all other years implicitly to another handler.\nNote the &lt;em&gt;more specific rule coming first&lt;/em&gt;. Each script might use different GET params.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Other delimiters than just &lt;code&gt;/&lt;/code&gt; path slashes &lt;br&gt;  &lt;kbd&gt;&lt;code&gt;/user-123-name&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;You&apos;re most commonly seeing RewriteRules to simulate a virtual directory structure. But you&apos;re not forced to be uncreative. You can as well use &lt;code&gt;-&lt;/code&gt; hyphens for segmenting or structure.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteRule ^user-(\\d+)$    show.php?what=user&amp;amp;id=$1\n #                   \n # This could use `(\\w+)` alternatively for user names instead of ids.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For the also common &lt;kbd&gt;&lt;code&gt;/wiki:section:Page_Name&lt;/code&gt;&lt;/kbd&gt; scheme:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteRule ^wiki:(\\w+):(\\w+)$  wiki.php?sect=$1&amp;amp;page=$2 \n #                          \n #                         \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Occasionally it&apos;s suitable to alternate between &lt;code&gt;/&lt;/code&gt;-delimiters and &lt;code&gt;:&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; in the same rule even. Or have two RewriteRules again to map variants onto different scripts.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Optional trailing &lt;code&gt;/&lt;/code&gt; slash &lt;br&gt;  &lt;kbd&gt;&lt;code&gt;/dir&lt;/code&gt;&lt;/kbd&gt; = &lt;kbd&gt;&lt;code&gt;/dir/&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;When opting for directory-style paths, you can make it reachable with and without a final &lt;kbd&gt;/&lt;/kbd&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteRule ^blog/([\\w-]+)/?$  blog/show.php?id=$1\n #                         \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now this handles both &lt;code&gt;http://example.com/blog/123&lt;/code&gt; and &lt;code&gt;/blog/123/&lt;/code&gt;. And the &lt;kbd&gt;&lt;code&gt;/?$&lt;/code&gt;&lt;/kbd&gt; approach is easy to append onto any other RewriteRule.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Flexible segments for virtual paths  &lt;br&gt;  &lt;kbd&gt;&lt;code&gt;.*/.*/.*/.*&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;Most rules you&apos;ll encounter map a constrained set of &lt;code&gt;//&lt;/code&gt; resource path segments to individual GET parameters. Some scripts &lt;a href=&quot;https://stackoverflow.com/q/3655893&quot;&gt;handle a variable number of options&lt;/a&gt; however.\nThe Apache regexp engine doesn&apos;t allow optionalizing an arbitrary number of them. But you can easily expand it into a rule block yourself:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; Rewriterule ^(\\w+)/?$                in.php?a=$1\n Rewriterule ^(\\w+)/(\\w+)/?$          in.php?a=$1&amp;amp;b=$2\n Rewriterule ^(\\w+)/(\\w+)/(\\w+)/?$    in.php?a=$1&amp;amp;b=$2&amp;amp;c=$3\n #              \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you need up to five path segments, then copy this scheme along into five rules. You can of course use a more specific &lt;code&gt;[^/]+&lt;/code&gt; placeholder each.\nHere the ordering isn&apos;t as important, as neither overlaps. So having the most frequently used paths first is okay.&lt;/p&gt;\n\n&lt;p&gt;Alternatively you can utilize PHPs array parameters via &lt;code&gt;?p[]=$1&amp;amp;p[]=$2&amp;amp;p[]=3&lt;/code&gt; query string here - if your script merely prefers them pre-split.\n(Though it&apos;s more common to just use a catch-all rule, and let the script itself expand the segments out of the REQUEST_URI.)&lt;/p&gt;\n\n&lt;p&gt;See also: &lt;a href=&quot;https://stackoverflow.com/questions/3655893&quot;&gt;How do I transform my URL path segments into query string key-value pairs?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Optional segments  &lt;br&gt;  &lt;kbd&gt;&lt;code&gt;prefix/opt?/.*&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;A common variation is to have optional prefixes &lt;em&gt;within&lt;/em&gt; a rule. This usually makes sense if you have static strings or more constrained placeholders around:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  RewriteRule ^(\\w+)(?:/([^/]+))?/(\\w+)$  ?main=$1&amp;amp;opt=$2&amp;amp;suffix=$3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now the more complex pattern &lt;code&gt;(?:/([^/])+)?&lt;/code&gt; there simply wraps a &lt;em&gt;non-capturing&lt;/em&gt; &lt;code&gt;(?:)&lt;/code&gt; group, and makes it optional &lt;code&gt;)?&lt;/code&gt;. The contained\nplaceholder &lt;code&gt;([^/]+)&lt;/code&gt; would be substitution pattern &lt;code&gt;$2&lt;/code&gt;, but be empty if there&apos;s no middle &lt;code&gt;//&lt;/code&gt; path.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Capture the remainder &lt;br&gt;  &lt;kbd&gt;&lt;code&gt;/prefix/123-capture//*/whatever&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;As said before, you don&apos;t often want too generic rewrite patterns. It does however make sense to combine static and specific comparisons with a &lt;code&gt;.*&lt;/code&gt; sometimes.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteRule ^(specific)/prefix/(\\d+)(/.*)?$  speci.php?id=$2&amp;amp;otherparams=$2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This optionalized any &lt;code&gt;///&lt;/code&gt; trailing path segments. Which then of course requires the handling script to split them up, and &lt;em&gt;variabl-ify&lt;/em&gt; extracted parameters\nitself (which is what &lt;em&gt;Web-&quot;MVC&quot;&lt;/em&gt; frameworks do).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Trailing file &quot;extensions&quot; &lt;br&gt;  &lt;kbd&gt;&lt;code&gt;/old/path.HTML&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;URLs don&apos;t really have file extensions. Which is what this entire reference is about (= URLs are virtual locators, not necessarily a direct filesystem image).\nHowever if you had a 1:1 file mapping before, you &lt;em&gt;can&lt;/em&gt; craft simpler rules:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteRule  ^styles/([\\w\\.\\-]+)\\.css$  sass-cache.php?old_fn_base=$1\n RewriteRule  ^images/([\\w\\.\\-]+)\\.gif$  png-converter.php?load_from=$2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Other common uses are remapping obsolete &lt;code&gt;.html&lt;/code&gt; paths to newer &lt;code&gt;.php&lt;/code&gt; handlers, or just aliasing directory names only for individual (actual/real) files.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Ping-Pong (redirects and rewrites in unison) &lt;br&gt;  &lt;kbd&gt;&lt;code&gt;/ugly.html&lt;/code&gt;&lt;/kbd&gt;  &lt;kbd&gt;&lt;code&gt;/pretty&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;So at some point you&apos;re rewriting your HTML pages to carry only pretty links, as &lt;a href=&quot;https://stackoverflow.com/a/20563773#~What+mod_rewrite+does+not+do&quot;&gt;outlined by deceze&lt;/a&gt;.\nMeanwhile you&apos;ll still receive requests for the &lt;em&gt;old&lt;/em&gt; paths, sometimes even from bookmarks. As &lt;em&gt;workaround&lt;/em&gt;, you can ping-pong browsers to display/establish\nthe new URLs.&lt;/p&gt;\n\n&lt;p&gt;This common trick involves sending a 30x/Location &lt;em&gt;redirect&lt;/em&gt; whenever an incoming URL follows the obsolete/ugly naming scheme.\nBrowsers will then &lt;em&gt;rerequest&lt;/em&gt; the new/pretty URL, which afterwards is rewritten (just internally) to the original or new location.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; # redirect browser for old/ugly incoming paths\n RewriteRule ^old/teams\\.html$ /teams [R=301,QSA,END]\n\n # internally remap already-pretty incoming request\n RewriteRule ^teams$ teams.php        [QSA,END]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note how this example just uses &lt;code&gt;[END]&lt;/code&gt; instead of &lt;code&gt;[L]&lt;/code&gt; to safely alternate. For older Apache 2.2 versions you can use other workarounds, besides also remapping\nquery string parameters for example:\n&lt;a href=&quot;https://stackoverflow.com/questions/11629896/mod-rewrite-redirect-url-with-query-string-to-pretty-url&quot;&gt;Redirect ugly to pretty URL, remap  back to the ugly path, without infinite loops&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Spaces &lt;kbd&gt;&lt;/kbd&gt; in patterns &lt;br&gt; &lt;kbd&gt;&lt;code&gt;/this+that+&lt;/code&gt;&lt;/kbd&gt;&lt;/h3&gt;\n\n&lt;p&gt;It&apos;s not &lt;em&gt;that pretty&lt;/em&gt; in browser address bars, but you can use spaces in URLs. For rewrite patterns use backslash-escaped &lt;code&gt;\\&lt;/code&gt; spaces.\nElse just &lt;code&gt;&quot;&lt;/code&gt;-quote the whole pattern or substitution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteRule  &quot;^this [\\w ]+/(.*)$&quot;  &quot;index.php?id=$1&quot;  [L]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Clients serialize URLs with &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;%20&lt;/code&gt; for spaces. Yet in RewriteRules they&apos;re interpreted with literal characters for all relative path segments.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;em&gt;Frequent duplicates:&lt;/em&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;h3&gt;Catch-all for a &lt;a href=&quot;https://stackoverflow.com/questions/8595964/redirect-all-traffic-to-index-php-using-mod-rewrite&quot;&gt;central dispatcher&lt;/a&gt; / front-controller script&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteCond %{REQUEST_URI} !-f\n RewriteCond %{REQUEST_URI} !-d\n RewriteRule ^.*$     index.php   [L]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is often used by PHP frameworks or WebCMS / portal scripts. The actual path splitting then is handled in PHP using &lt;code&gt;$_SERVER[&quot;REQUEST_URI&quot;]&lt;/code&gt;. So conceptionally it&apos;s pretty much the opposite of URL handling &quot;per mod_rewrite&quot;. (Just use &lt;a href=&quot;https://httpd.apache.org/docs/2.4/rewrite/remapping.html#fallback-resource&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;FallBackResource&lt;/code&gt;&lt;/a&gt; instead.)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Remove &lt;code&gt;www.&lt;/code&gt; from hostname&lt;/h3&gt;\n\n&lt;p&gt;Note that this doesn&apos;t copy a query string along, etc.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; #                               \n RewriteCond %{HTTP_HOST} ^www\\.(.+)$ [NC]   \n RewriteRule ^(.*)$ http://%1/$1 [R=301,L]  \n #                        \n #             \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See also:&lt;br&gt;\n· &lt;a href=&quot;https://stackoverflow.com/questions/3634101/url-rewriting-for-different-protocols-in-htaccess&quot;&gt;URL rewriting for different protocols in .htaccess&lt;/a&gt;&lt;br&gt;\n· &lt;a href=&quot;https://stackoverflow.com/questions/234723/generic-htaccess-redirect-www-to-non-www&quot;&gt;Generic htaccess redirect www to non-www&lt;/a&gt;&lt;br&gt;\n· &lt;a href=&quot;https://stackoverflow.com/questions/4916222/htaccess-how-to-force-www-in-a-generic-way&quot;&gt;.htaccess - how to force &quot;www.&quot; in a generic way?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Note that RewriteCond/RewriteRule combos can be more complex, with matches (&lt;code&gt;%1&lt;/code&gt; and &lt;code&gt;$1&lt;/code&gt;) interacting in both directions even:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://httpd.apache.org/docs/2.4/images/rewrite_backreferences.png&quot; alt=&quot;References %1 and $2, %3 between RewriteRule and RewriteCond&quot;&gt;&lt;br&gt;\n&lt;sup&gt;&lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/intro.html&quot; rel=&quot;noreferrer&quot;&gt;Apache manual - mod_rewrite intro&lt;/a&gt;, Copyright 2015 The Apache Software Foundation, AL-2.0&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Redirect to &lt;code&gt;HTTPS://&lt;/code&gt;&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteCond %{SERVER_PORT} 80\n RewriteRule ^(.*)$ https://example.com/$1 [R,L]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See also: &lt;a href=&quot;https://wiki.apache.org/httpd/RewriteHTTPToHTTPS&quot; rel=&quot;noreferrer&quot;&gt;https://wiki.apache.org/httpd/RewriteHTTPToHTTPS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;&quot;Removing&quot; the PHP extension&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteCond %{REQUEST_FILENAME}.php -f\n RewriteRule ^(.+)$  $1.php  [L]  # or [END]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See also: &lt;a href=&quot;https://stackoverflow.com/questions/4908122/removing-the-php-extension-with-mod-rewrite&quot;&gt;Removing the .php extension with mod_rewrite&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Aliasing old .html paths to .php scripts&lt;/h3&gt;\n\n&lt;p&gt;See: &lt;a href=&quot;http://httpd.apache.org/docs/2.4/rewrite/remapping.html#backward-compatibility&quot; rel=&quot;noreferrer&quot;&gt;http://httpd.apache.org/docs/2.4/rewrite/remapping.html#backward-compatibility&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Rewrite from URL like &quot;/page&quot; to a script such as &quot;/index.php/page&quot;&lt;/h3&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/q/265898&quot;&gt;mod_rewrite, php and the .htaccess file&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Redirect subdomain to a folder&lt;/h3&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/questions/2978907/how-can-i-get-my-htaccess-to-work-subdomains&quot;&gt;How can i get my htaccess to work (subdomains)?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Prevalent &lt;code&gt;.htaccess&lt;/code&gt; pitfalls&lt;/h1&gt;\n\n&lt;p&gt;Now take this with a grain of salt. Not every advise can be generalized to all contexts.\nThis is just a simple summary of well-known and a few unobvious stumbling blocks:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;h3&gt;Enable &lt;code&gt;mod_rewrite&lt;/code&gt; and &lt;code&gt;.htaccess&lt;/code&gt;&lt;/h3&gt;\n\n&lt;p&gt;To actually use RewriteRules in per-directory configuration files you must:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Check that your server has &lt;a href=&quot;https://stackoverflow.com/questions/9234289/verify-if-htaccess-file-is-running&quot;&gt;&lt;code&gt;AllowOverride All&lt;/code&gt; enabled&lt;/a&gt;. Otherwise your per-directory &lt;code&gt;.htaccess&lt;/code&gt; directives will go ignored, and RewriteRules won&apos;t work.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Obviously &lt;a href=&quot;https://stackoverflow.com/questions/869092/how-to-enable-mod-rewrite-for-apache-2-2&quot;&gt;have &lt;code&gt;mod_rewrite&lt;/code&gt; enabled&lt;/a&gt; in your &lt;code&gt;httpd.conf&lt;/code&gt; modules section.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Prepend each list of rules with &lt;code&gt;RewriteEngine On&lt;/code&gt; still. While mod_rewrite is implicitly active in &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Directory&amp;gt;&lt;/code&gt; sections,\nthe per-directory &lt;code&gt;.htaccess&lt;/code&gt; files need it individually summoned. &lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;The leading slash &lt;code&gt;^/&lt;/code&gt; won&apos;t match&lt;/h3&gt;\n\n&lt;p&gt;You shouldn&apos;t start your &lt;code&gt;.htaccess&lt;/code&gt; RewriteRule patterns with &lt;code&gt;^/&lt;/code&gt; normally:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteRule ^/article/\\d+$  \n              \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is often seen in old tutorials. And it used to be correct for ancient Apache 1.x versions. Nowadays request paths are conveniently &lt;em&gt;fully &lt;strong&gt;directory-relative&lt;/strong&gt;&lt;/em&gt; in &lt;code&gt;.htaccess&lt;/code&gt; RewriteRules. Just leave the leading &lt;code&gt;/&lt;/code&gt; out.&lt;/p&gt;\n\n&lt;p&gt;· Note that the leading slash is still correct in &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; sections though. Which is why you often see it &lt;code&gt;^/?&lt;/code&gt; optionalized for rule parity.&lt;br&gt;\n· Or when using a &lt;code&gt;RewriteCond %{REQUEST_URI}&lt;/code&gt; you&apos;d still match for a leading &lt;code&gt;/&lt;/code&gt;.&lt;br&gt;\n· See also &lt;a href=&quot;https://webmasters.stackexchange.com/questions/27118/when-is-the-leading-slash-needed-in-mod-rewrite-patterns&quot;&gt;Webmaster.SE: When is the leading slash (/) needed in mod_rewrite patterns?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;&lt;code&gt;&amp;lt;IfModule *&amp;gt;&lt;/code&gt; wrappers begone!&lt;/h3&gt;\n\n&lt;p&gt;You&apos;ve probably seen this in many examples:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;IfModule mod_rewrite.c&amp;gt;\n   Rewrite \n&amp;lt;/IfModule&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It &lt;em&gt;does&lt;/em&gt; make sense in &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; sections - if it was combined with another fallback option, such as ScriptAliasMatch. (But nobody ever does that).  &lt;/li&gt;\n&lt;li&gt;And it&apos;s commonly distributed for default &lt;code&gt;.htaccess&lt;/code&gt; rulesets with many open source projects. There it&apos;s just meant as fallback, and keeps &quot;ugly&quot; URLs work as default.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;However you &lt;strong&gt;don&apos;t want&lt;/strong&gt; that usually in your own &lt;code&gt;.htaccess&lt;/code&gt; files. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Firstly, mod_rewrite does not randomly disengage. (If it did, you&apos;d have bigger problems). &lt;/li&gt;\n&lt;li&gt;Were it really be disabled, your RewriteRules still wouldn&apos;t work anyway.&lt;/li&gt;\n&lt;li&gt;It&apos;s meant to prevent HTTP &lt;code&gt;500&lt;/code&gt; errors. What it usually accomplishes is gracing your users with HTTP &lt;code&gt;404&lt;/code&gt; errors instead. (Not &lt;em&gt;so much&lt;/em&gt; more user-friendly if you think about it.)&lt;/li&gt;\n&lt;li&gt;Practically it just suppresses the more useful log entries, or server notification mails. You&apos;d be &lt;strong&gt;none the wiser&lt;/strong&gt; as to why your RewriteRules never work.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;What seems enticing as generalized safeguard, often turns out to be an obstacle in practice.&lt;/p&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Don&apos;t use &lt;code&gt;RewriteBase&lt;/code&gt; unless needed&lt;/h3&gt;\n\n&lt;p&gt;Many copy+paste examples contain a &lt;code&gt;RewriteBase /&lt;/code&gt; directive. Which happens to be the implicit default anyway. So you don&apos;t actually need this. It&apos;s a workaround for fancy VirtualHost rewriting schemes, and misguessed DOCUMENT_ROOT paths for some shared hosters.&lt;/p&gt;\n\n&lt;p&gt;It makes sense to use with individual web applications in deeper subdirectories. It can shorten RewriteRule patterns in such cases. Generally it&apos;s best to prefer relative path specifiers in per-directory rule sets.&lt;/p&gt;\n\n&lt;p&gt;See also &lt;a href=&quot;https://stackoverflow.com/questions/704102/how-does-rewritebase-work-in-htaccess&quot;&gt;How does RewriteBase work in .htaccess&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Disable &lt;code&gt;MultiViews&lt;/code&gt; when virtual paths overlap&lt;/h3&gt;\n\n&lt;p&gt;URL rewriting is primarily used for supporting &lt;em&gt;virtual&lt;/em&gt; incoming paths. Commonly you just have one dispatcher script (&lt;code&gt;index.php&lt;/code&gt;) or a few individual handlers (&lt;code&gt;articles.php&lt;/code&gt;, &lt;code&gt;blog.php&lt;/code&gt;, &lt;code&gt;wiki.php&lt;/code&gt;, ). The latter &lt;a href=&quot;https://stackoverflow.com/a/1298917&quot;&gt;might clash&lt;/a&gt; with similar virtual RewriteRule paths.&lt;/p&gt;\n\n&lt;p&gt;A request for &lt;code&gt;/article/123&lt;/code&gt; for example could map to &lt;code&gt;article.php&lt;/code&gt; with a &lt;code&gt;/123&lt;/code&gt; PATH_INFO implicitly. You&apos;d either have to guard your rules then with the commonplace &lt;code&gt;RewriteCond&lt;/code&gt; &lt;code&gt;!-f&lt;/code&gt;+&lt;code&gt;!-d&lt;/code&gt;, and/or disable PATH_INFO support, or perhaps just disable &lt;code&gt;Options -MultiViews&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Which is not to say you always &lt;em&gt;have to&lt;/em&gt;. Content-Negotiation is just an automatism to virtual resources.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Ordering is important&lt;/h3&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://serverfault.com/questions/214512/redirect-change-urls-or-redirect-http-to-https-in-apache-everything-you-ever&quot;&gt;Everything you ever wanted to know about mod_rewrite&lt;/a&gt;\nif you haven&apos;t already. Combining multiple RewriteRules often leads to interaction. This isn&apos;t something to prevent habitually per &lt;code&gt;[L]&lt;/code&gt; flag, but a scheme you&apos;ll embrace once versed.\nYou &lt;strong&gt;can &lt;em&gt;re-re-re&lt;/em&gt;write&lt;/strong&gt; virtual paths from one rule to another, until it reaches an actual target handler.&lt;/p&gt;\n\n&lt;p&gt;Still you&apos;d &lt;em&gt;often&lt;/em&gt; want to have the most specific rules (fixed string &lt;code&gt;/forum/&lt;/code&gt; patterns, or more restrictive placeholders &lt;code&gt;[^/.]+&lt;/code&gt;) in the &lt;em&gt;early&lt;/em&gt; rules.\nGeneric slurp-all rules (&lt;code&gt;.*&lt;/code&gt;) are better left to the &lt;em&gt;later&lt;/em&gt; ones. (An exception is a &lt;code&gt;RewriteCond -f/-d&lt;/code&gt; guard as primary block.)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Stylesheets and images stop working&lt;/h3&gt;\n\n&lt;p&gt;When you introduce virtual directory structures &lt;code&gt;/blog/article/123&lt;/code&gt; this impacts relative resource references in HTML (such as &lt;code&gt;&amp;lt;img src=mouse.png&amp;gt;&lt;/code&gt;).\nWhich can be solved by:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Only using server-absolute references &lt;code&gt;href=&quot;/old.html&quot;&lt;/code&gt; or &lt;code&gt;src=&quot;/logo.png&quot;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Often simply by adding &lt;code&gt;&amp;lt;base href=&quot;/index&quot;&amp;gt;&lt;/code&gt; into your HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section.\nThis implicitly rebinds relative references to what they were before.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;You could alternatively craft further RewriteRules to rebind &lt;code&gt;.css&lt;/code&gt; or &lt;code&gt;.png&lt;/code&gt; paths to their original locations.\nBut that&apos;s both unneeded, or incurs extra redirects and hampers caching.&lt;/p&gt;\n\n&lt;p&gt;See also: &lt;a href=&quot;https://stackoverflow.com/questions/27744603/css-js-and-images-do-not-display-with-pretty-url&quot;&gt;CSS, JS and images do not display with pretty url&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;RewriteConds just mask one RewriteRule&lt;/h3&gt;\n\n&lt;p&gt;A common misinterpetation is that a RewriteCond blocks multiple RewriteRules (because they&apos;re visually arranged together):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteCond %{SERVER_NAME} localhost\n RewriteRule ^secret  admin/tools.php\n RewriteRule ^hidden  sqladmin.cgi\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which it doesn&apos;t per default. You can &lt;a href=&quot;https://stackoverflow.com/questions/7218164/multiple-rewriterules-for-single-rewritecond-in-htaccess&quot;&gt;chain them&lt;/a&gt; using the &lt;code&gt;[S=2]&lt;/code&gt; flag. Else you&apos;ll have to repeat them. While sometimes you can craft an &quot;inverted&quot; primary rule to [END] the rewrite processing early.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;QUERY_STRING exempt from RewriteRules&lt;/h3&gt;\n\n&lt;p&gt;You can&apos;t match &lt;code&gt;RewriteRule index.php\\?x=y&lt;/code&gt;, because mod_rewrite compares just against relative paths per default. You can match them separately however via:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; RewriteCond %{QUERY_STRING} \\b(?:param)=([^&amp;amp;]+)(?:&amp;amp;|$)\n RewriteRule ^add/(.+)$  add/%1/$1  # \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See also &lt;a href=&quot;https://stackoverflow.com/questions/2252238/how-can-i-match-query-string-variables-with-mod-rewrite&quot;&gt;How can I match query string variables with mod_rewrite?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;&lt;code&gt;.htaccess&lt;/code&gt; vs. &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt;&lt;/h3&gt;\n\n&lt;p&gt;If you&apos;re using RewriteRules in a per-directory config file, then worrying about regex performance is pointless. Apache retains\ncompiled PCRE patterns longer than a PHP process with a common routing framework. For high-traffic sites you should however consider\nmoving rulesets into the vhost server configuration, once they&apos;ve been battle-tested.&lt;/p&gt;\n\n&lt;p&gt;In this case, prefer the optionalized &lt;code&gt;^/?&lt;/code&gt; directory separator prefix. This allows to move RewriteRules freely between PerDir and server\nconfig files.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Whenever something &lt;em&gt;doesn&apos;t work&lt;/em&gt;&lt;/h3&gt;\n\n&lt;p&gt;Fret not. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Compare &lt;code&gt;access.log&lt;/code&gt; and &lt;code&gt;error.log&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Often you can figure out how a RewriteRule misbehaves just from looking at your &lt;code&gt;error.log&lt;/code&gt; and &lt;code&gt;access.log&lt;/code&gt;.\nCorrelate access times to see which request path originally came in, and which path/file Apache couldn&apos;t resolve to (error 404/500).&lt;/p&gt;\n\n&lt;p&gt;This doesn&apos;t tell you which RewriteRule is the culprit. But inaccessible final paths like &lt;code&gt;/docroot/21-.itle?index.php&lt;/code&gt; may give away where to inspect further.\nOtherwise disable rules until you get some predictable paths.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Enable the RewriteLog&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://wiki.apache.org/httpd/RewriteLog&quot; rel=&quot;noreferrer&quot;&gt;Apache RewriteLog&lt;/a&gt; docs. For debugging you can enable it in the vhost sections:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# Apache 2.2\nRewriteLogLevel 5\nRewriteLog /tmp/rewrite.log\n\n# Apache 2.4\nLogLevel alert rewrite:trace5\n#ErrorLog /tmp/rewrite.log\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That yields a detailed summary of how incoming request paths get modified by each rule:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[..] applying pattern &apos;^test_.*$&apos; to uri &apos;index.php&apos;\n[..] strip per-dir prefix: /srv/www/vhosts/hc-profi/index.php -&amp;gt; index.php\n[..] applying pattern &apos;^index\\.php$&apos; to uri &apos;index.php&apos;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which helps to narrow down overly generic rules and regex mishaps.&lt;/p&gt;\n\n&lt;p&gt;See also:&lt;br&gt;\n· &lt;a href=&quot;https://stackoverflow.com/questions/945047/htaccess-not-working-mod-rewrite&quot;&gt;.htaccess not working (mod_rewrite)&lt;/a&gt;&lt;br&gt;\n· &lt;a href=&quot;https://stackoverflow.com/questions/9153262/tips-for-debugging-htaccess-rewrite-rules&quot;&gt;Tips for debugging .htaccess rewrite rules&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Before asking your own question&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;As you might know, Stack Overflow is very suitable for asking questions on mod_rewrite. Make them &lt;a href=&quot;https://stackoverflow.com/help/on-topic&quot;&gt;on-topic&lt;/a&gt;\nby including prior research and attempts (avoid redundant answers), demonstrate basic &lt;a href=&quot;/questions/tagged/regex&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;regex&apos;&quot; rel=&quot;tag&quot;&gt;regex&lt;/a&gt; understanding, and:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Include &lt;em&gt;full&lt;/em&gt; examples of input URLs, falsly rewritten target paths, your real directory structure.&lt;/li&gt;\n&lt;li&gt;The complete RewriteRule set, but &lt;em&gt;also&lt;/em&gt; single out the presumed defective one.&lt;/li&gt;\n&lt;li&gt;Apache and PHP versions, OS type, filesystem, DOCUMENT_ROOT, and PHPs &lt;code&gt;$_SERVER&lt;/code&gt; environment if it&apos;s about a parameter mismatch.&lt;/li&gt;\n&lt;li&gt;An excerpt from your &lt;code&gt;access.log&lt;/code&gt; and &lt;code&gt;error.log&lt;/code&gt; to verify what the existing rules resolved to. Better yet, a &lt;code&gt;rewrite.log&lt;/code&gt; summary.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This nets quicker and more exact answers, and makes them more useful to others.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Comment your &lt;code&gt;.htaccess&lt;/code&gt;&lt;/h3&gt;\n\n&lt;p&gt;If you copy examples from somewhere, take care to include a &lt;code&gt;# comment and origin link&lt;/code&gt;. While it&apos;s merely bad manners to omit attribution,\nit often really hurts maintenance later. Document any code or tutorial source. In particular while unversed you should be\nall the more interested in not treating them like magic blackboxes.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;It&apos;s not &quot;SEO&quot;-URLs&lt;/h3&gt;\n\n&lt;p&gt;&lt;em&gt;Disclaimer: Just a pet peeve.&lt;/em&gt; You often hear pretty URL rewriting schemes referred to as &quot;SEO&quot; links or something. While this is useful for googling examples, it&apos;s a dated misnomer.&lt;/p&gt;\n\n&lt;p&gt;None of the modern search engines are really disturbed by &lt;code&gt;.html&lt;/code&gt; and &lt;code&gt;.php&lt;/code&gt; in path segments, or &lt;code&gt;?id=123&lt;/code&gt; query strings for that matter. Search engines of old, such as AltaVista, &lt;em&gt;did&lt;/em&gt; avoid crawling websites with potentially ambigious access paths. Modern crawlers are often even craving for deep web resources.&lt;/p&gt;\n\n&lt;p&gt;What &quot;pretty&quot; URLs should conceptionally be used for is making websites &lt;strong&gt;&lt;em&gt;user-friendly&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Having readable and obvious resource schemes.&lt;/li&gt;\n&lt;li&gt;Ensuring URLs are long-lived (AKA &lt;a href=&quot;https://en.wikipedia.org/wiki/Permalink&quot; rel=&quot;noreferrer&quot;&gt;permalinks&lt;/a&gt;).&lt;/li&gt;\n&lt;li&gt;Providing discoverability through &lt;code&gt;/common/tree/nesting&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;However don&apos;t sacrifice unique requirements for conformism.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\n&lt;h3&gt;Tools&lt;/h3&gt;\n\n&lt;p&gt;There are various online tools to generate RewriteRules for most GET-parameterish URLs:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.generateit.net/mod-rewrite/index.php&quot; rel=&quot;noreferrer&quot;&gt;http://www.generateit.net/mod-rewrite/index.php&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.ipdistance.com/mod_rewrite.php&quot; rel=&quot;noreferrer&quot;&gt;http://www.ipdistance.com/mod_rewrite.php&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://webtools.live2support.com/misc_rewrite.php&quot; rel=&quot;noreferrer&quot;&gt;http://webtools.live2support.com/misc_rewrite.php&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Mostly just output &lt;code&gt;[^/]+&lt;/code&gt; generic placeholders, but likely suffices for trivial sites.&lt;/p&gt;\n    ","\n&lt;h2&gt;Alternatives to mod_rewrite&lt;/h2&gt;\n\n&lt;p&gt;Many basic virtual URL schemes can be achieved without using RewriteRules. Apache allows PHP scripts to be invoked without &lt;code&gt;.php&lt;/code&gt; extension, and with a virtual &lt;code&gt;PATH_INFO&lt;/code&gt; argument.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;h3&gt;Use the &lt;a href=&quot;https://stackoverflow.com/questions/2261951/what-exactly-is-path-info-in-php&quot;&gt;PATH_INFO&lt;/a&gt;, Luke&lt;/h3&gt;\n\n&lt;p&gt;Nowadays &lt;a href=&quot;http://httpd.apache.org/docs/2.4/en/mod/core.html#acceptpathinfo&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;AcceptPathInfo On&lt;/code&gt;&lt;/a&gt; is often enabled by default. Which basically allows &lt;code&gt;.php&lt;/code&gt; and other resource URLs to carry a virtual argument:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;http://example.com/script.php/virtual/path\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now this &lt;code&gt;/virtual/path&lt;/code&gt; shows up in PHP as &lt;a href=&quot;https://secure.php.net/manual/en/reserved.variables.server.php#~PATH_INFO&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;$_SERVER[&quot;PATH_INFO&quot;]&lt;/code&gt;&lt;/a&gt; where you can handle any extra arguments however you like.&lt;/p&gt;\n\n&lt;p&gt;This isn&apos;t as convenient as having Apache separate input path segments into &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt; and passing them as distinct &lt;code&gt;$_GET&lt;/code&gt; variables to PHP. It&apos;s merely emulating &quot;pretty URLs&quot; with less configuration effort.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Enable &lt;a href=&quot;http://httpd.apache.org/docs/2.4/mod/mod_negotiation.html&quot; rel=&quot;noreferrer&quot;&gt;MultiViews&lt;/a&gt; to hide the &lt;code&gt;.php&lt;/code&gt; extension&lt;/h3&gt;\n\n&lt;p&gt;The simplest option to also eschew &lt;code&gt;.php&lt;/code&gt; &quot;file extensions&quot; in URLs is enabling:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Options +MultiViews\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This has Apache select &lt;code&gt;article.php&lt;/code&gt; for HTTP requests on &lt;code&gt;/article&lt;/code&gt; due to the matching basename. And this works well together with the aforementioned PATH_INFO feature. So you can just use URLs like &lt;code&gt;http://example.com/article/virtual/title&lt;/code&gt;. Which makes sense if you have a traditional web application with multiple PHP invocation points/scripts.&lt;/p&gt;\n\n&lt;p&gt;Note that MultiViews has a different/broader purpose though. It incurs a &lt;em&gt;very minor&lt;/em&gt; performance penalty, because Apache always looks for other files with matching basenames. It&apos;s actually meant for &lt;a href=&quot;https://en.wikipedia.org/wiki/Content_negotiation&quot; rel=&quot;noreferrer&quot;&gt;Content-Negotiation&lt;/a&gt;, so browsers receive the best alternative among available resources (such as &lt;code&gt;article.en.php&lt;/code&gt;, &lt;code&gt;article.fr.php&lt;/code&gt;, &lt;code&gt;article.jp.mp4&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;SetType or SetHandler for extensionless &lt;code&gt;.php&lt;/code&gt; scripts&lt;/h3&gt;\n\n&lt;p&gt;A more directed approach to avoid carrying around &lt;code&gt;.php&lt;/code&gt; suffixes in URLs is &lt;a href=&quot;http://php.net/manual/en/security.hiding.php&quot; rel=&quot;noreferrer&quot;&gt;configuring the PHP handler&lt;/a&gt; for other file schemes. The simplest option is overriding the default MIME/handler type via &lt;code&gt;.htaccess&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;DefaultType application/x-httpd-php\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way you could just rename your &lt;code&gt;article.php&lt;/code&gt; script to just &lt;code&gt;article&lt;/code&gt; (without extension), but still have it processed as PHP script.&lt;/p&gt;\n\n&lt;p&gt;Now this can have some security and performance implications, because all extensionless files would be piped through PHP now. Therefore you can alternatively set this behaviour for individual files only:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;Files article&amp;gt;\n  SetHandler application/x-httpd-php\n  # or SetType \n&amp;lt;/Files&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is somewhat dependent on your server setup and the used PHP SAPI. Common alternatives include &lt;code&gt;ForceType application/x-httpd-php&lt;/code&gt; or &lt;code&gt;AddHandler php5-script&lt;/code&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Again take note that such settings propagate from one &lt;code&gt;.htaccess&lt;/code&gt; to subfolders. You always should disable script execution (&lt;code&gt;SetHandler None&lt;/code&gt; and &lt;code&gt;Options -Exec&lt;/code&gt; or &lt;code&gt;php_flag engine off&lt;/code&gt; etc.) for static resources, and upload/ directories etc.&lt;/p&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Other Apache rewriting schemes&lt;/h3&gt;\n\n&lt;p&gt;Among its many options, Apache provides &lt;code&gt;mod_alias&lt;/code&gt; features - which sometimes work just as well as &lt;code&gt;mod_rewrite&lt;/code&gt;s RewriteRules. Note that most of those must be set up in a &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; section however, not in per-directory &lt;code&gt;.htaccess&lt;/code&gt; config files.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_alias.html#scriptaliasmatch&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ScriptAliasMatch&lt;/code&gt;&lt;/a&gt; is primarily for CGI scripts, but also ought to works for PHP. It allows regexps just like any &lt;code&gt;RewriteRule&lt;/code&gt;. In fact it&apos;s perhaps the most robust option to configurate a catch-all front controller.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;And a plain &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_alias.html#alias&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Alias&lt;/code&gt;&lt;/a&gt; helps with a few simple rewriting schemes as well.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Even a plain &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/core.html#errordocument&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ErrorDocument&lt;/code&gt;&lt;/a&gt; directive could be used to let a PHP script handle virtual paths. Note that this is a kludgy workaround however, prohibits anything but GET requests, and floods the error.log by definition.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://httpd.apache.org/docs/2.2/urlmapping.html&quot; rel=&quot;noreferrer&quot;&gt;http://httpd.apache.org/docs/2.2/urlmapping.html&lt;/a&gt; for further tips.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;A frequent question about URL rewriting goes something like this:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;I currently have URLs that look like this:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://example.com/my-blog/entry.php?id=42&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://example.com/my-blog/entry.php?id=42&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://example.com/my-blog/entry.php?id=123&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://example.com/my-blog/entry.php?id=123&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;I made them pretty like this:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://example.com/my-blog/42--i-found-the-answer&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://example.com/my-blog/42--i-found-the-answer&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://example.com/my-blog/123--count-on-me&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://example.com/my-blog/123--count-on-me&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;By using this in my .htaccess file:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;RewriteRule my-blog/(\\d+)--i-found-the-answer my-blog/entry.php?id=$1 \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But I want them to look like this:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://example.com/my-blog/i-found-the-answer&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://example.com/my-blog/i-found-the-answer&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://example.com/my-blog/count-on-me&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://example.com/my-blog/count-on-me&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;How can I change my .htaccess file to make that work?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;p&gt;The simple answer is that you can&apos;t.&lt;/p&gt;\n&lt;h2&gt;Rewrite rules don&apos;t make ugly URLs pretty, they make pretty URLs ugly&lt;/h2&gt;\n&lt;p&gt;Whenever you type in a URL in a web browser, or follow a link, or display a page that references an image, etc, the browser makes a &lt;strong&gt;request&lt;/strong&gt; for a particular URL. That request ends up at a web server, and the web server gives a &lt;strong&gt;response&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;A &lt;em&gt;rewrite rule&lt;/em&gt; is simply a rule that says &quot;when the browser &lt;strong&gt;requests&lt;/strong&gt; a URL that looks like X, give them the same &lt;strong&gt;response&lt;/strong&gt; as if they&apos;d requested Y&quot;.&lt;/p&gt;\n&lt;p&gt;When we make rules to handle &quot;pretty URLs&quot;, the &lt;strong&gt;request&lt;/strong&gt; is the &lt;strong&gt;pretty URL&lt;/strong&gt;, and the &lt;strong&gt;response&lt;/strong&gt; is based on the internal &lt;strong&gt;ugly URL&lt;/strong&gt;. It can&apos;t go the other way around, because we&apos;re writing the rule on the server, and all the server sees is the request the browser sent it.&lt;/p&gt;\n&lt;h2&gt;You can&apos;t use information that you don&apos;t have&lt;/h2&gt;\n&lt;p&gt;Given this basic model of what a rewrite rule does, imagine you were giving the instructions to a human. You could say:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you see a number in the request, like the &quot;42&quot; in &quot;http://example.com/my-blog/42--i-found-the-answer&quot;, put that number on the end of &quot;my-blog/entry.php?id=&quot;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;But if the information isn&apos;t there in the request, your instructions won&apos;t make any sense:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If the request has &quot;my-blog&quot; in it, like &quot;http://example.com/my-blog/i-found-the-answer&quot;, put the right number on the end of &quot;my-blog/entry.php?id=&quot;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The person reading those instructions is going to say &quot;Sorry, how do I know what the right number is?&quot;&lt;/p&gt;\n&lt;h2&gt;Redirects: &quot;This URL is currently out of office...&quot;&lt;/h2&gt;\n&lt;p&gt;Sometimes, you see rules that are &lt;em&gt;the other way around&lt;/em&gt;, like this:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;RewriteRule my-blog/entry.php?id=(\\d+) my-blog/$1--i-found-the-answer [R]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This rule &lt;em&gt;does&lt;/em&gt; match an ugly URL on the left, and produce a pretty URL on the right. So surely we could write it without the ID at the beginning of the pretty part?&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;RewriteRule my-blog/entry.php?id=(\\d+) my-blog/i-found-the-answer [R]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The important difference is the &lt;code&gt;[R]&lt;/code&gt; flag, which means that this rule is actually a &lt;strong&gt;redirect&lt;/strong&gt; - instead of &quot;serve the response from this URL&quot;, it means &quot;tell the browser to load this URL instead&quot;.&lt;/p&gt;\n&lt;p&gt;You can think of this like one of those automated e-mail replies, saying &quot;Sorry, Joe Bloggs is currently on holiday; please send your message to Jane Smith instead.&quot; In the same way, the redirect above tells the browser &quot;Sorry, there&apos;s no content for &lt;code&gt;http://example.com/my-blog/entry.php?id=42&lt;/code&gt;; please request &lt;code&gt;http://example.com/my-blog/42--i-found-the-answer&lt;/code&gt; instead.&lt;/p&gt;\n&lt;p&gt;The important point of this analogy is that the above message wouldn&apos;t be much use if there wasn&apos;t actually anyone called Jane Smith working there, or if they had no idea how to answer the questions Joe Bloggs normally dealt with. Similarly, a &lt;strong&gt;redirect&lt;/strong&gt; is no use if the URL you tell the browser to request doesn&apos;t actually do anything useful. Once the browser follows the redirect, it&apos;s going to make a &lt;strong&gt;new request&lt;/strong&gt;, and when the server receives the new request, it still won&apos;t know what the ID number is.&lt;/p&gt;\n&lt;h2&gt;But some sites do it, so it must be possible!&lt;/h2&gt;\n&lt;p&gt;A web server only has the information present in the request, but &lt;em&gt;how&lt;/em&gt; it uses that information is up to you.&lt;/p&gt;\n&lt;p&gt;For instance, rather than looking up a blog post by ID, you could store its URL directly in the database, then write some code to do the matching directly in PHP, Python, node.js, etc. Or you could have the same URL show different content based on the language the user has set in their browser, or based on a cookie, etc.&lt;/p&gt;\n&lt;p&gt;Another thing you can do is use a form (or API request) with a method of POST rather than GET. That means additional information is sent in the &quot;body&quot; of the request, separate from the URL. It still has to be &lt;em&gt;sent&lt;/em&gt;, but it&apos;s not as obvious in the browser, won&apos;t be included in bookmarks, etc.&lt;/p&gt;\n&lt;p&gt;But you can&apos;t write a single line in a .htaccess file that performs miracles.&lt;/p&gt;\n    "]},"randomTags":[{"name":"relative-path","slug":"relative-path"},{"name":"angular-template","slug":"angular-template"},{"name":"android-recyclerview","slug":"android-recyclerview"},{"name":"rust","slug":"rust"},{"name":"sed","slug":"sed"},{"name":"pecs","slug":"pecs"},{"name":"swing","slug":"swing"},{"name":"linux","slug":"linux"},{"name":"cpu-architecture","slug":"cpu-architecture"},{"name":"jakarta-mail","slug":"jakarta-mail"},{"name":"semantics","slug":"semantics"},{"name":"warnings","slug":"warnings"},{"name":"datediff","slug":"datediff"},{"name":"blob","slug":"blob"},{"name":"email-validation","slug":"email-validation"},{"name":"this","slug":"this"},{"name":"algorithm","slug":"algorithm"},{"name":"full-outer-join","slug":"full-outer-join"},{"name":"argument-unpacking","slug":"argument-unpacking"},{"name":"post","slug":"post"}]},"__N_SSG":true}