{"pageProps":{"data":{"count":1,"rows":[{"id":233,"title":"How to find the 'sizeof' (a pointer pointing to an array)?","slug":"how-to-find-the-'sizeof'-(a-pointer-pointing-to-an-array)-1657387354284","postType":"QUESTION","createdAt":"2022-07-09T17:22:34.000Z","updatedAt":"2022-07-09T17:22:34.000Z","tags":[{"id":1561,"name":"sizeof","slug":"sizeof","createdAt":"2022-07-09T17:22:34.000Z","updatedAt":"2022-07-09T17:22:34.000Z","Questions_Tags":{"questionId":233,"tagId":1561}}]}]},"slug":"sizeof","page":1,"answers":{"233":["\n&lt;p&gt;No, you can&apos;t.  The compiler doesn&apos;t know what the pointer is pointing to.  There are tricks, like ending the array with a known out-of-band value and then counting the size up until that value, but that&apos;s not using &lt;code&gt;sizeof()&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;p&gt;Another trick is the one mentioned by &lt;a href=&quot;https://stackoverflow.com/users/13422/zan-lynx&quot;&gt;Zan&lt;/a&gt;, which is to stash the size somewhere.  For example, if you&apos;re dynamically allocating the array, allocate a block one int bigger than the one you need, stash the size in the first int, and return &lt;code&gt;ptr+1&lt;/code&gt; as the pointer to the array.  When you need the size, decrement the pointer and peek at the stashed value.  Just remember to free the whole block starting from the beginning, and not just the array.&lt;/p&gt;\n    ","\n&lt;p&gt;The answer is, &quot;No.&quot;&lt;/p&gt;\n\n&lt;p&gt;What C programmers do is store the size of the array somewhere.  It can be part of a structure, or the programmer can cheat a bit and &lt;code&gt;malloc()&lt;/code&gt; more memory than requested in order to store a length value before the start of the array.&lt;/p&gt;\n    ","\n&lt;p&gt;For dynamic arrays (&lt;em&gt;malloc&lt;/em&gt; or C++ &lt;em&gt;new&lt;/em&gt;) you need to store the size of the array as mentioned by others or perhaps build an array manager structure which handles add, remove, count, etc. Unfortunately C doesn&apos;t do this nearly as well as C++ since you basically have to build it for each different array type you are storing which is cumbersome if you have multiple types of arrays that you need to manage.&lt;/p&gt;\n\n&lt;p&gt;For static arrays, such as the one in your example, there is a common macro used to get the size, but it is &lt;strong&gt;not recommended&lt;/strong&gt; as it does not check if the parameter is really a static array. The macro is used in real code though, e.g. in the Linux kernel headers although it may be slightly different than the one below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; !defined(ARRAY_SIZE)&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; ARRAY_SIZE(x) (sizeof((x)) / sizeof((x)[0]))&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; days[] = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ptr = days;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%u\\n&quot;&lt;/span&gt;, ARRAY_SIZE(days));\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%u\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(ptr));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can google for reasons to be wary of macros like this. Be careful.&lt;/p&gt;\n\n&lt;p&gt;If possible, the C++ stdlib such as vector which is much safer and easier to use.&lt;/p&gt;\n    ","\n&lt;p&gt;There is a clean solution with C++ templates, without using &lt;strong&gt;sizeof()&lt;/strong&gt;. The following &lt;strong&gt;getSize()&lt;/strong&gt; function returns the size of any static array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cstddef&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\ntemplate&amp;lt;typename T, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; SIZE&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T (&amp;amp;)[SIZE])&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; SIZE;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is an example with a &lt;strong&gt;foo_t&lt;/strong&gt; structure:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cstddef&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\ntemplate&amp;lt;typename T, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; SIZE&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T (&amp;amp;)[SIZE])&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; SIZE;\n}\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo_t&lt;/span&gt; {&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ball;\n};\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;foo_t&lt;/span&gt; foos3[] = {{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}};\n    &lt;span class=&quot;hljs-type&quot;&gt;foo_t&lt;/span&gt; foos5[] = {{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;},{&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;}};\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%u\\n&quot;&lt;/span&gt;, getSize(foos3));\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%u\\n&quot;&lt;/span&gt;, getSize(foos5));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As all the correct answers have stated, you cannot get this information from the decayed pointer value of the array alone. If the decayed pointer is the argument received by the function, then the size of the originating array has to be provided in some other way for the function to come to know that size.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a suggestion different from what has been provided thus far,that will work: Pass a pointer to the array instead. This suggestion is similar to the C++ style suggestions, except that C does not support templates or references:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; ARRAY_SZ 10&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*arr)[ARRAY_SZ])&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%u\\n&quot;&lt;/span&gt;, (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(*arr)/&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(**arr));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But, this suggestion is kind of silly for your problem, since the function is defined to know exactly the size of the array that is passed in (hence, there is little need to use sizeof at all on the array). What it does do, though, is offer some type safety. It will prohibit you from passing in an array of an unwanted size.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x[&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\nfoo(&amp;amp;x); &lt;span class=&quot;hljs-comment&quot;&gt;/* error */&lt;/span&gt;\nfoo(&amp;amp;y); &lt;span class=&quot;hljs-comment&quot;&gt;/* ok */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If the function is supposed to be able to operate on any size of array, then you will have to provide the size to the function as additional information.&lt;/p&gt;\n    ","\n&lt;p&gt;For this specific example, yes, there is, IF you use typedefs (see below). Of course, if you do it this way, you&apos;re just as well off to use SIZEOF_DAYS, since you know what the pointer is pointing to. &lt;/p&gt;\n\n&lt;p&gt;If you have a (void *) pointer, as is returned by malloc()  or the like, then, no, there is no way to determine what data structure the pointer is pointing to and thus, no way to determine its size.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; NUM_DAYS 5&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;days_t&lt;/span&gt;[ NUM_DAYS ];\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; SIZEOF_DAYS ( sizeof( days_t ) )&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;days_t&lt;/span&gt;  days;\n    &lt;span class=&quot;hljs-type&quot;&gt;days_t&lt;/span&gt; *ptr = &amp;amp;days; \n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;SIZEOF_DAYS:  %u\\n&quot;&lt;/span&gt;, SIZEOF_DAYS  );\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;sizeof(days): %u\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(days) );\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;sizeof(*ptr): %u\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(*ptr) );\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;sizeof(ptr):  %u\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(ptr)  );\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n} \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;SIZEOF_DAYS:  &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(days): &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(*ptr): &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(ptr):  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is no magic solution. C is not a reflective language. Objects don&apos;t automatically know what they are.&lt;/p&gt;\n\n&lt;p&gt;But you have many choices:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Obviously, add a parameter&lt;/li&gt;\n&lt;li&gt;Wrap the call in a macro and automatically add a parameter&lt;/li&gt;\n&lt;li&gt;Use a more complex object. Define a structure which contains the dynamic array and also the size of the array. Then, pass the address of the structure.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;You can do something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; days[] = { &lt;span class=&quot;hljs-comment&quot;&gt;/*length:*/&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;/*values:*/&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; };\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ptr = days + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;array length: %u\\n&quot;&lt;/span&gt;, ptr[&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;]);\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My solution to this problem is to save the length of the array into a struct Array as a meta-information about the array.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Array&lt;/span&gt;\n{&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; length;\n\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; *&lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Array&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Array&lt;/span&gt;;&lt;/span&gt;\n\nArray* &lt;span class=&quot;hljs-title function_&quot;&gt;NewArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; length)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* Allocate the memory for the struct Array */&lt;/span&gt;\n    Array *newArray = (Array*) &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(Array));\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* Insert only non-negative length&apos;s*/&lt;/span&gt;\n    newArray-&amp;gt;length = (length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) ? length : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    newArray-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt; = (&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;*) &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(length*&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newArray;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SetArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Array *structure,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; length,&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;* &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;)&lt;/span&gt;\n{\n    structure-&amp;gt;length = length;\n    structure-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;PrintArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Array *structure)&lt;/span&gt;\n{       \n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(structure-&amp;gt;length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;length: %d\\n&quot;&lt;/span&gt;, structure-&amp;gt;length);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; structure-&amp;gt;length; i++)\n            &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%g\\n&quot;&lt;/span&gt;, structure-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;[i]);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Empty Array. Length 0\\n&quot;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n    Array *negativeTest, *days = NewArray(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; moreDays[] = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;};\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; days-&amp;gt;length; i++)\n        days-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;[i] = i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n    PrintArray(days);\n\n    SetArray(days,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,moreDays);\n\n    PrintArray(days);\n\n    negativeTest = NewArray(&lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;);\n\n    PrintArray(negativeTest);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But you have to care about set the right length of the array you want to store, because the is no way to check this length, like our friends massively explained.&lt;/p&gt;\n    ","\n&lt;p&gt;No, you can&apos;t use &lt;code&gt;sizeof(ptr)&lt;/code&gt; to find the size of array &lt;code&gt;ptr&lt;/code&gt; is pointing to.&lt;/p&gt;\n\n&lt;p&gt;Though allocating extra memory(more than the size of array) will be helpful if you want  to store the length in extra space.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; \n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; days[] = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ptr = days;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%u\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(days));\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%u\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(ptr));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Size of days[] is 20 which is no of elements * size of it&apos;s data type.\nWhile the size of pointer is 4 no matter what it is pointing to.\nBecause a pointer points to other element by storing it&apos;s address. &lt;/p&gt;\n    ","\n&lt;p&gt;\nIn strings there is a &lt;code&gt;&apos;\\0&apos;&lt;/code&gt; character at the end so the length of the string can be gotten using functions like &lt;code&gt;strlen&lt;/code&gt;. The problem with an integer array, for example, is that you can&apos;t use any value as an end value so one possible solution is to address the array and use as an end value the &lt;code&gt;NULL&lt;/code&gt; pointer.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/* the following function will produce the warning:\n * sizeof on array function parameter a will\n * return size of int * [-Wsizeof-array-argument]\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a[] )&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;%lu\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; a );\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;/* so we have to implement something else one possible\n * idea is to use the NULL pointer as a control value\n * the same way &apos;\\0&apos; is used in strings but this way\n * the pointer passed to a function should address pointers\n * so the actual implementation of an array type will\n * be a pointer to pointer\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; * &lt;span class=&quot;hljs-type&quot;&gt;type_t&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/* line 18 */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;type_t&lt;/span&gt; ** &lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; )&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, ... )&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* initialize an array with four values &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;foobar&quot;\n     * if one wants to use integers rather than strings than in the typedef\n     * declaration at line 18 the char * type should be changed with int\n     * and in the format used for printing the array values \n     * at line 45 and 51 &quot;%s&quot; should be changed with &quot;%i&quot;\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt; = initialize( &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;baz&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;foobar&quot;&lt;/span&gt; );\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt; )&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* print array size */&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;size %i:\\n&quot;&lt;/span&gt;, size( &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt; ));\n\n    &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;aprint&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *, &lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt; )&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* print array values */&lt;/span&gt;\n    aprint( &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt; ); &lt;span class=&quot;hljs-comment&quot;&gt;/* line 45 */&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-type&quot;&gt;type_t&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getval&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; )&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* print an indexed value */&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;type_t&lt;/span&gt; val = getval( &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;, i );\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;%i: %s\\n&quot;&lt;/span&gt;, i, val ); &lt;span class=&quot;hljs-comment&quot;&gt;/* line 51 */&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt; )&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* free some space */&lt;/span&gt;\n    delete( &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt; );\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;/* the output of the program should be:\n * size 4:\n * foo\n * bar\n * baz\n * foobar\n * 2: baz\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n, ... )&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* here we store the array values */&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;type_t&lt;/span&gt; *v = (&lt;span class=&quot;hljs-type&quot;&gt;type_t&lt;/span&gt; *) &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;( &lt;span class=&quot;hljs-type&quot;&gt;type_t&lt;/span&gt; ) * n );\n    va_list ap;\n    va_start( ap, n );\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; n; j++ )\n        v[j] = va_arg( ap, &lt;span class=&quot;hljs-type&quot;&gt;type_t&lt;/span&gt; );\n    va_end( ap );\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* the actual array will hold the addresses of those\n     * values plus a NULL pointer\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt; a = (&lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt;) &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;( &lt;span class=&quot;hljs-type&quot;&gt;type_t&lt;/span&gt; *) * ( n + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ));\n    a[n] = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; n; j++ )\n        a[j] = v + j;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n}\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt; a )&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( *a++ != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; )\n        n++;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n;\n}\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;aprint&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *fmt, &lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt; a )&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( *a != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; )\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( fmt, **a++ );   \n}\n&lt;span class=&quot;hljs-type&quot;&gt;type_t&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getval&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i )&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *a[i];\n}\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;array_t&lt;/span&gt; a )&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;( *a );\n    &lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;( a );\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is how I personally do it in my code. I like to keep it as simple as possible while still able to get values that I need.&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;intArr&lt;/span&gt; {&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; size;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* arr; \n} intArr_t;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    intArr_t arr;\n    arr.size = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n    arr.arr = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*)&lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) * arr.size);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.size; i++) {\n        arr.arr[i] = i * &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stddef.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; array(type) struct { size_t size; type elem[0]; }&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;hljs-title function_&quot;&gt;array_new&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; esize, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ecnt)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; *a = (&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; *)&lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(esize*ecnt+&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a) *a = ecnt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n}\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; array_new(type, count) array_new(sizeof(type),count)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; array_delete free&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; array_foreach(type, e, arr) \\\n    for (type *e = (arr)-&amp;gt;elem; e &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; (arr)-&amp;gt;&lt;/span&gt;size + (arr)-&amp;gt;elem; ++e)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; *argv[])&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) *iarr = array_new(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;) *farr = array_new(&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;) *darr = array_new(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;) *carr = array_new(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; iarr-&amp;gt;size; ++i) {\n        iarr-&amp;gt;elem[i] = i;\n        farr-&amp;gt;elem[i] = i*&lt;span class=&quot;hljs-number&quot;&gt;1.0f&lt;/span&gt;;\n        darr-&amp;gt;elem[i] = i*&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;;\n        carr-&amp;gt;elem[i] = i+&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;;\n    }\n    array_foreach(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, e, iarr) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d &quot;&lt;/span&gt;, *e);\n    }\n    array_foreach(&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;, e, farr) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%.0f &quot;&lt;/span&gt;, *e);\n    }\n    array_foreach(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;, e, darr) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%.0lf &quot;&lt;/span&gt;, *e);\n    }\n    carr-&amp;gt;elem[carr-&amp;gt;size&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s\\n&quot;&lt;/span&gt;, carr-&amp;gt;elem);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt; &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; array_size 10&lt;/span&gt;\n\n &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;\n     int16 size;\n     int16 &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;[array_size];\n     int16 property1[(array_size/&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n     int16 property2[(array_size/&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n } array1 = {array_size, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;};\n\n &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; array_size&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;array_size is passing to the &lt;strong&gt;&lt;em&gt;size&lt;/em&gt;&lt;/strong&gt; variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; array_size 30&lt;/span&gt;\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;\n    int16 size;\n    int16 &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;[array_size];\n    int16 property1[(array_size/&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n    int16 property2[(array_size/&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n} array2 = {array_size};\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; array_size&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n\n    int16 size = array1.size;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i!=size; i++) {\n\n        array1.&lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;[i] *= &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Most implementations will have a function that tells you the reserved size for objects allocated with &lt;code&gt;malloc()&lt;/code&gt; or &lt;code&gt;calloc()&lt;/code&gt;, for example GNU has &lt;code&gt;malloc_usable_size()&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;However, this will return the size of the reversed block, which can be larger than the value given to &lt;code&gt;malloc()&lt;/code&gt;/&lt;code&gt;realloc()&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n    ","\n&lt;p&gt;There is a popular macro, which you can define for finding number of elements in the array (Microsoft CRT even provides it OOB with name &lt;code&gt;_countof&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; countof(x) (sizeof(x)/sizeof((x)[0]))&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then you can write:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; my_array[] = { ... some elements ... };\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%zu&quot;&lt;/span&gt;, countof(my_array)); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;z&apos; is correct type specifier for size_t&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"w3c","slug":"w3c"},{"name":"function","slug":"function"},{"name":"class","slug":"class"},{"name":"fgets","slug":"fgets"},{"name":"database-design","slug":"database-design"},{"name":"jquery-selectors","slug":"jquery-selectors"},{"name":"conditional-operator","slug":"conditional-operator"},{"name":"linker-errors","slug":"linker-errors"},{"name":"persistent-storage","slug":"persistent-storage"},{"name":"path","slug":"path"},{"name":"comma-operator","slug":"comma-operator"},{"name":"permutation","slug":"permutation"},{"name":"mysql","slug":"mysql"},{"name":"sorting","slug":"sorting"},{"name":"download","slug":"download"},{"name":"chrome-web-driver","slug":"chrome-web-driver"},{"name":"reflection","slug":"reflection"},{"name":"action","slug":"action"},{"name":"reshape2","slug":"reshape2"},{"name":"async-await","slug":"async-await"}]},"__N_SSG":true}