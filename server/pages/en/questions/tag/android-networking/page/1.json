{"pageProps":{"data":{"count":1,"rows":[{"id":62,"title":"How can I fix 'android.os.NetworkOnMainThreadException'?","slug":"how-can-i-fix-'android.os.networkonmainthreadexception'-1657384454963","postType":"QUESTION","createdAt":"2022-07-09T16:34:15.000Z","updatedAt":"2022-07-09T16:34:15.000Z","tags":[{"id":226,"name":"android-networking","slug":"android-networking","createdAt":"2022-07-09T16:34:15.000Z","updatedAt":"2022-07-09T16:34:15.000Z","Questions_Tags":{"questionId":62,"tagId":226}}]}]},"slug":"android-networking","page":"1","answers":{"62":["\n&lt;p&gt;&lt;strong&gt;NOTE : AsyncTask was deprecated in API level 30.&lt;br&gt;\n&lt;a href=&quot;https://developer.android.com/reference/android/os/AsyncTask&quot; rel=&quot;noreferrer&quot;&gt;AsyncTask | Android Developers&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This exception is thrown when an application attempts to perform a networking operation on its main thread. Run your code in &lt;a href=&quot;http://developer.android.com/reference/android/os/AsyncTask.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;AsyncTask&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RetrieveFeedTask&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AsyncTask&lt;/span&gt;&amp;lt;String, Void, RSSFeed&amp;gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Exception exception;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; RSSFeed &lt;span class=&quot;hljs-title function_&quot;&gt;doInBackground&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String... urls)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;URL&lt;/span&gt;(urls[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n            &lt;span class=&quot;hljs-type&quot;&gt;SAXParserFactory&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; SAXParserFactory.newInstance();\n            &lt;span class=&quot;hljs-type&quot;&gt;SAXParser&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; factory.newSAXParser();\n            &lt;span class=&quot;hljs-type&quot;&gt;XMLReader&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;xmlreader&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parser.getXMLReader();\n            &lt;span class=&quot;hljs-type&quot;&gt;RssHandler&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;theRSSHandler&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RssHandler&lt;/span&gt;();\n            xmlreader.setContentHandler(theRSSHandler);\n            &lt;span class=&quot;hljs-type&quot;&gt;InputSource&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;InputSource&lt;/span&gt;(url.openStream());\n            xmlreader.parse(is);\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; theRSSHandler.getFeed();\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.exception = e;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {\n            is.close();\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onPostExecute&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RSSFeed feed)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;span class=&quot;hljs-doctag&quot;&gt;TODO:&lt;/span&gt; check this.exception&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;span class=&quot;hljs-doctag&quot;&gt;TODO:&lt;/span&gt; do something with the feed&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;How to execute the task:&lt;/p&gt;\n&lt;p&gt;In &lt;code&gt;MainActivity.java&lt;/code&gt; file you can add this line within your &lt;code&gt;oncreate()&lt;/code&gt; method&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RetrieveFeedTask&lt;/span&gt;().execute(urlToRssFeed);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Don&apos;t forget to add this to &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;uses-permission android:name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt;/&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;You should almost always run network operations on a thread or as an asynchronous task.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;But it &lt;em&gt;is&lt;/em&gt; possible to remove this restriction and you override the default behavior, if you are willing to accept the consequences.&lt;/p&gt;\n&lt;p&gt;Add:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;StrictMode.&lt;span class=&quot;hljs-type&quot;&gt;ThreadPolicy&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;policy&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StrictMode&lt;/span&gt;.ThreadPolicy.Builder().permitAll().build();\n\nStrictMode.setThreadPolicy(policy);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In your class,&lt;/p&gt;\n&lt;p&gt;and&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Add&lt;/em&gt; this permission in the Android &lt;em&gt;manifest.xml&lt;/em&gt; file:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;uses-permission android:name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt;/&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Consequences:&lt;/p&gt;\n&lt;p&gt;Your app will (in areas of spotty Internet connection) become unresponsive and lock up, the user perceives slowness and has to do a force kill, and you risk the activity manager killing your app and telling the user that the app has stopped.&lt;/p&gt;\n&lt;p&gt;Android has some good tips on good programming practices to design for responsiveness:\n&lt;a href=&quot;http://developer.android.com/reference/android/os/NetworkOnMainThreadException.html&quot; rel=&quot;noreferrer&quot;&gt;NetworkOnMainThreadException | Android Developers&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I solved this problem using a new &lt;code&gt;Thread&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Thread&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;() {\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;  {\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Your code goes here&lt;/span&gt;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n            e.printStackTrace();\n        }\n    }\n});\n\nthread.start(); \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;The accepted answer has some significant downsides. It is not advisable to use AsyncTask for networking unless you &lt;em&gt;really&lt;/em&gt; know what you are doing. Some of the down-sides include:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;AsyncTask&apos;s created as non-static inner classes have an implicit reference to the enclosing Activity object, its context, and the entire View hierarchy created by that activity. This reference prevents the Activity from being garbage collected until the AsyncTask&apos;s background work completes. If the user&apos;s connection is slow, and/or the download is large, these short-term memory leaks can become a problem - for example, if the orientation changes several times (and you don&apos;t cancel the executing tasks), or the user navigates away from the Activity.&lt;/li&gt;\n&lt;li&gt;AsyncTask has different execution characteristics depending on the platform it executes on: prior to API level 4 AsyncTasks execute serially on a single background thread; from API level 4 through API level 10, AsyncTasks execute on a pool of up to 128 threads; from API level 11 onwards AsyncTask executes serially on a single background thread (unless you use the overloaded &lt;code&gt;executeOnExecutor&lt;/code&gt; method and supply an alternative executor). Code that works fine when running serially on ICS may break when executed concurrently on Gingerbread, say if you have inadvertent order-of-execution dependencies.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If you want to avoid short-term memory leaks, have well-defined execution characteristics across all platforms, and have a base to build really robust network handling, you might want to consider:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Using a library that does a nice job of this for you - there&apos;s a nice comparison of networking libs in &lt;a href=&quot;https://stackoverflow.com/questions/16902716/comparison-of-android-networking-libraries-okhttp-retrofit-volley&quot;&gt;this question&lt;/a&gt;, or&lt;/li&gt;\n&lt;li&gt;Using a &lt;code&gt;Service&lt;/code&gt; or &lt;code&gt;IntentService&lt;/code&gt; instead, perhaps with a &lt;code&gt;PendingIntent&lt;/code&gt; to return the result via the Activity&apos;s &lt;code&gt;onActivityResult&lt;/code&gt; method.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2 id=&quot;intentservice-approach&quot;&gt;&lt;em&gt;IntentService approach&lt;/em&gt;&lt;/h2&gt;\n&lt;p&gt;Downsides:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;More code and complexity than &lt;code&gt;AsyncTask&lt;/code&gt;, though not as much as you might think&lt;/li&gt;\n&lt;li&gt;Will queue requests and run them on a &lt;em&gt;single&lt;/em&gt; background thread. You can easily control this by replacing &lt;code&gt;IntentService&lt;/code&gt; with an equivalent &lt;code&gt;Service&lt;/code&gt; implementation, perhaps like &lt;a href=&quot;https://github.com/steveliles/AsyncAndroid/blob/master/AsyncAndroid/src/main/java/com/packt/asyncandroid/chapter6/ConcurrentIntentService.java&quot; rel=&quot;noreferrer&quot;&gt;this one&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Um, I can&apos;t think of any others right now actually&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Upsides:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Avoids the short-term memory leak problem&lt;/li&gt;\n&lt;li&gt;If your activity restarts while network operations are in-flight it can still receive the result of the download via its &lt;code&gt;onActivityResult&lt;/code&gt; method&lt;/li&gt;\n&lt;li&gt;A better platform than AsyncTask to build and reuse robust networking code. Example: if you need to do an important upload, you could do it from &lt;code&gt;AsyncTask&lt;/code&gt; in an &lt;code&gt;Activity&lt;/code&gt;, but if the user context-switches out of the app to take a phone call, the system &lt;em&gt;may&lt;/em&gt; kill the app before the upload completes. It is &lt;em&gt;less likely&lt;/em&gt; to kill an application with an active &lt;code&gt;Service&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;If you use your own concurrent version of &lt;code&gt;IntentService&lt;/code&gt; (like the one I linked above) you can control the level of concurrency via the &lt;code&gt;Executor&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2 id=&quot;implementation-summary&quot;&gt;&lt;em&gt;Implementation summary&lt;/em&gt;&lt;/h2&gt;\n&lt;p&gt;You can implement an &lt;code&gt;IntentService&lt;/code&gt; to perform downloads on a single background thread quite easily.&lt;/p&gt;\n&lt;p&gt;Step 1: Create an &lt;code&gt;IntentService&lt;/code&gt; to perform the download. You can tell it what to download via &lt;code&gt;Intent&lt;/code&gt; extras, and pass it a &lt;code&gt;PendingIntent&lt;/code&gt; to use to return the result to the &lt;code&gt;Activity&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.app.IntentService;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.app.PendingIntent;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.content.Intent;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.util.Log;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.InputStream;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.net.MalformedURLException;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.net.URL;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DownloadIntentService&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IntentService&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; DownloadIntentService.class.getSimpleName();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;PENDING_RESULT_EXTRA&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;pending_result&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;URL_EXTRA&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;url&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;RSS_RESULT_EXTRA&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;url&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;RESULT_CODE&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;INVALID_URL_CODE&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ERROR_CODE&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; IllustrativeRSSParser parser;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;DownloadIntentService&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(TAG);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// make one and reuse, in the case where more than one intent is queued&lt;/span&gt;\n        parser = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IllustrativeRSSParser&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onHandleIntent&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Intent intent)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;PendingIntent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intent.getParcelableExtra(PENDING_RESULT_EXTRA);\n        &lt;span class=&quot;hljs-type&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n                &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;URL&lt;/span&gt;(intent.getStringExtra(URL_EXTRA));\n                &lt;span class=&quot;hljs-type&quot;&gt;IllustrativeRSS&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rss&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parser.parse(in = url.openStream());\n\n                &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;();\n                result.putExtra(RSS_RESULT_EXTRA, rss);\n\n                reply.send(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;, RESULT_CODE, result);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (MalformedURLException exc) {\n                reply.send(INVALID_URL_CODE);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception exc) {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// could do better by treating the different sax/xml exceptions individually&lt;/span&gt;\n                reply.send(ERROR_CODE);\n            }\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (PendingIntent.CanceledException exc) {\n            Log.i(TAG, &lt;span class=&quot;hljs-string&quot;&gt;&quot;reply cancelled&quot;&lt;/span&gt;, exc);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Step 2: Register the service in the manifest:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;service\n        android:name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;.DownloadIntentService&quot;&lt;/span&gt;\n        android:exported=&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;/&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Step 3: Invoke the service from the Activity, passing a PendingResult object which the Service will use to return the result:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;PendingIntent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pendingResult&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; createPendingResult(\n    RSS_DOWNLOAD_REQUEST_CODE, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(getApplicationContext(), DownloadIntentService.class);\nintent.putExtra(DownloadIntentService.URL_EXTRA, URL);\nintent.putExtra(DownloadIntentService.PENDING_RESULT_EXTRA, pendingResult);\nstartService(intent);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Step 4: Handle the result in onActivityResult:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onActivityResult&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; requestCode, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; resultCode, Intent data)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (requestCode == RSS_DOWNLOAD_REQUEST_CODE) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (resultCode) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; DownloadIntentService.INVALID_URL_CODE:\n                handleInvalidURL();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; DownloadIntentService.ERROR_CODE:\n                handleError(data);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; DownloadIntentService.RESULT_CODE:\n                handleRSS(data);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n        handleRSS(data);\n    }\n    &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.onActivityResult(requestCode, resultCode, data);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A GitHub project containing a complete working Android Studio/&lt;a href=&quot;https://en.wikipedia.org/wiki/Gradle&quot; rel=&quot;noreferrer&quot;&gt;Gradle&lt;/a&gt; project is available &lt;a href=&quot;https://github.com/steveliles/Android-Download-Service-Example&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You cannot perform network &lt;a href=&quot;http://en.wikipedia.org/wiki/Input/output&quot; rel=&quot;noreferrer&quot;&gt;I/O&lt;/a&gt; on the UI thread on &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_version_history#Android_3.0_Honeycomb_.28API_level_11.29&quot; rel=&quot;noreferrer&quot;&gt;Honeycomb&lt;/a&gt;. Technically, it &lt;em&gt;is&lt;/em&gt; possible on earlier versions of Android, but it is a really bad idea as it will cause your app to stop responding, and can result in the OS killing your app for being badly behaved. You&apos;ll need to run a background process or use AsyncTask to perform your network transaction on a background thread.&lt;/p&gt;\n\n&lt;p&gt;There is an article about &lt;a href=&quot;http://android-developers.blogspot.com/2009/05/painless-threading.html&quot; rel=&quot;noreferrer&quot;&gt;Painless Threading&lt;/a&gt; on the Android developer site which is a good introduction to this, and it will provide you with a much better depth of an answer than can be realistically provided here.&lt;/p&gt;\n    ","\n&lt;p&gt;There are two solutions of this problem.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Don&apos;t use a network call in the main UI thread. Use an async task for that.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Write the below code into your MainActivity file after &lt;em&gt;setContentView(R.layout.activity_main);&lt;/em&gt;:&lt;/p&gt;\n&lt;p&gt;if (android.os.Build.VERSION.SDK_INT &amp;gt; 9) {\nStrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();\nStrictMode.setThreadPolicy(policy);\n}&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;And the below import statement into your Java file.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.os.StrictMode;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Do the network actions on another thread.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Thread&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;(){\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Do network action in this function&lt;/span&gt;\n    }\n}).start();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And add this to file &lt;em&gt;AndroidManifest.xml&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;uses-permission android:name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt;/&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;Do not use strictMode (only in debug mode)&lt;/li&gt;\n&lt;li&gt;Do not change SDK version&lt;/li&gt;\n&lt;li&gt;Do not use a separate thread&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Use Service or AsyncTask&lt;/p&gt;\n\n&lt;p&gt;See also Stack&amp;nbsp;Overflow question:&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/18297485/i-get-an-android-os-networkonmainthreadexception-sending-an-email-from-android/18297516#18297516&quot;&gt;android.os.NetworkOnMainThreadException sending an email from Android&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You disable the strict mode using following code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (android.os.Build.VERSION.SDK_INT &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;) {\n    StrictMode.&lt;span class=&quot;hljs-type&quot;&gt;ThreadPolicy&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;policy&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StrictMode&lt;/span&gt;.ThreadPolicy.Builder().permitAll().build();\n    StrictMode.setThreadPolicy(policy);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;This is not recommended&lt;/strong&gt;: use the &lt;code&gt;AsyncTask&lt;/code&gt; interface.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://askanydifference.com/how-to-fix-android-os-networkonmainthreadexception/&quot; rel=&quot;noreferrer&quot;&gt;Full code for both the methods&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Network-based operations cannot be run on the main thread. You need to run all network-based tasks on a child thread or implement AsyncTask.&lt;/p&gt;\n\n&lt;p&gt;This is how you run a task in a child thread:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Thread&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;(){\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Your implementation goes here&lt;/span&gt;\n        } \n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n}).start();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Put your code inside:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Thread&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;(){\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Your implementation&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n}).start();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DemoTask&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AsyncTask&lt;/span&gt;&amp;lt;Void, Void, Void&amp;gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; Void &lt;span class=&quot;hljs-title function_&quot;&gt;doInBackground&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Void... arg0)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Your implementation&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onPostExecute&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Void result)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;span class=&quot;hljs-doctag&quot;&gt;TODO:&lt;/span&gt; do something with the feed&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This happens in Android 3.0 and above. From Android 3.0 and above, they have restricted using network operations (functions that access the Internet) from running in the main thread/UI thread (what spawns from your on create and on resume methods in the activity).&lt;/p&gt;\n\n&lt;p&gt;This is to encourage using separate threads for network operations. See &lt;a href=&quot;http://developer.android.com/reference/android/os/AsyncTask.html&quot;&gt;AsyncTask&lt;/a&gt; for more details on how to perform network activities the right way.&lt;/p&gt;\n    ","\n&lt;p&gt;Using &lt;a href=&quot;http://androidannotations.org/&quot; rel=&quot;noreferrer&quot;&gt;Android Annotations&lt;/a&gt; is an option. It will allow you to simply run any method in a background thread:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// normal method&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    doSomething(); &lt;span class=&quot;hljs-comment&quot;&gt;// do something in background&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Background&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; \n    &lt;span class=&quot;hljs-comment&quot;&gt;// run your networking code here&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note, that although it provides benefits of simplicity and readability, it has its disadvantages. &lt;/p&gt;\n    ","\n&lt;p&gt;The error is due to executing long running operations in main thread,You can easily rectify the problem by using &lt;a href=&quot;https://developer.android.com/reference/android/os/AsyncTask.html&quot; rel=&quot;noreferrer&quot;&gt;AsynTask&lt;/a&gt; or &lt;a href=&quot;https://developer.android.com/reference/java/lang/Thread.html&quot; rel=&quot;noreferrer&quot;&gt;Thread&lt;/a&gt;. You can checkout this library &lt;a href=&quot;http://loopj.com/android-async-http/&quot; rel=&quot;noreferrer&quot;&gt;AsyncHTTPClient&lt;/a&gt; for better handling. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncHttpClient&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AsyncHttpClient&lt;/span&gt;();\nclient.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.google.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AsyncHttpResponseHandler&lt;/span&gt;() {\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onStart&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Called before a request is started&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; statusCode, Header[] headers, &lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;[] response)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Called when response HTTP status is &quot;200 OK&quot;&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onFailure&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; statusCode, Header[] headers, &lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;[] errorResponse, Throwable e)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Called when response HTTP status is &quot;4XX&quot; (for example, 401, 403, 404)&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onRetry&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; retryNo)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Called when request is retried&lt;/span&gt;\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You should not do any time-consuming task on the main thread (UI thread), like any network operation, file I/O, or SQLite database operations. So for this kind of operation, you should create a worker thread, but the problem is that you can not directly perform any UI related operation from your worker thread. For that, you have to use &lt;code&gt;Handler&lt;/code&gt; and pass the &lt;code&gt;Message&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;To simplify all these things, Android provides various ways, like &lt;code&gt;AsyncTask&lt;/code&gt;, &lt;code&gt;AsyncTaskLoader&lt;/code&gt;, &lt;code&gt;CursorLoader&lt;/code&gt; or &lt;code&gt;IntentService&lt;/code&gt;. So you can use any of these according to your requirements.&lt;/p&gt;\n    ","\n&lt;p&gt;The top &lt;a href=&quot;https://stackoverflow.com/questions/6343166/how-to-fix-android-os-networkonmainthreadexception/6343299#6343299&quot;&gt;answer of spektom&lt;/a&gt; works perfect.&lt;/p&gt;\n\n&lt;p&gt;If you are writing the &lt;code&gt;AsyncTask&lt;/code&gt; inline and not extending as a class, and on top of this, if there is a need to get a response out of the &lt;code&gt;AsyncTask&lt;/code&gt;, one can use the &lt;code&gt;get()&lt;/code&gt; method as below.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;RSSFeed&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;feed&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RetreiveFeedTask&lt;/span&gt;().execute(urlToRssFeed).get();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(From his example.)&lt;/p&gt;\n    ","\n&lt;p&gt;This is only thrown for applications targeting the &lt;a href=&quot;http://en.wikipedia.org/wiki/Android_version_history#Android_3.0_Honeycomb_.28API_level_11.29&quot; rel=&quot;noreferrer&quot;&gt;Honeycomb&lt;/a&gt; SDK or higher. Applications targeting earlier SDK versions are allowed to do networking on their main event loop threads.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/os/NetworkOnMainThreadException.html&quot; rel=&quot;noreferrer&quot;&gt;The error is the SDK warning!&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For me it was this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;uses-sdk\n        android:minSdkVersion=&lt;span class=&quot;hljs-string&quot;&gt;&quot;8&quot;&lt;/span&gt;\n        android:targetSdkVersion=&lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt; /&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The device I was testing my app on was 4.1.2 which is SDK Version 16!&lt;/p&gt;\n\n&lt;p&gt;Make the sure the target version is the same as your Android Target Library. If you are unsure what your target library is, right click your Project -&amp;gt; &lt;em&gt;Build Path&lt;/em&gt; -&amp;gt; &lt;em&gt;Android&lt;/em&gt;, and it should be the one that is ticked.&lt;/p&gt;\n\n&lt;p&gt;Also, as others have mentioned, include the correct permissions to access the Internet:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&amp;lt;uses-permission android:name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt;/&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Use this in Your Activity&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    btnsub.setOnClickListener(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;View&lt;/span&gt;.OnClickListener() {\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View v)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Thread&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;() {\n\n                &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;\n\n                    &lt;span class=&quot;hljs-comment&quot;&gt;//Initialize soap request + add parameters&lt;/span&gt;\n                    &lt;span class=&quot;hljs-type&quot;&gt;SoapObject&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SoapObject&lt;/span&gt;(NAMESPACE, METHOD_NAME1);\n\n                    &lt;span class=&quot;hljs-comment&quot;&gt;//Use this to add parameters&lt;/span&gt;\n                    request.addProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pincode&quot;&lt;/span&gt;, txtpincode.getText().toString());\n                    request.addProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bg&quot;&lt;/span&gt;, bloodgroup.getSelectedItem().toString());\n\n                    &lt;span class=&quot;hljs-comment&quot;&gt;//Declare the version of the SOAP request&lt;/span&gt;\n                    &lt;span class=&quot;hljs-type&quot;&gt;SoapSerializationEnvelope&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;envelope&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SoapSerializationEnvelope&lt;/span&gt;(SoapEnvelope.VER11);\n\n                    envelope.setOutputSoapObject(request);\n                    envelope.dotNet = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n                        &lt;span class=&quot;hljs-type&quot;&gt;HttpTransportSE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;androidHttpTransport&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HttpTransportSE&lt;/span&gt;(URL);\n\n                        &lt;span class=&quot;hljs-comment&quot;&gt;//this is the actual part that will call the webservice&lt;/span&gt;\n                        androidHttpTransport.call(SOAP_ACTION1, envelope);\n\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// Get the SoapResult from the envelope body.&lt;/span&gt;\n                        &lt;span class=&quot;hljs-type&quot;&gt;SoapObject&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (SoapObject) envelope.getResponse();\n                        Log.e(&lt;span class=&quot;hljs-string&quot;&gt;&quot;result data&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;data&quot;&lt;/span&gt; + result);\n                        &lt;span class=&quot;hljs-type&quot;&gt;SoapObject&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (SoapObject) result.getProperty(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// SoapObject s_deals = (SoapObject) root.getProperty(0);&lt;/span&gt;\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// SoapObject s_deals_1 = (SoapObject) s_deals.getProperty(0);&lt;/span&gt;\n                        &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n\n                        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;********Count : &quot;&lt;/span&gt; + root.getPropertyCount());\n\n                        value = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Detailinfo&amp;gt;();\n\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; root.getPropertyCount(); i++) {\n                            &lt;span class=&quot;hljs-type&quot;&gt;SoapObject&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s_deals&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (SoapObject) root.getProperty(i);\n                            &lt;span class=&quot;hljs-type&quot;&gt;Detailinfo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Detailinfo&lt;/span&gt;();\n\n                            info.setFirstName(s_deals.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Firstname&quot;&lt;/span&gt;).toString());\n                            info.setLastName(s_deals.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Lastname&quot;&lt;/span&gt;).toString());\n                            info.setDOB(s_deals.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;DOB&quot;&lt;/span&gt;).toString());\n                            info.setGender(s_deals.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Gender&quot;&lt;/span&gt;).toString());\n                            info.setAddress(s_deals.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Address&quot;&lt;/span&gt;).toString());\n                            info.setCity(s_deals.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;City&quot;&lt;/span&gt;).toString());\n                            info.setState(s_deals.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;State&quot;&lt;/span&gt;).toString());\n                            info.setPinecode(s_deals.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pinecode&quot;&lt;/span&gt;).toString());\n                            info.setMobile(s_deals.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mobile&quot;&lt;/span&gt;).toString());\n                            info.setEmail(s_deals.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Email&quot;&lt;/span&gt;).toString());\n                            info.setBloodgroup(s_deals.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bloodgroup&quot;&lt;/span&gt;).toString());\n                            info.setAdddate(s_deals.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Adddate&quot;&lt;/span&gt;).toString());\n                            info.setWaight(s_deals.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;waight&quot;&lt;/span&gt;).toString());\n                            value.add(info);\n                        }\n\n                    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n                        e.printStackTrace();\n                    }\n                    &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(getApplicationContext(), ComposeMail.class);\n                    &lt;span class=&quot;hljs-comment&quot;&gt;//intent.putParcelableArrayListExtra(&quot;valuesList&quot;, value);&lt;/span&gt;\n\n                    startActivity(intent);\n                }\n            }).start();\n        }\n    });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just to spell out something explicitly:&lt;/p&gt;\n\n&lt;p&gt;The main thread is basically the UI thread.&lt;/p&gt;\n\n&lt;p&gt;So saying that you cannot do networking operations in the main thread means you cannot do networking operations in the UI thread, which means &lt;em&gt;you cannot do networking operations in a &lt;code&gt;*runOnUiThread(new Runnable() { ... }*&lt;/code&gt; block&lt;/em&gt; inside some other thread, either.&lt;/p&gt;\n\n&lt;p&gt;(I just had a long head-scratching moment trying to figure out why I was getting that error somewhere other than my main thread.  This was why; this thread helped; and hopefully this comment will help someone else.)&lt;/p&gt;\n    ","\n&lt;p&gt;This exception occurs due to any heavy task performed on the main thread if that performing task takes &lt;em&gt;too much time&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;To avoid this, we can handle it using &lt;strong&gt;threads&lt;/strong&gt; or &lt;strong&gt;executers&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Executors.newSingleThreadExecutor().submit(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// You can perform your task here.&lt;/span&gt;\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are many great answers already on this question, but a lot of great libraries have come out since those answers were posted. This is intended as a kind of newbie-guide.&lt;/p&gt;\n&lt;p&gt;I will cover several use cases for performing network operations and &lt;em&gt;a&lt;/em&gt; solution or two for each.&lt;/p&gt;\n&lt;h1 id=&quot;rest-over-http-nzt9&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_state_transfer&quot; rel=&quot;nofollow noreferrer&quot;&gt;REST&lt;/a&gt; over HTTP&lt;/h1&gt;\n&lt;p&gt;&lt;em&gt;Typically JSON, but it can be XML or something else.&lt;/em&gt;&lt;/p&gt;\n&lt;h2 id=&quot;full-api-access-wvsz&quot;&gt;Full API Access&lt;/h2&gt;\n&lt;p&gt;Let&apos;s say you are writing an app that lets users track stock prices, interest rates and currency exchange rates. You find an JSON API that looks something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;http://api.example.com/stocks                       // ResponseWrapper&amp;lt;String&amp;gt; object containing a\n                                                    // list of strings with ticker symbols\nhttp://api.example.com/stocks/$symbol               // Stock object\nhttp://api.example.com/stocks/$symbol/prices        // PriceHistory&amp;lt;Stock&amp;gt; object\nhttp://api.example.com/currencies                   // ResponseWrapper&amp;lt;String&amp;gt; object containing a\n                                                    // list of currency abbreviation\nhttp://api.example.com/currencies/$currency         // Currency object\nhttp://api.example.com/currencies/$id1/values/$id2  // PriceHistory&amp;lt;Currency&amp;gt; object comparing the prices\n                                                    // of the first currency (id1) to the second (id2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3 id=&quot;retrofit-from-square-j5a1&quot;&gt;Retrofit from Square&lt;/h3&gt;\n&lt;p&gt;This is an excellent choice for an API with multiple endpoints and allows you to declare the REST endpoints instead of having to code them individually as with other libraries like &lt;a href=&quot;https://amzn.github.io/ion-docs/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Amazon Ion Java&lt;/a&gt; or &lt;a href=&quot;https://developer.android.com/training/volley/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Volley&lt;/a&gt; (website: &lt;em&gt;&lt;a href=&quot;http://square.github.io/retrofit/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Retrofit&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;\n&lt;p&gt;How do you use it with the finances API?&lt;/p&gt;\n&lt;h3 id=&quot;file-build.gradle-uu1e&quot;&gt;File &lt;em&gt;build.gradle&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;Add these lines to your &lt;em&gt;module&lt;/em&gt; level &lt;em&gt;build.gradle&lt;/em&gt; file:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;implementation &lt;span class=&quot;hljs-string&quot;&gt;&apos;com.squareup.retrofit2:retrofit:2.3.0&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Retrofit library, current as of September 21, 2017&lt;/span&gt;\nimplementation &lt;span class=&quot;hljs-string&quot;&gt;&apos;com.squareup.retrofit2:converter-gson:2.3.0&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Gson serialization and deserialization support for retrofit, version must match retrofit version&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3 id=&quot;file-financesapi.java-lwca&quot;&gt;File &lt;em&gt;FinancesApi.java&lt;/em&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FinancesApi&lt;/span&gt; {\n    &lt;span class=&quot;hljs-meta&quot;&gt;@GET(&quot;stocks&quot;)&lt;/span&gt;\n    Call&amp;lt;ResponseWrapper&amp;lt;String&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;listStocks&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@GET(&quot;stocks/{symbol}&quot;)&lt;/span&gt;\n    Call&amp;lt;Stock&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getStock&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@Path(&quot;symbol&quot;)&lt;/span&gt;String tickerSymbol)&lt;/span&gt;;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@GET(&quot;stocks/{symbol}/prices&quot;)&lt;/span&gt;\n    Call&amp;lt;PriceHistory&amp;lt;Stock&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getPriceHistory&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@Path(&quot;symbol&quot;)&lt;/span&gt;String tickerSymbol)&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@GET(&quot;currencies&quot;)&lt;/span&gt;\n    Call&amp;lt;ResponseWrapper&amp;lt;String&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;listCurrencies&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@GET(&quot;currencies/{symbol}&quot;)&lt;/span&gt;\n    Call&amp;lt;Currency&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getCurrency&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@Path(&quot;symbol&quot;)&lt;/span&gt;String currencySymbol)&lt;/span&gt;;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@GET(&quot;currencies/{symbol}/values/{compare_symbol}&quot;)&lt;/span&gt;\n    Call&amp;lt;PriceHistory&amp;lt;Currency&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getComparativeHistory&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@Path(&quot;symbol&quot;)&lt;/span&gt;String currency, &lt;span class=&quot;hljs-meta&quot;&gt;@Path(&quot;compare_symbol&quot;)&lt;/span&gt;String currencyToPriceAgainst)&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3 id=&quot;class-financesapibuilder-7lsi&quot;&gt;Class &lt;em&gt;FinancesApiBuilder&lt;/em&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FinancesApiBuilder&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; FinancesApi &lt;span class=&quot;hljs-title function_&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String baseUrl)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Retrofit&lt;/span&gt;.Builder()\n                    .baseUrl(baseUrl)\n                    .addConverterFactory(GsonConverterFactory.create())\n                    .build()\n                    .create(FinancesApi.class);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3 id=&quot;class-financesfragment-snippet-4nuc&quot;&gt;Class &lt;em&gt;FinancesFragment&lt;/em&gt; snippet&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;FinancesApi&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; FinancesApiBuilder.build(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://api.example.com/&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//trailing &apos;/&apos; required for predictable behavior&lt;/span&gt;\napi.getStock(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INTC&quot;&lt;/span&gt;).enqueue(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Callback&lt;/span&gt;&amp;lt;Stock&amp;gt;(){\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onResponse&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Call&amp;lt;Stock&amp;gt; stockCall, Response&amp;lt;Stock&amp;gt; stockResponse)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-type&quot;&gt;Stock&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;stock&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; stockCall.body();\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Do something with the stock&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onResponse&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Call&amp;lt;Stock&amp;gt; stockCall, Throwable t)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Something bad happened&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If your API requires an API key or other header, like a user token, etc. to be sent, Retrofit makes this easy (see &lt;a href=&quot;https://stackoverflow.com/questions/42898920/add-header-parameter-in-retrofit/42899766#42899766&quot;&gt;this awesome answer&lt;/a&gt; to &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/42898920/&quot;&gt;Add Header Parameter in Retrofit&lt;/a&gt;&lt;/em&gt; for details).&lt;/p&gt;\n&lt;h2 id=&quot;one-off-rest-api-access-z59h&quot;&gt;One-off REST API access&lt;/h2&gt;\n&lt;p&gt;Let&apos;s say you&apos;re building a &quot;mood weather&quot; app that looks up the user&apos;s GPS location and checks the current temperature in that area and tells them the mood. This type of app doesn&apos;t need to declare API endpoints; it just needs to be able to access one API endpoint.&lt;/p&gt;\n&lt;h3 id=&quot;ion-oacp&quot;&gt;Ion&lt;/h3&gt;\n&lt;p&gt;This is a great library for this type of access.&lt;/p&gt;\n&lt;p&gt;Please read &lt;a href=&quot;https://stackoverflow.com/questions/6343166/how-can-i-fix-android-os-networkonmainthreadexception/28559884#28559884&quot;&gt;msysmilu&apos;s great answer&lt;/a&gt; to &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/6343166&quot;&gt;How can I fix &apos;android.os.NetworkOnMainThreadException&apos;?&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;h1 id=&quot;load-images-via-http-8qty&quot;&gt;Load images via HTTP&lt;/h1&gt;\n&lt;h2 id=&quot;volley-ct3h&quot;&gt;Volley&lt;/h2&gt;\n&lt;p&gt;&lt;em&gt;Volley can also be used for REST APIs, but due to the more complicated setup required, I prefer to use &lt;a href=&quot;http://square.github.io/retrofit/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Retrofit&lt;/a&gt; from Square as above.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Let&apos;s say you are building a social networking app and want to load profile pictures of friends.&lt;/p&gt;\n&lt;h3 id=&quot;file-build.gradle-1-xq8r&quot;&gt;File &lt;em&gt;build.gradle&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;Add this line to your &lt;em&gt;module&lt;/em&gt; level &lt;em&gt;build.gradle&lt;/em&gt; file:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;implementation &lt;span class=&quot;hljs-string&quot;&gt;&apos;com.android.volley:volley:1.0.0&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3 id=&quot;file-imagefetch.java-g0ls&quot;&gt;File &lt;em&gt;ImageFetch.java&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;Volley requires more setup than Retrofit. You will need to create a class like this to setup a RequestQueue, an ImageLoader and an ImageCache, but it&apos;s not too bad:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ImageFetch&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ImageLoader&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;imageLoader&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;RequestQueue&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;imageQueue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; ImageLoader &lt;span class=&quot;hljs-title function_&quot;&gt;getImageLoader&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context ctx)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(imageLoader == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(imageQueue == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;){\n                imageQueue = Volley.newRequestQueue(ctx.getApplicationContext());\n            }\n            imageLoader = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ImageLoader&lt;/span&gt;(imageQueue, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ImageLoader&lt;/span&gt;.ImageCache() {\n                Map&amp;lt;String, Bitmap&amp;gt; cache = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;String, Bitmap&amp;gt;();\n                &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Bitmap &lt;span class=&quot;hljs-title function_&quot;&gt;getBitmap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String url)&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cache.get(url);\n                }\n                &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;putBitmap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String url, Bitmap bitmap)&lt;/span&gt; {\n                    cache.put(url, bitmap);\n                }\n            });\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; imageLoader;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3 id=&quot;file-user_view_dialog.xml-vi6y&quot;&gt;File &lt;em&gt;user_view_dialog.xml&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;Add the following to your layout XML file to add an image:&lt;/p&gt;\n&lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;com.android.volley.toolbox.NetworkImageView&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;@+id/profile_picture&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;32dp&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;32dp&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;android:layout_alignParentTop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;android:layout_centerHorizontal&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;app:srcCompat&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;@android:drawable/spinner_background&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3 id=&quot;file-userviewdialog.java-qsy0&quot;&gt;File &lt;em&gt;UserViewDialog.java&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;Add the following code to the onCreate method (Fragment, Activity) or the constructor (Dialog):&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;NetworkImageView&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;profilePicture&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; view.findViewById(R.id.profile_picture);\nprofilePicture.setImageUrl(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://example.com/users/images/profile.jpg&quot;&lt;/span&gt;, ImageFetch.getImageLoader(getContext());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id=&quot;picasso-iipo&quot;&gt;Picasso&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;http://square.github.io/picasso/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Picasso&lt;/a&gt; is another excellent library from Square. Please see the website for some great examples.&lt;/p&gt;\n    ","\n&lt;p&gt;In simple words,&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Do not do network work in the UI thread&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;For example, if you do an HTTP request, that is a network action.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;You have to create a new Thread&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Or&lt;/strong&gt; use the &lt;a href=&quot;https://www.google.com.np/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0CB0QFjAAahUKEwjgivqS0-3GAhUGOJQKHV_YD84&amp;amp;url=http%3A%2F%2Fdeveloper.android.com%2Freference%2Fandroid%2Fos%2FAsyncTask.html&amp;amp;ei=RfquVaDUPIbw0ATfsL_wDA&amp;amp;usg=AFQjCNE8gLVXz1Hwq4rI8oxRkZNHjhRzpQ&amp;amp;sig2=qTI0AgoyYUXyDwHFQup9sw&quot; rel=&quot;nofollow noreferrer&quot;&gt;AsyncTask class&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;Way:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Put all your works inside&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;The &lt;code&gt;run()&lt;/code&gt; method of the new thread&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Or&lt;/strong&gt; the &lt;code&gt;doInBackground()&lt;/code&gt; method of the AsyncTask class.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;But:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;When you get something from a network response and want to show it on your view (like display response message in TextView), you need to &lt;strong&gt;return back to the UI&lt;/strong&gt; thread.&lt;/p&gt;\n&lt;p&gt;If you don&apos;t do it, you will get &lt;code&gt;ViewRootImpl$CalledFromWrongThreadException&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;How-to&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;While using AsyncTask, update the view from the &lt;code&gt;onPostExecute()&lt;/code&gt; method&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Or&lt;/strong&gt; call the &lt;a href=&quot;https://stackoverflow.com/questions/11140285/how-to-use-runonuithread&quot;&gt;&lt;code&gt;runOnUiThread()&lt;/code&gt;&lt;/a&gt; method and update the view inside the &lt;code&gt;run()&lt;/code&gt; method.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;You are able to move a part of your code into another thread to offload the &lt;code&gt;main thread&lt;/code&gt; and avoid getting &lt;a href=&quot;https://developer.android.com/topic/performance/vitals/anr.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;ANR&lt;/a&gt;, &lt;a href=&quot;https://developer.android.com/reference/android/os/NetworkOnMainThreadException.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;NetworkOnMainThreadException&lt;/a&gt;, &lt;a href=&quot;https://developer.android.com/reference/java/lang/IllegalStateException.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;IllegalStateException&lt;/a&gt; (e.g., cannot access database on the main thread since it may potentially lock the UI for a long period of time).&lt;/p&gt;\n&lt;p&gt;There are some approaches that you should choose depends on the situation&lt;/p&gt;\n&lt;p&gt;Java &lt;a href=&quot;https://developer.android.com/reference/java/lang/Thread.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Thread&lt;/a&gt; or Android &lt;a href=&quot;https://developer.android.com/reference/android/os/HandlerThread.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;HandlerThread&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Java threads are one-time use only and die after executing its run method.&lt;/p&gt;\n&lt;p&gt;HandlerThread is a handy class for starting a new thread that has a looper.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/os/AsyncTask.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;AsyncTask&lt;/a&gt; (&lt;strong&gt;deprecated&lt;/strong&gt; in API level 30)&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;AsyncTask&lt;/strong&gt; is designed to be a helper class around &lt;strong&gt;Thread&lt;/strong&gt; and &lt;strong&gt;Handler&lt;/strong&gt; and does not constitute a generic threading framework. AsyncTasks should ideally be used for short operations (a few seconds at the most.) If you need to keep threads running for long periods of time, it is highly recommended you use the various APIs provided by the java.util.concurrent package such as &lt;strong&gt;Executor&lt;/strong&gt;, &lt;strong&gt;ThreadPoolExecutor&lt;/strong&gt; and &lt;strong&gt;FutureTask&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Since the &lt;em&gt;main&lt;/em&gt; thread monopolizes UI components, it is not possible to access to some View, and that is why Handler comes to the rescue&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/66567556/4770877&quot;&gt;[Executor framework]&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;ThreadPoolExecutor class that implements ExecutorService which gives fine control on the thread pool (E.g., core pool size, max pool size, keep alive time, etc.)&lt;/p&gt;\n&lt;p&gt;ScheduledThreadPoolExecutor - a class that extends ThreadPoolExecutor. It can schedule tasks after a given delay or periodically.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/java/util/concurrent/FutureTask.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;FutureTask&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;FutureTask performs asynchronous processing, however, if the result is not ready yet or processing has not complete, calling get() will be block the thread&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/AsyncTaskLoader.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;AsyncTaskLoaders&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;AsyncTaskLoaders as they solve a lot of problems that are inherent to AsyncTask&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/IntentService.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;IntentService&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;This is the de facto choice for long running processing on Android, a good example would be to upload or download large files. The upload and download may continue even if the user exits the app and you certainly do not want to block the user from being able to use the app while these tasks are going on.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/job/JobScheduler.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;JobScheduler&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Effectively, you have to create a Service and create a job using JobInfo.Builder that specifies your criteria for when to run the service.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava&quot; rel=&quot;nofollow noreferrer&quot;&gt;RxJava&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Library for composing asynchronous and event-based programs by using observable sequences.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/coroutines.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Coroutines&lt;/a&gt; (Kotlin)&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The main gist of it is, it makes asynchronous code looks so much like synchronous&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Read more &lt;a href=&quot;https://android.jlelse.eu/8-ways-to-do-asynchronous-processing-in-android-and-counting-f634dc6fae4e&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://medium.com/@elye.project/the-evolution-of-android-network-access-1e199fc6e9a2&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://medium.com/@frank.tan/using-a-thread-pool-in-android-e3c88f59d07f&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;, and &lt;a href=&quot;https://guides.codepath.com/android/Managing-Threads-and-Custom-Services#handlerthread-caveats&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;New &lt;code&gt;Thread&lt;/code&gt; and &lt;a href=&quot;https://developer.android.com/reference/android/os/AsyncTask.html&quot; rel=&quot;noreferrer&quot;&gt;AsyncTask&lt;/a&gt; solutions have been explained already.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;AsyncTask&lt;/code&gt; should ideally be used for short operations. Normal &lt;code&gt;Thread&lt;/code&gt; is not preferable for Android. &lt;/p&gt;\n\n&lt;p&gt;Have a look at alternate solution using &lt;a href=&quot;https://developer.android.com/reference/android/os/HandlerThread.html&quot; rel=&quot;noreferrer&quot;&gt;HandlerThread&lt;/a&gt; and &lt;a href=&quot;https://developer.android.com/reference/android/os/Handler.html&quot; rel=&quot;noreferrer&quot;&gt;Handler&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;HandlerThread&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that &lt;code&gt;start()&lt;/code&gt; must still be called.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Handler:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A Handler allows you to send and process Message and Runnable objects associated with a thread&apos;s MessageQueue. Each Handler instance is associated with a single thread and that thread&apos;s message queue. When you create a new Handler, it is bound to the thread / message queue of the thread that is creating it -- from that point on, it will deliver messages and runnables to that message queue and execute them as they come out of the message queue.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Solution:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Create &lt;code&gt;HandlerThread&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Call &lt;code&gt;start()&lt;/code&gt; on &lt;code&gt;HandlerThread&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Create &lt;code&gt;Handler&lt;/code&gt; by getting &lt;code&gt;Looper&lt;/code&gt; from &lt;code&gt;HanlerThread&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Embed your Network operation related code in &lt;code&gt;Runnable&lt;/code&gt; object&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Submit &lt;code&gt;Runnable&lt;/code&gt; task to &lt;code&gt;Handler&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Sample code snippet, which address  &lt;code&gt;NetworkOnMainThreadException&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;HandlerThread&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;handlerThread&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HandlerThread&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;URLConnection&quot;&lt;/span&gt;);\nhandlerThread.start();\n&lt;span class=&quot;hljs-type&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mainHandler&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Handler&lt;/span&gt;(handlerThread.getLooper());\n\n&lt;span class=&quot;hljs-type&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myRunnable&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            Log.d(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ravi&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Before IO call&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;URL&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.google.com&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-type&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringBuffer&lt;/span&gt;();\n            &lt;span class=&quot;hljs-type&quot;&gt;HttpURLConnection&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (HttpURLConnection) page.openConnection();\n            conn.connect();\n            &lt;span class=&quot;hljs-type&quot;&gt;InputStreamReader&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;InputStreamReader&lt;/span&gt;((InputStream) conn.getContent());\n            &lt;span class=&quot;hljs-type&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;buff&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BufferedReader&lt;/span&gt;(in);\n            String line;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( (line =  buff.readLine()) != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n                text.append(line + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;);\n            }\n            Log.d(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ravi&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;After IO call&quot;&lt;/span&gt;);\n            Log.d(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ravi&quot;&lt;/span&gt;,text.toString());\n\n        }&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;( Exception err){\n            err.printStackTrace();\n        }\n    }\n};\nmainHandler.post(myRunnable);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Pros of using this approach:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Creating new &lt;code&gt;Thread/AsyncTask&lt;/code&gt; for each network operation is expensive. The &lt;code&gt;Thread/AsyncTask&lt;/code&gt; will be destroyed and re-created for next Network operations. But with &lt;code&gt;Handler&lt;/code&gt; and &lt;code&gt;HandlerThread&lt;/code&gt; approach, you can submit many network operations (as Runnable tasks) to single &lt;code&gt;HandlerThread&lt;/code&gt; by using &lt;code&gt;Handler&lt;/code&gt;. &lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Although above there is a huge solution pool, no one mentioned &lt;code&gt;com.koushikdutta.ion&lt;/code&gt;: &lt;a href=&quot;https://github.com/koush/ion&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/koush/ion&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It&apos;s also &lt;strong&gt;asynchronous&lt;/strong&gt; and &lt;strong&gt;very simple&lt;/strong&gt; to use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Ion.with(context)\n.load(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://example.com/thing.json&quot;&lt;/span&gt;)\n.asJsonObject()\n.setCallback(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FutureCallback&lt;/span&gt;&amp;lt;JsonObject&amp;gt;() {\n   &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Exception e, JsonObject result)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// do stuff with the result or error&lt;/span&gt;\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This works. I just made &lt;a href=&quot;https://stackoverflow.com/questions/6343166/how-can-i-fix-android-os-networkonmainthreadexception/14443056#14443056&quot;&gt;Dr.Luiji&apos;s answer&lt;/a&gt; a little simpler.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Thread&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Your code goes here&lt;/span&gt;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}.start();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt; Kotlin &lt;/h2&gt;\n&lt;p&gt;If you are using Kotlin, you can use a &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Coroutine&quot; rel=&quot;nofollow noreferrer&quot;&gt;coroutine&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;fun &lt;span class=&quot;hljs-title function_&quot;&gt;doSomeNetworkStuff&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    GlobalScope.launch(Dispatchers.IO) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The main thread is the UI thread, and you cannot do an operation in the main thread which may block the user interaction. You can solve this in two ways:&lt;/p&gt;\n\n&lt;p&gt;Force to do the task in the main thread like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;StrictMode.&lt;span class=&quot;hljs-type&quot;&gt;ThreadPolicy&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;threadPolicy&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StrictMode&lt;/span&gt;.ThreadPolicy.Builder().permitAll().build();\nStrictMode.setThreadPolicy(threadPolicy);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or create a simple handler and update the main thread if you want.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Runnable runnable;\nHandler newHandler;\n\nnewHandler = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Handler&lt;/span&gt;();\nrunnable = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n         &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n            &lt;span class=&quot;hljs-comment&quot;&gt;//update UI&lt;/span&gt;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n            e.printStackTrace();\n        } \n    }\n};\nnewHandler.post(runnable);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And to stop the thread use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;newHandler.removeCallbacks(runnable);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more information check this out: &lt;em&gt;&lt;a href=&quot;https://android-developers.googleblog.com/2009/05/painless-threading.html&quot; rel=&quot;noreferrer&quot;&gt;Painless threading&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;RxAndroid&lt;/code&gt; is another better alternative to this problem and it saves us from hassles of creating threads and then posting results on Android UI thread.&lt;/p&gt;\n&lt;p&gt;We just need to specify threads on which tasks need to be executed and everything is handled internally.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Observable&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; musicShowsObservable = Observable.fromCallable(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Callable&lt;/span&gt;&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;() {\n\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mRestClient.getFavoriteMusicShows();\n  }\n\n});\n\nmMusicShowSubscription = musicShowsObservable\n  .subscribeOn(Schedulers.io())\n  .observeOn(AndroidSchedulers.mainThread())\n  .subscribe(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Observer&lt;/span&gt;&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;() {\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; { }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Throwable e)&lt;/span&gt; { }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;String&amp;gt; musicShows)&lt;/span&gt; {\n        listMusicShows(musicShows);\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;By specifiying &lt;code&gt;(Schedulers.io())&lt;/code&gt;, RxAndroid will run &lt;code&gt;getFavoriteMusicShows()&lt;/code&gt; on a different thread.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;By using &lt;code&gt;AndroidSchedulers.mainThread()&lt;/code&gt; we want to observe this Observable on the UI thread, i.e., we want our &lt;code&gt;onNext()&lt;/code&gt; callback to be called on the UI thread.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n    "]},"randomTags":[{"name":"unicode","slug":"unicode"},{"name":"require","slug":"require"},{"name":"certificate","slug":"certificate"},{"name":"strcmp","slug":"strcmp"},{"name":"arrow-functions","slug":"arrow-functions"},{"name":"idioms","slug":"idioms"},{"name":"pygame-surface","slug":"pygame-surface"},{"name":"frame","slug":"frame"},{"name":"closures","slug":"closures"},{"name":"prototypal-inheritance","slug":"prototypal-inheritance"},{"name":"tsql","slug":"tsql"},{"name":"generics","slug":"generics"},{"name":"autolayout","slug":"autolayout"},{"name":"object-comparison","slug":"object-comparison"},{"name":"collision-detection","slug":"collision-detection"},{"name":"awk","slug":"awk"},{"name":"android-input-method","slug":"android-input-method"},{"name":"keyword","slug":"keyword"},{"name":"uniqueidentifier","slug":"uniqueidentifier"},{"name":"variadic-functions","slug":"variadic-functions"}]},"__N_SSG":true}