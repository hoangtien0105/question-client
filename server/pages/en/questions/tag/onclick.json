{"pageProps":{"data":{"count":1,"rows":[{"id":497,"title":"addEventListener vs onclick","slug":"addeventlistener-vs-onclick-1657388191429","postType":"QUESTION","createdAt":"2022-07-09T17:36:31.000Z","updatedAt":"2022-07-09T17:36:31.000Z","tags":[{"id":2486,"name":"onclick","slug":"onclick","createdAt":"2022-07-09T17:36:31.000Z","updatedAt":"2022-07-09T17:36:31.000Z","Questions_Tags":{"questionId":497,"tagId":2486}}]}]},"slug":"onclick","page":1,"answers":{"497":["\n&lt;p&gt;Both are correct, but none of them are &quot;best&quot; per se, and there may be a reason the developer chose to use both approaches.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Event Listeners (addEventListener and IE&apos;s attachEvent)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Earlier versions of Internet Explorer implement javascript differently from pretty much every other browser.  With versions less than 9, you use the &lt;code&gt;attachEvent&lt;/code&gt;[&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ie/ms536343%28v=vs.85%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;]  method, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;element.&lt;span class=&quot;hljs-title function_&quot;&gt;attachEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;onclick&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* do stuff here*/&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In most other browsers (including IE 9 and above), you use &lt;code&gt;addEventListener&lt;/code&gt;[&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;], like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;element.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* do stuff here*/&lt;/span&gt; }, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using this approach (&lt;a href=&quot;http://www.w3.org/wiki/Handling_events_with_JavaScript#The_evolution_of_events&quot; rel=&quot;noreferrer&quot;&gt;DOM Level 2 events&lt;/a&gt;), you can attach a theoretically unlimited number of events to any single element. The only practical limitation is client-side memory and other performance concerns, which are different for each browser.&lt;/p&gt;\n\n&lt;p&gt;The examples above represent using an anonymous function[&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;]. You can also add an event listener using a function reference[&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;] or a closure[&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;]:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myFunctionReference = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* do stuff here*/&lt;/span&gt; }\n\nelement.&lt;span class=&quot;hljs-title function_&quot;&gt;attachEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;onclick&apos;&lt;/span&gt;, myFunctionReference);\nelement.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, myFunctionReference , &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another important feature of &lt;code&gt;addEventListener&lt;/code&gt; is the final parameter, which controls how the listener reacts to bubbling events[&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-3-Events/#event-flow&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;]. I&apos;ve been passing false in the examples, which is standard for probably 95% of use cases. There is no equivalent argument for &lt;code&gt;attachEvent&lt;/code&gt;, or when using inline events.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Inline events (HTML onclick=&quot;&quot; property and element.onclick)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In all browsers that support javascript, you can put an event listener inline, meaning right in the HTML code.  You&apos;ve probably seen this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;a id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;testing&quot;&lt;/span&gt; href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt; onclick=&lt;span class=&quot;hljs-string&quot;&gt;&quot;alert(&apos;did stuff inline&apos;);&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Click&lt;/span&gt; me&amp;lt;/a&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Most experienced developers shun this method, but it does get the job done; it is simple and direct. You may not use closures or anonymous functions here (though the handler itself is an anonymous function of sorts), and your control of scope is limited.&lt;/p&gt;\n\n&lt;p&gt;The other method you mention:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;element.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/*do stuff here */&lt;/span&gt; };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... is the equivalent of inline javascript except that you have more control of the scope (since you&apos;re writing a script rather than HTML) and can use anonymous functions, function references, and/or closures.&lt;/p&gt;\n\n&lt;p&gt;The significant drawback with inline events is that unlike event listeners described above, you may only have one inline event assigned. Inline events are stored as an attribute/property of the element[&lt;a href=&quot;http://www.w3.org/wiki/HTML/Attributes/_Global#Event-handler_Attributes&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;], meaning that it can be overwritten.&lt;/p&gt;\n\n&lt;p&gt;Using the example &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; from the HTML above:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;testing&apos;&lt;/span&gt;);\nelement.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;did stuff #1&apos;&lt;/span&gt;); };\nelement.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;did stuff #2&apos;&lt;/span&gt;); };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... when you clicked the element, you&apos;d &lt;strong&gt;only&lt;/strong&gt; see &quot;Did stuff #2&quot; - you overwrote the first assigned of the &lt;code&gt;onclick&lt;/code&gt; property with the second value, and you overwrote the original inline HTML &lt;code&gt;onclick&lt;/code&gt; property too. Check it out here: &lt;a href=&quot;http://jsfiddle.net/jpgah/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/jpgah/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Broadly speaking, &lt;strong&gt;do not use inline events&lt;/strong&gt;. There may be specific use cases for it, but if you are not 100% sure you have that use case, then you do not and should not use inline events.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Modern Javascript (Angular and the like)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Since this answer was originally posted, javascript frameworks like Angular have become far more popular. You will see code like this in an Angular template:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;button (click)=&lt;span class=&quot;hljs-string&quot;&gt;&quot;doSomething()&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Something&lt;/span&gt;&amp;lt;/button&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This looks like an inline event, but it isn&apos;t. This type of template will be transpiled into more complex code which uses event listeners behind the scenes. Everything I&apos;ve written about events here still applies, but you are removed from the nitty gritty by at least one layer. You should understand the nuts and bolts, but if your modern JS framework best practices involve writing this kind of code in a template, don&apos;t feel like you&apos;re using an inline event -- you aren&apos;t.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Which is Best?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The question is a matter of browser compatibility and necessity. Do you need to attach more than one event to an element? Will you in the future? Odds are, you will. attachEvent and addEventListener are necessary. If not, an inline event may seem like they&apos;d do the trick, but you&apos;re much better served preparing for a future that, though it may seem unlikely, is predictable at least. There is a chance you&apos;ll have to move to JS-based event listeners, so you may as well just start there. Don&apos;t use inline events.&lt;/p&gt;\n\n&lt;p&gt;jQuery and other javascript frameworks encapsulate the different browser implementations of DOM level 2 events in generic models so you can write cross-browser compliant code without having to worry about IE&apos;s history as a rebel.  Same code with jQuery, all cross-browser and ready to rock:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(element).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* do stuff */&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Don&apos;t run out and get a framework just for this one thing, though. You can easily roll your own little utility to take care of the older browsers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addEvent&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element, evnt, funct&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (element.&lt;span class=&quot;hljs-property&quot;&gt;attachEvent&lt;/span&gt;)\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; element.&lt;span class=&quot;hljs-title function_&quot;&gt;attachEvent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;on&apos;&lt;/span&gt;+evnt, funct);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; element.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(evnt, funct, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// example&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;addEvent&lt;/span&gt;(\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myElement&apos;&lt;/span&gt;),\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hi!&apos;&lt;/span&gt;); }\n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Try it: &lt;a href=&quot;http://jsfiddle.net/bmArj/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/bmArj/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Taking all of that into consideration, unless the script you&apos;re looking at took the browser differences into account some other way (in code not shown in your question), the part using &lt;code&gt;addEventListener&lt;/code&gt; would not work in IE versions less than 9.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Documentation and Related Reading&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/wiki/HTML/Attributes/_Global#Event-handler_Attributes&quot; rel=&quot;noreferrer&quot;&gt;W3 HTML specification, element Event Handler Attributes&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener&quot; rel=&quot;noreferrer&quot;&gt;element.addEventListener on MDN&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ie/ms536343%28v=vs.85%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;element.attachEvent on MSDN&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://api.jquery.com/on/&quot; rel=&quot;noreferrer&quot;&gt;Jquery.on&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.quirksmode.org/js/introevents.html&quot; rel=&quot;noreferrer&quot;&gt;quirksmode blog &quot;Introduction to Events&quot;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/libraries/&quot; rel=&quot;noreferrer&quot;&gt;CDN-hosted javascript libraries at Google&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The difference you could see if you had another couple of functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; h = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;);\nh.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = doThing_1;\nh.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = doThing_2;\n\nh.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, doThing_3);\nh.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, doThing_4);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Functions 2, 3 and 4 work, but 1 does not.  This is because &lt;code&gt;addEventListener&lt;/code&gt; does not overwrite existing event handlers, whereas &lt;code&gt;onclick&lt;/code&gt; overrides any existing &lt;code&gt;onclick = fn&lt;/code&gt; event handlers.&lt;/p&gt;\n\n&lt;p&gt;The other significant difference, of course, is that &lt;code&gt;onclick&lt;/code&gt; will always work, whereas &lt;code&gt;addEventListener&lt;/code&gt; does not work in Internet Explorer before version 9. You can use the analogous &lt;code&gt;attachEvent&lt;/code&gt; (which has &lt;em&gt;slightly&lt;/em&gt; different syntax) in IE &amp;lt;9.&lt;/p&gt;\n    ","\n&lt;p&gt;In this answer I will describe the three methods of defining DOM event handlers.&lt;/p&gt;\n\n&lt;h1&gt;&lt;code&gt;element.addEventListener()&lt;/code&gt;&lt;/h1&gt;\n\n&lt;p&gt;Code example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;);\nelement.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt; =&amp;gt;&lt;/span&gt; event.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;(), &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//google.com&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Try clicking this link.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;element.addEventListener()&lt;/code&gt; has multiple advantages:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Allows you to register &lt;strong&gt;unlimited&lt;/strong&gt; events handlers and remove them with &lt;code&gt;element.removeEventListener()&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Has &lt;code&gt;useCapture&lt;/code&gt; parameter, which indicates whether you&apos;d like to handle event in its &lt;strong&gt;capturing or bubbling phase&lt;/strong&gt;. See: &lt;a href=&quot;https://stackoverflow.com/questions/7398290/unable-to-understand-usecapture-attribute-in-addeventlistener&quot;&gt;Unable to understand useCapture attribute in addEventListener&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Cares about &lt;strong&gt;semantics&lt;/strong&gt;. Basically, it makes registering event handlers more explicit. For a beginner, a function call makes it obvious that &lt;em&gt;something happens&lt;/em&gt;, whereas assigning event to some property of DOM element is at least not intuitive.&lt;/li&gt;\n&lt;li&gt;Allows you to &lt;strong&gt;separate document structure (HTML) and logic (JavaScript)&lt;/strong&gt;. In tiny web applications it may not seem to matter, but it &lt;em&gt;does&lt;/em&gt; matter with any bigger project. It&apos;s way much easier to maintain a project which separates structure and logic than a project which doesn&apos;t.&lt;/li&gt;\n&lt;li&gt;Eliminates confusion with correct event names. Due to using inline event listeners or assigning event listeners to &lt;code&gt;.onevent&lt;/code&gt; properties of DOM elements, lots of inexperienced JavaScript programmers thinks that the event name is for example &lt;code&gt;onclick&lt;/code&gt; or &lt;code&gt;onload&lt;/code&gt;. &lt;strong&gt;&lt;code&gt;on&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a part of event name&lt;/strong&gt;. Correct event names are &lt;code&gt;click&lt;/code&gt; and &lt;code&gt;load&lt;/code&gt;, and that&apos;s how event names are passed to &lt;code&gt;.addEventListener()&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Works in &lt;a href=&quot;http://caniuse.com/#feat=addeventlistener&quot; rel=&quot;noreferrer&quot;&gt;almost all browser&lt;/a&gt;. If you still have to support IE &amp;lt;= 8, you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Compatibility&quot; rel=&quot;noreferrer&quot;&gt;a polyfill from MDN&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;&lt;code&gt;element.onevent = function() {}&lt;/code&gt; (e.g. &lt;code&gt;onclick&lt;/code&gt;, &lt;code&gt;onload&lt;/code&gt;)&lt;/h1&gt;\n\n&lt;p&gt;Code example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;);\nelement.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt; =&amp;gt;&lt;/span&gt; event.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//google.com&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Try clicking this link.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;This was a way to register event handlers in DOM 0. It&apos;s now discouraged, because it:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Allows you to register &lt;strong&gt;only one&lt;/strong&gt; event handler. Also removing the assigned handler is not intuitive, because to remove event handler assigned using this method, you have to revert &lt;code&gt;onevent&lt;/code&gt; property back to its initial state (i.e. &lt;code&gt;null&lt;/code&gt;).&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t &lt;strong&gt;respond to errors&lt;/strong&gt; appropriately. For example, if you by mistake assign a string to &lt;code&gt;window.onload&lt;/code&gt;, for example: &lt;code&gt;window.onload = &quot;test&quot;;&lt;/code&gt;, it won&apos;t throw any errors. Your code wouldn&apos;t work and it would be really hard to find out why. &lt;code&gt;.addEventListener()&lt;/code&gt; however, would throw error (at least in Firefox): &lt;em&gt;TypeError: Argument 2 of EventTarget.addEventListener is not an object&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t provide a way to choose if you want to handle event in its capturing or bubbling phase.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Inline event handlers (&lt;code&gt;onevent&lt;/code&gt; HTML attribute)&lt;/h1&gt;\n\n&lt;p&gt;Code example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//google.com&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;event.preventDefault();&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Try clicking this link.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Similarly to &lt;code&gt;element.onevent&lt;/code&gt;, it&apos;s now discouraged. Besides the issues that &lt;code&gt;element.onevent&lt;/code&gt; has, it:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Is a &lt;strong&gt;potential security issue&lt;/strong&gt;, because it makes XSS much more harmful. Nowadays websites should send proper &lt;code&gt;Content-Security-Policy&lt;/code&gt; HTTP header to block inline scripts and allow external scripts only from trusted domains. See &lt;a href=&quot;https://stackoverflow.com/questions/30280370/how-does-content-security-policy-work&quot;&gt;How does Content Security Policy work?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Doesn&apos;t &lt;strong&gt;separate document structure and logic&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;If you generate your page with a server-side script, and for example you generate a hundred links, each with the same inline event handler, your code would be much longer than if the event handler was defined only once. That means the client would have to download more content, and in result your website would be slower.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;See also&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;EventTarget.addEventListener()&lt;/code&gt; documentation&lt;/a&gt; (MDN)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;EventTarget.removeEventListener()&lt;/code&gt; documentation&lt;/a&gt; (MDN)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.simonewebdesign.it/onclick-vs-addeventlistener/&quot; rel=&quot;noreferrer&quot;&gt;onclick vs addEventListener&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/questions/tagged/dom-events&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;dom-events&apos;&quot; rel=&quot;tag&quot;&gt;dom-events&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/tags/dom-events/info&quot;&gt;tag wiki&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;While &lt;code&gt;onclick&lt;/code&gt; works in all browsers, &lt;code&gt;addEventListener&lt;/code&gt; does not work in older versions of Internet Explorer, which uses &lt;code&gt;attachEvent&lt;/code&gt; instead.&lt;/p&gt;\n\n&lt;p&gt;The downside of &lt;code&gt;onclick&lt;/code&gt; is that there can only be one event handler, while the other two will fire all registered callbacks.&lt;/p&gt;\n    ","\n&lt;h2&gt;Summary:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;addEventListener&lt;/code&gt; can add multiple events, whereas with &lt;code&gt;onclick&lt;/code&gt; this cannot be done.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;onclick&lt;/code&gt; can be added as an &lt;code&gt;HTML&lt;/code&gt; attribute, whereas an &lt;code&gt;addEventListener&lt;/code&gt; can only be added within &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;addEventListener&lt;/code&gt; can take a third argument which can stop the event propagation.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Both can be used to handle events. However, &lt;code&gt;addEventListener&lt;/code&gt; should be the preferred choice since it can do everything &lt;code&gt;onclick&lt;/code&gt;  does and more. Don&apos;t use inline &lt;code&gt;onclick&lt;/code&gt; as HTML attributes as this mixes up the javascript and the HTML which is a bad practice. It makes the code less maintainable.&lt;/p&gt;\n    ","\n&lt;p&gt;As far as I know, the DOM &quot;load&quot; event still does only work very limited. That means it&apos;ll only fire for the &lt;code&gt;window object&lt;/code&gt;, &lt;code&gt;images&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements for instance. The same goes for the direct &lt;code&gt;onload&lt;/code&gt; assignment. There is no technical difference between those two. Probably &lt;code&gt;.onload =&lt;/code&gt; has a better cross-browser availabilty.&lt;/p&gt;\n\n&lt;p&gt;However, you cannot assign a &lt;code&gt;load event&lt;/code&gt; to a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element or whatnot.&lt;/p&gt;\n    ","\n&lt;p&gt;An element can have only &lt;strong&gt;one event handler&lt;/strong&gt; attached per event type, but can have &lt;strong&gt;multiple event listeners&lt;/strong&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;So, how does it look in action?&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Only the last event handler assigned gets run:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; button = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.btn&quot;&lt;/span&gt;)\nbutton.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);\n};\nbutton.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;How are you?&quot;&lt;/span&gt;);\n};\nbutton.&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;How are you?&quot; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;All event listeners will be triggered:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; button = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.btn&quot;&lt;/span&gt;)\nbutton.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);\n})\nbutton.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;How are you?&quot;&lt;/span&gt;);\n})\nbutton.&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;() \n&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Hello World&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;How are you?&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;IE Note: &lt;code&gt;attachEvent&lt;/code&gt; is no longer supported. Starting with IE 11, use &lt;code&gt;addEventListener&lt;/code&gt;: &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa741345(v=vs.85)&quot; rel=&quot;nofollow noreferrer&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;One detail hasn&apos;t been noted yet: modern desktop browsers consider different button presses to be &quot;clicks&quot; for &lt;code&gt;AddEventListener(&apos;click&apos;&lt;/code&gt; and &lt;code&gt;onclick&lt;/code&gt; by default.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;On Chrome 42 and IE11, both &lt;code&gt;onclick&lt;/code&gt; and &lt;code&gt;AddEventListener&lt;/code&gt; click fire on left and middle click.&lt;/li&gt;\n&lt;li&gt;On Firefox 38, &lt;code&gt;onclick&lt;/code&gt; fires &lt;em&gt;only&lt;/em&gt; on left click, but &lt;code&gt;AddEventListener&lt;/code&gt; click fires on left, middle &lt;em&gt;and&lt;/em&gt; right clicks.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Also, middle-click behavior is &lt;em&gt;very&lt;/em&gt; inconsistent across browsers when scroll cursors are involved:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;On Firefox, middle-click events always fire.&lt;/li&gt;\n&lt;li&gt;On Chrome, they won&apos;t fire if the middleclick opens or closes a scroll cursor.&lt;/li&gt;\n&lt;li&gt;On IE, they fire when scroll cursor closes, but not when it opens.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It is also worth noting that &quot;click&quot; events for any keyboard-selectable HTML element such as &lt;code&gt;input&lt;/code&gt; also fire on space or enter when the element is selected.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;element.onclick = function() { /* do stuff */ }&lt;/p&gt;\n&lt;p&gt;element.addEventListener(&apos;click&apos;, function(){ /* do stuff */ },false);&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;They apparently do the same thing: listen for the click event and execute a callback function. Nevertheless, theyre not equivalent. If you ever need to choose between the two, this could help you to figure out which one is the best for you.&lt;/p&gt;\n&lt;p&gt;The main difference is that &lt;strong&gt;onclick is just a property&lt;/strong&gt;, and like all object properties, if you write on more than once, it will be &lt;strong&gt;overwritten&lt;/strong&gt;. With &lt;strong&gt;addEventListener()&lt;/strong&gt; instead, we can simply &lt;strong&gt;bind an event handler&lt;/strong&gt; to the element, and we can call it each time we need it without being worried of any overwritten properties.\nExample is shown here,&lt;/p&gt;\n&lt;p&gt;Try it:  &lt;a href=&quot;https://jsfiddle.net/fjets5z4/5/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://jsfiddle.net/fjets5z4/5/&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;In first place I was tempted to keep using onclick, because its shorter and looks simpler and in fact it is. But I dont recommend using it anymore. Its just like using inline JavaScript. Using something like   thats inline JavaScript  is highly discouraged nowadays (inline CSS is discouraged too, but thats another topic).&lt;/p&gt;\n&lt;p&gt;However, the addEventListener() function, despite its the standard, just doesnt work in old browsers (Internet Explorer below version 9), and this is another big difference. If you need to support these ancient browsers, you should follow the onclick way. But you could also use jQuery (or one of its alternatives): it basically simplifies your work and reduces the differences between browsers, therefore can save you a lot of time.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clickEvent = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementByID&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;onclick-eg&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EventListener&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementByID&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;addEventListener-eg&quot;&lt;/span&gt;);\n\nclickEvent.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 is not called&quot;&lt;/span&gt;)\n}\nclickEvent.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 is not called, 2 is called&quot;&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;EventListener&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 is called&quot;&lt;/span&gt;)\n})\n&lt;span class=&quot;hljs-title class_&quot;&gt;EventListener&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2 is also called&quot;&lt;/span&gt;)\n})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Javascript tends to blend everything into objects and that can make it confusing. All into one is the JavaScript way.&lt;/p&gt;\n\n&lt;p&gt;Essentially onclick is a HTML attribute. Conversely addEventListener is a method on the DOM object representing a HTML element.&lt;/p&gt;\n\n&lt;p&gt;In JavaScript objects, a method is merely a property that has a function as a value and that works against the object it is attached to (using this for example).&lt;/p&gt;\n\n&lt;p&gt;In JavaScript as HTML element represented by DOM will have it&apos;s attributes mapped onto its properties.&lt;/p&gt;\n\n&lt;p&gt;This is where people get confused because JavaScript melds everything into a single container or namespace with no layer of indirection.&lt;/p&gt;\n\n&lt;p&gt;In a normal OO layout (which does at least merge the namespace of properties/methods) you would might have something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;domElement.&lt;span class=&quot;hljs-property&quot;&gt;addEventListener&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Object(Method)&lt;/span&gt;\ndomElement.&lt;span class=&quot;hljs-property&quot;&gt;attributes&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Object(Property(Object(Property(String))))&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are variations like it could use a getter/setter for onload or HashMap for attributes but ultimately that&apos;s how it would look. JavaScript eliminated that layer of indirection at the expect of knowing what&apos;s what among other things. It merged domElement and attributes together.&lt;/p&gt;\n\n&lt;p&gt;Barring compatibility you should as a best practice use addEventListener. As other answers talk about the differences in that regard rather than the fundamental programmatic differences I will forgo it. Essentially, in an ideal world you&apos;re really only meant to use on* from HTML but in an even more ideal world you shouldn&apos;t be doing anything like that from HTML.&lt;/p&gt;\n\n&lt;p&gt;Why is it dominant today? It&apos;s quicker to write, easier to learn and tends to just work.&lt;/p&gt;\n\n&lt;p&gt;The whole point of onload in HTML is to give access to the addEventListener method or functionality in the first place. By using it in JS you&apos;re going through HTML when you could be applying it directly.&lt;/p&gt;\n\n&lt;p&gt;Hypothetically you can make your own attributes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[myclick]&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i, v&lt;/span&gt;) {\n     v.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n         &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(v.&lt;span class=&quot;hljs-property&quot;&gt;myclick&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// eval($(v).attr(&apos;myclick&apos;));&lt;/span&gt;\n     });\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What JS does with is a bit different to that.&lt;/p&gt;\n\n&lt;p&gt;You can equate it to something like (for every element created):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;element.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; element.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(element.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt;);&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;:element.&lt;span class=&quot;hljs-title function_&quot;&gt;onclick&lt;/span&gt;();&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n     }\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The actual implementation details will likely differ with a range of subtle variations making the two slightly different in some cases but that&apos;s the gist of it.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s arguably a compatibility hack that you can pin a function to an on attribute since by default attributes are all strings.&lt;/p&gt;\n    ","\n&lt;p&gt;According to &lt;strong&gt;MDN&lt;/strong&gt;, the difference is as below: &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;addEventListener:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The EventTarget.addEventListener() method adds the specified\n  EventListener-compatible object to the list of event listeners for the\n  specified event type on the EventTarget on which it&apos;s called. The\n  event target may be an Element in a document, the Document itself, a\n  Window, or any other object that supports events (such as\n  XMLHttpRequest).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;onclick:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The onclick property returns the click event handler code on the\n  current element. When using the click event to trigger an action, also\n  consider adding this same action to the keydown event, to allow the\n  use of that same action by people who don&apos;t use a mouse or a touch\n  screen. Syntax element.onclick = functionRef; where functionRef is a\n  function - often a name of a function declared elsewhere or a function\n  expression. See &quot;JavaScript Guide:Functions&quot; for details.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;There is also a syntax difference in use as you see in the below codes:&lt;br&gt;&lt;br&gt;\n&lt;strong&gt;addEventListener:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Function to change the content of t2&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;modifyText&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t2 = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;t2&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (t2.&lt;span class=&quot;hljs-property&quot;&gt;firstChild&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;nodeValue&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;three&quot;&lt;/span&gt;) {\n    t2.&lt;span class=&quot;hljs-property&quot;&gt;firstChild&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;nodeValue&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;two&quot;&lt;/span&gt;;\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    t2.&lt;span class=&quot;hljs-property&quot;&gt;firstChild&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;nodeValue&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;three&quot;&lt;/span&gt;;\n  }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// add event listener to table&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; el = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;outside&quot;&lt;/span&gt;);\nel.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, modifyText, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;onclick:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;initElement&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;span class=&quot;hljs-doctag&quot;&gt;NOTE:&lt;/span&gt; showAlert(); or showAlert(param); will NOT work here.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Must be a reference to a function name, not a function call.&lt;/span&gt;\n    p.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = showAlert;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;showAlert&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;onclick Event detected!&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You should also consider EventDelegation for that!\nFor that reason I prefer the addEventListener and foremost using it carefully and consciously!&lt;/p&gt;\n&lt;p&gt;FACTS:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;EventListeners are heavy .... (memory allocation at the client side)&lt;/li&gt;\n&lt;li&gt;The Events propagate IN and then OUT again in relation to the DOM\ntree. Also known as trickling-in and bubbling-out , give it a read\nin case you don&apos;t know.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;So imagine an easy example:\na simple button INSIDE a div INSIDE body ...\nif you click on the button, an Event will ANYWAY\ntrickle in to BUTTON and then OUT again, like this:&lt;/p&gt;\n&lt;p&gt;window-document-div-button-div-document-window&lt;/p&gt;\n&lt;p&gt;In the browser background (lets say the software periphery of the JS engine) the browser can ONLY possibly react to a click, if it checks for each click done where it was targeted.&lt;/p&gt;\n&lt;p&gt;And to make sure that each possible event listener on the way is triggered, it kinda has to send the &quot;click event signal&quot; all the way from document level down into the element ... and back out again.\nThis behavior can then made use of by attaching EventListeners using e.g.:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;exampleID&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {doThis}, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;/&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Just note for reference that the true/false as the last argument of the addEventListener method controls the behavior in terms of when is the event recognized - when trickling in or when bubbling out.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;TRUE means, the event is recognized while trickling-in\nFALSE means, the event is recognized on its way bubbling out&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Implementing the following 2 helpful concepts also turns out much more intuitive using the above stated approach to handle:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;You can also use &lt;code&gt;event.stopPropagation()&lt;/code&gt; within the function\n(example ref. &quot;doThis&quot;) to prevents further propagation of the\ncurrent event in the capturing and bubbling phases. It does not,\nhowever, prevent any default behaviors from occurring; for instance,\nclicks on links are still processed.&lt;/li&gt;\n&lt;li&gt;If you want to stop those behaviors, you could use\n&lt;code&gt;event.preventDefault()&lt;/code&gt; within the function (example ref.\n&quot;doThis&quot;). With that you could for example tell the Browser that if\nthe event does not get explicitly handled, its default action should\nnot be taken as it normally would be.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;em&gt;Also just note here for reference again: the last argument of the addEventListener method (true/false) also controls at which phase (trickling-in TRUE or bubbling out FALSE) the eventual effect of &quot;.stopPropagation()&quot; kicks in.\nSo ... in case you apply an EventListener with flag TRUE to an element, and combine that with the .stopPropagation() method, the event would not even get through to potential inner children of the element&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;To wrap it up:\nIf you use the onClick variant in HTML ... there are 2 downsides for me:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;With addEventListener, you can attach multiple onClick-events to the same, respectively one single element, but thats not possible using onClick (at least thats what I strongly believe up to now, correct me if I am wrong).&lt;/li&gt;\n&lt;li&gt;Also the following aspect is truly remarkable here ... especially the code maintenance part (didn&apos;t elaborate on this so far):&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In regards to event delegation, it really boils down to this. If some\nother JavaScript code needs to respond to a click event, using\naddEventListener ensures you both can respond to it. If you both try\nusing onclick, then one stomps on the other. You both can&apos;t respond if\nyou want an onclick on the same element. &lt;code&gt;Furthermore, you want to keep your behavior as separate as you can from the HTML in case you need to change it later. It would suck to have 50 HTML files to update instead of one JavaScript file.&lt;/code&gt;\n(credit to Greg Burghardt, &lt;a href=&quot;https://stackoverflow.com/questions/30035205&quot;&gt;addEventListener vs onclick with regards to event delegation&lt;/a&gt; )&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ul&gt;\n&lt;li&gt;This is also known by the term &quot;Unobtrusive JavaScript&quot; ... give it a read!&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I guess Chris Baker pretty much summed it up in an excellent answer but I would like to add to that with addEventListener() you can also use options parameter which gives you more control over your events. For example - If you just want to run your event once then you can use { once: true } as an option parameter when adding your event to only call it once.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;greet&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n    }   \n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, greet, { &lt;span class=&quot;hljs-attr&quot;&gt;once&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; })\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The above function will only print &quot;Hello&quot; once.\nAlso, if you want to cleanup your events then there is also the option to removeEventListener(). Although there are advantages of using addEventListener() but you should still be careful if your targeting audience is using Internet Explorer then this method might not work in all situation. You can also read about addEventListener on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#why_use_addeventlistener&quot; rel=&quot;nofollow noreferrer&quot;&gt;MDN&lt;/a&gt;, they gave quite a good explanation on how to use them.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are not too worried about browser support, there is a way to rebind the &apos;this&apos; reference in the function called by the event. It will normally point to the element that generated the event when the function is executed, which is not always what you want. The tricky part is to at the same time be able to remove the very same event listener, as shown in this example: &lt;a href=&quot;http://jsfiddle.net/roenbaeck/vBYu3/&quot; rel=&quot;nofollow&quot;&gt;http://jsfiddle.net/roenbaeck/vBYu3/&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n    Testing that the function returned from bind is rereferenceable, \n    such that it can be added and removed as an event listener.\n*/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyImportantCalloutToYou&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;message, otherMessage&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the following is necessary as calling bind again does &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// not return the same function, so instead we replace the &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// original function with the one bound to this instance&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;swap&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;swap&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); \n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;div&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;swap&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-title class_&quot;&gt;MyImportantCalloutToYou&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;element&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;swap&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// now this function can be properly removed &lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;removeEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;swap&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);           \n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The code above works well in Chrome, and there&apos;s probably some shim around making &quot;bind&quot; compatible with other browsers.&lt;/p&gt;\n    ","\n&lt;p&gt;Using inline handlers is incompatible with &lt;a href=&quot;https://developer.chrome.com/extensions/contentSecurityPolicy&quot; rel=&quot;nofollow&quot;&gt;Content Security Policy&lt;/a&gt; so the &lt;code&gt;addEventListener&lt;/code&gt; approach is more secure from that point of view. Of course you can enable the inline handlers with &lt;code&gt;unsafe-inline&lt;/code&gt; but, as the name suggests, it&apos;s not safe as it brings back the whole hordes of JavaScript exploits that CSP prevents.&lt;/p&gt;\n    ","\n&lt;p&gt;It should also be possible to either extend the listener by prototyping it (if we have a reference to it and its not an anonymous function) -or make the &lt;code&gt;onclick&lt;/code&gt; call a call to a function library (a function calling other functions).&lt;/p&gt;\n&lt;p&gt;Like:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;elm.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = myFunctionList;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myFunctionList&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-title function_&quot;&gt;myFunc1&lt;/span&gt;();\n    &lt;span class=&quot;hljs-title function_&quot;&gt;myFunc2&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This means we never have to change the &lt;code&gt;onclick&lt;/code&gt; call just alter the function &lt;code&gt;myFunctionList()&lt;/code&gt; to do whatever we want, but this leaves us without control of bubbling/catching phases so should be avoided for newer browsers.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;addEventListener&lt;/code&gt; lets you set multiple handlers, but isn&apos;t supported in IE8 or lower.&lt;/p&gt;\n\n&lt;p&gt;IE does have &lt;code&gt;attachEvent&lt;/code&gt;, but it&apos;s not exactly the same.&lt;/p&gt;\n    ","\n&lt;p&gt;The context referenced by &lt;code&gt;&apos;this&apos;&lt;/code&gt; keyword in JavasSript is different.&lt;/p&gt;\n\n&lt;p&gt;look at the following code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;!&lt;span class=&quot;hljs-variable constant_&quot;&gt;DOCTYPE&lt;/span&gt; html&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;btnSubmit&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Submit&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;disable&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;disabled&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; btnSubmit = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;btnSubmit&apos;&lt;/span&gt;);\n        btnSubmit.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-title function_&quot;&gt;disable&lt;/span&gt;();\n        &lt;span class=&quot;hljs-comment&quot;&gt;//btnSubmit.addEventListener(&apos;click&apos;, disable, false);&lt;/span&gt;\n    &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What it does is really simple. when you click the button, the button will be disabled automatically.&lt;/p&gt;\n\n&lt;p&gt;First when you try to hook up the events in this way &lt;code&gt;button.onclick = function(),&lt;/code&gt;\nonclick event will be triggered by clicking the button, however, the button will not be disabled because there&apos;s no explicit binding between button.onclick and onclick event handler. If you debug see the &lt;code&gt;&apos;this&apos;&lt;/code&gt; object, you can see it refers to &lt;code&gt;&apos;window&apos;&lt;/code&gt; object.&lt;/p&gt;\n\n&lt;p&gt;Secondly, if you comment &lt;code&gt;btnSubmit.onclick = disable();&lt;/code&gt; and uncomment \n&lt;code&gt;//btnSubmit.addEventListener(&apos;click&apos;, disable, false);&lt;/code&gt; you can see that the button is disabled because with this way there&apos;s explicit binding between button.onclick event and onclick event handler. If you debug into disable function, you can see &lt;code&gt;&apos;this&apos;&lt;/code&gt; refers to the &lt;code&gt;button control&lt;/code&gt; rather than the &lt;code&gt;window&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This is something I don&apos;t like about JavaScript which is inconsistency.\nBtw, if you are using jQuery(&lt;code&gt;$(&apos;#btnSubmit&apos;).on(&apos;click&apos;, disable);&lt;/code&gt;), it uses explicit binding. &lt;/p&gt;\n    ","\n&lt;p&gt;onclick is basically an addEventListener that specifically performs a function when the element is clicked. So, useful when you have a button that does simple operations, like a calculator button. addEventlistener can be used for a multitude of things like performing an operation when DOM or all content is loaded, akin to window.onload but with more control. &lt;/p&gt;\n\n&lt;p&gt;Note, You can actually use more than one event with inline, or at least by using onclick by seperating each function with a semi-colon, like this.... &lt;/p&gt;\n\n&lt;p&gt;I wouldn&apos;t write a function with inline, as you could potentially have problems later and it would be messy imo. Just use it to call functions already done in your script file.&lt;/p&gt;\n\n&lt;p&gt;Which one you use I suppose would depend on what you want. addEventListener for complex operations and onclick for simple. I&apos;ve seen some projects not attach a specific one to elements and would instead implement a more global eventlistener that would determine if a tap was on a button and perform certain tasks depending on what was pressed. Imo that could potentially lead to problems I&apos;d think, and albeit small, probably, a resource waste if that eventlistener had to handle each and every click&lt;/p&gt;\n    ","\n&lt;p&gt;in my Visual Studio Code, addEventListener has &lt;strong&gt;Real Intellisense&lt;/strong&gt; on event&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/yAl6o.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/yAl6o.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;but onclick does not, only &lt;strong&gt;fake ones&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/YX47b.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/YX47b.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;queryselector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id or classname&apos;&lt;/span&gt;); \nelement.&lt;span class=&quot;hljs-title function_&quot;&gt;addeventlistiner&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; work\n})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;button onclick=&lt;span class=&quot;hljs-string&quot;&gt;&quot;click()&quot;&lt;/span&gt;&amp;gt;click&amp;lt;/click&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;`\nfunction click(){\n  do work\n};\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"shell","slug":"shell"},{"name":"unsupported-class-version","slug":"unsupported-class-version"},{"name":"latitude-longitude","slug":"latitude-longitude"},{"name":"pdo","slug":"pdo"},{"name":"ggplot2","slug":"ggplot2"},{"name":"object-comparison","slug":"object-comparison"},{"name":"awk","slug":"awk"},{"name":"datetime","slug":"datetime"},{"name":"bit-manipulation","slug":"bit-manipulation"},{"name":"mutable","slug":"mutable"},{"name":"instance-variables","slug":"instance-variables"},{"name":"multithreading","slug":"multithreading"},{"name":"google-maps-api-3","slug":"google-maps-api-3"},{"name":"semantics","slug":"semantics"},{"name":"propertynotfoundexception","slug":"propertynotfoundexception"},{"name":"security","slug":"security"},{"name":"command","slug":"command"},{"name":"http","slug":"http"},{"name":"benchmarking","slug":"benchmarking"},{"name":"pass-by-reference","slug":"pass-by-reference"}]},"__N_SSG":true}