{"pageProps":{"data":{"count":1,"rows":[{"id":48,"title":"Understanding slicing","slug":"understanding-slicing-1657384397680","postType":"QUESTION","createdAt":"2022-07-09T16:33:17.000Z","updatedAt":"2022-07-09T16:33:17.000Z","tags":[{"id":172,"name":"sequence","slug":"sequence","createdAt":"2022-07-09T16:33:17.000Z","updatedAt":"2022-07-09T16:33:17.000Z","Questions_Tags":{"questionId":48,"tagId":172}}]}]},"slug":"sequence","page":"1","answers":{"48":["\n&lt;p&gt;The syntax is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a[start:stop]  &lt;span class=&quot;hljs-comment&quot;&gt;# items start through stop-1&lt;/span&gt;\na[start:]      &lt;span class=&quot;hljs-comment&quot;&gt;# items start through the rest of the array&lt;/span&gt;\na[:stop]       &lt;span class=&quot;hljs-comment&quot;&gt;# items from the beginning through stop-1&lt;/span&gt;\na[:]           &lt;span class=&quot;hljs-comment&quot;&gt;# a copy of the whole array&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There is also the &lt;code&gt;step&lt;/code&gt; value, which can be used with any of the above:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a[start:stop:step] &lt;span class=&quot;hljs-comment&quot;&gt;# start through not past stop, by step&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The key point to remember is that the &lt;code&gt;:stop&lt;/code&gt; value represents the first value that is &lt;em&gt;not&lt;/em&gt; in the selected slice. So, the difference between &lt;code&gt;stop&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt; is the number of elements selected (if &lt;code&gt;step&lt;/code&gt; is 1, the default).&lt;/p&gt;\n&lt;p&gt;The other feature is that &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;stop&lt;/code&gt; may be a &lt;em&gt;negative&lt;/em&gt; number, which means it counts from the end of the array instead of the beginning. So:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]    &lt;span class=&quot;hljs-comment&quot;&gt;# last item in the array&lt;/span&gt;\na[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:]   &lt;span class=&quot;hljs-comment&quot;&gt;# last two items in the array&lt;/span&gt;\na[:-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]   &lt;span class=&quot;hljs-comment&quot;&gt;# everything except the last two items&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Similarly, &lt;code&gt;step&lt;/code&gt; may be a negative number:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]    &lt;span class=&quot;hljs-comment&quot;&gt;# all items in the array, reversed&lt;/span&gt;\na[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]   &lt;span class=&quot;hljs-comment&quot;&gt;# the first two items, reversed&lt;/span&gt;\na[:-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# the last two items, reversed&lt;/span&gt;\na[-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# everything except the last two items, reversed&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for &lt;code&gt;a[:-2]&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.&lt;/p&gt;\n&lt;h3&gt;Relationship with the &lt;code&gt;slice&lt;/code&gt; object&lt;/h3&gt;\n&lt;p&gt;A &lt;a href=&quot;https://www.w3schools.com/python/ref_func_slice.asp&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;slice&lt;/code&gt; object&lt;/a&gt; can represent a slicing operation, i.e.:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a[start:stop:step]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is equivalent to:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a[&lt;span class=&quot;hljs-built_in&quot;&gt;slice&lt;/span&gt;(start, stop, step)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Slice objects also behave slightly differently depending on the number of arguments, similarly to &lt;code&gt;range()&lt;/code&gt;, i.e. both &lt;code&gt;slice(stop)&lt;/code&gt; and &lt;code&gt;slice(start, stop[, step])&lt;/code&gt; are supported.\nTo skip specifying a given argument, one might use &lt;code&gt;None&lt;/code&gt;, so that e.g. &lt;code&gt;a[start:]&lt;/code&gt; is equivalent to &lt;code&gt;a[slice(start, None)]&lt;/code&gt; or &lt;code&gt;a[::-1]&lt;/code&gt; is equivalent to &lt;code&gt;a[slice(None, None, -1)]&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;While the &lt;code&gt;:&lt;/code&gt;-based notation is very helpful for simple slicing, the explicit use of &lt;code&gt;slice()&lt;/code&gt; objects simplifies the programmatic generation of slicing.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;http://docs.python.org/tutorial/introduction.html#strings&quot; rel=&quot;noreferrer&quot;&gt;Python tutorial&lt;/a&gt; talks about it (scroll down a bit until you get to the part about slicing).&lt;/p&gt;\n\n&lt;p&gt;The ASCII art diagram is helpful too for remembering how slices work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; +---+---+---+---+---+---+\n | P | y | t | h | o | n |\n +---+---+---+---+---+---+\n &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n-&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;One way to remember how slices work is to think of the indices as pointing &lt;em&gt;between&lt;/em&gt; characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of &lt;em&gt;n&lt;/em&gt; characters has index &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Enumerating the possibilities allowed by the grammar for the sequence &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[:]                &lt;span class=&quot;hljs-comment&quot;&gt;# [x[0],   x[1],          ..., x[-1]    ]&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[low:]             &lt;span class=&quot;hljs-comment&quot;&gt;# [x[low], x[low+1],      ..., x[-1]    ]&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[:high]            &lt;span class=&quot;hljs-comment&quot;&gt;# [x[0],   x[1],          ..., x[high-1]]&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[low:high]         &lt;span class=&quot;hljs-comment&quot;&gt;# [x[low], x[low+1],      ..., x[high-1]]&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[::stride]         &lt;span class=&quot;hljs-comment&quot;&gt;# [x[0],   x[stride],     ..., x[-1]    ]&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[low::stride]      &lt;span class=&quot;hljs-comment&quot;&gt;# [x[low], x[low+stride], ..., x[-1]    ]&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[:high:stride]     &lt;span class=&quot;hljs-comment&quot;&gt;# [x[0],   x[stride],     ..., x[high-1]]&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[low:high:stride]  &lt;span class=&quot;hljs-comment&quot;&gt;# [x[low], x[low+stride], ..., x[high-1]]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Of course, if &lt;code&gt;(high-low)%stride != 0&lt;/code&gt;, then the end point will be a little lower than &lt;code&gt;high-1&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;If &lt;code&gt;stride&lt;/code&gt; is negative, the ordering is changed a bit since we&apos;re counting down:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[::-stride]        &lt;span class=&quot;hljs-comment&quot;&gt;# [x[-1],   x[-1-stride],   ..., x[0]    ]&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[high::-stride]    &lt;span class=&quot;hljs-comment&quot;&gt;# [x[high], x[high-stride], ..., x[0]    ]&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[:low:-stride]     &lt;span class=&quot;hljs-comment&quot;&gt;# [x[-1],   x[-1-stride],   ..., x[low+1]]&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[high:low:-stride] &lt;span class=&quot;hljs-comment&quot;&gt;# [x[high], x[high-stride], ..., x[low+1]]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Extended slicing (with commas and ellipses) are mostly used only by special data structures (like NumPy); the basic sequences don&apos;t support them.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;slicee&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__getitem__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, item&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(item)\n...\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;slicee()[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, ::&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, ...]\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;(0, slice(1, 2, None), slice(None, None, 5), Ellipsis)&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The answers above don&apos;t discuss slice assignment. To understand slice assignment, it&apos;s helpful to add another concept to the ASCII art:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;                +---+---+---+---+---+---+\n                | P | y | t | h | o | n |\n                +---+---+---+---+---+---+\nSlice position: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\nIndex position:   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-comment&quot;&gt;# Why the two sets of numbers:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# indexing gives items, not lists&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Slicing gives lists&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One heuristic is, for a slice from zero to n, think: &quot;zero is the beginning, start at the beginning and take n items in a list&quot;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# the last of six items, indexed from zero&lt;/span&gt;\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# does NOT include the last item!&lt;/span&gt;\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# not p[0:5]!!!&lt;/span&gt;\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another heuristic is, &quot;for any slice, replace the start by zero, apply the previous heuristic to get the end of the list, then count the first number back up to chop items off the beginning&quot;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Start at the beginning and count out 4 items&lt;/span&gt;\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Take one item off the front&lt;/span&gt;\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Take two items off the front&lt;/span&gt;\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-comment&quot;&gt;# etc.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The first rule of slice assignment is that since slicing &lt;em&gt;returns&lt;/em&gt; a list, slice assignment &lt;em&gt;requires&lt;/em&gt; a list (or other iterable):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;T&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;T&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nTypeError: can only assign an iterable\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The second rule of slice assignment, which you can also see above, is that whatever portion of the list is returned by slice indexing, that&apos;s the same portion that is changed by slice assignment:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;T&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The third rule of slice assignment is, the assigned list (iterable) doesn&apos;t have to have the same length; the indexed slice is simply sliced out and replaced en masse by whatever is being assigned:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Start over&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The trickiest part to get used to is assignment to empty slices. Using heuristic 1 and 2 it&apos;s easy to get your head around &lt;em&gt;indexing&lt;/em&gt; an empty slice:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And then once you&apos;ve seen that, slice assignment to the empty slice makes sense too:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Assigned list is same length as slice&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Result is same length&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Assigned list is longer than slice&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# The result is longer&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# The result is longer still&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that, since we are not changing the second number of the slice (4), the inserted items always stack right up against the &apos;o&apos;, even when we&apos;re assigning to the empty slice. So the position for the empty slice assignment is the logical extension of the positions for the non-empty slice assignments.&lt;/p&gt;\n\n&lt;p&gt;Backing up a little bit, what happens when you keep going with our procession of counting up the slice beginning?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With slicing, once you&apos;re done, you&apos;re done; it doesn&apos;t start slicing backwards. In Python you don&apos;t get negative strides unless you explicitly ask for them by using a negative number.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are some weird consequences to the &quot;once you&apos;re done, you&apos;re done&quot; rule:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nIndexError: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; index out of &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In fact, compared to indexing, Python slicing is bizarrely error-proof:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;]\n []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2e99&lt;/span&gt;):&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1e99&lt;/span&gt;)]\n []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This can come in handy sometimes, but it can also lead to somewhat strange behavior:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p[&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2e99&lt;/span&gt;):&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1e99&lt;/span&gt;)] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;w&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;p\n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;w&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Depending on your application, that might... or might not... be what you were hoping for there!&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Below is the text of my original answer. It has been useful to many people, so I didn&apos;t want to delete it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r=[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This may also clarify the difference between slicing and indexing.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;h2&gt;Explain Python&apos;s slice notation&lt;/h2&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;In short, the colons (&lt;code&gt;:&lt;/code&gt;) in subscript notation (&lt;code&gt;subscriptable[subscriptarg]&lt;/code&gt;) make slice notation, which has the optional arguments &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt;, and &lt;code&gt;step&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;sliceable[start:stop:step]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python slicing is a computationally fast way to methodically access parts of your data. In my opinion, to be even an intermediate Python programmer, it&apos;s one aspect of the language that it is necessary to be familiar with.&lt;/p&gt;\n&lt;h2&gt;Important Definitions&lt;/h2&gt;\n&lt;p&gt;To begin with, let&apos;s define a few terms:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;start&lt;/code&gt;:&lt;/strong&gt; the beginning index of the slice, it will include the element at this index unless it is the same as &lt;em&gt;stop&lt;/em&gt;, defaults to 0, i.e. the first index. If it&apos;s negative, it means to start &lt;code&gt;n&lt;/code&gt; items from the end.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;stop&lt;/code&gt;:&lt;/strong&gt; the ending index of the slice, it does &lt;em&gt;not&lt;/em&gt; include the element at this index, defaults to length of the sequence being sliced, that is, up to and including the end.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;step&lt;/code&gt;:&lt;/strong&gt; the amount by which the index increases, defaults to 1. If it&apos;s negative, you&apos;re slicing over the iterable in reverse.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;How Indexing Works&lt;/h2&gt;\n&lt;p&gt;You can make any of these positive or negative numbers. The meaning of the positive numbers is straightforward, but for negative numbers, just like indexes in Python, you count backwards from the end for the &lt;em&gt;start&lt;/em&gt; and &lt;em&gt;stop&lt;/em&gt;, and for the &lt;em&gt;step&lt;/em&gt;, you simply decrement your index. This example is &lt;a href=&quot;https://docs.python.org/2/tutorial/introduction.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;from the documentation&apos;s tutorial&lt;/a&gt;, but I&apos;ve modified it slightly to indicate which item in a sequence each index references:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; +---+---+---+---+---+---+\n | P | y | t | h | o | n |\n +---+---+---+---+---+---+\n   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; \n  -&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;How Slicing Works&lt;/h2&gt;\n&lt;p&gt;To use slice notation with a sequence that supports it, you must include at least one colon in the square brackets that follow the sequence (which actually &lt;a href=&quot;https://docs.python.org/2/reference/datamodel.html#object.__getitem__&quot; rel=&quot;nofollow noreferrer&quot;&gt;implement the &lt;code&gt;__getitem__&lt;/code&gt; method of the sequence, according to the Python data model&lt;/a&gt;.)&lt;/p&gt;\n&lt;p&gt;Slice notation works like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;sequence[start:stop:step]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And recall that there are defaults for &lt;em&gt;start&lt;/em&gt;, &lt;em&gt;stop&lt;/em&gt;, and &lt;em&gt;step&lt;/em&gt;, so to access the defaults, simply leave out the argument.&lt;/p&gt;\n&lt;p&gt;Slice notation to get the last nine elements from a list (or any other sequence that supports it, like a string) would look like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_list[-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When I see this, I read the part in the brackets as &quot;9th from the end, to the end.&quot; (Actually, I abbreviate it mentally as &quot;-9, on&quot;)&lt;/p&gt;\n&lt;h2&gt;Explanation:&lt;/h2&gt;\n&lt;p&gt;The full notation is&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_list[-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and to substitute the defaults (actually when &lt;code&gt;step&lt;/code&gt; is negative, &lt;code&gt;stop&lt;/code&gt;&apos;s default is &lt;code&gt;-len(my_list) - 1&lt;/code&gt;, so &lt;code&gt;None&lt;/code&gt; for stop really just means it goes to whichever end step takes it to):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_list[-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(my_list):&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;strong&gt;colon&lt;/strong&gt;, &lt;code&gt;:&lt;/code&gt;,  is what tells Python you&apos;re giving it a slice and not a regular index. That&apos;s why the idiomatic way of making a shallow copy of lists in Python 2 is&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;list_copy = sequence[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And clearing them is with:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; my_list[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(Python 3 gets a &lt;code&gt;list.copy&lt;/code&gt; and &lt;code&gt;list.clear&lt;/code&gt; method.)&lt;/p&gt;\n&lt;h3&gt;When &lt;code&gt;step&lt;/code&gt; is negative, the defaults for &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; change&lt;/h3&gt;\n&lt;p&gt;By default, when the &lt;code&gt;step&lt;/code&gt; argument is empty (or &lt;code&gt;None&lt;/code&gt;), it is assigned to &lt;code&gt;+1&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;But you can pass in a negative integer, and the list (or most other standard sliceables) will be sliced from the end to the beginning.&lt;/p&gt;\n&lt;p&gt;Thus a negative slice will change the defaults for &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt;!&lt;/p&gt;\n&lt;h3&gt;Confirming this in the source&lt;/h3&gt;\n&lt;p&gt;I like to encourage users to read the source as well as the documentation. The &lt;a href=&quot;https://github.com/python/cpython/blob/master/Objects/sliceobject.c&quot; rel=&quot;nofollow noreferrer&quot;&gt;source code for slice objects and this logic is found here&lt;/a&gt;. First we determine if &lt;code&gt;step&lt;/code&gt; is negative:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;step_is_negative = step_sign &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;If so, the lower bound is &lt;code&gt;-1&lt;/code&gt;  meaning we slice all the way up to and including the beginning, and the upper bound is the length minus 1, meaning we start at the end. (Note that the semantics of this &lt;code&gt;-1&lt;/code&gt; is &lt;em&gt;different&lt;/em&gt; from a &lt;code&gt;-1&lt;/code&gt; that users may pass indexes in Python indicating the last item.)&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (step_is_negative) {\n    lower = PyLong_FromLong(&lt;span class=&quot;hljs-number&quot;&gt;-1L&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (lower == &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;goto&lt;/span&gt; error;\n\n    upper = PyNumber_Add(length, lower);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (upper == &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;goto&lt;/span&gt; error;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Otherwise &lt;code&gt;step&lt;/code&gt; is positive, and the lower bound will be zero and the upper bound (which we go up to but not including) the length of the sliced list.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    lower = _PyLong_Zero;\n    Py_INCREF(lower);\n    upper = length;\n    Py_INCREF(upper);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Then, we may need to apply the defaults for &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt;the default then for &lt;code&gt;start&lt;/code&gt; is calculated as the upper bound when &lt;code&gt;step&lt;/code&gt; is negative:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (self-&amp;gt;start == Py_None) {\n    start = step_is_negative ? upper : lower;\n    Py_INCREF(start);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;and &lt;code&gt;stop&lt;/code&gt;, the lower bound:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (self-&amp;gt;stop == Py_None) {\n    stop = step_is_negative ? lower : upper;\n    Py_INCREF(stop);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;h1&gt;Give your slices a descriptive name!&lt;/h1&gt;\n&lt;p&gt;You may find it useful to separate forming the slice from passing it to the &lt;code&gt;list.__getitem__&lt;/code&gt; method (&lt;a href=&quot;https://docs.python.org/2/reference/datamodel.html#object.__getitem__&quot; rel=&quot;nofollow noreferrer&quot;&gt;that&apos;s what the square brackets do&lt;/a&gt;). Even if you&apos;re not new to it, it keeps your code more readable so that others that may have to read your code can more readily understand what you&apos;re doing.&lt;/p&gt;\n&lt;p&gt;However, you can&apos;t just assign some integers separated by colons to a variable. You need to use the slice object:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;last_nine_slice = &lt;span class=&quot;hljs-built_in&quot;&gt;slice&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The second argument, &lt;code&gt;None&lt;/code&gt;, is required, so that the first argument is interpreted as the &lt;code&gt;start&lt;/code&gt; argument &lt;a href=&quot;https://docs.python.org/2/library/functions.html#slice&quot; rel=&quot;nofollow noreferrer&quot;&gt;otherwise it would be the &lt;code&gt;stop&lt;/code&gt; argument&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;You can then pass the slice object to your sequence:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;))[last_nine_slice]\n[&lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;92&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;94&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;96&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;97&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;98&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s interesting that ranges also take slices:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)[last_nine_slice]\n&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Memory Considerations:&lt;/h1&gt;\n&lt;p&gt;Since slices of Python lists create new objects in memory, another important function to be aware of is &lt;code&gt;itertools.islice&lt;/code&gt;. Typically you&apos;ll want to iterate over a slice, not just have it created statically in memory. &lt;code&gt;islice&lt;/code&gt; is perfect for this. A caveat, it doesn&apos;t support negative arguments to &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt;, or &lt;code&gt;step&lt;/code&gt;, so if that&apos;s an issue you may need to calculate indices or reverse the iterable in advance.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;length = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\nlast_nine_iter = itertools.islice(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(length)), length-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\nlist_last_nine = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(last_nine_iter)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and now:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list_last_nine\n[&lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;92&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;94&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;96&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;97&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;98&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The fact that list slices make a copy is a feature of lists themselves. If you&apos;re slicing advanced objects like a Pandas DataFrame, it may return a view on the original, and not a copy.&lt;/p&gt;\n    ","\n&lt;p&gt;And a couple of things that weren&apos;t immediately obvious to me when I first saw the slicing syntax:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Easy way to reverse sequences!&lt;/p&gt;\n\n&lt;p&gt;And if you wanted, for some reason, every second item in the reversed sequence:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x[::-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Python 2.7&lt;/p&gt;\n\n&lt;p&gt;Slicing in Python&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[a:b:c]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt; = length of string, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;\n\nc -- default &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt; The sign of c indicates forward &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; backward, absolute value of c indicates steps. Default &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; forward &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; step size &lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt; Positive means forward, negative means backward.\n\na --  When c &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; positive &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; blank, default &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.&lt;/span&gt; When c &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; negative, default &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;\n\nb --  When c &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; positive &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; blank, default &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;. When c &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; negative, default &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; -(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Understanding index assignment is very important.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In forward direction, starts at &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; ends at &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\nIn backward direction, starts at -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; ends at -&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When you say [a:b:c], you are saying depending on the sign of c (forward or backward), start at a and end at b (excluding element at bth index). Use the indexing rule above and remember you will only find elements in this range:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;-&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;, -&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, ..., &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; , &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But this range continues in both directions infinitely:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;...,-&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ,-&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;, -&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, ..., &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; , &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; , ....\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;             &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;\n             a    s    t   r    i   n   g\n    -&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   -&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;   -&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   -&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If your choice of a, b, and c allows overlap with the range above as you traverse using rules for a,b,c above you will either get a list with elements (touched during traversal) or you will get an empty list.&lt;/p&gt;\n\n&lt;p&gt;One last thing: if a and b are equal, then also you get an empty list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1[:]\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# a default is -1 , b default is -(len+1)&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1[:-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# a default is -1&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1[:-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# a default is -1&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1[::] &lt;span class=&quot;hljs-comment&quot;&gt;# c default is +1, so a default is 0, b default is len&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# c is -1 , so a default is -1 and b default is -(len+1)&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1[-&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Interesting&lt;/span&gt;\n[]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Interesting&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[]\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Interesting&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Interesting&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l1[:-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# a default is -1, stop(b) at -2 , step(c) by 2 in reverse direction&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Found this great table at &lt;a href=&quot;http://wiki.python.org/moin/MovingToPythonFromOtherLanguages&quot; rel=&quot;noreferrer&quot;&gt;http://wiki.python.org/moin/MovingToPythonFromOtherLanguages&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Python indexes &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; slices &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a six-element &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.\nIndexes &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt; the elements, slices &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt; the spaces between the elements.\n\nIndex &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; rear:    -&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;      a=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]    a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]==[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\nIndex &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; front:    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;      &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a)==&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;          a[:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]==[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n                   +---+---+---+---+---+---+    a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;            a[:-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]==[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n                   | a | b | c | d | e | f |    a[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;            a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]==[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n                   +---+---+---+---+---+---+    a[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;           a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]==[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\nSlice &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; front:  :   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   :    a[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\nSlice &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; rear:   :  -&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   :\n                                                b=a[:]\n                                                b==[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;] (shallow copy of a)&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;After using it a bit I realise that the simplest description is that it is exactly the same as the arguments in a &lt;code&gt;for&lt;/code&gt; loop...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;:to:step)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Any of them are optional:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(:to:step)\n(&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;::step)\n(&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;:to)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then the negative indexing just needs you to add the length of the string to the negative indices to understand it.&lt;/p&gt;\n\n&lt;p&gt;This works for me anyway...&lt;/p&gt;\n    ","\n&lt;p&gt;I find it easier to remember how it works, and then I can figure out any specific start/stop/step combination.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s instructive to understand &lt;code&gt;range()&lt;/code&gt; first:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;start=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, stop, step=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;):  &lt;span class=&quot;hljs-comment&quot;&gt;# Illegal syntax, but that&apos;s the effect&lt;/span&gt;\n    i = start\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; stop &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; step &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; i &amp;gt; stop):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; i\n        i += step\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Begin from &lt;code&gt;start&lt;/code&gt;, increment by &lt;code&gt;step&lt;/code&gt;, do not reach &lt;code&gt;stop&lt;/code&gt;.  Very simple.&lt;/p&gt;\n\n&lt;p&gt;The thing to remember about negative step is that &lt;code&gt;stop&lt;/code&gt; is always the excluded end, whether it&apos;s higher or lower. If you want same slice in opposite order, it&apos;s much cleaner to do the reversal separately: e.g. &lt;code&gt;&apos;abcde&apos;[1:-2][::-1]&lt;/code&gt; slices off one char from left, two from right, then reverses. (See also &lt;a href=&quot;http://www.python.org/dev/peps/pep-0322/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;reversed()&lt;/code&gt;&lt;/a&gt;.)&lt;/p&gt;\n\n&lt;p&gt;Sequence slicing is same, except it first normalizes negative indexes, and it can never go outside the sequence:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: The code below had a bug with &quot;never go outside the sequence&quot; when abs(step)&amp;gt;1; I &lt;em&gt;think&lt;/em&gt; I patched it to be correct, but it&apos;s hard to understand.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;this_is_how_slicing_works&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq, start=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, stop=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, step=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; start &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        start = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; step &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(seq)-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; start &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        start += &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(seq)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;lt;= start &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(seq):  &lt;span class=&quot;hljs-comment&quot;&gt;# clip if still outside bounds&lt;/span&gt;\n        start = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; step &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(seq)-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; stop &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        stop = (&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(seq) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; step &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# really -1, not last element&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; stop &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        stop += &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(seq)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(start, stop, step):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;lt;= i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(seq):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; seq[i]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Don&apos;t worry about the &lt;code&gt;is None&lt;/code&gt; details - just remember that omitting &lt;code&gt;start&lt;/code&gt; and/or &lt;code&gt;stop&lt;/code&gt; always does the right thing to give you the whole sequence.&lt;/p&gt;\n\n&lt;p&gt;Normalizing negative indexes first allows start and/or stop to be counted from the end independently: &lt;code&gt;&apos;abcde&apos;[1:-2] == &apos;abcde&apos;[1:3] == &apos;bc&apos;&lt;/code&gt; despite &lt;code&gt;range(1,-2) == []&lt;/code&gt;.\nThe normalization is sometimes thought of as &quot;modulo the length&quot;, but note it adds the length just once: e.g. &lt;code&gt;&apos;abcde&apos;[-53:42]&lt;/code&gt; is just the whole string.&lt;/p&gt;\n    ","\n&lt;p&gt;I use the &quot;an index points between elements&quot; method of thinking about it myself, but one way of describing it which sometimes helps others get it is this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mylist[X:Y]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;X is the index of the first element you want.&lt;br&gt;\nY is the index of the first element you &lt;em&gt;don&apos;t&lt;/em&gt; want.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Index:\n      ------------&amp;gt;\n  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n+---+---+---+---+---+\n| a | b | c | d | e |\n+---+---+---+---+---+\n  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n      &amp;lt;------------\n\nSlice:\n    &amp;lt;---------------|\n|---------------&amp;gt;\n:   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   :\n+---+---+---+---+---+\n| a | b | c | d | e |\n+---+---+---+---+---+\n:  -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   :\n|---------------&amp;gt;\n    &amp;lt;---------------|\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I hope this will help you to model the list in Python.&lt;/p&gt;\n\n&lt;p&gt;Reference: &lt;a href=&quot;http://wiki.python.org/moin/MovingToPythonFromOtherLanguages&quot; rel=&quot;noreferrer&quot;&gt;http://wiki.python.org/moin/MovingToPythonFromOtherLanguages&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is how I teach slices to newbies:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Understanding the difference between indexing and slicing:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Wiki Python has this amazing picture which clearly distinguishes indexing and slicing.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/o99aU.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;It is a list with six elements in it. To understand slicing better, consider that list as a set of six boxes placed together. Each box has an alphabet in it.&lt;/p&gt;\n\n&lt;p&gt;Indexing is like dealing with the contents of box. You can check contents of any box. But you can&apos;t check the contents of multiple boxes at once. You can even replace the contents of the box. But you can&apos;t place two balls in one box or replace two balls at a time.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;122&lt;/span&gt;]: alpha = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;]: alpha\nOut[&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;]: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;124&lt;/span&gt;]: alpha[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\nOut[&lt;span class=&quot;hljs-number&quot;&gt;124&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;127&lt;/span&gt;]: alpha[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;]: alpha\nOut[&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;]: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;129&lt;/span&gt;]: alpha[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&amp;lt;ipython-&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;129&lt;/span&gt;-c7eb16585371&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;()\n----&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; alpha[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n\nTypeError: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; indices must be integers, &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Slicing is like dealing with boxes themselves. You can pick up the first box and place it on another table. To pick up the box, all you need to know is the position of beginning and ending of the box.&lt;/p&gt;\n\n&lt;p&gt;You can even pick up the first three boxes or the last two boxes or all boxes between 1 and 4. So, you can pick any set of boxes if you know the beginning and ending. These positions are called start and stop positions.&lt;/p&gt;\n\n&lt;p&gt;The interesting thing is that you can replace multiple boxes at once. Also you can place multiple boxes wherever you like.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;130&lt;/span&gt;]: alpha[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\nOut[&lt;span class=&quot;hljs-number&quot;&gt;130&lt;/span&gt;]: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;131&lt;/span&gt;]: alpha[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;132&lt;/span&gt;]: alpha\nOut[&lt;span class=&quot;hljs-number&quot;&gt;132&lt;/span&gt;]: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;133&lt;/span&gt;]: alpha[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;134&lt;/span&gt;]: alpha\nOut[&lt;span class=&quot;hljs-number&quot;&gt;134&lt;/span&gt;]: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;135&lt;/span&gt;]: alpha[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;xx&apos;&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;136&lt;/span&gt;]: alpha\nOut[&lt;span class=&quot;hljs-number&quot;&gt;136&lt;/span&gt;]: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;xx&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Slicing With Step:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Till now you have picked boxes continuously. But sometimes you need to pick up discretely. For example, you can pick up every second box. You can even pick up every third box from the end. This value is called step size. This represents the gap between your successive pickups. The step size should be positive if You are picking boxes from the beginning to end and vice versa.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;137&lt;/span&gt;]: alpha = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;142&lt;/span&gt;]: alpha[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\nOut[&lt;span class=&quot;hljs-number&quot;&gt;142&lt;/span&gt;]: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;143&lt;/span&gt;]: alpha[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\nOut[&lt;span class=&quot;hljs-number&quot;&gt;143&lt;/span&gt;]: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;144&lt;/span&gt;]: alpha[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\nOut[&lt;span class=&quot;hljs-number&quot;&gt;144&lt;/span&gt;]: []\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;145&lt;/span&gt;]: alpha[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\nOut[&lt;span class=&quot;hljs-number&quot;&gt;145&lt;/span&gt;]: []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;How Python Figures Out Missing Parameters:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When slicing, if you leave out any parameter, Python tries to figure it out automatically.&lt;/p&gt;\n\n&lt;p&gt;If you check the source code of &lt;a href=&quot;http://en.wikipedia.org/wiki/CPython&quot; rel=&quot;noreferrer&quot;&gt;CPython&lt;/a&gt;, you will find a function called PySlice_GetIndicesEx() which figures out indices to a slice for any given parameters. Here is the logical equivalent code in Python.&lt;/p&gt;\n\n&lt;p&gt;This function takes a Python object and optional parameters for slicing and returns the start, stop, step, and slice length for the requested slice.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;py_slice_get_indices_ex&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, start=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, stop=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, step=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n\n    length = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(obj)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; step &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        step = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; step == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; Exception(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Step cannot be zero.&quot;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; start &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        start = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; step &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; start &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n            start += length\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; start &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n            start = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; step &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; start &amp;gt;= length:\n            start = length &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; step &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; stop &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        stop = length &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; step &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; stop &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n            stop += length\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; stop &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n            stop = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; step &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; stop &amp;gt;= length:\n            stop = length &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; step &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (step &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; stop &amp;gt;= start) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (step &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; start &amp;gt;= stop):\n        slice_length = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; step &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        slice_length = (stop - start + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)/(step) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        slice_length = (stop - start - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)/(step) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (start, stop, step, slice_length)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is the intelligence that is present behind slices. Since Python has an built-in function called slice, you can pass some parameters and check how smartly it calculates missing parameters.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]: alpha = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;]: s = &lt;span class=&quot;hljs-built_in&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;]: s\nOut[&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;]: s.indices(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(alpha))\nOut[&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;]: (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(*s.indices(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(alpha)))\nOut[&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;]: s = &lt;span class=&quot;hljs-built_in&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(*s.indices(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(alpha)))\nOut[&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;]: s = &lt;span class=&quot;hljs-built_in&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(*s.indices(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(alpha)))\nOut[&lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This post was originally written in my blog, &lt;em&gt;&lt;a href=&quot;https://avilpage.com/2015/03/a-slice-of-python-intelligence-behind.html&quot; rel=&quot;noreferrer&quot;&gt;The Intelligence Behind Python Slices&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Python slicing notation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a[start:end:step]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;For &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;, negative values are interpreted as being relative to the end of the sequence.&lt;/li&gt;\n&lt;li&gt;Positive indices for &lt;code&gt;end&lt;/code&gt; indicate the position &lt;em&gt;after&lt;/em&gt; the last element to be included.&lt;/li&gt;\n&lt;li&gt;Blank values are defaulted as follows: &lt;code&gt;[+0:-0:1]&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Using a negative step reverses the interpretation of &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The notation extends to (numpy) matrices and multidimensional arrays.  For example, to slice entire columns you can use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;m[::,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:] &lt;span class=&quot;hljs-comment&quot;&gt;## slice the first two columns&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Slices hold references, not copies, of the array elements.  If you want to make a separate copy an array, you can use &lt;a href=&quot;https://stackoverflow.com/questions/6532881/how-to-make-a-copy-of-a-2d-array-in-python&quot;&gt;&lt;code&gt;deepcopy()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You can also use slice assignment to remove one or more elements from a list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;r = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] = []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;r\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is just for some extra info...\nConsider the list below &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l=[&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;345&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;456&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;945&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;467&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Few other tricks for reversing the list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l[&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l):-&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;467&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;945&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;456&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;345&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l[:-&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;467&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;945&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;456&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;345&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l[&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;467&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;945&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;456&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;345&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;467&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;945&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;456&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;345&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;467&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;945&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;456&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;345&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;1. Slice Notation&lt;/h2&gt;\n\n&lt;p&gt;To make it simple, remember &lt;strong&gt;slice has only one form&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s[start:end:step]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and here is how it works:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;s&lt;/code&gt;: an object that can be sliced&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;start&lt;/code&gt;: first index to start iteration&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;end&lt;/code&gt;: last index, &lt;strong&gt;NOTE that &lt;code&gt;end&lt;/code&gt; index will not be included in the resulted slice&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;step&lt;/code&gt;: pick element every &lt;code&gt;step&lt;/code&gt; index&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Another import thing: &lt;strong&gt;all &lt;code&gt;start&lt;/code&gt;,&lt;code&gt;end&lt;/code&gt;, &lt;code&gt;step&lt;/code&gt; can be omitted!&lt;/strong&gt; And if they are omitted, their default value will be used: &lt;code&gt;0&lt;/code&gt;,&lt;code&gt;len(s)&lt;/code&gt;,&lt;code&gt;1&lt;/code&gt; accordingly.&lt;/p&gt;\n\n&lt;p&gt;So possible variations are:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Mostly used variations&lt;/span&gt;\ns[start:end]\ns[start:]\ns[:end]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Step-related variations&lt;/span&gt;\ns[:end:step]\ns[start::step]\ns[::step]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Make a copy&lt;/span&gt;\ns[:]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;NOTE: If &lt;code&gt;start &amp;gt;= end&lt;/code&gt; (considering only when &lt;code&gt;step&amp;gt;0&lt;/code&gt;), Python will return a empty slice &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h2&gt;2. Pitfalls&lt;/h2&gt;\n\n&lt;p&gt;The above part explains the core features on how slice works, and it will work on most occasions. However, there can be pitfalls you should watch out, and this part explains them.&lt;/p&gt;\n\n&lt;h3&gt;Negative indexes&lt;/h3&gt;\n\n&lt;p&gt;The very first thing that confuses Python learners is that &lt;strong&gt;an index can be negative!&lt;/strong&gt;\nDon&apos;t panic: &lt;strong&gt;a negative index means count backwards.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s[-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;:]    &lt;span class=&quot;hljs-comment&quot;&gt;# Start at the 5th index from the end of array,&lt;/span&gt;\n          &lt;span class=&quot;hljs-comment&quot;&gt;# thus returning the last 5 elements.&lt;/span&gt;\ns[:-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]    &lt;span class=&quot;hljs-comment&quot;&gt;# Start at index 0, and end until the 5th index from end of array,&lt;/span&gt;\n          &lt;span class=&quot;hljs-comment&quot;&gt;# thus returning s[0:len(s)-5].&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Negative step&lt;/h3&gt;\n\n&lt;p&gt;Making things more confusing is that &lt;strong&gt;&lt;code&gt;step&lt;/code&gt; can be negative too!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;A negative step means iterate the array backwards: from the end to start, with the end index included, and the start index excluded from the result.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: when step is negative, the default value for &lt;code&gt;start&lt;/code&gt; is &lt;code&gt;len(s)&lt;/code&gt; (while &lt;code&gt;end&lt;/code&gt; does not equal to &lt;code&gt;0&lt;/code&gt;, because &lt;code&gt;s[::-1]&lt;/code&gt; contains &lt;code&gt;s[0]&lt;/code&gt;). For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]            &lt;span class=&quot;hljs-comment&quot;&gt;# Reversed slice&lt;/span&gt;\ns[&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(s)::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]      &lt;span class=&quot;hljs-comment&quot;&gt;# The same as above, reversed slice&lt;/span&gt;\ns[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(s):-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]     &lt;span class=&quot;hljs-comment&quot;&gt;# Empty list&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Out of range error?&lt;/h3&gt;\n\n&lt;p&gt;Be surprised: &lt;strong&gt;slice does not raise an IndexError when the index is out of range!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If the index is out of range, Python will try its best to set the index to &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;len(s)&lt;/code&gt; according to the situation. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s[:&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(s)+&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]      &lt;span class=&quot;hljs-comment&quot;&gt;# The same as s[:len(s)]&lt;/span&gt;\ns[-&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(s)-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;::]    &lt;span class=&quot;hljs-comment&quot;&gt;# The same as s[0:]&lt;/span&gt;\ns[&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(s)+&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]   &lt;span class=&quot;hljs-comment&quot;&gt;# The same as s[len(s)::-1], and the same as s[::-1]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;3. Examples&lt;/h2&gt;\n\n&lt;p&gt;Let&apos;s finish this answer with examples, explaining everything we have discussed:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Create our array for demonstration&lt;/span&gt;\nIn [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: s = [i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: s\nOut[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]: s[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:]   &lt;span class=&quot;hljs-comment&quot;&gt;# From index 2 to last index&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]: s[:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]   &lt;span class=&quot;hljs-comment&quot;&gt;# From index 0 up to index 8&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]: s[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# From index 4 (included) up to index 7(excluded)&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]: s[:-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# Up to second last index (negative index)&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]: s[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:]  &lt;span class=&quot;hljs-comment&quot;&gt;# From second last index (negative index)&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]: s[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# From last to first in reverse order (negative step)&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]: s[::-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# All odd numbers in reversed order&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;]: s[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;::-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# All even numbers in reversed order&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;]: s[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;]   &lt;span class=&quot;hljs-comment&quot;&gt;# End is out of range, and Python will set it to len(s).&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]: s[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]    &lt;span class=&quot;hljs-comment&quot;&gt;# Start &amp;gt; end; return empty list&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]: []\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;]: s[&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;]     &lt;span class=&quot;hljs-comment&quot;&gt;# Access index 11 (greater than len(s)) will raise an IndexError&lt;/span&gt;\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n&amp;lt;ipython-&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;-79ffc22473a3&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;()\n----&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; s[&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;]\n\nIndexError: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; index out of &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As a general rule, writing code with a lot of hardcoded index values leads to a readability\nand maintenance mess. For example, if you come back to the code a year later, youll\nlook at it and wonder what you were thinking when you wrote it. The solution shown\nis simply a way of more clearly stating what your code is actually doing.\nIn general, the built-in slice() creates a slice object that can be used anywhere a slice\nis allowed. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;items = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = &lt;span class=&quot;hljs-built_in&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;items[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;items[a]\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;items[a] = [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;items\n[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; items[a]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;items\n[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you have a slice instance s, you can get more information about it by looking at its\ns.start, s.stop, and s.step attributes, respectively. For example:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = &lt;span class=&quot;hljs-built_in&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a.start\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a.stop\n&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a.step\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The previous answers don&apos;t discuss multi-dimensional array slicing which is possible using the famous &lt;a href=&quot;http://en.wikipedia.org/wiki/NumPy&quot; rel=&quot;noreferrer&quot;&gt;NumPy&lt;/a&gt; package:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Slicing can also be applied to multi-dimensional arrays.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Here, a is a NumPy array&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a\narray([[ &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],\n       [ &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,  &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;],\n       [ &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;]])\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a[:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\narray([[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],\n       [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &quot;&lt;code&gt;:2&lt;/code&gt;&quot; before the comma operates on the first dimension and the &quot;&lt;code&gt;0:3:2&lt;/code&gt;&quot; after the comma operates on the second dimension.&lt;/p&gt;\n    ","\n&lt;h3&gt;The rules of slicing are as follows:&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[lower bound : upper bound : step size]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;I-&lt;/strong&gt; Convert &lt;code&gt;upper bound&lt;/code&gt;  and &lt;code&gt;lower bound&lt;/code&gt; into common signs.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;II-&lt;/strong&gt; Then check if the &lt;code&gt;step size&lt;/code&gt; is a &lt;em&gt;positive&lt;/em&gt; or a &lt;em&gt;negative&lt;/em&gt; value.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;(i)&lt;/strong&gt; If the &lt;code&gt;step size&lt;/code&gt; is a &lt;strong&gt;positive value&lt;/strong&gt;, &lt;code&gt;upper bound&lt;/code&gt; should be &lt;strong&gt;greater than&lt;/strong&gt; &lt;code&gt;lower bound&lt;/code&gt;, otherwise &lt;code&gt;empty string&lt;/code&gt; is printed. &lt;em&gt;For example&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Welcome&quot;&lt;/span&gt;\ns1=s[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(s1)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Wel\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However if we run the following code:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Welcome&quot;&lt;/span&gt;\ns1=s[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(s1)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It will return an &lt;strong&gt;empty string&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;(ii)&lt;/strong&gt; If the &lt;code&gt;step size&lt;/code&gt; if a &lt;strong&gt;negative value&lt;/strong&gt;, &lt;code&gt;upper bound&lt;/code&gt; should be &lt;strong&gt;lesser than&lt;/strong&gt; &lt;code&gt;lower bound&lt;/code&gt;, otherwise &lt;code&gt;empty string&lt;/code&gt; will be printed. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Welcome&quot;&lt;/span&gt;\ns1=s[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(s1)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;cle\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But if we run the following code:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Welcome&quot;&lt;/span&gt;\ns1=s[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(s1)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output will be an &lt;strong&gt;empty string&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Thus in the code:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;abcd&apos;&lt;/span&gt;\nl = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;)\nstr2 = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;[l-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]    &lt;span class=&quot;hljs-comment&quot;&gt;#str[3:0:-1] &lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(str2)\nstr2 = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;[l-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]    &lt;span class=&quot;hljs-comment&quot;&gt;#str[3:-1:-1]&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(str2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the first &lt;code&gt;str2=str[l-1:0:-1]&lt;/code&gt;, the &lt;code&gt;upper bound&lt;/code&gt; is &lt;strong&gt;lesser than&lt;/strong&gt; the &lt;code&gt;lower bound&lt;/code&gt;, thus &lt;code&gt;dcb&lt;/code&gt; is printed.&lt;/p&gt;\n&lt;p&gt;However in &lt;code&gt;str2=str[l-1:-1:-1]&lt;/code&gt;, the &lt;code&gt;upper bound&lt;/code&gt; is &lt;strong&gt;not less than&lt;/strong&gt; the &lt;code&gt;lower bound&lt;/code&gt; (upon converting &lt;code&gt;lower bound&lt;/code&gt; into &lt;strong&gt;negative value&lt;/strong&gt; which is &lt;code&gt;-1&lt;/code&gt;: since &lt;code&gt;index&lt;/code&gt; of last element is -1 as well as 3).&lt;/p&gt;\n    ","\n&lt;p&gt;In my opinion, you will understand and memorize better the Python string slicing notation if you look at it the following way (read on).&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s work with the following string ...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;azString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abcdefghijklmnopqrstuvwxyz&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For those who don&apos;t know, you can create any substring from &lt;code&gt;azString&lt;/code&gt; using the notation &lt;code&gt;azString[x:y]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Coming from other programming languages, that&apos;s when the common sense gets compromised. What are x and y?&lt;/p&gt;\n\n&lt;p&gt;I had to sit down and run several scenarios in my quest for a memorization technique that will help me remember what x and y are and help me slice strings properly at the first attempt.&lt;/p&gt;\n\n&lt;p&gt;My conclusion is that x and y should be seen as the boundary indexes that are surrounding the strings that we want to extra. So we should see the expression as &lt;code&gt;azString[index1, index2]&lt;/code&gt; or even more clearer as &lt;code&gt;azString[index_of_first_character, index_after_the_last_character]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here is an example visualization of that ...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Letters   a b c d e f g h i j ...\n                  \n                        \nIndexes  0 1 2 3 4 5 6 7 8 9 ...\n                        \ncdefgh    index1       index2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So all you have to do is setting index1 and index2 to the values that will surround the desired substring. For instance, to get the substring &quot;cdefgh&quot;, you can use &lt;code&gt;azString[2:8]&lt;/code&gt;, because the index on the left side of &quot;c&quot; is 2 and the one on the right size of &quot;h&quot; is 8.&lt;/p&gt;\n\n&lt;p&gt;Remember that we are setting the boundaries. And those boundaries are the positions where you could place some brackets that will be wrapped around the substring like this ...&lt;/p&gt;\n\n&lt;p&gt;a b &lt;strong&gt;[&lt;/strong&gt; c d e f g h &lt;strong&gt;]&lt;/strong&gt; i j&lt;/p&gt;\n\n&lt;p&gt;That trick works all the time and is easy to memorize.&lt;/p&gt;\n    ","\n&lt;p&gt;I personally think about it like a &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a[start:end:step]\n&lt;span class=&quot;hljs-comment&quot;&gt;# for(i = start; i &amp;lt; end; i += step)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, note that negative values for &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; are relative to the end of the list and computed in the example above by &lt;code&gt;given_index + a.shape[0]&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;slicegraphical&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s, lista&lt;/span&gt;):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(s) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Enter a string of maximum 9 characters,\n    so the printig would looki nice&quot;&quot;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# print &quot; &quot;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;  &apos;&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&apos;+---&apos;&lt;/span&gt; * &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(s) +&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; letter &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; s:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;| {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(letter),\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;|&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;,; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;+---&apos;&lt;/span&gt; * &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(s) +&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; letter &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(s) +&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;{}  &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(letter),\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; letter &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;*(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(s)), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(letter),\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; triada &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; lista:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(triada) == &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-comment&quot;&gt;# 000&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; s+&lt;span class=&quot;hljs-string&quot;&gt;&apos;[   :   :   ]&apos;&lt;/span&gt; +&lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;, s[triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-comment&quot;&gt;# 001&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; s+&lt;span class=&quot;hljs-string&quot;&gt;&apos;[   :   :{0:2d} ]&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) +&lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;, s[triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-comment&quot;&gt;# 010&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; s+&lt;span class=&quot;hljs-string&quot;&gt;&apos;[   :{0:2d} :   ]&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) +&lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;, s[triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-comment&quot;&gt;# 011&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; s+&lt;span class=&quot;hljs-string&quot;&gt;&apos;[   :{0:2d} :{1:2d} ]&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) +&lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;, s[triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-comment&quot;&gt;# 100&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; s+&lt;span class=&quot;hljs-string&quot;&gt;&apos;[{0:2d} :   :   ]&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) +&lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;, s[triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-comment&quot;&gt;# 101&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; s+&lt;span class=&quot;hljs-string&quot;&gt;&apos;[{0:2d} :   :{1:2d} ]&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) +&lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;, s[triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-comment&quot;&gt;# 110&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; s+&lt;span class=&quot;hljs-string&quot;&gt;&apos;[{0:2d} :{1:2d} :   ]&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) +&lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;, s[triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-comment&quot;&gt;# 111&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; s+&lt;span class=&quot;hljs-string&quot;&gt;&apos;[{0:2d} :{1:2d} :{2:2d} ]&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) +&lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;, s[triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(triada) == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-comment&quot;&gt;# 00&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; s+&lt;span class=&quot;hljs-string&quot;&gt;&apos;[   :   ]    &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;, s[triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-comment&quot;&gt;# 01&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; s+&lt;span class=&quot;hljs-string&quot;&gt;&apos;[   :{0:2d} ]    &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) + &lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;, s[triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-comment&quot;&gt;# 10&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; s+&lt;span class=&quot;hljs-string&quot;&gt;&apos;[{0:2d} :   ]    &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) + &lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;, s[triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-comment&quot;&gt;# 11&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; s+&lt;span class=&quot;hljs-string&quot;&gt;&apos;[{0:2d} :{1:2d} ]    &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;],triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) + &lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;, s[triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:triada[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]]\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(triada) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; s+&lt;span class=&quot;hljs-string&quot;&gt;&apos;[{0:2d} ]        &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) + &lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;, s[triada[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Change &quot;s&quot; to what ever string you like, make it 9 characters for&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# better representation.&lt;/span&gt;\n    s = &lt;span class=&quot;hljs-string&quot;&gt;&apos;COMPUTERS&apos;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# add to this list different lists to experement with indexes&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# to represent ex. s[::], use s[None, None,None], otherwise you get an error&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# for s[2:] use s[2:None]&lt;/span&gt;\n\n    lista = [[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],[-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],[-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;],[-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],[-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n\n    slicegraphical(s, lista)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can run this script and experiment with it, below is some samples that I got from the script.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  +---+---+---+---+---+---+---+---+---+\n  | C | O | M | P | U | T | E | R | S |\n  +---+---+---+---+---+---+---+---+---+\n  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;   \n -&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; \n\nCOMPUTERS[ &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; ]     =  UTE\nCOMPUTERS[ &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ] =  MU\nCOMPUTERS[-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; :-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ] =  UPM\nCOMPUTERS[ &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; ]         =  U\nCOMPUTERS[-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; :-&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; :-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ] =  TU\nCOMPUTERS[ &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; :-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ] =  MPUT\nCOMPUTERS[ &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; :-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; :-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ] =  \nCOMPUTERS[   :   :-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ] =  SRETUPMOC\nCOMPUTERS[-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; :   ]     =  UTERS\nCOMPUTERS[-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; :-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ] =  UPMO\nCOMPUTERS[-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; :   :-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ] =  UPMOC\nCOMPUTERS[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; :-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ] =  SEUM\n[Finished &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;s]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When using a negative step, notice that the answer is shifted to the right by 1.&lt;/p&gt;\n    ","\n&lt;p&gt;My brain seems happy to accept that &lt;code&gt;lst[start:end]&lt;/code&gt; contains the &lt;code&gt;start&lt;/code&gt;-th item. I might even say that it is a &apos;natural assumption&apos;.&lt;/p&gt;\n\n&lt;p&gt;But occasionally a doubt creeps in and my brain asks for reassurance that it does not contain the &lt;code&gt;end&lt;/code&gt;-th element.&lt;/p&gt;\n\n&lt;p&gt;In these moments I rely on this simple theorem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt; n,    lst = lst[:n] + lst[n:]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This pretty property tells me that &lt;code&gt;lst[start:end]&lt;/code&gt; does not contain the &lt;code&gt;end&lt;/code&gt;-th item because it is in &lt;code&gt;lst[end:]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Note that this theorem is true for any &lt;code&gt;n&lt;/code&gt; at all. For example, you can check that&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lst = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\nlst[:-&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;] + lst[-&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;:] == lst\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;returns &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In Python, the most basic form for slicing is the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;l[start:end]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where &lt;code&gt;l&lt;/code&gt; is some collection, &lt;code&gt;start&lt;/code&gt; is an inclusive index, and &lt;code&gt;end&lt;/code&gt; is an exclusive index.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: l = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;))\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: l[:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# First five elements&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]: l[-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;:] &lt;span class=&quot;hljs-comment&quot;&gt;# Last five elements&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When slicing from the start, you can omit the zero index, and when slicing to the end, you can omit the final index since it is redundant, so do not be verbose:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]: l[:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] == l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\nOut[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]: l[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;:] == l[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)]\nOut[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Negative integers are useful when doing offsets relative to the end of a collection:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]: l[:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Include all elements but the last one&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]: l[-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:] &lt;span class=&quot;hljs-comment&quot;&gt;# Take the last three elements&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is possible to provide indices that are out of bounds when slicing such as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]: l[:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# 20 is out of index bounds, and l[20] will raise an IndexError exception&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;]: l[-&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:] &lt;span class=&quot;hljs-comment&quot;&gt;# -20 is out of index bounds, and l[-20] will raise an IndexError exception&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Keep in mind that the result of slicing a collection is a whole new collection. In addition, when using slice notation in assignments, the length of the slice assignments do not need to be the same. The values before and after the assigned slice will be kept, and the collection will shrink or grow to contain the new values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;]: l[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;] = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Assigning fewer elements than the ones contained in the sliced collection l[2:6]&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;]: l\nOut[&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;]: l[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;] = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Assigning more elements than the ones contained in the sliced collection l [2:5]&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;]: l\nOut[&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;l&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;l&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you omit the start and end index, you will make a copy of the collection:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]: l_copy = l[:]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;]: l == l_copy &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; l &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; l_copy\nOut[&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;]: &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If the start and end indexes are omitted when performing an assignment operation, the entire content of the collection will be replaced with a copy of what is referenced:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;]: l[:] = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello...&apos;&lt;/span&gt;)\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]: l\nOut[&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;l&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;l&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Besides basic slicing, it is also possible to apply the following notation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;l[start:end:step]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where &lt;code&gt;l&lt;/code&gt; is a collection, &lt;code&gt;start&lt;/code&gt; is an inclusive index, &lt;code&gt;end&lt;/code&gt; is an exclusive index, and &lt;code&gt;step&lt;/code&gt; is a stride that can be used to take every &lt;em&gt;nth&lt;/em&gt; item in &lt;code&gt;l&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;]: l = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;))\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;]: l[::&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Take the elements which indexes are even&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;]: l[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;::&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# Take the elements which indexes are odd&lt;/span&gt;\nOut[&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using &lt;code&gt;step&lt;/code&gt; provides a useful trick to reverse a collection in Python:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;]: l[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\nOut[&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is also possible to use negative integers for &lt;code&gt;step&lt;/code&gt; as the following example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In[&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;]:  l[::-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\nOut[&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, using a negative value for &lt;code&gt;step&lt;/code&gt; could become very confusing. Moreover, in order to be &lt;a href=&quot;https://en.wiktionary.org/wiki/Pythonic#Adjective&quot; rel=&quot;nofollow noreferrer&quot;&gt;Pythonic&lt;/a&gt;, you should avoid using &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;, and &lt;code&gt;step&lt;/code&gt; in a single slice. In case this is required, consider doing this in two assignments (one to slice, and the other to stride).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;]: l = l[::&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# This step is for striding&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;]: l\nOut[&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;]: l = l[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# This step is for slicing&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;]: l\nOut[&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I want to add one &lt;em&gt;Hello, World!&lt;/em&gt; example that explains the basics of slices for the very beginners. It helped me a lot.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s have a list with six values &lt;code&gt;[&apos;P&apos;, &apos;Y&apos;, &apos;T&apos;, &apos;H&apos;, &apos;O&apos;, &apos;N&apos;]&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;+---+---+---+---+---+---+\n| P | Y | T | H | O | N |\n+---+---+---+---+---+---+\n  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now the simplest slices of that list are its sublists. The notation is &lt;code&gt;[&amp;lt;index&amp;gt;:&amp;lt;index&amp;gt;]&lt;/code&gt; and the key is to read it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[ start cutting before this index : end cutting before this index ]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now if you make a slice &lt;code&gt;[2:5]&lt;/code&gt; of the list above, this will happen:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;        |           |\n+---+---|---+---+---|---+\n| P | Y | T | H | O | N |\n+---+---|---+---+---|---+\n  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You made a cut &lt;strong&gt;before&lt;/strong&gt; the element with index &lt;code&gt;2&lt;/code&gt; and another cut &lt;strong&gt;before&lt;/strong&gt; the element with index &lt;code&gt;5&lt;/code&gt;. So the result will be a slice between those two cuts, a list &lt;code&gt;[&apos;T&apos;, &apos;H&apos;, &apos;O&apos;]&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Most of the previous answers clears up questions about slice notation.&lt;/p&gt;\n\n&lt;p&gt;The extended indexing syntax used for slicing is &lt;code&gt;aList[start:stop:step]&lt;/code&gt;, and basic examples are:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/IVkET.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/IVkET.jpg&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;More slicing examples: &lt;a href=&quot;https://docs.python.org/2.3/whatsnew/section-slices.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;15 Extended Slices&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The below is the example of an index of a string:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; +---+---+---+---+---+\n | H | e | l | p | A |\n +---+---+---+---+---+\n &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name string&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Slicing example: [start:end:step]&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;[start:end] &lt;span class=&quot;hljs-comment&quot;&gt;# Items start through end-1&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;[start:]    &lt;span class=&quot;hljs-comment&quot;&gt;# Items start through the rest of the array&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;[:end]      &lt;span class=&quot;hljs-comment&quot;&gt;# Items from the beginning through end-1&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;[:]         &lt;span class=&quot;hljs-comment&quot;&gt;# A copy of the whole array&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Below is the example usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = N\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = Na\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;] = Name st\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = Nm t\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = Nm ti\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you feel negative indices in slicing is confusing, here&apos;s a very easy way to think about it: just replace the negative index with &lt;code&gt;len - index&lt;/code&gt;. So for example, replace -3 with &lt;code&gt;len(list) - 3&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The best way to illustrate what slicing does internally is just show it in code that implements this operation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, start = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, end = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, step = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;):\n  &lt;span class=&quot;hljs-comment&quot;&gt;# Take care of missing start/end parameters&lt;/span&gt;\n  start = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; start &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; start\n  end = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; end &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; end\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;# Take care of negative start/end parameters&lt;/span&gt;\n  start = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) + start &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; start &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; start\n  end = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) + end &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; end &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; end\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;# Now just execute a for-loop with start, end and step&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(start, end, step)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The basic slicing technique is to define the starting point, the stopping point, and the step sizealso known as stride.&lt;/p&gt;\n&lt;p&gt;First, we will create a list of values to use in our slicing.&lt;/p&gt;\n&lt;p&gt;Create two lists to slice. The first is a numeric list from 1 to 9 (List A). The second is also a numeric list, from 0 to 9 (List B):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;A = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;# Start, stop, and step&lt;/span&gt;\nB = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;This is List A:&quot;&lt;/span&gt;, A)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;This is List B:&quot;&lt;/span&gt;, B)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Index the number 3 from A and the number 6 from B.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(A[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;])\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(B[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Basic Slicing&lt;/h3&gt;\n&lt;p&gt;Extended indexing syntax used for slicing is &lt;code&gt;aList[start:stop:step]&lt;/code&gt;. The start argument and the step argument both default to &lt;code&gt;None&lt;/code&gt;the only required argument is stop. Did you notice this is similar to how range was used to define lists A and B? This is because the slice object represents the set of indices specified by &lt;code&gt;range(start, stop, step)&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;As you can see, defining only stop returns one element. Since the start defaults to none, this translates into retrieving only one element.&lt;/p&gt;\n&lt;p&gt;It is important to note, the first element is index 0, &lt;em&gt;not&lt;/em&gt; index 1. This is why we are using 2 lists for this exercise. List A&apos;s elements are numbered according to the ordinal position (the first element is 1, the second element is 2, etc.) while List B&apos;s elements are the numbers that would be used to index them (&lt;code&gt;[0]&lt;/code&gt; for the first element, 0, etc.).&lt;/p&gt;\n&lt;p&gt;With extended indexing syntax, we retrieve a range of values. For example, all values are retrieved with a colon.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;A[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To retrieve a subset of elements, the start and stop positions need to be defined.&lt;/p&gt;\n&lt;p&gt;Given the pattern &lt;code&gt;aList[start:stop]&lt;/code&gt;, retrieve the first two elements from List A.&lt;/p&gt;\n    "]},"randomTags":[{"name":"android","slug":"android"},{"name":"dynamic-arrays","slug":"dynamic-arrays"},{"name":"python-2.7","slug":"python-2.7"},{"name":"cdi","slug":"cdi"},{"name":"semantics","slug":"semantics"},{"name":"design-patterns","slug":"design-patterns"},{"name":"integer","slug":"integer"},{"name":"flask-restless","slug":"flask-restless"},{"name":"protractor","slug":"protractor"},{"name":"android-recyclerview","slug":"android-recyclerview"},{"name":"reserved-words","slug":"reserved-words"},{"name":"inheritance","slug":"inheritance"},{"name":"firebase","slug":"firebase"},{"name":"input","slug":"input"},{"name":"long-integer","slug":"long-integer"},{"name":"python-3.6","slug":"python-3.6"},{"name":"debugging","slug":"debugging"},{"name":"pygame","slug":"pygame"},{"name":"variables","slug":"variables"},{"name":"file","slug":"file"}]},"__N_SSG":true}