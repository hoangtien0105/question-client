{"pageProps":{"data":{"count":1,"rows":[{"id":390,"title":"Are dictionaries ordered in Python 3.6+?","slug":"are-dictionaries-ordered-in-python-3.6+-1657387834234","postType":"QUESTION","createdAt":"2022-07-09T17:30:34.000Z","updatedAt":"2022-07-09T17:30:34.000Z","tags":[{"id":2115,"name":"python-3.6","slug":"python-3.6","createdAt":"2022-07-09T17:30:34.000Z","updatedAt":"2022-07-09T17:30:34.000Z","Questions_Tags":{"questionId":390,"tagId":2115}}]}]},"slug":"python-3.6","page":1,"answers":{"390":["\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Are dictionaries ordered in Python 3.6+?&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;They are &lt;strong&gt;insertion ordered&lt;/strong&gt;&lt;sup&gt;&lt;strong&gt;[1]&lt;/strong&gt;&lt;/sup&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;As of Python 3.6&lt;/strong&gt;, for the CPython implementation of Python, dictionaries &lt;em&gt;remember the order of items inserted&lt;/em&gt;. &lt;em&gt;This is considered an implementation detail in Python 3.6&lt;/em&gt;; you need to use &lt;code&gt;OrderedDict&lt;/code&gt; if you want insertion ordering that&apos;s &lt;em&gt;guaranteed&lt;/em&gt; across other implementations of Python (and other ordered behavior&lt;sup&gt;&lt;strong&gt;[1]&lt;/strong&gt;&lt;/sup&gt;).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;As of Python 3.7&lt;/strong&gt;, this is a guaranteed language feature, not merely an implementation detail. &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2017-December/151283.html&quot; rel=&quot;noreferrer&quot;&gt;From a python-dev message by GvR&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Make it so. &quot;Dict keeps insertion order&quot; is the ruling. Thanks!&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This simply means that &lt;em&gt;you can depend on it&lt;/em&gt;. Other implementations of Python must also offer an insertion ordered dictionary if they wish to be a conforming implementation of Python 3.7.&lt;/p&gt;\n&lt;hr&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;How does the Python &lt;code&gt;3.6&lt;/code&gt; dictionary implementation perform better&lt;sup&gt;[2]&lt;/sup&gt; than the older one while preserving element order?&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Essentially, by &lt;em&gt;keeping two arrays&lt;/em&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The first array, &lt;a href=&quot;https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L551&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;dk_entries&lt;/code&gt;&lt;/a&gt;, holds the entries (&lt;a href=&quot;https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L4&quot; rel=&quot;noreferrer&quot;&gt;of type &lt;code&gt; PyDictKeyEntry&lt;/code&gt;&lt;/a&gt;) for the dictionary in the order that they were inserted. Preserving order is achieved by this being an append only array where new items are always inserted at the end (insertion order).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The second, &lt;a href=&quot;https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L70&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;dk_indices&lt;/code&gt;&lt;/a&gt;, holds the indices for the &lt;code&gt;dk_entries&lt;/code&gt; array (that is, values that indicate the position of the corresponding entry in &lt;code&gt;dk_entries&lt;/code&gt;). This array acts as the hash table. When a key is hashed it leads to one of the indices stored in &lt;code&gt;dk_indices&lt;/code&gt; and the corresponding entry is fetched by indexing &lt;code&gt;dk_entries&lt;/code&gt;. Since only indices are kept, the type of this array depends on the overall size of the dictionary (ranging from type &lt;a href=&quot;https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L64&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;int8_t&lt;/code&gt;&lt;/a&gt;(&lt;code&gt;1&lt;/code&gt; byte) to &lt;a href=&quot;https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L66&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;int32_t&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L68&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;int64_t&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;4&lt;/code&gt;/&lt;code&gt;8&lt;/code&gt; bytes) on &lt;code&gt;32&lt;/code&gt;/&lt;code&gt;64&lt;/code&gt; bit builds)&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In the previous implementation, a sparse array of type &lt;code&gt;PyDictKeyEntry&lt;/code&gt; and size &lt;code&gt;dk_size&lt;/code&gt; had to be allocated; unfortunately, it also resulted in a lot of empty space since that array was not allowed to be more than &lt;code&gt;2/3 * dk_size&lt;/code&gt; full &lt;a href=&quot;https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L375&quot; rel=&quot;noreferrer&quot;&gt;for performance reasons&lt;/a&gt;. (and the empty space &lt;em&gt;still&lt;/em&gt; had &lt;code&gt;PyDictKeyEntry&lt;/code&gt; size!).&lt;/p&gt;\n&lt;p&gt;This is not the case now since only the &lt;em&gt;required&lt;/em&gt; entries are stored (those that have been inserted) and a sparse array of type &lt;code&gt;intX_t&lt;/code&gt; (&lt;code&gt;X&lt;/code&gt; depending on dict size) &lt;code&gt;2/3 * dk_size&lt;/code&gt;s full is kept. The empty space changed from type &lt;code&gt;PyDictKeyEntry&lt;/code&gt; to &lt;code&gt;intX_t&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;So, obviously, creating a sparse array of type &lt;code&gt;PyDictKeyEntry&lt;/code&gt; is much more memory demanding than a sparse array for storing &lt;code&gt;int&lt;/code&gt;s.&lt;/p&gt;\n&lt;p&gt;You can see the full conversation &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2016-September/146327.html&quot; rel=&quot;noreferrer&quot;&gt;on Python-Dev&lt;/a&gt; regarding this feature if interested, it is a good read.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2012-December/123028.html&quot; rel=&quot;noreferrer&quot;&gt;In the original proposal made by Raymond Hettinger&lt;/a&gt;, a visualization of the data structures used can be seen which captures the gist of the idea.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;For example, the dictionary:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;timmy&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;barry&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;guido&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is currently stored as [keyhash, key, value]:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;entries = [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;],\n           [-&lt;span class=&quot;hljs-number&quot;&gt;8522787127447073495&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;barry&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;],\n           [&lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;],\n           [&lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;],\n           [&lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;],\n           [-&lt;span class=&quot;hljs-number&quot;&gt;9092791511155847987&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;timmy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;],\n           [&lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;--&apos;&lt;/span&gt;],\n           [-&lt;span class=&quot;hljs-number&quot;&gt;6480567542315338377&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;guido&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Instead, the data should be organized as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;indices =  [&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\nentries =  [[-&lt;span class=&quot;hljs-number&quot;&gt;9092791511155847987&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;timmy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;],\n            [-&lt;span class=&quot;hljs-number&quot;&gt;8522787127447073495&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;barry&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;],\n            [-&lt;span class=&quot;hljs-number&quot;&gt;6480567542315338377&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;guido&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;As you can visually now see, in the original proposal, a lot of space is essentially empty to reduce collisions and make look-ups faster. With the new approach, you reduce the memory required by moving the sparseness where it&apos;s really required, in the indices.&lt;/p&gt;\n&lt;hr&gt;\n&lt;sub&gt;\n[1]: I say &quot;insertion ordered&quot; and not &quot;ordered&quot; since, with the existence of OrderedDict, &quot;ordered&quot; suggests further behavior that the `dict` object *doesn&apos;t provide*. OrderedDicts are reversible, provide order sensitive methods and, mainly, provide an order-sensive equality tests (`==`, `!=`). `dict`s currently don&apos;t offer any of those behaviors/methods.\n&lt;/sub&gt;\n&lt;hr&gt;\n&lt;sub&gt;\n[2]: The new dictionary implementations performs better **memory wise** by being designed more compactly; that&apos;s the main benefit here. Speed wise, the difference isn&apos;t so drastic, there&apos;s places where the new dict might introduce slight regressions (&lt;a href=&quot;https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L375&quot; rel=&quot;noreferrer&quot;&gt;key-lookups, for example&lt;/a&gt;) while in others (iteration and resizing come to mind) a performance boost should be present. \n&lt;/sub&gt;\n&lt;sub&gt;\nOverall, the performance of the dictionary, especially in real-life situations, improves due to the compactness introduced.  \n&lt;/sub&gt;\n    ","\n&lt;p&gt;Below is answering the original first question:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Should I use &lt;code&gt;dict&lt;/code&gt; or &lt;code&gt;OrderedDict&lt;/code&gt; in Python 3.6?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I think this sentence from the documentation is actually enough to answer your question&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;code&gt;dict&lt;/code&gt; is not explicitly meant to be an ordered collection, so if you want to stay consistent and not rely on a side effect of the new implementation you should stick with &lt;code&gt;OrderedDict&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Make your code future proof :)&lt;/p&gt;\n\n&lt;p&gt;There&apos;s a debate about that &lt;a href=&quot;https://news.ycombinator.com/item?id=12460936&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;EDIT: &lt;strong&gt;Python 3.7 will keep this as a feature&lt;/strong&gt; &lt;a href=&quot;https://stackoverflow.com/a/47837132/1447525&quot;&gt;see&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Update:\nGuido van Rossum &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2017-December/151283.html&quot; rel=&quot;noreferrer&quot;&gt;announced on the mailing list&lt;/a&gt; that as of Python 3.7 &lt;code&gt;dict&lt;/code&gt;s in all Python implementations must preserve insertion order.&lt;/p&gt;\n    ","\n&lt;p&gt;I wanted to add to the discussion above but don&apos;t have the reputation to comment.&lt;/p&gt;\n&lt;p&gt;Python 3.8 includes the &lt;code&gt;reversed()&lt;/code&gt; function on dictionaries (removing another difference from &lt;code&gt;OrderedDict&lt;/code&gt;.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Dict and dictviews are now iterable in reversed insertion order using reversed(). (Contributed by Rémi Lapeyre in bpo-33462.)\n&lt;a href=&quot;https://docs.python.org/3.8/whatsnew/3.8.html&quot; rel=&quot;noreferrer&quot;&gt;See what&apos;s new in python 3.8&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;I don&apos;t see any mention of the equality operator or other features of &lt;code&gt;OrderedDict&lt;/code&gt; so they are still not entirely the same.&lt;/p&gt;\n    ","\n&lt;p&gt;To fully answer this question in 2020, let me quote several statements from &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html?highlight=dict#mapping-types-dict&quot; rel=&quot;noreferrer&quot;&gt;official Python docs&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Changed in version 3.7: Dictionary order is guaranteed to be insertion order. This behavior was an implementation detail of CPython from 3.6.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Changed in version 3.7: Dictionary order is guaranteed to be insertion order.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Changed in version 3.8: Dictionaries are now reversible.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Dictionaries and dictionary views are reversible.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;A &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.OrderedDict&quot; rel=&quot;noreferrer&quot;&gt;statement&lt;/a&gt; regarding OrderedDict vs Dict:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Ordered dictionaries are just like regular dictionaries but have some extra capabilities relating to ordering operations. They have become less important now that the built-in dict class gained the ability to remember insertion order (this new behavior became guaranteed in Python 3.7).&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;If order is so important to determine like whether two dictionaries are equal, you still need to use &lt;code&gt;OrderedDict&lt;/code&gt;.&lt;br&gt;\nTo implement this feature, OrderedDict uses more memory (a bidirectional linked list is maintained internally)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n\na = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\nb = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}\nc = OrderedDict({&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;})\nd = OrderedDict({&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a == b)  &lt;span class=&quot;hljs-comment&quot;&gt;# True&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(c == d)  &lt;span class=&quot;hljs-comment&quot;&gt;# False&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a == c)  &lt;span class=&quot;hljs-comment&quot;&gt;# True&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a == d)  &lt;span class=&quot;hljs-comment&quot;&gt;# True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"oracle","slug":"oracle"},{"name":"methods","slug":"methods"},{"name":"opengl","slug":"opengl"},{"name":"forward-declaration","slug":"forward-declaration"},{"name":"srand","slug":"srand"},{"name":"return-type","slug":"return-type"},{"name":"shared-ptr","slug":"shared-ptr"},{"name":"getelementsbyclassname","slug":"getelementsbyclassname"},{"name":"eclipse","slug":"eclipse"},{"name":"xml","slug":"xml"},{"name":"algorithm","slug":"algorithm"},{"name":"getelementbyid","slug":"getelementbyid"},{"name":"python-datamodel","slug":"python-datamodel"},{"name":"integer-division","slug":"integer-division"},{"name":"prepared-statement","slug":"prepared-statement"},{"name":"pdo","slug":"pdo"},{"name":"combinatorics","slug":"combinatorics"},{"name":"scroll","slug":"scroll"},{"name":"linker","slug":"linker"},{"name":"mongodb-query","slug":"mongodb-query"}]},"__N_SSG":true}