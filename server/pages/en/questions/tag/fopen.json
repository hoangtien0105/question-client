{"pageProps":{"data":{"count":1,"rows":[{"id":404,"title":"PHP - Failed to open stream : No such file or directory","slug":"php-failed-to-open-stream-:-no-such-file-or-directory-1657387872896","postType":"QUESTION","createdAt":"2022-07-09T17:31:12.000Z","updatedAt":"2022-07-09T17:31:12.000Z","tags":[{"id":2166,"name":"fopen","slug":"fopen","createdAt":"2022-07-09T17:31:12.000Z","updatedAt":"2022-07-09T17:31:12.000Z","Questions_Tags":{"questionId":404,"tagId":2166}}]}]},"slug":"fopen","page":1,"answers":{"404":["\n&lt;p&gt;There are many reasons why one might run into this error and thus a good checklist of what to check first helps considerably.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s consider that we are troubleshooting the following line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/file&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h1&gt;Checklist&lt;/h1&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;1. Check the file path for typos&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;either check manually (by visually checking the path)&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;or move whatever is called by &lt;code&gt;require*&lt;/code&gt; or &lt;code&gt;include*&lt;/code&gt; to its own variable, echo it, copy it, and try accessing it from a terminal:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$path&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/file&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Path : &lt;span class=&quot;hljs-subst&quot;&gt;$path&lt;/span&gt;&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$path&lt;/span&gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, in a terminal:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;cat &amp;lt;file path pasted&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;2. Check that the file path is correct regarding relative vs absolute path considerations&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;if it is starting by a forward slash &quot;/&quot; then it is not referring to the root of your website&apos;s folder (the document root), but to the root of your server.\n\n&lt;ul&gt;\n&lt;li&gt;for example, your website&apos;s directory might be &lt;code&gt;/users/tony/htdocs&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;if it is not starting by a forward slash then it is either relying on the include path (see below) or the path is relative. If it is relative, then PHP will calculate relatively to the path of the &lt;a href=&quot;https://secure.php.net/manual/en/function.getcwd.php&quot; rel=&quot;noreferrer&quot;&gt;current working directory&lt;/a&gt;.\n\n&lt;ul&gt;\n&lt;li&gt;thus, not relative to the path of your web site&apos;s root, or to the file where you are typing&lt;/li&gt;\n&lt;li&gt;for that reason, always use absolute file paths&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Best practices :&lt;/p&gt;\n\n&lt;p&gt;In order to make your script robust in case you move things around, while still generating an absolute path at runtime, you have 2 options :&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;use &lt;code&gt;require __DIR__ . &quot;/relative/path/from/current/file&quot;&lt;/code&gt;. The &lt;a href=&quot;https://secure.php.net/manual/en/language.constants.predefined.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;__DIR__&lt;/code&gt; magic constant&lt;/a&gt; returns the directory of the current file.&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;define a &lt;code&gt;SITE_ROOT&lt;/code&gt; constant yourself :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;at the root of your web site&apos;s directory, create a file, e.g. &lt;code&gt;config.php&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;in &lt;code&gt;config.php&lt;/code&gt;, write&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SITE_ROOT&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;__DIR__&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;in every file where you want to reference the site root folder, include &lt;code&gt;config.php&lt;/code&gt;, and then use the &lt;code&gt;SITE_ROOT&lt;/code&gt; constant wherever you like :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;__DIR__&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;/../config.php&quot;&lt;/span&gt;;\n...\n&lt;span class=&quot;hljs-keyword&quot;&gt;require_once&lt;/span&gt; SITE_ROOT.&lt;span class=&quot;hljs-string&quot;&gt;&quot;/other/file.php&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;These 2 practices also make your application more portable because it does not rely on ini settings like the include path.&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;3. Check your include path&lt;/h2&gt;\n\n&lt;p&gt;Another way to include files, neither relatively nor purely absolutely, is to rely on the &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.include-path&quot; rel=&quot;noreferrer&quot;&gt;include path&lt;/a&gt;. This is often the case for libraries or frameworks such as the Zend framework.&lt;/p&gt;\n\n&lt;p&gt;Such an inclusion will look like this :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Zend/Mail/Protocol/Imap.php&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In that case, you will want to make sure that the folder where &quot;Zend&quot; is, is part of the include path.&lt;/p&gt;\n\n&lt;p&gt;You can check the include path with :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get_include_path&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can add a folder to it with :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;set_include_path&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get_include_path&lt;/span&gt;().&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/new/folder&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;4. Check that your server has access to that file&lt;/h2&gt;\n\n&lt;p&gt;It might be that all together, the user running the server process (Apache or PHP) simply doesn&apos;t have permission to read from or write to that file.&lt;/p&gt;\n\n&lt;p&gt;To check under what user the server is running you can use &lt;a href=&quot;https://secure.php.net/manual/en/function.posix-getpwuid.php&quot; rel=&quot;noreferrer&quot;&gt;posix_getpwuid&lt;/a&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;posix_getpwuid&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;posix_geteuid&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To find out the permissions on the file, type the following command in the terminal:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;ls -l &amp;lt;path/to/file&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and look at &lt;a href=&quot;https://en.wikipedia.org/wiki/File_system_permissions#Symbolic_notation&quot; rel=&quot;noreferrer&quot;&gt;permission symbolic notation&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;5. Check PHP settings&lt;/h2&gt;\n\n&lt;p&gt;If none of the above worked, then the issue is probably that some PHP settings forbid it to access that file.&lt;/p&gt;\n\n&lt;p&gt;Three settings could be relevant :&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.open-basedir&quot; rel=&quot;noreferrer&quot;&gt;open_basedir&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If this is set PHP won&apos;t be able to access any file outside of the specified directory (not even through a symbolic link).&lt;/li&gt;\n&lt;li&gt;However, the default behavior is for it not to be set in which case there is no restriction&lt;/li&gt;\n&lt;li&gt;This can be checked by either calling &lt;a href=&quot;https://secure.php.net/manual/en/function.phpinfo.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;phpinfo()&lt;/code&gt;&lt;/a&gt; or by using &lt;code&gt;ini_get(&quot;open_basedir&quot;)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;You can change the setting either by editing your php.ini file or your httpd.conf file&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://secure.php.net/manual/en/features.safe-mode.php&quot; rel=&quot;noreferrer&quot;&gt;safe mode&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;if this is turned on restrictions might apply. However, this has been removed in PHP 5.4. If you are still on a version that supports safe mode upgrade to a PHP version that is &lt;a href=&quot;http://php.net/eol.php&quot; rel=&quot;noreferrer&quot;&gt;still being supported&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://secure.php.net/manual/en/filesystem.configuration.php&quot; rel=&quot;noreferrer&quot;&gt;allow_url_fopen and allow_url_include&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;this applies only to including or opening files through a network process such as http:// not when trying to include files on the local file system&lt;/li&gt;\n&lt;li&gt;this can be checked with &lt;code&gt;ini_get(&quot;allow_url_include&quot;)&lt;/code&gt; and set with &lt;code&gt;ini_set(&quot;allow_url_include&quot;, &quot;1&quot;)&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h1&gt;Corner cases&lt;/h1&gt;\n\n&lt;p&gt;If none of the above enabled to diagnose the problem, here are some special situations that could happen :&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;1. The inclusion of library relying on the include path&lt;/h2&gt;\n\n&lt;p&gt;It can happen that you include a library, for example, the Zend framework, using a relative or absolute path. For example :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/usr/share/php/libzend-framework-php/Zend/Mail/Protocol/Imap.php&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But then you still get the same kind of error.&lt;/p&gt;\n\n&lt;p&gt;This could happen because the file that you have (successfully) included, has itself an include statement for another file, and that second include statement assumes that you have added the path of that library to the include path.&lt;/p&gt;\n\n&lt;p&gt;For example, the Zend framework file mentioned before could have the following include :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Zend/Mail/Protocol/Exception.php&quot;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which is neither an inclusion by relative path, nor by absolute path. It is assuming that the Zend framework directory has been added to the include path.&lt;/p&gt;\n\n&lt;p&gt;In such a case, the only practical solution is to add the directory to your include path.&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;2. SELinux&lt;/h2&gt;\n\n&lt;p&gt;If you are running Security-Enhanced Linux, then it might be the reason for the problem, by denying access to the file from the server.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;To check whether SELinux is enabled&lt;/strong&gt; on your system, run the &lt;code&gt;sestatus&lt;/code&gt; command in a terminal. If the command does not exist, then SELinux is not on your system. If it does exist, then it should tell you whether it is enforced or not.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;To check whether SELinux policies are the reason&lt;/strong&gt; for the problem, you can try turning it off temporarily. However be CAREFUL, since this will disable protection entirely. Do not do this on your production server.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;setenforce &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you no longer have the problem with SELinux turned off, then this is the root cause.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;To solve it&lt;/strong&gt;, you will have to configure SELinux accordingly.&lt;/p&gt;\n\n&lt;p&gt;The following context types will be necessary :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;httpd_sys_content_t&lt;/code&gt; for files that you want your server to be able to read&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;httpd_sys_rw_content_t&lt;/code&gt; for files on which you want read and write access&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;httpd_log_t&lt;/code&gt; for log files&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;httpd_cache_t&lt;/code&gt; for the cache directory&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;For example, to assign the &lt;code&gt;httpd_sys_content_t&lt;/code&gt; context type to your website root directory, run :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;semanage fcontext -a -t httpd_sys_content_t &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/root(/.*)?&quot;&lt;/span&gt;\nrestorecon -Rv /path/to/root\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If your file is in a home directory, you will also need to turn on the &lt;code&gt;httpd_enable_homedirs&lt;/code&gt; boolean :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;setsebool -P httpd_enable_homedirs &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In any case, there could be a variety of reasons why SELinux would deny access to a file, depending on your policies. So you will need to enquire into that. &lt;a href=&quot;http://www.serverlab.ca/tutorials/linux/web-servers-linux/configuring-selinux-policies-for-apache-web-servers/&quot; rel=&quot;noreferrer&quot;&gt;Here&lt;/a&gt; is a tutorial specifically on configuring SELinux for a web server.&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;3. Symfony&lt;/h2&gt;\n\n&lt;p&gt;If you are using Symfony, and experiencing this error when uploading to a server, then it can be that the app&apos;s cache hasn&apos;t been reset, either because &lt;code&gt;app/cache&lt;/code&gt; has been uploaded, or that cache hasn&apos;t been cleared.&lt;/p&gt;\n\n&lt;p&gt;You can test and fix this by running the following console command:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;cache:clear\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;4. Non ACSII characters inside Zip file&lt;/h2&gt;\n\n&lt;p&gt;Apparently, this error can happen also upon calling &lt;code&gt;zip-&amp;gt;close()&lt;/code&gt; when some files inside the zip have non-ASCII characters in their filename, such as &quot;é&quot;.&lt;/p&gt;\n\n&lt;p&gt;A potential solution is to wrap the file name in &lt;code&gt;utf8_decode()&lt;/code&gt; before creating the target file.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Credits to &lt;a href=&quot;https://stackoverflow.com/users/4217158/fran-cano&quot;&gt;Fran Cano&lt;/a&gt; for identifying and suggesting a solution to this issue&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To add to the (really good) existing answer&lt;/p&gt;\n&lt;h1&gt;Shared Hosting Software&lt;/h1&gt;\n&lt;p&gt;&lt;code&gt;open_basedir&lt;/code&gt; is one that can stump you because it can be specified in a web server configuration. While this is easily remedied if you run your own dedicated server, there are some shared hosting software packages out there (like Plesk, cPanel, etc) that will configure a configuration directive on a per-domain basis. Because the software builds the configuration file (i.e. &lt;code&gt;httpd.conf&lt;/code&gt;) you cannot change that file directly because the hosting software will just overwrite it when it restarts.&lt;/p&gt;\n&lt;p&gt;With Plesk, they provide a place to override the provided &lt;code&gt;httpd.conf&lt;/code&gt; called &lt;code&gt;vhost.conf&lt;/code&gt;. Only the server admin can write this file. The configuration for Apache looks something like this&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;Directory&lt;/span&gt; /&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;/www/vhosts/domain.com&amp;gt;\n    &amp;lt;IfModule mod_php5.c&amp;gt;\n        php_admin_flag engine on\n        php_admin_flag safe_mode off\n        php_admin_value open_basedir &lt;span class=&quot;hljs-string&quot;&gt;&quot;/var/www/vhosts/domain.com:/tmp:/usr/share/pear:/local/PEAR&quot;&lt;/span&gt;\n    &amp;lt;/IfModule&amp;gt;\n&amp;lt;/&lt;span class=&quot;hljs-built_in&quot;&gt;Directory&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Have your server admin consult the manual for the hosting and web server software they use.&lt;/p&gt;\n&lt;h1&gt;File Permissions&lt;/h1&gt;\n&lt;p&gt;It&apos;s important to note that executing a file through your web server is very different from a command line or cron job execution. The big difference is that your web server has its own user and permissions. For security reasons that user is pretty restricted. Apache, for instance, is often &lt;code&gt;apache&lt;/code&gt;, &lt;code&gt;www-data&lt;/code&gt; or &lt;code&gt;httpd&lt;/code&gt; (depending on your server). A cron job or CLI execution has whatever permissions that the user running it has (i.e. running a PHP script as root will execute with permissions of root).&lt;/p&gt;\n&lt;p&gt;A lot of times people will solve a permissions problem by doing the following (Linux example)&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;chmod &lt;span class=&quot;hljs-number&quot;&gt;777&lt;/span&gt; /path/to/file\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is not a smart idea, because the file or directory is now world writable. If you own the server and are the only user then this isn&apos;t such a big deal, but if you&apos;re on a shared hosting environment you&apos;ve just given everyone on your server access.&lt;/p&gt;\n&lt;p&gt;What you need to do is determine the user(s) that need access and give only those them access. Once you know which users need access you&apos;ll want to make sure that&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;That user owns the file &lt;strong&gt;and possibly the parent directory&lt;/strong&gt; (especially the parent directory if you want to write files). In most shared hosting environments this won&apos;t be an issue, because your user should own all the files underneath your root. A Linux example is shown below&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt; chown apache:apache /path/to/file\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The user, and only that user, has access. In Linux, a good practice would be &lt;code&gt;chmod 600&lt;/code&gt; (only owner can read and write) or &lt;code&gt;chmod 644&lt;/code&gt; (owner can write but everyone can read)&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;You can &lt;a href=&quot;https://unix.stackexchange.com/questions/35711/giving-php-permission-to-write-to-files-and-folders&quot;&gt;read a more extended discussion of Linux/Unix permissions and users here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;Look at the &lt;strong&gt;exact&lt;/strong&gt; error&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;My code worked fine on all machines but only on this one started giving problem (which used to work find I guess). Used echo &quot;document_root&quot; path to debug and also looked closely at the error, found this&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Warning:\n  include(&lt;strong&gt;D:/MyProjects/testproject//functions/connections.php&lt;/strong&gt;):\n  failed to open stream:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You can easily see where the problems are. The problems are // before functions&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$document_root&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;DOCUMENT_ROOT&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;root: &lt;span class=&quot;hljs-subst&quot;&gt;$document_root&lt;/span&gt;&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$document_root&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;/functions/connections.php&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So simply remove the lading / from include and it should work fine. What is interesting is this behaviors is different on different versions. I run the same code on Laptop, Macbook Pro and this PC, all worked fine untill. Hope this helps someone.&lt;/p&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Copy past the file location in the browser to make sure file exists. Sometimes files get deleted unexpectedly (happened with me) and it was also the issue in my case.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Samba Shares&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If you have a Linux test server and you work from a Windows Client, the Samba share interferes with the &lt;em&gt;chmod&lt;/em&gt; command. So, even if you use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;chmod -R &lt;span class=&quot;hljs-number&quot;&gt;777&lt;/span&gt; myfolder\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;on the Linux side it is fully possible that the Unix Group\\www-data still doesn&apos;t have write access. One working solution if your share is set up that Windows admins are mapped to root: From Windows, open the Permissions, disable Inheritance for your folder with copy, and then grant full access for www-data. &lt;/p&gt;\n    ","\n&lt;h1&gt;Add script with query parameters&lt;/h1&gt;\n\n&lt;p&gt;That was my case. It actually links to &lt;a href=&quot;https://stackoverflow.com/a/4485874/10198757&quot;&gt;question #4485874&lt;/a&gt;, but I&apos;m going to explain it here shortly.&lt;br&gt;\nWhen you try to require &lt;code&gt;path/to/script.php?parameter=value&lt;/code&gt;, PHP looks for file named &lt;code&gt;script.php?parameter=value&lt;/code&gt;, because UNIX allows you to have paths like this.&lt;br&gt;\nIf you are really need to pass some data to included script, just declare it as &lt;code&gt;$variable=...&lt;/code&gt; or &lt;code&gt;$GLOBALS[]=...&lt;/code&gt; or other way you like.&lt;/p&gt;\n    ","\n&lt;p&gt;The following PHP settings in &lt;code&gt;php.ini&lt;/code&gt; if set to non-existent directory can also raise&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;PHP Warning: Unknown: failed to open stream: Permission denied in\nUnknown on line 0&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;sys_temp_dir\nupload_tmp_dir\nsession.save_path\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;PHP - Failed to open stream : No such file or directory in mac&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;For example I will upload a picture. But I am getting this error. First thing i will do right click on the image and get info.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;$thePathOfMyPicture = &quot;/Users/misstugba/Desktop/&quot;;&lt;/code&gt;\nuse with function&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;move_uploaded_file&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_FILES&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;tmp_name&quot;&lt;/span&gt;],&lt;span class=&quot;hljs-variable&quot;&gt;$thePathOfMyPicture&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$_FILES&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;])){\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;image uploaded successfully&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;}\n&lt;a href=&quot;https://i.stack.imgur.com/zCOex.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/zCOex.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For me I got this error because I was trying to read a file which required HTTP auth, with a username and password. Hope that helps others. Might be another corner case.&lt;/p&gt;\n&lt;h2&gt;Edit&lt;/h2&gt;\n&lt;p&gt;You can check if this type of authentication is present by inspecting the headers:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$file_headers&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get_headers&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$url&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable&quot;&gt;$file_headers&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;File headers missing&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strpos&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$file_headers&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;401 Unauthorized&apos;&lt;/span&gt;) &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;401 Unauthorized&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In PHP, start Apache then write you DB name and password if exist in your environment(.env).&lt;/p&gt;\n    ","\n&lt;p&gt;Aside from the other excellent answers, one thing I overlooked on Windows while writing a simple script: This error will be shown when trying to open a file with characters that Windows does not support in file names.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$file&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fopen&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y-m-d_H:i:s&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;w+&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Will give:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;fopen(2022-06-01_22:53:03): Failed to open stream: No such file or directory in ...&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Windows does not like &lt;code&gt;:&lt;/code&gt; in file names, as well as a number of other characters.&lt;/p&gt;\n    "]},"randomTags":[{"name":"shared-ptr","slug":"shared-ptr"},{"name":"unicode","slug":"unicode"},{"name":"scanf","slug":"scanf"},{"name":"pivot-table","slug":"pivot-table"},{"name":"unspecified-behavior","slug":"unspecified-behavior"},{"name":"threetenbp","slug":"threetenbp"},{"name":"syntax","slug":"syntax"},{"name":"javascript","slug":"javascript"},{"name":"long-integer","slug":"long-integer"},{"name":"matrix","slug":"matrix"},{"name":"download","slug":"download"},{"name":"dst","slug":"dst"},{"name":"raw-types","slug":"raw-types"},{"name":"scroll","slug":"scroll"},{"name":"identity-operator","slug":"identity-operator"},{"name":"identifier","slug":"identifier"},{"name":"variadic-functions","slug":"variadic-functions"},{"name":"authentication","slug":"authentication"},{"name":"concatenation","slug":"concatenation"},{"name":"sorting","slug":"sorting"}]},"__N_SSG":true}