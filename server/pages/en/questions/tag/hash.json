{"pageProps":{"data":{"count":1,"rows":[{"id":236,"title":"Secure hash and salt for PHP passwords","slug":"secure-hash-and-salt-for-php-passwords-1657387363258","postType":"QUESTION","createdAt":"2022-07-09T17:22:43.000Z","updatedAt":"2022-07-09T17:22:43.000Z","tags":[{"id":1569,"name":"hash","slug":"hash","createdAt":"2022-07-09T17:22:43.000Z","updatedAt":"2022-07-09T17:22:43.000Z","Questions_Tags":{"questionId":236,"tagId":1569}}]}]},"slug":"hash","page":1,"answers":{"236":["\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: This answer was written in 2008.&lt;/p&gt;\n  \n  &lt;p&gt;Since then, PHP has given us &lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;password_hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://php.net/manual/en/function.password-verify.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;password_verify&lt;/code&gt;&lt;/a&gt; and, since their introduction, they are the recommended password hashing &amp;amp; checking method.&lt;/p&gt;\n  \n  &lt;p&gt;The theory of the answer is still a good read though.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;TL;DR&lt;/h2&gt;\n\n&lt;h3&gt;Don&apos;ts&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Don&apos;t limit what characters users can enter for passwords. Only idiots do this.&lt;/li&gt;\n&lt;li&gt;Don&apos;t limit the length of a password. If your users want a sentence with supercalifragilisticexpialidocious in it, don&apos;t prevent them from using it.&lt;/li&gt;\n&lt;li&gt;Don&apos;t strip or escape HTML and special characters in the password.&lt;/li&gt;\n&lt;li&gt;Never store your user&apos;s password in plain-text.&lt;/li&gt;\n&lt;li&gt;Never email a password to your user &lt;em&gt;except when they have lost theirs, and you sent a temporary one.&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;Never, ever log passwords in any manner.&lt;/li&gt;\n&lt;li&gt;Never hash passwords with &lt;a href=&quot;http://arstechnica.com/security/2012/12/oh-great-new-attack-makes-some-password-cracking-faster-easier-than-ever/&quot; rel=&quot;noreferrer&quot;&gt;SHA1&lt;/a&gt; or MD5 or even SHA256! &lt;a href=&quot;http://securityledger.com/new-25-gpu-monster-devours-passwords-in-seconds/&quot; rel=&quot;noreferrer&quot;&gt;Modern crackers&lt;/a&gt; can exceed 60 and 180 billion hashes/second (respectively).&lt;/li&gt;\n&lt;li&gt;Don&apos;t mix &lt;a href=&quot;http://blog.ircmaxell.com/2015/03/security-issue-combining-bcrypt-with.html&quot; rel=&quot;noreferrer&quot;&gt;bcrypt and with the &lt;em&gt;raw&lt;/em&gt; output of hash()&lt;/a&gt;, either use hex output or base64_encode it. (This applies to any input that may have a rogue &lt;code&gt;\\0&lt;/code&gt; in it, which can seriously weaken security.)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Dos&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Use scrypt when you can; bcrypt if you cannot.&lt;/li&gt;\n&lt;li&gt;Use PBKDF2 if you cannot use either bcrypt or scrypt, with SHA2 hashes.&lt;/li&gt;\n&lt;li&gt;Reset everyone&apos;s passwords when the database is compromised.&lt;/li&gt;\n&lt;li&gt;Implement a reasonable 8-10 character minimum length, plus require at least 1 upper case letter, 1 lower case letter, a number, and a symbol. This will improve the entropy of the password, in turn making it harder to crack. (See the &quot;What makes a good password?&quot; section for some debate.)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Why hash passwords anyway?&lt;/h2&gt;\n\n&lt;p&gt;The objective behind hashing passwords is simple: preventing malicious access to user accounts by compromising the database. So the goal of password hashing is to deter a hacker or cracker by costing them too much time or money to calculate the plain-text passwords. And time/cost are the best deterrents in your arsenal.&lt;/p&gt;\n\n&lt;p&gt;Another reason that you want a good, robust hash on a user accounts is to give you enough time to change all the passwords in the system. If your database is compromised you will need enough time to at &lt;em&gt;least&lt;/em&gt; lock the system down, if not change every password in the database.&lt;/p&gt;\n\n&lt;p&gt;Jeremiah Grossman, CTO of Whitehat Security, &lt;a href=&quot;https://www.whitehatsec.com/blog/cracking-aes-256-dmgs-and-epic-self-pwnage/&quot; rel=&quot;noreferrer&quot;&gt;stated on White Hat Security blog&lt;/a&gt; after a recent password recovery that required brute-force breaking of his password protection:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Interestingly, in living out this nightmare, I learned A LOT I didnt know about password cracking, storage, and complexity. &lt;em&gt;Ive come to appreciate why password storage is ever so much more important than password complexity. If you dont know how your password is stored, then all you really can depend upon is complexity.&lt;/em&gt; This might be common knowledge to password and crypto pros, but for the average InfoSec or Web Security expert, I highly doubt it.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;(Emphasis mine.)&lt;/p&gt;\n\n&lt;h2&gt;What makes a &lt;em&gt;good&lt;/em&gt; password anyway?&lt;/h2&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://xkcd.com/936/&quot; rel=&quot;noreferrer&quot;&gt;Entropy&lt;/a&gt;. (Not that I fully subscribe to Randall&apos;s viewpoint.)&lt;/p&gt;\n\n&lt;p&gt;In short, entropy is how much variation is within the password. When a password is only lowercase roman letters, that&apos;s only 26 characters. That isn&apos;t much variation. Alpha-numeric passwords are better, with 36 characters. But allowing upper and lower case, with symbols, is roughly 96 characters. That&apos;s a lot better than just letters. One problem is, to make our passwords memorable we insert patternswhich reduces entropy. Oops!&lt;/p&gt;\n\n&lt;p&gt;Password entropy is &lt;a href=&quot;https://ritcyberselfdefense.wordpress.com/2011/09/24/how-to-calculate-password-entropy/&quot; rel=&quot;noreferrer&quot;&gt;approximated&lt;/a&gt; easily. Using the full range of ascii characters (roughly 96 typeable characters) yields an entropy of 6.6 per character, which at 8 characters for a password is still too low (52.679 bits of entropy) for future security. But the good news is: longer passwords, and passwords with unicode characters, really increase the entropy of a password and make it harder to crack.&lt;/p&gt;\n\n&lt;p&gt;There&apos;s a longer discussion of password entropy on the &lt;a href=&quot;https://crypto.stackexchange.com/questions/374/how-should-i-calculate-the-entropy-of-a-password&quot;&gt;Crypto StackExchange&lt;/a&gt; site. A good Google search will also turn up a lot of results.&lt;/p&gt;\n\n&lt;p&gt;In the comments I talked with @popnoodles, who pointed out that &lt;em&gt;enforcing&lt;/em&gt; a password policy of X length with X many letters, numbers, symbols, etc, can actually reduce entropy by making the password scheme more predictable. I do agree. Randomess, as truly random as possible, is always the safest but least memorable solution.&lt;/p&gt;\n\n&lt;p&gt;So far as I&apos;ve been able to tell, making the world&apos;s best password is a Catch-22. Either its not memorable, too predictable, too short, too many unicode characters (hard to type on a Windows/Mobile device), too long, etc. No password is truly good enough for our purposes, so we must protect them as though they were in Fort Knox.&lt;/p&gt;\n\n&lt;h2&gt;Best practices&lt;/h2&gt;\n\n&lt;p&gt;Bcrypt and &lt;a href=&quot;http://www.tarsnap.com/scrypt.html&quot; rel=&quot;noreferrer&quot;&gt;scrypt&lt;/a&gt; are the current best practices. &lt;a href=&quot;http://www.tarsnap.com/scrypt.html&quot; rel=&quot;noreferrer&quot;&gt;Scrypt&lt;/a&gt; will be better than bcrypt in time, but it hasn&apos;t seen adoption as a standard by Linux/Unix or by webservers, and hasn&apos;t had in-depth reviews of its algorithm posted yet. But still, the future of the algorithm does look promising. If you are working with Ruby there is an &lt;a href=&quot;http://rubygems.org/gems/scrypt&quot; rel=&quot;noreferrer&quot;&gt;scrypt gem&lt;/a&gt; that will help you out, and Node.js now has its own &lt;a href=&quot;https://npmjs.org/package/scrypt&quot; rel=&quot;noreferrer&quot;&gt;scrypt&lt;/a&gt; package. You can use Scrypt in PHP either via the &lt;a href=&quot;https://pecl.php.net/package/scrypt&quot; rel=&quot;noreferrer&quot;&gt;Scrypt&lt;/a&gt; extension or the &lt;a href=&quot;https://paragonie.com/book/pecl-libsodium/read/07-password-hashing.md&quot; rel=&quot;noreferrer&quot;&gt;Libsodium&lt;/a&gt; extension (both are available in PECL).&lt;/p&gt;\n\n&lt;p&gt;I highly suggest reading the documentation for the &lt;a href=&quot;http://us.php.net/crypt&quot; rel=&quot;noreferrer&quot;&gt;crypt function&lt;/a&gt; if you want to understand how to use bcrypt, or finding yourself a &lt;a href=&quot;https://stackoverflow.com/questions/4795385/how-do-you-use-bcrypt-for-hashing-passwords-in-php/6337021#6337021&quot;&gt;good&lt;/a&gt; &lt;a href=&quot;https://gist.github.com/1070401&quot; rel=&quot;noreferrer&quot;&gt;wrapper&lt;/a&gt; or use something like &lt;a href=&quot;http://www.openwall.com/phpass/&quot; rel=&quot;noreferrer&quot;&gt;PHPASS&lt;/a&gt; for a more legacy implementation. I recommend a minimum of 12 rounds of bcrypt, if not 15 to 18.&lt;/p&gt;\n\n&lt;p&gt;I changed my mind about using bcrypt when I learned that bcrypt only uses blowfish&apos;s key schedule, with a variable cost mechanism. The latter lets you increase the cost to brute-force a password by increasing blowfish&apos;s already expensive key schedule.&lt;/p&gt;\n\n&lt;h2&gt;Average practices&lt;/h2&gt;\n\n&lt;p&gt;I almost can&apos;t imagine this situation anymore. &lt;a href=&quot;http://www.openwall.com/phpass/&quot; rel=&quot;noreferrer&quot;&gt;PHPASS&lt;/a&gt; supports PHP 3.0.18 through 5.3, so it is usable on almost every installation imaginableand should be used if you don&apos;t &lt;em&gt;know for certain&lt;/em&gt; that your environment supports bcrypt.&lt;/p&gt;\n\n&lt;p&gt;But suppose that you cannot use bcrypt or PHPASS at all. What then?&lt;/p&gt;\n\n&lt;p&gt;Try an implementation of &lt;a href=&quot;http://www.itnewb.com/tutorial/Encrypting-Passwords-with-PHP-for-Storage-Using-the-RSA-PBKDF2-Standard&quot; rel=&quot;noreferrer&quot;&gt;PDKBF2&lt;/a&gt; with the &lt;a href=&quot;https://security.stackexchange.com/questions/3959/recommended-of-iterations-when-using-pkbdf2-sha256&quot;&gt;maximum number of rounds&lt;/a&gt; that your environment/application/user-perception can tolerate. The lowest number I&apos;d recommend is 2500 rounds. Also, make sure to use &lt;a href=&quot;http://php.net/hash_hmac&quot; rel=&quot;noreferrer&quot;&gt;hash_hmac()&lt;/a&gt; if it is available to make the operation harder to reproduce.&lt;/p&gt;\n\n&lt;h2&gt;Future Practices&lt;/h2&gt;\n\n&lt;p&gt;Coming in PHP 5.5 is a &lt;a href=&quot;http://php.net/manual/en/ref.password.php&quot; rel=&quot;noreferrer&quot;&gt;full password protection library&lt;/a&gt; that abstracts away any pains of working with bcrypt. While most of us are stuck with PHP 5.2 and 5.3 in most common environments, especially shared hosts, @ircmaxell has built a &lt;a href=&quot;https://github.com/ircmaxell/password_compat&quot; rel=&quot;noreferrer&quot;&gt;compatibility layer&lt;/a&gt; for the coming API that is backward compatible to PHP 5.3.7.&lt;/p&gt;\n\n&lt;h2&gt;Cryptography Recap &amp;amp; Disclaimer&lt;/h2&gt;\n\n&lt;p&gt;The computational power required to actually &lt;em&gt;crack&lt;/em&gt; a hashed password doesn&apos;t exist. The only way for computers to &quot;crack&quot; a password is to recreate it and simulate the hashing algorithm used to secure it. The speed of the hash is linearly related to its ability to be brute-forced. Worse still, most hash algorithms can be easily parallelized to perform even faster. This is why costly schemes like bcrypt and scrypt are so important.&lt;/p&gt;\n\n&lt;p&gt;You cannot possibly foresee all threats or avenues of attack, and so you must make your best effort to protect your users &lt;strong&gt;up front&lt;/strong&gt;. If you do not, then you might even miss the fact that you were attacked until it&apos;s too late... &lt;em&gt;and you&apos;re liable&lt;/em&gt;. To avoid that situation, act paranoid to begin with. Attack your own software (internally) and attempt to steal user credentials, or modify other user&apos;s accounts or access their data. If you don&apos;t test the security of your system, then you cannot blame anyone but yourself.&lt;/p&gt;\n\n&lt;p&gt;Lastly: I am not a cryptographer. Whatever I&apos;ve said is my opinion, but I happen to think it&apos;s based on good ol&apos; common sense ... and lots of reading. Remember, be as paranoid as possible, make things as hard to intrude as possible, and then, if you are still worried, contact a white-hat hacker or cryptographer to see what they say about your code/system.&lt;/p&gt;\n    ","\n&lt;p&gt;A much shorter and safer answer - &lt;strong&gt;don&apos;t write your own password mechanism at all&lt;/strong&gt;, use a tried and tested mechanism.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;PHP 5.5 or higher: &lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;password_hash()&lt;/a&gt; is good quality and part of PHP core.&lt;/li&gt;\n&lt;li&gt;PHP 4.x (obsolete): OpenWall&apos;s &lt;a href=&quot;http://www.openwall.com/phpass/&quot; rel=&quot;nofollow noreferrer&quot;&gt;phpass&lt;/a&gt; library is much better than most custom code - used in WordPress, Drupal, etc.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Most programmers just don&apos;t have the expertise to write crypto related code safely without introducing vulnerabilities.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Quick self-test:&lt;/strong&gt; what is password stretching and how many iterations should you use?  If you don&apos;t know the answer, you should use &lt;code&gt;password_hash()&lt;/code&gt;, as password stretching is now a critical feature of password mechanisms due to much faster CPUs and the use of &lt;a href=&quot;http://blog.crackpassword.com/2012/07/accelerating-password-recovery-the-addition-of-fpga/&quot; rel=&quot;nofollow noreferrer&quot;&gt;GPUs and FPGAs&lt;/a&gt; to crack passwords at rates of &lt;a href=&quot;http://en.wikipedia.org/wiki/Password_cracking#Time_needed_for_password_searches&quot; rel=&quot;nofollow noreferrer&quot;&gt;billions of guesses per second&lt;/a&gt; (with GPUs).&lt;/p&gt;\n&lt;p&gt;As of 2012, you could &lt;a href=&quot;http://arstechnica.com/security/2012/12/25-gpu-cluster-cracks-every-standard-windows-password-in-6-hours/&quot; rel=&quot;nofollow noreferrer&quot;&gt;crack all 8-character Windows passwords in 6 hours&lt;/a&gt; using 25 GPUs installed in 5 desktop PCs.  This is brute-forcing i.e. enumerating and checking &lt;em&gt;every 8-character Windows password&lt;/em&gt;, including special characters, and is not a dictionary attack. With modern GPUs, you can of course crack more passwords or use fewer GPUs - or rent the GPUs in the cloud for a few hours at reasonable cost.&lt;/p&gt;\n&lt;p&gt;There are also many rainbow table attacks on Windows passwords that run on ordinary CPUs and are very fast.&lt;/p&gt;\n&lt;p&gt;All this is because Windows &lt;em&gt;still&lt;/em&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-server/security/kerberos/passwords-technical-overview&quot; rel=&quot;nofollow noreferrer&quot;&gt;doesn&apos;t salt or stretch&lt;/a&gt; its passwords, &lt;a href=&quot;https://www.guidingtech.com/61991/cracking-windows-10-password-prevent/&quot; rel=&quot;nofollow noreferrer&quot;&gt;even in Windows 10&lt;/a&gt;.  This is still true in 2021.  Don&apos;t make the same mistake as Microsoft did!&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1581610/how-can-i-store-my-users-passwords-safely/1581919#1581919&quot;&gt;excellent answer&lt;/a&gt; with more about why &lt;code&gt;password_hash()&lt;/code&gt; or &lt;code&gt;phpass&lt;/code&gt; are the best way to go.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2015/march/enough-with-the-salts-updates-on-secure-password-schemes/&quot; rel=&quot;nofollow noreferrer&quot;&gt;good blog article&lt;/a&gt; giving recommmended &apos;work factors&apos; (number of iterations) for main algorithms including bcrypt, scrypt and PBKDF2.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I would not store the password hashed in two different ways, because then the system is at least as weak as the weakest of the hash algorithms in use.&lt;/p&gt;\n    ","\n&lt;p&gt;As of PHP 5.5, PHP has simple, secure functions for hashing and verifying passwords, &lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot; rel=&quot;noreferrer&quot;&gt;password_hash()&lt;/a&gt; and &lt;a href=&quot;http://php.net/manual/en/function.password-verify.php&quot; rel=&quot;noreferrer&quot;&gt;password_verify()&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;anna&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_hash&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, PASSWORD_DEFAULT);\n&lt;span class=&quot;hljs-variable&quot;&gt;$expensiveHash&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_hash&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, PASSWORD_DEFAULT, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;cost&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_verify&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;anna&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//Returns true&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_verify&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;anna&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$expensiveHash&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//Also returns true&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_verify&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;elsa&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//Returns false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When &lt;code&gt;password_hash()&lt;/code&gt; is used, it generates a random salt and includes it in the outputted hash (along with the the cost and algorithm used.) &lt;code&gt;password_verify()&lt;/code&gt; then reads that hash and determines the salt and encryption method used, and verifies it against the provided plaintext password.&lt;/p&gt;\n\n&lt;p&gt;Providing the &lt;code&gt;PASSWORD_DEFAULT&lt;/code&gt; instructs PHP to use the default hashing algorithm of the installed version of PHP. Exactly which algorithm that means is intended to change over time in future versions, so that it will always be one of the strongest available algorithms.&lt;/p&gt;\n\n&lt;p&gt;Increasing cost (which defaults to 10) makes the hash harder to brute-force but also means generating hashes and verifying passwords against them will be more work for your server&apos;s CPU.&lt;/p&gt;\n\n&lt;p&gt;Note that even though the default hashing algorithm may change, old hashes will continue to verify just fine because the algorithm used is stored in the hash and &lt;code&gt;password_verify()&lt;/code&gt; picks up on it.&lt;/p&gt;\n    ","\n&lt;p&gt;Though the question has been answered, I just want to reiterate that salts used for hashing should be random and not like email address as suggested in first answer. &lt;/p&gt;\n\n&lt;p&gt;More explanation is available at- &lt;a href=&quot;http://www.pivotalsecurity.com/blog/password-hashing-salt-should-it-be-random/&quot; rel=&quot;noreferrer&quot;&gt;http://www.pivotalsecurity.com/blog/password-hashing-salt-should-it-be-random/&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Recently I had a discussion whether password hashes salted with random\n  bits are more secure than the one salted with guessable or known\n  salts. Lets see: If the system storing password is compromised as\n  well as the system which stores the random salt, the attacker will\n  have access to hash as well as salt, so whether the salt is random or\n  not, doesnt matter. The attacker will can generate pre-computed\n  rainbow tables to crack the hash. Here comes the interesting part- it\n  is not so trivial to generate pre-computed tables. Let us take example\n  of WPA security model. Your WPA password is actually never sent to\n  Wireless Access Point. Instead, it is hashed with your SSID (the\n  network name- like Linksys, Dlink etc). A very good explanation of how\n  this works is here. In order to retrieve password from hash, you will\n  need to know the password as well as salt (network name). Church of\n  Wifi has already pre-computed hash tables which has top 1000 SSIDs and\n  about 1 million passwords. The size is of all tables is about 40 GB.\n  As you can read on their site, someone used 15 FGPA arrays for 3 days\n  to generate  these tables. Assuming victim is using the SSID as\n  a387csf3 and password as 123456, will it be cracked by those\n  tables? No! .. it cannot. Even if the password is weak, the tables\n  dont have hashes for SSID a387csf3.  This is the beauty of having\n  random salt. It will deter crackers who thrive upon pre-computed\n  tables. Can it stop a determined hacker? Probably not. But using\n  random salts does provide additional layer of defense. While we are on\n  this topic, let us discuss additional advantage of storing random\n  salts on a separate system. Scenario #1 : Password hashes are stored\n  on system X and salt values used for hashing are stored on system Y.\n  These salt values are guessable or known (e.g. username) Scenario#2 :\n  Password hashes are stored on system X and salt values used for\n  hashing are stored on system Y. These salt values are random. In case\n  system X has been compromised, as you can guess, there is a huge\n  advantage of using random salt on a separate system (Scenario #2) .\n  The attacker will need to guess addition values to be able to crack\n  hashes. If a 32 bit salt is used, 2^32= 4,294,967,296 (about 4.2\n  billion) iterations will can be required for each password guessed.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I just want to point out that PHP 5.5 includes a &lt;a href=&quot;http://www.php.net/manual/en/ref.password.php&quot;&gt;password hashing API&lt;/a&gt; that provides a wrapper around &lt;code&gt;crypt()&lt;/code&gt;. This API significantly simplifies the task of hashing, verifying and rehashing password hashes. The author has also released a &lt;a href=&quot;https://github.com/ircmaxell/password_compat&quot;&gt;compatibility pack&lt;/a&gt; (in the form of a single password.php file that you simply &lt;code&gt;require&lt;/code&gt; to use), for those using PHP 5.3.7 and later and want to use this right now.&lt;/p&gt;\n\n&lt;p&gt;It only supports BCRYPT for now, but it aims to be easily extended to include other password hashing techniques and because the technique and cost is stored as part of the hash, changes to your prefered hashing technique/cost will not invalidate current hashes, the framework will automagically, use the correct technique/cost when validating. It also handles generating a &quot;secure&quot; salt if you do not explicitly define your own.&lt;/p&gt;\n\n&lt;p&gt;The API exposes four functions:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;password_get_info()&lt;/code&gt; - returns information about the given hash&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;password_hash()&lt;/code&gt; - creates a password hash&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;password_needs_rehash()&lt;/code&gt; - checks if the given hash matches the given options. Useful to check if the hash conforms to your current technique/cost scheme allowing you to rehash if necessary&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;password_verify()&lt;/code&gt; - verifies that a password matches a hash&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;At the moment these functions accept the PASSWORD_BCRYPT and PASSWORD_DEFAULT password constants, which are synonymous at the moment, the difference being that PASSWORD_DEFAULT &quot;may change in newer PHP releases when newer, stronger hashing algorithms are supported.&quot; Using PASSWORD_DEFAULT and password_needs_rehash() on login (and rehashing if necessary) should ensure that your hashes are reasonably resilient to brute-force attacks with little to no work for you.&lt;/p&gt;\n\n&lt;p&gt;EDIT: I just realised that this is mentioned briefly in Robert K&apos;s answer. I&apos;ll leave this answer here since I think it provides a bit more information about how it works and the ease of use it provides for those who don&apos;t know security.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m using &lt;a href=&quot;http://www.openwall.com/phpass/&quot;&gt;Phpass&lt;/a&gt; which is a simple one-file PHP class that could be implemented very easily in nearly every PHP project. See also &lt;a href=&quot;http://www.h-online.com/security/features/Storing-passwords-in-uncrackable-form-1255576.html?page=4&quot;&gt;The H&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;By default it used strongest available encryption that is implemented in Phpass, which is &lt;code&gt;bcrypt&lt;/code&gt; and falls back to other encryptions down to MD5 to provide backward compatibility to frameworks like Wordpress.&lt;/p&gt;\n\n&lt;p&gt;The returned hash could be stored in database as it is. Sample use for generating hash is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$t_hasher&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PasswordHash&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$t_hasher&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;HashPassword&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To verify password, one can use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$t_hasher&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PasswordHash&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$check&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$t_hasher&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;CheckPassword&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;THINGS TO REMEMBER&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A lot has been said about Password encryption for PHP, most of which is very good advice, but before you even start the process of using PHP for password encryption make sure you have the following implemented or ready to be implemented.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;SERVER&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;PORTS&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;No matter how good your encryption is if you don&apos;t properly secure the server that runs the PHP and DB all your efforts are worthless. Most servers function relatively the same way, they have ports assigned to allow you to access them remotely either through ftp or shell. Make sure that you change the default port of which ever remote connection you have active. By not doing this you in effect have made the attacker do one less step in accessing your system. &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;USERNAME&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;For all that is good in the world do not use the username admin, root or something similar. Also if you are on a unix based system DO NOT make the root account login accessible, it should always be sudo only.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;PASSWORD&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;You tell your users to make good passwords to avoid getting hacked, do the same. What is the point in going through all the effort of locking your front door when you have the backdoor wide open.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;DATABASE&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;SERVER&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Ideally you want your DB and APPLICATION on separate servers. This is not always possible due to cost, but it does allow for some safety as the attacker will have to go through two steps to fully access the system.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;USER&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Always have your application have its own account to access the DB, and only give it the privileges it will need. &lt;/p&gt;\n\n&lt;p&gt;Then have a separate user account for you that is not stored anywhere on the server, not even in the application. &lt;/p&gt;\n\n&lt;p&gt;Like always DO NOT make this root or something similar.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;PASSWORD&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Follow the same guidelines as with all good passwords. Also don&apos;t reuse the same password on any SERVER or DB accounts on the same system.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;PASSWORD&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;NEVER EVER store a password in your DB, instead store the hash and unique salt, I will explain why later.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;HASHING&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;ONE WAY HASHING!!!!!!!, Never hash a password in a way that it can be reversed, Hashes should be one way, meaning you don&apos;t reverse them and compare them to the password, you instead hash the entered password the same way and compare the two hashes. This means that even if an attacker gets access to the DB he doesn&apos;t know what the actually password is, just its resulting hash. Which means more security for your users in the worst possible scenario.&lt;/p&gt;\n\n&lt;p&gt;There are a lot of good hashing functions out there (&lt;code&gt;password_hash&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt;, etc...) but you need to select a good algorithm for the hash to be effective. (bcrypt and ones similar to it are decent algorithms.) &lt;/p&gt;\n\n&lt;p&gt;When hashing speed is the key, the slower the more resistant to Brute Force attacks. &lt;/p&gt;\n\n&lt;p&gt;One of the most common mistakes in hashing is that hashes are not unique to the users. This is mainly because salts are not uniquely generated.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;SALTING&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Passwords should always be salted before hashed. Salting adds a random string to the password so similar passwords don&apos;t appear the same in the DB. However if the salt is not unique to each user (ie: you use a hard coded salt) than you pretty much have made your salt worthless. Because once an attacker figures out one password salt he has the salt for all of them. &lt;/p&gt;\n\n&lt;p&gt;When you create a salt make sure it is unique to the password it is salting, then store both the completed hash and salt in your DB. What this will do is make it so that an attacker will have to individually crack each salt and hash before they can gain access. This means a lot more work and time for the attacker. &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;USERS CREATING PASSWORDS&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;If the user is creating a password through the frontend that means it has to be sent to the server. This opens up a security issue because that means the unencrypted password is being sent to the server and if a attacker is able to listen and access that all your security in PHP is worthless. ALWAYS transmit the data SECURELY, this is done through SSL, but be weary even SSL is not flawless (OpenSSL&apos;s Heartbleed flaw is an example of this). &lt;/p&gt;\n\n&lt;p&gt;Also make the user create a secure password, it is simple and should always be done, the user will be grateful for it in the end.&lt;/p&gt;\n\n&lt;p&gt;Finally, no matter the security measures you take nothing is 100% secure, the more advanced the technology to protect becomes the more advanced the attacks become. But following these steps will make your site more secure and far less desirable for attackers to go after.&lt;/p&gt;\n\n&lt;p&gt;Here is a PHP class that creates a hash and salt for a password easily&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://git.io/mSJqpw&quot;&gt;http://git.io/mSJqpw&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Google says SHA256 is available to PHP.&lt;/p&gt;\n\n&lt;p&gt;You should definitely use a salt. I&apos;d recommend using random bytes (and not restrict yourself to characters and numbers). As usually, the longer you choose, the safer, slower it gets. 64 bytes ought to be fine, i guess.&lt;/p&gt;\n    ","\n&lt;p&gt;In the end, double-hashing, mathematically, provides no benefit.  In practice, however, it is useful for preventing rainbow table-based attacks.  In other words, it is of no more benefit than hashing with a salt, which takes far less processor time in your application or on your server.&lt;/p&gt;\n    ","\n&lt;p&gt;I found perfect topic on this matter here: &lt;a href=&quot;https://crackstation.net/hashing-security.htm&quot; rel=&quot;noreferrer&quot;&gt;https://crackstation.net/hashing-security.htm&lt;/a&gt;, I wanted you to get benefit from it, here is source code also that provided prevention against time-based attack also.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\n * Password hashing with PBKDF2.\n * Author: havoc AT defuse.ca\n * www: https://defuse.ca/php-pbkdf2.htm\n */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// These constants may be changed without breaking existing hashes.&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PBKDF2_HASH_ALGORITHM&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;sha256&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PBKDF2_ITERATIONS&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PBKDF2_SALT_BYTES&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PBKDF2_HASH_BYTES&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HASH_SECTIONS&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HASH_ALGORITHM_INDEX&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HASH_ITERATION_INDEX&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HASH_SALT_INDEX&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HASH_PBKDF2_INDEX&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;create_hash&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// format: algorithm:iterations:salt:hash&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;base64_encode&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mcrypt_create_iv&lt;/span&gt;(PBKDF2_SALT_BYTES, MCRYPT_DEV_URANDOM));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; PBKDF2_HASH_ALGORITHM . &lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt; . PBKDF2_ITERATIONS . &lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt; .  &lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt; . \n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;base64_encode&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pbkdf2&lt;/span&gt;(\n            PBKDF2_HASH_ALGORITHM,\n            &lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;,\n            &lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt;,\n            PBKDF2_ITERATIONS,\n            PBKDF2_HASH_BYTES,\n            &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n        ));\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;validate_password&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$good_hash&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;explode&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$good_hash&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt;) &amp;lt; HASH_SECTIONS)\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; \n    &lt;span class=&quot;hljs-variable&quot;&gt;$pbkdf2&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;base64_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt;[HASH_PBKDF2_INDEX]);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;slow_equals&lt;/span&gt;(\n        &lt;span class=&quot;hljs-variable&quot;&gt;$pbkdf2&lt;/span&gt;,\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pbkdf2&lt;/span&gt;(\n            &lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt;[HASH_ALGORITHM_INDEX],\n            &lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;,\n            &lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt;[HASH_SALT_INDEX],\n            (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt;[HASH_ITERATION_INDEX],\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$pbkdf2&lt;/span&gt;),\n            &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n        )\n    );\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Compares two strings $a and $b in length-constant time.&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;slow_equals&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;) ^ &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;); &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;++)\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; |= &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;]) ^ &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;]);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; \n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\n * PBKDF2 key derivation function as defined by RSA&apos;s PKCS #5: https://www.ietf.org/rfc/rfc2898.txt\n * $algorithm - The hash algorithm to use. Recommended: SHA256\n * $password - The password.\n * $salt - A salt that is unique to the password.\n * $count - Iteration count. Higher is better, but slower. Recommended: At least 1000.\n * $key_length - The length of the derived key in bytes.\n * $raw_output - If true, the key is returned in raw binary format. Hex encoded otherwise.\n * Returns: A $key_length-byte key derived from the password and salt.\n *\n * Test vectors can be found here: https://www.ietf.org/rfc/rfc6070.txt\n *\n * This implementation of PBKDF2 was originally created by https://defuse.ca\n * With improvements by http://www.variations-of-shadow.com\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pbkdf2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$algorithm&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$count&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$key_length&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$raw_output&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$algorithm&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtolower&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$algorithm&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;in_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$algorithm&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;hash_algos&lt;/span&gt;(), &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;PBKDF2 ERROR: Invalid hash algorithm.&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$count&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || &lt;span class=&quot;hljs-variable&quot;&gt;$key_length&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;PBKDF2 ERROR: Invalid parameters.&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$hash_length&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$algorithm&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;));\n    &lt;span class=&quot;hljs-variable&quot;&gt;$block_count&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ceil&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$key_length&lt;/span&gt; / &lt;span class=&quot;hljs-variable&quot;&gt;$hash_length&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-variable&quot;&gt;$block_count&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;++) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// $i encoded as 4 bytes, big endian.&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$last&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pack&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;N&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;);\n        &lt;span class=&quot;hljs-comment&quot;&gt;// first iteration&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$last&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$xorsum&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;hash_hmac&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$algorithm&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$last&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        &lt;span class=&quot;hljs-comment&quot;&gt;// perform the other $count - 1 iterations&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$count&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt;++) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$xorsum&lt;/span&gt; ^= (&lt;span class=&quot;hljs-variable&quot;&gt;$last&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;hash_hmac&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$algorithm&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$last&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;));\n        }\n        &lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$xorsum&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$raw_output&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$key_length&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;bin2hex&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$key_length&lt;/span&gt;));\n}\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I usually use SHA1 and salt with the user ID (or some other user-specific piece of information), and sometimes I additionally use a constant salt (so I have 2 parts to the salt).&lt;/p&gt;\n\n&lt;p&gt;SHA1 is now also considered somewhat compromised, but to a far lesser degree than MD5.  By using a salt (any salt), you&apos;re preventing the use of a generic &lt;a href=&quot;http://en.wikipedia.org/wiki/Rainbow_table&quot; rel=&quot;noreferrer&quot;&gt;rainbow table&lt;/a&gt; to attack your hashes (some people have even had success using Google as a sort of rainbow table by searching for the hash).  An attacker could conceivably generate a rainbow table using your salt, so that&apos;s why you should include a user-specific salt.  That way, they will have to generate a rainbow table for each and every record in your system, not just one for your entire system!  With that type of salting, even MD5 is decently secure.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://php.net/sha1&quot; rel=&quot;noreferrer&quot;&gt;SHA1&lt;/a&gt; and a salt should suffice (depending, naturally, on whether you are coding something for &lt;a href=&quot;http://en.wikipedia.org/wiki/United_States_Bullion_Depository&quot; rel=&quot;noreferrer&quot;&gt;Fort Knox&lt;/a&gt; or a login system for your shopping list) for the foreseeable future. If SHA1 isn&apos;t good enough for you, use &lt;a href=&quot;http://php.net/manual/en/function.hash.php&quot; rel=&quot;noreferrer&quot;&gt;SHA256&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The idea of a salt is to throw the hashing results off balance, so to say. It is known, for example, that the MD5-hash of an empty string is &lt;code&gt;d41d8cd98f00b204e9800998ecf8427e&lt;/code&gt;. So, if someone with good enough a memory would see that hash and know that it&apos;s the hash of an empty string. But if the string is salted (say, with the string &quot;&lt;code&gt;MY_PERSONAL_SALT&lt;/code&gt;&quot;), the hash for the &apos;empty string&apos; (i.e. &quot;&lt;code&gt;MY_PERSONAL_SALT&lt;/code&gt;&quot;) becomes &lt;code&gt;aeac2612626724592271634fb14d3ea6&lt;/code&gt;, hence non-obvious to backtrace. What I&apos;m trying to say, that it&apos;s better to use &lt;em&gt;any&lt;/em&gt; salt, than not to. Therefore, it&apos;s not too much of an importance to know &lt;em&gt;which&lt;/em&gt; salt to use.&lt;/p&gt;\n\n&lt;p&gt;There are actually &lt;a href=&quot;http://gdataonline.com/seekhash.php&quot; rel=&quot;noreferrer&quot;&gt;websites that do just this&lt;/a&gt; - you can feed it a (md5) hash, and it spits out a known plaintext that generates that particular hash. If you would get access to a database that stores plain md5-hashes, it would be trivial for you to enter the hash for the admin to such a service, and log in. But, if the passwords were salted, such a service would become ineffective.&lt;/p&gt;\n\n&lt;p&gt;Also, double-hashing is generally regarded as bad method, because it diminishes the result space. All popular hashes are fixed-length. Thus, you can have only a finite values of this fixed length, and the results become less varied. This &lt;em&gt;could&lt;/em&gt; be regarded as another form of salting, but I wouldn&apos;t recommend it.&lt;/p&gt;\n    ","\n&lt;p&gt;ok\nin the fitsy we need salt\nsalt must be unique\nso let generate it&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Generating string\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; $size\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; string\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Uniwur_string&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$size&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable&quot;&gt;$text&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;md5&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;uniqid&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;rand&lt;/span&gt;(), &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;));\n        RETURN &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$text&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$size&lt;/span&gt;);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;also we need the hash\nI`m using sha512\nit is the best and it is in php &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Hashing string\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; $string\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; string\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sha512&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;so now we can use this functions to generate safe password&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// generating unique password&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Uniwur_string&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// or you can add manual password&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// generating 32 character salt&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Uniwur_string&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// now we can manipulate this informations&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// hashin salt for safe&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$hash_salt&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// hashing password&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$hash_psw&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$hash_salt&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;now we need to save in database our $hash_psw variable value and $salt variable&lt;/p&gt;\n\n&lt;p&gt;and for authorize we will use same steps...&lt;/p&gt;\n\n&lt;p&gt;it is the best way to safe our clients passwords...&lt;/p&gt;\n\n&lt;p&gt;P.s. for last 2 steps you can use your own algorithm...\nbut be sure that you can generate this hashed password in the future \nwhen you need to authorize user...&lt;/p&gt;\n    "]},"randomTags":[{"name":"gitignore","slug":"gitignore"},{"name":"math","slug":"math"},{"name":"debugging","slug":"debugging"},{"name":"pygame2","slug":"pygame2"},{"name":"url-parameters","slug":"url-parameters"},{"name":"decorator","slug":"decorator"},{"name":"unobtrusive-javascript","slug":"unobtrusive-javascript"},{"name":"git-rebase","slug":"git-rebase"},{"name":"terminal","slug":"terminal"},{"name":"soft-keyboard","slug":"soft-keyboard"},{"name":"heredoc","slug":"heredoc"},{"name":"reactjs","slug":"reactjs"},{"name":"concatenation","slug":"concatenation"},{"name":"tidyr","slug":"tidyr"},{"name":"sqliteopenhelper","slug":"sqliteopenhelper"},{"name":"standards","slug":"standards"},{"name":"array-difference","slug":"array-difference"},{"name":"pcre","slug":"pcre"},{"name":"cannot-find-symbol","slug":"cannot-find-symbol"},{"name":"bit-manipulation","slug":"bit-manipulation"}]},"__N_SSG":true}