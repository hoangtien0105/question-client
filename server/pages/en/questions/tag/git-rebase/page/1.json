{"pageProps":{"data":{"count":1,"rows":[{"id":310,"title":"How to remove/delete a large file from commit history in the Git repository?","slug":"how-to-removedelete-a-large-file-from-commit-history-in-the-git-repository-1657387589093","postType":"QUESTION","createdAt":"2022-07-09T17:26:29.000Z","updatedAt":"2022-07-09T17:26:29.000Z","tags":[{"id":1838,"name":"git-rebase","slug":"git-rebase","createdAt":"2022-07-09T17:26:29.000Z","updatedAt":"2022-07-09T17:26:29.000Z","Questions_Tags":{"questionId":310,"tagId":1838}}]}]},"slug":"git-rebase","page":"1","answers":{"310":["\n&lt;p&gt;Use the &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/&quot; rel=&quot;noreferrer&quot;&gt;BFG Repo-Cleaner&lt;/a&gt;, a simpler, faster alternative to &lt;code&gt;git-filter-branch&lt;/code&gt; specifically designed for removing unwanted files from Git history.&lt;/p&gt;\n\n&lt;p&gt;Carefully follow the &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/#usage&quot; rel=&quot;noreferrer&quot;&gt;usage instructions&lt;/a&gt;, the core part is just this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ java -jar bfg.jar --strip-blobs-bigger-than 100M my-repo.git\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Any files over 100MB in size (that aren&apos;t in your &lt;em&gt;latest&lt;/em&gt; commit) will be removed from your Git repository&apos;s history. You can then use &lt;code&gt;git gc&lt;/code&gt; to clean away the dead data:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ git gc --prune=now --aggressive\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The BFG is typically at least &lt;a href=&quot;https://docs.google.com/spreadsheet/ccc?key=0AsR1d5Zpes8HdER3VGU1a3dOcmVHMmtzT2dsS2xNenc#gid=0&quot; rel=&quot;noreferrer&quot;&gt;10-50x&lt;/a&gt; faster than running &lt;code&gt;git-filter-branch&lt;/code&gt;, and generally easier to use.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Full disclosure: I&apos;m the author of the BFG Repo-Cleaner.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;What you want to do is highly disruptive if you have published history to other developers. See &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-rebase.html#_recovering_from_upstream_rebase&quot; rel=&quot;noreferrer&quot;&gt;Recovering From Upstream Rebase in the &lt;code&gt;git rebase&lt;/code&gt; documentation&lt;/a&gt; for the necessary steps after repairing your history.&lt;/p&gt;\n&lt;p&gt;You have at least two options: &lt;a href=&quot;https://git-scm.com/docs/git-filter-branch&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;git filter-branch&lt;/code&gt;&lt;/a&gt; and an &lt;a href=&quot;https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt---interactive&quot; rel=&quot;noreferrer&quot;&gt;interactive rebase&lt;/a&gt;, both explained below.&lt;/p&gt;\n&lt;h2&gt;Using &lt;code&gt;git filter-branch&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;I had a similar problem with bulky binary test data from a Subversion import and wrote about &lt;a href=&quot;http://blog.gbacon.com/2009/08/git-shrinking-subversion-import.html&quot; rel=&quot;noreferrer&quot;&gt;removing data from a git repository&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Say your git history is:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ git lola --name-status\n* f772d66 (HEAD, master) Login page\n| A     login.html\n* cb14efd Remove DVD-rip\n| D     oops.iso\n* ce36c98 Careless\n| A     oops.iso\n| A     other.html\n* 5af4522 Admin page\n| A     admin.html\n* e738b63 Index\n  A     index.html\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that &lt;a href=&quot;http://blog.kfish.org/2010/04/git-lola.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;git lola&lt;/code&gt;&lt;/a&gt; is a non-standard but highly useful alias. With the &lt;code&gt;--name-status&lt;/code&gt; switch, we can see tree modifications associated with each commit.&lt;/p&gt;\n&lt;p&gt;In the Careless commit (whose SHA1 object name is ce36c98) the file &lt;code&gt;oops.iso&lt;/code&gt; is the DVD-rip added by accident and removed in the next commit, cb14efd. Using the technique described in the aforementioned blog post, the command to execute is:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;git filter-branch --prune-empty -d /dev/shm/scratch \\\n  --index-filter &lt;span class=&quot;hljs-string&quot;&gt;&quot;git rm --cached -f --ignore-unmatch oops.iso&quot;&lt;/span&gt; \\\n  --tag-name-filter &lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; -- --all\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Options:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;--prune-empty&lt;/code&gt; removes commits that become empty (&lt;em&gt;i.e.&lt;/em&gt;, do not change the tree) as a result of the filter operation. In the typical case, this option produces a cleaner history.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; names a temporary directory that does not yet exist to use for building the filtered history. If you are running on a modern Linux distribution, specifying a &lt;a href=&quot;https://superuser.com/q/45342/20872&quot;&gt;tree in &lt;code&gt;/dev/shm&lt;/code&gt; will result in faster execution&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;--index-filter&lt;/code&gt; is the main event and runs against the index at each step in the history. You want to remove &lt;code&gt;oops.iso&lt;/code&gt; wherever it is found, but it isnt present in all commits. The command &lt;code&gt;git rm --cached -f --ignore-unmatch oops.iso&lt;/code&gt; deletes the DVD-rip when it is present and does not fail otherwise.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;--tag-name-filter&lt;/code&gt; describes how to rewrite tag names. A filter of &lt;code&gt;cat&lt;/code&gt; is the identity operation. Your repository, like the sample above, may not have any tags, but I included this option for full generality.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;--&lt;/code&gt; specifies the end of options to &lt;code&gt;git filter-branch&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;--all&lt;/code&gt; following &lt;code&gt;--&lt;/code&gt; is shorthand for all refs. Your repository, like the sample above, may have only one ref (master), but I included this option for full generality.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;After some churning, the history is now:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ git lola --name-status\n* 8e0a11c (HEAD, master) Login page\n| A     login.html\n* e45ac59 Careless\n| A     other.html\n|\n| * f772d66 (refs/original/refs/heads/master) Login page\n| | A   login.html\n| * cb14efd Remove DVD-rip\n| | D   oops.iso\n| * ce36c98 Careless\n|/  A   oops.iso\n|   A   other.html\n|\n* 5af4522 Admin page\n| A     admin.html\n* e738b63 Index\n  A     index.html\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Notice that the new Careless commit adds only &lt;code&gt;other.html&lt;/code&gt; and that the Remove DVD-rip commit is no longer on the master branch. The branch labeled &lt;code&gt;refs/original/refs/heads/master&lt;/code&gt; contains your original commits in case you made a mistake. To remove it, follow the steps in &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-filter-branch.html#_checklist_for_shrinking_a_repository&quot; rel=&quot;noreferrer&quot;&gt;Checklist for Shrinking a Repository.&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ git update-ref -d refs/original/refs/heads/master\n$ git reflog expire --expire=now --all\n$ git gc --prune=now\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For a simpler alternative, clone the repository to discard the unwanted bits.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ cd ~/src\n$ mv repo repo.old\n$ git clone file:///home/user/src/repo.old repo\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using a &lt;code&gt;file:///...&lt;/code&gt; clone URL copies objects rather than creating hardlinks only.&lt;/p&gt;\n&lt;p&gt;Now your history is:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ git lola --name-status\n* 8e0a11c (HEAD, master) Login page\n| A     login.html\n* e45ac59 Careless\n| A     other.html\n* 5af4522 Admin page\n| A     admin.html\n* e738b63 Index\n  A     index.html\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The SHA1 object names for the first two commits (Index and Admin page) stayed the same because the filter operation did not modify those commits. Careless lost &lt;code&gt;oops.iso&lt;/code&gt; and Login page got a new parent, so their SHA1s &lt;em&gt;did&lt;/em&gt; change.&lt;/p&gt;\n&lt;h2&gt;Interactive rebase&lt;/h2&gt;\n&lt;p&gt;With a history of:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ git lola --name-status\n* f772d66 (HEAD, master) Login page\n| A     login.html\n* cb14efd Remove DVD-rip\n| D     oops.iso\n* ce36c98 Careless\n| A     oops.iso\n| A     other.html\n* 5af4522 Admin page\n| A     admin.html\n* e738b63 Index\n  A     index.html\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;you want to remove &lt;code&gt;oops.iso&lt;/code&gt; from Careless as though you never added it, and then Remove DVD-rip is useless to you. Thus, our plan going into an interactive rebase is to keep Admin page, edit Careless, and discard Remove DVD-rip.&lt;/p&gt;\n&lt;p&gt;Running &lt;code&gt;$ git rebase -i 5af4522&lt;/code&gt; starts an editor with the following contents.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;pick ce36c98 Careless\npick cb14efd Remove DVD-rip\npick f772d66 Login page\n\n# Rebase 5af4522..f772d66 onto 5af4522\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Executing our plan, we modify it to&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;edit ce36c98 Careless\npick f772d66 Login page\n\n# Rebase 5af4522..f772d66 onto 5af4522\n# ...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That is, we delete the line with Remove DVD-rip and change the operation on Careless to be &lt;code&gt;edit&lt;/code&gt; rather than &lt;code&gt;pick&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Save-quitting the editor drops us at a command prompt with the following message.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Stopped at ce36c98... Careless\nYou can amend the commit now, with\n\n        git commit --amend\n\nOnce you are satisfied with your changes, run\n\n        git rebase --continue\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As the message tells us, we are on the Careless commit we want to edit, so we run two commands.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ git rm --cached oops.iso\n$ git commit --amend -C HEAD\n$ git rebase --continue\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The first removes the offending file from the index. The second modifies or amends Careless to be the updated index and &lt;code&gt;-C HEAD&lt;/code&gt; instructs git to reuse the old commit message. Finally, &lt;code&gt;git rebase --continue&lt;/code&gt; goes ahead with the rest of the rebase operation.&lt;/p&gt;\n&lt;p&gt;This gives a history of:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ git lola --name-status\n* 93174be (HEAD, master) Login page\n| A     login.html\n* a570198 Careless\n| A     other.html\n* 5af4522 Admin page\n| A     admin.html\n* e738b63 Index\n  A     index.html\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which is what you want.&lt;/p&gt;\n    ","\n&lt;p&gt;Why not use this simple but powerful command?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git filter-branch --tree-filter &apos;rm -f DVD-rip&apos; HEAD\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;--tree-filter&lt;/code&gt; option runs the specified command after each checkout of the project and then recommits the results. In this case, you remove a file called DVD-rip from every snapshot, whether it exists or not. &lt;/p&gt;\n\n&lt;p&gt;If you know which commit introduced the huge file (say 35dsa2), you can replace HEAD with 35dsa2..HEAD to avoid rewriting too much history, thus avoiding diverging commits if you haven&apos;t pushed yet. This comment courtesy of @alpha_989 seems too important to leave out here.&lt;/p&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#The-Nuclear-Option:-filter-branch&quot; rel=&quot;noreferrer&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;(The best answer I&apos;ve seen to this problem is: &lt;a href=&quot;https://stackoverflow.com/a/42544963/714112&quot;&gt;https://stackoverflow.com/a/42544963/714112&lt;/a&gt; , copied here since this thread appears high in Google search rankings but that other one doesn&apos;t)&lt;/p&gt;\n\n&lt;h1&gt; A blazingly fast shell one-liner &lt;/h1&gt;\n\n&lt;p&gt;This shell script displays all blob objects in the repository, sorted from smallest to largest.&lt;/p&gt;\n\n&lt;p&gt;For my sample repo, it ran about &lt;strong&gt;100 times faster&lt;/strong&gt; than the other ones found here.&lt;br&gt;\nOn my trusty Athlon II X4 system, it handles the &lt;em&gt;Linux Kernel repository&lt;/em&gt; with its 5,622,155 objects in &lt;em&gt;just over a minute&lt;/em&gt;.&lt;/p&gt;\n\n&lt;h2&gt;The Base Script&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;git rev-list --objects --all \\\n| git cat-file --batch-check=&lt;span class=&quot;hljs-string&quot;&gt;&apos;%(objecttype) %(objectname) %(objectsize) %(rest)&apos;&lt;/span&gt; \\\n| awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;/^blob/ {print substr($0,6)}&apos;&lt;/span&gt; \\\n| &lt;span class=&quot;hljs-built_in&quot;&gt;sort&lt;/span&gt; --numeric-sort --key=2 \\\n| &lt;span class=&quot;hljs-built_in&quot;&gt;cut&lt;/span&gt; --complement --characters=13-40 \\\n| &lt;span class=&quot;hljs-built_in&quot;&gt;numfmt&lt;/span&gt; --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When you run above code, you will get nice &lt;strong&gt;human-readable output&lt;/strong&gt; like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;...\n0d99bb931299  530KiB path/to/some-image.jpg\n2ba44098e28f   12MiB path/to/hires-image.png\nbd1741ddce0d   63MiB path/to/some-video-1080p.mp4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt; Fast File Removal &lt;/h2&gt;\n\n&lt;p&gt;Suppose you then want to remove the files &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; from every commit reachable from &lt;code&gt;HEAD&lt;/code&gt;, you can use this command:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;git filter-branch --index-filter &lt;span class=&quot;hljs-string&quot;&gt;&apos;git rm --cached --ignore-unmatch a b&apos;&lt;/span&gt; HEAD\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;After trying virtually every answer in SO, I finally found this gem that quickly removed and deleted the large files in my repository and allowed me to sync again: &lt;a href=&quot;http://www.zyxware.com/articles/4027/how-to-delete-files-permanently-from-your-local-and-remote-git-repositories&quot; rel=&quot;noreferrer&quot;&gt;http://www.zyxware.com/articles/4027/how-to-delete-files-permanently-from-your-local-and-remote-git-repositories&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;CD to your local working folder and run the following command:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git filter-branch -f --index-filter &quot;git rm -rf --cached --ignore-unmatch FOLDERNAME&quot; -- --all\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;replace FOLDERNAME with the file or folder you wish to remove from the given git repository.&lt;/p&gt;\n\n&lt;p&gt;Once this is done run the following commands to clean up the local repository:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;rm -rf .git/refs/original/\ngit reflog expire --expire=now --all\ngit gc --prune=now\ngit gc --aggressive --prune=now\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now push all the changes to the remote repository:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git push --all --force\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will clean up the remote repository.&lt;/p&gt;\n    ","\n&lt;h1&gt;100 times faster than git filter-branch and simpler&lt;/h1&gt;\n&lt;p&gt;There are very good answers in this thread, but meanwhile many of them are outdated. Using &lt;code&gt;git-filter-branch&lt;/code&gt; is no longer recommended, because it is difficult to use and awfully slow on big repositories.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;git-filter-repo&lt;/code&gt; is much faster and simpler to use.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;git-filter-repo&lt;/code&gt; is a Python script, available at github: &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/newren/git-filter-repo&lt;/a&gt; . When installed it looks like a regular git command and can be called by &lt;code&gt;git filter-repo&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;You need only one file: the Python3 script git-filter-repo. Copy it to a path that is included in the PATH variable. On Windows you may have to change the first line of the script (refer INSTALL.md). You need Python3 installed installed on your system, but this is not a big deal.&lt;/p&gt;\n&lt;p&gt;First you can run&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git filter-repo --analyze\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This helps you to determine what to do next.&lt;/p&gt;\n&lt;p&gt;You can delete your DVD-rip file everywhere:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git filter-repo --invert-paths --path-match DVD-rip\n \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Filter-repo is really fast. A task that took around 9 hours on my computer by filter-branch, was completed in 4 minutes by filter-repo. You can do many more nice things with filter-repo. Refer to the documentation for that.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Do this on a copy of your repository. Many actions of filter-repo cannot be undone. filter-repo will change the commit hashes of all modified commits (of course) and all their descendants down to the last commits!&lt;/p&gt;\n    ","\n&lt;p&gt;These commands worked in my case:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git filter-branch --force --index-filter &apos;git rm --cached -r --ignore-unmatch oops.iso&apos; --prune-empty --tag-name-filter cat -- --all\nrm -rf .git/refs/original/\ngit reflog expire --expire=now --all\ngit gc --prune=now\ngit gc --aggressive --prune=now\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is little different from the above versions.&lt;/p&gt;\n\n&lt;p&gt;For those who need to push this to github/bitbucket (I only tested this with bitbucket):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# WARNING!!!\n# this will rewrite completely your bitbucket refs\n# will delete all branches that you didn&apos;t have in your local\n\ngit push --all --prune --force\n\n# Once you pushed, all your teammates need to clone repository again\n# git pull will not work\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;According to GitHub &lt;a href=&quot;https://docs.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository#using-filter-branch&quot; rel=&quot;noreferrer&quot;&gt;Documentation&lt;/a&gt;, just follow these steps:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Get rid of the large file&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;em&gt;Option 1: You don&apos;t want to keep the large file:&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;rm&lt;/span&gt; path/to/your/large/file        &lt;span class=&quot;hljs-comment&quot;&gt;# delete the large file&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Option 2: You want to keep the large file into an untracked directory&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;mkdir&lt;/span&gt; large_files                       &lt;span class=&quot;hljs-comment&quot;&gt;# create directory large_files&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;touch&lt;/span&gt; .gitignore                        &lt;span class=&quot;hljs-comment&quot;&gt;# create .gitignore file if needed&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;/large_files/&apos;&lt;/span&gt; &amp;gt;&amp;gt; .gitignore           &lt;span class=&quot;hljs-comment&quot;&gt;# untrack directory large_files&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;mv&lt;/span&gt; path/to/your/large/file large_files/ &lt;span class=&quot;hljs-comment&quot;&gt;# move the large file into the untracked directory&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Save your changes&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;git add path/to/your/large/file   &lt;span class=&quot;hljs-comment&quot;&gt;# add the deletion to the index&lt;/span&gt;\ngit commit -m &lt;span class=&quot;hljs-string&quot;&gt;&apos;delete large file&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# commit the deletion&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;Remove the large file from all commits&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;git filter-branch --force --index-filter \\\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;git rm --cached --ignore-unmatch path/to/your/large/file&quot;&lt;/span&gt; \\\n  --prune-empty --tag-name-filter &lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; -- --all\ngit push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I ran into this with a bitbucket account, where I had accidentally stored ginormous *.jpa backups of my site. &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;git filter-branch --prune-empty --index-filter &apos;git rm -rf --cached --ignore-unmatch MY-BIG-DIRECTORY-OR-FILE&apos; --tag-name-filter cat -- --all&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Relpace &lt;code&gt;MY-BIG-DIRECTORY&lt;/code&gt; with the folder in question to completely rewrite your history (&lt;em&gt;including tags&lt;/em&gt;). &lt;/p&gt;\n\n&lt;p&gt;source: &lt;a href=&quot;https://web.archive.org/web/20170727144429/http://naleid.com:80/blog/2012/01/17/finding-and-purging-big-files-from-git-history/&quot; rel=&quot;noreferrer&quot;&gt;https://web.archive.org/web/20170727144429/http://naleid.com:80/blog/2012/01/17/finding-and-purging-big-files-from-git-history/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Just note that this commands can be very destructive. If more people are working on the repo they&apos;ll all have to pull the new tree. The three middle commands are not necessary if your goal is NOT to reduce the size. Because the filter branch creates a backup of the removed file and it can stay there for a long time. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ git filter-branch --index-filter &quot;git rm -rf --cached --ignore-unmatch YOURFILENAME&quot; HEAD\n$ rm -rf .git/refs/original/ \n$ git reflog expire --all \n$ git gc --aggressive --prune\n$ git push origin master --force\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;git filter-branch --tree-filter &apos;rm -f path/to/file&apos; HEAD&lt;/code&gt; \nworked pretty well for me, although I ran into the same problem as described &lt;a href=&quot;https://stackoverflow.com/q/6403601/97443&quot;&gt;here&lt;/a&gt;, which I solved by following &lt;a href=&quot;https://stackoverflow.com/a/6404368/97443&quot;&gt;this suggestion&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The pro-git book has an entire chapter on &lt;a href=&quot;http://git-scm.com/book/en/Git-Tools-Rewriting-History&quot; rel=&quot;nofollow noreferrer&quot;&gt;rewriting history&lt;/a&gt; - have a look at the &lt;a href=&quot;http://git-scm.com/book/en/Git-Tools-Rewriting-History#The-Nuclear-Option:-filter-branch&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;filter-branch&lt;/code&gt;/Removing a File from Every Commit&lt;/a&gt; section.&lt;/p&gt;\n    ","\n&lt;p&gt;If you know your commit was recent instead of going through the entire tree do the following:\n&lt;code&gt;\ngit filter-branch --tree-filter &apos;rm LARGE_FILE.zip&apos; HEAD~10..HEAD\n&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This will remove it from your history&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git filter-branch --force --index-filter &apos;git rm -r --cached --ignore-unmatch bigfile.txt&apos; --prune-empty --tag-name-filter cat -- --all\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;http://gitextensions.github.io/&quot; rel=&quot;noreferrer&quot;&gt;Git Extensions&lt;/a&gt;, it&apos;s a UI tool. It has a plugin named &quot;Find large files&quot; which finds lage files in repositories and allow removing them permenently.&lt;/p&gt;\n\n&lt;p&gt;Don&apos;t use &apos;git filter-branch&apos; before using this tool, since it won&apos;t be able to find files removed by &apos;filter-branch&apos; (Altough &apos;filter-branch&apos; does not remove files completely from the repository pack files).&lt;/p&gt;\n    ","\n&lt;p&gt;I basically did what was on this answer:\n&lt;a href=&quot;https://stackoverflow.com/a/11032521/1286423&quot;&gt;https://stackoverflow.com/a/11032521/1286423&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;(for history, I&apos;ll copy-paste it here)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ git filter-branch --index-filter &quot;git rm -rf --cached --ignore-unmatch YOURFILENAME&quot; HEAD\n$ rm -rf .git/refs/original/ \n$ git reflog expire --all \n$ git gc --aggressive --prune\n$ git push origin master --force\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It didn&apos;t work, because I like to rename and move things a lot. So some big file were in folders that have been renamed, and I think the gc couldn&apos;t delete the reference to those files because of reference in &lt;code&gt;tree&lt;/code&gt; objects pointing to those file.\nMy ultimate solution to really kill it was to:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# First, apply what&apos;s in the answer linked in the front\n# and before doing the gc --prune --aggressive, do:\n\n# Go back at the origin of the repository\ngit checkout -b newinit &amp;lt;sha1 of first commit&amp;gt;\n# Create a parallel initial commit\ngit commit --amend\n# go back on the master branch that has big file\n# still referenced in history, even though \n# we thought we removed them.\ngit checkout master\n# rebase on the newinit created earlier. By reapply patches,\n# it will really forget about the references to hidden big files.\ngit rebase newinit\n\n# Do the previous part (checkout + rebase) for each branch\n# still connected to the original initial commit, \n# so we remove all the references.\n\n# Remove the .git/logs folder, also containing references\n# to commits that could make git gc not remove them.\nrm -rf .git/logs/\n\n# Then you can do a garbage collection,\n# and the hidden files really will get gc&apos;ed\ngit gc --prune --aggressive\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My repo (the &lt;code&gt;.git&lt;/code&gt;) changed from 32MB to 388KB, that even filter-branch couldn&apos;t clean.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;git filter-branch&lt;/code&gt; is a powerful command which you can use it to delete a huge file from the commits history. The file will stay for a while and Git will remove it in the next garbage collection.\nBelow is the full process from &lt;a href=&quot;https://www.gloomycorner.com/deleting-files-from-git-commit-history/&quot; rel=&quot;nofollow noreferrer&quot;&gt;deleteing files from commit history&lt;/a&gt;. For safety, below process runs the commands on a new branch first. If the result is what you needed, then reset it back to the branch you actually want to change.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# Do it in a new testing branch\n$ git checkout -b test\n\n# Remove file-name from every commit on the new branch\n# --index-filter, rewrite index without checking out\n# --cached, remove it from index but not include working tree\n# --ignore-unmatch, ignore if files to be removed are absent in a commit\n# HEAD, execute the specified command for each commit reached from HEAD by parent link\n$ git filter-branch --index-filter &apos;git rm --cached --ignore-unmatch file-name&apos; HEAD\n\n# The output is OK, reset it to the prior branch master\n$ git checkout master\n$ git reset --soft test\n\n# Remove test branch\n$ git branch -d test\n\n# Push it with force\n$ git push --force origin master\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can do this using the &lt;code&gt;branch filter&lt;/code&gt; command:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;git filter-branch --tree-filter &apos;rm -rf path/to/your/file&apos; HEAD&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;When you run into this problem, &lt;code&gt;git rm&lt;/code&gt; will not suffice, as git remembers that the file existed once in our history, and thus will keep a reference to it.&lt;/p&gt;\n\n&lt;p&gt;To make things worse, rebasing is not easy either, because any references to the blob will prevent git garbage collector from cleaning up the space. This includes remote references and reflog references.&lt;/p&gt;\n\n&lt;p&gt;I put together &lt;code&gt;git forget-blob&lt;/code&gt;, a little script that tries removing all these references, and then uses git filter-branch to rewrite every commit in the branch.&lt;/p&gt;\n\n&lt;p&gt;Once your blob is completely unreferenced, &lt;code&gt;git gc&lt;/code&gt; will get rid of it&lt;/p&gt;\n\n&lt;p&gt;The usage is pretty simple &lt;code&gt;git forget-blob file-to-forget&lt;/code&gt;. You can get more info here&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://ownyourbits.com/2017/01/18/completely-remove-a-file-from-a-git-repository-with-git-forget-blob/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://ownyourbits.com/2017/01/18/completely-remove-a-file-from-a-git-repository-with-git-forget-blob/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I put this together thanks to the answers from Stack Overflow and some blog entries. Credits to them!&lt;/p&gt;\n    ","\n&lt;p&gt;Other than &lt;code&gt;git filter-branch&lt;/code&gt; (slow but pure git solution) and &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/&quot; rel=&quot;nofollow noreferrer&quot;&gt;BFG&lt;/a&gt; (easier and very performant), there is also another tool to filter with good performance:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/xoofx/git-rocket-filter&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/xoofx/git-rocket-filter&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;From its description:&lt;/p&gt;\n\n&lt;p&gt;The purpose of git-rocket-filter is similar to the command &lt;code&gt;git-filter-branch&lt;/code&gt; while providing the following unique features:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Fast rewriting of commits and trees (by an order of x10 to x100).&lt;/li&gt;\n&lt;li&gt;Built-in support for both white-listing with --keep (keeps files or directories) and black-listing with --remove options.&lt;/li&gt;\n&lt;li&gt;Use of .gitignore like pattern for tree-filtering&lt;/li&gt;\n&lt;li&gt;Fast and easy C# Scripting for both commit filtering and tree filtering&lt;/li&gt;\n&lt;li&gt;Support for scripting in tree-filtering per file/directory pattern&lt;/li&gt;\n&lt;li&gt;Automatically prune empty/unchanged commit, including merge commits&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;This works perfectly for me : in git extensions :&lt;/p&gt;\n&lt;p&gt;right click on the selected commit :&lt;/p&gt;\n&lt;p&gt;reset current branch to here :&lt;/p&gt;\n&lt;p&gt;hard reset ;&lt;/p&gt;\n&lt;p&gt;It&apos;s surprising nobody else is able to give this simple answer.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/atZ6T.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/atZ6T.png&quot; alt=&quot;reset current branch to here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/tDqKF.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/tDqKF.png&quot; alt=&quot;hard reset&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre&gt;&lt;code&gt;git reset --soft HEAD~1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It will keep the changes but remove the commit then you can re-commit those changes.&lt;/p&gt;\n    "]},"randomTags":[{"name":"rule-of-three","slug":"rule-of-three"},{"name":"language-agnostic","slug":"language-agnostic"},{"name":"raw-types","slug":"raw-types"},{"name":"utf-8","slug":"utf-8"},{"name":"pandas-groupby","slug":"pandas-groupby"},{"name":"python-2.x","slug":"python-2.x"},{"name":"theory","slug":"theory"},{"name":"integer-division","slug":"integer-division"},{"name":"list","slug":"list"},{"name":"interface","slug":"interface"},{"name":"hex","slug":"hex"},{"name":"pinterest","slug":"pinterest"},{"name":"recursive-query","slug":"recursive-query"},{"name":"google-maps-api-3","slug":"google-maps-api-3"},{"name":"malloc","slug":"malloc"},{"name":"inner-join","slug":"inner-join"},{"name":"nested","slug":"nested"},{"name":"heredoc","slug":"heredoc"},{"name":"hash","slug":"hash"},{"name":"object-literal","slug":"object-literal"}]},"__N_SSG":true}