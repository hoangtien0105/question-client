{"pageProps":{"data":{"count":1,"rows":[{"id":256,"title":"Fetch the rows which have the Max value for a column for each distinct value of another column","slug":"fetch-the-rows-which-have-the-max-value-for-a-column-for-each-distinct-value-of-another-column-1657387423925","postType":"QUESTION","createdAt":"2022-07-09T17:23:43.000Z","updatedAt":"2022-07-09T17:23:43.000Z","tags":[{"id":1648,"name":"oracle","slug":"oracle","createdAt":"2022-07-09T17:23:43.000Z","updatedAt":"2022-07-09T17:23:43.000Z","Questions_Tags":{"questionId":256,"tagId":1648}}]}]},"slug":"oracle","page":1,"answers":{"256":["\n&lt;p&gt;I see many people use subqueries or else window functions to do this, but I often do this kind of query without subqueries in the following way.  It uses plain, standard SQL so it should work in any brand of RDBMS.&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; mytable t1\n  &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; mytable t2\n    &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (t1.UserId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.UserId &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; t1.&quot;Date&quot; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; t2.&quot;Date&quot;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t2.UserId &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In other words: fetch the row from &lt;code&gt;t1&lt;/code&gt; where no other row exists with the same &lt;code&gt;UserId&lt;/code&gt; and a greater Date.&lt;/p&gt;\n&lt;p&gt;(I put the identifier &quot;Date&quot; in delimiters because it&apos;s an SQL reserved word.)&lt;/p&gt;\n&lt;p&gt;In case if &lt;code&gt;t1.&quot;Date&quot; = t2.&quot;Date&quot;&lt;/code&gt;, doubling appears. Usually tables has &lt;code&gt;auto_inc(seq)&lt;/code&gt; key, e.g. &lt;code&gt;id&lt;/code&gt;.\nTo avoid doubling can be used follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; t1.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; mytable t1\n  &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; mytable t2\n    &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; t1.UserId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.UserId &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; ((t1.&quot;Date&quot; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; t2.&quot;Date&quot;) \n         &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; (t1.&quot;Date&quot; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t2.&quot;Date&quot; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; t1.id &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; t2.id))\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; t2.UserId &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Re comment from @Farhan:&lt;/p&gt;\n&lt;p&gt;Here&apos;s a more detailed explanation:&lt;/p&gt;\n&lt;p&gt;An outer join attempts to join &lt;code&gt;t1&lt;/code&gt; with &lt;code&gt;t2&lt;/code&gt;.  By default, all results of &lt;code&gt;t1&lt;/code&gt; are returned, and &lt;em&gt;if&lt;/em&gt; there is a match in &lt;code&gt;t2&lt;/code&gt;, it is also returned.  If there is no match in &lt;code&gt;t2&lt;/code&gt; for a given row of &lt;code&gt;t1&lt;/code&gt;, then the query still returns the row of &lt;code&gt;t1&lt;/code&gt;, and uses &lt;code&gt;NULL&lt;/code&gt; as a placeholder for all of &lt;code&gt;t2&lt;/code&gt;&apos;s columns.  That&apos;s just how outer joins work in general.&lt;/p&gt;\n&lt;p&gt;The trick in this query is to design the join&apos;s matching condition such that &lt;code&gt;t2&lt;/code&gt; must match the &lt;em&gt;same&lt;/em&gt; &lt;code&gt;userid&lt;/code&gt;, and a &lt;em&gt;greater&lt;/em&gt; &lt;code&gt;date&lt;/code&gt;.  The idea being if a row exists in &lt;code&gt;t2&lt;/code&gt; that has a greater &lt;code&gt;date&lt;/code&gt;, then the row in &lt;code&gt;t1&lt;/code&gt; it&apos;s compared against &lt;em&gt;can&apos;t&lt;/em&gt; be the greatest &lt;code&gt;date&lt;/code&gt; for that &lt;code&gt;userid&lt;/code&gt;.  But if there is no match -- i.e. if no row exists in &lt;code&gt;t2&lt;/code&gt; with a greater &lt;code&gt;date&lt;/code&gt; than the row in &lt;code&gt;t1&lt;/code&gt; -- we know that the row in &lt;code&gt;t1&lt;/code&gt; was the row with the greatest &lt;code&gt;date&lt;/code&gt; for the given &lt;code&gt;userid&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;In those cases (when there&apos;s no match), the columns of &lt;code&gt;t2&lt;/code&gt; will be &lt;code&gt;NULL&lt;/code&gt; -- even the columns specified in the join condition.  So that&apos;s why we use &lt;code&gt;WHERE t2.UserId IS NULL&lt;/code&gt;, because we&apos;re searching for the cases where no row was found with a greater &lt;code&gt;date&lt;/code&gt; for the given &lt;code&gt;userid&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This will retrieve all rows for which the my_date column value is equal to the maximum value of my_date for that userid. This may retrieve multiple rows for the userid where the maximum date is on multiple rows.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; userid,\n       my_date,\n       ...\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n(\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; userid,\n       my_date,\n       ...\n       &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(my_date) &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; userid) max_my_date\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;   users\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; my_date &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; max_my_date\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&quot;Analytic functions rock&quot;&lt;/p&gt;\n\n&lt;p&gt;Edit: With regard to the first comment ...&lt;/p&gt;\n\n&lt;p&gt;&quot;using analytic queries and a self-join defeats the purpose of analytic queries&quot;&lt;/p&gt;\n\n&lt;p&gt;There is no self-join in this code. There is instead a predicate placed on the result of the inline view that contains the analytic function -- a very different matter, and completely standard practice.&lt;/p&gt;\n\n&lt;p&gt;&quot;The default window in Oracle is from the first row in the partition to the current one&quot;&lt;/p&gt;\n\n&lt;p&gt;The windowing clause is only applicable in the presence of the order by clause. With no order by clause, no windowing clause is applied by default and none can be explicitly specified.&lt;/p&gt;\n\n&lt;p&gt;The code works.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; userid, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;) KEEP (DENSE_RANK &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; userid\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I don&apos;t know your exact columns names, but it would be something like this:&lt;/p&gt;\n\n&lt;pre&gt;    select userid, value\n      from users u1\n     where date = (select max(date)\n                     from users u2\n                    where u1.userid = u2.userid)\n&lt;/pre&gt;\n    ","\n&lt;p&gt;Not being at work, I don&apos;t have Oracle to hand, but I seem to recall that Oracle allows multiple columns to be matched in an IN clause, which should at least avoid the options that use a correlated subquery, which is seldom a good idea.&lt;/p&gt;\n\n&lt;p&gt;Something like this, perhaps (can&apos;t remember if the column list should be parenthesised or not):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; MyTable\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;User&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt;\n  ( &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;User&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; MyTable &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;User&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;EDIT: Just tried it for real:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; MyTable (usr &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), dt &lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; mytable &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;01-JAN-2009&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; mytable &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;01-JAN-2009&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; mytable &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;31-DEC-2008&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; mytable &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;31-DEC-2008&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; usr, dt &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; mytable\n  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; (usr, dt) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; \n  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  ( &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; usr, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(dt) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; mytable &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; usr)\n  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;\n\nU DT\n&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;---------&lt;/span&gt;\nA &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;JAN&lt;span class=&quot;hljs-number&quot;&gt;-09&lt;/span&gt;\nB &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;JAN&lt;span class=&quot;hljs-number&quot;&gt;-09&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So it works, although some of the new-fangly stuff mentioned elsewhere may be more performant.&lt;/p&gt;\n    ","\n&lt;p&gt;I know you asked for Oracle, but in SQL 2005 we now use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Single Value&lt;/span&gt;\n;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; ByDate\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) RowNum\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; UserDates\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ByDate\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; RowNum &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Multiple values where dates match&lt;/span&gt;\n;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; ByDate\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;RANK&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) Rnk\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; UserDates\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ByDate\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; Rnk &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I don&apos;t have Oracle to test it, but the most efficient solution is to use analytic queries.  It should look something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt;\n    UserId\n  , MaxValue\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId\n      , &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;Over&lt;/span&gt; (\n          &lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId\n          &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n        ) MaxValue\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; SomeTable\n  )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I suspect that you can get rid of the outer query and put distinct on the inner, but I&apos;m not sure.  In the meantime I know this one works.&lt;/p&gt;\n\n&lt;p&gt;If you want to learn about analytic queries, I&apos;d suggest reading &lt;a href=&quot;http://www.orafaq.com/node/55&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.orafaq.com/node/55&lt;/a&gt; and &lt;strike&gt;&lt;a href=&quot;http://www.akadia.com/services/ora_analytic_functions.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.akadia.com/services/ora_analytic_functions.html&lt;/a&gt;&lt;/strike&gt;.  Here is the short summary.&lt;/p&gt;\n\n&lt;p&gt;Under the hood analytic queries sort the whole dataset, then process it sequentially.  As you process it you partition the dataset according to certain criteria, and then for each row looks at some window (defaults to the first value in the partition to the current row - that default is also the most efficient) and can compute values using a number of analytic functions (the list of which is very similar to the aggregate functions).&lt;/p&gt;\n\n&lt;p&gt;In this case here is what the inner query does.  The whole dataset is sorted by UserId then Date DESC.  Then it processes it in one pass.  For each row you return the UserId and the first Date seen for that UserId (since dates are sorted DESC, that&apos;s the max date).  This gives you your answer with duplicated rows.  Then the outer DISTINCT squashes duplicates.&lt;/p&gt;\n\n&lt;p&gt;This is not a particularly spectacular example of analytic queries.  For a much bigger win consider taking a table of financial receipts and calculating for each user and receipt, a running total of what they paid.  Analytic queries solve that efficiently.  Other solutions are less efficient.  Which is why they are part of the 2003 SQL standard.  (Unfortunately Postgres doesn&apos;t have them yet.  Grrr...)&lt;/p&gt;\n    ","\n&lt;p&gt;Wouldn&apos;t a QUALIFY clause be both simplest and best?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; userid, my_date, ...\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; users\nqualify &lt;span class=&quot;hljs-built_in&quot;&gt;rank&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; userid &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; my_date &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For context, on Teradata here a decent size test of this runs in 17s with this QUALIFY version and in 23s with the &apos;inline view&apos;/Aldridge solution #1.&lt;/p&gt;\n    ","\n&lt;p&gt;In &lt;strong&gt;&lt;code&gt;Oracle 12c+&lt;/code&gt;&lt;/strong&gt;, you can use &lt;em&gt;Top n&lt;/em&gt; queries along with analytic function &lt;code&gt;rank&lt;/code&gt; to achieve this very concisely &lt;em&gt;without&lt;/em&gt; subqueries:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; your_table\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;rank&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; user_id &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; my_date &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; ties;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above returns all the rows with max my_date per user. &lt;/p&gt;\n\n&lt;p&gt;If you want only one row with max date, then replace the &lt;code&gt;rank&lt;/code&gt; with &lt;code&gt;row_number&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; your_table\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;row_number&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; user_id &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; my_date &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; ties; \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With PostgreSQL 8.4 or later, you can use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; user_id, user_value_1, user_value_2\n  &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; user_id, user_value_1, user_value_2, &lt;span class=&quot;hljs-built_in&quot;&gt;row_number&lt;/span&gt;()\n          &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; user_id &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; user_date &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;) \n        &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; users) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; r\n  &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; r.row_number&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;https://docs.oracle.com/database/121/SQLRF/functions170.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ROW_NUMBER()&lt;/code&gt;&lt;/a&gt; to assign a unique ranking on descending &lt;code&gt;Date&lt;/code&gt; for each &lt;code&gt;UserId&lt;/code&gt;, then filter to the first row for each &lt;code&gt;UserId&lt;/code&gt; (i.e., &lt;code&gt;ROW_NUMBER&lt;/code&gt; = 1).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;,\n        &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) rn\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users) u\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; rn &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just had to write a &quot;live&quot; example at work :)&lt;/p&gt;\n\n&lt;p&gt;This one supports multiple values for UserId on the &lt;strong&gt;same&lt;/strong&gt; date.&lt;/p&gt;\n\n&lt;p&gt;Columns:\nUserId, Value, Date&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; UserId,\n   &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;),\n   &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;Values&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n(\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Values&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;table_name&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserId, &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can use FIRST_VALUE instead of MAX and look it up in the explain plan. I didn&apos;t have the time to play with it.&lt;/p&gt;\n\n&lt;p&gt;Of course, if searching through huge tables, it&apos;s probably better if you use FULL hints in your query.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m quite late to the party but the following hack will outperform both correlated subqueries and any analytics function but has one restriction: values must convert to strings. So it works for dates, numbers and other strings. The code does not look good but the execution profile is great. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt;\n    userid,\n    to_number(substr(&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(to_char(&lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;yyyymmdd&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; to_char(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;)), &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; \n    users\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;\n    userid\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The reason why this code works so well is that it only needs to scan the table once. It does not require any indexes and most importantly it does not need to sort the table, which most analytics functions do. Indexes will help though if you need to filter the result for a single userid.&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re using Postgres, you can use &lt;code&gt;array_agg&lt;/code&gt; like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; userid,&lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(adate),(&lt;span class=&quot;hljs-built_in&quot;&gt;array_agg&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; adate &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YOURTABLE\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; userid\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;m not familiar with Oracle. This is what I came up with&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n  userid,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(adate),\n  SUBSTR(\n    (&lt;span class=&quot;hljs-built_in&quot;&gt;LISTAGG&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;WITHIN&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; adate &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;)),\n    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n    INSTR((&lt;span class=&quot;hljs-built_in&quot;&gt;LISTAGG&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;WITHIN&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; adate &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;)), &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;\n  ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; YOURTABLE\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; userid \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both queries return the same results as the accepted answer. See SQLFiddles:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;http://sqlfiddle.com/#!4/2749b5/42&quot; rel=&quot;nofollow&quot;&gt;Accepted answer&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://sqlfiddle.com/#!12/24a7a/18&quot; rel=&quot;nofollow&quot;&gt;My solution with Postgres&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://sqlfiddle.com/#!4/2749b5/41&quot; rel=&quot;nofollow&quot;&gt;My solution with Oracle&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;I think something like this. (Forgive me for any syntax mistakes; I&apos;m used to using HQL at this point!)&lt;/p&gt;\n\n&lt;p&gt;EDIT: Also misread the question! Corrected the query...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;user&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; maxtest\n    &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; maxtest.UserId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; user.UserId\n)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;i thing you shuold make this variant to previous query:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users U1 &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; \n&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;)    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; UserId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; U1.UserId)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;  \n   UserID,  \n   &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;,  \n   &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;  \n&lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt;  \n   &lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt;,  \n   (  \n      &lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;  \n          UserID,  \n          &lt;span class=&quot;hljs-built_in&quot;&gt;Max&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; MDate  \n      &lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt;  \n          &lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt;  \n      &lt;span class=&quot;hljs-keyword&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;  \n          UserID  \n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; subQuery  \n&lt;span class=&quot;hljs-keyword&quot;&gt;Where&lt;/span&gt;  \n   Table.UserID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; subQuery.UserID &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt;  \n   Table.Date &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; subQuery.mDate  \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; TABLE1 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;TIME&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;TIME&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; TABLE1 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n   (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;DATE&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; TABLE1 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; CRITERIA&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;CRITERIA))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;(T-SQL) First get all the users and their maxdate. Join with the table to find the corresponding values for the users on the maxdates.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; users (userid &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; , &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; , &lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt; datetime)\n&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;20010101&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;20020101&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;20010101&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;20030101&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; T1.userid, T1.value, T1.date \n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; users T1,\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; maxdate, userid &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; userid) T2    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; T1.userid&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; T2.userid &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; T1.date &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; T2.maxdate\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;results:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;userid      &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;       &lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;                                    \n&lt;span class=&quot;hljs-comment&quot;&gt;----------- ----------- -------------------------- &lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;2003&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-01&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00.000&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;2002&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-01&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00.000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The answer here is Oracle only. Here&apos;s a bit more sophisticated answer in all SQL:&lt;/p&gt;\n\n&lt;p&gt;Who has the best overall homework result (maximum sum of homework points)?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;LAST&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(POINTS) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; TOTAL\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; STUDENTS S, RESULTS R\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; S.SID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; R.SID &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; R.CAT &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;H&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; S.SID, &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;LAST&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;HAVING&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(POINTS) &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt; (POINTS)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; RESULTS\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; CAT &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;H&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; SID)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And a more difficult example, which need some explanation, for which I don&apos;t have time atm:&lt;/p&gt;\n\n&lt;p&gt;Give the book (ISBN and title) that is most popular in 2008, i.e., which is borrowed most often in 2008.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; X.ISBN, X.title, X.loans\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Book.ISBN, Book.title, &lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;(Loan.dateTimeOut) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; loans\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; CatalogEntry Book\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; BookOnShelf &lt;span class=&quot;hljs-keyword&quot;&gt;Copy&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; Book.bookId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Copy.bookId\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Loan &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;YEAR&lt;/span&gt;(Loan.dateTimeOut) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2008&lt;/span&gt;) Loan \n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; Copy.copyId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Loan.copyId\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Book.title) X\n&lt;span class=&quot;hljs-keyword&quot;&gt;HAVING&lt;/span&gt; loans &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;(Loan.dateTimeOut) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; loans\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; CatalogEntry Book\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; BookOnShelf &lt;span class=&quot;hljs-keyword&quot;&gt;Copy&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; Book.bookId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Copy.bookId\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Loan &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;YEAR&lt;/span&gt;(Loan.dateTimeOut) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2008&lt;/span&gt;) Loan \n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; Copy.copyId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Loan.copyId\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; Book.title);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hope this helps (anyone).. :)&lt;/p&gt;\n\n&lt;p&gt;Regards,\nGuus&lt;/p&gt;\n    ","\n&lt;p&gt;Just tested this and it seems to work on a logging table&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ColumnNames, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(DateColumn) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; log  &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; ColumnNames &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Assuming Date is unique for a given UserID, here&apos;s some TSQL:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n    UserTest.UserID, UserTest.Value\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; UserTest\n&lt;span class=&quot;hljs-keyword&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt;\n(\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserID, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) MaxDate\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; UserTest\n    &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; UserID\n) Dates\n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; UserTest.UserID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Dates.UserID\n&lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; UserTest.Date &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Dates.MaxDate \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Solution for MySQL which doesn&apos;t have concepts of partition KEEP, DENSE_RANK. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; userid,\n       my_date,\n       ...\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n(\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sno&lt;/span&gt;:&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@pid&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;userid &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sno&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; serialnumber, \n    &lt;span class=&quot;hljs-variable&quot;&gt;@pid&lt;/span&gt;:&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;userid,\n       my_Date,\n       ...\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;   users &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; userid, my_date\n) a\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; a.serialnumber&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Reference:  &lt;a href=&quot;http://benincampus.blogspot.com/2013/08/select-rows-which-have-maxmin-value-in.html&quot; rel=&quot;nofollow&quot;&gt;http://benincampus.blogspot.com/2013/08/select-rows-which-have-maxmin-value-in.html&lt;/a&gt; &lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; userid, &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;date&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; thetable t1 ,\n       ( &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; t2.userid, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(t2.date) date2 \n           &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; thetable t2 \n          &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; t2.userid ) t3\n &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; t3.userid t1.userid &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt;\n       t3.date2 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; t1.date\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;IMHO this works. HTH    &lt;/p&gt;\n    ","\n&lt;p&gt;I think this should work?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt;\nT1.UserId,\n(&lt;span class=&quot;hljs-keyword&quot;&gt;Select&lt;/span&gt; Top &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; T2.Value &lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt; T2 &lt;span class=&quot;hljs-keyword&quot;&gt;Where&lt;/span&gt; T2.UserId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; T1.UserId &lt;span class=&quot;hljs-keyword&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;By&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Desc&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Value&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;From&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Table&lt;/span&gt; T1\n&lt;span class=&quot;hljs-keyword&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;By&lt;/span&gt;\nT1.UserId\n&lt;span class=&quot;hljs-keyword&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;By&lt;/span&gt;\nT1.UserId\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;First try I misread the question, following the top answer, here is a complete example with correct results:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; table_name (id &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, the_value &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), the_date datetime);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; table_name (id,the_value,the_date) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;1/1/2000&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; table_name (id,the_value,the_date) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;2/2/2002&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; table_name (id,the_value,the_date) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;1/1/2000&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; table_name (id,the_value,the_date) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;3/3/2003&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; table_name (id,the_value,the_date) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;3/3/2003&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;--&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; id, the_value\n      &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; table_name u1\n      &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; the_date &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(the_date)\n                     &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; table_name u2\n                     &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; u1.id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; u2.id)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;--&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;id          the_value\n&lt;span class=&quot;hljs-comment&quot;&gt;----------- ---------&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;           d\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;           e\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;           b\n\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;row&lt;/span&gt;(s) affected)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This will also take care of duplicates (return one row for each user_id):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; u.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;FIRST_VALUE&lt;/span&gt;(u.rowid) &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; u.user_id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; u.date &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; last_rowid\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users u\n) u2\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; u2.rowid &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; u2.last_rowid\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This should be as simple as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; UserId, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users u\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; UserID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; u.UserID)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt;   UserId,&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; UserId) &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; users;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If (UserID, Date) is unique, i.e. no date appears twice for the same user then:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; TheTable.UserID, TheTable.Value\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; TheTable &lt;span class=&quot;hljs-keyword&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; UserID, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;([&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;]) MaxDate\n                          &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; TheTable\n                          &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; UserID) UserMaxDate\n     &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; TheTable.UserID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; UserMaxDate.UserID\n        TheTable.[&lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; UserMaxDate.MaxDate;\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"expected-condition","slug":"expected-condition"},{"name":"dictionary","slug":"dictionary"},{"name":"xss","slug":"xss"},{"name":"http","slug":"http"},{"name":"deserialization","slug":"deserialization"},{"name":"equality-operator","slug":"equality-operator"},{"name":"postgresql","slug":"postgresql"},{"name":"if-statement","slug":"if-statement"},{"name":"python-internals","slug":"python-internals"},{"name":"database-design","slug":"database-design"},{"name":"password-protection","slug":"password-protection"},{"name":"python","slug":"python"},{"name":"aggregation-framework","slug":"aggregation-framework"},{"name":"jvm","slug":"jvm"},{"name":"array-difference","slug":"array-difference"},{"name":"uniqueidentifier","slug":"uniqueidentifier"},{"name":"android-edittext","slug":"android-edittext"},{"name":"dst","slug":"dst"},{"name":"prototypal-inheritance","slug":"prototypal-inheritance"},{"name":"environment-variables","slug":"environment-variables"}]},"__N_SSG":true}