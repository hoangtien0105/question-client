{"pageProps":{"data":{"count":1,"rows":[{"id":181,"title":"How does Access-Control-Allow-Origin header work?","slug":"how-does-access-control-allow-origin-header-work-1657384881723","postType":"QUESTION","createdAt":"2022-07-09T16:41:21.000Z","updatedAt":"2022-07-09T16:41:21.000Z","tags":[{"id":663,"name":"cross-domain","slug":"cross-domain","createdAt":"2022-07-09T16:41:21.000Z","updatedAt":"2022-07-09T16:41:21.000Z","Questions_Tags":{"questionId":181,"tagId":663}}]}]},"slug":"cross-domain","page":"1","answers":{"181":["\n&lt;p&gt;&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; is a &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/&quot; rel=&quot;noreferrer&quot;&gt;CORS (Cross-Origin Resource Sharing) header&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;When Site A tries to fetch content from Site B,  Site B can send an &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; response header to tell the browser that the content of this page is accessible to certain origins. (An &lt;em&gt;origin&lt;/em&gt; is a &lt;a href=&quot;https://stackoverflow.com/a/19542686/710446&quot;&gt;domain, plus a scheme and port number&lt;/a&gt;.)  By default, Site B&apos;s pages are &lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot; rel=&quot;noreferrer&quot;&gt;not accessible to any other origin&lt;/a&gt;; using the &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header opens a door for cross-origin access by specific requesting origins.&lt;/p&gt;\n\n&lt;p&gt;For each resource/page that Site B wants to make accessible to Site A, Site B should serve its pages with the response header:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Origin&lt;/span&gt;: &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//siteA.com&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Modern browsers will not block cross-domain requests outright.  If Site A requests a page from Site B, the browser will actually fetch the requested page &lt;em&gt;on the network level&lt;/em&gt; and check if the response headers list Site A as a permitted requester domain.  If Site B has not indicated that Site A is allowed to access this page, the browser will trigger the &lt;code&gt;XMLHttpRequest&lt;/code&gt;&apos;s &lt;code&gt;error&lt;/code&gt; event and  deny the response data to the requesting JavaScript code.&lt;/p&gt;\n\n&lt;h1&gt;Non-simple requests&lt;/h1&gt;\n\n&lt;p&gt;What happens on the network level can be &lt;em&gt;slightly&lt;/em&gt; more complex than explained above. If the request is a &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/#toc-handling-a-not-so-simple-request&quot; rel=&quot;noreferrer&quot;&gt;&quot;non-simple&quot; request&lt;/a&gt;, the browser first sends a data-less &quot;preflight&quot; OPTIONS request, to verify that the server will accept the request. A request is non-simple when either (or both):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;using an HTTP verb other than GET or POST (e.g. PUT, DELETE)&lt;/li&gt;\n&lt;li&gt;using non-simple request headers; the only simple requests headers are:\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Accept-Language&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Content-Language&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Content-Type&lt;/code&gt; (this is only simple when its value is &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;, &lt;code&gt;multipart/form-data&lt;/code&gt;, or &lt;code&gt;text/plain&lt;/code&gt;)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If the server responds to the OPTIONS preflight with appropriate response headers (&lt;code&gt;Access-Control-Allow-Headers&lt;/code&gt; for non-simple headers, &lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt; for non-simple verbs) that match the non-simple verb and/or non-simple headers, then the browser sends the actual request.&lt;/p&gt;\n\n&lt;p&gt;Supposing that Site A wants to send a PUT request for &lt;code&gt;/somePage&lt;/code&gt;, with a non-simple &lt;code&gt;Content-Type&lt;/code&gt; value of &lt;code&gt;application/json&lt;/code&gt;, the browser would first send a preflight request:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;OPTIONS&lt;/span&gt; /somePage &lt;span class=&quot;hljs-variable constant_&quot;&gt;HTTP&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Origin&lt;/span&gt;: &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//siteA.com&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Request&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Method&lt;/span&gt;: &lt;span class=&quot;hljs-variable constant_&quot;&gt;PUT&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Request&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Headers&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Content&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that &lt;code&gt;Access-Control-Request-Method&lt;/code&gt; and &lt;code&gt;Access-Control-Request-Headers&lt;/code&gt; are added by the browser automatically; you do not need to add them. This OPTIONS preflight gets the successful response headers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Origin&lt;/span&gt;: &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//siteA.com&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Methods&lt;/span&gt;: &lt;span class=&quot;hljs-variable constant_&quot;&gt;GET&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;POST&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;PUT&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Headers&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Content&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When sending the actual request (after preflight is done), the behavior is identical to how a simple request is handled. In other words, a non-simple request whose preflight is successful is treated the same as a simple request (i.e., the server must still send &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; again for the actual response).&lt;/p&gt;\n\n&lt;p&gt;The browsers sends the actual request:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;PUT&lt;/span&gt; /somePage &lt;span class=&quot;hljs-variable constant_&quot;&gt;HTTP&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Origin&lt;/span&gt;: &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//siteA.com&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Content&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;: application/json\n\n{ &lt;span class=&quot;hljs-string&quot;&gt;&quot;myRequestContent&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;JSON is so great&quot;&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the server sends back an &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;, just as it would for a simple request:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Origin&lt;/span&gt;: &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//siteA.com&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/a/13400954/710446&quot;&gt;Understanding XMLHttpRequest over CORS&lt;/a&gt; for a little more information about non-simple requests.&lt;/p&gt;\n    ","\n&lt;p&gt;Cross-Origin Resource Sharing - &lt;code&gt;CORS&lt;/code&gt; (A.K.A. Cross-Domain AJAX request) is an issue that most web developers might encounter, according to Same-Origin-Policy, browsers restrict client JavaScript in a security sandbox, usually JS cannot directly communicate with a remote server from a different domain. In the past developers created many tricky ways to achieve Cross-Domain resource request, most commonly using ways are:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Use Flash/Silverlight or server side as a &quot;proxy&quot; to communicate\nwith remote. &lt;/li&gt;\n&lt;li&gt;JSON With Padding (&lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot; rel=&quot;noreferrer&quot;&gt;JSONP&lt;/a&gt;). &lt;/li&gt;\n&lt;li&gt;Embeds remote server in an iframe and communicate through fragment or window.name, refer &lt;a href=&quot;http://www.ibm.com/developerworks/library/wa-crossdomaincomm/#N10120&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Those tricky ways have more or less some issues, for example JSONP might result in security hole if developers simply &quot;eval&quot; it, and #3 above, although it works, both domains should build strict contract between each other, it neither flexible nor elegant IMHO:)&lt;/p&gt;\n\n&lt;p&gt;W3C had introduced Cross-Origin Resource Sharing (CORS) as a standard solution to provide a safe, flexible and a recommended standard way to solve this issue. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The Mechanism&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;From a high level we can simply deem CORS is a contract between client AJAX call from domain A and a page hosted on domain B, a typical Cross-Origin request/response would be:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;DomainA AJAX request headers&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DomainB&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;com&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;User&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Agent&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Mozilla&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;5.0&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Windows&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;NT&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6.1&lt;/span&gt;; &lt;span class=&quot;hljs-title class_&quot;&gt;WOW64&lt;/span&gt;; &lt;span class=&quot;hljs-attr&quot;&gt;rv&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;) &lt;span class=&quot;hljs-title class_&quot;&gt;Gecko&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;20100101&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Firefox&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;4.0&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Accept&lt;/span&gt; text/html,application/xhtml+xml,application/xml;q=&lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;,*&lt;span class=&quot;hljs-comment&quot;&gt;/*;q=0.8,application/json\nAccept-Language en-us;\nAccept-Encoding gzip, deflate\nKeep-Alive 115\nOrigin http://DomainA.com \n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;DomainB response headers&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Cache&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt; private\n&lt;span class=&quot;hljs-title class_&quot;&gt;Content&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt; application/json; charset=utf-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Origin&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DomainA&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;com&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Content&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Proxy&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Keep&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Alive&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Keep&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Alive&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The blue parts I marked above were the kernal facts, &quot;Origin&quot; request header &quot;indicates where the cross-origin request or preflight request originates from&quot;, the &quot;Access-Control-Allow-Origin&quot; response header indicates this page allows remote request from DomainA (if the value is * indicate allows remote requests from any domain).&lt;/p&gt;\n\n&lt;p&gt;As I mentioned above, W3 recommended browser to implement a &quot;&lt;strong&gt;preflight request&lt;/strong&gt;&quot; before submiting the actually Cross-Origin HTTP request, in a nutshell it is an HTTP &lt;code&gt;OPTIONS&lt;/code&gt; request:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;OPTIONS&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DomainB&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;com&lt;/span&gt;/foo.&lt;span class=&quot;hljs-property&quot;&gt;aspx&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;HTTP&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If foo.aspx supports OPTIONS HTTP verb, it might return response like below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;HTTP&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;OK&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Wed&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Mar&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2011&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;GMT&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Origin&lt;/span&gt;: &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//DomainA.com&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Methods&lt;/span&gt;: &lt;span class=&quot;hljs-variable constant_&quot;&gt;POST&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;GET&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;OPTIONS&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;HEAD&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Headers&lt;/span&gt;: X-&lt;span class=&quot;hljs-title class_&quot;&gt;Requested&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;With&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Max&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1728000&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Connection&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Keep&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Alive&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Content&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;: application/json\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Only if the response contains &quot;Access-Control-Allow-Origin&quot; AND its value is &quot;*&quot; or contain the domain who submitted the CORS request, by satisfying this mandtory condition browser will submit the actual Cross-Domain request, and cache the result in &quot;&lt;strong&gt;Preflight-Result-Cache&lt;/strong&gt;&quot;.&lt;/p&gt;\n\n&lt;p&gt;I blogged about CORS three years ago: &lt;a href=&quot;http://wayneye.com/Blog/Ajax-Cross-Origin-HTTP-request&quot; rel=&quot;noreferrer&quot;&gt;AJAX Cross-Origin HTTP request&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Question is a bit too old to answer, but I am posting this for any future reference to this question.&lt;/p&gt;\n\n&lt;p&gt;According to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&quot; rel=&quot;noreferrer&quot;&gt;this&lt;/a&gt; Mozilla Developer Network article,&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A resource makes a &lt;strong&gt;cross-origin HTTP request&lt;/strong&gt; when it requests a resource from a different domain, or port than the one which the first resource itself serves.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/zn3sT.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/zn3sT.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;An &lt;strong&gt;HTML page&lt;/strong&gt; served from &lt;code&gt;http://domain-a.com&lt;/code&gt; makes an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; src request for &lt;code&gt;http://domain-b.com/image.jpg&lt;/code&gt;.&lt;br&gt;\nMany pages on the web today load resources like &lt;strong&gt;CSS stylesheets&lt;/strong&gt;, &lt;strong&gt;images&lt;/strong&gt; and &lt;strong&gt;scripts&lt;/strong&gt; from separate domains (thus it should be cool).&lt;/p&gt;\n\n&lt;h1&gt;Same-Origin Policy&lt;/h1&gt;\n\n&lt;p&gt;For security reasons, browsers restrict &lt;strong&gt;cross-origin HTTP&lt;/strong&gt; requests &lt;strong&gt;initiated from within scripts&lt;/strong&gt;.&lt;br&gt;\nFor example, &lt;code&gt;XMLHttpRequest&lt;/code&gt; and &lt;code&gt;Fetch&lt;/code&gt; follow the &lt;strong&gt;same-origin policy&lt;/strong&gt;.&lt;br&gt;\nSo, a web application using &lt;code&gt;XMLHttpRequest&lt;/code&gt; or &lt;code&gt;Fetch&lt;/code&gt; could only make &lt;strong&gt;HTTP requests&lt;/strong&gt; to &lt;strong&gt;its own domain&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;h1&gt;Cross-Origin Resource Sharing (CORS)&lt;/h1&gt;\n\n&lt;p&gt;To improve web applications, developers asked browser vendors to allow cross-domain requests.&lt;/p&gt;\n\n&lt;p&gt;The &lt;strong&gt;Cross-Origin Resource Sharing (CORS)&lt;/strong&gt; mechanism gives web servers &lt;strong&gt;cross-domain access controls&lt;/strong&gt;, which enable secure cross-domain data transfers.&lt;br&gt;\nModern browsers use &lt;strong&gt;CORS&lt;/strong&gt; in an &lt;strong&gt;API container&lt;/strong&gt; - such as &lt;code&gt;XMLHttpRequest&lt;/code&gt; or &lt;code&gt;Fetch&lt;/code&gt; - to mitigate risks of cross-origin HTTP requests.&lt;/p&gt;\n\n&lt;h2&gt;How CORS works (&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header)&lt;/h2&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot; rel=&quot;noreferrer&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The CORS standard describes new HTTP headers which provide browsers and servers a way to request remote URLs only when they have permission.&lt;/p&gt;\n  \n  &lt;p&gt;Although some validation and authorization can be performed by the server, &lt;strong&gt;it is generally the browser&apos;s responsibility&lt;/strong&gt; to support these headers and honor the restrictions they impose.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h1&gt;Example&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;The browser sends the &lt;code&gt;OPTIONS&lt;/code&gt; request with an &lt;code&gt;Origin HTTP&lt;/code&gt; header. &lt;/p&gt;\n\n&lt;p&gt;The value of this header is the domain that served the parent page. When a page from &lt;code&gt;http://www.example.com&lt;/code&gt; attempts to access a user&apos;s data in &lt;code&gt;service.example.com&lt;/code&gt;, the following request header would be sent to &lt;code&gt;service.example.com&lt;/code&gt;:&lt;/p&gt;\n\n&lt;p&gt;Origin: &lt;a href=&quot;http://www.example.com&quot; rel=&quot;noreferrer&quot;&gt;http://www.example.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The server at &lt;code&gt;service.example.com&lt;/code&gt; may respond with:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;An &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; (ACAO) header in its response indicating which origin sites are allowed.&lt;br&gt;\nFor example:  &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Access-Control-Allow-Origin: http://www.example.com&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;An error page if the server does not allow the cross-origin request&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;An &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; (ACAO) header with a wildcard that allows all domains:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Whenever I start thinking about CORS, my intuition about which site hosts the headers is incorrect, just as you described in your question. For me, it helps to think about the purpose of the same origin policy.&lt;/p&gt;\n&lt;p&gt;The purpose of the same origin policy is to protect you from malicious JavaScript on siteA.com accessing private information you&apos;ve chosen to share only with siteB.com. Without the same origin policy, JavaScript written by the authors of siteA.com could make your browser make requests to siteB.com, using your authentication cookies for siteB.com. In this way, siteA.com could steal the secret information you share with siteB.com.&lt;/p&gt;\n&lt;p&gt;Sometimes you need to work cross domain, which is where CORS comes in. CORS relaxes the same origin policy for siteB.com, using the &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header to list other domains (siteA.com) that are trusted to run JavaScript that can interact with siteB.com.&lt;/p&gt;\n&lt;p&gt;To understand which domain should serve the CORS headers, consider this. You visit malicious.com, which contains some JavaScript that tries to make a cross domain request to mybank.com. It should be up to mybank.com, not malicious.com, to decide whether or not it sets CORS headers that relax the same origin policy allowing the JavaScript from malicious.com to interact with it. If malicous.com could set its own CORS headers allowing its own JavaScript access to mybank.com, this would completely nullify the same origin policy.&lt;/p&gt;\n&lt;p&gt;I think the reason for my bad intuition is the point of view I have when developing a site. It&apos;s &lt;strong&gt;my&lt;/strong&gt; site, with all &lt;strong&gt;my&lt;/strong&gt; JavaScript, therefore it isn&apos;t doing anything malicious and it should be up to &lt;strong&gt;me&lt;/strong&gt; to specify which other sites &lt;strong&gt;my&lt;/strong&gt; JavaScript can interact with. When in fact I should be thinking which &lt;strong&gt;other&lt;/strong&gt; sites JavaScript are trying to interact with my site and should I use CORS to allow them?&lt;/p&gt;\n    ","\n&lt;p&gt;From my own experience, it&apos;s hard to find a simple explanation why CORS is even a concern.&lt;/p&gt;\n&lt;p&gt;Once you understand why it&apos;s there, the headers and discussion becomes a lot clearer.  I&apos;ll give it a shot in a few lines.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;It&apos;s all about cookies. Cookies are stored on a client by their domain.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An example story: On your computer, there&apos;s a cookie for &lt;code&gt;yourbank.com&lt;/code&gt;. Maybe your session is in there.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Key point:&lt;/strong&gt; When a client makes a request to the server, it will send the cookies stored under the domain for that request.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;You&apos;re logged in on your browser to &lt;code&gt;yourbank.com&lt;/code&gt;.  You request to see all your accounts, and cookies are sent for &lt;code&gt;yourbank.com&lt;/code&gt;.  &lt;code&gt;yourbank.com&lt;/code&gt; receives the pile of cookies and sends back its response (your accounts).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;If another client makes a &lt;em&gt;cross origin&lt;/em&gt; request to a server, those cookies are sent along, just as before.  Ruh roh.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;You browse to &lt;code&gt;malicious.com&lt;/code&gt;. Malicious makes a bunch of requests to different banks, including &lt;code&gt;yourbank.com&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Since the cookies are validated as expected, the server will authorize the response.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Those cookies get gathered up and sent along - and now, &lt;code&gt;malicious.com&lt;/code&gt; has a response from &lt;code&gt;yourbank&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Yikes.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;So now, a few questions and answers become apparent:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&quot;Why don&apos;t we just block the browser from doing that?&quot; Yep. CORS.&lt;/li&gt;\n&lt;li&gt;&quot;How do we get around it?&quot; Have the server tell the request that CORS is OK.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;em&gt;1. A client downloads javascript code MyCode.js from &lt;a href=&quot;http://siteA&quot; rel=&quot;noreferrer&quot;&gt;http://siteA&lt;/a&gt; - the origin.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;The code that does the downloading - your html script tag or xhr from javascript or whatever - came from, let&apos;s say, &lt;a href=&quot;http://siteZ&quot; rel=&quot;noreferrer&quot;&gt;http://siteZ&lt;/a&gt;.  And, when the browser requests MyCode.js, it sends an Origin: header saying &quot;Origin: &lt;a href=&quot;http://siteZ&quot; rel=&quot;noreferrer&quot;&gt;http://siteZ&lt;/a&gt;&quot;, because it can see that you&apos;re requesting to siteA and siteZ != siteA.  (You cannot stop or interfere with this.)&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;2. The response header of MyCode.js contains Access-Control-Allow-Origin: &lt;a href=&quot;http://siteB&quot; rel=&quot;noreferrer&quot;&gt;http://siteB&lt;/a&gt;, which I thought meant that MyCode.js was allowed to make cross-origin references to the site B.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;no.  It means, Only siteB is allowed to do this request.  So your request for MyCode.js from siteZ gets an error instead, and the browser typically gives you nothing.  But if you make your server return A-C-A-O: siteZ instead, you&apos;ll get MyCode.js .  Or if it sends &apos;*&apos;, that&apos;ll work, that&apos;ll let everybody in.  Or if the server always sends the string from the Origin: header... but... for security, if you&apos;re afraid of hackers, your server should only allow origins on a shortlist, that are allowed to make those requests.&lt;/p&gt;\n\n&lt;p&gt;Then, MyCode.js comes from siteA.  When it makes requests to siteB, they are all cross-origin, the browser sends Origin: siteA, and siteB has to take the siteA, recognize it&apos;s on the short list of allowed requesters, and send back A-C-A-O: siteA.  Only then will the browser let your script get the result of those requests.&lt;/p&gt;\n    ","\n&lt;p&gt;Using &lt;strong&gt;React&lt;/strong&gt; and &lt;strong&gt;Axios&lt;/strong&gt;, join proxy link to the URL and add header as shown below&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;https://cors-anywhere.herokuapp.com/&lt;/code&gt; + &lt;code&gt;Your API URL&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Just by adding the Proxy link will work, but it can also throw error for No Access again. Hence better to add header as shown below.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;axios.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`https://cors-anywhere.herokuapp.com/[YOUR_API_URL]`&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;headers&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;Access-Control-Allow-Origin&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;}})\n      .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;response&lt;/span&gt;:data);\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;WARNING: Not to be used in Production&lt;/h1&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This is just a quick fix, if you&apos;re struggling with why you&apos;re not able to get a response, you CAN use this.\n  But again it&apos;s &lt;strong&gt;not the best answer for production.&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Got several downvotes and it completely makes sense, I should have added the warning a long time ago.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;If you want just to test a cross domain application in which the browser blocks your request, then you can just open your browser in unsafe mode and test your application without changing your code and without making your code unsafe.\nFrom MAC OS you can do this from the terminal line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;open -a &lt;span class=&quot;hljs-title class_&quot;&gt;Google&lt;/span&gt;\\ &lt;span class=&quot;hljs-title class_&quot;&gt;Chrome&lt;/span&gt; --args --disable-web-security --user-data-dir\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you are using PHP, try adding the following code at the beginning of the php file:&lt;/p&gt;\n\n&lt;p&gt;If you are using localhost, try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;header&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access-Control-Allow-Origin: *&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you are using external domains such as server, try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;header&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access-Control-Allow-Origin: http://www.website.com&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I work with express 4 and node 7.4 and angular,I had the same problem me help this:&lt;br&gt;\na) server side: in file app.js I give headers to all response like:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;app.&lt;span class=&quot;hljs-title function_&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;req, res, next&lt;/span&gt;) {  \n      res.&lt;span class=&quot;hljs-title function_&quot;&gt;header&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Access-Control-Allow-Origin&apos;&lt;/span&gt;, req.&lt;span class=&quot;hljs-property&quot;&gt;headers&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;origin&lt;/span&gt;);\n      res.&lt;span class=&quot;hljs-title function_&quot;&gt;header&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access-Control-Allow-Headers&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Origin, X-Requested-With, Content-Type, Accept&quot;&lt;/span&gt;);\n      &lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;();\n });  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;this must have before all router&lt;/strong&gt;.&lt;br&gt;\nI saw a lot of added this headers:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;res.&lt;span class=&quot;hljs-title function_&quot;&gt;header&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access-Control-Allow-Headers&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;);\nres.&lt;span class=&quot;hljs-title function_&quot;&gt;header&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Access-Control-Allow-Credentials&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\nres.&lt;span class=&quot;hljs-title function_&quot;&gt;header&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Access-Control-Allow-Methods&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;GET,PUT,POST,DELETE&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;but i dont need that,&lt;br&gt;\nb) client side: in send ajax you need add: &quot;withCredentials: true,&quot; like:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$http({\n     &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;url, \n     withCredentials: true,\n     data : {}\n   }).then(function(response){\n        // code  \n   }, function (response) {\n         // code \n   });\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Python I have been using the &lt;a href=&quot;https://flask-cors.readthedocs.io/en/latest/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Flask-CORS&lt;/code&gt; library&lt;/a&gt; with great success. It makes dealing with CORS super easy and painless. I added some code from the library&apos;s documentation below. &lt;/p&gt;\n\n&lt;p&gt;Installing:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$ pip install -U flask-cors\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Simple example that allows CORS for all domains on all routes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Flask&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask_cors &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;CORS&lt;/span&gt;\n\napp = &lt;span class=&quot;hljs-title class_&quot;&gt;Flask&lt;/span&gt;(__name__)\n&lt;span class=&quot;hljs-title function_&quot;&gt;CORS&lt;/span&gt;(app)\n\n@app.&lt;span class=&quot;hljs-title function_&quot;&gt;route&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;)\ndef &lt;span class=&quot;hljs-title function_&quot;&gt;helloWorld&lt;/span&gt;():\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello, cross-origin-world!&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more specific examples see the documentation. I have used the simple example above to get around the CORS issue in an ionic application I am building that has to access a separate flask server.&lt;/p&gt;\n    ","\n&lt;p&gt;For cross origin sharing, set header: &lt;code&gt;&apos;Access-Control-Allow-Origin&apos;:&apos;*&apos;;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Php: &lt;code&gt;header(&apos;Access-Control-Allow-Origin&apos;:&apos;*&apos;);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Node: &lt;code&gt;app.use(&apos;Access-Control-Allow-Origin&apos;:&apos;*&apos;);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;This will allow to share content for different domain.&lt;/p&gt;\n    ","\n&lt;p&gt;Simply paste the following code in your web.config file.&lt;/p&gt;\n\n&lt;p&gt;Noted that, you have to paste the following code under &lt;code&gt;&amp;lt;system.webServer&amp;gt;&lt;/code&gt; tag&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &amp;lt;httpProtocol&amp;gt;  \n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;customHeaders&lt;/span&gt;&amp;gt;&lt;/span&gt;  \n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access-Control-Allow-Origin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;  \n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access-Control-Allow-Headers&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;  \n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access-Control-Allow-Methods&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;GET, POST, PUT, DELETE, OPTIONS&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;  \n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;customHeaders&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;  \n  &amp;lt;/httpProtocol&amp;gt;  \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I can&apos;t configure it in back-end server but with these extensions in browsers work for me:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;For Firefox:&lt;/strong&gt;\n&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/cors-everywhere/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Cors Everywhere&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;For Google Chrome:&lt;/strong&gt;\n&lt;a href=&quot;https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf?hl=en-US&quot; rel=&quot;nofollow noreferrer&quot;&gt;Allow CORS: Access-Control-Allow-Origin&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Note: CORS work for me with this configuration:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/eDD7P.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/eDD7P.jpg&quot; alt=&quot;Allow CORS options&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/27QWb.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/27QWb.jpg&quot; alt=&quot;CORS Everywhere options&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h1&gt;Nginx and Appache&lt;/h1&gt;\n&lt;p&gt;As addition to &lt;a href=&quot;https://stackoverflow.com/a/10636765/860099&quot;&gt;apsillers answer&lt;/a&gt; I would like to add &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing#How_CORS_works&quot; rel=&quot;nofollow noreferrer&quot;&gt;wiki graph&lt;/a&gt; which shows when request is simple or not (and OPTIONS pre-flight request is send or not)&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/BTFel.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/BTFel.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;For simple request (e.g. &lt;a href=&quot;https://en.wikipedia.org/wiki/Inline_linking&quot; rel=&quot;nofollow noreferrer&quot;&gt;hotlinking images&lt;/a&gt;) you don&apos;t need to change your server configuration files but you can add headers in application (hosted on server, e.g. in php) like Melvin Guerrero mention in his &lt;a href=&quot;https://stackoverflow.com/a/41723271/860099&quot;&gt;answer&lt;/a&gt; - but &lt;a href=&quot;https://stackoverflow.com/a/46917668/860099&quot;&gt;remember&lt;/a&gt;: if you add full cors headers in you server (config) and at same time you allow simple cors on application (e.g. php) this will not work at all.&lt;/p&gt;\n&lt;p&gt;And here are configurations for two popular servers&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;turn on &lt;strong&gt;CORS on Nginx&lt;/strong&gt; (&lt;code&gt;nginx.conf&lt;/code&gt; file)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;location ~ ^&lt;span class=&quot;hljs-regexp&quot;&gt;/index\\.php(/&lt;/span&gt;|$) {\n   ...\n    add_header &lt;span class=&quot;hljs-string&quot;&gt;&apos;Access-Control-Allow-Origin&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;$http_origin&quot;&lt;/span&gt; always; # &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; you change &lt;span class=&quot;hljs-string&quot;&gt;&quot;$http_origin&quot;&lt;/span&gt; to &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; you shoud get same result - allow all domain to &lt;span class=&quot;hljs-variable constant_&quot;&gt;CORS&lt;/span&gt; (but better change it to your particular domain)\n    add_header &lt;span class=&quot;hljs-string&quot;&gt;&apos;Access-Control-Allow-Credentials&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;true&apos;&lt;/span&gt; always;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ($request_method = &lt;span class=&quot;hljs-variable constant_&quot;&gt;OPTIONS&lt;/span&gt;) {\n        add_header &lt;span class=&quot;hljs-string&quot;&gt;&apos;Access-Control-Allow-Origin&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;$http_origin&quot;&lt;/span&gt;; # &lt;span class=&quot;hljs-variable constant_&quot;&gt;DO&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;NOT&lt;/span&gt; remove &lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;LINES&lt;/span&gt; (doubled &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; outside &lt;span class=&quot;hljs-string&quot;&gt;&apos;if&apos;&lt;/span&gt; above)\n        add_header &lt;span class=&quot;hljs-string&quot;&gt;&apos;Access-Control-Allow-Credentials&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;true&apos;&lt;/span&gt;;\n        add_header &lt;span class=&quot;hljs-string&quot;&gt;&apos;Access-Control-Max-Age&apos;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1728000&lt;/span&gt;; # cache preflight value &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; days\n        add_header &lt;span class=&quot;hljs-string&quot;&gt;&apos;Access-Control-Allow-Methods&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;GET, POST, OPTIONS&apos;&lt;/span&gt;;  # arbitrary methods\n        add_header &lt;span class=&quot;hljs-string&quot;&gt;&apos;Access-Control-Allow-Headers&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;My-First-Header,My-Second-Header,Authorization,Content-Type,Accept,Origin&apos;&lt;/span&gt;; # arbitrary headers\n        add_header &lt;span class=&quot;hljs-string&quot;&gt;&apos;Content-Length&apos;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        add_header &lt;span class=&quot;hljs-string&quot;&gt;&apos;Content-Type&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;text/plain charset=UTF-8&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;204&lt;/span&gt;;\n    }\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;turn on &lt;strong&gt;CORS on Appache&lt;/strong&gt; (&lt;code&gt;.htaccess&lt;/code&gt; file)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;# ------------------------------------------------------------------------------\n# | &lt;span class=&quot;hljs-title class_&quot;&gt;Cross&lt;/span&gt;-domain &lt;span class=&quot;hljs-title class_&quot;&gt;Ajax&lt;/span&gt; requests                                                 |\n# ------------------------------------------------------------------------------\n\n# &lt;span class=&quot;hljs-title class_&quot;&gt;Enable&lt;/span&gt; cross-origin &lt;span class=&quot;hljs-title class_&quot;&gt;Ajax&lt;/span&gt; requests.\n# &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//code.google.com/p/html5security/wiki/CrossOriginRequestSecurity&lt;/span&gt;\n# &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//enable-cors.org/&lt;/span&gt;\n\n# change * (allow any domain) below to your domain\n&lt;span class=&quot;hljs-title class_&quot;&gt;Header&lt;/span&gt; set &lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Origin&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Header&lt;/span&gt; always set &lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Methods&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST, GET, OPTIONS, DELETE, PUT&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Header&lt;/span&gt; always set &lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Headers&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;My-First-Header,My-Second-Header,Authorization, content-type, csrf-token&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Header&lt;/span&gt; always set &lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Credentials&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;The Access-Control-Allow-Origin response header indicates whether the\n  response can be shared with requesting code from the given origin.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Header&lt;/span&gt; type &lt;span class=&quot;hljs-title class_&quot;&gt;Response&lt;/span&gt;       header\n&lt;span class=&quot;hljs-title class_&quot;&gt;Forbidden&lt;/span&gt; header name      no\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A response that tells the browser to allow code from any origin to\n  access a resource will include the following:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Access&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Control&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Allow&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Origin&lt;/span&gt;: *\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more info, visit &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;....&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;ONLY TEMPORARY SOLUTION for Testing:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Who can&apos;t control backend for &lt;code&gt;Options 405 Method Not Allowed&lt;/code&gt;.&lt;br&gt;\nWorkaround for Chrome browser.&lt;br&gt;\nexecute in command line:&lt;br&gt;\n&lt;code&gt;&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot; --disable-web-security --user-data-dir=&quot;path_to_profile&quot;&lt;/code&gt;&lt;br&gt;\nExample:&lt;br&gt;\n&lt;code&gt;&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot; --disable-web-security --user-data-dir=&quot;C:\\Users\\vital\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 2&quot;&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;For .NET Core 3.1 API With Angular&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Startup.cs&lt;/strong&gt; : Add CORS&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;//SERVICES&lt;/span&gt;\n    public &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ConfigureServices&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;IServiceCollection&lt;/span&gt; services){\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//CORS (Cross Origin Resource Sharing)&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//=====================================&lt;/span&gt;\n        services.&lt;span class=&quot;hljs-title class_&quot;&gt;AddCors&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//MIDDLEWARES&lt;/span&gt;\n    public &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Configure&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;IApplicationBuilder&lt;/span&gt; app, &lt;span class=&quot;hljs-title class_&quot;&gt;IWebHostEnvironment&lt;/span&gt; env)\n    {\n        app.&lt;span class=&quot;hljs-title class_&quot;&gt;UseRouting&lt;/span&gt;();\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//ORDER: CORS -&amp;gt; Authentication -&amp;gt; Authorization)&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//CORS (Cross Origin Resource Sharing)&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//=====================================  &lt;/span&gt;\n        app.&lt;span class=&quot;hljs-title class_&quot;&gt;UseCors&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;=&amp;gt;&lt;/span&gt;x.&lt;span class=&quot;hljs-title class_&quot;&gt;AllowAnyHeader&lt;/span&gt;().&lt;span class=&quot;hljs-title class_&quot;&gt;AllowAnyMethod&lt;/span&gt;().&lt;span class=&quot;hljs-title class_&quot;&gt;WithOrigins&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:4200&quot;&lt;/span&gt;));\n\n        app.&lt;span class=&quot;hljs-title class_&quot;&gt;UseHttpsRedirection&lt;/span&gt;();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Controller&lt;/strong&gt; : Enable CORS For Authorized Controller&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//Authorize all methods inside this controller&lt;/span&gt;\n [&lt;span class=&quot;hljs-title class_&quot;&gt;Authorize&lt;/span&gt;]\n [&lt;span class=&quot;hljs-title class_&quot;&gt;EnableCors&lt;/span&gt;()]\n public &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UsersController&lt;/span&gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;ControllerBase&lt;/span&gt;\n {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//ActionMethods&lt;/span&gt;\n }\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"collision-detection","slug":"collision-detection"},{"name":"oop","slug":"oop"},{"name":"jakarta-mail","slug":"jakarta-mail"},{"name":"ecmascript-5","slug":"ecmascript-5"},{"name":"abi","slug":"abi"},{"name":"error-reporting","slug":"error-reporting"},{"name":"shell","slug":"shell"},{"name":"pcre","slug":"pcre"},{"name":"bcrypt","slug":"bcrypt"},{"name":"match","slug":"match"},{"name":"dictionary","slug":"dictionary"},{"name":"react-hooks","slug":"react-hooks"},{"name":"asp.net-mvc-4","slug":"asp.net-mvc-4"},{"name":"magic-methods","slug":"magic-methods"},{"name":"flexbox","slug":"flexbox"},{"name":"c-strings","slug":"c-strings"},{"name":"height","slug":"height"},{"name":"selenium","slug":"selenium"},{"name":"http","slug":"http"},{"name":"python-datamodel","slug":"python-datamodel"}]},"__N_SSG":true}