{"pageProps":{"data":{"count":1,"rows":[{"id":222,"title":"Accessing nested JavaScript objects and arrays by string path","slug":"accessing-nested-javascript-objects-and-arrays-by-string-path-1657387321754","postType":"QUESTION","createdAt":"2022-07-09T17:22:01.000Z","updatedAt":"2022-07-09T17:22:01.000Z","tags":[{"id":1517,"name":"path","slug":"path","createdAt":"2022-07-09T17:22:01.000Z","updatedAt":"2022-07-09T17:22:01.000Z","Questions_Tags":{"questionId":222,"tagId":1517}}]}]},"slug":"path","page":1,"answers":{"222":["\n&lt;p&gt;I just made this based on some similar code I already had, it appears to work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;byString&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o, s&lt;/span&gt;) {\n    s = s.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\[(\\w+)\\]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.$1&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// convert indexes to properties&lt;/span&gt;\n    s = s.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/^\\./&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);           &lt;span class=&quot;hljs-comment&quot;&gt;// strip a leading dot&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = s.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, n = a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; n; ++i) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k = a[i];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; o) {\n            o = o[k];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage::&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;byString&lt;/span&gt;(someObj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;part3[0].name&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See a working demo at &lt;a href=&quot;http://jsfiddle.net/alnitak/hEsys/&quot;&gt;http://jsfiddle.net/alnitak/hEsys/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; some have noticed that this code will throw an error if passed a string where the left-most indexes don&apos;t correspond to a correctly  nested entry within the object.  This is a valid concern, but IMHO best addressed with a &lt;code&gt;try / catch&lt;/code&gt; block when calling, rather than having this function silently return &lt;code&gt;undefined&lt;/code&gt; for an invalid index.&lt;/p&gt;\n    ","\n&lt;p&gt;This is now supported by lodash using &lt;code&gt;_.get(obj, property)&lt;/code&gt;. See &lt;a href=&quot;https://lodash.com/docs#get&quot;&gt;https://lodash.com/docs#get&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Example from the docs:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object = { &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: [{ &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: { &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; } }] };\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(object, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a[0].b.c&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//  3&lt;/span&gt;\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(object, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-comment&quot;&gt;//  3&lt;/span&gt;\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(object, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b.c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;default&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;default&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is the solution I use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, obj=self, separator=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; properties = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(path) ? path : path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(separator)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; properties.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;prev, curr&lt;/span&gt;) =&amp;gt;&lt;/span&gt; prev &amp;amp;&amp;amp; prev[curr], obj)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// accessing property path on global scope&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;document.body.style.width&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;// or&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;style.width&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// accessing array indexes&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (someObject has been defined in the question)&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;part3.0.size&quot;&lt;/span&gt;, someObject) &lt;span class=&quot;hljs-comment&quot;&gt;// returns &apos;10&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// accessing non-existent properties&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// returns undefined when intermediate properties are not defined:&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;properties.that.do.not.exist&apos;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;hello&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;})\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// accessing properties with unusual keys by changing the separator&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { &lt;span class=&quot;hljs-attr&quot;&gt;object&lt;/span&gt;: { &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.property.name.with.periods&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt; } }\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;object-&amp;gt;a.property.name.with.periods&apos;&lt;/span&gt;, obj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&amp;gt;&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// returns 42&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// accessing properties with unusual keys by passing a property name array&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.property.name.with.periods&apos;&lt;/span&gt;], obj) &lt;span class=&quot;hljs-comment&quot;&gt;// returns 42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Limitations:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Can&apos;t use brackets (&lt;code&gt;[]&lt;/code&gt;) for array indicesthough specifying array indices between the separator token (e.g., &lt;code&gt;.&lt;/code&gt;) works fine as shown above. &lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;ES6&lt;/strong&gt;: Only one line in Vanila JS (it return null if don&apos;t find instead of giving error):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;path.string&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;)=&amp;gt;&lt;/span&gt;p&amp;amp;&amp;amp;p[c]||&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;MyOBJ&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b.c&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;)=&amp;gt;&lt;/span&gt;p&amp;amp;&amp;amp;p[c]||&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}}})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;With Optional chaining operator&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b.c&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;)=&amp;gt;&lt;/span&gt;p?.[c], {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}}})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For a ready to use function that also recognizes false, 0 and negative number and accept default values as parameter:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;object, path, defaultValue&lt;/span&gt;) =&amp;gt; path\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o, p&lt;/span&gt;) =&amp;gt;&lt;/span&gt; o ? o[p] : defaultValue, object)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example to use:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;document.body&apos;&lt;/span&gt;) =&amp;gt; &amp;lt;body&amp;gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;document.body.xyz&apos;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;document.body.xyz&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;document.body.xyz&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Bonus&lt;/em&gt;:&lt;/p&gt;\n&lt;p&gt;To &lt;strong&gt;set&lt;/strong&gt; a path (Requested by @rob-gordon) you can use:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setPath&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;object, path, value&lt;/span&gt;) =&amp;gt; path\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o,p,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; o[p] = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === ++i ? value : o[p] || {}, object)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; myVar = {}\n&lt;span class=&quot;hljs-title function_&quot;&gt;setPath&lt;/span&gt;(myVar, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b.c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myVar) =&amp;gt; {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;}}}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Access array with []&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;object, path, defaultValue&lt;/span&gt;) =&amp;gt; path\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[\\.\\[\\]\\&apos;\\&quot;]/&lt;/span&gt;)\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;p&lt;/span&gt; =&amp;gt;&lt;/span&gt; p)\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o, p&lt;/span&gt;) =&amp;gt;&lt;/span&gt; o ? o[p] : defaultValue, object)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myVar = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:[{&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}]}}\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt;(myVar,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b[0].c&apos;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolvePath&lt;/span&gt;(myVar,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a[&quot;b&quot;][\\&apos;0\\&apos;].c&apos;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You&apos;d have to parse the string yourself:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getProperty&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, prop&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parts = prop.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(parts)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; last = parts.&lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;(),\n        l = parts.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;,\n        i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n        current = parts[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((obj = obj[current]) &amp;amp;&amp;amp; i &amp;lt; l) {\n            current = parts[i];\n            i++;\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(obj) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj[last];\n        }\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;parts is not valid array&apos;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This required that you also define array indexes with dot notation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part3name1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;part3.0.name&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It makes the parsing easier.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/fkling/WmYEX/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;DEMO&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Works for arrays / arrays inside the object also.\nDefensive against invalid values.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Retrieve nested item from object/array\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;Object|Array&lt;/span&gt;} &lt;span class=&quot;hljs-variable&quot;&gt;obj&lt;/span&gt;\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;} path dot separated\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;*&lt;/span&gt;} def default value ( if result undefined )\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@returns&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;*&lt;/span&gt;}\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;path&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path, def&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i, len;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,path = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;), len = path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; len; i++){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!obj || &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; def;\n        obj = obj[path[i]];\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(obj === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; def;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//////////////////////////&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//         TEST         //&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//////////////////////////&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;sp ace&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;sp ace&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;arr&lt;/span&gt;: arr,\n  &lt;span class=&quot;hljs-attr&quot;&gt;nested&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;dotted.str.ing&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;},\n  &lt;span class=&quot;hljs-attr&quot;&gt;arr3&lt;/span&gt;: arr\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;shouldThrow&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`path(obj, &quot;arr.0&quot;)`&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;shouldBeDefined&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`path(obj, &quot;arr[0]&quot;)`&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;shouldBeEqualToNumber&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`path(obj, &quot;arr.length&quot;)`&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;shouldBeTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`path(obj, &quot;sp ace&quot;)`&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;shouldBeEqualToString&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`path(obj, &quot;none.existed.prop&quot;, &quot;fallback&quot;)`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;fallback&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;shouldBeTrue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`path(obj, &quot;nested[&apos;dotted.str.ing&apos;])`&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://cdn.rawgit.com/coderek/e7b30bac7634a50ad8fd/raw/174b6634c8f57aa8aac0716c5b7b2a7098e03584/js-test.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;using eval:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part1name = &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;someObject.part1.name&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;wrap to return undefined on error&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;path&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obj.&quot;&lt;/span&gt; + path);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/shanimal/b3xTw/&quot;&gt;http://jsfiddle.net/shanimal/b3xTw/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Please use common sense and caution when wielding the power of eval. It&apos;s a bit like a light saber, if you turn it on there&apos;s a 90% chance you&apos;ll sever a limb. Its not for everybody.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This will probably never see the light of day... but here it is anyway.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Replace &lt;code&gt;[]&lt;/code&gt; bracket syntax with &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Split on &lt;code&gt;.&lt;/code&gt; character&lt;/li&gt;\n&lt;li&gt;Remove blank strings&lt;/li&gt;\n&lt;li&gt;Find the path (otherwise &lt;code&gt;undefined&lt;/code&gt;)&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;(For finding a path to an object, use this &lt;a href=&quot;https://stackoverflow.com/a/64696750/782034&quot;&gt;&lt;code&gt;pathTo&lt;/code&gt;&lt;/a&gt; solution.)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;one liner&quot; (ES6)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deep_value&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) =&amp;gt; \npath\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\[|\\]\\.?/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt; =&amp;gt;&lt;/span&gt; s)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;acc, val&lt;/span&gt;) =&amp;gt;&lt;/span&gt; acc &amp;amp;&amp;amp; acc[val], obj);\n    \n&lt;span class=&quot;hljs-comment&quot;&gt;// ... and that&apos;s it.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someObject = {\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;part1&apos;&lt;/span&gt; : {\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Part 1&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;20&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;50&apos;&lt;/span&gt;\n    },\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;part2&apos;&lt;/span&gt; : {\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Part 2&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;15&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;60&apos;&lt;/span&gt;\n    },\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;part3&apos;&lt;/span&gt; : [\n        {\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Part 3A&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;20&apos;&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    ],\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;pa[rt3&apos;&lt;/span&gt; : [\n        {\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Part 3A&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;20&apos;&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    ]\n};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;deep_value&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&quot;part1.name&quot;&lt;/span&gt;));               &lt;span class=&quot;hljs-comment&quot;&gt;// Part 1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;deep_value&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&quot;part2.qty&quot;&lt;/span&gt;));                &lt;span class=&quot;hljs-comment&quot;&gt;// 60&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;deep_value&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&quot;part3[0].name&quot;&lt;/span&gt;));            &lt;span class=&quot;hljs-comment&quot;&gt;// Part 3A&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;deep_value&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&quot;part3[0].....name&quot;&lt;/span&gt;));        &lt;span class=&quot;hljs-comment&quot;&gt;// Part 3A - invalid blank paths removed&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;deep_value&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pa[rt3[0].name&quot;&lt;/span&gt;));           &lt;span class=&quot;hljs-comment&quot;&gt;// undefined - name does not support square brackets&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can manage to obtain the value of a deep object member with dot notation without any external JavaScript library with the following simple trick:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objectGet&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;return _.&apos;&lt;/span&gt; + path)(obj); };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In your case to obtain value of &lt;code&gt;part1.name&lt;/code&gt; from &lt;code&gt;someObject&lt;/code&gt; just do:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;objectGet&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&apos;part1.name&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here is a simple fiddle demo: &lt;a href=&quot;https://jsfiddle.net/harishanchu/oq5esowf/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://jsfiddle.net/harishanchu/oq5esowf/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s a one liner with lodash.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; deep = { &lt;span class=&quot;hljs-attr&quot;&gt;l1&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;l2&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;l3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt; } } };\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; prop = &lt;span class=&quot;hljs-string&quot;&gt;&quot;l1.l2.l3&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; val = _.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(prop.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result, value&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result ? result[value] : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;; }, deep);\n&lt;span class=&quot;hljs-comment&quot;&gt;// val === &quot;Hello&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or even better...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; val = _.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(deep, prop);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or ES6 version w/ reduce...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; val = prop.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;r, val&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r ? r[val] : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;; }, deep);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://plnkr.co/edit/NKb6SE&quot; rel=&quot;noreferrer&quot; title=&quot;Plunkr&quot;&gt;Plunkr&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I think you are asking for this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part1name = someObject.&lt;span class=&quot;hljs-property&quot;&gt;part1&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part2quantity = someObject.&lt;span class=&quot;hljs-property&quot;&gt;part2&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;qty&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part3name1 =  someObject.&lt;span class=&quot;hljs-property&quot;&gt;part3&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You could be asking for this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part1name = someObject[&lt;span class=&quot;hljs-string&quot;&gt;&quot;part1&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part2quantity = someObject[&lt;span class=&quot;hljs-string&quot;&gt;&quot;part2&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;qty&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part3name1 =  someObject[&lt;span class=&quot;hljs-string&quot;&gt;&quot;part3&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both of which will work&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Or maybe you are asking for this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; partName = &lt;span class=&quot;hljs-string&quot;&gt;&quot;part1&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nameStr = &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part1name = someObject[partName][nameStr];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Finally you could be asking for this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; partName = &lt;span class=&quot;hljs-string&quot;&gt;&quot;part1.name&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; partBits = partName.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part1name = someObject[partBits[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]][partBits[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just in case, anyone&apos;s visiting this question in 2017 or later and looking for an &lt;strong&gt;easy-to-remember&lt;/strong&gt; way, here&apos;s an elaborate blog post on &lt;a href=&quot;https://dev.to/flexdinesh/accessing-nested-objects-in-javascript--9m4&quot; rel=&quot;noreferrer&quot;&gt;Accessing Nested Objects in JavaScript&lt;/a&gt; without being bamboozled by &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Cannot read property &apos;foo&apos; of undefined&lt;/em&gt; error&lt;/p&gt;\n\n&lt;h2&gt;Access Nested Objects Using Array Reduce&lt;/h2&gt;\n\n&lt;p&gt;Let&apos;s take this example structure&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; user = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;email&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;jack@dev.com&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;personalInfo&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;address&lt;/span&gt;: [{\n            &lt;span class=&quot;hljs-attr&quot;&gt;line1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;westwish st&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;line2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;washmasher&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;city&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;wallas&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;state&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;WX&apos;&lt;/span&gt;\n        }]\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To be able to access nested arrays, you can write your own array reduce util.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getNestedObject&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;nestedObj, pathArr&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pathArr.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, key&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n        (obj &amp;amp;&amp;amp; obj[key] !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;undefined&apos;&lt;/span&gt;) ? obj[key] : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;, nestedObj);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// pass in your object structure as array elements&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; name = &lt;span class=&quot;hljs-title function_&quot;&gt;getNestedObject&lt;/span&gt;(user, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;personalInfo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// to access nested array, just pass in array index as an element the path array.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; city = &lt;span class=&quot;hljs-title function_&quot;&gt;getNestedObject&lt;/span&gt;(user, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;personalInfo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;address&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;city&apos;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-comment&quot;&gt;// this will return the city from the first address item.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is also an excellent type handling minimal library &lt;a href=&quot;https://www.npmjs.com/package/typy&quot; rel=&quot;noreferrer&quot;&gt;typy&lt;/a&gt; that does all this for you.&lt;/p&gt;\n\n&lt;p&gt;With typy, your code will look like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; city = &lt;span class=&quot;hljs-title function_&quot;&gt;t&lt;/span&gt;(user, &lt;span class=&quot;hljs-string&quot;&gt;&apos;personalInfo.address[0].city&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;safeObject&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Disclaimer: I am the author of this package.&lt;/p&gt;\n    ","\n&lt;p&gt;Here I offer more ways, which seem faster in many respects:&lt;/p&gt;\n\n&lt;p&gt;Option 1: Split string on . or [ or ] or &apos; or &quot;, reverse it, skip empty items.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, origin&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (origin === &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || origin === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) origin = self ? self : &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; path !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;) path = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; + path;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parts = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\[|\\]|\\.|&apos;|&quot;/g&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reverse&lt;/span&gt;(), name; &lt;span class=&quot;hljs-comment&quot;&gt;// (why reverse? because it&apos;s usually faster to pop off the end of an array)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (parts.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) { name=parts.&lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;(); &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (name) origin=origin[name]; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; origin;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Option 2 (fastest of all, except &lt;code&gt;eval&lt;/code&gt;): Low level character scan (no regex/split/etc, just a quick char scan).\n&lt;em&gt;Note:  This one does not support quotes for indexes.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, origin&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (origin === &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || origin === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) origin = self ? self : &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; path !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;) path = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; + path;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, pc, i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, n = path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (n) &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i&amp;lt;=n) ((c = path[i++]) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) ? (name?(origin = origin[name], name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;):(pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;||pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;||pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;&amp;amp;&amp;amp;c==&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;?i=n+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;),pc=c) : name += c;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i==n+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid path: &quot;&lt;/span&gt;+path;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; origin;\n} &lt;span class=&quot;hljs-comment&quot;&gt;// (around 1,000,000+/- ops/sec)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Option 3: &lt;em&gt;(&lt;strong&gt;new&lt;/strong&gt;: option 2 expanded to support quotes - a bit slower, but still fast)&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, origin&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (origin === &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || origin === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) origin = self ? self : &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; path !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;) path = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; + path;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c, pc, i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, n = path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, q;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i&amp;lt;=n)\n        ((c = path[i++]) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) ? (c==q&amp;amp;&amp;amp;path[i]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;?q=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;:q?name+=&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:name?(origin?origin=origin[name]:i=n+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,name=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) : (pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;&amp;amp;&amp;amp;(c==&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;||c==&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;)?q=&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;||pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;||pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;&amp;amp;&amp;amp;c==&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;||pc==&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;||pc==&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;?i=n+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), pc=c) : name += c;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i==n+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; || name) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid path: &quot;&lt;/span&gt;+path;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; origin;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;JSPerf: &lt;a href=&quot;http://jsperf.com/ways-to-dereference-a-delimited-property-string/3&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://jsperf.com/ways-to-dereference-a-delimited-property-string/3&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&quot;eval(...)&quot; is still king though (performance wise that is).  If you have property paths directly under your control, there shouldn&apos;t be any issues with using &apos;eval&apos; (especially if speed is desired).  If pulling property paths &quot;over the wire&quot; (&lt;a href=&quot;https://www.youtube.com/watch?v=CewJ-ihIqaM&quot; rel=&quot;nofollow noreferrer&quot;&gt;on the line&lt;/a&gt;!? lol :P), then yes, use something else to be safe.  Only an idiot would say to never use &quot;eval&quot; at all, as there &lt;a href=&quot;https://stackoverflow.com/questions/1594023/what-is-the-intended-purpose-of-eval-in-javascript?lq=1&quot;&gt;ARE good reasons&lt;/a&gt; when to use it.  Also, &quot;It is used in &lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/json2.js&quot; rel=&quot;nofollow noreferrer&quot;&gt;Doug Crockford&apos;s JSON parser&lt;/a&gt;.&quot; If the input is safe, then no problems at all.  Use the right tool for the right job, that&apos;s it.&lt;/p&gt;\n    ","\n&lt;p&gt;Instead of trying to emulate JS syntax which you will have to spend a bunch of compute parsing, or just get wrong/forget things like a bunch of these answers (keys with &lt;code&gt;.&lt;/code&gt;s in, anyone?), just use an array of keys.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part1name     = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(someObject, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;part1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part2quantity = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(someObject, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;part2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;qty&apos;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; part3name1    = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(someObject, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;part3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/fIYeT.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/fIYeT.png&quot; alt=&quot;answer&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;If you need to use a single string instead, simply JSONify it.&lt;br&gt;\nAnother improvement in this method is that you can delete/set the root level object.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; root = obj = [obj];\n    path = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, ...path];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        obj = obj[path.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;()];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [obj, path[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], root];\n}\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;get&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; [parent, key] = &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(obj, path);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; parent[key];\n};\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;del&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; [parent, key, root] = &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(obj, path);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; parent[key];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; root[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n};\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;set&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path, value&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; [parent, key, root] = &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(obj, path);\n    parent[key] = value;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; root[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Demo of other features:&lt;br&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/jClRZ.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/jClRZ.png&quot; alt=&quot;demonstration&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;bob = &lt;/code&gt; for &lt;code&gt;.set(&lt;/code&gt;/&lt;code&gt;.del(&lt;/code&gt; isn&apos;t necessary unless your path might be empty (manipulating the root object).&lt;br&gt;\nI prove that I don&apos;t clone the object by using &lt;code&gt;steve&lt;/code&gt; to keep a reference to the original and checking &lt;code&gt;bob == steve //true&lt;/code&gt; after that first &lt;code&gt;.set(&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;AngularJS&lt;/h2&gt;\n&lt;p&gt;Speigg&apos;s approach is very neat and clean, though I found this reply while searching for the solution of accessing AngularJS $scope properties by string path and with a little modification it does the job:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$scope.&lt;span class=&quot;hljs-property&quot;&gt;resolve&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; path, obj &lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; prev, curr &lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; prev[curr];\n    }, obj || &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; );\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Just place this function in your root controller and use it any child scope like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$scope.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&apos;path.to.any.object.in.scope&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Access a deep value inside a object \n * Works by passing a path like &quot;foo.bar&quot;, also works with nested arrays like &quot;foo[0][1].baz&quot;\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@author&lt;/span&gt; Victor B. https://gist.github.com/victornpb/4c7882c1b9d36292308e\n * Unit tests: http://jsfiddle.net/Victornpb/0u1qygrh/\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj === &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt; || obj === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    path = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[\\.\\[\\]\\&quot;\\&apos;]{1,2}/&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, l = path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; l; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (path[i] === &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n        obj = obj[path[i]];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj === &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt; || obj === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Works with&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo.bar&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo.1.bar&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo[0].baz&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo[1][2]&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo[&apos;bar&apos;].baz&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo[&apos;bar&apos;][&apos;baz&apos;]&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;getDeepVal&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo.bar.0.baz[1][&apos;2&apos;][&apos;w&apos;].aaa[\\&quot;f\\&quot;].bb&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want a solution that can properly detect and report details of any issue with the path parsing, I wrote my own solution to this - library &lt;a href=&quot;https://github.com/vitaly-t/path-value&quot; rel=&quot;nofollow noreferrer&quot;&gt;path-value&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; {resolveValue} = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;path-value&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolveValue&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&apos;part1.name&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; Part 1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolveValue&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&apos;part2.qty&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; 50&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolveValue&lt;/span&gt;(someObject, &lt;span class=&quot;hljs-string&quot;&gt;&apos;part3.0.name&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; Part 3A&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that for indexes we use &lt;code&gt;.0&lt;/code&gt;, and not &lt;code&gt;[0]&lt;/code&gt;, because parsing the latter adds a performance penalty, while &lt;code&gt;.0&lt;/code&gt; works directly in JavaScript, and is thus very fast.&lt;/p&gt;\n&lt;p&gt;However, full ES5 JavaScript syntax is also supported, it just needs to be tokenized first:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; {resolveValue, tokenizePath} = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;path-value&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;hljs-title function_&quot;&gt;tokenizePath&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;part3[0].name&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; [&apos;part3&apos;, &apos;0&apos;, &apos;name&apos;]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolveValue&lt;/span&gt;(someObject, path); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; Part 3A&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I haven&apos;t yet found a package to do all of the operations with a string path, so I ended up writing my own quick little package which supports insert(), get() (with default return), set() and remove() operations.&lt;/p&gt;\n\n&lt;p&gt;You can use dot notation, brackets, number indices, string number properties, and keys with non-word characters. Simple usage below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsocrud = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;jsocrud&apos;&lt;/span&gt;);\n\n...\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Get (Read) ---&lt;/span&gt;\n&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n&amp;gt;     &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: [\n&amp;gt;         {\n&amp;gt;             &lt;span class=&quot;hljs-string&quot;&gt;&apos;key w/ non-word chars&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n&amp;gt;         }\n&amp;gt;     ]\n&amp;gt; };\n&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n\n&amp;gt; jsocrud.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(obj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.foo[0][&quot;key w/ non-word chars&quot;]&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/jsocrud&quot; rel=&quot;nofollow&quot;&gt;https://www.npmjs.com/package/jsocrud&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/vertical-knowledge/jsocrud&quot; rel=&quot;nofollow&quot;&gt;https://github.com/vertical-knowledge/jsocrud&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Simple function, allowing for either a string or array path.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; path === &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;) path = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(obj[path[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]], path.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;}}};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(obj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b.c&apos;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//foo&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;OR&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(obj, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;])); &lt;span class=&quot;hljs-comment&quot;&gt;//foo&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is an &lt;code&gt;npm&lt;/code&gt; module now for doing this: &lt;a href=&quot;https://github.com/erictrinh/safe-access&quot; rel=&quot;nofollow&quot;&gt;https://github.com/erictrinh/safe-access&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Example usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; access = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;safe-access&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;access&lt;/span&gt;(very, &lt;span class=&quot;hljs-string&quot;&gt;&apos;nested.property.and.array[0]&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;While reduce is good, I am surprised no one used forEach:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;valueForKeyPath&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; keys = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n        keys.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt;)=&amp;gt;&lt;/span&gt; obj = obj[key]);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/#src=%0Avar%20test%3A%20object%20%3D%20%7B%0A%20%20%20%20a%3A%20%7Bb%3A%7Bc%3A%22d%22%7D%7D%0A%7D%0A%0Afunction%20valueForKeyPath(obj%3A%20object%2C%20path%3A%20string)%3Aany%20%7B%0A%20%20%20%20%20%20%20%20const%20keys%20%3D%20path.split(&apos;.&apos;)%3B%0A%20%20%20%20%20%20%20%20keys.forEach((key)%3D%3E%20obj%20%3D%20obj%5Bkey%5D)%3B%0A%20%20%20%20%20%20%20%20return%20obj%3B%0A%20%20%20%20%7D%3B%0A%0Aalert(valueForKeyPath(test%2C%20&apos;a.b.c&apos;))&quot; rel=&quot;nofollow noreferrer&quot;&gt;Test&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m developing online-shop with React. I tried to change values in copied state object to update original state with it on submit. \nExamples above haven&apos;t worked for me, because most of them mutate structure of copied object. I found working example of the function for accessing and changing values of the deep nested object properties: &lt;a href=&quot;https://lowrey.me/create-an-object-by-path-in-javascript-2/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://lowrey.me/create-an-object-by-path-in-javascript-2/&lt;/a&gt; Here it is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createPath&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;obj, path, value = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;) =&amp;gt; {\n  path = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; path === &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt; ? path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) : path;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; current = obj;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [head, ...tail] = path;\n    path = tail;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (current[head] === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) {\n      current[head] = {};\n    }\n    current = current[head];\n  }\n  current[path[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]] = value;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just had the same question recently and successfully used &lt;a href=&quot;https://npmjs.org/package/tea-properties&quot; rel=&quot;nofollow&quot;&gt;https://npmjs.org/package/tea-properties&lt;/a&gt; which also &lt;code&gt;set&lt;/code&gt; nested object/arrays :&lt;/p&gt;\n\n&lt;p&gt;get:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;prop&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;arr&lt;/span&gt;: [\n      {&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;}\n    ]\n  }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; properties = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;tea-properties&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value = properties.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(o, &lt;span class=&quot;hljs-string&quot;&gt;&apos;prop.arr[0].foo&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(value, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;set:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; properties = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;tea-properties&apos;&lt;/span&gt;);\nproperties.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(o, &lt;span class=&quot;hljs-string&quot;&gt;&apos;prop.arr[0].foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(o.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;arr&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Based on a previous answer, I have created a function that can also handle brackets. But no dots inside them due to the split.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, str&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\.|\\[/g&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;crumb&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; crumb.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\]$/&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/^([&quot;&apos;])((?:(?!\\1)[^\\\\]|\\\\.)*?)\\1$/&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;match, quote, str&lt;/span&gt;) =&amp;gt;&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\\\(\\\\)?/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;$1&quot;&lt;/span&gt;));\n  }).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, prop&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj ? obj[prop] : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n  }, obj);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// (IE9+) Two steps&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pathString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;[0][&apos;property&apos;].others[3].next[&apos;final&apos;]&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = [{\n  &lt;span class=&quot;hljs-attr&quot;&gt;property&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;others&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, {\n      &lt;span class=&quot;hljs-attr&quot;&gt;next&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;final&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;SUCCESS&quot;&lt;/span&gt;\n      }\n    }]\n  }\n}];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Turn string to path array&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pathArray = pathString\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\[[&quot;&apos;]?([\\w]+)[&quot;&apos;]?\\]/g&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;.$1&quot;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Add object prototype method&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;path&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(path).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;f, l&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f[l];\n    });\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(e);\n  }\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// usage&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;path&lt;/span&gt;(pathArray));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj.&lt;span class=&quot;hljs-title function_&quot;&gt;path&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;doesNotExist&quot;&lt;/span&gt;]));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Inspired by @webjay&apos;s answer:\n&lt;a href=&quot;https://stackoverflow.com/a/46008856/4110122&quot;&gt;https://stackoverflow.com/a/46008856/4110122&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I made this function which can you use it to &lt;strong&gt;Get/ Set/ Unset&lt;/strong&gt; any value in object&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Object_Manager&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, Path, value, Action&lt;/span&gt;) \n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt; = [&lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;];\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; level = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Return&lt;/span&gt;_Value;\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n            level++;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (level === &lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Action&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;)\n                {\n                    a[b] = value;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Action&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;Get&apos;&lt;/span&gt;)\n                {\n                    &lt;span class=&quot;hljs-title class_&quot;&gt;Return&lt;/span&gt;_Value = a[b];\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Action&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;Unset&apos;&lt;/span&gt;)\n                {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; a[b];\n                }\n            } \n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; \n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a[b];\n            }\n        }, obj);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Return&lt;/span&gt;_Value;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(err)\n    {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To use it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Set&lt;/span&gt;\n &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;_Manager(&lt;span class=&quot;hljs-title class_&quot;&gt;Obj&lt;/span&gt;,[&lt;span class=&quot;hljs-title class_&quot;&gt;Level1&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;Level2&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;Level3&lt;/span&gt;],&lt;span class=&quot;hljs-title class_&quot;&gt;New&lt;/span&gt;_Value, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;);\n\n &lt;span class=&quot;hljs-comment&quot;&gt;// Get&lt;/span&gt;\n &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;_Manager(&lt;span class=&quot;hljs-title class_&quot;&gt;Obj&lt;/span&gt;,[&lt;span class=&quot;hljs-title class_&quot;&gt;Level1&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;Level2&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;Level3&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Get&apos;&lt;/span&gt;);\n\n &lt;span class=&quot;hljs-comment&quot;&gt;// Unset&lt;/span&gt;\n &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;_Manager(&lt;span class=&quot;hljs-title class_&quot;&gt;Obj&lt;/span&gt;,[&lt;span class=&quot;hljs-title class_&quot;&gt;Level1&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;Level2&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;Level3&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Unset&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Extension of Mohamad Hamouday&apos; Answer will fill in missing keys&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Object_Manager&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, Path, value, Action, strict&lt;/span&gt;) \n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isArray&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt; = [&lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;];\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; level = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Return&lt;/span&gt;_Value;\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(level,&lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;,a, &lt;span class=&quot;hljs-string&quot;&gt;&apos;|||&apos;&lt;/span&gt;,b)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!strict){\n              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a)) a[b] = {}\n            }\n\n\n            level++;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (level === &lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Action&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;)\n                {\n                    a[b] = value;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Action&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;Get&apos;&lt;/span&gt;)\n                {\n                    &lt;span class=&quot;hljs-title class_&quot;&gt;Return&lt;/span&gt;_Value = a[b];\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Action&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;Unset&apos;&lt;/span&gt;)\n                {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; a[b];\n                }\n            } \n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; \n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a[b];\n            }\n        }, obj);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Return&lt;/span&gt;_Value;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(err)\n    {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;\nobja = {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;nom&quot;&lt;/span&gt;\n  }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Set&lt;/span&gt;\npath = &lt;span class=&quot;hljs-string&quot;&gt;&quot;c.b&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Path does not exist&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;_Manager(obja,path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;test_new_val&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Expected Output: Object { a: Object { b: &quot;nom&quot; }, c: Object { b: &quot;test_new_value&quot; } }&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;code&gt;ramda&lt;/code&gt; library. &lt;/p&gt;\n\n&lt;p&gt;Learning &lt;code&gt;ramda&lt;/code&gt; also helps you to work with immutable objects easily.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:{\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {\n      &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,{\n        &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n      }]\n    }\n  }\n};\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lens = R.&lt;span class=&quot;hljs-title function_&quot;&gt;lensPath&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b.c.2.d&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = R.&lt;span class=&quot;hljs-title function_&quot;&gt;view&lt;/span&gt;(lens, obj);\n\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://codepen.io/ghominejad/pen/BayJZOQ&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://codepen.io/ghominejad/pen/BayJZOQ&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Based on Alnitak&apos;s &lt;a href=&quot;https://stackoverflow.com/a/6491621/1762224&quot;&gt;answer&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I wrapped the polyfill in a check, and reduced the function to a single chained reduction.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;byPath&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;byPath&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) =&amp;gt;&lt;/span&gt; path\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\[(\\w+)\\]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.$1&apos;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/^\\./&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\./g&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ref, key&lt;/span&gt;) =&amp;gt;&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ref ? ref[key] : ref, obj)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: [{\n      &lt;span class=&quot;hljs-attr&quot;&gt;baz&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    }]\n  }\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;byPath&lt;/span&gt;(data, &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo.bar[0].baz&apos;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This can be simplified by splitting the logic into three separate functions:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isVal&lt;/span&gt; = a =&amp;gt; a != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// everything except undefined + null&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt; = prop =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;isVal&lt;/span&gt;(obj)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = obj[prop];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;isVal&lt;/span&gt;(value)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;path&lt;/span&gt; = paths =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; pathList = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; paths === &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt; ? paths.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) : paths;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pathList.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, key&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(key)(value), obj);\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//usage:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myObject = { &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;baz&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;taco&apos;&lt;/span&gt; } } };\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = &lt;span class=&quot;hljs-title function_&quot;&gt;path&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo.bar&apos;&lt;/span&gt;)(myObject);\n&lt;span class=&quot;hljs-comment&quot;&gt;//results =&amp;gt; { baz: &apos;taco&apos; }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This variation supports:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;passing an array or string argument&lt;/li&gt;\n&lt;li&gt;dealing with &lt;code&gt;undefined&lt;/code&gt; values during invocation and execution&lt;/li&gt;\n&lt;li&gt;testing each function independently&lt;/li&gt;\n&lt;li&gt;using each function independently&lt;/li&gt;\n&lt;/ul&gt;\n    "]},"randomTags":[{"name":"object-comparison","slug":"object-comparison"},{"name":"three.js","slug":"three.js"},{"name":"latitude-longitude","slug":"latitude-longitude"},{"name":"git-rewrite-history","slug":"git-rewrite-history"},{"name":"random","slug":"random"},{"name":"copy","slug":"copy"},{"name":"delayedvariableexpansion","slug":"delayedvariableexpansion"},{"name":"event-propagation","slug":"event-propagation"},{"name":"properties","slug":"properties"},{"name":"ggplot2","slug":"ggplot2"},{"name":"text-files","slug":"text-files"},{"name":"heap-memory","slug":"heap-memory"},{"name":"parsing","slug":"parsing"},{"name":"mod-rewrite","slug":"mod-rewrite"},{"name":"syntax","slug":"syntax"},{"name":"nested-lists","slug":"nested-lists"},{"name":"sequence-points","slug":"sequence-points"},{"name":"ssl-certificate","slug":"ssl-certificate"},{"name":"reflection","slug":"reflection"},{"name":"shared-ptr","slug":"shared-ptr"}]},"__N_SSG":true}