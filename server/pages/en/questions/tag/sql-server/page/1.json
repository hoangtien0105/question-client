{"pageProps":{"data":{"count":1,"rows":[{"id":164,"title":"Simulating group_concat MySQL function in Microsoft SQL Server 2005?","slug":"simulating-group_concat-mysql-function-in-microsoft-sql-server-2005-1657384832169","postType":"QUESTION","createdAt":"2022-07-09T16:40:32.000Z","updatedAt":"2022-07-09T16:40:32.000Z","tags":[{"id":602,"name":"sql-server","slug":"sql-server","createdAt":"2022-07-09T16:40:32.000Z","updatedAt":"2022-07-09T16:40:32.000Z","Questions_Tags":{"questionId":164,"tagId":602}}]}]},"slug":"sql-server","page":"1","answers":{"164":["\n&lt;p&gt;No REAL easy way to do this. Lots of ideas out there, though.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://blog.shlomoid.com/2008/11/emulating-mysqls-groupconcat-function.html&quot; rel=&quot;noreferrer&quot;&gt;Best one I&apos;ve found&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; table_name, &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt;(column_names , LEN(column_names )&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; column_names\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; information_schema.columns &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; extern\n&lt;span class=&quot;hljs-keyword&quot;&gt;CROSS&lt;/span&gt; APPLY\n(\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; column_name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; information_schema.columns &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; intern\n    &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; extern.table_name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intern.table_name\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; XML PATH(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n) pre_trimmed (column_names)\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; table_name, column_names;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or a version that works correctly if the data might contain characters such as &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; extern\n     &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; table_name\n         &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   INFORMATION_SCHEMA.COLUMNS)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; table_name,\n       &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt;(y.column_names, LEN(y.column_names) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; column_names\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   extern\n       &lt;span class=&quot;hljs-keyword&quot;&gt;CROSS&lt;/span&gt; APPLY (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; column_name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   INFORMATION_SCHEMA.COLUMNS &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; intern\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  extern.table_name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intern.table_name\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; XML PATH(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;), TYPE) x (column_names)\n       &lt;span class=&quot;hljs-keyword&quot;&gt;CROSS&lt;/span&gt; APPLY (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; x.column_names.value(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;NVARCHAR(MAX)&apos;&lt;/span&gt;)) y(column_names) \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I may be a bit late to the party but this method works for me and is easier than the COALESCE method.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; STUFF(\n             (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; Column_Name \n              &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Table_Name\n              &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; XML PATH (&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;))\n             , &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;SQL Server 2017&lt;/strong&gt; does introduce a new aggregate function&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/mt790580.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;STRING_AGG ( expression, separator)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Concatenates the values of string expressions and places separator\n  values between them. The separator is not added at the end of string.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The concatenated elements can be ordered by appending &lt;code&gt;WITHIN GROUP (ORDER BY some_expression)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;For versions 2005-2016&lt;/strong&gt; I typically use the XML method in the accepted answer.&lt;/p&gt;\n\n&lt;p&gt;This can fail in some circumstances however. e.g. if the data to be concatenated contains &lt;code&gt;CHAR(29)&lt;/code&gt; you see&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;FOR XML could not serialize the data ... because it\n  contains a character (0x001D) which is not allowed in XML.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;A more robust method that can deal with all characters would be to use a CLR aggregate. However applying an ordering to the concatenated elements is more difficult with this approach.&lt;/p&gt;\n\n&lt;p&gt;The method of assigning to a variable is &lt;a href=&quot;https://stackoverflow.com/questions/15138593/nvarchar-concatenation-index-nvarcharmax-inexplicable-behavior/15163136#15163136&quot;&gt;not guaranteed&lt;/a&gt; and should be avoided in production code.&lt;/p&gt;\n    ","\n&lt;p&gt;Possibly too late to be of benefit now, but is this not the easiest way to do things?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;     empName, projIDs &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; replace\n                          ((&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Surname &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; [data()]\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; project_members\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  empName &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; a.empName\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; empName &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; xml path(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)), &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, REQUIRED SEPERATOR)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;         project_members a\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;     empName &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; empName\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Have a look at the &lt;a href=&quot;https://github.com/orlando-colamatteo/ms-sql-server-group-concat-sqlclr&quot; rel=&quot;noreferrer&quot;&gt;GROUP_CONCAT&lt;/a&gt; project on Github, I think I does exactly what you are searching for:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This project contains a set of SQLCLR User-defined Aggregate functions (SQLCLR UDAs) that collectively offer similar functionality to the MySQL GROUP_CONCAT function. There are multiple functions to ensure the best performance based on the functionality required...&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;To concatenate all the project manager names from projects that have multiple project managers write:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.project_id,a.project_name,Stuff((&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; N&lt;span class=&quot;hljs-string&quot;&gt;&apos;/ &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; first_name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;, &apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;last_name &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; projects_v \n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; a.project_id&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;project_id\n &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt;\n XML PATH(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;),TYPE).&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text()[1]&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;nvarchar(max)&apos;&lt;/span&gt;),&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,N&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n) mgr_names\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; projects_v a\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; a.project_id,a.project_name\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With the below code you have to set PermissionLevel=External on your project properties before you deploy, and change the database to trust external code (be sure to read elsewhere about security risks and alternatives [like certificates]) by running &quot;ALTER DATABASE database_name SET TRUSTWORTHY ON&quot;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;System&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Collections.Generic;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Data.SqlTypes;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.IO;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Runtime.Serialization;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Runtime.Serialization.Formatters.Binary;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Microsoft.SqlServer.Server;\n\n[Serializable]\n[SqlUserDefinedAggregate(Format.UserDefined,\nMaxByteSize&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;,\nIsInvariantToDuplicates&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\nIsInvariantToNulls&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\nIsInvariantToOrder&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\nIsNullIfEmpty&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)]\n    public struct CommaDelimit : IBinarySerialize\n{\n\n\n[Serializable]\n private class StringList : List&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n { }\n\n private StringList List;\n\n public void Init()\n {\n  this.List &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringList();\n }\n\n public void Accumulate(SqlString &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;)\n {\n  if (&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;value.IsNull)\n   this.Add(value.Value);\n }\n\n private void &lt;span class=&quot;hljs-keyword&quot;&gt;Add&lt;/span&gt;(string &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;)\n {\n  if (&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;this.List.Contains(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;))\n   this.List.Add(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;);\n }\n\n public void &lt;span class=&quot;hljs-keyword&quot;&gt;Merge&lt;/span&gt;(CommaDelimit &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt;)\n {\n  foreach (string s &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; group.List)\n  {\n   this.Add(s);\n  }\n }\n\n void IBinarySerialize.Read(BinaryReader reader)\n {\n    IFormatter formatter &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BinaryFormatter();\n    this.List &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (StringList)formatter.Deserialize(reader.BaseStream);\n }\n\n public SqlString Terminate()\n {\n  if (this.List.Count &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; SqlString.Null;\n\n  const string Separator &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;, &quot;;\n\n  this.List.Sort();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlString(String.Join(Separator, this.List.ToArray()));\n }\n\n void IBinarySerialize.Write(BinaryWriter writer)\n {\n  IFormatter formatter &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BinaryFormatter();\n  formatter.Serialize(writer.BaseStream, this.List);\n }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;ve tested this using a query that looks like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; \n dbo.CommaDelimit(X.value) [delimited] \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n (\n  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] \n  &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] \n  &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;-- intentional duplicate&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] \n  &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;] \n ) X \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And yields: A, B, C, D&lt;/p&gt;\n    ","\n&lt;p&gt;Tried these but for my purposes in MS SQL Server 2005 the following was most useful, which I found at &lt;a href=&quot;http://www.xaprb.com/blog/2005/09/28/simulating-the-group-concat-function/&quot; rel=&quot;noreferrer&quot;&gt;xaprb&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@result&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; master.dbo.systypes;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; rtrim(&lt;span class=&quot;hljs-variable&quot;&gt;@result&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;@Mark as you mentioned it was the space character that caused issues for me.&lt;/p&gt;\n    ","\n&lt;p&gt;About J Hardiman&apos;s answer, how about:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; empName, projIDs&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;\n  REPLACE(\n    REPLACE(\n      (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; REPLACE(projID, &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-somebody-puts-microsoft-out-of-his-misery-please-&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; [data()] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; project_members &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; empName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;a.empName &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; XML PATH(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)), \n      &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, \n      &lt;span class=&quot;hljs-string&quot;&gt;&apos; / &apos;&lt;/span&gt;), \n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;-somebody-puts-microsoft-out-of-his-misery-please-&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;) \n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; project_members a &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; empName &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; empName\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By the way, is the use of &quot;Surname&quot; a typo or am i not understanding a concept here?&lt;/p&gt;\n\n&lt;p&gt;Anyway, thanks a lot guys cuz it saved me quite some time :)&lt;/p&gt;\n    ","\n&lt;h3&gt;2021&lt;/h3&gt;\n&lt;p&gt;@AbdusSalamAzad&apos;s answer is the correct one.&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; STRING_AGG(my_col, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; my_result &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; my_tbl;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If the result is too big, you may get error &quot;&lt;strong&gt;STRING_AGG aggregation result exceeded the limit of 8000 bytes. Use LOB types to avoid result truncation.&lt;/strong&gt;&quot; , which can be fixed by changing the query to this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; STRING_AGG(&lt;span class=&quot;hljs-keyword&quot;&gt;convert&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(max), my_col), &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; my_result &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; my_tbl;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;UPDATE 2020: &lt;strong&gt;SQL Server 2016+&lt;/strong&gt; &lt;strong&gt;JSON&lt;/strong&gt; Serialization and De-serialization Examples&lt;/p&gt;\n&lt;p&gt;The data provided by the OP inserted into a temporary table called #project_members&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; if &lt;span class=&quot;hljs-keyword&quot;&gt;exists&lt;/span&gt; #project_members;\n&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; #project_members(\n  empName        &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;,\n  projID         &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);\ngo\n&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; #project_members(empName, projID) &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt;\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ANDY&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;A100&apos;&lt;/span&gt;),\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ANDY&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B391&apos;&lt;/span&gt;),\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ANDY&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;X010&apos;&lt;/span&gt;),\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;TOM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;A100&apos;&lt;/span&gt;),\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;TOM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;A510&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;How to serialize this data into a single JSON string with a nested array containing projID&apos;s&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; empName, (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; pm_json.projID \n                 &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; #project_members pm_json \n                 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; pm.empName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;pm_json.empName \n                 &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; json path, root(&lt;span class=&quot;hljs-string&quot;&gt;&apos;projList&apos;&lt;/span&gt;)) projJSON\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; #project_members pm\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; empName\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; json path;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Result&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;[\n  {\n    &quot;empName&quot;: &quot;ANDY&quot;,\n    &quot;projJSON&quot;: {\n      &quot;projList&quot;: [\n        { &quot;projID&quot;: &quot;A100&quot; },\n        { &quot;projID&quot;: &quot;B391&quot; },\n        { &quot;projID&quot;: &quot;X010&quot; }\n      ]\n    }\n  },\n  {\n    &quot;empName&quot;: &quot;TOM&quot;,\n    &quot;projJSON&quot;: {\n      &quot;projList&quot;: [\n        { &quot;projID&quot;: &quot;A100&quot; },\n        { &quot;projID&quot;: &quot;A510&quot; }\n      ]\n    }\n  }\n]&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;How to de-serialize this data from a single JSON string back to it&apos;s original rows and columns&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@json&lt;/span&gt;           nvarchar(max)&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;N&lt;span class=&quot;hljs-string&quot;&gt;&apos;[{&quot;empName&quot;:&quot;ANDY&quot;,&quot;projJSON&quot;:{&quot;projList&quot;:[{&quot;projID&quot;:&quot;A100&quot;},\n                                         {&quot;projID&quot;:&quot;B391&quot;},{&quot;projID&quot;:&quot;X010&quot;}]}},{&quot;empName&quot;:&quot;TOM&quot;,&quot;projJSON&quot;:\n                                         {&quot;projList&quot;:[{&quot;projID&quot;:&quot;A100&quot;},{&quot;projID&quot;:&quot;A510&quot;}]}}]&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; oj.empName, noj.projID \n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; openjson(&lt;span class=&quot;hljs-variable&quot;&gt;@json&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; (empName        &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),\n                           projJSON       nvarchar(max) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; json) oj\n     &lt;span class=&quot;hljs-keyword&quot;&gt;cross&lt;/span&gt; apply openjson(oj.projJSON, &lt;span class=&quot;hljs-string&quot;&gt;&apos;$.projList&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; (projID    &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)) noj;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Results&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;empName projID\nANDY    A100\nANDY    B391\nANDY    X010\nTOM     A100\nTOM     A510\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;How to persist the unique empName to a table and store the projID&apos;s in a nested JSON array&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; if &lt;span class=&quot;hljs-keyword&quot;&gt;exists&lt;/span&gt; #project_members_with_json;\n&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; #project_members_with_json(\n  empName        &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;,\n  projJSON       nvarchar(max) &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);\ngo\n&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; #project_members_with_json(empName, projJSON) \n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; empName, (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; pm_json.projID \n                 &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; #project_members pm_json \n                 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; pm.empName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;pm_json.empName \n                 &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; json path, root(&lt;span class=&quot;hljs-string&quot;&gt;&apos;projList&apos;&lt;/span&gt;)) \n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; #project_members pm\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; empName;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Results&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;empName projJSON\nANDY    {&quot;projList&quot;:[{&quot;projID&quot;:&quot;A100&quot;},{&quot;projID&quot;:&quot;B391&quot;},{&quot;projID&quot;:&quot;X010&quot;}]}\nTOM     {&quot;projList&quot;:[{&quot;projID&quot;:&quot;A100&quot;},{&quot;projID&quot;:&quot;A510&quot;}]}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;How to de-serialize from a table with unique empName and nested JSON array column containing projID&apos;s&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; wj.empName, oj.projID\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n  #project_members_with_json wj\n &lt;span class=&quot;hljs-keyword&quot;&gt;cross&lt;/span&gt; apply\n  openjson(wj.projJSON, &lt;span class=&quot;hljs-string&quot;&gt;&apos;$.projList&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; (projID    &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)) oj;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Results&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;empName projID\nANDY    A100\nANDY    B391\nANDY    X010\nTOM     A100\nTOM     A510\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For SQL Server 2017+, use  STRING_AGG() function&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; STRING_AGG(Genre, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Result&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Genres;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Sample result:&lt;/p&gt;\n&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;\n&lt;p&gt;Rock,Jazz,Country,Pop,Blues,Hip Hop,Rap,Punk&lt;/p&gt;\n    ","\n&lt;p&gt;For my fellow Googlers out there, here&apos;s a very simple plug-and-play solution that worked for me after struggling with the more complex solutions for a while:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;distinct&lt;/span&gt; empName,\nNewColumnName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;STUFF((&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;CONVERT&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;), projID ) \n                     &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;returns&lt;/span&gt; \n                     &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; empName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;t.empName &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; XML PATH(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)) , &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; )\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;returns&lt;/span&gt; t\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice that I had to convert the ID into a VARCHAR in order to concatenate it as a string. If you don&apos;t have to do that, here&apos;s an even simpler version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;distinct&lt;/span&gt; empName,\nNewColumnName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;STUFF((&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; projID\n                     &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;returns&lt;/span&gt; \n                     &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; empName&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;t.empName &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; XML PATH(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)) , &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; )\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;returns&lt;/span&gt; t\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All credit for this goes to here:\n&lt;a href=&quot;https://social.msdn.microsoft.com/Forums/sqlserver/en-US/9508abc2-46e7-4186-b57f-7f368374e084/replicating-groupconcat-function-of-mysql-in-sql-server?forum=transactsql&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://social.msdn.microsoft.com/Forums/sqlserver/en-US/9508abc2-46e7-4186-b57f-7f368374e084/replicating-groupconcat-function-of-mysql-in-sql-server?forum=transactsql&lt;/a&gt;&lt;/p&gt;\n    "]},"randomTags":[{"name":"keyword","slug":"keyword"},{"name":"layout-manager","slug":"layout-manager"},{"name":"android-edittext","slug":"android-edittext"},{"name":"tabs","slug":"tabs"},{"name":"httpurlconnection","slug":"httpurlconnection"},{"name":"aspect-ratio","slug":"aspect-ratio"},{"name":"environment-variables","slug":"environment-variables"},{"name":"http-status-code-404","slug":"http-status-code-404"},{"name":"rust","slug":"rust"},{"name":"password-hash","slug":"password-hash"},{"name":"profiler","slug":"profiler"},{"name":"reserved-words","slug":"reserved-words"},{"name":"optimization","slug":"optimization"},{"name":"date-format","slug":"date-format"},{"name":"instance-variables","slug":"instance-variables"},{"name":"while-loop","slug":"while-loop"},{"name":"c#","slug":"c"},{"name":"xml","slug":"xml"},{"name":"constants","slug":"constants"},{"name":"extract","slug":"extract"}]},"__N_SSG":true}