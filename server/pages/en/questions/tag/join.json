{"pageProps":{"data":{"count":1,"rows":[{"id":60,"title":"Pandas Merging 101","slug":"pandas-merging-101-1657384447080","postType":"QUESTION","createdAt":"2022-07-09T16:34:07.000Z","updatedAt":"2022-07-09T16:34:07.000Z","tags":[{"id":217,"name":"join","slug":"join","createdAt":"2022-07-09T16:34:07.000Z","updatedAt":"2022-07-09T16:34:07.000Z","Questions_Tags":{"questionId":60,"tagId":217}}]}]},"slug":"join","page":1,"answers":{"60":["\n&lt;p&gt;This post aims to give readers a primer on SQL-flavored merging with Pandas, how to use it, and when not to use it.&lt;/p&gt;\n&lt;p&gt;In particular, here&apos;s what this post will go through:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The basics - types of joins (LEFT, RIGHT, OUTER, INNER)&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;merging with different column names&lt;/li&gt;\n&lt;li&gt;merging with multiple columns&lt;/li&gt;\n&lt;li&gt;avoiding duplicate merge key column in output&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;What this post (and other posts by me on this thread) will not go through:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Performance-related discussions and timings (for now). Mostly notable mentions of better alternatives, wherever appropriate.&lt;/li&gt;\n&lt;li&gt;Handling suffixes, removing extra columns, renaming outputs, and other specific use cases. There are other (read: better) posts that deal with that, so figure it out!&lt;/li&gt;\n&lt;/ul&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;\nMost examples default to INNER JOIN operations while demonstrating various features, unless otherwise specified.&lt;/p&gt;\n&lt;p&gt;Furthermore, all the DataFrames here can be copied and replicated so\nyou can play with them. Also, see &lt;a href=&quot;https://stackoverflow.com/questions/31610889/how-to-copy-paste-dataframe-from-stackoverflow-into-python&quot;&gt;this\npost&lt;/a&gt;\non how to read DataFrames from your clipboard.&lt;/p&gt;\n&lt;p&gt;Lastly, all visual representation of JOIN operations have been hand-drawn using Google Drawings. Inspiration from &lt;a href=&quot;https://stackoverflow.com/a/55858991/4909087&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;hr&gt;\n&lt;h1&gt;Enough talk - just show me how to use &lt;code&gt;merge&lt;/code&gt;!&lt;/h1&gt;\n&lt;h3&gt;Setup &amp;amp; Basics&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;np.random.seed(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\nleft = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;: np.random.randn(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)})\nright = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;F&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;: np.random.randn(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)})\n\nleft\n\n  key     value\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   A  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   B  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   C  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   D  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;\n\nright\n\n  key     value\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   B  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   D -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   E  &lt;span class=&quot;hljs-number&quot;&gt;0.950088&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   F -&lt;span class=&quot;hljs-number&quot;&gt;0.151357&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For the sake of simplicity, the key column has the same name (for now).&lt;/p&gt;\n&lt;p&gt;An &lt;strong&gt;INNER JOIN&lt;/strong&gt; is represented by&lt;/p&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/YvuOa.png&quot; width=&quot;500&quot;&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;\nThis, along with the forthcoming figures all follow this convention:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;blue&lt;/strong&gt; indicates rows that are present in the merge result&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;red&lt;/strong&gt; indicates rows that are excluded from the result (i.e., removed)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;green&lt;/strong&gt; indicates missing values that are replaced with &lt;code&gt;NaN&lt;/code&gt;s in the result&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;To perform an INNER JOIN, call &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;merge&lt;/code&gt;&lt;/a&gt; on the left DataFrame, specifying the right DataFrame and the join key (at the very least) as arguments.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left.merge(right, on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# Or, if you want to be explicit&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# left.merge(right, on=&apos;key&apos;, how=&apos;inner&apos;)&lt;/span&gt;\n\n  key   value_x   value_y\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   B  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   D  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This returns only rows from &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; which share a common key (in this example, &quot;B&quot; and &quot;D).&lt;/p&gt;\n&lt;p&gt;A &lt;strong&gt;LEFT OUTER JOIN&lt;/strong&gt;, or LEFT JOIN  is represented by&lt;/p&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/BECid.png&quot; width=&quot;500&quot;&gt;\n&lt;p&gt;This can be performed by specifying &lt;code&gt;how=&apos;left&apos;&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left.merge(right, on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;)\n\n  key   value_x   value_y\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   A  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;       NaN\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   B  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   C  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;       NaN\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   D  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Carefully note the placement of NaNs here. If you specify &lt;code&gt;how=&apos;left&apos;&lt;/code&gt;, then only keys from &lt;code&gt;left&lt;/code&gt; are used, and missing data from &lt;code&gt;right&lt;/code&gt; is replaced by NaN.&lt;/p&gt;\n&lt;p&gt;And similarly, for a &lt;strong&gt;RIGHT OUTER JOIN&lt;/strong&gt;, or RIGHT JOIN which is...&lt;/p&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/8w1US.png&quot; width=&quot;500&quot;&gt;\n&lt;p&gt;...specify &lt;code&gt;how=&apos;right&apos;&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left.merge(right, on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;right&apos;&lt;/span&gt;)\n\n  key   value_x   value_y\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   B  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   D  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   E       NaN  &lt;span class=&quot;hljs-number&quot;&gt;0.950088&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   F       NaN -&lt;span class=&quot;hljs-number&quot;&gt;0.151357&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here, keys from &lt;code&gt;right&lt;/code&gt; are used, and missing data from &lt;code&gt;left&lt;/code&gt; is replaced by NaN.&lt;/p&gt;\n&lt;p&gt;Finally, for the &lt;strong&gt;FULL OUTER JOIN&lt;/strong&gt;, given by&lt;/p&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/euLoe.png&quot; width=&quot;500&quot;&gt;\n&lt;p&gt;specify &lt;code&gt;how=&apos;outer&apos;&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left.merge(right, on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;outer&apos;&lt;/span&gt;)\n\n  key   value_x   value_y\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   A  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;       NaN\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   B  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   C  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;       NaN\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   D  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   E       NaN  &lt;span class=&quot;hljs-number&quot;&gt;0.950088&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   F       NaN -&lt;span class=&quot;hljs-number&quot;&gt;0.151357&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This uses the keys from both frames, and NaNs are inserted for missing rows in both.&lt;/p&gt;\n&lt;p&gt;The documentation summarizes these various merges nicely:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/5qDIy.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/5qDIy.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;strong&gt;Other JOINs - LEFT-Excluding, RIGHT-Excluding, and FULL-Excluding/ANTI JOINs&lt;/strong&gt;&lt;/h3&gt;\n&lt;p&gt;If you need &lt;strong&gt;LEFT-Excluding JOINs&lt;/strong&gt; and &lt;strong&gt;RIGHT-Excluding JOINs&lt;/strong&gt; in two steps.&lt;/p&gt;\n&lt;p&gt;For LEFT-Excluding JOIN, represented as&lt;/p&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/bXWIV.png&quot; width=&quot;500&quot;&gt;\n&lt;p&gt;Start by performing a LEFT OUTER JOIN and then filtering to rows coming from &lt;code&gt;left&lt;/code&gt; only (excluding everything from the right),&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(left.merge(right, on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;, indicator=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n     .query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;_merge == &quot;left_only&quot;&apos;&lt;/span&gt;)\n     .drop(&lt;span class=&quot;hljs-string&quot;&gt;&apos;_merge&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n  key   value_x  value_y\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   A  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;      NaN\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   C  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;      NaN\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Where,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left.merge(right, on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;, indicator=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n\n  key   value_x   value_y     _merge\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   A  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;       NaN  left_only\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   B  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt;       both\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   C  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;       NaN  left_only\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   D  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;       both&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And similarly, for a RIGHT-Excluding JOIN,&lt;/p&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/Z0br2.png&quot; width=&quot;500&quot;&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(left.merge(right, on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;right&apos;&lt;/span&gt;, indicator=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n     .query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;_merge == &quot;right_only&quot;&apos;&lt;/span&gt;)\n     .drop(&lt;span class=&quot;hljs-string&quot;&gt;&apos;_merge&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n  key  value_x   value_y\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   E      NaN  &lt;span class=&quot;hljs-number&quot;&gt;0.950088&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   F      NaN -&lt;span class=&quot;hljs-number&quot;&gt;0.151357&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Lastly, if you are required to do a merge that only retains keys from the left or right, but not both (IOW, performing an &lt;strong&gt;ANTI-JOIN&lt;/strong&gt;),&lt;/p&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/PWMYd.png&quot; width=&quot;500&quot;&gt;\n&lt;p&gt;You can do this in similar fashion&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(left.merge(right, on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;outer&apos;&lt;/span&gt;, indicator=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n     .query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;_merge != &quot;both&quot;&apos;&lt;/span&gt;)\n     .drop(&lt;span class=&quot;hljs-string&quot;&gt;&apos;_merge&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n  key   value_x   value_y\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   A  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;       NaN\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   C  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;       NaN\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   E       NaN  &lt;span class=&quot;hljs-number&quot;&gt;0.950088&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   F       NaN -&lt;span class=&quot;hljs-number&quot;&gt;0.151357&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;strong&gt;Different names for key columns&lt;/strong&gt;&lt;/h3&gt;\n&lt;p&gt;If the key columns are named differentlyfor example, &lt;code&gt;left&lt;/code&gt; has &lt;code&gt;keyLeft&lt;/code&gt;, and &lt;code&gt;right&lt;/code&gt; has &lt;code&gt;keyRight&lt;/code&gt; instead of &lt;code&gt;key&lt;/code&gt;then you will have to specify &lt;code&gt;left_on&lt;/code&gt; and &lt;code&gt;right_on&lt;/code&gt; as arguments instead of &lt;code&gt;on&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left2 = left.rename({&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;keyLeft&apos;&lt;/span&gt;}, axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\nright2 = right.rename({&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;keyRight&apos;&lt;/span&gt;}, axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\nleft2\n\n  keyLeft     value\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;       A  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;       B  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;       C  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;       D  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;\n\nright2\n\n  keyRight     value\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;        B  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;        D -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;        E  &lt;span class=&quot;hljs-number&quot;&gt;0.950088&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;        F -&lt;span class=&quot;hljs-number&quot;&gt;0.151357&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left2.merge(right2, left_on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;keyLeft&apos;&lt;/span&gt;, right_on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;keyRight&apos;&lt;/span&gt;, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;inner&apos;&lt;/span&gt;)\n\n  keyLeft   value_x keyRight   value_y\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;       B  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;        B  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;       D  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;        D -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;strong&gt;Avoiding duplicate key column in output&lt;/strong&gt;&lt;/h3&gt;\n&lt;p&gt;When merging on &lt;code&gt;keyLeft&lt;/code&gt; from &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;keyRight&lt;/code&gt; from &lt;code&gt;right&lt;/code&gt;, if you only want either of the &lt;code&gt;keyLeft&lt;/code&gt; or &lt;code&gt;keyRight&lt;/code&gt; (but not both) in the output, you can start by setting the index as a preliminary step.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left3 = left2.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;keyLeft&apos;&lt;/span&gt;)\nleft3.merge(right2, left_index=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, right_on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;keyRight&apos;&lt;/span&gt;)\n\n    value_x keyRight   value_y\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;        B  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;        D -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Contrast this with the output of the command just before (that is, the output of &lt;code&gt;left2.merge(right2, left_on=&apos;keyLeft&apos;, right_on=&apos;keyRight&apos;, how=&apos;inner&apos;)&lt;/code&gt;), you&apos;ll notice &lt;code&gt;keyLeft&lt;/code&gt; is missing. You can figure out what column to keep based on which frame&apos;s index is set as the key. This may matter when, say, performing some OUTER JOIN operation.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;strong&gt;Merging only a single column from one of the &lt;code&gt;DataFrames&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;\n&lt;p&gt;For example, consider&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;right3 = right.assign(newcol=np.arange(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(right)))\nright3\n  key     value  newcol\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   B  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   D -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   E  &lt;span class=&quot;hljs-number&quot;&gt;0.950088&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   F -&lt;span class=&quot;hljs-number&quot;&gt;0.151357&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you are required to merge only &quot;newcol&quot; (without any of the other columns), you can usually just subset columns before merging:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left.merge(right3[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;newcol&apos;&lt;/span&gt;]], on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;)\n\n  key     value  newcol\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   B  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   D  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you&apos;re doing a LEFT OUTER JOIN, a more performant solution would involve &lt;code&gt;map&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# left[&apos;newcol&apos;] = left[&apos;key&apos;].map(right3.set_index(&apos;key&apos;)[&apos;newcol&apos;]))&lt;/span&gt;\nleft.assign(newcol=left[&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(right3.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-string&quot;&gt;&apos;newcol&apos;&lt;/span&gt;]))\n\n  key     value  newcol\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   A  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;     NaN\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   B  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   C  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;     NaN\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   D  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As mentioned, this is similar to, but faster than&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left.merge(right3[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;newcol&apos;&lt;/span&gt;]], on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;)\n\n  key     value  newcol\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   A  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;     NaN\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   B  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   C  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;     NaN\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   D  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;strong&gt;Merging on multiple columns&lt;/strong&gt;&lt;/h3&gt;\n&lt;p&gt;To join on more than one column, specify a list for &lt;code&gt;on&lt;/code&gt; (or &lt;code&gt;left_on&lt;/code&gt; and &lt;code&gt;right_on&lt;/code&gt;, as appropriate).&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left.merge(right, on=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;key1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;key2&apos;&lt;/span&gt;] ...)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or, in the event the names are different,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left.merge(right, left_on=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;lkey1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;lkey2&apos;&lt;/span&gt;], right_on=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;rkey1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rkey2&apos;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;strong&gt;Other useful &lt;code&gt;merge*&lt;/code&gt; operations and functions&lt;/strong&gt;&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Merging a DataFrame with Series on index: See &lt;a href=&quot;https://stackoverflow.com/a/40762674/4909087&quot;&gt;this answer&lt;/a&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Besides &lt;code&gt;merge&lt;/code&gt;, &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.update.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;DataFrame.update&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.combine_first.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;DataFrame.combine_first&lt;/code&gt;&lt;/a&gt; are also used in certain cases to update one DataFrame with another.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/version/0.19.0/generated/pandas.merge_ordered.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pd.merge_ordered&lt;/code&gt;&lt;/a&gt; is a useful function for ordered JOINs.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.merge_asof.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pd.merge_asof&lt;/code&gt;&lt;/a&gt; (read: merge_asOf) is useful for &lt;em&gt;approximate&lt;/em&gt; joins.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;This section only covers the very basics, and is designed to only whet your appetite. For more examples and cases, see the &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/merging.html&quot; rel=&quot;noreferrer&quot;&gt;documentation on &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;join&lt;/code&gt;, and &lt;code&gt;concat&lt;/code&gt;&lt;/a&gt; as well as the links to the function specifications.&lt;/strong&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;hr&gt;\n&lt;h1&gt;Continue Reading&lt;/h1&gt;\n&lt;p&gt;Jump to other topics in Pandas Merging 101 to continue learning:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/53645883/4909087&quot;&gt;Merging basics - basic types of joins&lt;/a&gt; &lt;sup&gt;*&lt;/sup&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/65167356/4909087&quot;&gt;Index-based joins&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/65167327/4909087&quot;&gt;Generalizing to multiple DataFrames&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/53699013/4909087&quot;&gt;Cross join&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;sub&gt;*You are here.&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A supplemental visual view of &lt;code&gt;pd.concat([df0, df1], kwargs)&lt;/code&gt;. \nNotice that, kwarg &lt;code&gt;axis=0&lt;/code&gt; or &lt;code&gt;axis=1&lt;/code&gt; &apos;s meaning is not as intuitive as &lt;code&gt;df.mean()&lt;/code&gt; or &lt;code&gt;df.apply(func)&lt;/code&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/1rb1R.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/1rb1R.jpg&quot; alt=&quot;on pd.concat([df0, df1])&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h1&gt;Joins 101&lt;/h1&gt;\n&lt;p&gt;These animations might be better to explain you visually.\nCredits: &lt;a href=&quot;https://github.com/gadenbuie/tidyexplain&quot; rel=&quot;noreferrer&quot;&gt;Garrick Aden-Buie tidyexplain repo&lt;/a&gt;&lt;/p&gt;\n&lt;h2&gt;Inner Join&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/3qpXx.gif&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/3qpXx.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;h2&gt;Outer Join or Full Join&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/dG8mw.gif&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/dG8mw.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;h2&gt;Right Join&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/JpPRH.gif&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/JpPRH.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;h2&gt;Left Join&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/s5hgJ.gif&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/s5hgJ.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In this answer, I will consider practical examples.&lt;/p&gt;\n&lt;p&gt;The first one, is of &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pandas.concat&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The second one, of merging dataframes from the index of one and the column of another one.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;. &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pandas.concat&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Considering the following &lt;code&gt;DataFrames&lt;/code&gt; with the same column names:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Preco2018&lt;/strong&gt; with size (8784, 5)&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/rsqan.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/rsqan.png&quot; alt=&quot;DataFrame 1&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Preco 2019&lt;/strong&gt; with size (8760, 5)&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/uZoyW.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/uZoyW.png&quot; alt=&quot;DataFrame 2&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;That have the same column names.&lt;/p&gt;\n&lt;p&gt;You can combine them using &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pandas.concat&lt;/code&gt;&lt;/a&gt;, by simply&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n\nframes = [Preco2018, Preco2019]\n\ndf_merged = pd.concat(frames)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Which results in a DataFrame with the following size (17544, 5)&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/8gAVG.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/8gAVG.png&quot; alt=&quot;DataFrame result of the combination of two dataframes&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;If you want to visualize, it ends up working like this&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/3KFNZ.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/3KFNZ.png&quot; alt=&quot;How concat works&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;(&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/version/0.20/merging.html&quot; rel=&quot;noreferrer&quot;&gt;Source&lt;/a&gt;)&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;. Merge by Column and Index&lt;/p&gt;\n&lt;p&gt;In this part, I will consider a specific case: If one wants to merge the index of one dataframe and the column of another dataframe.&lt;/p&gt;\n&lt;p&gt;Let&apos;s say one has the dataframe &lt;code&gt;Geo&lt;/code&gt; with 54 columns, being one of the columns the Date &lt;code&gt;Data&lt;/code&gt;, which is of type &lt;code&gt;datetime64[ns]&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/gvSIB.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/gvSIB.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;And the dataframe &lt;code&gt;Price&lt;/code&gt; that has one column with the price and the index corresponds to the dates&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Dp7Jm.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Dp7Jm.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;In this specific case, to merge them, one uses &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.merge.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pd.merge&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;merged = pd.merge(Price, Geo, left_index=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, right_on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Data&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Which results in the following dataframe&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/yJVD3.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/yJVD3.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This post will go through the following topics:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Merging with index under different conditions\n&lt;ul&gt;\n&lt;li&gt;options for index-based joins: &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;merging on indexes&lt;/li&gt;\n&lt;li&gt;merging on index of one, column of other&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;effectively using named indexes to simplify merging syntax&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;sub&gt;&lt;a href=&quot;https://stackoverflow.com/q/53645882/4909087&quot;&gt;&lt;strong&gt;BACK TO TOP&lt;/strong&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;hr&gt;\n&lt;h1&gt;Index-based joins&lt;/h1&gt;\n&lt;h3&gt;TL;DR&lt;/h3&gt;\n&lt;blockquote&gt;\n&lt;p&gt;There are a few options, some simpler than others depending on the use\ncase.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.merge.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;DataFrame.merge&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; with &lt;code&gt;left_index&lt;/code&gt; and &lt;code&gt;right_index&lt;/code&gt; (or &lt;code&gt;left_on&lt;/code&gt; and &lt;code&gt;right_on&lt;/code&gt; using named indexes)\n&lt;ul&gt;\n&lt;li&gt;supports inner/left/right/full&lt;/li&gt;\n&lt;li&gt;can only join two at a time&lt;/li&gt;\n&lt;li&gt;supports column-column, index-column, index-index joins&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;DataFrame.join&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; (join on index)\n&lt;ul&gt;\n&lt;li&gt;supports inner/left (default)/right/full&lt;/li&gt;\n&lt;li&gt;can join multiple DataFrames at a time&lt;/li&gt;\n&lt;li&gt;supports index-index joins&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;pd.concat&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; (joins on index)\n&lt;ul&gt;\n&lt;li&gt;supports inner/full (default)&lt;/li&gt;\n&lt;li&gt;can join multiple DataFrames at a time&lt;/li&gt;\n&lt;li&gt;supports index-index joins&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;h3&gt;Index to index joins&lt;/h3&gt;\n&lt;p&gt;&lt;strong&gt;Setup &amp;amp; Basics&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\nnp.random.seed([&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;])\nleft = pd.DataFrame(data={&lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;: np.random.randn(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)}, \n                    index=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;])    \nright = pd.DataFrame(data={&lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;: np.random.randn(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)},  \n                     index=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;F&apos;&lt;/span&gt;])\nleft.index.name = right.index.name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;idxkey&apos;&lt;/span&gt;\n\nleft\n           value\nidxkey          \nA      -&lt;span class=&quot;hljs-number&quot;&gt;0.602923&lt;/span&gt;\nB      -&lt;span class=&quot;hljs-number&quot;&gt;0.402655&lt;/span&gt;\nC       &lt;span class=&quot;hljs-number&quot;&gt;0.302329&lt;/span&gt;\nD      -&lt;span class=&quot;hljs-number&quot;&gt;0.524349&lt;/span&gt;\n\nright\n \n           value\nidxkey          \nB       &lt;span class=&quot;hljs-number&quot;&gt;0.543843&lt;/span&gt;\nD       &lt;span class=&quot;hljs-number&quot;&gt;0.013135&lt;/span&gt;\nE      -&lt;span class=&quot;hljs-number&quot;&gt;0.326498&lt;/span&gt;\nF       &lt;span class=&quot;hljs-number&quot;&gt;1.385076&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Typically, an &lt;strong&gt;inner join on index&lt;/strong&gt; would look like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left.merge(right, left_index=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, right_index=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n\n         value_x   value_y\nidxkey                    \nB      -&lt;span class=&quot;hljs-number&quot;&gt;0.402655&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.543843&lt;/span&gt;\nD      -&lt;span class=&quot;hljs-number&quot;&gt;0.524349&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.013135&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Other joins follow similar syntax.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Notable Alternatives&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;DataFrame.join&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; defaults to joins on the index. &lt;code&gt;DataFrame.join&lt;/code&gt; does a LEFT OUTER JOIN by default, so &lt;code&gt;how=&apos;inner&apos;&lt;/code&gt; is necessary here.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; left.join(right, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;inner&apos;&lt;/span&gt;, lsuffix=&lt;span class=&quot;hljs-string&quot;&gt;&apos;_x&apos;&lt;/span&gt;, rsuffix=&lt;span class=&quot;hljs-string&quot;&gt;&apos;_y&apos;&lt;/span&gt;)\n\n          value_x   value_y\n idxkey                    \n B      -&lt;span class=&quot;hljs-number&quot;&gt;0.402655&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.543843&lt;/span&gt;\n D      -&lt;span class=&quot;hljs-number&quot;&gt;0.524349&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.013135&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that I needed to specify the &lt;code&gt;lsuffix&lt;/code&gt; and &lt;code&gt;rsuffix&lt;/code&gt; arguments since &lt;code&gt;join&lt;/code&gt; would otherwise error out:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; left.join(right)\n ValueError: columns overlap but no suffix specified: Index([&lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;], dtype=&lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Since the column names are the same. This would not be a problem if they were differently named.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; left.rename(columns={&lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;leftvalue&apos;&lt;/span&gt;}).join(right, how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;inner&apos;&lt;/span&gt;)\n\n         leftvalue     value\n idxkey                     \n B       -&lt;span class=&quot;hljs-number&quot;&gt;0.402655&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.543843&lt;/span&gt;\n D       -&lt;span class=&quot;hljs-number&quot;&gt;0.524349&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.013135&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pd.concat&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; joins on the index and can join two or more DataFrames at once. It does a full outer join by default, so &lt;code&gt;how=&apos;inner&apos;&lt;/code&gt; is required here..&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; pd.concat([left, right], axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, sort=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, join=&lt;span class=&quot;hljs-string&quot;&gt;&apos;inner&apos;&lt;/span&gt;)\n\n            value     value\n idxkey                    \n B      -&lt;span class=&quot;hljs-number&quot;&gt;0.402655&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.543843&lt;/span&gt;\n D      -&lt;span class=&quot;hljs-number&quot;&gt;0.524349&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.013135&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For more information on &lt;code&gt;concat&lt;/code&gt;, see &lt;a href=&quot;https://stackoverflow.com/questions/49620538/what-are-the-levels-keys-and-names-arguments-for-in-pandas-concat-functio/49620539#49620539&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;strong&gt;Index to Column joins&lt;/strong&gt;&lt;/h3&gt;\n&lt;p&gt;To perform an inner join using index of left, column of right, you will use &lt;code&gt;DataFrame.merge&lt;/code&gt; a combination of &lt;code&gt;left_index=True&lt;/code&gt; and &lt;code&gt;right_on=...&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;right2 = right.reset_index().rename({&lt;span class=&quot;hljs-string&quot;&gt;&apos;idxkey&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;colkey&apos;&lt;/span&gt;}, axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\nright2\n \n  colkey     value\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;      B  &lt;span class=&quot;hljs-number&quot;&gt;0.543843&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;      D  &lt;span class=&quot;hljs-number&quot;&gt;0.013135&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;      E -&lt;span class=&quot;hljs-number&quot;&gt;0.326498&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;      F  &lt;span class=&quot;hljs-number&quot;&gt;1.385076&lt;/span&gt;\n\nleft.merge(right2, left_index=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, right_on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;colkey&apos;&lt;/span&gt;)\n\n    value_x colkey   value_y\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.402655&lt;/span&gt;      B  &lt;span class=&quot;hljs-number&quot;&gt;0.543843&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.524349&lt;/span&gt;      D  &lt;span class=&quot;hljs-number&quot;&gt;0.013135&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Other joins follow a similar structure. Note that only &lt;code&gt;merge&lt;/code&gt; can perform index to column joins. You can join on multiple columns, provided the number of index levels on the left equals the number of columns on the right.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;join&lt;/code&gt; and &lt;code&gt;concat&lt;/code&gt; are not capable of mixed merges. You will need to set the index as a pre-step using &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.set_index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;DataFrame.set_index&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;Effectively using Named Index [pandas &amp;gt;= 0.23]&lt;/h3&gt;\n&lt;p&gt;If your index is named, then from pandas &amp;gt;= 0.23, &lt;code&gt;DataFrame.merge&lt;/code&gt; allows you to specify the index name to &lt;code&gt;on&lt;/code&gt; (or &lt;code&gt;left_on&lt;/code&gt; and &lt;code&gt;right_on&lt;/code&gt; as necessary).&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left.merge(right, on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;idxkey&apos;&lt;/span&gt;)\n\n         value_x   value_y\nidxkey                    \nB      -&lt;span class=&quot;hljs-number&quot;&gt;0.402655&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.543843&lt;/span&gt;\nD      -&lt;span class=&quot;hljs-number&quot;&gt;0.524349&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.013135&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For the previous example of merging with the index of left, column of right, you can use &lt;code&gt;left_on&lt;/code&gt; with the index name of left:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;left.merge(right2, left_on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;idxkey&apos;&lt;/span&gt;, right_on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;colkey&apos;&lt;/span&gt;)\n\n    value_x colkey   value_y\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.402655&lt;/span&gt;      B  &lt;span class=&quot;hljs-number&quot;&gt;0.543843&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.524349&lt;/span&gt;      D  &lt;span class=&quot;hljs-number&quot;&gt;0.013135&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;hr&gt;\n&lt;h1&gt;Continue Reading&lt;/h1&gt;\n&lt;p&gt;Jump to other topics in Pandas Merging 101 to continue learning:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/53645883/4909087&quot;&gt;Merging basics - basic types of joins&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/65167356/4909087&quot;&gt;Index-based joins&lt;/a&gt;&lt;sup&gt;*&lt;/sup&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/65167327/4909087&quot;&gt;Generalizing to multiple DataFrames&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/53699013/4909087&quot;&gt;Cross join&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;sub&gt;* you are here &lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This post will go through the following topics:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;how to correctly generalize to multiple DataFrames (and why &lt;code&gt;merge&lt;/code&gt; has shortcomings here)&lt;/li&gt;\n&lt;li&gt;merging on unique keys&lt;/li&gt;\n&lt;li&gt;merging on non-unqiue keys&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;sub&gt;&lt;a href=&quot;https://stackoverflow.com/q/53645882/4909087&quot;&gt;&lt;strong&gt;BACK TO TOP&lt;/strong&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;hr&gt;\n&lt;h1&gt;Generalizing to multiple DataFrames&lt;/h1&gt;\n&lt;p&gt;Oftentimes, the situation arises when multiple DataFrames are to be merged together. Naively, this can be done by chaining &lt;code&gt;merge&lt;/code&gt; calls:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df1.merge(df2, ...).merge(df3, ...)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, this quickly gets out of hand for many DataFrames. Furthermore, it may be necessary to generalise for an unknown number of DataFrames.&lt;/p&gt;\n&lt;p&gt;Here I introduce &lt;code&gt;pd.concat&lt;/code&gt; for multi-way joins on &lt;em&gt;unique&lt;/em&gt; keys, and &lt;code&gt;DataFrame.join&lt;/code&gt; for multi-way joins on &lt;em&gt;non-unique&lt;/em&gt; keys. First, the setup.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Setup.&lt;/span&gt;\nnp.random.seed(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\nA = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;valueA&apos;&lt;/span&gt;: np.random.randn(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)})    \nB = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;F&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;valueB&apos;&lt;/span&gt;: np.random.randn(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)})\nC = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;J&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;valueC&apos;&lt;/span&gt;: np.ones(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)})\ndfs = [A, B, C] \n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Note: the &quot;key&quot; column values are unique, so the index is unique.&lt;/span&gt;\nA2 = A.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;)\nB2 = B.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;)\nC2 = C.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;)\n\ndfs2 = [A2, B2, C2]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;strong&gt;Multiway merge on unique keys&lt;/strong&gt;&lt;/h3&gt;\n&lt;p&gt;If your keys (here, the key could either be a column or an index) are unique, then you can use &lt;code&gt;pd.concat&lt;/code&gt;. Note that &lt;strong&gt;&lt;code&gt;pd.concat&lt;/code&gt; joins DataFrames on the index&lt;/strong&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Merge on `key` column. You&apos;ll need to set the index before concatenating&lt;/span&gt;\npd.concat(\n    [df.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; df &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dfs], axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, join=&lt;span class=&quot;hljs-string&quot;&gt;&apos;inner&apos;&lt;/span&gt;\n).reset_index()\n\n  key    valueA    valueB  valueC\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   D  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Merge on `key` index.&lt;/span&gt;\npd.concat(dfs2, axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, sort=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, join=&lt;span class=&quot;hljs-string&quot;&gt;&apos;inner&apos;&lt;/span&gt;)\n\n       valueA    valueB  valueC\nkey                            \nD    &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Omit &lt;code&gt;join=&apos;inner&apos;&lt;/code&gt; for a FULL OUTER JOIN. Note that you cannot specify LEFT or RIGHT OUTER joins (if you need these, use &lt;code&gt;join&lt;/code&gt;, described below).&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;strong&gt;Multiway merge on keys with duplicates&lt;/strong&gt;&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;concat&lt;/code&gt; is fast, but has its shortcomings. It cannot handle duplicates.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;A3 = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;valueA&apos;&lt;/span&gt;: np.random.randn(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)})\npd.concat([df.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; df &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [A3, B, C]], axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, join=&lt;span class=&quot;hljs-string&quot;&gt;&apos;inner&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;ValueError: Shape of passed values is (3, 4), indices imply (3, 2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In this situation, we can use &lt;code&gt;join&lt;/code&gt; since it can handle non-unique keys (note that &lt;code&gt;join&lt;/code&gt; joins DataFrames on their index; it calls &lt;code&gt;merge&lt;/code&gt; under the hood and does a LEFT OUTER JOIN unless otherwise specified).&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Join on `key` column. Set as the index first.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# For inner join. For left join, omit the &quot;how&quot; argument.&lt;/span&gt;\nA.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;).join([B2, C2], how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;inner&apos;&lt;/span&gt;).reset_index()\n\n  key    valueA    valueB  valueC\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   D  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Join on `key` index.&lt;/span&gt;\nA3.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;).join([B2, C2], how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;inner&apos;&lt;/span&gt;)\n\n       valueA    valueB  valueC\nkey                            \nD    &lt;span class=&quot;hljs-number&quot;&gt;1.454274&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;\nD    &lt;span class=&quot;hljs-number&quot;&gt;0.761038&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;hr&gt;\n&lt;h1&gt;Continue Reading&lt;/h1&gt;\n&lt;p&gt;Jump to other topics in Pandas Merging 101 to continue learning:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/53645883/4909087&quot;&gt;Merging basics - basic types of joins&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/65167356/4909087&quot;&gt;Index-based joins&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/65167327/4909087&quot;&gt;Generalizing to multiple DataFrames&lt;/a&gt; &lt;sup&gt;*&lt;/sup&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/53699013/4909087&quot;&gt;Cross join&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;sub&gt;* you are here &lt;/sub&gt;&lt;/p&gt;\n    "]},"randomTags":[{"name":"concatenation","slug":"concatenation"},{"name":"user-interface","slug":"user-interface"},{"name":"memory-management","slug":"memory-management"},{"name":"iife","slug":"iife"},{"name":"strcmp","slug":"strcmp"},{"name":"sql-injection","slug":"sql-injection"},{"name":"transpose","slug":"transpose"},{"name":"kill","slug":"kill"},{"name":"flatten","slug":"flatten"},{"name":"friendly-url","slug":"friendly-url"},{"name":"sqlite","slug":"sqlite"},{"name":"copy-elision","slug":"copy-elision"},{"name":"units-of-measurement","slug":"units-of-measurement"},{"name":"intersection","slug":"intersection"},{"name":"firefox","slug":"firefox"},{"name":"nosuchelementexception","slug":"nosuchelementexception"},{"name":"cryptography","slug":"cryptography"},{"name":"vba","slug":"vba"},{"name":"standards","slug":"standards"},{"name":"haversine","slug":"haversine"}]},"__N_SSG":true}