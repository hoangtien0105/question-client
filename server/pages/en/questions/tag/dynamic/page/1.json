{"pageProps":{"data":{"count":1,"rows":[{"id":610,"title":"Deserialize JSON into C# dynamic object?","slug":"deserialize-json-into-c-dynamic-object-1657388568720","postType":"QUESTION","createdAt":"2022-07-09T17:42:48.000Z","updatedAt":"2022-07-09T17:42:48.000Z","tags":[{"id":2887,"name":"dynamic","slug":"dynamic","createdAt":"2022-07-09T17:42:48.000Z","updatedAt":"2022-07-09T17:42:48.000Z","Questions_Tags":{"questionId":610,"tagId":2887}}]}]},"slug":"dynamic","page":"1","answers":{"610":["\n&lt;p&gt;If you are happy to have a dependency upon the &lt;code&gt;System.Web.Helpers&lt;/code&gt; assembly, then you can use the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.web.helpers.json(v=vs.111).aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Json&lt;/code&gt;&lt;/a&gt; class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; data = Json.Decode(json);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is included with the MVC framework as an &lt;a href=&quot;https://stackoverflow.com/q/8037895/24874&quot;&gt;additional download&lt;/a&gt; to the .NET 4 framework. Be sure to give Vlad an upvote if that&apos;s helpful! However if you cannot assume the client environment includes this DLL, then read on.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;An alternative deserialisation approach is suggested &lt;a href=&quot;http://www.drowningintechnicaldebt.com/ShawnWeisfeld/archive/2010/08/22/using-c-4.0-and-dynamic-to-parse-json.aspx&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.  I modified the code slightly to fix a bug and suit my coding style.  All you need is this code and a reference to &lt;code&gt;System.Web.Extensions&lt;/code&gt; from your project:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Collections;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Collections.Generic;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Collections.ObjectModel;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Dynamic;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Linq;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Text;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Web.Script.Serialization;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DynamicJsonConverter&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;JavaScriptConverter&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Deserialize&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt; dictionary, Type type, JavaScriptSerializer serializer&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dictionary == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentNullException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dictionary&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; type == &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;) ? &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DynamicJsonObject(dictionary) : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IDictionary&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Serialize&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; obj, JavaScriptSerializer serializer&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Type&lt;/span&gt;&amp;gt; SupportedTypes&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ReadOnlyCollection&amp;lt;Type&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Type&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;[] { &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;) })); }\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;region&lt;/span&gt; Nested type: DynamicJsonObject&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DynamicJsonObject&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;DynamicObject&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt; _dictionary;\n\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DynamicJsonObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt; dictionary&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dictionary == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentNullException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dictionary&quot;&lt;/span&gt;);\n            _dictionary = dictionary;\n        }\n\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ToString&lt;/span&gt;()&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sb = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{&quot;&lt;/span&gt;);\n            ToString(sb);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sb.ToString();\n        }\n\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ToString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;StringBuilder sb&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; firstInDictionary = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pair &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _dictionary)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!firstInDictionary)\n                    sb.Append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;);\n                firstInDictionary = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = pair.Value;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = pair.Key;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;)\n                {\n                    sb.AppendFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{0}:\\&quot;{1}\\&quot;&quot;&lt;/span&gt;, name, &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;);\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;)\n                {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DynamicJsonObject((IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;).ToString(sb);\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ArrayList)\n                {\n                    sb.Append(name + &lt;span class=&quot;hljs-string&quot;&gt;&quot;:[&quot;&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; firstInArray = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arrayValue &lt;span class=&quot;hljs-title&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;ArrayList&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;\n                    {\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!firstInArray)\n                            sb.Append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;);\n                        firstInArray = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arrayValue &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;)\n                            &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DynamicJsonObject((IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;)arrayValue).ToString(sb);\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arrayValue &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;)\n                            sb.AppendFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\&quot;{0}\\&quot;&quot;&lt;/span&gt;, arrayValue);\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                            sb.AppendFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{0}&quot;&lt;/span&gt;, arrayValue);\n\n                    }\n                    sb.Append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;);\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                {\n                    sb.AppendFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{0}:{1}&quot;&lt;/span&gt;, name, &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;);\n                }\n            }\n            sb.Append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;}&quot;&lt;/span&gt;);\n        }\n\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TryGetMember&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;GetMemberBinder binder, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; result&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!_dictionary.TryGetValue(binder.Name, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; result))\n            {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// return null to avoid exception.  caller can check for null this way...&lt;/span&gt;\n                result = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            }\n\n            result = WrapResultObject(result);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TryGetIndex&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;GetIndexBinder binder, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;[] indexes, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; result&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (indexes.Length == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; indexes[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!_dictionary.TryGetValue(indexes[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].ToString(), &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; result))\n                {\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// return null to avoid exception.  caller can check for null this way...&lt;/span&gt;\n                    result = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                }\n\n                result = WrapResultObject(result);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            }\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;base&lt;/span&gt;.TryGetIndex(binder, indexes, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; result);\n        }\n\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WrapResultObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; result&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dictionary = result &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dictionary != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DynamicJsonObject(dictionary);\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arrayList = result &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; ArrayList;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arrayList != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; arrayList.Count &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arrayList[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IDictionary&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&amp;gt; \n                    ? &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;arrayList.Cast&amp;lt;IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;&amp;gt;(&lt;/span&gt;).&lt;span class=&quot;hljs-title&quot;&gt;Select&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DynamicJsonObject(x&lt;/span&gt;))) \n                    : &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;arrayList.Cast&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;(&lt;/span&gt;))&lt;/span&gt;;\n            }\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n        }\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endregion&lt;/span&gt;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can use it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; json = ...;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; serializer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JavaScriptSerializer();\nserializer.RegisterConverters(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;[] { &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DynamicJsonConverter() });\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; obj = serializer.Deserialize(json, &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, given a JSON string:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;{\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;Items&quot;&lt;/span&gt;:[\n    { &lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Price&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;12.3&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Grape&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Price&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3.21&lt;/span&gt; }\n  ],\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;Date&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;21/11/2010&quot;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following code will work at runtime:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; data = serializer.Deserialize(json, &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;));\n\ndata.Date; &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;21/11/2010&quot;&lt;/span&gt;\ndata.Items.Count; &lt;span class=&quot;hljs-comment&quot;&gt;// 2&lt;/span&gt;\ndata.Items[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].Name; &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Apple&quot;&lt;/span&gt;\ndata.Items[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].Price; &lt;span class=&quot;hljs-comment&quot;&gt;// 12.3 (as a decimal)&lt;/span&gt;\ndata.Items[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].Name; &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Grape&quot;&lt;/span&gt;\ndata.Items[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].Price; &lt;span class=&quot;hljs-comment&quot;&gt;// 3.21 (as a decimal)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s pretty simple using &lt;a href=&quot;http://james.newtonking.com/projects/json-net.aspx&quot; rel=&quot;noreferrer&quot;&gt;Json.NET&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; stuff = JsonConvert.DeserializeObject(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{ &apos;Name&apos;: &apos;Jon Smith&apos;, &apos;Address&apos;: { &apos;City&apos;: &apos;New York&apos;, &apos;State&apos;: &apos;NY&apos; }, &apos;Age&apos;: 42 }&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; name = stuff.Name;\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; address = stuff.Address.City;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also &lt;code&gt;using Newtonsoft.Json.Linq&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; stuff = JObject.Parse(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{ &apos;Name&apos;: &apos;Jon Smith&apos;, &apos;Address&apos;: { &apos;City&apos;: &apos;New York&apos;, &apos;State&apos;: &apos;NY&apos; }, &apos;Age&apos;: 42 }&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; name = stuff.Name;\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; address = stuff.Address.City;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Documentation: &lt;strong&gt;&lt;a href=&quot;http://www.newtonsoft.com/json/help/html/QueryJsonDynamic.htm&quot; rel=&quot;noreferrer&quot;&gt;Querying JSON with dynamic&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can do this using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.web.helpers.json(v=vs.111).aspx&quot; rel=&quot;noreferrer&quot;&gt;System.Web.Helpers.Json&lt;/a&gt; - its Decode method returns a dynamic object which you can traverse as you like.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s included in the System.Web.Helpers assembly (.NET 4.0).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dynamicObject = Json.Decode(jsonString);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;.NET 4.0 has a built-in library to do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Web.Script.Serialization;\nJavaScriptSerializer jss = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JavaScriptSerializer();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = jss.Deserialize&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;(str);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is the simplest way.&lt;/p&gt;\n    ","\n&lt;p&gt;Simple &quot;string JSON data&quot; to object without any third-party DLL file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;WebClient client = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WebClient();\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; getString = client.DownloadString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://graph.facebook.com/zuck&quot;&lt;/span&gt;);\n\nJavaScriptSerializer serializer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JavaScriptSerializer();\n&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; item = serializer.Deserialize&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;(getString);\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; name = item[&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//note: JavaScriptSerializer in this namespaces&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//System.Web.Script.Serialization.JavaScriptSerializer&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note: You can also using your custom object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Personel item = serializer.Deserialize&amp;lt;Personel&amp;gt;(getString);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can achieve that with the help of Newtonsoft.Json. Install it from NuGet and then:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Newtonsoft.Json;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; results = JsonConvert.DeserializeObject&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;(YOUR_JSON);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://github.com/jsonfx/jsonfx&quot; rel=&quot;nofollow noreferrer&quot;&gt;JsonFx&lt;/a&gt; can deserialize JSON content into dynamic objects.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Serialize to/from dynamic types (default for .NET 4.0):&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reader = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonReader(); &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; writer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonWriter();\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;{ &quot;&quot;foo&quot;&quot;: true, &quot;&quot;array&quot;&quot;: [ 42, false, &quot;&quot;Hello!&quot;&quot;, null ] }&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; output = reader.Read(input);\nConsole.WriteLine(output.array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;// 42&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; json = writer.Write(output);\nConsole.WriteLine(json); &lt;span class=&quot;hljs-comment&quot;&gt;// {&quot;foo&quot;:true,&quot;array&quot;:[42,false,&quot;Hello!&quot;,null]}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another way using &lt;a href=&quot;http://json.codeplex.com/&quot; rel=&quot;noreferrer&quot;&gt;Newtonsoft.Json&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; stuff = Newtonsoft.Json.JsonConvert.DeserializeObject(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{ color: &apos;red&apos;, value: 5 }&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; color = stuff.color;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = stuff.&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I made a new version of the DynamicJsonConverter that uses Expando Objects. I used expando objects, because I wanted to Serialize the dynamic back into JSON using Json.NET.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Collections;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Collections.Generic;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Collections.ObjectModel;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Dynamic;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Web.Script.Serialization;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DynamicJson&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Parse&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; json&lt;/span&gt;)&lt;/span&gt;\n    {\n        JavaScriptSerializer jss = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JavaScriptSerializer();\n        jss.RegisterConverters(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JavaScriptConverter[] { &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DynamicJsonConverter() });\n\n        &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; glossaryEntry = jss.Deserialize(json, &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; glossaryEntry;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DynamicJsonConverter&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;JavaScriptConverter&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Deserialize&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt; dictionary, Type type, JavaScriptSerializer serializer&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dictionary == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentNullException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dictionary&quot;&lt;/span&gt;);\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = ToExpando(dictionary);\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; type == &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;) ? result : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; ExpandoObject &lt;span class=&quot;hljs-title&quot;&gt;ToExpando&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt; dictionary&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ExpandoObject();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dic = result &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; IDictionary&amp;lt;String, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dictionary)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; valueAsDic = item.Value &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (valueAsDic != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n                {\n                    dic.Add(item.Key, ToExpando(valueAsDic));\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arrayList = item.Value &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; ArrayList;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arrayList != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; arrayList.Count &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n                {\n                    dic.Add(item.Key, ToExpando(arrayList));\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n                }\n\n                dic.Add(item.Key, item.Value);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n        }\n\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; ArrayList &lt;span class=&quot;hljs-title&quot;&gt;ToExpando&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ArrayList obj&lt;/span&gt;)&lt;/span&gt;\n        {\n            ArrayList result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList();\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; valueAsDic = item &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (valueAsDic != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n                {\n                    result.Add(ToExpando(valueAsDic));\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n                }\n\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arrayList = item &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; ArrayList;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arrayList != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; arrayList.Count &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n                {\n                    result.Add(ToExpando(arrayList));\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n                }\n\n                result.Add(item);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n        }\n\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IDictionary&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;object&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Serialize&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; obj, JavaScriptSerializer serializer&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();\n        }\n\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Type&lt;/span&gt;&amp;gt; SupportedTypes&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ReadOnlyCollection&amp;lt;Type&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;Type&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;[] { &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;) })); }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Creating dynamic objects with &lt;a href=&quot;https://www.newtonsoft.com/json&quot; rel=&quot;noreferrer&quot;&gt;Newtonsoft.Json&lt;/a&gt; works really great.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//json is your string containing the JSON value&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; data = JsonConvert.DeserializeObject&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;(json);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now you can access the &lt;code&gt;data&lt;/code&gt; object just like if it was a regular object. This is the JSON object we currently have as an example:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;{ &lt;span class=&quot;hljs-string&quot;&gt;&quot;ID&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jack&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Numbers&quot;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is how you access it after deserialization:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;data.ID &lt;span class=&quot;hljs-comment&quot;&gt;//Retrieve the int&lt;/span&gt;\ndata.Name &lt;span class=&quot;hljs-comment&quot;&gt;//Retrieve the string&lt;/span&gt;\ndata.Numbers[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;//Retrieve the first element in the array&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I came here to find an answer for .NET Core, without any third-party or additional references. It works fine if you use &lt;code&gt;ExpandoObject&lt;/code&gt; with the standard &lt;code&gt;JsonSerializer&lt;/code&gt; class. Here is the example that worked for me:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Text.Json;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Dynamic;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; json = JsonSerializer.Deserialize&amp;lt;ExpandoObject&amp;gt;(jsonText);\nConsole.WriteLine(json.name);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code prints out the string value of a &lt;code&gt;name&lt;/code&gt; property that exists within the JSON text passed into the &lt;code&gt;Deserialize&lt;/code&gt; method. Voila - no additional libraries, no nothing. Just .NET core.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: May have a problem for several levels of json with nested elements. Worked for a single-level flat object.&lt;/p&gt;\n    ","\n&lt;p&gt;I use &lt;a href=&quot;http://json2csharp.com/&quot; rel=&quot;noreferrer&quot;&gt;http://json2csharp.com/&lt;/a&gt; to get a class representing the JSON object.&lt;/p&gt;\n\n&lt;p&gt;Input:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;{\n   &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;,\n   &lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;,\n   &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;New York&quot;&lt;/span&gt;,\n   &lt;span class=&quot;hljs-string&quot;&gt;&quot;Childs&quot;&lt;/span&gt;:[\n      {\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jim&quot;&lt;/span&gt;,\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;\n      },\n      {\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tim&quot;&lt;/span&gt;,\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n      }\n   ]\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Child&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; name { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; age { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Person&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; name { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; age { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; city { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;Child&amp;gt; Childs { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After that I use &lt;a href=&quot;http://www.newtonsoft.com/json&quot; rel=&quot;noreferrer&quot;&gt;Newtonsoft.Json&lt;/a&gt; to fill the class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Newtonsoft.Json;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GitRepositoryCreator.Common&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;JObjects&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; p_object&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; JsonConvert.SerializeObject(p_object);\n        }\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;Get&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; p_object&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; JsonConvert.DeserializeObject&amp;lt;T&amp;gt;(p_object);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can call it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Person jsonClass = JObjects.Get&amp;lt;Person&amp;gt;(stringJson);\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; stringJson = JObjects.Get(jsonClass);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If your JSON variable name is not a valid C# name (name starts with &lt;code&gt;$&lt;/code&gt;) you can fix that like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Exception&lt;/span&gt;\n{\n   [&lt;span class=&quot;hljs-meta&quot;&gt;JsonProperty(PropertyName = &lt;span class=&quot;hljs-string&quot;&gt;&quot;$id&quot;&lt;/span&gt;)&lt;/span&gt;]\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; id { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; innerException { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; message { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; typeName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; typeKey { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; errorCode { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; eventId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The simplest way is:&lt;/p&gt;\n\n&lt;p&gt;Just include this &lt;a href=&quot;https://jdynamic.codeplex.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;DLL file&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Use the code like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; json = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JDynamic(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{a:&apos;abc&apos;}&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// json.a is a string &quot;abc&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; json = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JDynamic(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{a:3.1416}&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// json.a is 3.1416m&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; json = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JDynamic(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{a:1}&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// json.a is&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; json = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JDynamic(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[1,2,3]&quot;&lt;/span&gt;);\n/json.Length/json.Count &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// And you can use json[0]/ json[2] to get the elements&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; json = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JDynamic(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{a:[1,2,3]}&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//json.a.Length /json.a.Count is 3.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// And you can use  json.a[0]/ json.a[2] to get the elements&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; json = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JDynamic(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[{b:1},{c:1}]&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// json.Length/json.Count is 2.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// And you can use the  json[0].b/json[1].c to get the num.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another option is to &lt;em&gt;&quot;Paste JSON as classes&quot;&lt;/em&gt; so it can be deserialised quick and easy.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Simply copy your entire JSON&lt;/li&gt;\n&lt;li&gt;In Visual Studio: Click &lt;em&gt;Edit&lt;/em&gt;  &lt;em&gt;Paste Special&lt;/em&gt;  &lt;em&gt;Paste JSON as classes&lt;/em&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Here is a better explanation n piccas... &lt;em&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/webdev/2012/12/18/paste-json-as-classes-in-asp-net-and-web-tools-2012-2-rc/&quot; rel=&quot;noreferrer&quot;&gt;Paste JSON As Classes in ASP.NET and Web Tools 2012.2 RC&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can extend the JavaScriptSerializer to recursively copy the dictionary it created to expando object(s) and then use them dynamically:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;JavaScriptSerializerExtensions&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DeserializeDynamic&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; JavaScriptSerializer serializer, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dictionary = serializer.Deserialize&amp;lt;IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; GetExpando(dictionary);\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; ExpandoObject &lt;span class=&quot;hljs-title&quot;&gt;GetExpando&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt; dictionary&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; expando = (IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ExpandoObject();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dictionary)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; innerDictionary = item.Value &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (innerDictionary != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            {\n                expando.Add(item.Key, GetExpando(innerDictionary));\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            {\n                expando.Add(item.Key, item.Value);\n            }\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (ExpandoObject)expando;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you just need to having a using statement for the namespace you defined the extension in (consider just defining them in System.Web.Script.Serialization... another trick is to not use a namespace, then you don&apos;t need the using statement at all) and you can consume them like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; serializer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JavaScriptSerializer();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = serializer.DeserializeDynamic(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{ &apos;Name&apos;: &apos;Jon Smith&apos;, &apos;Address&apos;: { &apos;City&apos;: &apos;New York&apos;, &apos;State&apos;: &apos;NY&apos; }, &apos;Age&apos;: 42 }&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;.Name; &lt;span class=&quot;hljs-comment&quot;&gt;// Jon Smith&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; age = (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;.Age;      &lt;span class=&quot;hljs-comment&quot;&gt;// 42&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; address = &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;.Address;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; city = (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;)address.City;   &lt;span class=&quot;hljs-comment&quot;&gt;// New York&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; state = (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;)address.State; &lt;span class=&quot;hljs-comment&quot;&gt;// NY&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;code&gt;using Newtonsoft.Json&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jRoot = \n JsonConvert.DeserializeObject&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;(Encoding.UTF8.GetString(resolvedEvent.Event.Data));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;resolvedEvent.Event.Data&lt;/code&gt; is my response getting from calling core Event .&lt;/p&gt;\n    ","\n&lt;p&gt;I am using like this in my code and it&apos;s working fine&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Web.Script.Serialization;\nJavaScriptSerializer oJS = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JavaScriptSerializer();\nRootObject oRootObject = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RootObject();\noRootObject = oJS.Deserialize&amp;lt;RootObject&amp;gt;(Your JSon String);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Look at the article I wrote on CodeProject, one that answers the question precisely:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.codeproject.com/Tips/631586/Dynamic-types-with-JSON-NET&quot; rel=&quot;nofollow&quot;&gt;Dynamic types with JSON.NET&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;There is way too much for re-posting it all here, and even less point since that article has an attachment with the key/required source file.&lt;/p&gt;\n    ","\n&lt;p&gt;Try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; units = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; { Name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Phone&quot;&lt;/span&gt;, Color= &lt;span class=&quot;hljs-string&quot;&gt;&quot;White&quot;&lt;/span&gt; };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonResponse = JsonConvert.DeserializeAnonymousType(json, units);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For that I would use JSON.NET to do the low-level parsing of the JSON stream and then build up the object hierarchy out of instances of the &lt;code&gt;ExpandoObject&lt;/code&gt; class.&lt;/p&gt;\n    ","\n&lt;p&gt;To get an ExpandoObject:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Newtonsoft.Json;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Newtonsoft.Json.Converters;\n\nContainer container = JsonConvert.Deserialize&amp;lt;Container&amp;gt;(jsonAsString, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ExpandoObjectConverter());\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Deserializing in JSON.NET can be dynamic using the &lt;code&gt;JObject&lt;/code&gt; class, which is included in that library.  My JSON string represents these classes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Foo&lt;/span&gt; {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; Age {&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;;&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;;}\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Bar Bar {&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;;&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;;}\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Bar&lt;/span&gt; {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; DateTime BDay {&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;;&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;;}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now we deserialize the string WITHOUT referencing the above classes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dyn = JsonConvert.DeserializeObject&amp;lt;JObject&amp;gt;(jsonAsFooString);\n\nJProperty propAge = dyn.Properties().FirstOrDefault(i=&amp;gt;i.Name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Age&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(propAge != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; age = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;.Parse(propAge.Value.ToString());\n    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;age=&quot;&lt;/span&gt; + age);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//or as a one-liner:&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; myage = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;.Parse(dyn.Properties().First(i=&amp;gt;i.Name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Age&quot;&lt;/span&gt;).Value.ToString());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or if you want to go deeper:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; propBar = dyn.Properties().FirstOrDefault(i=&amp;gt;i.Name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bar&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(propBar != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n    JObject o = (JObject)propBar.First();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; propBDay = o.Properties().FirstOrDefault (i =&amp;gt; i.Name==&lt;span class=&quot;hljs-string&quot;&gt;&quot;BDay&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(propBDay != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        DateTime bday = DateTime.Parse(propBDay.Value.ToString());\n        Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;birthday=&quot;&lt;/span&gt; + bday.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MM/dd/yyyy&quot;&lt;/span&gt;));\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//or as a one-liner:&lt;/span&gt;\nDateTime mybday = DateTime.Parse(((JObject)dyn.Properties().First(i=&amp;gt;i.Name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bar&quot;&lt;/span&gt;).First()).Properties().First(i=&amp;gt;i.Name == &lt;span class=&quot;hljs-string&quot;&gt;&quot;BDay&quot;&lt;/span&gt;).Value.ToString());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://chadkuehn.com/deserializing-json-into-a-dynamic-object/&quot; rel=&quot;nofollow&quot;&gt;post&lt;/a&gt; for a complete example.&lt;/p&gt;\n    ","\n&lt;p&gt;The object you want DynamicJSONObject is included in the System.Web.Helpers.dll from the ASP.NET Web Pages package, which is part of WebMatrix.&lt;/p&gt;\n    ","\n&lt;p&gt;There is a lightweight JSON library for C# called &lt;a href=&quot;https://github.com/facebook-csharp-sdk/simple-json&quot; rel=&quot;nofollow noreferrer&quot;&gt;SimpleJson&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;It supports .NET 3.5+, Silverlight and Windows Phone 7.&lt;/p&gt;\n\n&lt;p&gt;It supports dynamic for .NET 4.0&lt;/p&gt;\n\n&lt;p&gt;It can also be installed as a NuGet package&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Install-Package SimpleJson\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use DataSet(C#) with JavaScript. A simple function for creating a JSON stream with DataSet input. Create JSON content like (multi table dataset):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;[[{a:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,b:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,c:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;},{a:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,b:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,c:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;}],[{a:&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,b:&lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;,c:&lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;},{a:&lt;span class=&quot;hljs-number&quot;&gt;58&lt;/span&gt;,b:&lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;,c:&lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;}]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just client side, use eval. For example,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = eval(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[[{a:1,b:2,c:3},{a:3,b:5,c:6}],[{a:23,b:45,c:35},{a:58,b:59,c:45}]]&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;d[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].a &lt;span class=&quot;hljs-comment&quot;&gt;// out 1 from table 0 row 0&lt;/span&gt;\n\nd[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].b &lt;span class=&quot;hljs-comment&quot;&gt;// out 59 from table 1 row 1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Created by Behnam Mohammadi And Saeed Ahmadian&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;jsonMini&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;DataSet ds&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; t = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, r = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; stream = &lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (t = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; t &amp;lt; ds.Tables.Count; t++)\n    {\n        stream += &lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (r = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; r &amp;lt; ds.Tables[t].Rows.Count; r++)\n        {\n            stream += &lt;span class=&quot;hljs-string&quot;&gt;&quot;{&quot;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; c &amp;lt; ds.Tables[t].Columns.Count; c++)\n            {\n                stream += ds.Tables[t].Columns[c].ToString() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;:&apos;&quot;&lt;/span&gt; +\n                          ds.Tables[t].Rows[r][c].ToString() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;,&quot;&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n                stream = stream.Substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, stream.Length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n            stream += &lt;span class=&quot;hljs-string&quot;&gt;&quot;},&quot;&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (r&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            stream = stream.Substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, stream.Length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        stream += &lt;span class=&quot;hljs-string&quot;&gt;&quot;],&quot;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (t&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        stream = stream.Substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, stream.Length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    stream += &lt;span class=&quot;hljs-string&quot;&gt;&quot;];&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; stream;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;How to parse easy JSON content with dynamic &amp;amp; JavaScriptSerializer&lt;/h2&gt;\n\n&lt;p&gt;Please add reference of &lt;strong&gt;System.Web.Extensions&lt;/strong&gt; and add this namespace &lt;code&gt;using System.Web.Script.Serialization;&lt;/code&gt; at top:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;EasyJson&lt;/span&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonText = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;{\n        &quot;&quot;some_number&quot;&quot;: 108.541,\n        &quot;&quot;date_time&quot;&quot;: &quot;&quot;2011-04-13T15:34:09Z&quot;&quot;,\n        &quot;&quot;serial_number&quot;&quot;: &quot;&quot;SN1234&quot;&quot;\n    }&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jss = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JavaScriptSerializer();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dict = jss.Deserialize&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;(jsonText);\n\n    Console.WriteLine(dict[&lt;span class=&quot;hljs-string&quot;&gt;&quot;some_number&quot;&lt;/span&gt;]);\n    Console.ReadLine();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;How to parse nested &amp;amp; complex json with dynamic &amp;amp; JavaScriptSerializer&lt;/h2&gt;\n\n&lt;p&gt;Please add reference of &lt;strong&gt;System.Web.Extensions&lt;/strong&gt; and add this namespace &lt;code&gt;using System.Web.Script.Serialization;&lt;/code&gt; at top:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ComplexJson&lt;/span&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonText = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;{\n        &quot;&quot;some_number&quot;&quot;: 108.541,\n        &quot;&quot;date_time&quot;&quot;: &quot;&quot;2011-04-13T15:34:09Z&quot;&quot;,\n        &quot;&quot;serial_number&quot;&quot;: &quot;&quot;SN1234&quot;&quot;,\n        &quot;&quot;more_data&quot;&quot;: {\n            &quot;&quot;field1&quot;&quot;: 1.0,\n            &quot;&quot;field2&quot;&quot;: &quot;&quot;hello&quot;&quot;\n        }\n    }&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jss = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JavaScriptSerializer();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dict = jss.Deserialize&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;(jsonText);\n\n    Console.WriteLine(dict[&lt;span class=&quot;hljs-string&quot;&gt;&quot;some_number&quot;&lt;/span&gt;]);\n    Console.WriteLine(dict[&lt;span class=&quot;hljs-string&quot;&gt;&quot;more_data&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;field2&quot;&lt;/span&gt;]);\n    Console.ReadLine();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I want to do this programmatically in unit tests, I do have the luxury of typing it out.&lt;/p&gt;\n&lt;p&gt;My solution is:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dict = JsonConvert.DeserializeObject&amp;lt;ExpandoObject&amp;gt;(json) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; IDictionary&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now I can assert that&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;dict.ContainsKey(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ExpectedProperty&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With &lt;a href=&quot;https://www.nuget.org/packages/ChoETL.JSON/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Cinchoo ETL&lt;/a&gt; - an open source library available to parse JSON into a dynamic object:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; json = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;{\n    &quot;&quot;key1&quot;&quot;: [\n        {\n            &quot;&quot;action&quot;&quot;: &quot;&quot;open&quot;&quot;,\n            &quot;&quot;timestamp&quot;&quot;: &quot;&quot;2018-09-05 20:46:00&quot;&quot;,\n            &quot;&quot;url&quot;&quot;: null,\n            &quot;&quot;ip&quot;&quot;: &quot;&quot;66.102.6.98&quot;&quot;\n        }\n    ]\n}&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = ChoJSONReader.LoadText(json)\n    .WithJSONPath(&lt;span class=&quot;hljs-string&quot;&gt;&quot;$..key1&quot;&lt;/span&gt;)\n    )\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rec &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; p)\n    {\n        Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Action: &quot;&lt;/span&gt; + rec.action);\n        Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Timestamp: &quot;&lt;/span&gt; + rec.timestamp);\n        Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;URL: &quot;&lt;/span&gt; + rec.url);\n        Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;IP address: &quot;&lt;/span&gt; + rec.ip);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Action: open\nTimestamp: &lt;span class=&quot;hljs-number&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-09&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-05&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;\nURL: http:&lt;span class=&quot;hljs-comment&quot;&gt;//www.google.com&lt;/span&gt;\nIP address: &lt;span class=&quot;hljs-number&quot;&gt;66.102&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.98&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Sample fiddle: &lt;a href=&quot;https://dotnetfiddle.net/S0ehSV&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://dotnetfiddle.net/S0ehSV&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;For more information, please visit &lt;a href=&quot;https://www.codeproject.com/search.aspx?q=cinchoo%20etl&quot; rel=&quot;nofollow noreferrer&quot;&gt;codeproject&lt;/a&gt; articles&lt;/p&gt;\n&lt;p&gt;Disclaimer: I&apos;m the author of this library.&lt;/p&gt;\n    ","\n&lt;p&gt;try this way!&lt;/p&gt;\n&lt;p&gt;JSON example:&lt;/p&gt;\n&lt;pre class=&quot;lang-json s-code-block&quot;&gt;&lt;code class=&quot;hljs language-json&quot;&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;group&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;creation_date&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;123456&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;created_by&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;xxx@gmail.co&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;xxxxx&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;141&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;group&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;xxxx&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;creation_date&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;123456&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;created_by&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;xxx@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;xxxxx&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;C# code:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsonString = (File.ReadAllText(Path.Combine(Directory.GetCurrentDirectory(),&lt;span class=&quot;hljs-string&quot;&gt;&quot;delete_result.json&quot;&lt;/span&gt;)));\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objects = JsonConvert.DeserializeObject&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;&amp;gt;(jsonString);\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; objects)\n{\n    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;$&quot;&lt;span class=&quot;hljs-subst&quot;&gt;{o.id.ToString()}&lt;/span&gt;&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to skip creating a class while deserializing JSON, you can do it using &lt;a href=&quot;https://github.com/JamesNK/Newtonsoft.Json&quot; rel=&quot;nofollow noreferrer&quot;&gt;NewtonSoft.Json&lt;/a&gt;&apos;s &lt;a href=&quot;https://www.newtonsoft.com/json/help/html/DeserializeAnonymousType.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;DeserializeAnonymousType&lt;/a&gt; method.&lt;/p&gt;\n&lt;p&gt;The below example can even deserialize JSON to a &lt;strong&gt;list&lt;/strong&gt; of anonymous objects.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; json = System.IO.File.ReadAllText(&lt;span class=&quot;hljs-string&quot;&gt;@&quot;C:\\TestJSONFiles\\yourJSONFile.json&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fooDefinition = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; { a = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, b = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; }; &lt;span class=&quot;hljs-comment&quot;&gt;// type with fields of string, int&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fooListDefinition = Enumerable.Range(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).Select(e =&amp;gt; fooDefinition).ToList();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foos = JsonConvert.DeserializeAnonymousType(json, fooListDefinition);\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"this","slug":"this"},{"name":"double-quotes","slug":"double-quotes"},{"name":"flush","slug":"flush"},{"name":"jvm","slug":"jvm"},{"name":"arrayindexoutofboundsexception","slug":"arrayindexoutofboundsexception"},{"name":"mysqli","slug":"mysqli"},{"name":"excel-formula","slug":"excel-formula"},{"name":"uiviewcontroller","slug":"uiviewcontroller"},{"name":"android-softkeyboard","slug":"android-softkeyboard"},{"name":"identity","slug":"identity"},{"name":"linked-list","slug":"linked-list"},{"name":"x86-64","slug":"x86-64"},{"name":"http","slug":"http"},{"name":"environment-variables","slug":"environment-variables"},{"name":"dom-traversal","slug":"dom-traversal"},{"name":"universal-image-loader","slug":"universal-image-loader"},{"name":"numpy","slug":"numpy"},{"name":"java","slug":"java"},{"name":"passwords","slug":"passwords"},{"name":"boolean-expression","slug":"boolean-expression"}]},"__N_SSG":true}