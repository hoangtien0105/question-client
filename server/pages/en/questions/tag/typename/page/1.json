{"pageProps":{"data":{"count":1,"rows":[{"id":65,"title":"Where and why do I have to put the \"template\" and \"typename\" keywords?","slug":"where-and-why-do-i-have-to-put-the-\"template\"-and-\"typename\"-keywords-1657384467606","postType":"QUESTION","createdAt":"2022-07-09T16:34:27.000Z","updatedAt":"2022-07-09T16:34:27.000Z","tags":[{"id":239,"name":"typename","slug":"typename","createdAt":"2022-07-09T16:34:27.000Z","updatedAt":"2022-07-09T16:34:27.000Z","Questions_Tags":{"questionId":65,"tagId":239}}]}]},"slug":"typename","page":"1","answers":{"65":["\n&lt;p&gt;(See &lt;a href=&quot;https://stackoverflow.com/a/17579889/4561887&quot;&gt;here also for my C++11 answer&lt;/a&gt;)&lt;/p&gt;\n\n&lt;p&gt;In order to parse a C++ program, the compiler needs to know whether certain names are types or not. The following example demonstrates that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;t * f;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How should this be parsed? For many languages a compiler doesn&apos;t need to know the meaning of a name in order to parse and basically know what action a line of code does. In C++, the above however can yield vastly different interpretations depending on what &lt;code&gt;t&lt;/code&gt; means. If it&apos;s a type, then it will be a declaration of a pointer &lt;code&gt;f&lt;/code&gt;. However if it&apos;s not a type, it will be a multiplication. So the C++ Standard says at paragraph (3/7):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Some names denote types or templates. In general, whenever a name is encountered it is necessary to determine whether that name denotes one of these entities before continuing to parse the program that contains it. The process that determines this is called name lookup.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;How will the compiler find out what a name &lt;code&gt;t::x&lt;/code&gt; refers to, if &lt;code&gt;t&lt;/code&gt; refers to a template type parameter? &lt;code&gt;x&lt;/code&gt; could be a static int data member that could be multiplied or could equally well be a nested class or typedef that could yield to a declaration. &lt;strong&gt;If a name has this property - that it can&apos;t be looked up until the actual template arguments are known - then it&apos;s called a &lt;em&gt;dependent name&lt;/em&gt; (it &quot;depends&quot; on the template parameters).&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;You might recommend to just wait till the user instantiates the template: &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;em&gt;Let&apos;s wait until the user instantiates the template, and then later find out the real meaning of &lt;code&gt;t::x * f;&lt;/code&gt;.&lt;/em&gt; &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This will work and actually is allowed by the Standard as a possible implementation approach. These compilers basically copy the template&apos;s text into an internal buffer, and only when an instantiation is needed, they parse the template and possibly detect errors in the definition. But instead of bothering the template&apos;s users (poor colleagues!) with errors made by a template&apos;s author, other implementations choose to check templates early on and give errors in the definition as soon as possible, before an instantiation even takes place. &lt;/p&gt;\n\n&lt;p&gt;So there has to be a way to tell the compiler that certain names are types and that certain names aren&apos;t. &lt;/p&gt;\n\n&lt;h2&gt;The &quot;typename&quot; keyword&lt;/h2&gt;\n\n&lt;p&gt;The answer is: &lt;em&gt;We&lt;/em&gt; decide how the compiler should parse this. If &lt;code&gt;t::x&lt;/code&gt; is a dependent name, then we need to prefix it by &lt;code&gt;typename&lt;/code&gt; to tell the compiler to parse it in a certain way. The Standard says at (14.6/2):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A name used in a template declaration or definition and that is dependent on a template-parameter is\n  assumed not to name a type unless the applicable name lookup finds a type name or the name is qualified\n  by the keyword typename. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;There are many names for which &lt;code&gt;typename&lt;/code&gt; is not necessary, because the compiler can, with the applicable name lookup in the template definition, figure out how to parse a construct itself - for example with &lt;code&gt;T *f;&lt;/code&gt;, when &lt;code&gt;T&lt;/code&gt; is a type template parameter. But for &lt;code&gt;t::x * f;&lt;/code&gt; to be a declaration, it must be written as &lt;code&gt;typename t::x *f;&lt;/code&gt;. If you omit the keyword and the name is taken to be a non-type, but when instantiation finds it denotes a type, the usual error messages are emitted by the compiler. Sometimes, the error consequently is given at definition time:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// t::x is taken as non-type, but as an expression the following misses an&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// operator between the two names or a semicolon separating them.&lt;/span&gt;\nt::x f;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;The syntax allows &lt;code&gt;typename&lt;/code&gt; only before qualified names&lt;/em&gt; - it is therefor taken as granted that unqualified names are always known to refer to types if they do so.&lt;/p&gt;\n\n&lt;p&gt;A similar gotcha exists for names that denote templates, as hinted at by the introductory text.&lt;/p&gt;\n\n&lt;h2&gt;The &quot;template&quot; keyword&lt;/h2&gt;\n\n&lt;p&gt;Remember the initial quote above and how the Standard requires special handling for templates as well? Let&apos;s take the following innocent-looking example: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;boost::function&amp;lt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;() &amp;gt; f;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It might look obvious to a human reader. Not so for the compiler. Imagine the following arbitrary definition of &lt;code&gt;boost::function&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; boost { &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; function = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; }\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{ \n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; f = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  boost::function&amp;lt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;() &amp;gt; f; \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s actually a valid &lt;em&gt;expression&lt;/em&gt;! It uses the less-than operator to compare &lt;code&gt;boost::function&lt;/code&gt; against zero (&lt;code&gt;int()&lt;/code&gt;), and then uses the greater-than operator to compare the resulting &lt;code&gt;bool&lt;/code&gt; against &lt;code&gt;f&lt;/code&gt;. However as you might well know, &lt;code&gt;boost::function&lt;/code&gt; &lt;a href=&quot;http://www.boost.org/doc/libs/1_54_0/doc/html/function.html&quot; rel=&quot;noreferrer&quot;&gt;in real life&lt;/a&gt; is a template, so the compiler knows (14.2/3):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;After name lookup (3.4) finds that a name is a template-name, if this name is followed by a &amp;lt;, the &amp;lt; is\n  always taken as the beginning of a template-argument-list and never as a name followed by the less-than\n  operator.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Now we are back to the same problem as with &lt;code&gt;typename&lt;/code&gt;. What if we can&apos;t know yet whether the name is a template when parsing the code? We will need to insert &lt;code&gt;template&lt;/code&gt; immediately before the template name, as specified by &lt;code&gt;14.2/4&lt;/code&gt;. This looks like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;t::&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;f&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// call a function template&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Template names can not only occur after a &lt;code&gt;::&lt;/code&gt; but also after a &lt;code&gt;-&amp;gt;&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; in a class member access. You need to insert the keyword there too:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;f&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// call a function template&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Dependencies&lt;/h2&gt;\n\n&lt;p&gt;For the people that have thick Standardese books on their shelf and that want to know what exactly I was talking about, I&apos;ll talk a bit about how this is specified in the Standard.&lt;/p&gt;\n\n&lt;p&gt;In template declarations some constructs have different meanings depending on what template arguments you use to instantiate the template: Expressions may have different types or values, variables may have different types or function calls might end up calling different functions. Such constructs are generally said to &lt;em&gt;depend&lt;/em&gt; on template parameters.&lt;/p&gt;\n\n&lt;p&gt;The Standard defines precisely the rules by whether a construct is dependent or not. It separates them into logically different groups: One catches types, another catches expressions. Expressions may depend by their value and/or their type. So we have, with typical examples appended:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Dependent types (e.g: a type template parameter &lt;code&gt;T&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;Value-dependent expressions (e.g: a non-type template parameter &lt;code&gt;N&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;Type-dependent expressions (e.g: a cast to a type template parameter &lt;code&gt;(T)0&lt;/code&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Most of the rules are intuitive and are built up recursively: For example, a type constructed as &lt;code&gt;T[N]&lt;/code&gt; is a dependent type if &lt;code&gt;N&lt;/code&gt; is a value-dependent expression or &lt;code&gt;T&lt;/code&gt; is a dependent type. The details of this can be read in section &lt;code&gt;(14.6.2/1&lt;/code&gt;) for dependent types, &lt;code&gt;(14.6.2.2)&lt;/code&gt; for type-dependent expressions and &lt;code&gt;(14.6.2.3)&lt;/code&gt; for value-dependent expressions. &lt;/p&gt;\n\n&lt;h3&gt;Dependent names&lt;/h3&gt;\n\n&lt;p&gt;The Standard is a bit unclear about what &lt;em&gt;exactly&lt;/em&gt; is a &lt;em&gt;dependent name&lt;/em&gt;. On a simple read (you know, the principle of least surprise), all it defines as a &lt;em&gt;dependent name&lt;/em&gt; is the special case for function names below. But since clearly &lt;code&gt;T::x&lt;/code&gt; also needs to be looked up in the instantiation context, it also needs to be a dependent name (fortunately, as of mid C++14 the committee has started to look into how to fix this confusing definition). &lt;/p&gt;\n\n&lt;p&gt;To avoid this problem, I have resorted to a simple interpretation of the Standard text. Of all the constructs that denote dependent types or expressions, a subset of them represent names. Those names are therefore &quot;dependent names&quot;. A name can take different forms - the Standard says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A name is a use of an identifier (2.11), operator-function-id (13.5), conversion-function-id (12.3.2), or template-id (14.2) that denotes an entity or label (6.6.4, 6.1)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;An identifier is just a plain sequence of characters / digits, while the next two are the &lt;code&gt;operator +&lt;/code&gt; and &lt;code&gt;operator type&lt;/code&gt; form. The last form is &lt;code&gt;template-name &amp;lt;argument list&amp;gt;&lt;/code&gt;. All these are names, and by conventional use in the Standard, a name can also include qualifiers that say what namespace or class a name should be looked up in.&lt;/p&gt;\n\n&lt;p&gt;A value dependent expression &lt;code&gt;1 + N&lt;/code&gt; is not a name, but &lt;code&gt;N&lt;/code&gt; is. The subset of all dependent constructs that are names is called &lt;em&gt;dependent name&lt;/em&gt;. Function names, however, may have different meaning in different instantiations of a template, but unfortunately are not caught by this general rule. &lt;/p&gt;\n\n&lt;h3&gt;Dependent function names&lt;/h3&gt;\n\n&lt;p&gt;Not primarily a concern of this article, but still worth mentioning: Function names are an exception that are handled separately. An identifier function name is dependent not by itself, but by the type dependent argument expressions used in a call. In the example &lt;code&gt;f((T)0)&lt;/code&gt;, &lt;code&gt;f&lt;/code&gt; is a dependent name. In the Standard, this is specified at &lt;code&gt;(14.6.2/1)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Additional notes and examples&lt;/h2&gt;\n\n&lt;p&gt;In enough cases we need both of &lt;code&gt;typename&lt;/code&gt; and &lt;code&gt;template&lt;/code&gt;. Your code should look like the following&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Tail&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnionNode&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Tail {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; U&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;inUnion&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Tail::&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; inUnion&amp;lt;U&amp;gt; dummy;\n    };\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The keyword &lt;code&gt;template&lt;/code&gt; doesn&apos;t always have to appear in the last part of a name. It can appear in the middle before a class name that&apos;s used as a scope, like in the following example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; t::&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; iterator&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;::value_type v;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In some cases, the keywords are forbidden, as detailed below&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;On the name of a dependent base class you are not allowed to write &lt;code&gt;typename&lt;/code&gt;. It&apos;s assumed that the name given is a class type name. This is true for both names in the base-class list and the constructor initializer list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;derive_from_Has_type&lt;/span&gt; : &lt;span class=&quot;hljs-comment&quot;&gt;/* typename */&lt;/span&gt; SomeBase&amp;lt;T&amp;gt;::type \n { };\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In using-declarations it&apos;s not possible to use &lt;code&gt;template&lt;/code&gt; after the last &lt;code&gt;::&lt;/code&gt;, and the C++ committee &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#109&quot; rel=&quot;noreferrer&quot;&gt;said&lt;/a&gt; not to work on a solution. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;derive_from_Has_type&lt;/span&gt; : SomeBase&amp;lt;T&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; SomeBase&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; type; &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; SomeBase&amp;lt;T&amp;gt;::type; &lt;span class=&quot;hljs-comment&quot;&gt;// typename *is* allowed&lt;/span&gt;\n };\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h2&gt;C++11&lt;/h2&gt;\n\n&lt;h3&gt;Problem&lt;/h3&gt;\n\n&lt;p&gt;While the rules in C++03 about when you need &lt;code&gt;typename&lt;/code&gt; and &lt;code&gt;template&lt;/code&gt; are largely reasonable, there is one annoying disadvantage of its formulation&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; result_type;\n\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// error, &quot;this&quot; is dependent, &quot;template&quot; keyword needed&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;g&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&amp;gt;();\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// OK&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;g&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&amp;gt;();\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// error, &quot;A&amp;lt;T&amp;gt;&quot; is dependent, &quot;typename&quot; keyword needed&lt;/span&gt;\n    A&amp;lt;T&amp;gt;::result_type n1;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// OK&lt;/span&gt;\n    result_type n2; \n  }\n\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; U&amp;gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As can be seen, we need the disambiguation keyword even if the compiler could perfectly figure out itself that &lt;code&gt;A::result_type&lt;/code&gt; can only be &lt;code&gt;int&lt;/code&gt; (and is hence a type), and &lt;code&gt;this-&amp;gt;g&lt;/code&gt; can only be the member template &lt;code&gt;g&lt;/code&gt; declared later (even if &lt;code&gt;A&lt;/code&gt; is explicitly specialized somewhere, that would not affect the code within that template, so its meaning cannot be affected by a later specialization of &lt;code&gt;A&lt;/code&gt;!). &lt;/p&gt;\n\n&lt;h3&gt;Current instantiation&lt;/h3&gt;\n\n&lt;p&gt;To improve the situation, in C++11 the language tracks when a type refers to the enclosing template. To know that, the type must have been formed by using a certain form of name, which is its own name (in the above, &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;A&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;::A&amp;lt;T&amp;gt;&lt;/code&gt;). A type referenced by such a name is known to be  the &lt;em&gt;current instantiation&lt;/em&gt;. There may be multiple types that are all the current instantiation if the type from which the name is formed is a member/nested class (then, &lt;code&gt;A::NestedClass&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; are both current instantiations). &lt;/p&gt;\n\n&lt;p&gt;Based on this notion, the language says that &lt;code&gt;CurrentInstantiation::Foo&lt;/code&gt;, &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;CurrentInstantiationTyped-&amp;gt;Foo&lt;/code&gt; (such as &lt;code&gt;A *a = this; a-&amp;gt;Foo&lt;/code&gt;) are all &lt;em&gt;member of the current instantiation&lt;/em&gt; &lt;strong&gt;if&lt;/strong&gt; they are found to be members of a class that is the current instantiation or one of its non-dependent base classes (by just doing the name lookup immediately). &lt;/p&gt;\n\n&lt;p&gt;The keywords &lt;code&gt;typename&lt;/code&gt; and &lt;code&gt;template&lt;/code&gt; are now not required anymore if the qualifier is a member of the current instantiation. A keypoint here to remember is that &lt;code&gt;A&amp;lt;T&amp;gt;&lt;/code&gt; is &lt;em&gt;still&lt;/em&gt; a type-dependent name (after all &lt;code&gt;T&lt;/code&gt; is also type dependent). But &lt;code&gt;A&amp;lt;T&amp;gt;::result_type&lt;/code&gt; is known to be a type - the compiler will &quot;magically&quot; look into this kind of dependent types to figure this out. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; result_type;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt; { }; &lt;span class=&quot;hljs-comment&quot;&gt;// could be specialized!&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;D&lt;/span&gt; : B, C&amp;lt;T&amp;gt; {\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// OK, member of current instantiation!&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// A::result_type is not dependent: int&lt;/span&gt;\n    D::result_type r1;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// error, not a member of the current instantiation&lt;/span&gt;\n    D::questionable_type r2;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// OK for now - relying on C&amp;lt;T&amp;gt; to provide it&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// But not a member of the current instantiation&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; D::questionable_type r3;        \n  }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s impressive, but can we do better? The language even goes further and &lt;em&gt;requires&lt;/em&gt; that an implementation again looks up &lt;code&gt;D::result_type&lt;/code&gt; when instantiating &lt;code&gt;D::f&lt;/code&gt; (even if it found its meaning already at definition time). When now the lookup result differs or results in ambiguity, the program is ill-formed and a diagnostic must be given. Imagine what happens if we defined &lt;code&gt;C&lt;/code&gt; like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; result_type;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; questionable_type;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A compiler is required to catch the error when instantiating &lt;code&gt;D&amp;lt;int&amp;gt;::f&lt;/code&gt;. So you get the best of the two worlds: &quot;Delayed&quot; lookup protecting you if you could get in trouble with dependent base classes, and also &quot;Immediate&quot; lookup that frees you from &lt;code&gt;typename&lt;/code&gt; and &lt;code&gt;template&lt;/code&gt;. &lt;/p&gt;\n\n&lt;h3&gt;Unknown specializations&lt;/h3&gt;\n\n&lt;p&gt;In the code of &lt;code&gt;D&lt;/code&gt;, the name &lt;code&gt;typename D::questionable_type&lt;/code&gt; is not a member of the current instantiation. Instead the language marks it as a &lt;em&gt;member of an unknown specialization&lt;/em&gt;. In particular, this is always the case when you are doing &lt;code&gt;DependentTypeName::Foo&lt;/code&gt; or &lt;code&gt;DependentTypedName-&amp;gt;Foo&lt;/code&gt; and either the dependent type is &lt;em&gt;not&lt;/em&gt; the current instantiation (in which case the compiler can give up and say &quot;we will look later what &lt;code&gt;Foo&lt;/code&gt; is) or it &lt;em&gt;is&lt;/em&gt; the current instantiation and the name was not found in it or its non-dependent base classes and there are also dependent base classes. &lt;/p&gt;\n\n&lt;p&gt;Imagine what happens if we had a member function &lt;code&gt;h&lt;/code&gt; within the above defined &lt;code&gt;A&lt;/code&gt; class template&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; A&amp;lt;T&amp;gt;::questionable_type x;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In C++03, the language allowed to catch this error because there could never be a valid way to instantiate &lt;code&gt;A&amp;lt;T&amp;gt;::h&lt;/code&gt; (whatever argument you give to &lt;code&gt;T&lt;/code&gt;). In C++11, the language now has a further check to give more reason for compilers to implement this rule. Since &lt;code&gt;A&lt;/code&gt; has no dependent base classes, and &lt;code&gt;A&lt;/code&gt; declares no member &lt;code&gt;questionable_type&lt;/code&gt;, the name &lt;code&gt;A&amp;lt;T&amp;gt;::questionable_type&lt;/code&gt; is &lt;em&gt;neither&lt;/em&gt; a member of the current instantiation &lt;em&gt;nor&lt;/em&gt; a member of an unknown specialization. In that case, there should be no way that that code could validly compile at instantiation time, so the language forbids a name where the qualifier is the current instantiation to be neither a member of an unknown specialization nor a member of the current instantiation (however, this violation is still not required to be diagnosed).&lt;/p&gt;\n\n&lt;h3&gt;Examples and trivia&lt;/h3&gt;\n\n&lt;p&gt;You can try this knowledge on &lt;a href=&quot;https://stackoverflow.com/a/14005063/34509&quot;&gt;this answer&lt;/a&gt; and see whether the above definitions make sense for you on a real-world example (they are repeated slightly less detailed in that answer).  &lt;/p&gt;\n\n&lt;p&gt;The C++11 rules make the following valid C++03 code ill-formed (which was not intended by the C++ committee, but will probably not be fixed)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt; { &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; B { &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; B, T {\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;f&lt;/span&gt;(); }\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{ \n  C&amp;lt;A&amp;gt; c; c.&lt;span class=&quot;hljs-built_in&quot;&gt;g&lt;/span&gt;(); \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This valid C++03 code would bind &lt;code&gt;this-&amp;gt;f&lt;/code&gt; to &lt;code&gt;A::f&lt;/code&gt; at instantiation time and everything is fine. C++11 however immediately binds it to &lt;code&gt;B::f&lt;/code&gt; and requires a double-check when instantiating, checking whether the lookup still matches. However when instantiating &lt;code&gt;C&amp;lt;A&amp;gt;::g&lt;/code&gt;, the &lt;a href=&quot;http://en.wikipedia.org/wiki/Dominance_(C%2B%2B)&quot; rel=&quot;noreferrer&quot;&gt;Dominance Rule&lt;/a&gt; applies and lookup will find &lt;code&gt;A::f&lt;/code&gt; instead.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Preface&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This post is meant to be an &lt;em&gt;easy-to-read&lt;/em&gt; alternative to &lt;a href=&quot;https://stackoverflow.com/questions/610245/where-and-why-do-i-have-to-put-the-template-and-typename-keywords/17579889#17579889&quot;&gt;litb&apos;s post&lt;/a&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The underlying purpose is the same; an explanation to &quot;When?&quot; and &quot;Why?&quot; &lt;code&gt;typename&lt;/code&gt; and &lt;code&gt;template&lt;/code&gt; must be applied.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;h1&gt;What&apos;s the purpose of &lt;code&gt;typename&lt;/code&gt; and &lt;code&gt;template&lt;/code&gt;?&lt;/h1&gt;\n&lt;p&gt;&lt;code&gt;typename&lt;/code&gt; and &lt;code&gt;template&lt;/code&gt; are usable in circumstances other than when declaring a template.&lt;/p&gt;\n&lt;p&gt;There are certain contexts in &lt;em&gt;C++&lt;/em&gt; where the compiler must explicitly be told how to treat a name, and all these contexts have one thing in common; they depend on at least one &lt;em&gt;template-parameter&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;We refer to such names, where there can be an ambiguity in interpretation, as; &quot;&lt;em&gt;dependent names&lt;/em&gt;&quot;.&lt;/p&gt;\n&lt;p&gt;This post will offer an explanation to the relationship between &lt;em&gt;dependent-names&lt;/em&gt;, and the two keywords.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;A snippet says more than 1000 words&lt;/h2&gt;\n&lt;p&gt;Try to explain what is going on in the following &lt;em&gt;function-template&lt;/em&gt;, either to yourself, a friend, or perhaps your cat; what is happening in the statement marked (&lt;em&gt;A&lt;/em&gt;)?&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f_tmpl&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{ T::foo * x; &lt;span class=&quot;hljs-comment&quot;&gt;/* &amp;lt;-- (A) */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;&lt;br&gt;&lt;/sup&gt;\nIt might not be as easy as one thinks, more specifically the result of evaluating (&lt;em&gt;A&lt;/em&gt;) heavily &lt;em&gt;depends&lt;/em&gt; on the definition of the type passed as template-parameter &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Different &lt;code&gt;T&lt;/code&gt;s can drastically change the semantics involved.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;       foo;       }; &lt;span class=&quot;hljs-comment&quot;&gt;/* (C) --&amp;gt; */&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;f_tmpl&lt;/span&gt;&amp;lt;X&amp;gt; ();\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Y&lt;/span&gt; { &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt;  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;; }; &lt;span class=&quot;hljs-comment&quot;&gt;/* (D) --&amp;gt; */&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;f_tmpl&lt;/span&gt;&amp;lt;Y&amp;gt; ();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;&lt;br&gt;&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The two different scenarios&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If we instantiate the function-template with type &lt;em&gt;X&lt;/em&gt;, as in (&lt;em&gt;C&lt;/em&gt;), we will have a declaration of a &lt;em&gt;pointer-to int&lt;/em&gt; named &lt;em&gt;x&lt;/em&gt;, but;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;if we instantiate the template with type &lt;em&gt;Y&lt;/em&gt;, as in (&lt;em&gt;D&lt;/em&gt;), (&lt;em&gt;A&lt;/em&gt;) would instead consist of an expression that calculates the product of &lt;em&gt;123&lt;/em&gt; multiplied with some already declared variable &lt;em&gt;x&lt;/em&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;br&gt;\n&lt;hr&gt;\n&lt;h2&gt;The Rationale&lt;/h2&gt;\n&lt;p&gt;The C++ Standard cares about our safety and well-being, at least in this case.&lt;/p&gt;\n&lt;p&gt;To prevent an implementation from potentially suffering from nasty surprises, the Standard mandates that we sort out the ambiguity of a &lt;em&gt;dependent-name&lt;/em&gt; by &lt;em&gt;explicitly&lt;/em&gt; stating the intent anywhere we&apos;d like to treat the name as either a &lt;em&gt;type-name&lt;/em&gt;, or a &lt;em&gt;template-id&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;If nothing is stated, the &lt;em&gt;dependent-name&lt;/em&gt; will be considered to be either a variable, or a function.&lt;/p&gt;\n&lt;br&gt;\n&lt;hr&gt;\n&lt;h2&gt;How to handle dependent names?&lt;/h2&gt;\n&lt;p&gt;If this was a Hollywood film, &lt;em&gt;dependent-names&lt;/em&gt; would be the disease that spreads through body contact, instantly affects its host to make it confused. Confusion that could, possibly, lead to an ill-formed perso-, erhm.. program.&lt;/p&gt;\n&lt;p&gt;A &lt;em&gt;dependent-name&lt;/em&gt; is &lt;strong&gt;any&lt;/strong&gt; name that directly, or indirectly, depends on a &lt;em&gt;template-parameter&lt;/em&gt;.\n&lt;sup&gt;&lt;br&gt;&lt;br&gt;&lt;/sup&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;g_tmpl&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n   SomeTrait&amp;lt;T&amp;gt;::type                   foo; &lt;span class=&quot;hljs-comment&quot;&gt;// (E), ill-formed&lt;/span&gt;\n   SomeTrait&amp;lt;T&amp;gt;::NestedTrait&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;::type bar; &lt;span class=&quot;hljs-comment&quot;&gt;// (F), ill-formed&lt;/span&gt;\n   foo.&lt;span class=&quot;hljs-built_in&quot;&gt;data&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; ();                         &lt;span class=&quot;hljs-comment&quot;&gt;// (G), ill-formed    &lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We have four &lt;em&gt;dependent&lt;/em&gt; names in the above snippet:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt;)\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;&quot;type&quot;&lt;/strong&gt; depends on the instantiation of &lt;code&gt;SomeTrait&amp;lt;T&amp;gt;&lt;/code&gt;, which include &lt;code&gt;T&lt;/code&gt;, and;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;F&lt;/strong&gt;)\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;&quot;NestedTrait&quot;&lt;/strong&gt;, which is a &lt;em&gt;template-id&lt;/em&gt;, depends on &lt;code&gt;SomeTrait&amp;lt;T&amp;gt;&lt;/code&gt;, and;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&quot;type&quot;&lt;/strong&gt; at the end of (&lt;em&gt;F&lt;/em&gt;) depends on &lt;em&gt;NestedTrait&lt;/em&gt;, which depends on &lt;code&gt;SomeTrait&amp;lt;T&amp;gt;&lt;/code&gt;, and;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;G&lt;/strong&gt;)\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;&quot;data&quot;&lt;/strong&gt;, which looks like a &lt;em&gt;member-function template&lt;/em&gt;, is indirectly a &lt;em&gt;dependent-name&lt;/em&gt; since the type of &lt;em&gt;foo&lt;/em&gt; depends on the instantiation of &lt;code&gt;SomeTrait&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Neither of statement (&lt;em&gt;E&lt;/em&gt;), (&lt;em&gt;F&lt;/em&gt;) or (&lt;em&gt;G&lt;/em&gt;) is valid if the compiler would interpret the &lt;em&gt;dependent-names&lt;/em&gt; as variables/functions (which as stated earlier is what happens if we don&apos;t explicitly say otherwise).\n&lt;sup&gt;&lt;br&gt;&lt;br&gt;&lt;/sup&gt;&lt;/p&gt;\n&lt;h3&gt;The solution&lt;/h3&gt;\n&lt;p&gt;To make &lt;code&gt;g_tmpl&lt;/code&gt; have a valid definition we must explicitly tell the compiler that we expect a type in (&lt;em&gt;E&lt;/em&gt;), a &lt;em&gt;template-id&lt;/em&gt; and a &lt;em&gt;type&lt;/em&gt; in (&lt;em&gt;F&lt;/em&gt;), and a &lt;em&gt;template-id&lt;/em&gt; in (&lt;em&gt;G&lt;/em&gt;).&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;g_tmpl&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; SomeTrait&amp;lt;T&amp;gt;::type foo;                            &lt;span class=&quot;hljs-comment&quot;&gt;// (G), legal&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; SomeTrait&amp;lt;T&amp;gt;::&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; NestedTrait&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;::type bar; &lt;span class=&quot;hljs-comment&quot;&gt;// (H), legal&lt;/span&gt;\n   foo.&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;data&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; ();                                  &lt;span class=&quot;hljs-comment&quot;&gt;// (I), legal&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Every time a &lt;em&gt;name&lt;/em&gt; denotes a type, &lt;strong&gt;all&lt;/strong&gt; &lt;em&gt;names&lt;/em&gt; involved must be either &lt;em&gt;type-names&lt;/em&gt; or &lt;em&gt;namespaces&lt;/em&gt;, with this in mind it&apos;s quite easy to see that we apply &lt;code&gt;typename&lt;/code&gt; at the beginning of our fully &lt;em&gt;qualified name&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;template&lt;/code&gt; however, is different in this regard, since there&apos;s no way of coming to a conclusion such as; &lt;em&gt;&quot;oh, this is a template, then this other thing must also be a template&quot;&lt;/em&gt;. This means that we apply &lt;code&gt;template&lt;/code&gt; directly in front of any &lt;em&gt;name&lt;/em&gt; that we&apos;d like to treat as such.&lt;/p&gt;\n&lt;br&gt;\n&lt;hr&gt;\n&lt;h2&gt;Can I just stick the &lt;em&gt;keywords&lt;/em&gt; in front of any name?&lt;/h2&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&quot;&lt;em&gt;Can I just stick &lt;code&gt;typename&lt;/code&gt; and &lt;code&gt;template&lt;/code&gt; in front of any name? I don&apos;t want to worry about the context in which they appear...&lt;/em&gt;&quot; - &lt;code&gt;Some C++ Developer&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The rules in the Standard states that you may apply the keywords as long as you are dealing with a &lt;em&gt;qualified-name&lt;/em&gt; (&lt;em&gt;K&lt;/em&gt;), but if the name isn&apos;t &lt;em&gt;qualified&lt;/em&gt; the application is ill-formed (&lt;em&gt;L&lt;/em&gt;).&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; N {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt; { };\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;         N::         X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; a; &lt;span class=&quot;hljs-comment&quot;&gt;// ...  legal&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; N::&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; b; &lt;span class=&quot;hljs-comment&quot;&gt;// (K), legal&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;    X&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; c; &lt;span class=&quot;hljs-comment&quot;&gt;// (L), ill-formed&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;&lt;strong&gt;Note&lt;/strong&gt;: Applying &lt;code&gt;typename&lt;/code&gt; or &lt;code&gt;template&lt;/code&gt; in a context where it is not required is not considered good practice; just because you can do something, doesn&apos;t mean that you should.&lt;/sup&gt;&lt;/p&gt;\n&lt;br&gt;\n&lt;p&gt;Additionally there are contexts where &lt;code&gt;typename&lt;/code&gt; and &lt;code&gt;template&lt;/code&gt; are &lt;strong&gt;explicitly&lt;/strong&gt; disallowed:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;When specifying the bases of which a class inherits&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Every name written in a derived class&apos;s &lt;em&gt;base-specifier-list&lt;/em&gt; is already treated as a &lt;em&gt;type-name&lt;/em&gt;, explicitly specifying &lt;code&gt;typename&lt;/code&gt; is both ill-formed, and redundant.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;                    &lt;span class=&quot;hljs-comment&quot;&gt;// .------- the base-specifier-list&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-comment&quot;&gt;// v&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Derived&lt;/span&gt;      : &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; SomeTrait&amp;lt;T&amp;gt;::type &lt;span class=&quot;hljs-comment&quot;&gt;/* &amp;lt;- ill-formed */&lt;/span&gt; {\n    ...\n  };\n&lt;/code&gt;&lt;/pre&gt;\n &lt;br&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;When the &lt;em&gt;template-id&lt;/em&gt; is the one being referred to in a derived class&apos;s &lt;em&gt;using-directive&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Base&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;type&lt;/span&gt; { };\n  };\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Derived&lt;/span&gt; : Base {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Base::&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; type; &lt;span class=&quot;hljs-comment&quot;&gt;// ill-formed&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Base::type;          &lt;span class=&quot;hljs-comment&quot;&gt;// legal&lt;/span&gt;\n  };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;sub&gt;\n&lt;em&gt;This answer is meant to be a rather short and sweet one to answer (part of) the titled question. If you want an answer with more detail that explains why you have to put them there, please go &lt;a href=&quot;https://stackoverflow.com/a/613132/1381108&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;\n&lt;/sub&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;The general rule for putting the &lt;code&gt;typename&lt;/code&gt; keyword is mostly when you&apos;re using a template parameter and you want to access a nested &lt;code&gt;typedef&lt;/code&gt; or using-alias, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;test&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; type = T; &lt;span class=&quot;hljs-comment&quot;&gt;// no typename required&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; underlying_type = &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T::type &lt;span class=&quot;hljs-comment&quot;&gt;// typename required&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that this also applies for meta functions or things that take generic template parameters too. However, if the template parameter provided is an explicit type then you don&apos;t have to specify &lt;code&gt;typename&lt;/code&gt;, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;test&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// typename required&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; type = &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::conditional&amp;lt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T&amp;amp;, T&amp;amp;&amp;amp;&amp;gt;::type;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// no typename required&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; integer = std::conditional&amp;lt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&amp;gt;::type;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The general rules for adding the &lt;code&gt;template&lt;/code&gt; qualifier are mostly similar except they typically involve templated member functions (static or otherwise) of a struct/class that is itself templated, for example:&lt;/p&gt;\n\n&lt;p&gt;Given this struct and function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;test&lt;/span&gt; {\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; U&amp;gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n        std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;get\\n&quot;&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; test&amp;lt;T&amp;gt;&amp;amp; t)&lt;/span&gt; &lt;/span&gt;{\n    t.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Attempting to access &lt;code&gt;t.get&amp;lt;int&amp;gt;()&lt;/code&gt; from inside the function will result in an error:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;main.cpp:13:11: error: expected primary-expression before &apos;int&apos;\n     t.get&amp;lt;int&amp;gt;();\n           ^\nmain.cpp:13:11: error: expected &apos;;&apos; before &apos;int&apos;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Thus in this context you would need the &lt;code&gt;template&lt;/code&gt; keyword beforehand and call it like so:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;t.template get&amp;lt;int&amp;gt;()&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;That way the compiler will parse this properly rather than &lt;code&gt;t.get &amp;lt; int&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Tail::inUnion&amp;lt;U&amp;gt; dummy;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, I&apos;m not sure you&apos;re implementation of inUnion is correct. If I understand correctly, this class is not supposed to be instantiated, therefore the &quot;fail&quot; tab will never avtually fails. Maybe it would be better to indicates whether the type is in the union or not with a simple boolean value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; TypeList&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Contains&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Head, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Tail&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Contains&lt;/span&gt;&amp;lt;T, UnionNode&amp;lt;Head, Tail&amp;gt; &amp;gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { result = Contains&amp;lt;T, Tail&amp;gt;::result };\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Tail&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Contains&lt;/span&gt;&amp;lt;T, UnionNode&amp;lt;T, Tail&amp;gt; &amp;gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { result = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; };\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Contains&lt;/span&gt;&amp;lt;T, &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;&amp;gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { result = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; };\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;PS: Have a look at &lt;a href=&quot;http://www.boost.org/doc/libs/1_38_0/doc/html/variant.html&quot; rel=&quot;noreferrer&quot;&gt;Boost::Variant&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;PS2: Have a look at &lt;a href=&quot;http://www.ddj.com/cpp/184403813&quot; rel=&quot;noreferrer&quot;&gt;typelists&lt;/a&gt;, notably in Andrei Alexandrescu&apos;s book: Modern C++ Design&lt;/p&gt;\n    ","\n&lt;h2&gt;C++20 aka C++2a&lt;/h2&gt;\n&lt;p&gt;As outlined in this &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r3.html&quot; rel=&quot;noreferrer&quot;&gt;Proposal&lt;/a&gt;, C++20 / C++2a has further relaxed the requirements for the &lt;code&gt;typename&lt;/code&gt; keyword. In particular, &lt;code&gt;typename&lt;/code&gt; may now be omitted in all those places, where syntactically only a type is legal. So, if an unknown token must be a type, C++20 will actually treat it as a type. For backwards compatibility, &lt;code&gt;typename&lt;/code&gt; may still be used, though.&lt;/p&gt;\n&lt;p&gt;In particular, most &lt;code&gt;using&lt;/code&gt; and &lt;code&gt;typedef&lt;/code&gt; declarations can now be written without &lt;code&gt;typename&lt;/code&gt;. &lt;code&gt;typename&lt;/code&gt; can also be omitted in the declaration of method return types (including trailing return types), in the declaration of method and lambda parameters and in the type argument to &lt;code&gt;static_cast&lt;/code&gt;, &lt;code&gt;const_cast&lt;/code&gt;, &lt;code&gt;dynamic_cast&lt;/code&gt; and &lt;code&gt;reinterpret_cast&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;One notable exception, where &lt;code&gt;typename&lt;/code&gt; is still required, is in the argument list of instantiations of user or library defined templates: Even, if that particular argument was declared to be a type, the &lt;code&gt;typename&lt;/code&gt; keyword is still required. So &lt;code&gt;static_cast&amp;lt;A::B&amp;gt;(arg)&lt;/code&gt; is legal in C++20, but &lt;code&gt;my_template_class&amp;lt;A::B&amp;gt;(arg)&lt;/code&gt; is ill-formed, if A is a dependant scope and &lt;code&gt;my_template_class&lt;/code&gt; expects a type.&lt;/p&gt;\n&lt;p&gt;A few examples:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; type; &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; val { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; }; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; type; &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; val { &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; }; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt; {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; I&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;D&lt;/span&gt; {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;X&lt;/span&gt; {\n    T::type v;                                  &lt;span class=&quot;hljs-comment&quot;&gt;// OK&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;T::type &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T::type arg)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arg; }      &lt;span class=&quot;hljs-comment&quot;&gt;// OK&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;T::type &lt;span class=&quot;hljs-title&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; arg)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;static_cast&lt;/span&gt;&amp;lt;T::type&amp;gt;(arg); } &lt;span class=&quot;hljs-comment&quot;&gt;// OK&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// C&amp;lt;T::type&amp;gt; c1;                           // error&lt;/span&gt;\n    D&amp;lt;T::val&amp;gt; d;                                &lt;span class=&quot;hljs-comment&quot;&gt;// OK (as has always been)&lt;/span&gt;\n    C&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T::type&amp;gt; c2;                     &lt;span class=&quot;hljs-comment&quot;&gt;// OK (old style)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; T::type mytype;                     &lt;span class=&quot;hljs-comment&quot;&gt;// OK&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; mytypeagain = T::type;                &lt;span class=&quot;hljs-comment&quot;&gt;// OK&lt;/span&gt;\n    C&amp;lt;mytype&amp;gt; c3;                               &lt;span class=&quot;hljs-comment&quot;&gt;// OK (via typedef / using)&lt;/span&gt;\n};\nX&amp;lt;A&amp;gt; xa;\nX&amp;lt;B&amp;gt; xb;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I am placing JLBorges&apos;s excellent &lt;a href=&quot;http://www.cplusplus.com/forum/general/122765/#msg669061&quot; rel=&quot;nofollow noreferrer&quot;&gt;response&lt;/a&gt; to a similar question verbatim from cplusplus.com, as it is the most succinct explanation I&apos;ve read on the subject.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In a template that we write, there are two kinds of names that could be used - dependant names and non- dependant names. A dependant name is a name that depends on a template parameter; a non-dependant name has the same meaning irrespective of what the template parameters are.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T &amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( T&amp;amp; x, std::string str, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; count )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// these names are looked up during the second phase&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// when foo is instantiated and the type T is known&lt;/span&gt;\n    x.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// dependant name (non-type)&lt;/span&gt;\n    T::instance_count ; &lt;span class=&quot;hljs-comment&quot;&gt;// dependant name (non-type)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T::iterator i ; &lt;span class=&quot;hljs-comment&quot;&gt;// dependant name (type)&lt;/span&gt;\n      \n    &lt;span class=&quot;hljs-comment&quot;&gt;// during the first phase, &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// T::instance_count is treated as a non-type (this is the default)&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the typename keyword specifies that T::iterator is to be treated as a type.&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// these names are looked up during the first phase&lt;/span&gt;\n    std::string::size_type s ; &lt;span class=&quot;hljs-comment&quot;&gt;// non-dependant name (type)&lt;/span&gt;\n    std::string::npos ; &lt;span class=&quot;hljs-comment&quot;&gt;// non-dependant name (non-type)&lt;/span&gt;\n    str.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;() ; &lt;span class=&quot;hljs-comment&quot;&gt;// non-dependant name (non-type)&lt;/span&gt;\n    count ; &lt;span class=&quot;hljs-comment&quot;&gt;// non-dependant name (non-type)&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What a dependant name refers to could be something different for each different instantiation of the template. As a consequence, C++ templates are subject to &quot;two-phase name lookup&quot;. When a template is initially parsed (before any instantiation takes place) the compiler looks up the non-dependent names. When a particular instantiation of the template takes place, the template parameters are known by then, and the compiler looks up dependent names.&lt;/p&gt;\n&lt;p&gt;During the first phase, the parser needs to know if a dependant name is the name of a type or the name of a non-type. By default, a dependant name is assumed to be the name of a non-type. The typename keyword before a dependant name specifies that it is the name of a type.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Use the keyword typename only in template declarations and definitions provided you have a qualified name that refers to a type and depends on a template parameter.&lt;/p&gt;\n    ","\n&lt;p&gt;Dependent name is a name depends on template parameters, we need to instruct compiler in order to compile the template class/function properly before actually instiatiate them.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;typename -&amp;gt; tell compiler the dependent name is an actual type&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DependentType&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T::type a;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Type=&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T::type;\n};\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;template -&amp;gt; tell compiler the dependent name is a template function/class&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DependentTemplate&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-comment&quot;&gt;// template function&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;U&lt;/span&gt;&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{}\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// template class&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;U&lt;/span&gt;&amp;gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ClassName&lt;/span&gt;{};\n};\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T2&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-comment&quot;&gt;// 3 ways to call a dependent template function&lt;/span&gt;\n  DependentTemplate&amp;lt;T1&amp;gt;::&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;func&lt;/span&gt;&amp;lt;T2&amp;gt;();\n  &lt;span class=&quot;hljs-built_in&quot;&gt;DependentTemplate&lt;/span&gt;&amp;lt;T1&amp;gt;().&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;func&lt;/span&gt;&amp;lt;T2&amp;gt;();\n  (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;DependentTemplate&lt;/span&gt;&amp;lt;T1&amp;gt;())-&amp;gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;func&lt;/span&gt;&amp;lt;T2&amp;gt;();\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// You need both typename and template to reference a dependent template class&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; DependentTemplate&amp;lt;T1&amp;gt;::&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; ClassName&amp;lt;T2&amp;gt; obj;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Type=&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; DependentTemplate&amp;lt;T1&amp;gt;::&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; ClassName&amp;lt;T2&amp;gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    "]},"randomTags":[{"name":"android-recyclerview","slug":"android-recyclerview"},{"name":"selenium3","slug":"selenium3"},{"name":"http-headers","slug":"http-headers"},{"name":"abstraction","slug":"abstraction"},{"name":"implementation-defined-behavior","slug":"implementation-defined-behavior"},{"name":"vba","slug":"vba"},{"name":"string-matching","slug":"string-matching"},{"name":"jframe","slug":"jframe"},{"name":"single-quotes","slug":"single-quotes"},{"name":"email","slug":"email"},{"name":"jvm","slug":"jvm"},{"name":"static-files","slug":"static-files"},{"name":"event-loop","slug":"event-loop"},{"name":"x86-64","slug":"x86-64"},{"name":"identity","slug":"identity"},{"name":"python-packaging","slug":"python-packaging"},{"name":"repr","slug":"repr"},{"name":"slice","slug":"slice"},{"name":"profiling","slug":"profiling"},{"name":"extract","slug":"extract"}]},"__N_SSG":true}