{"pageProps":{"data":{"count":1,"rows":[{"id":219,"title":"Iterating through a Collection, avoiding ConcurrentModificationException when removing objects in a loop","slug":"iterating-through-a-collection-avoiding-concurrentmodificationexception-when-removing-objects-in-a-loop-1657387311824","postType":"QUESTION","createdAt":"2022-07-09T17:21:51.000Z","updatedAt":"2022-07-09T17:21:51.000Z","tags":[{"id":1505,"name":"collections","slug":"collections","createdAt":"2022-07-09T17:21:51.000Z","updatedAt":"2022-07-09T17:21:51.000Z","Questions_Tags":{"questionId":219,"tagId":1505}}]}]},"slug":"collections","page":"1","answers":{"219":["\n&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Iterator.html#remove--&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Iterator.remove()&lt;/code&gt;&lt;/a&gt; is safe, you can use it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// This is a clever way to create the iterator and call iterator.hasNext() like&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// you would do in a while-loop. It would be the same as doing:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     Iterator&amp;lt;String&amp;gt; iterator = list.iterator();&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     while (iterator.hasNext()) {&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;String&amp;gt; iterator = list.iterator(); iterator.hasNext();) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iterator.next();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (string.isEmpty()) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Remove the current element from the iterator and the list.&lt;/span&gt;\n        iterator.remove();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Iterator.html#remove--&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Iterator.remove()&lt;/code&gt;&lt;/a&gt; is the only safe way to modify a collection during iteration; the behavior is unspecified if the underlying collection is modified &lt;strong&gt;in any other way&lt;/strong&gt; while the iteration is in progress.&lt;/p&gt;\n\n&lt;p&gt;Source:&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html&quot; rel=&quot;noreferrer&quot;&gt; docs.oracle &amp;gt; The Collection Interface&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;And similarly, if you have a &lt;code&gt;ListIterator&lt;/code&gt; and want to &lt;em&gt;add&lt;/em&gt; items, you can use &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html#add-E-&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ListIterator#add&lt;/code&gt;&lt;/a&gt;, for the same reason you can use &lt;code&gt;Iterator#remove&lt;/code&gt;&amp;nbsp; it&apos;s designed to allow it.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;In your case you tried to remove from a list, but the same restriction applies if trying to &lt;code&gt;put&lt;/code&gt; into a &lt;code&gt;Map&lt;/code&gt; while iterating its content. &lt;/p&gt;\n    ","\n&lt;p&gt;This works:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;Integer&amp;gt; iter = l.iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (iter.next() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n        iter.remove();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I assumed that since a foreach loop is syntactic sugar for iterating, using an iterator wouldn&apos;t help... but it gives you this &lt;code&gt;.remove()&lt;/code&gt; functionality.&lt;/p&gt;\n    ","\n&lt;p&gt;With Java 8 you can use &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#removeIf-java.util.function.Predicate-&quot; rel=&quot;noreferrer&quot;&gt;the new &lt;code&gt;removeIf&lt;/code&gt; method&lt;/a&gt;. Applied to your example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Collection&amp;lt;Integer&amp;gt; coll = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;//populate&lt;/span&gt;\n\ncoll.removeIf(i -&amp;gt; i == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Since the question has been already answered i.e. the best way is to use the remove method of the iterator object, I would go into the specifics of the place where the error &lt;code&gt;&quot;java.util.ConcurrentModificationException&quot;&lt;/code&gt; is thrown.&lt;/p&gt;\n\n&lt;p&gt;Every collection class has a private class which implements the Iterator interface and provides methods like &lt;code&gt;next()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt; and &lt;code&gt;hasNext()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The code for next looks something like this...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    checkForComodification();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; get(cursor);\n        lastRet = cursor++;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; next;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(IndexOutOfBoundsException e) {\n        checkForComodification();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NoSuchElementException&lt;/span&gt;();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here the method &lt;code&gt;checkForComodification&lt;/code&gt; is implemented as &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkForComodification&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (modCount != expectedModCount)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ConcurrentModificationException&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, as you can see, if you explicitly try to remove an element from the collection. It results in &lt;code&gt;modCount&lt;/code&gt; getting different from &lt;code&gt;expectedModCount&lt;/code&gt;, resulting in the exception &lt;code&gt;ConcurrentModificationException&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You can either use the iterator directly like you mentioned, or else keep a second collection and add each item you want to remove to the new collection, then removeAll at the end. This allows you to keep using the type-safety of the for-each loop at the cost of increased memory use and cpu time (shouldn&apos;t be a huge problem unless you have really, really big lists or a really old computer)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;\n{\n    Collection&amp;lt;Integer&amp;gt; l = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\n    Collection&amp;lt;Integer&amp;gt; itemsToRemove = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; i++) {\n        l.add(Integer.of(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n        l.add(Integer.of(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n        l.add(Integer.of(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Integer i : l)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i.intValue() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n            itemsToRemove.add(i);\n        }\n    }\n\n    l.removeAll(itemsToRemove);\n    System.out.println(l);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In such cases a common trick is (was?) to go backwards:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; l.size() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i --) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (l.get(i) == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n    l.remove(i);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That said, I&apos;m more than happy that you have better ways in Java 8, e.g. &lt;code&gt;removeIf&lt;/code&gt; or &lt;code&gt;filter&lt;/code&gt; on streams.&lt;/p&gt;\n    ","\n&lt;p&gt;Same answer as &lt;a href=&quot;https://stackoverflow.com/a/223927/1433392&quot;&gt;Claudius&lt;/a&gt; with a for loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;Object&amp;gt; it = objects.iterator(); it.hasNext();) {\n    &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; it.next();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (test) {\n        it.remove();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With &lt;a href=&quot;https://www.eclipse.org/collections/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Eclipse Collections&lt;/a&gt;, the method &lt;code&gt;removeIf&lt;/code&gt; defined on &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/collection/MutableCollection.java#L236&quot; rel=&quot;nofollow noreferrer&quot;&gt;MutableCollection&lt;/a&gt; will work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;MutableList&amp;lt;Integer&amp;gt; list = Lists.mutable.of(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\nlist.removeIf(Predicates.lessThan(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;));\nAssert.assertEquals(Lists.mutable.of(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), list);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With Java 8 Lambda syntax this can be written as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;MutableList&amp;lt;Integer&amp;gt; list = Lists.mutable.of(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\nlist.removeIf(Predicates.cast(integer -&amp;gt; integer &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;));\nAssert.assertEquals(Lists.mutable.of(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), list);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The call to &lt;code&gt;Predicates.cast()&lt;/code&gt; is necessary here because a default &lt;code&gt;removeIf&lt;/code&gt; method was added on the &lt;code&gt;java.util.Collection&lt;/code&gt; interface in Java 8. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I am a committer for &lt;a href=&quot;https://www.eclipse.org/collections/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Make a copy of existing list and iterate over new copy.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String str : &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;(listOfStr))     \n{\n    listOfStr.remove(&lt;span class=&quot;hljs-comment&quot;&gt;/* object reference or index */&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;People are asserting one &lt;strong&gt;can&apos;t&lt;/strong&gt; remove from a Collection being iterated by a foreach loop. I just wanted to point out that is &lt;em&gt;technically&lt;/em&gt; incorrect and describe exactly (I know the OP&apos;s question is so advanced as to obviate knowing this) the code behind that assumption:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (TouchableObj obj : untouchedSet) {  &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;--- This is where ConcurrentModificationException strikes&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.isTouched()) {\n        untouchedSet.remove(obj);\n        touchedSt.add(obj);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// this is key to avoiding returning to the foreach&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It isn&apos;t that you can&apos;t remove from the iterated &lt;code&gt;Colletion&lt;/code&gt; rather that you can&apos;t then continue iteration once you do. Hence the &lt;code&gt;break&lt;/code&gt; in the code above.&lt;/p&gt;\n\n&lt;p&gt;Apologies if this answer is a somewhat specialist use-case and more suited to the original &lt;a href=&quot;https://stackoverflow.com/questions/1110404/remove-elements-from-a-hashset-while-iterating&quot;&gt;thread&lt;/a&gt; I arrived here from, that one is marked as a duplicate (despite this thread appearing more nuanced) of this and locked.&lt;/p&gt;\n    ","\n&lt;p&gt;With a traditional for loop&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;ArrayList&amp;lt;String&amp;gt; myArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; myArray.size(); ) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; myArray.get(i);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (someCondition(text))\n        myArray.remove(i);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        i++;   \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html&quot; rel=&quot;nofollow&quot;&gt;ConcurrentHashMap&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html&quot; rel=&quot;nofollow&quot;&gt;ConcurrentLinkedQueue&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentSkipListMap.html&quot; rel=&quot;nofollow&quot;&gt;ConcurrentSkipListMap&lt;/a&gt; may be another option, because they will never throw any ConcurrentModificationException, even if you remove or add item.&lt;/p&gt;\n    ","\n&lt;p&gt;Another way is to use a copy of your arrayList just for iteration:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Object&amp;gt; l = ...\n    \nList&amp;lt;Object&amp;gt; iterationList = ImmutableList.copyOf(l);\n    \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Object curr : iterationList) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (condition(curr)) {\n        l.remove(curr);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A &lt;code&gt;ListIterator&lt;/code&gt; allows you to add or remove items in the list.  Suppose you have a list of &lt;code&gt;Car&lt;/code&gt; objects:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Car&amp;gt; cars = ArrayList&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// add cars here...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (ListIterator&amp;lt;Car&amp;gt; carIterator = cars.listIterator();  carIterator.hasNext(); )\n{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&amp;lt;some-condition&amp;gt;)\n   { \n      carIterator().remove()\n   }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&amp;lt;some-other-condition&amp;gt;)\n   { \n      carIterator().add(aNewCar);\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I know this question is too old to be about Java 8, but for those using Java 8 you can easily use removeIf():&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Collection&amp;lt;Integer&amp;gt; l = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i) {\n    l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n    l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n    l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;));\n}\n\nl.removeIf(i -&amp;gt; i.intValue() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Now, You can remove with the following code&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;l.removeIf(current -&amp;gt; current == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Java Concurrent Modification Exception&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Single thread&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;String&amp;gt; iterator = list.iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iterator.hasNext()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iter.next()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value == &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;) {\n        list.remove(it.next()); &lt;span class=&quot;hljs-comment&quot;&gt;//throws ConcurrentModificationException&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Solution: iterator &lt;code&gt;remove()&lt;/code&gt; method&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;String&amp;gt; iterator = list.iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iterator.hasNext()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iter.next()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value == &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;) {\n        it.remove()\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Multi thread&lt;/li&gt;\n&lt;/ol&gt;\n&lt;ul&gt;\n&lt;li&gt;copy/convert and iterate over another one collection. For small collections&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;synchronize&lt;/code&gt;&lt;a href=&quot;https://stackoverflow.com/a/59500618/4770877&quot;&gt;&lt;sup&gt;[About]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;thread safe collection&lt;a href=&quot;https://stackoverflow.com/a/65410514/4770877&quot;&gt;&lt;sup&gt;[About]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I have a suggestion for the problem above. No need of secondary list or any extra time. Please find an example which would do the same stuff but in a different way.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//&quot;list&quot; is ArrayList&amp;lt;Object&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//&quot;state&quot; is some boolean variable, which when set to true, Object will be removed from the list&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(index &amp;lt; list.size()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; list.get(index);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( state ) {\n        list.remove(index);\n        index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n    }\n    index += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;\nThis would avoid the Concurrency Exception.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Integer i : l)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i.intValue() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;){\n            itemsToRemove.add(i);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The catch is the after removing the element from the list if you skip the internal iterator.next() call. it still works! Though I dont propose to write code like this it helps to understand the concept behind it :-)&lt;/p&gt;\n\n&lt;p&gt;Cheers!&lt;/p&gt;\n    ","\n&lt;p&gt;Example of thread safe collection modification:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Example&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;String&amp;gt; queue = Collections.synchronizedList(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;());\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeFromQueue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;synchronized&lt;/span&gt; (queue) {\n            Iterator&amp;lt;String&amp;gt; iterator = queue.iterator();\n            &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iterator.next();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (string.isEmpty()) {\n                iterator.remove();\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One solution could be to rotate the list and remove the first element to avoid the ConcurrentModificationException or IndexOutOfBoundsException&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; list.size();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;j&amp;lt;n;j++){\n    &lt;span class=&quot;hljs-comment&quot;&gt;//you can also put a condition before remove&lt;/span&gt;\n    list.remove(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    Collections.rotate(list, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n}\nCollections.rotate(list, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try this one (removes all elements in the list that equal &lt;code&gt;i&lt;/code&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Object i : l) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (condition(i)) {\n        l = (l.stream().filter((a) -&amp;gt; a != i)).collect(Collectors.toList());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use a while loop.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;Map.Entry&amp;lt;String, String&amp;gt;&amp;gt; iterator = map.entrySet().iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(iterator.hasNext()){\n    Map.Entry&amp;lt;String, String&amp;gt; entry = iterator.next();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(entry.getKey().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;)) {\n        iterator.remove();\n    } \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I ended up with this &lt;code&gt;ConcurrentModificationException&lt;/code&gt;, while iterating the list using &lt;code&gt;stream().map()&lt;/code&gt; method. However the &lt;code&gt;for(:)&lt;/code&gt; did not throw the exception while iterating and modifying the the list.&lt;/p&gt;\n&lt;p&gt;Here is code snippet , if its of help to anyone:\nhere I&apos;m iterating on a &lt;code&gt;ArrayList&amp;lt;BuildEntity&amp;gt;&lt;/code&gt; , and modifying it using the list.remove(obj)&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(BuildEntity build : uniqueBuildEntities){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(build!=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(isBuildCrashedWithErrors(build)){\n                    log.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The following build crashed with errors ,  will not be persisted -&amp;gt; \\n{}&quot;&lt;/span&gt;\n                            ,build.getBuildUrl());\n                    uniqueBuildEntities.remove(build);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (uniqueBuildEntities.isEmpty()) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  EMPTY_LIST;\n                }\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(uniqueBuildEntities.size()&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            dbEntries.addAll(uniqueBuildEntities);\n        }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If using HashMap, in newer versions of Java (8+) you can select each of 3 options:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserProfileEntity&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String Code;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String mobileNumber;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; LocalDateTime inputDT;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// getters and setters here&lt;/span&gt;\n}\nHashMap&amp;lt;String, UserProfileEntity&amp;gt; upMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// remove by value&lt;/span&gt;\nupMap.values().removeIf(value -&amp;gt; !value.getCode().contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0005&quot;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// remove by key&lt;/span&gt;\nupMap.keySet().removeIf(key -&amp;gt; key.contentEquals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;testUser&quot;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// remove by entry / key + value&lt;/span&gt;\nupMap.entrySet().removeIf(entry -&amp;gt; (entry.getKey().endsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;admin&quot;&lt;/span&gt;) || entry.getValue().getInputDT().isBefore(LocalDateTime.now().minusMinutes(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The best way (recommended) is use of &lt;code&gt;java.util.concurrent&lt;/code&gt; package. By\nusing this package you can easily avoid this exception. Refer\nModified Code:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    Collection&amp;lt;Integer&amp;gt; l = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CopyOnWriteArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i) {\n        l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n        l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n        l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;));\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Integer i : l) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i.intValue() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n            l.remove(i);\n        }\n    }\n    \n    System.out.println(l);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In case &lt;strong&gt;ArrayList:remove(int index)&lt;/strong&gt;- if(index is last element&apos;s position) it avoids without &lt;code&gt;System.arraycopy()&lt;/code&gt; and takes not time for this.&lt;/p&gt;\n\n&lt;p&gt;arraycopy time increases if(index decreases), by the way elements of list also decreases!&lt;/p&gt;\n\n&lt;p&gt;the best effective remove way is- removing its elements in descending order:\n&lt;code&gt;while(list.size()&amp;gt;0)list.remove(list.size()-1);&lt;/code&gt;//takes O(1)\n&lt;code&gt;while(list.size()&amp;gt;0)list.remove(0);&lt;/code&gt;//takes O(factorial(n))&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//region prepare data&lt;/span&gt;\nArrayList&amp;lt;Integer&amp;gt; ints = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\nArrayList&amp;lt;Integer&amp;gt; toRemove = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rdm&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; millis;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; rdm.nextInt();\n    ints.add(integer);\n}\nArrayList&amp;lt;Integer&amp;gt; intsForIndex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;(ints);\nArrayList&amp;lt;Integer&amp;gt; intsDescIndex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;(ints);\nArrayList&amp;lt;Integer&amp;gt; intsIterator = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;(ints);\n&lt;span class=&quot;hljs-comment&quot;&gt;//endregion&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// region for index&lt;/span&gt;\nmillis = System.currentTimeMillis();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; intsForIndex.size(); i++) \n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (intsForIndex.get(i) % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) intsForIndex.remove(i--);\nSystem.out.println(System.currentTimeMillis() - millis);\n&lt;span class=&quot;hljs-comment&quot;&gt;// endregion&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// region for index desc&lt;/span&gt;\nmillis = System.currentTimeMillis();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intsDescIndex.size() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i--) \n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (intsDescIndex.get(i) % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) intsDescIndex.remove(i);\nSystem.out.println(System.currentTimeMillis() - millis);\n&lt;span class=&quot;hljs-comment&quot;&gt;//endregion&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// region iterator&lt;/span&gt;\nmillis = System.currentTimeMillis();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;Integer&amp;gt; iterator = intsIterator.iterator(); iterator.hasNext(); )\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (iterator.next() % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) iterator.remove();\nSystem.out.println(System.currentTimeMillis() - millis);\n&lt;span class=&quot;hljs-comment&quot;&gt;//endregion&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;for index loop: 1090 msec&lt;/li&gt;\n&lt;li&gt;for desc index: &lt;strong&gt;519&lt;/strong&gt; msec---the best&lt;/li&gt;\n&lt;li&gt;for iterator: 1043 msec&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I know this question assumes just a &lt;code&gt;Collection&lt;/code&gt;, and not more specifically any &lt;code&gt;List&lt;/code&gt;.  But &lt;strong&gt;for those reading this question who are indeed working with a &lt;code&gt;List&lt;/code&gt; reference, you can avoid &lt;code&gt;ConcurrentModificationException&lt;/code&gt; with a &lt;code&gt;while&lt;/code&gt;-loop (while modifying within it) instead if you want to avoid &lt;code&gt;Iterator&lt;/code&gt;&lt;/strong&gt; (either if you want to avoid it in general, or avoid it specifically to achieve a looping order different from start-to-end stopping at each element [which I believe is the only order &lt;code&gt;Iterator&lt;/code&gt; itself can do]):&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;*Update: See comments below that clarify the analogous is also achievable with the &lt;em&gt;traditional&lt;/em&gt;-for-loop.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Integer&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i){\n    list.add(i);\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i &amp;lt; list.size()){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(list.get(i) % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){\n        list.remove(i++);\n\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        i += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;No ConcurrentModificationException from that code.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;There we see looping not start at the beginning, and not stop at &lt;em&gt;every&lt;/em&gt; element (which I believe &lt;code&gt;Iterator&lt;/code&gt; itself can&apos;t do).&lt;/p&gt;\n\n&lt;p&gt;FWIW we also see &lt;code&gt;get&lt;/code&gt; being called on &lt;code&gt;list&lt;/code&gt;, which could not be done if its reference was just &lt;code&gt;Collection&lt;/code&gt; (instead of the more specific &lt;code&gt;List&lt;/code&gt;-type of &lt;code&gt;Collection&lt;/code&gt;) - &lt;code&gt;List&lt;/code&gt; interface includes &lt;code&gt;get&lt;/code&gt;, but &lt;code&gt;Collection&lt;/code&gt; interface does not.  If not for that difference, then the &lt;code&gt;list&lt;/code&gt; reference could instead be a &lt;code&gt;Collection&lt;/code&gt; [and therefore technically this Answer would then be a direct Answer, instead of a tangential Answer].&lt;/p&gt;\n\n&lt;p&gt;FWIWW same code still works after modified to start at beginning at stop at every element (just like &lt;code&gt;Iterator&lt;/code&gt; order):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Integer&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i){\n    list.add(i);\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i &amp;lt; list.size()){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(list.get(i) % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){\n        list.remove(i);\n\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        ++i;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;you can also use &lt;strong&gt;Recursion&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Recursion in java is a process in which a method calls itself continuously. A method in java that calls itself is called recursive method.&lt;/p&gt;\n    ","\n&lt;p&gt;this might not be the best way, but for most of the small cases this should acceptable:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;em&gt;&quot;create a second empty-array and add only the ones you want to keep&quot;&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;sub&gt;I don&apos;t remeber where I read this from... for justiness I will make this wiki in hope someone finds it or just to don&apos;t earn rep I don&apos;t deserve.&lt;/sub&gt;&lt;/p&gt;\n    "]},"randomTags":[{"name":"path","slug":"path"},{"name":"web-scraping","slug":"web-scraping"},{"name":"variables","slug":"variables"},{"name":"android-gradle-plugin","slug":"android-gradle-plugin"},{"name":"instantiation","slug":"instantiation"},{"name":"sizeof","slug":"sizeof"},{"name":"jsf-2","slug":"jsf-2"},{"name":"prepared-statement","slug":"prepared-statement"},{"name":"swing","slug":"swing"},{"name":"ios","slug":"ios"},{"name":"sapply","slug":"sapply"},{"name":"directory","slug":"directory"},{"name":"tsql","slug":"tsql"},{"name":"jvm-hotspot","slug":"jvm-hotspot"},{"name":"html-parsing","slug":"html-parsing"},{"name":"parameters","slug":"parameters"},{"name":"c-preprocessor","slug":"c-preprocessor"},{"name":"browser","slug":"browser"},{"name":"keyword","slug":"keyword"},{"name":"integer","slug":"integer"}]},"__N_SSG":true}