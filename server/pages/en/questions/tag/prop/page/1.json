{"pageProps":{"data":{"count":1,"rows":[{"id":187,"title":".prop() vs .attr()","slug":".prop()-vs-.attr()-1657384898328","postType":"QUESTION","createdAt":"2022-07-09T16:41:38.000Z","updatedAt":"2022-07-09T16:41:38.000Z","tags":[{"id":688,"name":"prop","slug":"prop","createdAt":"2022-07-09T16:41:38.000Z","updatedAt":"2022-07-09T16:41:38.000Z","Questions_Tags":{"questionId":187,"tagId":688}}]}]},"slug":"prop","page":"1","answers":{"187":["\n&lt;p&gt;&lt;strong&gt;Update 1 November 2012&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;My original answer applies specifically to jQuery 1.6. My advice remains the same but jQuery 1.6.1 changed things slightly: in the face of the predicted pile of broken websites, the jQuery team &lt;a href=&quot;http://blog.jquery.com/2011/05/12/jquery-1-6-1-released/&quot; rel=&quot;noreferrer&quot;&gt;reverted &lt;code&gt;attr()&lt;/code&gt; to something close to (but not exactly the same as) its old behaviour for Boolean attributes&lt;/a&gt;. John Resig also &lt;a href=&quot;http://ejohn.org/blog/jquery-16-and-attr/&quot; rel=&quot;noreferrer&quot;&gt;blogged about it&lt;/a&gt;. I can see the difficulty they were in but still disagree with his recommendation to prefer &lt;code&gt;attr()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Original answer&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If you&apos;ve only ever used jQuery and not the DOM directly, this could be a confusing change, although it is definitely an improvement conceptually. Not so good for the bazillions of sites using jQuery that will break as a result of this change though.&lt;/p&gt;\n\n&lt;p&gt;I&apos;ll summarize the main issues:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You usually want &lt;code&gt;prop()&lt;/code&gt; rather than &lt;code&gt;attr()&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;In the majority of cases, &lt;code&gt;prop()&lt;/code&gt; does what &lt;code&gt;attr()&lt;/code&gt; used to do. Replacing calls to &lt;code&gt;attr()&lt;/code&gt; with &lt;code&gt;prop()&lt;/code&gt; in your code will generally work.&lt;/li&gt;\n&lt;li&gt;Properties are generally simpler to deal with than attributes. An attribute value may only be a string whereas a property can be of any type. For example, the &lt;code&gt;checked&lt;/code&gt; property is a Boolean, the &lt;code&gt;style&lt;/code&gt; property is an object with individual properties for each style, the &lt;code&gt;size&lt;/code&gt; property is a number.&lt;/li&gt;\n&lt;li&gt;Where both a property and an attribute with the same name exists, usually updating one will update the other, but this is not the case for certain attributes of inputs, such as &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;checked&lt;/code&gt;: for these attributes, the property always represents the current state while the attribute (except in old versions of IE) corresponds to the default value/checkedness of the input (reflected in the &lt;code&gt;defaultValue&lt;/code&gt; / &lt;code&gt;defaultChecked&lt;/code&gt; property).&lt;/li&gt;\n&lt;li&gt;This change removes some of the layer of magic jQuery stuck in front of attributes and properties, meaning jQuery developers will have to learn a bit about the difference between properties and attributes. This is a good thing.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you&apos;re a jQuery developer and are confused by this whole business about properties and attributes, you need to take a step back and learn a little about it, since jQuery is no longer trying so hard to shield you from this stuff. For the authoritative but somewhat dry word on the subject, there&apos;s the specs: &lt;a href=&quot;http://www.w3.org/TR/dom/&quot; rel=&quot;noreferrer&quot;&gt;DOM4&lt;/a&gt;, &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-HTML/&quot; rel=&quot;noreferrer&quot;&gt;HTML DOM&lt;/a&gt;, &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Core&quot; rel=&quot;noreferrer&quot;&gt;DOM Level 2&lt;/a&gt;, &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/&quot; rel=&quot;noreferrer&quot;&gt;DOM Level 3&lt;/a&gt;. Mozilla&apos;s DOM documentation is valid for most modern browsers and is easier to read than the specs, so you may find their &lt;a href=&quot;https://developer.mozilla.org/en/gecko_dom_reference&quot; rel=&quot;noreferrer&quot;&gt;DOM reference&lt;/a&gt; helpful. There&apos;s a &lt;a href=&quot;https://developer.mozilla.org/en/DOM/element#Properties&quot; rel=&quot;noreferrer&quot;&gt;section on element properties&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;As an example of how properties are simpler to deal with than attributes, consider a checkbox that is initially checked. Here are two possible pieces of valid HTML to do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;input id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cb&quot;&lt;/span&gt; type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; checked&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cb&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;checked&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checked&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, how do you find out if the checkbox is checked with jQuery? Look on Stack Overflow and you&apos;ll commonly find the following suggestions:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;if ( $(&quot;#cb&quot;).attr(&quot;checked&quot;) === true ) {...}&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;if ( $(&quot;#cb&quot;).attr(&quot;checked&quot;) == &quot;checked&quot; ) {...}&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;if ( $(&quot;#cb&quot;).is(&quot;:checked&quot;) ) {...}&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This is actually the simplest thing in the world to do with the &lt;code&gt;checked&lt;/code&gt; Boolean property, which has existed and worked flawlessly in every major scriptable browser since 1995:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;if (document.getElementById(&quot;cb&quot;).checked) {...}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The property also makes checking or unchecking the checkbox trivial:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;document.getElementById(&quot;cb&quot;).checked = false&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;In jQuery 1.6, this unambiguously becomes&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;$(&quot;#cb&quot;).prop(&quot;checked&quot;, false)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The idea of using the &lt;code&gt;checked&lt;/code&gt; attribute for scripting a checkbox is unhelpful and unnecessary. The property is what you need.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It&apos;s not obvious what the correct way to check or uncheck the checkbox is using the &lt;code&gt;checked&lt;/code&gt; attribute&lt;/li&gt;\n&lt;li&gt;The attribute value reflects the default rather than the current visible state (except in some older versions of IE, thus making things still harder). The attribute tells you nothing about the whether the checkbox on the page is checked. See &lt;a href=&quot;http://jsfiddle.net/VktA6/49/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/VktA6/49/&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I think &lt;a href=&quot;https://stackoverflow.com/questions/5874652/prop-vs-attr/5876747#5876747&quot;&gt;Tim said it quite well&lt;/a&gt;, but let&apos;s step back:&lt;/p&gt;\n\n&lt;p&gt;A DOM element is an object, a thing in memory. Like most objects in OOP, it has &lt;em&gt;properties&lt;/em&gt;. It also, separately, has a map of the attributes defined on the element (usually coming from the markup that the browser read to create the element). Some of the element&apos;s &lt;em&gt;properties&lt;/em&gt; get their &lt;em&gt;initial&lt;/em&gt; values from &lt;em&gt;attributes&lt;/em&gt; with the same or similar names (&lt;code&gt;value&lt;/code&gt; gets its initial value from the &quot;value&quot; attribute; &lt;code&gt;href&lt;/code&gt; gets its initial value from the &quot;href&quot; attribute, but it&apos;s not exactly the same value; &lt;code&gt;className&lt;/code&gt; from the &quot;class&quot; attribute). Other properties get their initial values in other ways: For instance, the &lt;code&gt;parentNode&lt;/code&gt; property gets its value based on what its parent element is; an element always has a &lt;code&gt;style&lt;/code&gt; property, whether it has a &quot;style&quot; attribute or not.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s consider this anchor in a page at &lt;code&gt;http://example.com/testing.html&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;a href=&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo.html&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;test one&apos;&lt;/span&gt; name=&lt;span class=&quot;hljs-string&quot;&gt;&apos;fooAnchor&apos;&lt;/span&gt; id=&lt;span class=&quot;hljs-string&quot;&gt;&apos;fooAnchor&apos;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Hi&lt;/span&gt;&amp;lt;/a&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Some gratuitous ASCII art (and leaving out a lot of stuff):&lt;/p&gt;\n\n&lt;pre&gt;++\n|             HTMLAnchorElement             |\n++\n| href:       &quot;http://example.com/foo.html&quot; |\n| name:       &quot;fooAnchor&quot;                   |\n| id:         &quot;fooAnchor&quot;                   |\n| className:  &quot;test one&quot;                    |\n| attributes:                               |\n|    href:  &quot;foo.html&quot;                      |\n|    name:  &quot;fooAnchor&quot;                     |\n|    id:    &quot;fooAnchor&quot;                     |\n|    class: &quot;test one&quot;                      |\n++\n&lt;/pre&gt;\n\n&lt;p&gt;Note that the properties and attributes are distinct.&lt;/p&gt;\n\n&lt;p&gt;Now, although they are distinct, because all of this evolved rather than being designed from the ground up, a number of properties write back to the attribute they derived from if you set them. But not all do, and as you can see from &lt;code&gt;href&lt;/code&gt; above, the mapping is not always a straight &quot;pass the value on&quot;, sometimes there&apos;s interpretation involved.&lt;/p&gt;\n\n&lt;p&gt;When I talk about properties being properties of an object, I&apos;m not speaking in the abstract. Here&apos;s some non-jQuery code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; link = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fooAnchor&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(link.&lt;span class=&quot;hljs-property&quot;&gt;href&lt;/span&gt;);                 &lt;span class=&quot;hljs-comment&quot;&gt;// alerts &quot;http://example.com/foo.html&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(link.&lt;span class=&quot;hljs-title function_&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;href&quot;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// alerts &quot;foo.html&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Those values are as per most browsers; there&apos;s some variation.)&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;link&lt;/code&gt; object is a real thing, and you can see there&apos;s a real distinction between accessing a &lt;em&gt;property&lt;/em&gt; on it, and accessing an &lt;em&gt;attribute&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;As Tim said, the &lt;strong&gt;vast majority&lt;/strong&gt; of the time, we want to be working with properties. Partially that&apos;s because their values (even their names) tend to be more consistent across browsers. We mostly only want to work with attributes when there is no property related to it (custom attributes), or when we know that for that particular attribute, the attribute and the property are not 1:1 (as with &lt;code&gt;href&lt;/code&gt; and &quot;href&quot; above).&lt;/p&gt;\n\n&lt;p&gt;The standard properties are laid out in the various DOM specs:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-HTML/&quot; rel=&quot;noreferrer&quot;&gt;DOM2 HTML&lt;/a&gt; &lt;em&gt;(largely obsolete, see the &lt;a href=&quot;https://www.w3.org/TR/html5/&quot; rel=&quot;noreferrer&quot;&gt;HTML spec&lt;/a&gt; instead)&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Core/&quot; rel=&quot;noreferrer&quot;&gt;DOM2 Core&lt;/a&gt; &lt;em&gt;(obsolete)&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-3-Core/&quot; rel=&quot;noreferrer&quot;&gt;DOM3 Core&lt;/a&gt; &lt;em&gt;(obsolete)&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/domcore/&quot; rel=&quot;noreferrer&quot;&gt;DOM4&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;These specs have excellent indexes and I recommend keeping links to them handy; I use them all the time.&lt;/p&gt;\n\n&lt;p&gt;Custom attributes would include, for instance, any &lt;code&gt;data-xyz&lt;/code&gt; attributes you might put on elements to provide meta-data to your code (now that that&apos;s valid as of HTML5, as long as you stick to the &lt;code&gt;data-&lt;/code&gt; prefix). (Recent versions of jQuery give you access to &lt;code&gt;data-xyz&lt;/code&gt; elements via the &lt;code&gt;data&lt;/code&gt; function, but that function is &lt;strong&gt;not&lt;/strong&gt; just an accessor for &lt;code&gt;data-xyz&lt;/code&gt; attributes [it does both more and less than that]; unless you actually need its features, I&apos;d use the &lt;code&gt;attr&lt;/code&gt; function to interact with &lt;code&gt;data-xyz&lt;/code&gt; attribute.)&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;attr&lt;/code&gt; function used to have some convoluted logic around getting what they thought you wanted, rather than literally getting the attribute. It conflated the concepts. Moving to &lt;code&gt;prop&lt;/code&gt; and &lt;code&gt;attr&lt;/code&gt; was meant to de-conflate them. Briefly in v1.6.0 jQuery went too far in that regard, but functionality &lt;a href=&quot;http://blog.jquery.com/2011/05/10/jquery-1-6-1-rc-1-released/&quot; rel=&quot;noreferrer&quot;&gt;was quickly added back&lt;/a&gt; to &lt;code&gt;attr&lt;/code&gt; to handle the common situations where people use &lt;code&gt;attr&lt;/code&gt; when technically they should use &lt;code&gt;prop&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This change has been a long time coming for jQuery. For years, they&apos;ve been content with a function named &lt;code&gt;attr()&lt;/code&gt; that mostly retrieved DOM properties, not the result you&apos;d expect from the name. The segregation of &lt;a href=&quot;http://api.jquery.com/attr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;attr()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://api.jquery.com/prop&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;prop()&lt;/code&gt;&lt;/a&gt; should help alleviate some of the confusion between HTML attributes and DOM properties. &lt;code&gt;$.fn.prop()&lt;/code&gt; grabs the specified DOM property, while &lt;code&gt;$.fn.attr()&lt;/code&gt; grabs the specified HTML attribute.&lt;/p&gt;\n&lt;p&gt;To fully understand how they work, here&apos;s an extended explanation on the difference between HTML attributes and DOM properties.:&lt;/p&gt;\n&lt;h2&gt;HTML Attributes&lt;/h2&gt;\n&lt;h3&gt;Syntax:&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;&amp;lt;body onload=&quot;foo()&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt;\nAllows markup to have data associated with it for events, rendering, and other purposes.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Visualization:&lt;/strong&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/NGBd6.png&quot; alt=&quot;HTML Attributes&quot;&gt;\nThe class attribute is shown here on the body. It&apos;s accessible through the following code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; attr;\nattr = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;class&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//IE 8 Quirks and below&lt;/span&gt;\nattr = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;className&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Attributes are returned in string form and can be inconsistent from browser to browser. However, they can be vital in some situations. As exemplified above, IE 8 Quirks Mode (and below) expects the name of a DOM property in get/set/removeAttribute instead of the attribute name. This is one of many reasons why it&apos;s important to know the difference.&lt;/p&gt;\n&lt;h2&gt;DOM Properties&lt;/h2&gt;\n&lt;h3&gt;Syntax:&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;document.body.onload = foo;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt;\nGives access to properties that belong to element nodes. These properties are similar to attributes, but are only accessible through JavaScript. This is an important difference that helps clarify the role of DOM properties. &lt;strong&gt;Please note that attributes are completely different from properties&lt;/strong&gt;, as this event handler assignment is useless and won&apos;t receive the event (body doesn&apos;t have an onload event, only an onload attribute).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Visualization:&lt;/strong&gt;\n&lt;img src=&quot;https://i.stack.imgur.com/genBY.png&quot; alt=&quot;DOM Properties&quot;&gt;&lt;/p&gt;\n&lt;p&gt;Here, you&apos;ll notice a list of properties under the &quot;DOM&quot; tab in Firebug. These are DOM properties. You&apos;ll immediately notice quite a few of them, as you&apos;ll have used them before without knowing it. Their values are what you&apos;ll be receiving through JavaScript.&lt;/p&gt;\n&lt;h2&gt;Documentation&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://books.google.ca/books?id=2weL0iAfrEMC&amp;amp;lpg=PT334&amp;amp;ots=_9VAqAT03C&amp;amp;dq=html%20attributes%20vs%20dom%20properties&amp;amp;pg=PT332#v=onepage&amp;amp;q&amp;amp;f=false&quot; rel=&quot;noreferrer&quot;&gt;JavaScript: The Definitive Guide by\nDavid Flanagan&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/HTML/Attributes&quot; rel=&quot;noreferrer&quot;&gt;HTML Attributes,\nMozilla Dev Center&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/DOM/element#Properties&quot; rel=&quot;noreferrer&quot;&gt;DOM Element Properties, Mozilla Dev Center&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Example&lt;/h2&gt;\n&lt;p&gt;HTML: &lt;code&gt;&amp;lt;textarea id=&quot;test&quot; value=&quot;foo&quot;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;JavaScript: &lt;code&gt;alert($(&apos;#test&apos;).attr(&apos;value&apos;));&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;In earlier versions of jQuery, this returns an empty string. In 1.6, it returns the proper value, &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Without having glanced at the new code for either function, I can say with confidence that the confusion has more to do with the difference between HTML attributes and DOM properties, than with the code itself. Hopefully, this cleared some things up for you.&lt;/p&gt;\n&lt;p&gt;-Matt&lt;/p&gt;\n    ","\n&lt;p&gt;A property is in the DOM; an attribute is in the HTML that is parsed into the DOM.&lt;/p&gt;\n&lt;h3&gt;Further detail&lt;/h3&gt;\n&lt;p&gt;If you change an attribute, the change will be reflected in the DOM (sometimes with a different name).&lt;/p&gt;\n&lt;p&gt;Example: Changing the &lt;code&gt;class&lt;/code&gt; attribute of a tag will change the &lt;code&gt;className&lt;/code&gt; property of that tag in the DOM (That&apos;s because &lt;code&gt;class&lt;/code&gt; is already used).\nIf you have no attribute on a tag, you still have the corresponding DOM property with an empty or a default value.&lt;/p&gt;\n&lt;p&gt;Example: While your tag has no &lt;code&gt;class&lt;/code&gt; attribute, the DOM property &lt;code&gt;className&lt;/code&gt; does exist with a empty string value.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;edit&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If you change the one, the other will be changed by a controller, and vice versa.\nThis controller is not in jQuery, but in the browser&apos;s native code.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s just the distinction between HTML attributes and DOM objects that causes a confusion. For those that are comfortable acting on the DOM elements native properties such a &lt;code&gt;this.src&lt;/code&gt; &lt;code&gt;this.value&lt;/code&gt; &lt;code&gt;this.checked&lt;/code&gt; etc, &lt;code&gt;.prop&lt;/code&gt; is a very warm welcome to the family. For others, it&apos;s just an added layer of confusion. Let&apos;s clear that up.&lt;/p&gt;\n&lt;p&gt;The easiest way to see the difference between &lt;code&gt;.attr&lt;/code&gt; and &lt;code&gt;.prop&lt;/code&gt; is the following example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;input blah=&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;$(&apos;input&apos;).attr(&apos;blah&apos;)&lt;/code&gt;&lt;/strong&gt;: returns &lt;code&gt;&apos;hello&apos;&lt;/code&gt; as expected. No suprises here.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;$(&apos;input&apos;).prop(&apos;blah&apos;)&lt;/code&gt;&lt;/strong&gt;: returns &lt;code&gt;undefined&lt;/code&gt; -- because it&apos;s trying to do &lt;code&gt;[HTMLInputElement].blah&lt;/code&gt; -- and no such property on that DOM object exists. It only exists in the scope as an attribute of that element i.e. &lt;code&gt;[HTMLInputElement].getAttribute(&apos;blah&apos;)&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Now we change a few things like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;input&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;);\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;input&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;$(&apos;input&apos;).attr(&apos;blah&apos;)&lt;/code&gt;&lt;/strong&gt;: returns &lt;code&gt;&apos;apple&apos;&lt;/code&gt; eh? Why not &quot;pear&quot; as this was set last on that element. Because the property was changed on the input attribute, not the DOM input element itself -- they basically almost work independently of each other.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;$(&apos;input&apos;).prop(&apos;blah&apos;)&lt;/code&gt;&lt;/strong&gt;: returns &lt;code&gt;&apos;pear&apos;&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;The thing you really need to be careful with is just &lt;strong&gt;do not mix the usage of these for the same property throughout your application&lt;/strong&gt; for the above reason.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;See a fiddle demonstrating the difference:&lt;/strong&gt; &lt;a href=&quot;http://jsfiddle.net/garreh/uLQXc/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/garreh/uLQXc/&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;code&gt;.attr&lt;/code&gt; vs &lt;code&gt;.prop&lt;/code&gt;:&lt;/h2&gt;\n&lt;h3&gt;Round 1: style&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;input style=&lt;span class=&quot;hljs-string&quot;&gt;&quot;font:arial;&quot;&lt;/span&gt;/&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;.attr(&apos;style&apos;)&lt;/code&gt; -- returns inline styles for the matched element i.e. &lt;code&gt;&quot;font:arial;&quot;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;.prop(&apos;style&apos;)&lt;/code&gt; -- returns an style declaration object i.e. &lt;code&gt;CSSStyleDeclaration&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Round 2: value&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;input value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt; type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt;/&amp;gt;   \n\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;input&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;i changed the value&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;.attr(&apos;value&apos;)&lt;/code&gt; -- returns &lt;code&gt;&apos;hello&apos;&lt;/code&gt; *&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;.prop(&apos;value&apos;)&lt;/code&gt; -- returns &lt;code&gt;&apos;i changed the value&apos;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;* Note: jQuery for this reason has a &lt;code&gt;.val()&lt;/code&gt; method, which internally is equivalent to &lt;code&gt;.prop(&apos;value&apos;)&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Use &lt;code&gt;prop()&lt;/code&gt; over &lt;code&gt;attr()&lt;/code&gt; in the majority of cases.&lt;/p&gt;\n\n&lt;p&gt;A &lt;em&gt;property&lt;/em&gt; is the current state of the input element. An &lt;em&gt;attribute&lt;/em&gt; is the default value.&lt;/p&gt;\n\n&lt;p&gt;A property can contain things of different types. An attribute can only contain strings&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Dirty checkedness&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This concept provides an example where the difference is observable: &lt;a href=&quot;http://www.w3.org/TR/html5/forms.html#concept-input-checked-dirty&quot; rel=&quot;noreferrer&quot;&gt;http://www.w3.org/TR/html5/forms.html#concept-input-checked-dirty&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Try it out:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;click the button. Both checkboxes got checked.&lt;/li&gt;\n&lt;li&gt;uncheck both checkboxes.&lt;/li&gt;\n&lt;li&gt;click the button again. Only the &lt;code&gt;prop&lt;/code&gt; checkbox got checked. BANG!&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;button&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#attr&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;checked&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;checked&apos;&lt;/span&gt;)\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#prop&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;checked&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n})&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;attr &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;attr&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;prop &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;prop&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Set checked attr and prop.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;For some attributes  like &lt;code&gt;disabled&lt;/code&gt; on &lt;code&gt;button&lt;/code&gt;, adding or removing the content attribute &lt;code&gt;disabled=&quot;disabled&quot;&lt;/code&gt; always toggles the property (called IDL attribute in HTML5) because &lt;a href=&quot;http://www.w3.org/TR/html5/forms.html#attr-fe-disabled&quot; rel=&quot;noreferrer&quot;&gt;http://www.w3.org/TR/html5/forms.html#attr-fe-disabled&lt;/a&gt; says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The disabled IDL attribute must reflect the disabled content attribute.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;so you might get away with it, although it is ugly since it modifies HTML without need.&lt;/p&gt;\n\n&lt;p&gt;For other attributes like &lt;code&gt;checked=&quot;checked&quot;&lt;/code&gt; on &lt;code&gt;input type=&quot;checkbox&quot;&lt;/code&gt;, things break, because once you click on it, it becomes dirty, and then adding or removing the &lt;code&gt;checked=&quot;checked&quot;&lt;/code&gt; content attribute &lt;strong&gt;does not toggle checkedness anymore&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;This is why you should use mostly &lt;code&gt;.prop&lt;/code&gt;, as it affects the effective property directly, instead of relying on complex side-effects of modifying the HTML.&lt;/p&gt;\n    ","\n&lt;p&gt;All is in &lt;a href=&quot;https://api.jquery.com/prop/&quot; rel=&quot;noreferrer&quot;&gt;the doc&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The difference between attributes and properties can be important in specific situations. Before jQuery 1.6, the .attr() method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. As of jQuery 1.6, the .prop() method provides a way to explicitly retrieve property values, while .attr() retrieves attributes.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So use prop!&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;attributes&lt;/strong&gt; are in your HTML &lt;em&gt;text document/file&lt;/em&gt; (== imagine this is the result of your html markup parsed), whereas&lt;br&gt;\n&lt;strong&gt;properties&lt;/strong&gt; are in HTML &lt;em&gt;DOM tree&lt;/em&gt; (== basically an actual property of some object in JS sense).&lt;/p&gt;\n\n&lt;p&gt;Importantly, many of them are synced (if you update &lt;code&gt;class&lt;/code&gt; property, &lt;code&gt;class&lt;/code&gt; attribute in html will also be updated; and otherwise). &lt;strong&gt;But&lt;/strong&gt; some attributes may be synced to unexpected properties - eg, &lt;strong&gt;attribute&lt;/strong&gt; &lt;code&gt;checked&lt;/code&gt; corresponds to &lt;strong&gt;property&lt;/strong&gt; &lt;code&gt;defaultChecked&lt;/code&gt;, so that&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;manually checking a checkbox will change &lt;code&gt;.prop(&apos;checked&apos;)&lt;/code&gt; value, but will not change &lt;code&gt;.attr(&apos;checked&apos;)&lt;/code&gt; and &lt;code&gt;.prop(&apos;defaultChecked&apos;)&lt;/code&gt; values&lt;/li&gt;\n&lt;li&gt;setting &lt;code&gt;$(&apos;#input&apos;).prop(&apos;defaultChecked&apos;, true)&lt;/code&gt; will also change &lt;code&gt;.attr(&apos;checked&apos;)&lt;/code&gt;, but this will not be visible on an element.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Rule of thumb is&lt;/strong&gt;: &lt;code&gt;.prop()&lt;/code&gt; method should be used for boolean attributes/properties and for properties which do not exist in html\n  (such as window.location). All other attributes (ones you can see in\n  the html) can and should continue to be manipulated with the &lt;code&gt;.attr()&lt;/code&gt;\n  method. (&lt;a href=&quot;http://blog.jquery.com/2011/05/10/jquery-1-6-1-rc-1-released/&quot; rel=&quot;noreferrer&quot;&gt;http://blog.jquery.com/2011/05/10/jquery-1-6-1-rc-1-released/&lt;/a&gt;)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;And here is a table that shows where &lt;code&gt;.prop()&lt;/code&gt; is preferred (even though &lt;code&gt;.attr()&lt;/code&gt; can still be used).&lt;/p&gt;\n\n&lt;h2&gt;  &lt;img src=&quot;https://i.stack.imgur.com/gE0uq.png&quot; alt=&quot;table with preferred usage&quot;&gt;&lt;/h2&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Why would you sometimes want to use .prop() instead of .attr() where latter is officially adviced?&lt;/h3&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;.prop()&lt;/code&gt; can return any type - string, integer, boolean; while &lt;code&gt;.attr()&lt;/code&gt; always returns a string.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;.prop()&lt;/code&gt; is said to be about 2.5 times faster than &lt;code&gt;.attr()&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;&lt;code&gt;.attr()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Get the value of an &lt;strong&gt;attribute&lt;/strong&gt; for the first element in the set of matched elements.&lt;/li&gt;\n&lt;li&gt;Gives you the value of element as it was defined in the html on page load&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;code&gt;.prop()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Get the value of a &lt;strong&gt;property&lt;/strong&gt; for the first element in the set of matched elements.&lt;/li&gt;\n&lt;li&gt;Gives the updated values of elements which is modified via javascript/jquery&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Usually you&apos;ll want to use properties.\nUse attributes only for:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Getting a custom HTML attribute (since it&apos;s not synced with a DOM property).&lt;/li&gt;\n&lt;li&gt;Getting a HTML attribute that doesn&apos;t sync with a DOM property, e.g. get the &quot;original value&quot; of a standard HTML attribute, like &lt;code&gt;&amp;lt;input value=&quot;abc&quot;&amp;gt;.&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;&lt;code&gt;attributes&lt;/code&gt; -&amp;gt; HTML&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;properties&lt;/code&gt; -&amp;gt; DOM&lt;/p&gt;\n    ","\n&lt;p&gt;Before jQuery 1.6 , the &lt;code&gt;attr()&lt;/code&gt; method &lt;strong&gt;&lt;em&gt;sometimes&lt;/em&gt;&lt;/strong&gt; took property values into account when retrieving attributes, this caused rather inconsistent behavior. &lt;/p&gt;\n\n&lt;p&gt;The introduction of the &lt;code&gt;prop()&lt;/code&gt; method provides a way to explicitly retrieve property values, while &lt;code&gt;.attr()&lt;/code&gt; retrieves attributes.&lt;/p&gt;\n\n&lt;p&gt;The Docs:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;jQuery.attr()&lt;/code&gt;\nGet the value of an attribute for the first element in the set of matched elements.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;jQuery.prop()&lt;/code&gt;\nGet the value of a property for the first element in the set of matched elements.&lt;/p&gt;\n    ","\n&lt;h2&gt;One thing &lt;code&gt;.attr()&lt;/code&gt; can do that &lt;code&gt;.prop()&lt;/code&gt; can&apos;t:  affect CSS selectors&lt;/h2&gt;\n\n&lt;p&gt;Here&apos;s an issue I didn&apos;t see in the other answers.&lt;/p&gt;\n\n&lt;p&gt;CSS selector &lt;code&gt;[name=value]&lt;/code&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;will respond to &lt;code&gt;.attr(&apos;name&apos;, &apos;value&apos;)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;but not always to &lt;code&gt;.prop(&apos;name&apos;, &apos;value&apos;)&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;code&gt;.prop()&lt;/code&gt; affects only a few attribute-selectors&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://jsfiddle.net/51xosq29/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;input[name]&lt;/code&gt;&lt;/a&gt;  (thanks &lt;a href=&quot;https://stackoverflow.com/questions/5874652/prop-vs-attr/5876747?noredirect=1#comment99696762_5876747&quot;&gt;@TimDown&lt;/a&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;code&gt;.attr()&lt;/code&gt; affects all attribute-selectors&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://jsfiddle.net/BobStein/cqfwtyj9/2/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;input[value]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://jsfiddle.net/BobStein/tw038Laf/2/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;input[naame]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://jsfiddle.net/BobStein/m2hsxder/2/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;span[name]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://jsfiddle.net/BobStein/szto3d06/3/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;input[data-custom-attribute]&lt;/code&gt;&lt;/a&gt; (neither will &lt;code&gt;.data(&apos;custom-attribute&apos;)&lt;/code&gt; affect this selector)&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Gently reminder about using &lt;code&gt;prop()&lt;/code&gt;, example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ($(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#checkbox1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;checked&apos;&lt;/span&gt;)) {\n    isDelete = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    isDelete = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function above is used to check if checkbox1 is checked or not, if checked: return 1; if not: return 0. Function prop() used here as a GET function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ($(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#checkbox1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;checked&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)) {\n    isDelete = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    isDelete = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function above is used to set checkbox1 to be checked and ALWAYS return 1. Now function prop() used as a SET function.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Don&apos;t mess up.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;P/S: When I&apos;m checking Image &lt;strong&gt;&lt;em&gt;src&lt;/em&gt;&lt;/strong&gt; property. If the &lt;strong&gt;&lt;em&gt;src&lt;/em&gt;&lt;/strong&gt; is empty, &lt;strong&gt;prop&lt;/strong&gt; return the current URL of the page (wrong), and &lt;strong&gt;attr&lt;/strong&gt; return empty string (right).&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;1) A property is in the DOM; an attribute is in the HTML that is\n  parsed into the DOM.&lt;/p&gt;\n  \n  &lt;p&gt;2) $( elem ).attr( &quot;checked&quot; ) (1.6.1+)   &quot;checked&quot; (String) Will\n  change with checkbox state&lt;/p&gt;\n  \n  &lt;p&gt;3) $( elem ).attr( &quot;checked&quot; ) (pre-1.6)    true (Boolean) Changed\n  with checkbox state&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Mostly we want to use for DOM object rather then custom attribute\nlike &lt;code&gt;data-img, data-xyz&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Also some of difference when accessing &lt;code&gt;checkbox&lt;/code&gt; value and &lt;code&gt;href&lt;/code&gt;\nwith &lt;code&gt;attr()&lt;/code&gt; and &lt;code&gt;prop()&lt;/code&gt; as thing change with DOM output with\n&lt;code&gt;prop()&lt;/code&gt; as full link from &lt;code&gt;origin&lt;/code&gt; and &lt;code&gt;Boolean&lt;/code&gt; value for checkbox\n&lt;code&gt;(pre-1.6)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;We can only access DOM elements with &lt;code&gt;prop&lt;/code&gt; other then it gives &lt;strong&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.6.0/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!doctype &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;prop demo&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-css&quot;&gt;\n    &lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt; {\n      &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-selector-tag&quot;&gt;b&lt;/span&gt; {\n      &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: blue;\n    }\n  &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;check1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;checked&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checked&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;check1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Check me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;input&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;change&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; $input = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n      $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;p&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;.attr( \\&quot;checked\\&quot; ): &amp;lt;b&amp;gt;&quot;&lt;/span&gt; + $input.&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;checked&quot;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;&quot;&lt;/span&gt; +\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;.prop( \\&quot;checked\\&quot; ): &amp;lt;b&amp;gt;&quot;&lt;/span&gt; + $input.&lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;checked&quot;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;&quot;&lt;/span&gt; +\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;.is( \\&quot;:checked\\&quot; ): &amp;lt;b&amp;gt;&quot;&lt;/span&gt; + $input.&lt;span class=&quot;hljs-title function_&quot;&gt;is&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:checked&quot;&lt;/span&gt;)) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;;\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;change&lt;/span&gt;();\n  &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;There are few more considerations in prop() vs attr():&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, and defaultSelected..etc should be retrieved and set with the .prop() method. These do not have corresponding attributes and are only properties.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;For input type checkbox&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;   .&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;checked&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//returns  checked&lt;/span&gt;\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;checked&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//returns  true&lt;/span&gt;\n   .&lt;span class=&quot;hljs-title function_&quot;&gt;is&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:checked&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//returns true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;prop method returns Boolean value for checked, selected, disabled,\nreadOnly..etc while attr returns defined string. So, you can directly\nuse .prop(checked) in if condition.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;.attr() calls .prop() internally so .attr() method will be slightly\nslower than accessing them directly through .prop().&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Gary Hole answer is very relevant to solve the problem if the code is written in such way&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj.&lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;style&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;border:1px red solid;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since the prop function return &lt;code&gt;CSSStyleDeclaration&lt;/code&gt; object, above code will not working properly in some browser(tested with &lt;code&gt;IE8 with Chrome Frame Plugin&lt;/code&gt; in my case).&lt;/p&gt;\n\n&lt;p&gt;Thus changing it into following code&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj.&lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;style&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;cssText&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;border:1px red solid;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;solved the problem.&lt;/p&gt;\n    "]},"randomTags":[{"name":"reference","slug":"reference"},{"name":"authentication","slug":"authentication"},{"name":"height","slug":"height"},{"name":"listener","slug":"listener"},{"name":"sharedpreferences","slug":"sharedpreferences"},{"name":"package","slug":"package"},{"name":"fgets","slug":"fgets"},{"name":"sql-server-2005","slug":"sql-server-2005"},{"name":"sleep","slug":"sleep"},{"name":"jsf","slug":"jsf"},{"name":"commandlink","slug":"commandlink"},{"name":"kotlin","slug":"kotlin"},{"name":"variable-variables","slug":"variable-variables"},{"name":"c-strings","slug":"c-strings"},{"name":"startactivityforresult","slug":"startactivityforresult"},{"name":"reserved-words","slug":"reserved-words"},{"name":"argument-unpacking","slug":"argument-unpacking"},{"name":"httpurlconnection","slug":"httpurlconnection"},{"name":"javascript","slug":"javascript"},{"name":"web-scraping","slug":"web-scraping"}]},"__N_SSG":true}