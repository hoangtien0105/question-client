{"pageProps":{"data":{"count":1,"rows":[{"id":201,"title":"How do I sort a dictionary by value?","slug":"how-do-i-sort-a-dictionary-by-value-1657385485049","postType":"QUESTION","createdAt":"2022-07-09T16:51:25.000Z","updatedAt":"2022-07-09T16:51:25.000Z","tags":[{"id":1439,"name":"dictionary","slug":"dictionary","createdAt":"2022-07-09T16:51:25.000Z","updatedAt":"2022-07-09T16:51:25.000Z","Questions_Tags":{"questionId":201,"tagId":1439}}]}]},"slug":"dictionary","page":"1","answers":{"201":["\n&lt;h3&gt;Python 3.7+ or CPython 3.6&lt;/h3&gt;\n&lt;p&gt;Dicts preserve insertion order in Python 3.7+. Same in CPython 3.6, but &lt;a href=&quot;https://stackoverflow.com/q/39980323/4518341&quot;&gt;it&apos;s an implementation detail&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;{k: v &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; item: item[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])}\n{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; item: item[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Older Python&lt;/h3&gt;\n&lt;p&gt;It is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a listprobably a list of tuples.&lt;/p&gt;\n&lt;p&gt;For instance,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\nx = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;sorted_x&lt;/code&gt; will be a list of tuples sorted by the second element in each tuple. &lt;code&gt;dict(sorted_x) == x&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;And for those wishing to sort on keys instead of values:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\nx = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In Python3 since &lt;a href=&quot;https://stackoverflow.com/a/15712231/4293057&quot;&gt;unpacking is not allowed&lt;/a&gt; we can use&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; kv: kv[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want the output as a dict, you can use &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.OrderedDict&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;collections.OrderedDict&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; collections\n\nsorted_dict = collections.OrderedDict(sorted_x)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;As simple as: &lt;code&gt;sorted(dict1, key=dict1.get)&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;Well, it is actually possible to do a &quot;sort by dictionary values&quot;. Recently I had to do that in a Code Golf (Stack Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3169051/code-golf-word-frequency-chart#3170549&quot;&gt;Code golf: Word frequency chart&lt;/a&gt;&lt;/em&gt;). Abridged, the problem was of the kind: given a text, count how often each word is encountered and display a list of the top words, sorted by decreasing frequency. &lt;/p&gt;\n\n&lt;p&gt;If you construct a dictionary with the words as keys and the number of occurrences of each word as value, simplified here as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; defaultdict\nd = defaultdict(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; w &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; text.split():\n    d[w] += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then you can get a list of the words, ordered by frequency of use with &lt;a href=&quot;https://docs.python.org/library/functions.html#sorted&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;sorted(d, key=d.get)&lt;/code&gt;&lt;/a&gt; - the sort iterates over the dictionary keys, using the number of word occurrences as a sort key . &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; w &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d, key=d.get, reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(w, d[w])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am writing this detailed explanation to illustrate what people often mean by &quot;I can easily sort a dictionary by key, but how do I sort by value&quot; - and I think the original post was trying to address such an issue. And the solution is to do sort of list of the keys, based on the values, as shown above.&lt;/p&gt;\n    ","\n&lt;p&gt;You could use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will sort the dictionary by the values of each entry within the dictionary from smallest to largest.&lt;/p&gt;\n\n&lt;p&gt;To sort it in descending order just add &lt;code&gt;reverse=True&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;five&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;four&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\na = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])    \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;four&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;five&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Dicts can&apos;t be sorted, but you can build a sorted list from them.&lt;/p&gt;\n\n&lt;p&gt;A sorted list of dict values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.values())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A list of (key, value) pairs, sorted by value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itemgetter\n&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In recent Python 2.7, we have the new &lt;a href=&quot;http://docs.python.org/dev/whatsnew/2.7.html#pep-372-adding-an-ordered-dictionary-to-collections&quot; rel=&quot;noreferrer&quot;&gt;OrderedDict&lt;/a&gt; type, which remembers the order in which the items were added.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;third&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;fourth&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;second&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s: %s&quot;&lt;/span&gt; % (k, v)\n...\nsecond: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nfourth: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\nthird: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nfirst: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;fourth&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;third&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;first&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To make a new ordered dictionary from the original, sorting by the values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d_sorted_by_value = OrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The OrderedDict behaves like a normal dict:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d_sorted_by_value.items():\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s: %s&quot;&lt;/span&gt; % (k, v)\n...\nfirst: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nsecond: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nthird: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nfourth: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d_sorted_by_value\nOrderedDict([(&lt;span class=&quot;hljs-string&quot;&gt;&apos;first&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;third&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;fourth&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;UPDATE: 5 DECEMBER 2015 using Python 3.5&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Whilst I found the accepted answer useful, I was also surprised that it hasn&apos;t been updated to reference &lt;strong&gt;&lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.OrderedDict&quot; rel=&quot;noreferrer&quot;&gt;OrderedDict&lt;/a&gt;&lt;/strong&gt; from the standard library &lt;strong&gt;collections&lt;/strong&gt; module as a viable, modern alternative - designed to solve exactly this type of problem.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itemgetter\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n\nx = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = OrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# OrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The official &lt;strong&gt;&lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.OrderedDict&quot; rel=&quot;noreferrer&quot;&gt;OrderedDict&lt;/a&gt;&lt;/strong&gt; documentation offers a very similar example too, but using a lambda for the sort function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# regular unsorted dictionary&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# dictionary sorted by value&lt;/span&gt;\nOrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; t: t[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n&lt;span class=&quot;hljs-comment&quot;&gt;# OrderedDict([(&apos;pear&apos;, 1), (&apos;orange&apos;, 2), (&apos;banana&apos;, 3), (&apos;apple&apos;, 4)])&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Pretty much the same as &lt;a href=&quot;https://stackoverflow.com/a/613207/11044033&quot;&gt;Hank Gay&apos;s answer&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([(value,key) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (key,value) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mydict.items()])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or optimized slightly as suggested by John Fouhy:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;((value,key) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (key,value) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mydict.items())\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;As of &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.6.html&quot; rel=&quot;noreferrer&quot;&gt;Python 3.6&lt;/a&gt; the built-in dict will be ordered&lt;/h1&gt;\n\n&lt;p&gt;Good news, so the OP&apos;s original use case of mapping pairs retrieved from a database with unique string ids as keys and numeric values as values into a built-in Python v3.6+ dict, should now respect the insert order.&lt;/p&gt;\n\n&lt;p&gt;If say the resulting two column table expressions from a database query like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;SELECT a_key, a_value FROM a_table ORDER BY a_value;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;would be stored in two Python tuples, k_seq and v_seq (aligned by numerical index and with the same length of course), then:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;k_seq = (&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;)\nv_seq = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;)\nordered_map = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(k_seq, v_seq))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Allow to output later as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ordered_map.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(k, v)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yielding in this case (for the new Python 3.6+ built-in dict!):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;foo &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nbar &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nbaz &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in the same ordering per value of v.&lt;/p&gt;\n\n&lt;p&gt;Where in the Python 3.5 install on my machine it currently yields:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;bar &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nfoo &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nbaz &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Details:&lt;/h2&gt;\n\n&lt;p&gt;As proposed in 2012 by Raymond Hettinger (cf. mail on python-dev with subject &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2012-December/123028.html&quot; rel=&quot;noreferrer&quot;&gt;&quot;More compact dictionaries with faster iteration&quot;&lt;/a&gt;) and now (in 2016) announced in a mail by Victor Stinner to python-dev with subject &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2016-September/146327.html&quot; rel=&quot;noreferrer&quot;&gt;&quot;Python 3.6 dict becomes compact and gets a private version; and keywords become ordered&quot;&lt;/a&gt; due to the fix/implementation of issue 27350 &lt;a href=&quot;http://bugs.python.org/issue27350&quot; rel=&quot;noreferrer&quot;&gt;&quot;Compact and ordered dict&quot;&lt;/a&gt; in Python 3.6 we will now be able, to use a built-in dict to maintain insert order!!&lt;/p&gt;\n\n&lt;p&gt;Hopefully this will lead to a thin layer OrderedDict implementation as a first step. As @JimFasarakis-Hilliard indicated, some see use cases for the OrderedDict type also in the future. I think the Python community at large will carefully inspect, if this will stand the test of time, and what the next steps will be.&lt;/p&gt;\n\n&lt;p&gt;Time to rethink our coding habits to not miss the possibilities opened by stable ordering of:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Keyword arguments and&lt;/li&gt;\n&lt;li&gt;(intermediate) dict storage&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The first because it eases dispatch in the implementation of functions and methods in some cases.&lt;/p&gt;\n\n&lt;p&gt;The second as it encourages to more easily use &lt;code&gt;dict&lt;/code&gt;s as intermediate storage in processing pipelines.&lt;/p&gt;\n\n&lt;p&gt;Raymond Hettinger kindly provided documentation explaining &quot;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/3967849/sfmu2/_build/html/goal.html&quot; rel=&quot;noreferrer&quot; title=&quot;The Tech Behind Python 3.6 Dictionaries&quot;&gt;The Tech Behind Python 3.6 Dictionaries&lt;/a&gt;&quot; - from his San Francisco Python Meetup Group presentation 2016-DEC-08.&lt;/p&gt;\n\n&lt;p&gt;And maybe quite some Stack Overflow high decorated question and answer pages will receive variants of this information and many high quality answers will require a per version update too.&lt;/p&gt;\n\n&lt;h3&gt;Caveat Emptor (but also see below update 2017-12-15):&lt;/h3&gt;\n\n&lt;p&gt;As @ajcr rightfully notes: &quot;The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon.&quot; (from the &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.6.html&quot; rel=&quot;noreferrer&quot;&gt;whatsnew36&lt;/a&gt;) not nit picking, &lt;strong&gt;but&lt;/strong&gt; the citation was cut a bit pessimistic ;-). It continues as &quot; (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5).&quot;&lt;/p&gt;\n\n&lt;p&gt;So as in some human languages (e.g. German), usage shapes the language, and the will now has been declared ... in &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.6.html&quot; rel=&quot;noreferrer&quot;&gt;whatsnew36&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Update 2017-12-15:&lt;/h3&gt;\n\n&lt;p&gt;In a &lt;a href=&quot;https://mail.python.org/pipermail/python-dev/2017-December/151283.html&quot; rel=&quot;noreferrer&quot;&gt;mail to the python-dev list&lt;/a&gt;, Guido van Rossum declared:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Make it so. &quot;Dict keeps insertion order&quot; is the ruling. Thanks! &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So, the version 3.6 CPython side-effect of dict insertion ordering is now becoming part of the language spec (and not anymore only an implementation detail). That mail thread also surfaced some distinguishing design goals for &lt;code&gt;collections.OrderedDict&lt;/code&gt; as reminded by Raymond Hettinger during discussion.&lt;/p&gt;\n    ","\n&lt;p&gt;It can often be very handy to use &lt;b&gt;&lt;a href=&quot;http://docs.python.org/library/collections.html#collections.namedtuple&quot; rel=&quot;noreferrer&quot;&gt;namedtuple&lt;/a&gt;&lt;/b&gt;. For example, you have a dictionary of &apos;name&apos; as keys and &apos;score&apos; as values and you want to sort on &apos;score&apos;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; collections\nPlayer = collections.namedtuple(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Player&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;score name&apos;&lt;/span&gt;)\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Alex&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Richard&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;sorting with lowest score first:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;worst = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(Player(v,k) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (k,v) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;sorting with highest score first:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;best = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([Player(v,k) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (k,v) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items()], reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can get the name and score of, let&apos;s say the second-best player (index=1) very Pythonically like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;player = best[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\nplayer.name\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;Richard&apos;&lt;/span&gt;\nplayer.score\n    &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had the same problem, and I solved it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;WantedOutput = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(MyDict, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x : MyDict[x]) \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(People who answer &quot;It is not possible to sort a dict&quot; did not read the question! In fact, &quot;I can sort on the keys, but how can I sort based on the values?&quot; clearly means that he wants a list of the keys sorted according to the value of their values.)&lt;/p&gt;\n\n&lt;p&gt;Please notice that the order is not well defined (keys with the same value will be in an arbitrary order in the output list).&lt;/p&gt;\n    ","\n&lt;p&gt;If values are numeric you may also use &lt;a href=&quot;https://docs.python.org/library/collections.html#collections.Counter&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Counter&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;https://docs.python.org/library/collections.html&quot; rel=&quot;noreferrer&quot;&gt;collections&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n\nx = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\nc = Counter(x)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(c.most_common())\n\n&amp;gt;&amp;gt; [(&lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]    \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Python 2.7, simply do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n&lt;span class=&quot;hljs-comment&quot;&gt;# regular unsorted dictionary&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# dictionary sorted by key&lt;/span&gt;\nOrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; t: t[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\nOrderedDict([(&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)])\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# dictionary sorted by value&lt;/span&gt;\nOrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; t: t[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\nOrderedDict([(&lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;copy-paste from : &lt;a href=&quot;http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes&quot;&gt;http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Enjoy ;-)&lt;/p&gt;\n    ","\n&lt;p&gt;This is the code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\norigin_list = [\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Silly&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Baa&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Zoo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Penguin&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;}\n]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;&amp;gt; Original &amp;gt;&amp;gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; foo &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; origin_list:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; foo\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&amp;gt;&amp;gt; Rofl sort &amp;gt;&amp;gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; foo &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(origin_list, key=operator.itemgetter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rofl&quot;&lt;/span&gt;)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; foo\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&amp;gt;&amp;gt; Rank sort &amp;gt;&amp;gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; foo &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(origin_list, key=operator.itemgetter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; foo\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here are the results:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Original&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Silly&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Baa&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zoo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Penguin&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Rofl&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Baa&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zoo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Silly&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Penguin&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Rank&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Penguin&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Zoo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Silly&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Baa&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rofl&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try the following approach. Let us define a dictionary called mydict with the following data:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mydict = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;carl&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;,\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;alan&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;bob&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;danny&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If one wanted to sort the dictionary by keys, one could do something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(mydict.iterkeys()):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s: %s&quot;&lt;/span&gt; % (key, mydict[key])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This should return the following output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;alan: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nbob: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ncarl: &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;\ndanny: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On the other hand, if one wanted to sort a dictionary by value (as is asked in the question), one could do the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(mydict.iteritems(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; (k,v): (v,k)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s: %s&quot;&lt;/span&gt; % (key, value)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The result of this command (sorting the dictionary by value) should return the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;bob: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nalan: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\ndanny: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\ncarl: &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Starting from Python 3.6, &lt;code&gt;dict&lt;/code&gt; objects are now ordered by insertion order. It&apos;s officially in the specs of Python 3.7.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;words = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;python&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;blah&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;alice&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(words.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;alice&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Before that, you had to use &lt;code&gt;OrderedDict&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3.7/library/stdtypes.html#typesmapping&quot; rel=&quot;noreferrer&quot;&gt;Python 3.7 documentation&lt;/a&gt; says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Changed in version 3.7: Dictionary order is guaranteed to be insertion\n  order. This behavior was implementation detail of CPython from 3.6. &lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;You can create an &quot;inverted index&quot;, also&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; defaultdict\ninverse= defaultdict( &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; )\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; originalDict.items():\n    inverse[v].append( k )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now your inverse has the values; each value has a list of applicable keys.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(inverse):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; k, inverse[k]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use the &lt;a href=&quot;http://docs.python.org/2/library/collections.html#collections.Counter&quot;&gt;collections.Counter&lt;/a&gt;. Note, this will work for both numeric and non-numeric values.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To sort in reverse order&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Counter(x).most_common()\n[(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To sort in ascending order&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Counter(x).most_common()[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To get a dictionary sorted by values&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;OrderedDict(Counter(x).most_common()[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\nOrderedDict([(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use a &lt;a href=&quot;https://pypi.python.org/pypi/skipdict/1.0&quot;&gt;skip dict&lt;/a&gt; which is a dictionary that&apos;s permanently sorted by value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;SkipDict(data)\n{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4.0&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you use &lt;code&gt;keys()&lt;/code&gt;, &lt;code&gt;values()&lt;/code&gt; or &lt;code&gt;items()&lt;/code&gt; then you&apos;ll iterate in sorted order by value.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s implemented using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Skip_list&quot;&gt;skip list&lt;/a&gt; datastructure.&lt;/p&gt;\n    ","\n&lt;p&gt;You can also use custom function that can be passed to key.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dict_val&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\nx = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_x = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x.items(), key=dict_val)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Of course, remember, you need to use &lt;code&gt;OrderedDict&lt;/code&gt; because regular Python dictionaries don&apos;t keep the original order. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\na = OrderedDict(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(originalDict.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you do not have Python 2.7 or higher, the best you can do is iterate over the values in a generator function. (There is an &lt;code&gt;OrderedDict&lt;/code&gt; for 2.4 and 2.6  &lt;a href=&quot;https://pypi.python.org/pypi/ordereddict&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;, but &lt;/p&gt;\n\n&lt;p&gt;a) I don&apos;t know about how well it works &lt;/p&gt;\n\n&lt;p&gt;and &lt;/p&gt;\n\n&lt;p&gt;b) You have to download and install it of course. If you do not have administrative access, then I&apos;m afraid the option&apos;s out.)&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;gen&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;originalDict&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x, y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(originalDict.keys(), originalDict.values()), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; z: z[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; (x, y)\n    &lt;span class=&quot;hljs-comment&quot;&gt;#Yields as a tuple with (key, value). You can iterate with conditional clauses to get what you want. &lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; bleh, meh &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; gen(myDict):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; bleh == &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(myDict[bleh])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;You can also print out every value&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; bleh, meh &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; gen(myDict):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(bleh, meh)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please remember to remove the parentheses after print if not using Python 3.0 or above&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; django.utils.datastructures &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; SortedDict\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortedDictByKey&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self,data&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Sorted dictionary order by key&quot;&quot;&quot;&lt;/span&gt;\n    sortedDict = SortedDict()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; data:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(data, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;):\n            sortedKey = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(data.keys())\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sortedKey:\n                sortedDict[k] = data[k]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sortedDict\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The collections solution mentioned in another answer is absolutely superb, because you retain a connection between the key and value which in the case of dictionaries is extremely important.&lt;/p&gt;\n&lt;p&gt;I don&apos;t agree with the number one choice presented in another answer, because it throws away the keys.&lt;/p&gt;\n&lt;p&gt;I used the solution mentioned above (code shown below) and retained access to both keys and values and in my case the ordering was on the values, but the importance was the ordering of the keys after ordering the values.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n\nx = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\nc=Counter(x)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( c.most_common() )\n\n\n&amp;gt;&amp;gt; [(&lt;span class=&quot;hljs-string&quot;&gt;&apos;python&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a solution using zip on &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#dictionary-view-objects&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;d.values()&lt;/code&gt; and &lt;code&gt;d.keys()&lt;/code&gt;&lt;/a&gt;.  A few lines down this link (on Dictionary view objects) is:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This allows the creation of (value, key) pairs using zip(): pairs = zip(d.values(), d.keys()).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So we can do the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;key1&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;874.7&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;key2&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;key3&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8.1&lt;/span&gt;}\n\nd_sorted = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(d.values(), d.keys()))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; d_sorted \n&lt;span class=&quot;hljs-comment&quot;&gt;# prints: [(5, &apos;key2&apos;), (8.1, &apos;key3&apos;), (874.7, &apos;key1&apos;)]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/39424969/1150683&quot;&gt;As pointed out by Dilettant&lt;/a&gt;, Python 3.6 will now &lt;em&gt;keep the order&lt;/em&gt;! I thought I&apos;d share a function I wrote that eases the sorting of an iterable (tuple, list, dict). In the latter case, you can sort either on keys or values, and it can take numeric comparison into account. &lt;strong&gt;Only for &amp;gt;= 3.6!&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;When you try using sorted on an iterable that holds e.g. strings as well as ints, sorted() will fail. Of course you can force string comparison with str(). However, in some cases you want to do &lt;em&gt;actual&lt;/em&gt; numeric comparison where &lt;code&gt;12&lt;/code&gt; is smaller than &lt;code&gt;20&lt;/code&gt; (which is not the case in string comparison). So I came up with the following. When you want explicit numeric comparison you can use the flag &lt;code&gt;num_as_num&lt;/code&gt; which will try to do explicit numeric sorting by trying to convert all values to floats. If that succeeds, it will do numeric sorting, otherwise it&apos;ll resort to string comparison.&lt;/p&gt;\n&lt;p&gt;Comments for improvement welcome.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sort_iterable&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable, sort_on=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, reverse=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, num_as_num=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_sort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;):\n      &lt;span class=&quot;hljs-comment&quot;&gt;# sort by 0 = keys, 1 values, None for lists and tuples&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; num_as_num:\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n            _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(iterable, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; v: &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;(v), reverse=reverse)\n          &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(iterable.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; v: &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;(v[i]), reverse=reverse))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n          &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; TypeError\n      &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; (TypeError, ValueError):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n          _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(iterable, key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; v: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(v), reverse=reverse)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n          _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(iterable.items(), key=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; v: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(v[i]), reverse=reverse))\n      \n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;\n      \n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(iterable, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n      sorted_list = _sort(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sorted_list\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(iterable, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;):\n      sorted_list = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(_sort(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;))\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sorted_list\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(iterable, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;):\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; sort_on == &lt;span class=&quot;hljs-string&quot;&gt;&apos;keys&apos;&lt;/span&gt;:\n        sorted_dict = _sort(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sorted_dict\n      &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; sort_on == &lt;span class=&quot;hljs-string&quot;&gt;&apos;values&apos;&lt;/span&gt;:\n        sorted_dict = _sort(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sorted_dict\n      &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; sort_on &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; ValueError(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;Unexpected value &lt;span class=&quot;hljs-subst&quot;&gt;{sort_on}&lt;/span&gt; for sort_on. When sorting a dict, use key or values&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; TypeError(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;Unexpected type &lt;span class=&quot;hljs-subst&quot;&gt;{&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(iterable)}&lt;/span&gt; for iterable. Expected a list, tuple, or dict&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just learned relevant skill from &lt;a href=&quot;https://www.coursera.org/learn/python-data/lecture/0ou0N/10-tuples&quot; rel=&quot;noreferrer&quot;&gt;Python for Everybody&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;You may use a temporary list to help you to sort the dictionary:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Assume dictionary to be:&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;500.1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1500.2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapple&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;789.0&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# create a temporary list&lt;/span&gt;\ntmp = []\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# iterate through the dictionary and append each tuple into the temporary list &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    tmptuple = (value, key)\n    tmp.append(tmptuple)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# sort the list in ascending order&lt;/span&gt;\ntmp = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(tmp)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (tmp)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to sort the list in descending order, simply change the original sorting line to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;tmp = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(tmp, reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using list comprehension, the one liner would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Assuming the dictionary looks like&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;500.1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1500.2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapple&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;789.0&lt;/span&gt;}\n&lt;span class=&quot;hljs-comment&quot;&gt;#One liner for sorting in ascending order&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([(v, k) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items()]))\n&lt;span class=&quot;hljs-comment&quot;&gt;#One liner for sorting in descending order&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([(v, k) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items()], reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sample Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Asending order&lt;/span&gt;\n[(&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;500.1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;789.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapple&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1500.2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;)]\n&lt;span class=&quot;hljs-comment&quot;&gt;#Descending order&lt;/span&gt;\n[(&lt;span class=&quot;hljs-number&quot;&gt;1500.2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;789.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapple&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;500.1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use &lt;strong&gt;ValueSortedDict&lt;/strong&gt; from &lt;a href=&quot;http://pypi.python.org/pypi/dicts&quot; rel=&quot;noreferrer&quot;&gt;dicts&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dicts.sorteddict &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ValueSortedDict\nd = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\nsorted_dict = ValueSortedDict(d)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; sorted_dict.items() \n\n[(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Iterate through a dict and sort it by its values in descending order:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python --version\nPython &lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;\n\n$ cat sort_dict_by_val_desc.py \ndictionary = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(siis = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, sana = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, joka = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, tuli = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, aina = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; word &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(dictionary, key=dictionary.get, reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;):\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(word, dictionary[word])\n\n$ python sort_dict_by_val_desc.py \naina &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\ntuli &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\njoka &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nsana &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nsiis &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If your values are integers, and you use Python 2.7 or newer, you can use &lt;a href=&quot;http://docs.python.org/py3k/library/collections.html#collections.Counter&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;collections.Counter&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;dict&lt;/code&gt;. The &lt;code&gt;most_common&lt;/code&gt; method will give you all items, sorted by the value.&lt;/p&gt;\n    ","\n&lt;p&gt;This works in 3.1.x:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\nslovar_sorted=&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(slovar.items(), key=operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), reverse=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(slovar_sorted)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For the sake of completeness, I am posting a solution using &lt;a href=&quot;http://docs.python.org/2/library/heapq.html&quot; rel=&quot;noreferrer&quot;&gt;heapq&lt;/a&gt;. Note, this method will work for both numeric and non-numeric values&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x_items = x.items()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;heapq.heapify(x_items)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To sort in reverse order&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;heapq.nlargest(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(x_items),x_items, operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n[(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#To sort in ascending order&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;heapq.nsmallest(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(x_items),x_items, operator.itemgetter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n[(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"dynamic-allocation","slug":"dynamic-allocation"},{"name":"sqlite","slug":"sqlite"},{"name":"intersection","slug":"intersection"},{"name":"reshape2","slug":"reshape2"},{"name":"awt","slug":"awt"},{"name":"pygame-surface","slug":"pygame-surface"},{"name":"uitableview","slug":"uitableview"},{"name":"commandlink","slug":"commandlink"},{"name":"default-parameters","slug":"default-parameters"},{"name":"post","slug":"post"},{"name":"rust","slug":"rust"},{"name":"url","slug":"url"},{"name":"multidimensional-array","slug":"multidimensional-array"},{"name":"csv","slug":"csv"},{"name":"xmlhttprequest","slug":"xmlhttprequest"},{"name":"numbers","slug":"numbers"},{"name":"threetenabp","slug":"threetenabp"},{"name":"json.net","slug":"json.net"},{"name":"scope","slug":"scope"},{"name":"aggregate","slug":"aggregate"}]},"__N_SSG":true}