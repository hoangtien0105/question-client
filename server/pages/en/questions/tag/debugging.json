{"pageProps":{"data":{"count":1,"rows":[{"id":13,"title":"PHP parse/syntax errors; and how to solve them","slug":"php-parsesyntax-errors-and-how-to-solve-them-1657384264713","postType":"QUESTION","createdAt":"2022-07-09T16:31:04.000Z","updatedAt":"2022-07-09T16:31:04.000Z","tags":[{"id":44,"name":"debugging","slug":"debugging","createdAt":"2022-07-09T16:31:04.000Z","updatedAt":"2022-07-09T16:31:04.000Z","Questions_Tags":{"questionId":13,"tagId":44}}]}]},"slug":"debugging","page":1,"answers":{"13":["\n&lt;h3&gt;What are the syntax errors?&lt;/h3&gt;\n\n&lt;p&gt;PHP belongs to the &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_C-based_programming_languages&quot; rel=&quot;noreferrer&quot;&gt;C-style&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Imperative_programming&quot; rel=&quot;noreferrer&quot;&gt;imperative&lt;/a&gt; programming languages. It has rigid grammar rules, which it cannot recover from when encountering misplaced symbols or identifiers. It can&apos;t guess your coding intentions.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/jY6k7.gif&quot; alt=&quot;Function definition syntax abstract&quot;&gt;&lt;/p&gt;\n\n&lt;h3&gt;Most important tips&lt;/h3&gt;\n\n&lt;p&gt;There are a few basic precautions you can always take:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Use proper &lt;strong&gt;code indentation&lt;/strong&gt;, or adopt any lofty coding style.\nReadability prevents irregularities.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use an &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_PHP_editors&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;em&gt;IDE&lt;/em&gt;&lt;/strong&gt; or editor for PHP&lt;/a&gt; with &lt;strong&gt;syntax highlighting&lt;/strong&gt;.\nWhich also help with parentheses/bracket balancing.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/z2FBC.png&quot; alt=&quot;Expected: semicolon&quot;&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Read &lt;a href=&quot;http://www.php.net/langref&quot; rel=&quot;noreferrer&quot;&gt;the language reference&lt;/a&gt; and examples in the manual.\nTwice, to become somewhat proficient.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;How to interpret parser errors&lt;/h3&gt;\n\n&lt;p&gt;A typical syntax error message reads:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Parse error: syntax error, unexpected &lt;strong&gt;T_STRING&lt;/strong&gt;, expecting &lt;strong&gt;&apos;&lt;code&gt;;&lt;/code&gt;&apos;&lt;/strong&gt; in &lt;em&gt;file.php&lt;/em&gt; on &lt;strong&gt;line&lt;/strong&gt; &lt;em&gt;217&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Which lists the &lt;em&gt;possible&lt;/em&gt; location of a syntax mistake. See the mentioned &lt;strong&gt;file name&lt;/strong&gt; and &lt;strong&gt;line number&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;A &lt;a href=&quot;http://php.net/tokens&quot; rel=&quot;noreferrer&quot;&gt;moniker&lt;/a&gt; such as &lt;code&gt;T_STRING&lt;/code&gt; explains which symbol the parser/tokenizer couldn&apos;t process finally. This isn&apos;t necessarily the cause of the syntax mistake, however.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s important to look into &lt;strong&gt;previous code lines&lt;/strong&gt; as well. Often syntax errors are just mishaps that happened earlier. The error line number is just where the parser conclusively gave up to process it all.&lt;/p&gt;\n\n&lt;h2&gt;Solving syntax errors&lt;/h2&gt;\n\n&lt;p&gt;There are many approaches to narrow down and fix syntax hiccups.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Open the mentioned source file. Look at the mentioned &lt;strong&gt;code line&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;For runaway strings and misplaced operators, this is usually where you find the culprit.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Read the line left to right and imagine what each symbol does.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;More regularly you need to look at &lt;strong&gt;preceding lines&lt;/strong&gt; as well.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;In particular, missing &lt;code&gt;;&lt;/code&gt; semicolons are missing at the previous line ends/statement. (At least from the stylistic viewpoint. )&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If &lt;code&gt;{&lt;/code&gt; code blocks &lt;code&gt;}&lt;/code&gt; are incorrectly closed or nested, you may need to investigate even further up the source code. Use proper &lt;em&gt;code indentation&lt;/em&gt; to simplify that.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Look at the &lt;strong&gt;syntax colorization&lt;/strong&gt;!&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Strings and variables and constants should all have different colors.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Operators &lt;code&gt;+-*/.&lt;/code&gt; should be tinted distinct as well. Else they might be in the wrong context.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you see string colorization extend too far or too short, then you have found an unescaped or missing closing &lt;code&gt;&quot;&lt;/code&gt; or &lt;code&gt;&apos;&lt;/code&gt; string marker.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Having two same-colored punctuation characters next to each other can also mean trouble. Usually, operators are lone if it&apos;s not &lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt;, or parentheses following an operator. Two strings/identifiers directly following each other are incorrect in most contexts.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Whitespace is your friend&lt;/strong&gt;.\n Follow &lt;em&gt;any&lt;/em&gt; coding style.\n &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Break up long lines temporarily.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;You can freely &lt;strong&gt;add newlines&lt;/strong&gt; between operators or constants and strings. The parser will then concretize the line number for parsing errors. Instead of looking at the very lengthy code, you can isolate the missing or misplaced syntax symbol.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Split up complex &lt;code&gt;if&lt;/code&gt; statements into distinct or nested &lt;code&gt;if&lt;/code&gt; conditions.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Instead of lengthy math formulas or logic chains, use temporary variables to simplify the code. (More readable = fewer errors.)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Add newlines between:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The code you can easily identify as correct,&lt;/li&gt;\n&lt;li&gt;The parts you&apos;re unsure about,&lt;/li&gt;\n&lt;li&gt;And the lines which the parser complains about. &lt;br&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Partitioning up long code blocks &lt;em&gt;really&lt;/em&gt; helps to locate the origin of syntax errors.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Comment out&lt;/strong&gt; offending code.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If you can&apos;t isolate the problem source, start to comment out (and thus temporarily remove) blocks of code.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;As soon as you got rid of the parsing error, you have found the problem source. Look more closely there.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Sometimes you want to temporarily remove complete function/method blocks. (In case of unmatched curly braces and wrongly indented code.)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When you can&apos;t resolve the syntax issue, try to &lt;strong&gt;rewrite&lt;/strong&gt; the commented out sections &lt;strong&gt;from scratch&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;As a newcomer, avoid some of the confusing syntax constructs.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The ternary &lt;code&gt;? :&lt;/code&gt; condition operator can compact code and is useful indeed. But it doesn&apos;t aid readability in all cases. Prefer plain &lt;code&gt;if&lt;/code&gt; statements while unversed.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;PHP&apos;s alternative syntax (&lt;code&gt;if:&lt;/code&gt;/&lt;code&gt;elseif:&lt;/code&gt;/&lt;code&gt;endif;&lt;/code&gt;) is common for templates, but arguably less easy to follow than normal &lt;code&gt;{&lt;/code&gt; code &lt;code&gt;}&lt;/code&gt; blocks.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The most prevalent newcomer mistakes are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Missing semicolons &lt;code&gt;;&lt;/code&gt; for terminating statements/lines.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Mismatched string quotes for &lt;code&gt;&quot;&lt;/code&gt; or &lt;code&gt;&apos;&lt;/code&gt; and unescaped quotes within.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Forgotten operators, in particular for the string &lt;code&gt;.&lt;/code&gt; concatenation.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Unbalanced &lt;code&gt;(&lt;/code&gt; parentheses &lt;code&gt;)&lt;/code&gt;. Count them in the reported line. Are there an equal number of them?&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Don&apos;t forget that solving one syntax problem can uncover the next.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If you make one issue go away, but other crops up in some code below, you&apos;re mostly on the right path.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If after editing a new syntax error crops up in the same line, then your attempted change was possibly a failure. (Not always though.)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Restore a backup of previously working code, if you can&apos;t fix it.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Adopt a source code versioning system. You can always view a &lt;code&gt;diff&lt;/code&gt; of the broken and last working version. Which might be enlightening as to what the syntax problem is.\n&lt;br&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Invisible stray Unicode characters&lt;/strong&gt;: In some cases, you need to &lt;a href=&quot;https://stackoverflow.com/questions/28952930/parse-error-syntax-error-unexpected-t-variable/28953112#28953112&quot;&gt;use a hexeditor&lt;/a&gt; or different editor/viewer on your source. Some problems cannot be found just from looking at your code.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Try &lt;a href=&quot;https://stackoverflow.com/questions/3001177/how-do-i-grep-for-all-non-ascii-characters-in-unix&quot;&gt;&lt;code&gt;grep --color -P -n &quot;\\[\\x80-\\xFF\\]&quot; file.php&lt;/code&gt;&lt;/a&gt; as the first measure to find non-ASCII symbols.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In particular BOMs, zero-width spaces, or non-breaking spaces, and smart quotes regularly can find their way into the source code.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Take care of which &lt;strong&gt;type of linebreaks&lt;/strong&gt; are saved in files.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;PHP just honors &lt;kbd&gt;\\n&lt;/kbd&gt; newlines, not &lt;kbd&gt;\\r&lt;/kbd&gt; carriage returns.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Which is occasionally an issue for MacOS users (even on OS&amp;nbsp; X for misconfigured editors).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It often only surfaces as an issue when single-line &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt; comments are used. Multiline &lt;code&gt;/*...*/&lt;/code&gt; comments do seldom disturb the parser when linebreaks get ignored.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If your &lt;strong&gt;syntax error does not transmit over the web&lt;/strong&gt;:\n It happens that you have a syntax error on your machine. But posting the very same file online does not exhibit it anymore. Which can only mean one of two things:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;You are looking at the wrong file!&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Or your code contained invisible stray Unicode (see above).\nYou can easily find out: Just copy your code back from the web form into your text editor.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Check your &lt;strong&gt;PHP version&lt;/strong&gt;. Not all syntax constructs are available on every server.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;php -v&lt;/code&gt; for the command line interpreter&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;?php phpinfo();&lt;/code&gt; for the one invoked through the webserver.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt; Those aren&apos;t necessarily the same. In particular when working with frameworks, you will them to match up.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Don&apos;t use &lt;a href=&quot;http://www.php.net/reserved.keywords&quot; rel=&quot;noreferrer&quot;&gt;PHP&apos;s reserved keywords&lt;/a&gt; as identifiers for functions/methods, classes or constants.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Trial-and-error is your last resort.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If all else fails, you can always &lt;strong&gt;google&lt;/strong&gt; your error message. Syntax symbols aren&apos;t as easy to search for (Stack Overflow itself is indexed by &lt;a href=&quot;http://symbolhound.com/&quot; rel=&quot;noreferrer&quot;&gt;SymbolHound&lt;/a&gt; though). Therefore it may take looking through a few more pages before you find something relevant.&lt;/p&gt;\n\n&lt;p&gt;Further guides:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://www.onlamp.com/pub/a/php/2004/08/12/debuggingphp.html&quot; rel=&quot;noreferrer&quot;&gt;PHP Debugging Basics&lt;/a&gt;&lt;/em&gt; by David Sklar&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://jason.pureconcepts.net/2013/05/fixing-php-errors/&quot; rel=&quot;noreferrer&quot;&gt;Fixing PHP Errors&lt;/a&gt;&lt;/em&gt; by Jason McCreary&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://www.phpreferencebook.com/misc/php-errors-common-mistakes/&quot; rel=&quot;noreferrer&quot;&gt;PHP Errors  10 Common Mistakes&lt;/a&gt;&lt;/em&gt; by Mario Lurig&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://coursesweb.net/php-mysql/common-php-errors-solution_t&quot; rel=&quot;noreferrer&quot;&gt;Common PHP Errors and Solutions&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://diythemes.com/thesis/troubleshoot-wordpress-website/&quot; rel=&quot;noreferrer&quot;&gt;How to Troubleshoot and Fix your WordPress Website&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://coding.smashingmagazine.com/2011/11/30/a-guide-to-php-error-messages-for-designers/&quot; rel=&quot;noreferrer&quot;&gt;A Guide To PHP Error Messages For Designers&lt;/a&gt;&lt;/em&gt; - Smashing Magazine&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;White screen of death&lt;/h3&gt;\n\n&lt;p&gt;If your website is just blank, then typically a syntax error is the cause.\nEnable their display with:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;error_reporting = E_ALL&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;display_errors = 1&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In your &lt;a href=&quot;http://www.php.net/manual/en/configuration.file.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;php.ini&lt;/code&gt;&lt;/a&gt; generally, or via &lt;a href=&quot;http://www.php.net/manual/en/configuration.changes.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.htaccess&lt;/code&gt;&lt;/a&gt; for mod_php,\nor even &lt;a href=&quot;http://php.net/manual/en/configuration.file.per-user.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.user.ini&lt;/code&gt;&lt;/a&gt; with FastCGI setups.&lt;/p&gt;\n\n&lt;p&gt;Enabling it within the broken script is too late because PHP can&apos;t even interpret/run the first line. A quick workaround is crafting a wrapper script, say &lt;code&gt;test.php&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n   &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n   &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ini_set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;display_errors&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n   &lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;./broken-script.php&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then invoke the failing code by accessing this wrapper script.&lt;/p&gt;\n\n&lt;p&gt;It also helps to enable PHP&apos;s &lt;code&gt;error_log&lt;/code&gt; and look into your &lt;a href=&quot;http://www.cyberciti.biz/faq/apache-logs/&quot; rel=&quot;noreferrer&quot;&gt;webserver&apos;s &lt;code&gt;error.log&lt;/code&gt;&lt;/a&gt; when a script crashes with HTTP 500 responses.&lt;/p&gt;\n    ","\n&lt;p&gt;I think this topic is totally overdiscussed/overcomplicated. Using an IDE is THE way to go to completely avoid any syntax errors. I would even say that working without an IDE is kind of unprofessional. Why? Because modern IDEs check your syntax after every character you type. When you code and your entire line turns red, and a big warning notice shows you the exact type and the exact position of the syntax error, then there&apos;s absolutely no need to search for another solution.&lt;/p&gt;\n&lt;h2&gt;Using a syntax-checking IDE means:&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;You&apos;ll (effectively) never run into syntax errors again, simply because you see them right as you type. Seriously.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Excellent IDEs with syntax check (all of them are available for Linux, Windows and Mac):&lt;/em&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://netbeans.org/&quot; rel=&quot;noreferrer&quot;&gt;NetBeans&lt;/a&gt; [free]&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/phpstorm/&quot; rel=&quot;noreferrer&quot;&gt;PHPStorm&lt;/a&gt; [$199 USD]&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/&quot; rel=&quot;noreferrer&quot;&gt;Eclipse&lt;/a&gt; with &lt;a href=&quot;https://eclipse.org/pdt/&quot; rel=&quot;noreferrer&quot;&gt;PHP Plugin&lt;/a&gt; [free]&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com/&quot; rel=&quot;noreferrer&quot;&gt;Sublime&lt;/a&gt; [$80 USD] (mainly a text editor, but expandable with plugins, like &lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter&quot; rel=&quot;noreferrer&quot;&gt;PHP Syntax Parser&lt;/a&gt;)&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;h2&gt;Unexpected &lt;code&gt;[&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;These days, the unexpected &lt;code&gt;[&lt;/code&gt; array bracket is commonly seen on outdated PHP versions. The &lt;a href=&quot;http://php.net/manual/en/language.types.array.php&quot; rel=&quot;noreferrer&quot;&gt;short array syntax&lt;/a&gt; is available since PHP &lt;strong&gt;&amp;gt;= 5.4&lt;/strong&gt;. Older installations only support &lt;code&gt;array()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$php53&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$php54&lt;/span&gt; = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n         \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Array function result dereferencing is likewise not available for older PHP versions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get_whatever&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;];\n                      \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/12769982/reference-what-does-this-error-mean-in-php/22316776#22316776&quot;&gt;Reference - What does this error mean in PHP? - &quot;Syntax error, unexpected &lt;code&gt;\\[&lt;/code&gt;&quot;&lt;/a&gt; shows the most common and practical workarounds.&lt;/p&gt;\n\n&lt;p&gt;Though, you&apos;re always better off just upgrading your PHP installation. For shared webhosting plans, first research if e.g. &lt;code&gt;SetHandler php56-fcgi&lt;/code&gt; can be used to enable a newer runtime.&lt;/p&gt;\n\n&lt;p&gt;See also:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/1779256&quot;&gt;PHP syntax for dereferencing function result  possible as of PHP 5.4&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/19206928/php-syntax-error-unexpected&quot;&gt;PHP syntax error, unexpected &apos;[&apos;&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4271874/shorthand-for-arrays-is-there-a-literal-syntax-like-or&quot;&gt;Shorthand for arrays: is there a literal syntax like {} or []?&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/23565971/php-5-3-10-vs-php-5-5-3-syntax-error-unexpected&quot;&gt;PHP 5.3.10 vs PHP 5.5.3 syntax error unexpected &apos;[&apos;&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/17772534/php-array-square-brackets-and-array-difference&quot;&gt;PHP Difference between array() and []&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11912233/php-array-syntax-parse-error-left-square-bracket&quot;&gt;PHP Array Syntax Parse Error Left Square Bracket &quot;[&quot;&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;BTW, there are also preprocessors and &lt;a href=&quot;https://github.com/IonutBajescu/short-arrays-to-long-arrays&quot; rel=&quot;noreferrer&quot;&gt;PHP 5.4 syntax down-converters&lt;/a&gt; if you&apos;re really clingy with older + slower PHP versions.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Other causes for &lt;em&gt;Unexpected &lt;code&gt;[&lt;/code&gt;&lt;/em&gt; syntax errors&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If it&apos;s not the PHP version mismatch, then it&apos;s oftentimes a plain typo or newcomer syntax mistake:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;You can&apos;t use &lt;a href=&quot;https://stackoverflow.com/questions/27887187/php-5-6-3-parse-error-syntax-error-unexpected-in-class&quot;&gt;array property declarations/expressions in classes&lt;/a&gt;, not even in PHP&amp;nbsp;7.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Nope&quot;&lt;/span&gt;;\n              \n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Confusing &lt;code&gt;[&lt;/code&gt; with opening curly braces &lt;code&gt;{&lt;/code&gt; or parentheses &lt;code&gt;(&lt;/code&gt; is a common oversight.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; [&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;)\n        \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or even:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foobar&lt;/span&gt;[$&lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;, $&lt;span class=&quot;hljs-title&quot;&gt;b&lt;/span&gt;, $&lt;span class=&quot;hljs-title&quot;&gt;c&lt;/span&gt;] &lt;/span&gt;{\n               \n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Or trying to dereference constants (before PHP 5.6) as arrays:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;];\n       \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;At least PHP interprets that &lt;code&gt;const&lt;/code&gt; as a constant name.&lt;/p&gt;\n\n&lt;p&gt;If you meant to access an array variable (which is the typical cause here), then add the leading &lt;code&gt;$&lt;/code&gt; sigil - so it becomes a &lt;code&gt;$varname&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You are trying to use the &lt;code&gt;global&lt;/code&gt; keyword on a member of an associative array.  This is not valid syntax:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;key&apos;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h3&gt;Unexpected &lt;code&gt;]&lt;/code&gt; &lt;em&gt;closing&lt;/em&gt; square bracket&lt;/h3&gt;\n\n&lt;p&gt;This is somewhat rarer, but there are also syntax accidents with the terminating array &lt;code&gt;]&lt;/code&gt; bracket.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Again mismatches with &lt;code&gt;)&lt;/code&gt; parentheses or &lt;code&gt;}&lt;/code&gt; curly braces are common:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$c&lt;/span&gt;] {\n                          \n&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Or trying to end an array where there isn&apos;t one:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which often occurs in &lt;em&gt;multi-line&lt;/em&gt; and &lt;em&gt;nested&lt;/em&gt; array declarations.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt; = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]],&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;]],&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;];\n                                             \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If so, use your IDE for bracket matching to find any premature &lt;code&gt;]&lt;/code&gt; array closure. At the very least use more spacing and newlines to narrow it down.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h2&gt;Unexpected T_VARIABLE&lt;/h2&gt;\n&lt;p&gt;An &quot;unexpected &lt;code&gt;T_VARIABLE&lt;/code&gt;&quot; means that there&apos;s a literal &lt;code&gt;$variable&lt;/code&gt; name, which doesn&apos;t fit into the current expression/statement structure.&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/DCDkL.gif&quot; alt=&quot;purposefully abstract/inexact operator+$variable diagram&quot;&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;h3&gt;Missing semicolon&lt;/h3&gt;\n&lt;p&gt;It most commonly indicates &lt;a href=&quot;https://stackoverflow.com/questions/9135784/syntax-error-unexpected-t-variable&quot;&gt;a missing semicolon&lt;/a&gt; in the previous line. Variable assignments following a statement are a good indicator where to look:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;        \n &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;func1&lt;/span&gt;()\n &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;     &lt;span class=&quot;hljs-comment&quot;&gt;# parse error in line +2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;String concatenation&lt;/h3&gt;\n&lt;p&gt;A frequent mishap are &lt;a href=&quot;https://stackoverflow.com/questions/14606145/php-syntax-error-unexpected-t-variable-expecting-or-on-line-29&quot;&gt;string concatenations&lt;/a&gt; with forgotten &lt;code&gt;.&lt;/code&gt; operator:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                                \n &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Here comes the value: &quot;&lt;/span&gt;  &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Btw, you should prefer &lt;a href=&quot;http://php.net/types.string#language.types.string.parsing&quot; rel=&quot;nofollow noreferrer&quot;&gt;string interpolation&lt;/a&gt; (basic variables in double quotes) whenever that helps readability. Which avoids these syntax issues.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;String interpolation is a &lt;em&gt;scripting language&lt;/em&gt; core feature. No shame in utilizing it. Ignore any micro-optimization advise about variable &lt;code&gt;.&lt;/code&gt; concatenation being &lt;em&gt;faster&lt;/em&gt;. &lt;strong&gt;It&apos;s not.&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Missing expression operators&lt;/h3&gt;\n&lt;p&gt;Of course the same issue can arise in other expressions, for instance arithmetic operations:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;            \n &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;PHP can&apos;t &lt;em&gt;guess&lt;/em&gt; here if the variable should have been added, subtracted or compared etc.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Lists&lt;/h3&gt;\n&lt;p&gt;Same for syntax lists, like in array populations, where the parser also indicates an expected comma &lt;code&gt;,&lt;/code&gt; for example:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                                       \n &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$val2&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$val3&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$val4&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or functions parameter lists:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                                 \n &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myfunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$param1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$param2&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$param3&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$param4&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Equivalently do you see this with &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;global&lt;/code&gt; statements, or when lacking a &lt;code&gt;;&lt;/code&gt; semicolon in a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Class declarations&lt;/h3&gt;\n&lt;p&gt;This parser error also occurs &lt;a href=&quot;https://stackoverflow.com/questions/5122729/im-getting-a-syntax-error-unexpected-t-variable-error-i-dont-see-what-im&quot;&gt;in class declarations&lt;/a&gt;. You can only assign static constants, not expressions. Thus the parser complains about variables as assigned data:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;xyz&lt;/span&gt; &lt;/span&gt;{      \n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;input&quot;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Unmatched &lt;code&gt;}&lt;/code&gt; closing curly braces can in particular lead here. If a method is terminated too early (use proper indentation!), then a stray variable is commonly misplaced into the class declaration body.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Variables after identifiers&lt;/h3&gt;\n&lt;p&gt;You can also never have &lt;a href=&quot;https://stackoverflow.com/questions/12194156/php-syntax-error-unexpected-t-variable&quot;&gt;a variable follow an identifier&lt;/a&gt; directly:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;              \n &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;myFunc&lt;span class=&quot;hljs-variable&quot;&gt;$VAR&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Btw, this is a common example where the intention was to use &lt;a href=&quot;http://php.net/variables.variable&quot; rel=&quot;nofollow noreferrer&quot;&gt;variable variables&lt;/a&gt; perhaps. In this case a variable property lookup with &lt;code&gt;$this-&amp;gt;{&quot;myFunc$VAR&quot;}();&lt;/code&gt; for example.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Take in mind that using variable variables should be the exception. Newcomers often try to use them too casually, even when arrays would be simpler and more appropriate.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Missing parentheses after language constructs&lt;/h3&gt;\n&lt;p&gt;Hasty typing may lead to forgotten opening or closing parenthesis\nfor &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;foreach&lt;/code&gt; statements:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;        \n &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;) {\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Solution: add the missing opening &lt;code&gt;(&lt;/code&gt; between statement and variable.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                       \n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;pdo_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The curly &lt;code&gt;{&lt;/code&gt; brace does not open the code block, without closing the &lt;code&gt;if&lt;/code&gt; expression with the &lt;code&gt;)&lt;/code&gt; closing parenthesis first.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Else does not expect conditions&lt;/h3&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;     \n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Solution: Remove the conditions from &lt;code&gt;else&lt;/code&gt; or use &lt;a href=&quot;http://php.net/manual/en/control-structures.elseif.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;elseif&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Need brackets for closure&lt;/h3&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;     \n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; $&lt;span class=&quot;hljs-title&quot;&gt;var&lt;/span&gt; &lt;/span&gt;{}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Solution: Add brackets around &lt;code&gt;$var&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Invisible whitespace&lt;/h3&gt;\n&lt;p&gt;As mentioned in the &lt;a href=&quot;https://stackoverflow.com/a/18050072/345031&quot;&gt;reference answer&lt;/a&gt; on &quot;Invisible stray Unicode&quot; (such as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Non-breaking_space&quot; rel=&quot;nofollow noreferrer&quot;&gt;non-breaking space&lt;/a&gt;), you might also see this error for unsuspecting code like:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n                          \n&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;PDO&lt;/span&gt;(...);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s rather prevalent in the start of files and for copy-and-pasted code. Check with a hexeditor, if your code does not visually appear to contain a syntax issue.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h3&gt;See also&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.google.com/search?q=site:stackoverflow.com+php%20parse%20error%20unexpected#q=site:stackoverflow.com+php+parse+error+unexpected+T_VARIABLE&quot; rel=&quot;nofollow noreferrer&quot;&gt;Search: unexpected T_VARIABLE&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n\n&lt;h2&gt;Unexpected T_CONSTANT_ENCAPSED_STRING &lt;br&gt; Unexpected T_ENCAPSED_AND_WHITESPACE&lt;/h2&gt;\n&lt;p&gt;The unwieldy names &lt;code&gt;T_CONSTANT_ENCAPSED_STRING&lt;/code&gt; and &lt;code&gt;T_ENCAPSED_AND_WHITESPACE&lt;/code&gt; refer to quoted &lt;em&gt;&lt;strong&gt;&lt;code&gt;&quot;string&quot;&lt;/code&gt;&lt;/strong&gt; literals&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;They&apos;re used in different contexts, but the syntax issue are quite similar. &lt;em&gt;T_ENCAPSED&lt;/em&gt; warnings occur in double quoted string context, while &lt;em&gt;T_CONSTANT&lt;/em&gt; strings are often astray in plain PHP expressions or statements.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;h3&gt;Incorrect variable interpolation&lt;/h3&gt;\n&lt;p&gt;And it comes up most frequently for incorrect PHP variable interpolation:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                               \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Here comes a &lt;span class=&quot;hljs-subst&quot;&gt;$wrong&lt;/span&gt;[&apos;array&apos;] access&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Quoting arrays keys is a must in PHP context. But in double quoted strings (or HEREDOCs) this is a mistake. The parser complains about the contained single quoted &lt;code&gt;&apos;string&apos;&lt;/code&gt;, because it usually expects a literal identifier / key there.&lt;/p&gt;\n&lt;p&gt;More precisely it&apos;s valid to use PHP2-style &lt;a href=&quot;http://www.php.net/language.types.string#language.types.string.parsing&quot; rel=&quot;nofollow noreferrer&quot;&gt;simple syntax within double quotes&lt;/a&gt; for array references:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is only &lt;span class=&quot;hljs-subst&quot;&gt;$valid&lt;/span&gt;[here] ...&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Nested arrays or deeper object references however require the &lt;a href=&quot;http://www.php.net/language.types.string#language.types.string.parsing#complex+curly+syntax&quot; rel=&quot;nofollow noreferrer&quot;&gt;complex curly string expression&lt;/a&gt; syntax:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Use &lt;span class=&quot;hljs-subst&quot;&gt;{$array[&apos;as_usual&apos;]}&lt;/span&gt; with curly syntax.&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If unsure, this is commonly safer to use. It&apos;s often even considered more readable. And better IDEs actually use distinct syntax colorization for that.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Missing concatenation &lt;/h3&gt;\n&lt;p&gt;If a string follows an expression, but lacks a concatenation or other operator, then you&apos;ll see PHP complain about the string literal:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                       \n&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello &quot;&lt;/span&gt; . WORLD  &lt;span class=&quot;hljs-string&quot;&gt;&quot; !&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;While it&apos;s obvious to you and me, PHP just can&apos;t &lt;em&gt;guess&lt;/em&gt; that the string was meant to be appended there.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Confusing string quote enclosures &lt;/h3&gt;\n&lt;p&gt;The same syntax error occurs when &lt;a href=&quot;https://stackoverflow.com/questions/13565768/php-syntax-error-unexpected-t-constant-encapsed-string&quot;&gt;confounding string delimiters&lt;/a&gt;. A string started by a single &lt;code&gt;&apos;&lt;/code&gt; or double &lt;code&gt;&quot;&lt;/code&gt; quote also ends with the same.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                \n&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;a href=&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos; . $link . &apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;click here&amp;lt;/a&amp;gt;&quot;&lt;/span&gt;;\n      \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That example started with double quotes. But double quotes were also destined for the HTML attributes. The intended concatenation operator within however became interpreted as part of a second string in single quotes.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Set your editor/IDE to use slightly distinct colorization for single and double quoted strings. (It also helps with application logic to prefer e.g. double quoted strings for textual output, and single quoted strings only for constant-like values.)&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This is a good example where you shouldn&apos;t break out of double quotes in the first place. Instead just use &lt;a href=&quot;https://stackoverflow.com/questions/10674121/php-parse-error-syntax-error-unexpected-t-constant-encapsed-string-expecting&quot;&gt;proper &lt;code&gt;\\&quot;&lt;/code&gt; escapes&lt;/a&gt; for the HTML attributes´ quotes:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;a href=\\&quot;&lt;span class=&quot;hljs-subst&quot;&gt;{$link}&lt;/span&gt;\\&quot;&amp;gt;click here&amp;lt;/a&amp;gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;While this can also lead to syntax confusion, all better IDEs/editors again help by colorizing the escaped quotes differently.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Missing opening quote &lt;/h3&gt;\n&lt;p&gt;Equivalently are &lt;a href=&quot;https://stackoverflow.com/questions/17379114/how-to-fix-unexpected-t-constant-encapsed-string-syntax-error&quot;&gt;forgotten opening &lt;code&gt;&quot;&lt;/code&gt;/&lt;code&gt;&apos;&lt;/code&gt; quotes&lt;/a&gt; a recipe for parser errors:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;               \n &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;make_url&lt;/span&gt;(login&lt;span class=&quot;hljs-string&quot;&gt;&apos;, &apos;&lt;/span&gt;open&lt;span class=&quot;hljs-string&quot;&gt;&apos;);\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here the &lt;code&gt;&apos;, &apos;&lt;/code&gt; would become a string literal after a bareword, when obviously &lt;code&gt;login&lt;/code&gt; was meant to be a string parameter.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Array lists &lt;/h3&gt;\n&lt;p&gt;If you miss a &lt;code&gt;,&lt;/code&gt; comma in an array creation block, the parser will see two consecutive strings:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(               \n     &lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;\n     &lt;span class=&quot;hljs-string&quot;&gt;&quot;next&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;....&quot;&lt;/span&gt;,\n);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that the last line may always contain an extra comma, but overlooking one in between is unforgivable. Which is hard to discover without syntax highlighting.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Function parameter lists &lt;/h3&gt;\n&lt;p&gt;The same thing &lt;a href=&quot;https://stackoverflow.com/questions/9352932/syntax-error-unexpected-t-constant-encapsed-string&quot;&gt;for function calls&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                         \n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;myfunc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;and&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&quot;more&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Runaway strings &lt;/h3&gt;\n&lt;p&gt;A common variation are quite simply forgotten string terminators:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                                \n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_evil&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM stuffs);\nprint &quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;ok&apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;;\n      \n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here PHP complains about two string literals directly following each other. But the real cause is the unclosed previous string of course.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; HEREDOC indentation &lt;/h3&gt;\n&lt;p&gt;Prior &lt;a href=&quot;https://stackoverflow.com/questions/2305869/heredoc-interfering-with-code-indentation&quot;&gt;PHP 7.3&lt;/a&gt;, the &lt;a href=&quot;https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc&quot; rel=&quot;nofollow noreferrer&quot;&gt;heredoc string&lt;/a&gt; end delimiter can&apos;t be prefixed with spaces:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;&amp;lt;&amp;lt; HTML\n    &amp;lt;link..&amp;gt;\n    HTML&lt;/span&gt;;\n   \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Solution: upgrade PHP or find a better hoster.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;See also&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4738850/interpolation-double-quoted-string-of-associative-arrays-in-php&quot;&gt;Interpolation (double quoted string) of Associative Arrays in PHP&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13565768/php-syntax-error-unexpected-t-constant-encapsed-string&quot;&gt;PHP - syntax error, unexpected T_CONSTANT_ENCAPSED_STRING&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2719350/syntax-error-unexpected-t-constant-encapsed-string-in-php&quot;&gt;Syntax error, unexpected T_CONSTANT_ENCAPSED_STRING in PHP&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/5333823/unexpected-t-constant-encapsed-string-error-in-sql-query&quot;&gt;Unexpected T_CONSTANT_ENCAPSED_STRING error in SQL Query&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h2&gt;Unexpected T_STRING&lt;/h2&gt;\n&lt;p&gt;&lt;code&gt;T_STRING&lt;/code&gt; is a bit of a misnomer. It does not refer to a quoted &lt;code&gt;&quot;string&quot;&lt;/code&gt;. It means a raw identifier was encountered. This can range from &lt;code&gt;bare&lt;/code&gt; words to leftover &lt;code&gt;CONSTANT&lt;/code&gt; or function names, forgotten unquoted strings, or any plain text.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;h3&gt;Misquoted strings&lt;/h3&gt;\n&lt;p&gt;This syntax error is most common for misquoted string values however. Any unescaped and stray &lt;code&gt;&quot;&lt;/code&gt; or &lt;code&gt;&apos;&lt;/code&gt; quote will form an invalid expression:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                                 \n &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;a href=&quot;&lt;/span&gt;http:&lt;span class=&quot;hljs-comment&quot;&gt;//example.com&quot;&amp;gt;click here&amp;lt;/a&amp;gt;&quot;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Syntax highlighting will make such mistakes super obvious. It&apos;s important to remember to use backslashes for escaping &lt;code&gt;\\&quot;&lt;/code&gt; double quotes, or &lt;code&gt;\\&apos;&lt;/code&gt; single quotes - depending on which was used as &lt;a href=&quot;http://php.net/language.types.string&quot; rel=&quot;nofollow noreferrer&quot;&gt;string enclosure&lt;/a&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;For convenience you should prefer outer single quotes when outputting plain HTML with double quotes within.&lt;/li&gt;\n&lt;li&gt;Use double quoted strings if you want to interpolate variables, but then watch out for escaping literal &lt;code&gt;&quot;&lt;/code&gt; double quotes.&lt;/li&gt;\n&lt;li&gt;For lengthier output, prefer multiple &lt;code&gt;echo&lt;/code&gt;/&lt;code&gt;print&lt;/code&gt; lines instead of escaping in and out. Better yet consider a &lt;a href=&quot;http://php.net/heredoc&quot; rel=&quot;nofollow noreferrer&quot;&gt;HEREDOC&lt;/a&gt; section.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;br&gt;    Another example is using PHP entry inside HTML code generated with PHP:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$text&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;div&amp;gt;some text with &amp;lt;?php echo &apos;&lt;/span&gt;some php entry&lt;span class=&quot;hljs-string&quot;&gt;&apos; ?&amp;gt;&amp;lt;/div&amp;gt;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This happens if &lt;code&gt;$text&lt;/code&gt; is large with many lines and developer does not see the whole PHP variable value and focus on the piece of code forgetting about its source. Example is &lt;a href=&quot;https://stackoverflow.com/questions/59598335/parse-error-syntax-error-unexpected-sonum-t-string-in&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;See also &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3446216/what-is-the-difference-between-single-quoted-and-double-quoted-strings-in-php&quot;&gt;What is the difference between single-quoted and double-quoted strings in PHP?&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Unclosed strings&lt;/h3&gt;\n&lt;p&gt;If you &lt;a href=&quot;https://stackoverflow.com/questions/13968629/php-parse-error-syntax-error-unexpected-t-string&quot;&gt;miss a closing &lt;code&gt;&quot;&lt;/code&gt;&lt;/a&gt; then a syntax error typically materializes later. An unterminated string will often consume a bit of code until the next intended string value:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                                                       \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Some text&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$a_variable&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;and some runaway string ;\nsuccess(&quot;&lt;/span&gt;finished&lt;span class=&quot;hljs-string&quot;&gt;&quot;);\n         \n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s not just literal &lt;code&gt;T_STRING&lt;/code&gt;s which the parser may protest then. Another frequent variation is an &lt;a href=&quot;https://stackoverflow.com/questions/6507796/troubleshooting-parse-error-unexpected-error&quot;&gt;&lt;code&gt;Unexpected &apos;&amp;gt;&apos;&lt;/code&gt;&lt;/a&gt; for unquoted literal HTML.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Non-programming string quotes&lt;/h3&gt;\n&lt;p&gt;If you &lt;em&gt;copy and paste&lt;/em&gt; code from a blog or website, you sometimes end up with invalid code. &lt;a href=&quot;https://stackoverflow.com/questions/7762558/php-t-string-error&quot;&gt;Typographic quotes aren&apos;t&lt;/a&gt; what PHP expects:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$text&lt;/span&gt; = Something something.. + these ain&lt;span class=&quot;hljs-string&quot;&gt;&apos;t quotes;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Typographic/smart quotes are Unicode symbols. PHP treats them as part of adjoining alphanumeric text. For example &lt;code&gt;these&lt;/code&gt; is interpreted as a constant identifier. But any following text literal is then seen as a bareword/T_STRING by the parser.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;The missing semicolon; again&lt;/h3&gt;\n&lt;p&gt;If you have an unterminated expression in previous lines, then any following statement or language construct gets seen as raw identifier:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;       \n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;func1&lt;/span&gt;()\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;function2&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;PHP just can&apos;t know if you meant to run two functions after another, or if you meant to multiply their results, add them, compare them, or only run one &lt;code&gt;||&lt;/code&gt; or the other.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Short open tags and &lt;code&gt;&amp;lt;?xml&lt;/code&gt; headers in PHP scripts&lt;/h3&gt;\n&lt;p&gt;This is rather uncommon. But if short_open_tags are enabled, then you can&apos;t begin your PHP scripts &lt;a href=&quot;https://stackoverflow.com/questions/4361750/why-when-add-xml-version-1-0-encoding-utf-8-to-web-page-dont-work-on-ho&quot;&gt;with an XML declaration&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;      \n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?&lt;/span&gt;xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;PHP will see the &lt;code&gt;&amp;lt;?&lt;/code&gt; and reclaim it for itself. It won&apos;t understand what the stray &lt;code&gt;xml&lt;/code&gt; was meant for. It&apos;ll get interpreted as constant. But the &lt;code&gt;version&lt;/code&gt; will be seen as another literal/constant. And since the parser can&apos;t make sense of two subsequent literals/values without an expression operator in between, that&apos;ll be a parser failure.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Invisible Unicode characters&lt;/h3&gt;\n&lt;p&gt;A most hideous cause for syntax errors are Unicode symbols, such as the &lt;a href=&quot;http://en.wikipedia.org/wiki/Non-breaking_space&quot; rel=&quot;nofollow noreferrer&quot;&gt;non-breaking space&lt;/a&gt;. PHP allows Unicode characters as identifier names. If you get a T_STRING parser complaint for wholly unsuspicious code like:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You need to break out another text editor. Or an hexeditor even. What looks like plain spaces and newlines here, may contain invisible constants. Java-based IDEs are sometimes oblivious to an UTF-8 BOM mangled within, zero-width spaces, paragraph separators, etc. Try to reedit everything, remove whitespace and add normal spaces back in.&lt;/p&gt;\n&lt;p&gt;You can narrow it down with with adding redundant &lt;code&gt;;&lt;/code&gt; statement separators at each line start:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    ;&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The extra &lt;code&gt;;&lt;/code&gt; semicolon here will convert the preceding invisible character into an undefined constant reference (expression as statement). Which in return makes PHP produce a helpful notice.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;The `$` sign missing in front of variable names&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/language.variables.basics.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;Variables in PHP&lt;/a&gt; are represented by a dollar sign followed by the name of the variable.&lt;/p&gt;\n&lt;p&gt;The dollar sign (&lt;code&gt;$&lt;/code&gt;) is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Sigil_(computer_programming)&quot; rel=&quot;nofollow noreferrer&quot;&gt;sigil&lt;/a&gt; that marks the identifier as a name of a variable. Without this sigil, the identifier could be a &lt;a href=&quot;http://php.net/manual/en/reserved.keywords.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;language keyword&lt;/a&gt; or a &lt;a href=&quot;http://php.net/manual/en/language.constants.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;constant&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;This is a common error when the PHP code was &lt;a href=&quot;https://stackoverflow.com/q/48365324/4265352&quot;&gt;&quot;translated&quot; from code written in another language&lt;/a&gt; (C, Java, JavaScript, etc.). In such cases, a declaration of the variable type (when the original code was written in a language that uses typed variables) could also sneak out and produce this error.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Escaped Quotation marks&lt;/h3&gt;\n&lt;p&gt;If you use &lt;code&gt;\\&lt;/code&gt; in a string, it has a special meaning. This is called an &quot;&lt;a href=&quot;http://php.net/manual/en/regexp.reference.escape.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;Escape Character&lt;/a&gt;&quot; and normally tells the parser to take the next character literally.&lt;/p&gt;\n&lt;p&gt;Example: &lt;code&gt;echo &apos;Jim said \\&apos;Hello\\&apos;&apos;;&lt;/code&gt; will print &lt;code&gt;Jim said &apos;hello&apos;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;If you escape the closing quote of a string, the closing quote will be taken literally and not as intended, i.e. as a printable quote as part of the string and not close the string. This will show as a parse error commonly after you open the next string or at the end of the script.&lt;/p&gt;\n&lt;p&gt;Very common error when specifiying paths in Windows: &lt;code&gt;&quot;C:\\xampp\\htdocs\\&quot;&lt;/code&gt; is wrong. You need &lt;code&gt;&quot;C:\\\\xampp\\\\htdocs\\\\&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Typed properties&lt;/h3&gt;\n&lt;p&gt;You need PHP 7.4 to use &lt;a href=&quot;https://wiki.php.net/rfc/typed_properties_v2&quot; rel=&quot;nofollow noreferrer&quot;&gt;property typing&lt;/a&gt; such as:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;stdClass&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$obj&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;h2&gt;Unexpected &lt;code&gt;(&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;Opening parentheses typically follow language constructs such as &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;foreach&lt;/code&gt;/&lt;code&gt;for&lt;/code&gt;/&lt;code&gt;array&lt;/code&gt;/&lt;code&gt;list&lt;/code&gt; or start an arithmetic expression. They&apos;re syntactically incorrect after &lt;code&gt;&quot;strings&quot;&lt;/code&gt;, a previous &lt;code&gt;()&lt;/code&gt;, a lone &lt;code&gt;$&lt;/code&gt;, and in some typical declaration contexts.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;h3&gt; Function declaration parameters &lt;/h3&gt;\n\n&lt;p&gt;A rarer occurrence for this error is &lt;a href=&quot;https://stackoverflow.com/questions/9513714/php-unexpected-parse-error&quot;&gt;trying to use expressions as default function parameters&lt;/a&gt;. This is not supported, even in PHP7:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;header_fallback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$expires&lt;/span&gt; = time(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) + &lt;span class=&quot;hljs-number&quot;&gt;90000&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Parameters in a function declaration can only be literal values or constant expressions. Unlike for function invocations, where you can freely use &lt;code&gt;whatever(1+something()*2)&lt;/code&gt;, etc.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Class property defaults &lt;/h3&gt;\n\n&lt;p&gt;Same thing for &lt;a href=&quot;https://stackoverflow.com/questions/11313051/parse-error-syntax-error-unexpected-expecting-or-in&quot;&gt;class member declarations&lt;/a&gt;, where only literal/constant values are allowed, not expressions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;xyz&lt;/span&gt; &lt;/span&gt;{                   \n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$default&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get_config&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;xyz_default&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Put such things in the constructor.\nSee also &lt;a href=&quot;https://stackoverflow.com/questions/3960323/why-dont-php-attributes-allow-functions&quot;&gt;Why don&apos;t PHP attributes allow functions?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Again note that PHP 7 only allows &lt;code&gt;var $xy = 1 + 2 +3;&lt;/code&gt; constant expressions there.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; JavaScript syntax in PHP &lt;/h3&gt;\n\n&lt;p&gt;Using JavaScript or &lt;a href=&quot;https://stackoverflow.com/questions/16704064/syntax-error-unexpected-expecting-t-variable-or-in&quot;&gt;jQuery syntax&lt;/a&gt; won&apos;t work in PHP for obvious reasons:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;      \n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; $(document).&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;text&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When this happens, it usually indicates an unterminated preceding string; and literal &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; sections leaking into PHP code context.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; isset(()), empty, key, next, current &lt;/h3&gt;\n\n&lt;p&gt;Both &lt;code&gt;isset()&lt;/code&gt; and &lt;code&gt;empty()&lt;/code&gt; are language built-ins, not functions. They &lt;a href=&quot;https://stackoverflow.com/questions/17260232/parse-error-syntax-error-unexpected-in-d-xampp3-xampp-htdocs-contact-php&quot;&gt;need to access a variable directly&lt;/a&gt;. If you inadvertently add a pair of parentheses too much, then you&apos;d create an expression however:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;          \n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;]))) {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The same applies to any language construct that requires implicit variable name access. These built-ins are part of the language grammar, therefore don&apos;t permit decorative extra parentheses.&lt;/p&gt;\n\n&lt;p&gt;User-level functions that require a variable reference -but get an expression result passed- lead to runtime errors instead.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;Unexpected &lt;code&gt;)&lt;/code&gt;&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;h3&gt; Absent function parameter &lt;/h3&gt;\n\n&lt;p&gt;You cannot have stray &lt;a href=&quot;https://stackoverflow.com/questions/16278797/yii-widget-unexpected-where-is-the-error&quot;&gt;commas last in a function call&lt;/a&gt;. PHP expects a value there and thusly complains about an early closing &lt;code&gt;)&lt;/code&gt; parenthesis.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;              \n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;callfunc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A trailing comma is only allowed in &lt;code&gt;array()&lt;/code&gt; or &lt;code&gt;list()&lt;/code&gt; constructs.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Unfinished expressions &lt;/h3&gt;\n\n&lt;p&gt;If you forget something in an arithmetic expression, then the parser gives up. Because how should it possibly interpret that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;               \n&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And if you forgot the closing &lt;code&gt;)&lt;/code&gt; even, then you&apos;d get a complaint about the unexpected semicolon instead.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Foreach as &lt;code&gt;constant&lt;/code&gt; &lt;/h3&gt;\n\n&lt;p&gt;For &lt;a href=&quot;https://stackoverflow.com/questions/11624495/how-to-fix-syntax-error-in-php-unexpected&quot;&gt;forgotten variable &lt;code&gt;$&lt;/code&gt; prefixes in control statements&lt;/a&gt; you will see:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                       \n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; wrong) {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;PHP here sometimes tells you it expected a &lt;code&gt;::&lt;/code&gt; instead. Because a class::$variable could have satisfied the expected $variable expression..&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;Unexpected &lt;code&gt;{&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;Curly braces &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; enclose code blocks. And syntax errors about them usually indicate some incorrect nesting.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;h3&gt; Unmatched subexpressions in an &lt;code&gt;if&lt;/code&gt; &lt;/h3&gt;\n\n&lt;p&gt;Most commonly &lt;a href=&quot;https://stackoverflow.com/questions/11473504/php-syntax-error-on-line-9&quot;&gt;unbalanced &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt;&lt;/a&gt; are the cause if the parser complains about the opening curly &lt;code&gt;{&lt;/code&gt; appearing too early. A simple example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                              \n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; == &lt;span class=&quot;hljs-variable&quot;&gt;$y&lt;/span&gt;) &amp;amp;&amp;amp; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Count your parentheses or use an IDE which helps with that. Also don&apos;t write code without any spaces. Readability counts.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; { and } in expression context &lt;/h3&gt;\n\n&lt;p&gt;You can&apos;t use curly braces in expressions. If you confuse parentheses and curlys, it won&apos;t comply to the language grammar:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;           \n&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; * {&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; + &lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt;};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are a few exceptions for identifier construction, such as local scope variable &lt;code&gt;${references}&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Variable variables or curly var expressions &lt;/h3&gt;\n\n&lt;p&gt;This is pretty rare. But you might also get &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; parser complaints for complex variable expressions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                      \n&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello &lt;span class=&quot;hljs-subst&quot;&gt;{$world[2{]}&lt;/span&gt; !&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Though there&apos;s a higher likelihood for an unexpected &lt;code&gt;}&lt;/code&gt; in such contexts.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;Unexpected &lt;code&gt;}&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;When getting an &quot;unexpected &lt;code&gt;}&lt;/code&gt;&quot; error, you&apos;ve mostly closed a code block too early.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;h3&gt; Last statement in a code block &lt;/h3&gt;\n\n&lt;p&gt;It can happen for any unterminated expression.&lt;/p&gt;\n\n&lt;p&gt;And if the last line in a function/code block lacks a trailing &lt;code&gt;;&lt;/code&gt; semicolon:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;whatever&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;doStuff&lt;/span&gt;()\n}            \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here the parser can&apos;t tell if you perhaps still wanted to add &lt;code&gt;+ 25;&lt;/code&gt; to the function result or something else.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Invalid block nesting / Forgotten &lt;code&gt;{&lt;/code&gt; &lt;/h3&gt;\n\n&lt;p&gt;You&apos;ll sometimes see this parser error when a code block was &lt;code&gt;}&lt;/code&gt; closed too early, or you forgot an opening &lt;code&gt;{&lt;/code&gt; even:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;doStuff&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)    \n        &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;;\n    }\n}   \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In above snippet the &lt;code&gt;if&lt;/code&gt; didn&apos;t have an opening &lt;code&gt;{&lt;/code&gt; curly brace. Thus the closing &lt;code&gt;}&lt;/code&gt; one below became redundant. And therefore the next closing &lt;code&gt;}&lt;/code&gt;, which was intended for the function, was not associable to the original opening &lt;code&gt;{&lt;/code&gt; curly brace.&lt;/p&gt;\n\n&lt;p&gt;Such errors are even harder to find without proper code indentation. Use an IDE and bracket matching.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;Unexpected &lt;code&gt;{&lt;/code&gt;, expecting &lt;code&gt;(&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;Language constructs which require a condition/declaration header &lt;strong&gt;and&lt;/strong&gt; a code block will trigger this error.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;h3&gt; Parameter lists &lt;/h3&gt;\n\n&lt;p&gt;For example &lt;a href=&quot;https://stackoverflow.com/questions/6471413/parse-error-syntax-error-unexpected-expecting-help&quot;&gt;misdeclared functions without parameter list&lt;/a&gt; are not permitted:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                 \n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;whatever&lt;/span&gt; &lt;/span&gt;{\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Control statement conditions &lt;/h3&gt;\n\n&lt;p&gt;And you can&apos;t likewise have an &lt;a href=&quot;https://stackoverflow.com/questions/2749574/unexpected-expected&quot;&gt;&lt;code&gt;if&lt;/code&gt; without condition&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;  \n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; {\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which doesn&apos;t make sense, obviously. The same thing for the usual suspects, &lt;code&gt;for&lt;/code&gt;/&lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;/&lt;code&gt;do&lt;/code&gt;, etc.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If you&apos;ve got this particular error, you definitely should look up some manual examples.&lt;/p&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;h2&gt;\nUnexpected T_IF &lt;br&gt;\nUnexpected T_ELSEIF &lt;br&gt;\nUnexpected T_ELSE &lt;br&gt;\nUnexpected T_ENDIF\n&lt;/h2&gt;\n\n&lt;p&gt;Conditional control blocks &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elseif&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; follow a simple structure. When you encounter a syntax error, it&apos;s most likely just invalid block nesting  with missing &lt;code&gt;{&lt;/code&gt; curly braces &lt;code&gt;}&lt;/code&gt; - or one too many.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/uF6Yq.gif&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/uF6Yq.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;h3&gt; Missing &lt;code&gt;{&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt; due to incorrect indentation &lt;/h3&gt;\n\n&lt;p&gt;Mismatched code braces are common to less well-formatted code such as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((!(&lt;span class=&quot;hljs-variable&quot;&gt;$opt&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;uniQartz5.8&quot;&lt;/span&gt;]!=&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;check58)) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;poree&apos;&lt;/span&gt;]))) {&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;\n(&lt;span class=&quot;hljs-variable&quot;&gt;$true&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;halp&quot;&lt;/span&gt;;} &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt;((!&lt;span class=&quot;hljs-variable&quot;&gt;$z&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt;%b){&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;excSmthng&lt;/span&gt;(False,&lt;span class=&quot;hljs-number&quot;&gt;5.8&lt;/span&gt;)}&lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; (False){\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If your code looks like this, start afresh! Otherwise it&apos;s unfixable to you or anyone else. There&apos;s no point in showcasing this on the internet to inquire for help.&lt;/p&gt;\n\n&lt;p&gt;You will only be able to fix it, if you can visually follow the nested structure and relation of if/else conditionals and their &lt;code&gt;{&lt;/code&gt; code blocks &lt;code&gt;}&lt;/code&gt;. Use your IDE to see if they&apos;re all paired.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {\n     &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) {\n              \n     }\n     &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$whatever&lt;/span&gt;) {\n         &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$something2&lt;/span&gt;) {\n             \n         } \n         &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n             \n         }\n     }\n     &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n         \n     }\n     &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) {    &lt;span class=&quot;hljs-comment&quot;&gt;//   a second `if` tree&lt;/span&gt;\n         \n     }\n     &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n         \n     }\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) {\n    \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Any double &lt;code&gt;}&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; will not just close a branch, but a previous condition structure. Therefore stick with one coding style; don&apos;t mix and match in nested if/else trees.&lt;/p&gt;\n\n&lt;p&gt;Apart from consistency here, it turns out helpful to avoid lengthy conditions too. Use temporary variables or functions to avoid unreadable &lt;code&gt;if&lt;/code&gt;-expressions.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; &lt;code&gt;IF&lt;/code&gt; cannot be used in expressions &lt;/h3&gt;\n\n&lt;p&gt;A surprisingly frequent newcomer mistake is trying to use an &lt;code&gt;if&lt;/code&gt; statement in an expression, such as a print statement:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                   \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;a href=&apos;&quot;&lt;/span&gt; . &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;example.org&quot;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is invalid of course. &lt;/p&gt;\n\n&lt;p&gt;You can use &lt;a href=&quot;https://stackoverflow.com/questions/3507042/if-block-inside-echo-statement&quot;&gt;a ternary conditional&lt;/a&gt;, but beware of readability impacts.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;a href=&apos;&quot;&lt;/span&gt; . (&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt; ? &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://yes&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://no&quot;&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/a&amp;gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Otherwise break such output constructs up: use &lt;a href=&quot;https://stackoverflow.com/questions/21175753/how-to-embed-if-statement-inside-echo&quot;&gt;multiple &lt;code&gt;if&lt;/code&gt;s and &lt;code&gt;echo&lt;/code&gt;s&lt;/a&gt;.&lt;br&gt;\nBetter yet, use &lt;a href=&quot;https://stackoverflow.com/questions/13778250/if-else-to-echo-image-in-php&quot;&gt;temporary variables&lt;/a&gt;, and place your conditionals before:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;) { &lt;span class=&quot;hljs-variable&quot;&gt;$href&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;yes&quot;&lt;/span&gt;; } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-variable&quot;&gt;$href&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;no&quot;&lt;/span&gt;; }\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;a href=&apos;&lt;span class=&quot;hljs-subst&quot;&gt;$href&lt;/span&gt;&apos;&amp;gt;Link&amp;lt;/a&amp;gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Defining functions or methods for such cases often makes sense too.&lt;/p&gt;\n\n&lt;h3&gt; Control blocks don&apos;t return &quot;results&quot; &lt;/h3&gt;\n\n&lt;p&gt;Now this is less common, but a few coders even try to treat &lt;code&gt;if&lt;/code&gt; as if it could return a &lt;em&gt;result&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; == &lt;span class=&quot;hljs-variable&quot;&gt;$y&lt;/span&gt;) { &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is structurally identical to using &lt;code&gt;if&lt;/code&gt; within a string concatenation / expression.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;But &lt;a href=&quot;http://php.net/language.control-structures&quot; rel=&quot;nofollow noreferrer&quot;&gt;control structures&lt;/a&gt; (if / foreach / while) don&apos;t have a &lt;em&gt;&quot;result&quot;&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;The literal string &quot;true&quot; would also just be a void statement.\n&lt;br&gt;&lt;br&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;You&apos;ll have to use an assignment &lt;em&gt;in the code block&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; == &lt;span class=&quot;hljs-variable&quot;&gt;$y&lt;/span&gt;) { &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, resort to a &lt;code&gt;?:&lt;/code&gt; ternary comparison.&lt;/p&gt;\n\n&lt;h3&gt; If in If &lt;/h3&gt;\n\n&lt;p&gt;You &lt;a href=&quot;https://stackoverflow.com/questions/13316003/php-parse-error-syntax-error-unexpected-t-if&quot;&gt;cannot nest an &lt;code&gt;if&lt;/code&gt;&lt;/a&gt; within a condition either:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                    \n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$y&lt;/span&gt; != &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)) { ... }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is obviously redundant, because the &lt;code&gt;and&lt;/code&gt; (or &lt;code&gt;or&lt;/code&gt;) already allows chaining comparisons.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Forgotten &lt;code&gt;;&lt;/code&gt; semicolons &lt;/h3&gt;\n\n&lt;p&gt;Once more: Each control block needs to be a statement. If the previous code piece isn&apos;t terminated by a semicolon, then that&apos;s a guaranteed syntax error:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                \n&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Btw, the last line in a &lt;code&gt;{}&lt;/code&gt; code block needs a semicolon too.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Semicolon too early &lt;/h3&gt;\n\n&lt;p&gt;Now it&apos;s probably wrong to blame a particular coding style, as this pitfall is too easy to overlook:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;            \n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$y&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;           \n{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;    \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which happens more often than you might imagine.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;When you &lt;a href=&quot;https://stackoverflow.com/questions/12856700/syntax-error-unexpected-t-else&quot;&gt;terminate the &lt;code&gt;if ()&lt;/code&gt; expression with &lt;code&gt;;&lt;/code&gt;&lt;/a&gt; it will execute a void statement. The &lt;code&gt;;&lt;/code&gt; becomes a an empty &lt;code&gt;{}&lt;/code&gt; of its own!&lt;/li&gt;\n&lt;li&gt;The &lt;code&gt;{}&lt;/code&gt; block thus is detached from the &lt;code&gt;if&lt;/code&gt;, and would always run.&lt;/li&gt;\n&lt;li&gt;So the &lt;code&gt;else&lt;/code&gt; no longer had a relation to an open &lt;code&gt;if&lt;/code&gt; construct,\nwhich is why this would lead to an Unexpected T_ELSE syntax error.\n&lt;br&gt;&lt;br&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Which also explains a likewise subtle variation of this syntax error:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;x_is_true&lt;/span&gt;(); }; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;something_else&lt;/span&gt;(); };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where the &lt;code&gt;;&lt;/code&gt; after the code block &lt;code&gt;{}&lt;/code&gt; terminates the whole &lt;code&gt;if&lt;/code&gt;\nconstruct, severing the &lt;code&gt;else&lt;/code&gt; branch syntactically.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Not using code blocks &lt;/h3&gt;\n\n&lt;p&gt;It&apos;s syntactically allowed to omit curly braces &lt;code&gt;{&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; for code blocks in &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elseif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; branches. Which sadly is a syntax style very common to unversed coders. (Under the false assumption this was quicker to type or read).&lt;/p&gt;\n\n&lt;p&gt;However that&apos;s highly likely to trip up the syntax. Sooner or later additional statements will find their way into the if/else branches:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n    &lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n    &lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$y&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;;     \n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$z&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But to actually use code blocks, you &lt;strong&gt;&lt;em&gt;do have&lt;/em&gt;&lt;/strong&gt; to write &lt;code&gt;{&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; them as such!&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Even seasoned programmers avoid this braceless syntax, or at least\n  understand it as an exceptional exception to the rule.&lt;/p&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Else / Elseif in wrong order &lt;/h3&gt;\n\n&lt;p&gt;One thing to remind yourself is the &lt;a href=&quot;http://php.net/control-structures.elseif&quot; rel=&quot;nofollow noreferrer&quot;&gt;conditional order&lt;/a&gt;, of course. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;) {  }\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {  }\n&lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {  }\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can have as many &lt;code&gt;elseif&lt;/code&gt;s as you want, but &lt;a href=&quot;https://stackoverflow.com/questions/16619075/parse-error-syntax-error-unexpected-t-elseif&quot;&gt;&lt;code&gt;else&lt;/code&gt; has to go last&lt;/a&gt;. That&apos;s just how it is.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Class declarations &lt;/h3&gt;\n\n&lt;p&gt;As &lt;a href=&quot;https://stackoverflow.com/a/18092318/345031&quot;&gt;mentioned above&lt;/a&gt;, you can&apos;t have control statements in a class declaration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;xyz&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{}\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You either &lt;a href=&quot;https://stackoverflow.com/questions/5440036/php-parse-error-syntax-error-unexpected-t-if-expecting-t-function&quot;&gt;forgot a function&lt;/a&gt; definition, or closed one &lt;code&gt;}&lt;/code&gt; too early in such cases.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Unexpected T_ELSEIF / T_ELSE &lt;/h3&gt;\n\n&lt;p&gt;When mixing PHP and HTML, the closing &lt;code&gt;}&lt;/code&gt; for an &lt;code&gt;if/elseif&lt;/code&gt; must be in the same PHP block &lt;code&gt;&amp;lt;?php ?&amp;gt;&lt;/code&gt; as the next &lt;code&gt;elseif/else&lt;/code&gt;.  This will generate an error as the closing &lt;code&gt;}&lt;/code&gt; for the &lt;code&gt;if&lt;/code&gt; needs to be part of the &lt;code&gt;elseif&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt;) { &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n    html\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; } &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$y&lt;/span&gt;) { &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n    html\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; } &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The correct form &lt;code&gt;&amp;lt;?php } elseif&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt;) { &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n    html\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$y&lt;/span&gt;) { &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n    html\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; } &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is more or less a variation of incorrect indentation - presumably often based on wrong coding intentions.&lt;br&gt;\n    You cannot &lt;a href=&quot;https://stackoverflow.com/questions/11218975/parse-error-syntax-error-unexpected-t-else-and-i-dont-know-why&quot;&gt;mash other statements &lt;em&gt;inbetween&lt;/em&gt;&lt;/a&gt; &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;elseif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; structural tokens:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;in between&quot;&lt;/span&gt;;    \n&lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) {\n}\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt; text &lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;      \n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Either can only occur in &lt;code&gt;{}&lt;/code&gt; code blocks, not in between control structure tokens.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This wouldn&apos;t make sense anyway. It&apos;s not like that there was some &quot;undefined&quot; state when PHP jumps between &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; branches.&lt;/li&gt;\n&lt;li&gt;You&apos;ll have to make up your mind where print statements belong to / or if they need to be repeated in both branches.\n&lt;br&gt;&lt;br&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Nor can you &lt;strong&gt;part an if/else&lt;/strong&gt; between different control structures:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;) {  }\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is no &lt;a href=&quot;https://stackoverflow.com/questions/567002/unexpected-t-elseif&quot;&gt;syntactic relation&lt;/a&gt; between the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt;. The &lt;code&gt;foreach&lt;/code&gt; lexical scope ends at &lt;code&gt;}&lt;/code&gt;, so there&apos;s no point for the &lt;code&gt;if&lt;/code&gt; structure to continue.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; T_ENDIF &lt;/h3&gt;\n\n&lt;p&gt;If an unexpected T_ENDIF is complained about, you&apos;re using the alternative syntax style &lt;code&gt;if:&lt;/code&gt;  &lt;code&gt;elseif:&lt;/code&gt;  &lt;code&gt;else:&lt;/code&gt;  &lt;code&gt;endif;&lt;/code&gt;. Which you should really think twice about.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A common pitfall is confusing the eerily &lt;a href=&quot;https://stackoverflow.com/questions/19250411/parse-error-syntax-error-unexpected-t-endif-in-home-content-error-php&quot;&gt;similar &lt;code&gt;:&lt;/code&gt; colon for a &lt;code&gt;;&lt;/code&gt; semicolon&lt;/a&gt;. (Covered in &quot;Semicolon too early&quot;)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;As indentation is harder to track in template files, the more when using the alternative syntax - it&apos;s plausible your &lt;code&gt;endif;&lt;/code&gt; does not match any &lt;code&gt;if:&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Using &lt;a href=&quot;https://stackoverflow.com/questions/23369695/syntax-error-unexpected-endif-t-endif-on-line-288&quot;&gt;&lt;code&gt;} endif;&lt;/code&gt;&lt;/a&gt;\n is a &lt;em&gt;doubled&lt;/em&gt; &lt;code&gt;if&lt;/code&gt;-terminator.\n &lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;While an &quot;unexpected $end&quot; is usually the price for a forgotten closing &lt;code&gt;}&lt;/code&gt; curly brace.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Assignment vs. comparison &lt;/h3&gt;\n\n&lt;p&gt;So, this is not a syntax error, but worth mentioning in this context:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;       \n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) { }\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;do_false&lt;/span&gt;(); }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s not a &lt;a href=&quot;https://stackoverflow.com/questions/2063480/the-3-different-equals&quot;&gt;&lt;code&gt;==&lt;/code&gt;/&lt;code&gt;===&lt;/code&gt; comparison, but an &lt;code&gt;=&lt;/code&gt; assignment&lt;/a&gt;. This is rather subtle, and will easily lead some users to helplessly edit whole condition blocks. Watch out for unintended assignments first - whenver you experience a logic fault / misbeheviour.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;h2&gt;Unexpected $end&lt;/h2&gt;\n&lt;p&gt;When PHP talks about an &quot;unexpected &lt;code&gt;$end&lt;/code&gt;&quot;, it means that your code ended while the parser is expecting more code. (The message is a bit misleading when taken literally. It&apos;s not about a variable named &quot;$end&quot;, as sometimes assumed by newcomers. It refers to the &quot;end of file&quot;, &lt;kbd&gt;EOF&lt;/kbd&gt;.)&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Cause:&lt;/strong&gt; Unbalanced &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; for code blocks / and function or class declarations.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;It&apos;s &lt;strong&gt;pretty much always&lt;/strong&gt; about a missing &lt;code&gt;}&lt;/code&gt; curly brace to close preceding code blocks.  What it&apos;s saying is that the parser is expecting to find a closing &lt;code&gt;}&lt;/code&gt; but actually reached the end of the file.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Again, use proper indentation to avoid such issues.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use an IDE with bracket matching, to find out where the &lt;code&gt;}&lt;/code&gt; is amiss.\nThere are keyboard shortcuts in most IDEs and text editors:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;NetBeans, PhpStorm, Komodo: &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;[&lt;/kbd&gt; and &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;/li&gt;\n&lt;li&gt;Eclipse, Aptana: &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;P&lt;/kbd&gt;&lt;/li&gt;\n&lt;li&gt;Atom, Sublime: &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; - Zend Studio &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;M&lt;/kbd&gt;&lt;/li&gt;\n&lt;li&gt;Geany, Notepad++: &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;B&lt;/kbd&gt; - Joe: &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;G&lt;/kbd&gt; - Emacs: &lt;kbd&gt;C-M-n&lt;/kbd&gt; - Vim: &lt;kbd&gt;%&lt;/kbd&gt; &lt;br&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Most IDEs also &lt;strong&gt;highlight&lt;/strong&gt; matching braces, brackets and parentheses.\nWhich makes it pretty easy to inspect their correlation:&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/8Qyz7.gif&quot; alt=&quot;Bracket matching in an IDE&quot;&gt;&lt;/p&gt;\n&lt;h3&gt;Unterminated expressions&lt;/h3&gt;\n&lt;p&gt;An &lt;code&gt;Unexpected $end&lt;/code&gt; syntax/parser error can also occur for unterminated expressions or statements:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;$var = func(1, &lt;/code&gt;\n&lt;code&gt;?&amp;gt;&lt;/code&gt;&lt;kbd&gt;EOF&lt;/kbd&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;So, look at the end of scripts first. A trailing &lt;code&gt;;&lt;/code&gt; is often redundant for the last statement in any PHP script. But you &lt;em&gt;should&lt;/em&gt; have one. Precisely because it narrows such syntax issues down.  Particularly after you find yourself adding more statements at the end of the script.&lt;/p&gt;\n&lt;h3&gt;Indented HEREDOC markers&lt;/h3&gt;\n&lt;p&gt;Another common occurrence appears with &lt;a href=&quot;http://php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc&quot; rel=&quot;nofollow noreferrer&quot;&gt;HEREDOC or NOWDOC&lt;/a&gt; strings. The terminating marker goes ignored with leading spaces, tabs, etc.:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;&amp;lt;&amp;lt; END\n    Content...\n    Content....\n  END&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;#  terminator isn&apos;t exactly at the line start&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Therefore the parser assumes the HEREDOC string to continue until the end of the file (hence &quot;Unexpected $end&quot;). Pretty much all IDEs and syntax-highlighting editors will make this obvious or warn about it.&lt;/p&gt;\n&lt;h3&gt;Escaped Quotation marks&lt;/h3&gt;\n&lt;p&gt;If you use &lt;code&gt;\\&lt;/code&gt; in a string, it has a special meaning. This is called an &quot;&lt;a href=&quot;http://php.net/manual/en/regexp.reference.escape.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;Escape Character&lt;/a&gt;&quot; and normally tells the parser to take the next character literally.&lt;/p&gt;\n&lt;p&gt;Example: &lt;code&gt;echo &apos;Jim said \\&apos;Hello\\&apos;&apos;;&lt;/code&gt; will print &lt;code&gt;Jim said &apos;hello&apos;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;If you escape the closing quote of a string, the closing quote will be taken literally and not as intended, i.e. as a printable quote as part of the string and not close the string. This will show as a parse error commonly after you open the next string or at the end of the script.&lt;/p&gt;\n&lt;p&gt;Very common error when specifying paths in Windows: &lt;code&gt;&quot;C:\\xampp\\htdocs\\&quot;&lt;/code&gt; is wrong. You need &lt;code&gt;&quot;C:\\\\xampp\\\\htdocs\\\\&quot;&lt;/code&gt;.  Alternately, PHP will usually convert Unix-style paths (e.g. &lt;code&gt;&quot;C:/xampp/htdocs/&quot;&lt;/code&gt;) to the correct path for Windows.&lt;/p&gt;\n&lt;h3&gt;Alternative syntax&lt;/h3&gt;\n&lt;p&gt;Somewhat rarer you can see this syntax error when using the alternative syntax for statement/code blocks in templates. Using &lt;code&gt;if:&lt;/code&gt; and &lt;code&gt;else:&lt;/code&gt; and a missing &lt;code&gt;endif;&lt;/code&gt; for example.&lt;/p&gt;\n&lt;h3&gt;See also:&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2661620/php-syntax-error-unexpected-end&quot;&gt;PHP syntax error unexpected $end&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11482527/parse-error-syntax-error-unexpected-end-of-file-in-my-php-code&quot;&gt;Parse error: Syntax error, unexpected end of file in my PHP code&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13473654/parse-error-syntax-error-unexpected-end-of-file-php&quot;&gt;Parse error syntax error unexpected end of file, using PHP&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13990681/parse-error-syntax-error-unexpected-end-of-file-in-php&quot;&gt;PHP Parse error: syntax error, unexpected end of file in a CodeIgniter View&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13978885/parse-error-syntax-error-unexpected-end-of-file-registration-script&quot;&gt;Parse error: syntax error, unexpected end of file (Registration script)&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13665831/parse-error-syntax-error-unexpected-end-for-my-uni-registration-assignment&quot;&gt;&quot;Parse error: syntax error, unexpected $end&quot; For my uni registration assignment&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://jason.pureconcepts.net/2013/05/fixing-php-errors/#%7EUnexpected+end+of+file&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fixing PHP Errors: PHP Error #3: Unexpected end of file&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h2&gt;\nUnexpected T_IS_EQUAL &lt;br&gt;\nUnexpected T_IS_GREATER_OR_EQUAL &lt;br&gt;\nUnexpected T_IS_IDENTICAL &lt;br&gt;\nUnexpected T_IS_NOT_EQUAL &lt;br&gt;\nUnexpected T_IS_NOT_IDENTICAL &lt;br&gt;\nUnexpected T_IS_SMALLER_OR_EQUAL &lt;br&gt;\nUnexpected &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;br&gt;\nUnexpected &lt;code&gt;&amp;gt;&lt;/code&gt;\n&lt;/h2&gt;\n\n&lt;p&gt;Comparison operators such as &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt; and &lt;code&gt;&amp;lt;=&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; mostly should be used just in expressions, such as &lt;code&gt;if&lt;/code&gt; expressions. If the parser complains about them, then it often means incorrect paring or mismatched &lt;code&gt;(&lt;/code&gt; &lt;code&gt;)&lt;/code&gt; parens around them.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;h3&gt;Parens grouping&lt;/h3&gt;\n\n&lt;p&gt;In particular for &lt;code&gt;if&lt;/code&gt; statements with multiple comparisons you must take care to correctly count &lt;a href=&quot;https://stackoverflow.com/questions/4593505/php-unexpected-t-is-not-equal-error&quot;&gt;opening and closing parenthesis&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                        \n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable&quot;&gt;$bar&lt;/span&gt;) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; || &lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;) { ... }\n                      \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here the &lt;code&gt;if&lt;/code&gt; condition here was already terminated by the &lt;code&gt;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Once your comparisons become sufficiently complex it often helps to split it up into multiple and nested &lt;code&gt;if&lt;/code&gt; constructs rather.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;isset() mashed with comparing&lt;/h3&gt;\n\n&lt;p&gt;A common newcomer is pitfal is trying to combine &lt;a href=&quot;http://php.net/isset&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;isset()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://php.net/empty&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/a&gt; with comparisons:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                        \n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;var&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or even:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                    \n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt; !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;)) {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This doesn&apos;t make sense to PHP, because &lt;code&gt;isset&lt;/code&gt; and &lt;code&gt;empty&lt;/code&gt; are language constructs that only accept variable names. It doesn&apos;t make sense to compare the result either, because the output is only/already a boolean.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Confusing &lt;code&gt;&amp;gt;=&lt;/code&gt; greater-or-equal with &lt;code&gt;=&amp;gt;&lt;/code&gt; array operator&lt;/h3&gt;\n\n&lt;p&gt;Both operators look somewhat similar, so they sometimes get mixed up:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;         \n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) { ... }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You only need to remember that this comparison operator is called &quot;&lt;em&gt;greater than&lt;/em&gt; or &lt;em&gt;equal&lt;/em&gt;&quot; to get it right.&lt;/p&gt;\n\n&lt;p&gt;See also: &lt;a href=&quot;https://stackoverflow.com/questions/2551718/if-statement-structure-in-php&quot;&gt;If statement structure in PHP&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Nothing to compare against&lt;/h3&gt;\n\n&lt;p&gt;You also can&apos;t combine two comparisons if they pertain the same variable name:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                 \n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$xyz&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;PHP can&apos;t deduce that you meant to compare the initial variable again. Expressions are usually paired according to &lt;a href=&quot;http://php.net/manual/en/language.operators.precedence.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;operator precedence&lt;/a&gt;, so by the time the &lt;code&gt;&amp;lt;&lt;/code&gt; is seen, there&apos;d be only a boolean result left from the original variable.&lt;/p&gt;\n\n&lt;p&gt;See also: &lt;a href=&quot;https://stackoverflow.com/questions/10148054/how-to-check-if-a-text-box-is-not-empty-and-the-value-is-less-than-500&quot;&gt;unexpected T_IS_SMALLER_OR_EQUAL&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Comparison chains&lt;/h3&gt;\n\n&lt;p&gt;You can&apos;t compare against a variable with a row of operators:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                  \n &lt;span class=&quot;hljs-variable&quot;&gt;$reult&lt;/span&gt; = (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This has to be broken up into two comparisons, each against &lt;code&gt;$x&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This is actually more a case of blacklisted expressions (due to equivalent operator associativity). It&apos;s syntactically valid in a few C-style languages, but PHP wouldn&apos;t interpret it as expected comparison chain either.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Unexpected &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;br&gt; Unexpected &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/h3&gt;\n\n&lt;p&gt;The greater than &lt;code&gt;&amp;gt;&lt;/code&gt; or less than &lt;code&gt;&amp;lt;&lt;/code&gt; operators don&apos;t have a custom &lt;code&gt;T_XXX&lt;/code&gt; tokenizer name. And while they can be misplaced like all they others, you more often see the parser complain about them for misquoted strings and mashed HTML:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                        \n&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;a href=&apos;z&quot;&lt;/span&gt;&amp;gt;Hello&amp;lt;/a&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;;\n                 \n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This amounts to a string &lt;code&gt;&quot;&amp;lt;a href=&apos;z&quot;&lt;/code&gt; being compared &lt;code&gt;&amp;gt;&lt;/code&gt; to a literal constant &lt;code&gt;Hello&lt;/code&gt; and then another &lt;code&gt;&amp;lt;&lt;/code&gt; comparison. Or that&apos;s at least how PHP sees it. The actual cause and syntax mistake was the premature string &lt;code&gt;&quot;&lt;/code&gt; termination.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s also not possible to nest PHP start tags:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;my_func&lt;/span&gt;(); &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n           \n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;See also:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4593505/php-unexpected-t-is-not-equal-error&quot;&gt;php unexpected T_IS_NOT_EQUAL error&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/14538481/syntax-error-unexpected-t-is-equal&quot;&gt;syntax error, unexpected T_IS_EQUAL&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/17239090/syntax-error-on-return-statement&quot;&gt;Syntax error on return statement&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://forums.phpfreaks.com/topic/96891-parse-error-syntax-error-unexpected-t-is-not-identical-expecting-or/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://forums.phpfreaks.com/topic/96891-parse-error-syntax-error-unexpected-t-is-not-identical-expecting-or/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h2&gt;\nUnexpected T_IF &lt;br&gt;\nUnexpected T_FOREACH &lt;br&gt;\nUnexpected T_FOR &lt;br&gt;\nUnexpected T_WHILE &lt;br&gt;\nUnexpected T_DO &lt;br&gt;\nUnexpected T_ECHO\n&lt;/h2&gt;\n&lt;p&gt;Control constructs such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;echo&lt;/code&gt; may only be used as statements. They usually reside on a line by themselves.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;h3&gt; Semicolon; where you at? &lt;/h3&gt;\n&lt;p&gt;Pretty universally have you &lt;a href=&quot;https://stackoverflow.com/questions/4210343/trouble-with-if-statement-php&quot;&gt;missed a semicolon&lt;/a&gt; in the previous line if the parser complains about a control statement:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;             \n&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;myfunc&lt;/span&gt;()\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Solution: look into the previous line; add semicolon.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Class declarations &lt;/h3&gt;\n&lt;p&gt;Another location where this occurs is &lt;a href=&quot;https://stackoverflow.com/questions/5440036/php-parse-error-syntax-error-unexpected-t-if-expecting-t-function&quot;&gt;in class declarations&lt;/a&gt;. In the class section you can only list property initializations and method sections. No code may reside there.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;xyz&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;) {}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Such syntax errors commonly materialize for incorrectly nested &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;. In particular when function code blocks got closed too early.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Statements in expression context &lt;/h3&gt;\n&lt;p&gt;Most language constructs can &lt;a href=&quot;https://stackoverflow.com/questions/13316003/php-parse-error-syntax-error-unexpected-t-if&quot;&gt;only be used as statements&lt;/a&gt;. They aren&apos;t meant to be placed inside other expressions:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;                   \n&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$_&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Likewise can&apos;t you use an &lt;code&gt;if&lt;/code&gt; in strings, math expressions or elsewhere:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;               \n&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Oh, &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) { &lt;span class=&quot;hljs-string&quot;&gt;&quot;you!&quot;&lt;/span&gt; } . &lt;span class=&quot;hljs-string&quot;&gt;&quot; won&apos;t work&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Use a ternary condition here instead, when versed enough.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;For embedding &lt;code&gt;if&lt;/code&gt;-like conditions in an expression specifically, you often want to use a &lt;a href=&quot;https://stackoverflow.com/questions/3507042/if-block-inside-echo-statement&quot;&gt;&lt;code&gt;?:&lt;/code&gt; ternary evaluation&lt;/a&gt;.&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;The same applies to &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt;, &lt;code&gt;echo&lt;/code&gt; and a lesser extend &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;          \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;567&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;huh?&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Whereas &lt;code&gt;print()&lt;/code&gt; is a language built-in that may be used in expression context. (But rarely makes sense.)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Reserved keywords as identifiers &lt;/h3&gt;\n&lt;p&gt;You also can&apos;t use &lt;code&gt;do&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; and other language constructs for user-defined functions or class names. (Perhaps in PHP&amp;nbsp;7. But even then it wouldn&apos;t be advisable.)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt; Your have a semi-colon instead of a colon (:) or curly bracket ({) after your control block &lt;/h3&gt;\n&lt;p&gt;Control structures are typically wrapped in curly braces (but colons can be used in an &lt;a href=&quot;https://www.php.net/manual/en/control-structures.alternative-syntax.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;alternative syntax&lt;/a&gt;) to represent their scope. If you accidentally use a semi-colon you prematurely close that block resulting in your closing statement throwing an error.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$errors&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$error&lt;/span&gt;); &amp;lt;-- should be : &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; {\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Unexpected &apos;?&apos;&lt;/h2&gt;\n&lt;p&gt;If you are trying to use &lt;code&gt;&amp;lt;?php&lt;/code&gt; within &lt;code&gt;&amp;lt;?php&lt;/code&gt; this error will be given*.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello &apos;&lt;/span&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;* For PHP versions 4.3.1, 4.3.5 - 4.3.11, 4.4.0 - 4.4.1, 5.0.0 - 5.0.5, 4.4.2 - 4.4.9, 5.1.0 - 5.1.6, 5.2.0 - 5.2.17, 5.3.0 - 5.3.29, 5.4.0 - 5.4.45, 5.5.0 - 5.5.38, 5.6.0 - 5.6.40, 7.0.0 - 7.0.33, 7.1.0 - 7.1.33, 7.2.0 - 7.2.34, 7.3.0 - 7.3.31, 7.4.0 - 7.4.24&lt;/sup&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;If you are trying to use the null coalescing operator &lt;code&gt;??&lt;/code&gt; in a version of PHP prior to PHP 7 you will get this error.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; ?? &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// works in PHP 7+&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?=&lt;/span&gt; (!&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;)) ? &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// All versions of PHP&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Unexpected &apos;?&apos;, expecting variable&lt;/h3&gt;\n&lt;p&gt;A similar error can occur for nullable types, as in:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;?&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$sum&lt;/span&gt;&lt;/span&gt;): ?&lt;span class=&quot;hljs-title&quot;&gt;int&lt;/span&gt; &lt;/span&gt;{\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Which again indicates an outdated PHP version being used (either the CLI version &lt;code&gt;php -v&lt;/code&gt; or the webserver bound one &lt;code&gt;phpinfo();&lt;/code&gt;).&lt;/p&gt;\n    ","\n&lt;h2&gt;Unexpected T_LNUMBER&lt;/h2&gt;\n\n&lt;p&gt;The token &lt;code&gt;T_LNUMBER&lt;/code&gt; refers to a &quot;long&quot; / number.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;h3&gt;Invalid variable names&lt;/h3&gt;\n\n&lt;p&gt;In PHP, and most other programming languages, &lt;a href=&quot;https://secure.php.net/manual/en/language.variables.basics.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;variables&lt;/a&gt; cannot start with a number. The first character must be alphabetic or an underscore.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;$&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// Bad&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$_1&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// Good&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/EV3xn.gif&quot; alt=&quot;*&quot;&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Quite often &lt;a href=&quot;https://stackoverflow.com/questions/9571559/syntax-error-unexpected-t-lnumber-expecting-t-variable-or&quot;&gt;comes up&lt;/a&gt; for using &lt;code&gt;preg_replace&lt;/code&gt;-placeholders &lt;code&gt;&quot;$1&quot;&lt;/code&gt; in PHP context:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#                                       &lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/#(\\w+)/e&quot;&lt;/span&gt;,  &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtopupper&lt;/span&gt;($&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where the callback should have been quoted. (Now the &lt;code&gt;/e&lt;/code&gt; regex flag has been deprecated. But it&apos;s sometimes still misused in &lt;code&gt;preg_replace_callback&lt;/code&gt; functions.)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The same identifier constraint applies to &lt;a href=&quot;https://stackoverflow.com/questions/9606340/get-a-php-object-property-that-is-a-number&quot;&gt;object properties&lt;/a&gt;, btw.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;       \n&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&amp;gt;value\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;While the tokenizer/parser does not allow a literal &lt;code&gt;$1&lt;/code&gt; as variable name, one &lt;em&gt;could&lt;/em&gt; use &lt;code&gt;${1}&lt;/code&gt; or &lt;code&gt;${&quot;1&quot;}&lt;/code&gt;. Which is a syntactic workaround for non-standard identifiers. (It&apos;s best to think of it as a local scope lookup. But generally: prefer plain arrays for such cases!)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Amusingly, but very much not recommended, PHPs parser allows Unicode-identifiers; such that &lt;code&gt;$&lt;/code&gt; would be valid. (Unlike a literal &lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Stray array entry&lt;/h3&gt;\n\n&lt;p&gt;An unexpected long can also occur for &lt;a href=&quot;https://stackoverflow.com/questions/22183063/parse-error-syntax-error-unexpected-t-lnumber-expecting&quot;&gt;array declarations&lt;/a&gt; - when missing &lt;code&gt;,&lt;/code&gt; commas:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#             &lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$xy&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or likewise function calls and declarations, and other constructs:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;func(1, 2  3);&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;function xy($z 2);&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;for ($i=2 3&amp;lt;$z)&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So usually there&apos;s one of &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;,&lt;/code&gt; missing for separating lists or expressions.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Misquoted HTML&lt;/h3&gt;\n\n&lt;p&gt;And again, &lt;a href=&quot;https://stackoverflow.com/questions/16805331/syntax-error-unexpected-t-lnumber-expecting-or&quot;&gt;misquoted strings&lt;/a&gt; are a frequent source of stray numbers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#                            &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;td colspan=&quot;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;something bad&amp;lt;/td&amp;gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Such cases should be treated more or less like &lt;a href=&quot;https://stackoverflow.com/a/18092277/345031&quot;&gt;Unexpected T_STRING&lt;/a&gt; errors.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;h3&gt;Other identifiers&lt;/h3&gt;\n\n&lt;p&gt;Neither functions, classes, nor &lt;a href=&quot;https://stackoverflow.com/questions/33875380/can-a-namespace-start-with-a-number-in-php/33875381&quot;&gt;namespaces&lt;/a&gt; can be named beginning with a number either:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;         \n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; 123&lt;span class=&quot;hljs-title&quot;&gt;shop&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Pretty much the same as for variable names.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;h2&gt;Unexpected &apos;=&apos;&lt;/h2&gt;\n\n&lt;p&gt;This can be caused by having invalid characters in a variable name. Variables names &lt;em&gt;must&lt;/em&gt; follow these rules:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Variable names follow the same rules as other labels in PHP. A valid variable name starts with a letter or underscore, followed by any number of letters, numbers, or underscores. As a regular expression, it would be expressed thus: &apos;[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*&apos;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;h2&gt;Unexpected &apos;endwhile&apos; (T_ENDWHILE)&lt;/h2&gt;\n&lt;p&gt;The syntax is using a colon - if there is no colon the above error will occur.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetch&lt;/span&gt;()): &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n ....\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;endwhile&lt;/span&gt;; &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The alternative to this syntax is using curly brackets:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetch&lt;/span&gt;()) { &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n  ....\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; } &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/control-structures.while.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://php.net/manual/en/control-structures.while.php&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h1&gt;Unexpected &apos;.&apos;&lt;/h1&gt;\n&lt;p&gt;This can occur if you are trying to use the &lt;a href=&quot;https://stackoverflow.com/q/41124015/250259&quot;&gt;splat operator(&lt;code&gt;...&lt;/code&gt;)&lt;/a&gt; in an unsupported version of PHP.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;...&lt;/code&gt; first became available in PHP 5.6 to capture a variable number of arguments to a function:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;concatenate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$transform&lt;/span&gt;, ...&lt;span class=&quot;hljs-variable&quot;&gt;$strings&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$strings&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$piece&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$piece&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$transform&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;));\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;concatenate&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;strtoupper&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;d &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;like &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; apples&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// This would print:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// I&apos;D LIKE 6 APPLES&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In PHP 7.4, you could use it for &lt;a href=&quot;https://laravel-news.com/spread-operator-in-array-expressions-coming-to-php-7-4&quot; rel=&quot;nofollow noreferrer&quot;&gt;Array expressions&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$parts&lt;/span&gt; = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;pear&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable&quot;&gt;$fruits&lt;/span&gt; = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;banana&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;, ...&lt;span class=&quot;hljs-variable&quot;&gt;$parts&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;watermelon&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-comment&quot;&gt;// [&apos;banana&apos;, &apos;orange&apos;, &apos;apple&apos;, &apos;pear&apos;, &apos;watermelon&apos;];&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Unexpected &lt;code&gt;:&lt;/code&gt;&lt;/h1&gt;\n&lt;h3&gt;1. PHP 8 named parameter syntax&lt;/h3&gt;\n&lt;blockquote&gt;\n&lt;p&gt;unexpected &apos;:&apos;, expecting &apos;,&apos; or &apos;)&apos;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;If attempting to use PHP 8&apos;s new named parameter functionality in a version of PHP &amp;lt; 8 this error will occur:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$table&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;(column:&lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Solutions:&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Upgrade your version of PHP to PHP 8.0.0 or higher&lt;/li&gt;\n&lt;li&gt;Do not use named parameters (pass the parameters in the order they are expected)&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h3&gt;2. Cropped class &lt;code&gt;::&lt;/code&gt; separator&lt;/h3&gt;\n&lt;p&gt;An error message that begins Parse error: syntax error, unexpected &apos;:&apos; can be caused by mistakenly writing a class static reference &lt;code&gt;Class::$Variable&lt;/code&gt; as &lt;code&gt;Class:$Variable&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;h2&gt;Unexpected &apos;continue&apos; (T_CONTINUE)&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;continue&lt;/code&gt; is a statement (like for, or if) and must appear standalone. It cannot be used as part of an expression. Partly because continue doesn&apos;t return a value, but in an expression every sub-expression must result in some value so the overall expression results in a value. That&apos;s the difference between a statement and an expression.&lt;/p&gt;\n\n&lt;p&gt;That means &lt;code&gt;continue&lt;/code&gt; cannot be used in a ternary statement or any statement that requires a return value.&lt;/p&gt;\n\n&lt;h2&gt;Unexpected &apos;break&apos; (T_BREAK)&lt;/h2&gt;\n\n&lt;p&gt;Same goes for &lt;code&gt;break;&lt;/code&gt; of course. It&apos;s also not usable in expression context, but a strict statement (on the same level as &lt;code&gt;foreach&lt;/code&gt; or an &lt;code&gt;if&lt;/code&gt; block).&lt;/p&gt;\n\n&lt;h2&gt;Unexpected &apos;return&apos; (T_RETURN)&lt;/h2&gt;\n\n&lt;p&gt;Now this might be more surprising for &lt;code&gt;return&lt;/code&gt;, but that&apos;s also just a block-level &lt;em&gt;statement&lt;/em&gt;. It does return a value (or NULL) to the higher scope/function, but it does not evaluate as expression itself.  That is: there&apos;s no point in doing &lt;code&gt;return(return(false);;&lt;/code&gt; &lt;/p&gt;\n    ","\n&lt;p&gt;One more reason to occurrence of these errors is unexpected whitespace like similar characters with-in code, the code lines seems to be perfect, but they contains some specific characters which are similar to break line or whitespace or tab but they not get parsed by the parser.\nI face this issue when I try to put some code from webpage to the code editor by simply copy paste, I saw this error with array definition. everything was looking right in array definition. I can&apos;t sort out right error, finally I define this array in single line, then error was gone. then again I try to make that definition multiple like but manually adding break(Enter) for each array element and saved the file this time no parsing error by editor and also no error while running it.\nFor Example I faced issue with this snippet which was on one blog, actually can&apos;t post those snippets ,cause stack overflow already knows the problem with code.&lt;/p&gt;\n&lt;p&gt;then after solving it my working snippet is, which looks similar with one which shows parsing error&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;syntax error, unexpected &apos;&apos;auth&apos;&apos; (T_CONSTANT_ENCAPSED_STRING), expecting &apos;]&apos;&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$aliases&lt;/span&gt; = [\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;csrf&apos;&lt;/span&gt;=&amp;gt; \\CodeIgniter\\Filters\\CSRF::&lt;span class=&quot;hljs-variable language_&quot;&gt;class&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;toolbar&apos;&lt;/span&gt;=&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;\\CodeIgniter\\Filters\\DebugToolbar&lt;/span&gt;::&lt;span class=&quot;hljs-variable language_&quot;&gt;class&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;honeypot&apos;&lt;/span&gt;=&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;\\CodeIgniter\\Filters\\Honeypot&lt;/span&gt;::&lt;span class=&quot;hljs-variable language_&quot;&gt;class&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;auth&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;\\App\\Filters\\Auth&lt;/span&gt;::&lt;span class=&quot;hljs-variable language_&quot;&gt;class&lt;/span&gt;,\n];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For newbies to VS Code, if you see the syntax error, check if you have saved the file. If you have a wrong syntax, save the file, and then fix the syntax withou saving again, VS Code will keep showing you the error. The error message will disappear only after you save the file.&lt;/p&gt;\n    ","\n&lt;h1&gt;&lt;strong&gt;What Is Parse Error:&lt;/strong&gt;&lt;/h1&gt;\n&lt;p&gt;If the PHP code contains a syntax error, the PHP parser cannot interpret the code and stops working.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt; a syntax error can be a forgotten quotation mark, a missing semicolon at the end of a line, missing parenthesis, or extra characters. This leads to a parse error, because the code cannot be read and interpreted correctly by the PHP parser.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Example From Code:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php\necho &quot;Hello World!; \nthis();\nthat();\n?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The parser will display an error message similar to this one:&lt;/p&gt;\n&lt;p&gt;Parse error: syntax error, unexpected end of file, expecting variable (T_VARIABLE) or ${ (T_DOLLAR_OPEN_CURLY_BRACES) or {$ (T_CURLY_OPEN) in /homepages/12/d1123465789/htdocs/index.php on line 5&lt;/p&gt;\n&lt;h1&gt;&lt;strong&gt;Most important tips:&lt;/strong&gt;&lt;/h1&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;1- Use proper code indentation&lt;/strong&gt;&lt;/em&gt; or adopt any lofty coding style. Readability prevents irregularities.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;2-Use an IDE or editor for PHP&lt;/strong&gt;&lt;/em&gt; with syntax highlighting. Which also helps with parentheses/bracket balancing.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;3- Read the language reference and examples in the manual&lt;/strong&gt;&lt;/em&gt;. Twice, to become somewhat proficient.&lt;/p&gt;\n&lt;p&gt;4- As a newcomer, &lt;em&gt;&lt;strong&gt;avoid some of the confusing syntax constructs.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;5- &lt;em&gt;&lt;strong&gt;Restore a backup&lt;/strong&gt;&lt;/em&gt; of previously working code, &lt;em&gt;&lt;strong&gt;if you can&apos;t fix it&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;6- &lt;em&gt;&lt;strong&gt;Invisible stray Unicode characters&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;7- take care of type of linebreaks&lt;/strong&gt;&lt;/em&gt; are saved in files.&lt;/p&gt;\n    "]},"randomTags":[{"name":"platform-detection","slug":"platform-detection"},{"name":"filtering","slug":"filtering"},{"name":"generic-list","slug":"generic-list"},{"name":"dictionary","slug":"dictionary"},{"name":"printf","slug":"printf"},{"name":"spring","slug":"spring"},{"name":"import","slug":"import"},{"name":"propertynotfoundexception","slug":"propertynotfoundexception"},{"name":"recursive-query","slug":"recursive-query"},{"name":"decorator","slug":"decorator"},{"name":"numpy","slug":"numpy"},{"name":"reflection","slug":"reflection"},{"name":"equality-operator","slug":"equality-operator"},{"name":"iterator","slug":"iterator"},{"name":"pip","slug":"pip"},{"name":"c++-standard-library","slug":"c++-standard-library"},{"name":"model","slug":"model"},{"name":"captured-variable","slug":"captured-variable"},{"name":"aggregation-framework","slug":"aggregation-framework"},{"name":"undefined-index","slug":"undefined-index"}]},"__N_SSG":true}