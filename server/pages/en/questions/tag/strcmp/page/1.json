{"pageProps":{"data":{"count":1,"rows":[{"id":269,"title":"How do I properly compare strings in C?","slug":"how-do-i-properly-compare-strings-in-c-1657387467202","postType":"QUESTION","createdAt":"2022-07-09T17:24:27.000Z","updatedAt":"2022-07-09T17:24:27.000Z","tags":[{"id":1694,"name":"strcmp","slug":"strcmp","createdAt":"2022-07-09T17:24:27.000Z","updatedAt":"2022-07-09T17:24:27.000Z","Questions_Tags":{"questionId":269,"tagId":1694}}]}]},"slug":"strcmp","page":"1","answers":{"269":["\n&lt;p&gt;You can&apos;t (usefully) compare strings using &lt;code&gt;!=&lt;/code&gt; or &lt;code&gt;==&lt;/code&gt;, you need to use &lt;code&gt;strcmp&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check,input) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The reason for this is because &lt;code&gt;!=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; will only compare the base addresses of those strings. Not the contents of the strings themselves.&lt;/p&gt;\n    ","\n&lt;p&gt;Ok a few things: &lt;a href=&quot;https://stackoverflow.com/q/1694036/15168&quot;&gt;&lt;code&gt;gets&lt;/code&gt; is unsafe&lt;/a&gt; and should be replaced with &lt;code&gt;fgets(input, sizeof(input), stdin)&lt;/code&gt; so that you don&apos;t get a buffer overflow.&lt;/p&gt;\n\n&lt;p&gt;Next, to compare strings, you must use &lt;code&gt;strcmp&lt;/code&gt;, where a return value of 0 indicates that the two strings match. Using the equality operators (ie. &lt;code&gt;!=&lt;/code&gt;) compares the address of the two strings, as opposed to the individual &lt;code&gt;char&lt;/code&gt;s inside them.&lt;/p&gt;\n\n&lt;p&gt;And also note that, while in this example it won&apos;t cause a problem, &lt;code&gt;fgets&lt;/code&gt; stores the newline character, &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; in the buffers also; &lt;code&gt;gets()&lt;/code&gt; does not. If you compared the user input from &lt;code&gt;fgets()&lt;/code&gt; to a string literal such as &lt;code&gt;&quot;abc&quot;&lt;/code&gt; it would never match (unless the buffer was too small so that the &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; wouldn&apos;t fit in it).&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;http://www.tutorialspoint.com/c_standard_library/c_function_strcmp.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;strcmp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;This is in &lt;code&gt;string.h&lt;/code&gt; library, and is very popular. &lt;code&gt;strcmp&lt;/code&gt; return 0 if the strings are equal. See &lt;a href=&quot;https://stackoverflow.com/questions/34824838/what-does-strcmp-exactly-returns-in-c/34825545#34825545&quot;&gt;this&lt;/a&gt; for an better explanation of what &lt;code&gt;strcmp&lt;/code&gt; returns.&lt;/p&gt;\n\n&lt;p&gt;Basically, you have to do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check,input) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check,input))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check,input))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can check &lt;a href=&quot;http://www.programiz.com/c-programming/library-function/string.h/strcmp&quot; rel=&quot;noreferrer&quot;&gt;this&lt;/a&gt;, a tutorial on &lt;code&gt;strcmp&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You can&apos;t compare arrays directly like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;array1==array2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You should compare them char-by-char; for this you can use a function and return a boolean (True:1, False:0) value. Then you can use it in the test condition of the while loop.&lt;/p&gt;\n\n&lt;p&gt;Try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checker&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[],&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[])&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello!\\nPlease enter a word or character:\\n&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,input);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I will now repeat this until you type it back to me.\\n&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,check);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!checker(input,check))\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s\\n&quot;&lt;/span&gt;, input);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,check);\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Good bye!&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checker&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[],&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[])&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i,result=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; input[i]!=&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt; || check[i]!=&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(input[i] != check[i]) {\n            result=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Whenever you are trying to compare the strings, compare them with respect to each character. For this you can use built in string function called strcmp(input1,input2); and you should use the header file called &lt;code&gt;#include&amp;lt;string.h&amp;gt;&lt;/code&gt;  &lt;/p&gt;\n\n&lt;p&gt;Try this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt; &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt; &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;  &lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; \n{ \n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; s[]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;STACKOVERFLOW&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; s1[&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter the string to be checked\\n&quot;&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//enter the input string&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,s1);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(s,s1)==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;//compare both the strings  &lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Both the Strings match\\n&quot;&lt;/span&gt;); \n    } \n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Entered String does not match\\n&quot;&lt;/span&gt;);  \n    } \n    system(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pause&quot;&lt;/span&gt;);  \n} \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Welcome to the concept of the &lt;em&gt;pointer.&lt;/em&gt; Generations of beginning programmers have found the concept elusive, but if you wish to grow into a competent programmer, you must eventually master this concept  and moreover, you are already asking the right question. That&apos;s good.&lt;/p&gt;\n\n&lt;p&gt;Is it clear to you what an address is? See this diagram:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;----------     ----------\n| &lt;span class=&quot;hljs-number&quot;&gt;0x4000&lt;/span&gt; |     | &lt;span class=&quot;hljs-number&quot;&gt;0x4004&lt;/span&gt; |\n|    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |     |    &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   |\n----------     ----------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the diagram, the integer 1 is stored in memory at &lt;em&gt;address&lt;/em&gt; 0x4000. Why at an address? Because memory is large and can store many integers, just as a city is large and can house many families. Each integer is stored at a memory location, as each family resides in a house. Each memory location is identified by an &lt;em&gt;address&lt;/em&gt;, as each house is identified by an address.&lt;/p&gt;\n\n&lt;p&gt;The two boxes in the diagram represent two distinct memory locations. You can think of them as if they were houses. The integer 1 resides in the memory location at address 0x4000 (think, &quot;4000 Elm St.&quot;). The integer 7 resides in the memory location at address 0x4004 (think, &quot;4004 Elm St.&quot;).&lt;/p&gt;\n\n&lt;p&gt;You thought that your program was comparing the 1 to the 7, but it wasn&apos;t. It was comparing the 0x4000 to the 0x4004. So what happens when you have this situation?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;----------     ----------\n| &lt;span class=&quot;hljs-number&quot;&gt;0x4000&lt;/span&gt; |     | &lt;span class=&quot;hljs-number&quot;&gt;0x4004&lt;/span&gt; |\n|    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |     |    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |\n----------     ----------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The two integers are the same but the addresses differ. Your program compares the addresses.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;How do I properly compare strings?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(input, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// input assigned somehow&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(check, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// check assigned somehow&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// insufficient&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (check != input)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// good&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;// or &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Let us dig deeper to see &lt;strong&gt;why &lt;code&gt;check != input&lt;/code&gt; is not sufficient&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;In C, &lt;em&gt;string&lt;/em&gt; is a standard library specification.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A &lt;em&gt;string&lt;/em&gt; is a contiguous sequence of characters terminated by and including the first null character.&lt;br&gt;\n  C11 §7.1.1 1&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;code&gt;input&lt;/code&gt; above is not a &lt;em&gt;string&lt;/em&gt;.  &lt;code&gt;input&lt;/code&gt; is &lt;a href=&quot;https://cdecl.org/?q=char+input%5B40%5D&quot; rel=&quot;nofollow noreferrer&quot;&gt;array 40 of char&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The contents of &lt;code&gt;input&lt;/code&gt; can become a &lt;em&gt;string&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;In most cases, when an array is used in an expression, it is converted to the address of its 1st element.  &lt;/p&gt;\n\n&lt;p&gt;The below converts &lt;code&gt;check&lt;/code&gt; and &lt;code&gt;input&lt;/code&gt; to their respective addresses of the first element, then those addresses are compared.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;check != input   &lt;span class=&quot;hljs-comment&quot;&gt;// Compare addresses, not the contents of what addresses reference&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To compare &lt;em&gt;strings&lt;/em&gt;, we need to use those addresses and then look at the data they point to.&lt;br&gt;\n&lt;strong&gt;&lt;code&gt;strcmp()&lt;/code&gt; does the job&lt;/strong&gt;.  §7.23.4.2&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;int strcmp(const char *s1, const char *s2);&lt;/code&gt;&lt;/p&gt;\n  \n  &lt;p&gt;The &lt;code&gt;strcmp&lt;/code&gt; function compares the string pointed to by &lt;code&gt;s1&lt;/code&gt; to the string pointed to by &lt;code&gt;s2&lt;/code&gt;.&lt;/p&gt;\n  \n  &lt;p&gt;The &lt;code&gt;strcmp&lt;/code&gt; function returns an integer greater than, equal to, or less than zero,\n  accordingly as the string pointed to by &lt;code&gt;s1&lt;/code&gt; is greater than, equal to, or less than the string pointed to by &lt;code&gt;s2&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Not only can code find if the strings are of the same data, but which one is greater/less when they differ.  &lt;/p&gt;\n\n&lt;p&gt;The below is true when the string differ.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;For insight, see &lt;a href=&quot;https://stackoverflow.com/a/54136499/2410359&quot;&gt;Creating my own &lt;code&gt;strcmp()&lt;/code&gt; function&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You need to use &lt;code&gt;strcmp()&lt;/code&gt; and you need to &lt;code&gt;#include &amp;lt;string.h&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;!=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; operators only compare the base addresses of those strings. Not the contents of the strings&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example code:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;end\\n&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//dont forget to check for \\n&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( &lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input) ) &lt;span class=&quot;hljs-comment&quot;&gt;//strcmp returns 0 if equal&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter a name: \\n&quot;&lt;/span&gt;);\n        fgets(input, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(input), &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My name is: %s\\n&quot;&lt;/span&gt;, input);\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Good bye!&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note1: &lt;code&gt;gets()&lt;/code&gt; is unsafe. Use &lt;code&gt;fgets()&lt;/code&gt; instead&lt;/p&gt;\n&lt;p&gt;Note2: When using &lt;code&gt;fgets()&lt;/code&gt; you need to check for &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; new line charecter too&lt;/p&gt;\n    ","\n&lt;p&gt;You can:&lt;/p&gt;\n&lt;p&gt;Use &lt;code&gt;strcmp()&lt;/code&gt; from &lt;code&gt;string.h&lt;/code&gt;, which is the easier version&lt;/p&gt;\n&lt;p&gt;Or if you want to roll your own, you can use something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *s1, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *s2)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(s1[i] != &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt; &amp;amp;&amp;amp; s2[i] != &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(s1[i] != s2[i])\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n        i++;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I&apos;d use &lt;code&gt;strcmp()&lt;/code&gt; in a way like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input))\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// code here&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; s1[&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;],s2[&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;];\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter the character of strings: &quot;&lt;/span&gt;);\n        gets(s1);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nEnter different character of string to repeat: \\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(s1,s2))\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s\\n&quot;&lt;/span&gt;,s1);\n            gets(s2);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is very simple solution in which you will get your output as you want.&lt;/p&gt;\n    "]},"randomTags":[{"name":"dynamic","slug":"dynamic"},{"name":"react-hooks","slug":"react-hooks"},{"name":"using-directives","slug":"using-directives"},{"name":"certificate","slug":"certificate"},{"name":"layout","slug":"layout"},{"name":"apache","slug":"apache"},{"name":"object-notation","slug":"object-notation"},{"name":"dynamic-arrays","slug":"dynamic-arrays"},{"name":"command-line","slug":"command-line"},{"name":"sql-function","slug":"sql-function"},{"name":"relative-path","slug":"relative-path"},{"name":"webdriverwait","slug":"webdriverwait"},{"name":"printing","slug":"printing"},{"name":"tkinter-canvas","slug":"tkinter-canvas"},{"name":"dom","slug":"dom"},{"name":"urlconnection","slug":"urlconnection"},{"name":"collections","slug":"collections"},{"name":"long-integer","slug":"long-integer"},{"name":"automatic-semicolon-insertion","slug":"automatic-semicolon-insertion"},{"name":"application-state","slug":"application-state"}]},"__N_SSG":true}