{"pageProps":{"data":{"count":1,"rows":[{"id":83,"title":"Are 'Arrow Functions' and 'Functions' equivalent / interchangeable?","slug":"are-'arrow-functions'-and-'functions'-equivalent-interchangeable-1657384527873","postType":"QUESTION","createdAt":"2022-07-09T16:35:27.000Z","updatedAt":"2022-07-09T16:35:27.000Z","tags":[{"id":307,"name":"arrow-functions","slug":"arrow-functions","createdAt":"2022-07-09T16:35:28.000Z","updatedAt":"2022-07-09T16:35:28.000Z","Questions_Tags":{"questionId":83,"tagId":307}}]}]},"slug":"arrow-functions","page":1,"answers":{"83":["\n&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; &lt;strong&gt;No!&lt;/strong&gt; Arrow functions and function declarations / expressions are not equivalent and cannot be replaced blindly.&lt;br&gt;\nIf the function you want to replace does &lt;em&gt;not&lt;/em&gt; use &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;arguments&lt;/code&gt; and is not called with &lt;code&gt;new&lt;/code&gt;, then yes.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;As so often: &lt;strong&gt;it depends&lt;/strong&gt;. Arrow functions have different behavior than function declarations / expressions, so let&apos;s have a look at the differences first:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;1. Lexical &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Arrow functions don&apos;t have their own &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;arguments&lt;/code&gt; binding. Instead, those identifiers are resolved in the lexical scope like any other variable. That means that inside an arrow function, &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; refer to the values of &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; in the environment the arrow function is &lt;em&gt;defined&lt;/em&gt; in (i.e. &quot;outside&quot; the arrow function):&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Example using a function expression&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Inside `createObject`:&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Inside `bar`:&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;);\n    },\n  };\n}\n\ncreateObject.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;}).&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// override `this` inside createObject&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Example using a arrow function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Inside `createObject`:&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Inside `bar`:&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;),\n  };\n}\n\ncreateObject.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;}).&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// override `this` inside createObject&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;In the function expression case, &lt;code&gt;this&lt;/code&gt; refers to the object that was created inside the &lt;code&gt;createObject&lt;/code&gt;. In the arrow function case, &lt;code&gt;this&lt;/code&gt; refers to &lt;code&gt;this&lt;/code&gt; of &lt;code&gt;createObject&lt;/code&gt; itself.&lt;/p&gt;\n&lt;p&gt;This makes arrow functions useful if you need to access the &lt;code&gt;this&lt;/code&gt; of the current environment:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// currently common pattern&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; that = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;getData&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) {\n  that.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = data;\n});\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// better alternative with arrow functions&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;getData&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt; = data;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this also means that is &lt;em&gt;not&lt;/em&gt; possible to set an arrow function&apos;s &lt;code&gt;this&lt;/code&gt; with &lt;code&gt;.bind&lt;/code&gt; or &lt;code&gt;.call&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;If you are not very familiar with &lt;code&gt;this&lt;/code&gt;, consider reading&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot; rel=&quot;noreferrer&quot;&gt;MDN - this&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20&amp;amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes&quot; rel=&quot;noreferrer&quot;&gt;YDKJS - this &amp;amp; Object prototypes&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;2. Arrow functions cannot be called with &lt;code&gt;new&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;ES2015 distinguishes between functions that are &lt;em&gt;call&lt;/em&gt;able and functions that are &lt;em&gt;construct&lt;/em&gt;able. If a function is constructable, it can be called with  &lt;code&gt;new&lt;/code&gt;, i.e. &lt;code&gt;new User()&lt;/code&gt;. If a function is callable, it can be called without &lt;code&gt;new&lt;/code&gt; (i.e. normal function call).&lt;/p&gt;\n&lt;p&gt;Functions created through function declarations / expressions are both constructable and callable.&lt;br&gt;\nArrow functions (and methods) are only callable.\n&lt;code&gt;class&lt;/code&gt; constructors are only constructable.&lt;/p&gt;\n&lt;p&gt;If you are trying to call a non-callable function or to construct a non-constructable function, you will get a runtime error.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Knowing this, we can state the following.&lt;/p&gt;\n&lt;p&gt;Replaceable:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Functions that don&apos;t use &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;arguments&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Functions that are used with &lt;code&gt;.bind(this)&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;em&gt;Not&lt;/em&gt; replaceable:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Constructor functions&lt;/li&gt;\n&lt;li&gt;Function / methods added to a prototype (because they usually use &lt;code&gt;this&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;Variadic functions (if they use &lt;code&gt;arguments&lt;/code&gt; (see below))&lt;/li&gt;\n&lt;li&gt;Generator functions, which require the &lt;code&gt;function*&lt;/code&gt; notation&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;Lets have a closer look at this using your examples:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Constructor function&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This won&apos;t work because arrow functions cannot be called with &lt;code&gt;new&lt;/code&gt;. Keep using a function declaration / expression or use &lt;code&gt;class&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Prototype methods&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Most likely not, because prototype methods usually use &lt;code&gt;this&lt;/code&gt; to access the instance. If they don&apos;t use &lt;code&gt;this&lt;/code&gt;, then you can replace it. However, if you primarily care for concise syntax, use &lt;code&gt;class&lt;/code&gt; with its concise method syntax:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;User&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n  }\n  \n  &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Object methods&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Similarly for methods in an object literal. If the method wants to reference the object itself via &lt;code&gt;this&lt;/code&gt;, keep using function expressions,  or use the new method syntax:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n  },\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Callbacks&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;It depends. You should definitely replace it if you are aliasing the outer &lt;code&gt;this&lt;/code&gt; or are using &lt;code&gt;.bind(this)&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// old&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// new&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}, &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;But:&lt;/strong&gt; If the code which calls the callback explicitly sets &lt;code&gt;this&lt;/code&gt; to a specific value, as is often the case with event handlers, especially with jQuery, and the callback uses &lt;code&gt;this&lt;/code&gt; (or &lt;code&gt;arguments&lt;/code&gt;), you &lt;em&gt;cannot&lt;/em&gt; use an arrow function!&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Variadic functions&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Since arrow functions don&apos;t have their own &lt;code&gt;arguments&lt;/code&gt;, you cannot simply replace them with an arrow  function. However, ES2015 introduces an alternative to using &lt;code&gt;arguments&lt;/code&gt;: the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters&quot; rel=&quot;noreferrer&quot;&gt;rest parameter&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// old&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; args = [].&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// new&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Related question:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/22939130/218196&quot;&gt;When should I use arrow functions in ECMAScript 6?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/33288998/1048572&quot;&gt;Do ES6 arrow functions have their own arguments or not?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/32535110/1048572&quot;&gt;What are the differences (if any) between ES6 arrow functions and functions bound with Function.prototype.bind?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/31362292/1048572&quot;&gt;How to use arrow functions (public class fields) as class methods?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Further resources:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;MDN - Arrow functions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20&amp;amp;%20beyond/ch2.md#arrow-functions&quot; rel=&quot;noreferrer&quot;&gt;YDKJS - Arrow functions&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;Arrow functions =&amp;gt; best ES6 feature so far. They are a tremendously\npowerful addition to ES6, that I use constantly.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Wait, you can&apos;t use arrow function everywhere in your code, its not going to work in all cases like &lt;code&gt;this&lt;/code&gt; where arrow functions are not usable. Without a doubt, the arrow function is a great addition it brings code simplicity.&lt;/p&gt;\n&lt;p&gt;But you cant use an arrow function when a dynamic context is required: defining methods, create objects with constructors, get the target from this when handling events.&lt;/p&gt;\n&lt;h1&gt;Arrow functions should NOT be used because:&lt;/h1&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;They do not have &lt;code&gt;this&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;It uses lexical scoping to figure out what the value of &lt;code&gt;this&lt;/code&gt;\nshould be. In simple word lexical scoping it uses &lt;code&gt;this&lt;/code&gt; from the\ninside the functions body.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;They do not have &lt;code&gt;arguments&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Arrow functions dont have an &lt;code&gt;arguments&lt;/code&gt; object. But the same\nfunctionality can be achieved using rest parameters.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;let sum = (...args) =&amp;gt; args.reduce((x, y) =&amp;gt; x + y, 0)&lt;/code&gt;\n&lt;code&gt;sum(3, 3, 1) // output - 7&lt;/code&gt;\n`&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;They cannot be used with&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;new&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Arrow functions can&apos;t be constructors because they do not have a prototype property.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;When to use arrow function and when not:&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;Don&apos;t use to add function as a property in object literal because we\ncan not access this.&lt;/li&gt;\n&lt;li&gt;Function expressions are best for object methods. Arrow functions\nare best for callbacks or methods like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, or &lt;code&gt;forEach&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Use function declarations for functions youd call by name (because\ntheyre hoisted).&lt;/li&gt;\n&lt;li&gt;Use arrow functions for callbacks (because they tend to be terser).&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;To use arrow functions with &lt;code&gt;function.prototype.call&lt;/code&gt;, I made a helper function on the object prototype:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// Using&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// @func = function() {use this here} or This =&amp;gt; {use This here}&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;using&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;usage&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;using&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;This&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;This&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;This&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// 5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You don&apos;t NEED a helper. You could do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {&lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;This&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;This&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;This&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;, obj); &lt;span class=&quot;hljs-comment&quot;&gt;// 5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;They are not always equivalent. Here&apos;s a case where you cannot simply use arrow functions instead of regular functions.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Arrow functions CANNOT be used as constructors&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This is because of how Arrow Functions use the &lt;strong&gt;this&lt;/strong&gt; keyword. JS will simply throw an error if it sees an arrow function being invoked as a &quot;constructor&quot;. Use regular functions to fix the error.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Longer explanation:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This is because objects &quot;constructors&quot; rely on the &lt;strong&gt;this&lt;/strong&gt; keyword to be able to be modified.&lt;/p&gt;\n&lt;p&gt;Generally, the &lt;strong&gt;this&lt;/strong&gt; keyword always references the global object. (In the browser it is the &lt;strong&gt;window&lt;/strong&gt; object).&lt;/p&gt;\n&lt;p&gt;BUT, when you do something like:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;personCreator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; person1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;personCreator&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;strong&gt;new&lt;/strong&gt; keyword do some of its magic and makes the &lt;strong&gt;this&lt;/strong&gt; keyword that is inside of &lt;em&gt;personCreator&lt;/em&gt; to be initially an empty object instead of referencing the global object. After that, a new property called &lt;em&gt;name&lt;/em&gt; is created inside that empty &lt;strong&gt;this&lt;/strong&gt; object, and its value will be &apos;John&apos;. At the end, the &lt;strong&gt;this&lt;/strong&gt; object is returned.&lt;/p&gt;\n&lt;p&gt;As we see, the &lt;strong&gt;new&lt;/strong&gt; keyword changed the value of &lt;strong&gt;this&lt;/strong&gt; from referencing the &lt;strong&gt;global&lt;/strong&gt; object to now be an empty object &lt;strong&gt;{}&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Arrow functions do not allow their &lt;strong&gt;this&lt;/strong&gt; object to be modified. Their &lt;strong&gt;this&lt;/strong&gt; object is always the one from the scope where they were statically created. This is called &lt;strong&gt;Static Lexical Scope&lt;/strong&gt;. That is why you cannot do operations like &lt;strong&gt;bind&lt;/strong&gt;, &lt;strong&gt;apply&lt;/strong&gt;, or &lt;strong&gt;call&lt;/strong&gt; with arrow functions. Simply, their &lt;strong&gt;this&lt;/strong&gt; is locked to the value of the &lt;strong&gt;this&lt;/strong&gt; of the scope were they were created. This is by design.&lt;/p&gt;\n&lt;p&gt;And because of this :D, arrow functions cannot be used as &quot;constructors&quot;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Side Note&lt;/strong&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;A lexical scope is just the area where a function is created&lt;/em&gt;. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;personCreator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Output: { name: &apos;John&apos; }&lt;/span&gt;\n        }\n\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Output: { name: &apos;John&apos; }&lt;/span&gt;\n    \n        &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; person1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;personCreator&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The lexical scope of &lt;em&gt;bar&lt;/em&gt; is everything that is within &lt;strong&gt;foo&lt;/strong&gt;. So, the &lt;strong&gt;this&lt;/strong&gt; value of &lt;em&gt;bar&lt;/em&gt; is the one that &lt;em&gt;foo&lt;/em&gt; has, which is the one of &lt;em&gt;personCreator&lt;/em&gt;.&lt;/p&gt;\n    "]},"randomTags":[{"name":"implementation-defined-behavior","slug":"implementation-defined-behavior"},{"name":"currency","slug":"currency"},{"name":"algorithm","slug":"algorithm"},{"name":"time-complexity","slug":"time-complexity"},{"name":"circular-dependency","slug":"circular-dependency"},{"name":"architecture","slug":"architecture"},{"name":"dynamic","slug":"dynamic"},{"name":"dom","slug":"dom"},{"name":"date-formatting","slug":"date-formatting"},{"name":"interface","slug":"interface"},{"name":"oracle","slug":"oracle"},{"name":"theory","slug":"theory"},{"name":"html-select","slug":"html-select"},{"name":"default-parameters","slug":"default-parameters"},{"name":"gprof","slug":"gprof"},{"name":"cat","slug":"cat"},{"name":"angular","slug":"angular"},{"name":"protected","slug":"protected"},{"name":"reshape2","slug":"reshape2"},{"name":"lapply","slug":"lapply"}]},"__N_SSG":true}