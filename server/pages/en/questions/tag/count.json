{"pageProps":{"data":{"count":1,"rows":[{"id":417,"title":"How do I count the occurrences of a list item?","slug":"how-do-i-count-the-occurrences-of-a-list-item-1657387916234","postType":"QUESTION","createdAt":"2022-07-09T17:31:56.000Z","updatedAt":"2022-07-09T17:31:56.000Z","tags":[{"id":2213,"name":"count","slug":"count","createdAt":"2022-07-09T17:31:56.000Z","updatedAt":"2022-07-09T17:31:56.000Z","Questions_Tags":{"questionId":417,"tagId":2213}}]}]},"slug":"count","page":1,"answers":{"417":["\n&lt;p&gt;If you only want a single item&apos;s count, use the &lt;code&gt;count&lt;/code&gt; method:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].count(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h4&gt;&lt;strong&gt;Important: this is very slow if you are counting &lt;em&gt;multiple&lt;/em&gt; different items&lt;/strong&gt;&lt;/h4&gt;\n&lt;p&gt;Each &lt;code&gt;count&lt;/code&gt; call goes over the entire list of &lt;code&gt;n&lt;/code&gt; elements. Calling &lt;code&gt;count&lt;/code&gt; in a loop &lt;code&gt;n&lt;/code&gt; times means &lt;code&gt;n * n&lt;/code&gt; total checks, which can be catastrophic for performance.&lt;/p&gt;\n&lt;p&gt;If you want to count multiple items, use &lt;a href=&quot;https://stackoverflow.com/a/5829377/365102&quot;&gt;&lt;code&gt;Counter&lt;/code&gt;&lt;/a&gt;, which only does &lt;code&gt;n&lt;/code&gt; total checks.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.Counter&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Counter&lt;/code&gt;&lt;/a&gt; if you are using Python 2.7 or 3.x and you want the number of occurrences for each element:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;z = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Counter(z)\nCounter({&lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Counting the occurrences of one item in a list&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For counting the occurrences of just one list item you can use &lt;code&gt;count()&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l.count(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l.count(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Counting the occurrences of &lt;em&gt;all&lt;/em&gt; items in a list is also known as &quot;tallying&quot; a list, or creating a tally counter.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Counting all items with count()&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To count the occurrences of items in &lt;code&gt;l&lt;/code&gt; one can simply use a list comprehension and the &lt;code&gt;count()&lt;/code&gt; method&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[[x,l.count(x)] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(l)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(or similarly with a dictionary &lt;code&gt;dict((x,l.count(x)) for x in set(l))&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;Example: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[[x,l.count(x)] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(l)]\n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((x,l.count(x)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(l))\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Counting all items with Counter()&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Alternatively, there&apos;s the faster &lt;code&gt;Counter&lt;/code&gt; class from the &lt;code&gt;collections&lt;/code&gt; library&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Counter(l)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Counter(l)\nCounter({&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;How much faster is Counter?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I checked how much faster &lt;code&gt;Counter&lt;/code&gt; is for tallying lists. I tried both methods out with a few values of &lt;code&gt;n&lt;/code&gt; and it appears that &lt;code&gt;Counter&lt;/code&gt; is faster by a constant factor of approximately 2.&lt;/p&gt;\n\n&lt;p&gt;Here is the script I used:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n\nt1=timeit.Timer(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Counter(l)&apos;&lt;/span&gt;, \\\n                &lt;span class=&quot;hljs-string&quot;&gt;&apos;import random;import string;from collections import Counter;n=1000;l=[random.choice(string.ascii_letters) for x in range(n)]&apos;&lt;/span&gt;\n                )\n\nt2=timeit.Timer(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[[x,l.count(x)] for x in set(l)]&apos;&lt;/span&gt;,\n                &lt;span class=&quot;hljs-string&quot;&gt;&apos;import random;import string;n=1000;l=[random.choice(string.ascii_letters) for x in range(n)]&apos;&lt;/span&gt;\n                )\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Counter(): &quot;&lt;/span&gt;, t1.repeat(repeat=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,number=&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;count():   &quot;&lt;/span&gt;, t2.repeat(repeat=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,number=&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Counter():  [&lt;span class=&quot;hljs-number&quot;&gt;0.46062711701961234&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.4022796869976446&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.3974247490405105&lt;/span&gt;]\ncount():    [&lt;span class=&quot;hljs-number&quot;&gt;7.779430688009597&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7.962715800967999&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8.420845870045014&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another way to get the number of occurrences of each item, in a dictionary:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((i, a.count(i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n&lt;h1&gt;Given an item, how can I count its occurrences in a list in Python?&lt;/h1&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Here&apos;s an example list:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;aaaaabbbbcccdde&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;&lt;code&gt;list.count&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;There&apos;s the &lt;code&gt;list.count&lt;/code&gt; method&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l.count(&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This works fine for any list. Tuples have this method as well:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;t = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;aabbbffffff&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;t\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;t.count(&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;&lt;code&gt;collections.Counter&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;And then there&apos;s collections.Counter. You can dump any iterable into a Counter, not just a list, and the Counter will retain a data structure of the counts of the elements.&lt;/p&gt;\n&lt;p&gt;Usage:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c = Counter(l)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Counters are based on Python dictionaries, their keys are the elements, so the keys need to be hashable. They are basically like sets that allow redundant elements into them.&lt;/p&gt;\n&lt;h3&gt;Further usage of &lt;code&gt;collections.Counter&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;You can add or subtract with iterables from your counter:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c.update(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;bbb&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c.subtract(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;bbb&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And you can do multi-set operations with the counter as well:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c2 = Counter(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;aabbxyz&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c - c2                   &lt;span class=&quot;hljs-comment&quot;&gt;# set difference&lt;/span&gt;\nCounter({&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c + c2                   &lt;span class=&quot;hljs-comment&quot;&gt;# addition of all elements&lt;/span&gt;\nCounter({&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c | c2                   &lt;span class=&quot;hljs-comment&quot;&gt;# set union&lt;/span&gt;\nCounter({&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c &amp;amp; c2                   &lt;span class=&quot;hljs-comment&quot;&gt;# set intersection&lt;/span&gt;\nCounter({&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Why not pandas?&lt;/h2&gt;\n&lt;p&gt;Another answer suggests:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Why not use pandas?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Pandas is a common library, but it&apos;s not in the standard library. Adding it as a requirement is non-trivial.&lt;/p&gt;\n&lt;p&gt;There are builtin solutions for this use-case in the list object itself as well as in the standard library.&lt;/p&gt;\n&lt;p&gt;If your project does not already require pandas, it would be foolish to make it a requirement just for this functionality.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;list.count(x)&lt;/code&gt; returns the number of times &lt;code&gt;x&lt;/code&gt; appears in a list&lt;/p&gt;\n\n&lt;p&gt;see:\n&lt;a href=&quot;http://docs.python.org/tutorial/datastructures.html#more-on-lists&quot;&gt;http://docs.python.org/tutorial/datastructures.html#more-on-lists&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;ve compared all suggested solutions (and a few new ones) with &lt;a href=&quot;https://github.com/nschloe/perfplot&quot; rel=&quot;noreferrer&quot;&gt;perfplot&lt;/a&gt; (a small project of mine).&lt;/p&gt;\n&lt;h3 id=&quot;counting-one-item-ikoj&quot;&gt;Counting &lt;em&gt;one&lt;/em&gt; item&lt;/h3&gt;\n&lt;p&gt;For large enough arrays, it turns out that&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;numpy.&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(numpy.array(a) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is slightly faster than the other solutions.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/vTw7i.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/vTw7i.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;h3 id=&quot;counting-all-items-4cam&quot;&gt;Counting &lt;em&gt;all&lt;/em&gt; items&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/43096495/353337&quot;&gt;As established before&lt;/a&gt;,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;numpy.bincount(a)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is what you want.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/IE6L3.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/IE6L3.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Code to reproduce the plots:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; defaultdict\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; perfplot\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;counter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Counter(a)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((i, a.count(i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(a))\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bincount&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; numpy.bincount(a)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pandas_value_counts&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pandas.Series(a).value_counts()\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;occur_dict&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    d = {}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n            d[i] = d[i]+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            d[i] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count_unsorted_list_items&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;):\n    counts = defaultdict(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items:\n        counts[item] += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(counts)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;operator_countof&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((i, operator.countOf(a, i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(a))\n\n\nperfplot.show(\n    setup=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; n: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(numpy.random.randint(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, n)),\n    n_range=[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;**k &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)],\n    kernels=[\n        counter, count, bincount, pandas_value_counts, occur_dict,\n        count_unsorted_list_items, operator_countof\n        ],\n    equality_check=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;,\n    logx=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;,\n    logy=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;,\n    )\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; defaultdict\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; perfplot\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;counter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Counter(a)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((i, a.count(i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(a))\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bincount&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; numpy.bincount(a)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pandas_value_counts&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pandas.Series(a).value_counts()\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;occur_dict&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    d = {}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n            d[i] = d[i] + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            d[i] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count_unsorted_list_items&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;):\n    counts = defaultdict(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items:\n        counts[item] += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(counts)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;operator_countof&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((i, operator.countOf(a, i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(a))\n\n\nb = perfplot.bench(\n    setup=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; n: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(numpy.random.randint(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, n)),\n    n_range=[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ** k &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)],\n    kernels=[\n        counter,\n        count,\n        bincount,\n        pandas_value_counts,\n        occur_dict,\n        count_unsorted_list_items,\n        operator_countof,\n    ],\n    equality_check=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;,\n)\nb.save(&lt;span class=&quot;hljs-string&quot;&gt;&quot;out.png&quot;&lt;/span&gt;)\nb.show()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to &lt;strong&gt;count all values at once&lt;/strong&gt; you can do it very fast using numpy arrays and &lt;code&gt;bincount&lt;/code&gt; as follows&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\na = np.array([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\nnp.bincount(a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which gives&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;array([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you can use &lt;code&gt;pandas&lt;/code&gt;, then &lt;code&gt;value_counts&lt;/code&gt; is there for rescue. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;pd.Series(a).value_counts()\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ndtype: int64\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It automatically sorts the result based on frequency as well. &lt;/p&gt;\n\n&lt;p&gt;If you want the result to be in a list of list, do as below&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;pd.Series(a).value_counts().reset_index().values.tolist()\n[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Why not using Pandas?&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n\nmy_list = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# converting the list to a Series and counting the values&lt;/span&gt;\nmy_count = pd.Series(my_list).value_counts()\nmy_count\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nd    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nb    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nc    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ndtype: int64\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you are looking for a count of a particular element, say &lt;em&gt;a&lt;/em&gt;, try:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_count[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had this problem today and rolled my own solution before I thought to check SO.  This:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((i,a.count(i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is really, really slow for large lists.  My solution&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;occurDict&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;):\n    d = {}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n            d[i] = d[i]+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            d[i] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is actually a bit faster than the Counter solution, at least for Python 2.7.&lt;/p&gt;\n    ","\n&lt;h2&gt;Count of all elements with &lt;code&gt;itertools.groupby()&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;Antoher possiblity for getting the count of all elements in the list could be by means of &lt;code&gt;itertools.groupby()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With &quot;duplicate&quot; counts&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; groupby\n\nL = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;q&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# Input list&lt;/span&gt;\n\ncounts = [(i, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(c))) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i,c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; groupby(L)]      &lt;span class=&quot;hljs-comment&quot;&gt;# Create value-count pairs as list of tuples &lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(counts)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Returns&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;q&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice how it combined the first three &lt;code&gt;a&lt;/code&gt;&apos;s as the first group, while other groups of &lt;code&gt;a&lt;/code&gt; are present further down the list. This happens because the input list &lt;code&gt;L&lt;/code&gt; was not sorted. This can be a benefit sometimes if the groups should in fact be separate.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With unique counts&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If unique group counts are desired, just sort the input list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;counts = [(i, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(c))) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i,c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; groupby(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(L))]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(counts)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Returns&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;q&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For creating unique counts, many of the other answers provide easier and more readable code compared to the &lt;code&gt;groupby&lt;/code&gt; solution. But it is shown here to draw a parallel to the duplicate count example. &lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Python &amp;gt;= 2.6 (defaultdict) &amp;amp;&amp;amp; &amp;lt; 2.7 (Counter, OrderedDict)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; defaultdict\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count_unsorted_list_items&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    :param items: iterable of hashable items to count\n    :type items: iterable\n\n    :returns: dict of counts like Py2.7 Counter\n    :rtype: dict\n    &quot;&quot;&quot;&lt;/span&gt;\n    counts = defaultdict(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items:\n        counts[item] += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(counts)\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Python &amp;gt;= 2.2 (generators)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count_sorted_list_items&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    :param items: sorted iterable of items to count\n    :type items: sorted iterable\n\n    :returns: generator of (item, count) tuples\n    :rtype: generator\n    &quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; items:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(items) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; (items[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n    prev_item = items[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n    count = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; prev_item == item:\n            count += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; (prev_item, count)\n            count = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n            prev_item = item\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; (item, count)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; unittest\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TestListCounters&lt;/span&gt;(unittest.TestCase):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_count_unsorted_list_items&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        D = (\n            ([], []),\n            ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]),\n            ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]),\n            ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]),\n            )\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; inp, exp_outp &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; D:\n            counts = count_unsorted_list_items(inp) \n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; inp, exp_outp, counts\n            self.assertEqual(counts, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;( exp_outp ))\n\n        inp, exp_outp = UNSORTED_WIN = ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)])\n        self.assertEqual(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;( exp_outp ), count_unsorted_list_items(inp) )\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_count_sorted_list_items&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        D = (\n            ([], []),\n            ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]),\n            ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]),\n            ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]),\n            )\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; inp, exp_outp &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; D:\n            counts = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;( count_sorted_list_items(inp) )\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; inp, exp_outp, counts\n            self.assertEqual(counts, exp_outp)\n\n        inp, exp_outp = UNSORTED_FAIL = ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)])\n        self.assertEqual(exp_outp, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;( count_sorted_list_items(inp) ))\n        &lt;span class=&quot;hljs-comment&quot;&gt;# ... [(2,2), (4,1), (2,1)]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Although it is very old question, since i didn&apos;t find a one liner, i made one.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# original numbers in list&lt;/span&gt;\nl = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# empty dictionary to hold pair of number and its count&lt;/span&gt;\nd = {}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# loop through all elements and store count&lt;/span&gt;\n[ d.update( {i:d.get(i, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;} ) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l ]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(d)\n&lt;span class=&quot;hljs-comment&quot;&gt;# {1: 1, 2: 2, 3: 3, 4: 1}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Below are the three solutions:&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Fastest is using a for loop and storing it in a Dict.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;countElement&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    g = {}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; g: \n            g[i] +=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;: \n            g[i] =&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; g\n\n\nz = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;423&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;423&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;423&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Solution 1 - Faster&lt;/span&gt;\nst = time.monotonic()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;):\n    b = countElement(z)\net = time.monotonic()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Simple for loop and storing it in dict - Duration: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(et - st))\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Solution 2 - Fast&lt;/span&gt;\nst = time.monotonic()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;):\n    a = Counter(z)\net = time.monotonic()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Using collections.Counter - Duration: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(et - st))\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Solution 3 - Slow&lt;/span&gt;\nst = time.monotonic()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;):\n    g = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;([(i, z.count(i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(z)])\net = time.monotonic()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(g)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Using list comprehension - Duration: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(et - st))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Solution 1 - Faster&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;423&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\nSimple &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; loop &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; storing it &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt; - Duration: &lt;span class=&quot;hljs-number&quot;&gt;12.032000000000153&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Solution 2 - Fast&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Counter({&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;423&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})\nUsing collections.Counter - Duration: &lt;span class=&quot;hljs-number&quot;&gt;15.889999999999418&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Solution 3 - Slow&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;423&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}\nUsing &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; comprehension - Duration: &lt;span class=&quot;hljs-number&quot;&gt;33.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It was suggested to use numpy&apos;s &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.bincount.html&quot; rel=&quot;noreferrer&quot;&gt;bincount&lt;/a&gt;, however it works only for 1d arrays with &lt;em&gt;non-negative integers&lt;/em&gt;. Also, the resulting array might be confusing (it contains the occurrences of the integers from min to max of the original list, and sets to 0 the missing integers).&lt;/p&gt;\n\n&lt;p&gt;A better way to do it with numpy is to use the &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.unique.html&quot; rel=&quot;noreferrer&quot;&gt;unique&lt;/a&gt; function with the attribute &lt;code&gt;return_counts&lt;/code&gt; set to True. It returns a tuple with an array of the unique values and an array of the occurrences of each unique value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# a = [1, 1, 0, 2, 1, 0, 3, 3]&lt;/span&gt;\na_uniq, counts = np.unique(a, return_counts=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# array([0, 1, 2, 3]), array([2, 3, 1, 2]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then we can pair them as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(a_uniq, counts))  &lt;span class=&quot;hljs-comment&quot;&gt;# {0: 2, 1: 3, 2: 1, 3: 2}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It also works with other data types and &quot;2d lists&quot;, e.g.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(*np.unique(a, return_counts=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)))\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To count the number of diverse elements having a common type:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;li = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A0&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c5&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A8&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A5&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A3&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A9&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; el &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; li &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; el[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; el[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;01234&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;gives&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;3&lt;/code&gt;  , not 6&lt;/p&gt;\n    ","\n&lt;p&gt;You can also use &lt;a href=&quot;https://docs.python.org/3/library/operator.html#operator.countOf&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;countOf&lt;/code&gt;&lt;/a&gt; method of a built-in module &lt;a href=&quot;https://docs.python.org/3/library/operator.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;operator&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;operator.countOf([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I would use &lt;code&gt;filter()&lt;/code&gt;, take Lukasz&apos;s example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lst = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, lst))\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Given a list X&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n X = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The dictionary which shows i: frequency(i) for elements of this list is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{i:X.count(i) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; np.unique(X)}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;use %timeit to see which operation is more efficient.   np.array counting operations should be faster.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n mylist = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] \n types_counts=Counter(mylist)\n &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(types_counts)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;May not be the most efficient, requires an extra pass to remove duplicates. &lt;/p&gt;\n\n&lt;p&gt;Functional implementation : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;arr = np.array([&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;])\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x  : (x , &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(arr).count(x)) , arr)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;returns : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or return as &lt;code&gt;dict&lt;/code&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x  : (x , &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(arr).count(x)) , arr)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;returns : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Alternatively, you can also implement the counter by yourself. This is the way I do:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;item_list = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;me&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;me&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;you&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;you&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;you&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;they&apos;&lt;/span&gt;]\n\nocc_dict = {}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; item_list:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; occ_dict:\n        occ_dict[item] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        occ_dict[item] +=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(occ_dict)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output: &lt;code&gt;{&apos;me&apos;: 2, &apos;you&apos;: 3, &apos;they&apos;: 1}&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mot = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;compte&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;france&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;zied&quot;&lt;/span&gt;]\nlst = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;compte&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;france&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;france&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;france&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;france&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((x, lst.count(x)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(mot))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;this gives&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;compte&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;france&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;zied&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; elem &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;yourlist&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; elem==&amp;lt;your_value&amp;gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will return the amount of occurences of your_value&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;l2=[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;feto&quot;&lt;/span&gt;,[&lt;span class=&quot;hljs-string&quot;&gt;&quot;feto&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,[&lt;span class=&quot;hljs-string&quot;&gt;&quot;feto&quot;&lt;/span&gt;]],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;feto&apos;&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,[&lt;span class=&quot;hljs-string&quot;&gt;&apos;feto&apos;&lt;/span&gt;]]]]\ncount=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;):   \n        &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; count \n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n             &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; count\n        count=l.count(&lt;span class=&quot;hljs-string&quot;&gt;&quot;feto&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l:\n             &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(i) &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n                count+=Test(i)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; count   \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(Test(l2))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;this will recursive count or search for the item in the list even if it in list of lists&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;if you want a number of occurrences for the particular element:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;z = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;single_occurrences = Counter(z)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(single_occurrences.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(single_occurrences.values())\ndict_values([&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;test = [&lt;span class=&quot;hljs-number&quot;&gt;409.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;479.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;340.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;282.4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;406.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;300.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;374.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;253.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;195.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;269.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;329.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;250.7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;250.7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;345.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;379.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;275.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;215.2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;300.0&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; test:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;{} numbers {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(i, test.count(i)))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\ntest = [&lt;span class=&quot;hljs-number&quot;&gt;409.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;479.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;340.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;282.4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;406.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;300.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;374.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;253.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;195.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;269.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;329.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;250.7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;250.7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;345.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;379.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;275.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;215.2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;300.0&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#turning the list into a temporary dataframe&lt;/span&gt;\ntest  = pd.DataFrame(test)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#using the very convenient value_counts() function&lt;/span&gt;\ndf_counts = test.value_counts()\ndf_counts\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;then you can use &lt;code&gt;df_counts.index&lt;/code&gt; and &lt;code&gt;df_counts.values&lt;/code&gt; to get the data.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jess&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sophia&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Karen&apos;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;Addison&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Joseph&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Eric&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Ilona&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jason&apos;&lt;/span&gt;]\nthe_item = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Enter the item that you wish to find : &apos;&lt;/span&gt;)\nhow_many_times = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; occurrence &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x:\n     &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; occurrence == the_item : \n          how_many_times += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;The occurrence of&apos;&lt;/span&gt;, the_item, &lt;span class=&quot;hljs-string&quot;&gt;&apos;in&apos;&lt;/span&gt;, x,&lt;span class=&quot;hljs-string&quot;&gt;&apos;is&apos;&lt;/span&gt;,how_many_times) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Created a list of names wherein the name &apos;Jack&apos; is repeated.\nIn order to check its Occurrence, I ran a for loop in the list named &lt;code&gt;x&lt;/code&gt;.\nUpon each iteration, if the loop variable attains the value same that of received from the user and stored in the variable &lt;code&gt;the_item&lt;/code&gt;, the variable &lt;code&gt;how_many_times&lt;/code&gt; gets incremented by 1.\nAfter attaining some value...We print &lt;code&gt;how_many_times&lt;/code&gt; which stores the value of the occurance of the word &apos;jack&apos;&lt;/p&gt;\n    "]},"randomTags":[{"name":"underscore.js","slug":"underscore.js"},{"name":"copy-elision","slug":"copy-elision"},{"name":"combinations","slug":"combinations"},{"name":"security","slug":"security"},{"name":"servlets","slug":"servlets"},{"name":"combinatorics","slug":"combinatorics"},{"name":"openssl","slug":"openssl"},{"name":"this","slug":"this"},{"name":"passwords","slug":"passwords"},{"name":"stack","slug":"stack"},{"name":"cdi","slug":"cdi"},{"name":"non-static","slug":"non-static"},{"name":"datetime","slug":"datetime"},{"name":"stack-overflow","slug":"stack-overflow"},{"name":"regex","slug":"regex"},{"name":"jtable","slug":"jtable"},{"name":"ssl-certificate","slug":"ssl-certificate"},{"name":"syntax-error","slug":"syntax-error"},{"name":"session","slug":"session"},{"name":"var","slug":"var"}]},"__N_SSG":true}