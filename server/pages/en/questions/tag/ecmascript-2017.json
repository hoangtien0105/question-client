{"pageProps":{"data":{"count":1,"rows":[{"id":79,"title":"Using async/await with a forEach loop","slug":"using-asyncawait-with-a-foreach-loop-1657384512667","postType":"QUESTION","createdAt":"2022-07-09T16:35:12.000Z","updatedAt":"2022-07-09T16:35:12.000Z","tags":[{"id":291,"name":"ecmascript-2017","slug":"ecmascript-2017","createdAt":"2022-07-09T16:35:12.000Z","updatedAt":"2022-07-09T16:35:12.000Z","Questions_Tags":{"questionId":79,"tagId":291}}]}]},"slug":"ecmascript-2017","page":1,"answers":{"79":["\n&lt;p&gt;Sure the code does work, but I&apos;m pretty sure it doesn&apos;t do what you expect it to do. It just fires off multiple asynchronous calls, but the &lt;code&gt;printFiles&lt;/code&gt; function does immediately return after that.&lt;/p&gt;\n\n&lt;h3&gt;Reading in sequence&lt;/h3&gt;\n\n&lt;p&gt;If you want to read the files in sequence, &lt;strong&gt;you cannot use &lt;code&gt;forEach&lt;/code&gt;&lt;/strong&gt; indeed. Just use a modern &lt;code&gt;for  of&lt;/code&gt; loop instead, in which &lt;code&gt;await&lt;/code&gt; will work as expected:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; files) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Reading in parallel&lt;/h3&gt;\n\n&lt;p&gt;If you want to read the files in parallel, &lt;strong&gt;you cannot use &lt;code&gt;forEach&lt;/code&gt;&lt;/strong&gt; indeed. Each of the &lt;code&gt;async&lt;/code&gt; callback function calls does return a promise, but you&apos;re throwing them away instead of awaiting them. Just use &lt;code&gt;map&lt;/code&gt; instead, and you can await the array of promises that you&apos;ll get with &lt;code&gt;Promise.all&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(files.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (file) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents)\n  }));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With ES2018, you are able to greatly simplify all of the above answers to:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;()\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; files.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt; =&amp;gt;&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;))) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents)\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See spec: &lt;a href=&quot;https://github.com/tc39/proposal-async-iteration&quot; rel=&quot;noreferrer&quot;&gt;proposal-async-iteration&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Simplified:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; results &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; array) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;longRunningTask&lt;/span&gt;()\n  }\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;I will wait&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;2018-09-10: This answer has been getting a lot of attention recently, please see &lt;a href=&quot;http://2ality.com/2016/10/asynchronous-iteration.html&quot; rel=&quot;noreferrer&quot;&gt;Axel Rauschmayer&apos;s blog post&lt;/a&gt; for further information about asynchronous iteration.&lt;/p&gt;\n    ","\n\n\n&lt;p&gt;Instead of &lt;code&gt;Promise.all&lt;/code&gt; in conjunction with &lt;code&gt;Array.prototype.map&lt;/code&gt; (which does not guarantee the order in which the &lt;code&gt;Promise&lt;/code&gt;s are resolved), I use &lt;code&gt;Array.prototype.reduce&lt;/code&gt;, starting with a resolved &lt;code&gt;Promise&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; files.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (promise, file) =&amp;gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This line will wait for the last async function to finish.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// The first iteration uses an already resolved Promise&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// so, it will immediately continue.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; promise;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents);\n  }, &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;());\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;https://github.com/toniov/p-iteration&quot; rel=&quot;noreferrer&quot;&gt;p-iteration&lt;/a&gt; module on npm implements the Array iteration methods so they can be used in a very straightforward way with async/await.&lt;/p&gt;\n\n&lt;p&gt;An example with your case:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { forEach } = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p-iteration&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs-promise&apos;&lt;/span&gt;);\n\n(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(files, &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (file) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents);\n  });\n})();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here are some &lt;code&gt;forEachAsync&lt;/code&gt; prototypes. Note you&apos;ll need to &lt;code&gt;await&lt;/code&gt; them:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;forEachAsync&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(t) }\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;forEachAsyncParallel&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(fn));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; while you may include this in your own code, you should not include this in libraries you distribute to others (to avoid polluting their globals).&lt;/p&gt;\n    ","\n&lt;h2&gt;Picture worth 1000 words - For Sequential Approach Only&lt;/h2&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt; : I was in similar situation last night. I used async function as foreach argument. The result was un-predictable. When I did testing for my code 3 times, it ran without issues 2 times and failed 1 time. (something weird)&lt;/p&gt;\n&lt;p&gt;Finally I got my head around &amp;amp; did some scratch pad testing.&lt;/p&gt;\n&lt;h3&gt;Scenario 1 - How un-sequential it can get with async in foreach&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/VGXEa.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/VGXEa.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;time&lt;/span&gt;) =&amp;gt; { \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Promise resolved for &lt;span class=&quot;hljs-subst&quot;&gt;${time}&lt;/span&gt;s`&lt;/span&gt;)\n    }, time)\n  })\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myPromiseArray = [&lt;span class=&quot;hljs-title function_&quot;&gt;getPromise&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;), &lt;span class=&quot;hljs-title function_&quot;&gt;getPromise&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;), &lt;span class=&quot;hljs-title function_&quot;&gt;getPromise&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;)]\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Before For Each Loop&apos;&lt;/span&gt;)\n\n  myPromiseArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (element, index) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; element;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result);\n  })\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;After For Each Loop&apos;&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Scenario 2 - Using &lt;code&gt;for - of&lt;/code&gt; loop as @Bergi above suggested&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/QWbRI.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/QWbRI.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;time&lt;/span&gt;) =&amp;gt; { \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Promise resolved for &lt;span class=&quot;hljs-subst&quot;&gt;${time}&lt;/span&gt;s`&lt;/span&gt;)\n    }, time)\n  })\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myPromiseArray = [&lt;span class=&quot;hljs-title function_&quot;&gt;getPromise&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;), &lt;span class=&quot;hljs-title function_&quot;&gt;getPromise&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;), &lt;span class=&quot;hljs-title function_&quot;&gt;getPromise&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;)]\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Before For Each Loop&apos;&lt;/span&gt;)\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// AVOID USING THIS&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// myPromiseArray.forEach(async (element, index) =&amp;gt; {&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;//   let result = await element;&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;//   console.log(result);&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// })&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// This works well&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; myPromiseArray) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; element;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result)\n  }\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;After For Each Loop&apos;&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you are little old school like me, you could simply use the classic for loop, that works too :)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;time&lt;/span&gt;) =&amp;gt; { \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Promise resolved for &lt;span class=&quot;hljs-subst&quot;&gt;${time}&lt;/span&gt;s`&lt;/span&gt;)\n    }, time)\n  })\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myPromiseArray = [&lt;span class=&quot;hljs-title function_&quot;&gt;getPromise&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;), &lt;span class=&quot;hljs-title function_&quot;&gt;getPromise&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;), &lt;span class=&quot;hljs-title function_&quot;&gt;getPromise&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;)]\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Before For Each Loop&apos;&lt;/span&gt;)\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// AVOID USING THIS&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// myPromiseArray.forEach(async (element, index) =&amp;gt; {&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;//   let result = await element;&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;//   console.log(result);&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// })&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// This works well too - the classic for loop :)&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; myPromiseArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; myPromiseArray[i];\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result);\n  }\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;After For Each Loop&apos;&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I hope this helps someone, good day, cheers!&lt;/p&gt;\n    ","\n&lt;p&gt;@Bergi has already gave the answer on how to handle this particular case properly. I&apos;ll not duplicate here.&lt;/p&gt;\n&lt;p&gt;I&apos;d like to address the difference between using &lt;code&gt;forEach&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; loop when it comes to &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;how &lt;code&gt;forEach&lt;/code&gt; works&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Let&apos;s look at how &lt;code&gt;forEach&lt;/code&gt; works. According to &lt;a href=&quot;https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.foreach&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript Specification&lt;/a&gt;, MDN provides an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#polyfill&quot; rel=&quot;noreferrer&quot;&gt;implementation&lt;/a&gt; which can be used as a polyfill. I copy it and paste here with comments removal.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;forEach&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;callback, thisArg&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Array.prototype.forEach called on null or undefined&apos;&lt;/span&gt;); }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; T, k;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; O = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; len = O.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; callback !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;function&quot;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeError&lt;/span&gt;(callback + &lt;span class=&quot;hljs-string&quot;&gt;&apos; is not a function&apos;&lt;/span&gt;); }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) { T = thisArg; }\n  k = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (k &amp;lt; len) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; kValue;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; O) {\n      kValue = O[k];\n      callback.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(T, kValue, k, O); &lt;span class=&quot;hljs-comment&quot;&gt;// pay attention to this line&lt;/span&gt;\n    }\n    k++;\n  }\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Let&apos;s back to your code, let&apos;s extract the callback as a function.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So, basically &lt;code&gt;callback&lt;/code&gt; returns a promise since it&apos;s declared with &lt;code&gt;async&lt;/code&gt;. Inside &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;callback&lt;/code&gt; is just called in a normal way, if the callback itself returns a promise, the javascript engine will not wait it to be resolved or rejected. Instead, it puts the &lt;code&gt;promise&lt;/code&gt; in a job queue, and continues executing the loop.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;How about &lt;code&gt;await fs.readFile(file, &apos;utf8&apos;)&lt;/code&gt; inside the &lt;code&gt;callback&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Basically, when your async &lt;code&gt;callback&lt;/code&gt; gets the chance to be executed, the js engine will pause until &lt;code&gt;fs.readFile(file, &apos;utf8&apos;)&lt;/code&gt; to be resolved or rejected, and resume execution of the async function after fulfillment. So the &lt;code&gt;contents&lt;/code&gt; variable store the actual result from &lt;code&gt;fs.readFile&lt;/code&gt;, not a &lt;code&gt;promise&lt;/code&gt;. So, &lt;code&gt;console.log(contents)&lt;/code&gt; logs out the file content not a &lt;code&gt;Promise&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Why &lt;code&gt;for ... of&lt;/code&gt; works?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;when we write a generic &lt;code&gt;for of&lt;/code&gt; loop, we gain more control than &lt;code&gt;forEach&lt;/code&gt;. Let&apos;s refactor &lt;code&gt;printFiles&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Assume this works fine&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; files) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents)\n    &lt;span class=&quot;hljs-comment&quot;&gt;// or await callback(file)&lt;/span&gt;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When evaluate &lt;code&gt;for&lt;/code&gt; loop, we have &lt;code&gt;await&lt;/code&gt; promise inside the &lt;code&gt;async&lt;/code&gt; function, the execution will pause until the &lt;code&gt;await&lt;/code&gt; promise is settled. So, you can think of that the files are read one by one in a determined order.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Execute sequentially&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Sometimes, we really need the the async functions to be executed in a sequential order. For example, I have a few new records stored in an array to be saved to database, and I want them to be saved in sequential order which means first record in array should be saved first, then second, until last one is saved.&lt;/p&gt;\n&lt;p&gt;Here is an example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; records = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;saveRecord&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;record&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolved, rejected&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolved&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`record &lt;span class=&quot;hljs-subst&quot;&gt;${record}&lt;/span&gt; saved`&lt;/span&gt;)\n    }, &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;)\n  });\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forEachSaveRecords&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;records&lt;/span&gt;) {\n  records.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (record) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; res = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;saveRecord&lt;/span&gt;(record);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(res);\n  })\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forofSaveRecords&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;records&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; record &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; records) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; res = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;saveRecord&lt;/span&gt;(record);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(res);\n  }\n}\n(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;=== for of save records ===&quot;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forofSaveRecords&lt;/span&gt;(records)\n  \n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;=== forEach save records ===&quot;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forEachSaveRecords&lt;/span&gt;(records)\n})()&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;I use &lt;code&gt;setTimeout&lt;/code&gt; to simulate the process of saving a record to database - it&apos;s asynchronous and cost a random time. Using &lt;code&gt;forEach&lt;/code&gt;, the records are saved in an undetermined order, but using &lt;code&gt;for..of&lt;/code&gt;, they are saved sequentially.&lt;/p&gt;\n    ","\n&lt;p&gt;This solution is also memory-optimized so you can run it on 10,000&apos;s of data items and requests. Some of the other solutions here will crash the server on large data sets.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;In TypeScript:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; asyncForEach&amp;lt;T&amp;gt;(&lt;span class=&quot;hljs-attr&quot;&gt;array&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;&amp;lt;T&amp;gt;, &lt;span class=&quot;hljs-attr&quot;&gt;callback&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item: T, index: number&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&amp;gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; index &amp;lt; array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; index++) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(array[index], index);\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;How to use?&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asyncForEach&lt;/span&gt;(receipts, &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (eachItem) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; ...\n})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;files.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (file) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;)\n})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The issue is, the promise returned by the iteration function is ignored by &lt;code&gt;forEach()&lt;/code&gt;. As a result, all the &lt;code&gt;fs.readFile&lt;/code&gt; functions\nare invoked in the same round of the event loop, which means they are started in parallel, not in sequential, and the execution continues immediately after invoking forEach(), without\nwaiting for all the &lt;code&gt;fs.readFile&lt;/code&gt; operations to complete. Since forEach does not wait for each promise to resolve, the loop actually finishes iterating before promises are resolved.  You may end up trying to access values that are not available yet.&lt;/p&gt;\n    ","\n&lt;p&gt;In addition to &lt;a href=&quot;https://stackoverflow.com/a/37576787/877703&quot;&gt;@Bergis answer&lt;/a&gt;, Id like to offer a third alternative. It&apos;s very similar to @Bergis 2nd example, but instead of awaiting each &lt;code&gt;readFile&lt;/code&gt; individually, you create an array of promises, each which you await at the end.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; fs &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;fs-promise&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; promises = files.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt;) =&amp;gt;&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;))\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(promises)\n\n  contents.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the function passed to &lt;code&gt;.map()&lt;/code&gt; does not need to be &lt;code&gt;async&lt;/code&gt;, since &lt;code&gt;fs.readFile&lt;/code&gt; returns a Promise object anyway. Therefore &lt;code&gt;promises&lt;/code&gt; is an array of Promise objects, which can be sent to &lt;code&gt;Promise.all()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In @Bergis answer, the console may log file contents in the order theyre read. For example if a really small file finishes reading before a really large file, it will be logged first, even if the small file comes &lt;em&gt;after&lt;/em&gt; the large file in the &lt;code&gt;files&lt;/code&gt; array. However, in my method above, you are guaranteed the console will log the files in the same order as the provided array.&lt;/p&gt;\n    ","\n&lt;p&gt;A simple drop-in solution for replacing a &lt;code&gt;forEach()&lt;/code&gt; await loop that is not working is replacing &lt;code&gt;forEach&lt;/code&gt; with &lt;code&gt;map&lt;/code&gt; and adding &lt;code&gt;Promise.all(&lt;/code&gt; to the beginning.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;await y.forEach(async (x) =&amp;gt; {&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;to&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;await Promise.all(y.map(async (x) =&amp;gt; {&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;An extra &lt;code&gt;)&lt;/code&gt; is needed at the end.&lt;/p&gt;\n    ","\n&lt;p&gt;it&apos;s pretty painless to pop a couple methods in a file that will handle asynchronous data in a serialized order and give a more conventional flavour to your code.  For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;exports&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;each&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (items, fn) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (items &amp;amp;&amp;amp; items.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(\n        items.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (item) =&amp;gt; {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(item);\n        }));\n    }\n  };\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (items, fn, initialValue) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; self.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(\n      items, &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (item) =&amp;gt; {\n        initialValue = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(initialValue, item);\n      });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; initialValue;\n  };\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;now, assuming that&apos;s saved at &apos;./myAsync.js&apos; you can do something similar to the below in an adjacent file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;...\n&lt;span class=&quot;hljs-comment&quot;&gt;/* your server setup here */&lt;/span&gt;\n...\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyAsync&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;./myAsync&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Cat&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;./models/Cat&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Doje&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;./models/Doje&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;example&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myAsync = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyAsync&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; doje = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Doje&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;findOne&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Doje&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;noises&lt;/span&gt;: [] }).&lt;span class=&quot;hljs-title function_&quot;&gt;save&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cleanParams = [];\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// FOR EACH EXAMPLE&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; myAsync.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;bork&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;concern&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;heck&apos;&lt;/span&gt;], \n    &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (elem) =&amp;gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (elem !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;heck&apos;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; doje.&lt;span class=&quot;hljs-title function_&quot;&gt;update&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;$push&lt;/span&gt;: { &lt;span class=&quot;hljs-string&quot;&gt;&apos;noises&apos;&lt;/span&gt;: elem }});\n      }\n    });\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cat = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Cat&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;findOne&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Nyan&apos;&lt;/span&gt; });\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// REDUCE EXAMPLE&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; friendsOfNyanCat = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; myAsync.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(cat.&lt;span class=&quot;hljs-property&quot;&gt;friends&lt;/span&gt;,\n    &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (catArray, friendId) =&amp;gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; friend = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Friend&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;findById&lt;/span&gt;(friendId);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (friend.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;Long cat&apos;&lt;/span&gt;) {\n        catArray.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(friend.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);\n      }\n    }, []);\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Assuming Long Cat was a friend of Nyan Cat...&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(friendsOfNyanCat.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === (cat.&lt;span class=&quot;hljs-property&quot;&gt;friends&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/37576787/3241111&quot;&gt;Bergi&apos;s solution&lt;/a&gt; works nicely when &lt;code&gt;fs&lt;/code&gt; is promise based.\nYou can use &lt;code&gt;bluebird&lt;/code&gt;, &lt;code&gt;fs-extra&lt;/code&gt; or &lt;code&gt;fs-promise&lt;/code&gt; for this.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;However, solution for&lt;/strong&gt; node&apos;s native &lt;code&gt;fs&lt;/code&gt; libary is as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(filePaths\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; filePath =&amp;gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fileContents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getAssetFromCache&lt;/span&gt;(filePath, &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// 1. Wrap with Promise    &lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// 2. Return the result of the Promise&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res, rej&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n          fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(filePath, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, data&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data) {\n              &lt;span class=&quot;hljs-title function_&quot;&gt;res&lt;/span&gt;(data);\n            }\n          });\n        });\n      });\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fileContents;\n    }));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;\n&lt;code&gt;require(&apos;fs&apos;)&lt;/code&gt; compulsorily takes function as 3rd arguments, otherwise throws error:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;TypeError&lt;/span&gt; [&lt;span class=&quot;hljs-variable constant_&quot;&gt;ERR_INVALID_CALLBACK&lt;/span&gt;]: &lt;span class=&quot;hljs-title class_&quot;&gt;Callback&lt;/span&gt; must be a &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It is not good to call an asynchronous method from a loop. This is because each loop iteration will be delayed until the entire asynchronous operation completes. That is not very performant. It also averts the advantages of parallelization benefits of &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;A better solution would be to create all promises at once, then get access to the results using &lt;code&gt;Promise.all()&lt;/code&gt;. Otherwise, each successive operation will not start until the previous one has completed.&lt;/p&gt;\n&lt;p&gt;Consequently, the code may be refactored as follows;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; results = [];\n  files.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    results.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;));\n  });\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(results);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One important &lt;strong&gt;caveat&lt;/strong&gt; is: The &lt;code&gt;await + for .. of&lt;/code&gt; method and the &lt;code&gt;forEach + async&lt;/code&gt; way actually have different effect. &lt;/p&gt;\n\n&lt;p&gt;Having &lt;code&gt;await&lt;/code&gt; inside a real &lt;code&gt;for&lt;/code&gt; loop will make sure all async calls are executed one by one. And the &lt;code&gt;forEach + async&lt;/code&gt; way will fire off all promises at the same time, which is faster but sometimes overwhelmed(&lt;strong&gt;if you do some DB query or visit some web services with volume restrictions&lt;/strong&gt; and do not want to fire 100,000 calls at a time). &lt;/p&gt;\n\n&lt;p&gt;You can also use &lt;code&gt;reduce + promise&lt;/code&gt;(less elegant) if you do not use &lt;code&gt;async/await&lt;/code&gt; and want to make sure files are read &lt;strong&gt;one after another&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;files.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;lastPromise, file&lt;/span&gt;) =&amp;gt;&lt;/span&gt; \n lastPromise.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; \n   fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;)\n ), &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;()\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or you can create a forEachAsync to help but basically use the same for loop underlying.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;forEachAsync&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cb&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(x);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Both the solutions above work, however, Antonio&apos;s does the job with less code, here is how it helped me resolve data from my database, from several different child refs and then pushing them all into an array and resolving it in a promise after all is done:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;PacksList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;pack&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fireBaseRef.&lt;span class=&quot;hljs-title function_&quot;&gt;child&lt;/span&gt;(pack.&lt;span class=&quot;hljs-property&quot;&gt;folderPath&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;once&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;snap&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n        snap.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;childSnap&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; file = childSnap.&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;()\n            file.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; = childSnap.&lt;span class=&quot;hljs-property&quot;&gt;key&lt;/span&gt;;\n            allItems.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;( file )\n        })\n    })\n})).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;store.&lt;span class=&quot;hljs-title function_&quot;&gt;dispatch&lt;/span&gt;( actions.&lt;span class=&quot;hljs-title function_&quot;&gt;allMockupItems&lt;/span&gt;(allItems)))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just adding to the original answer&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The parallel reading syntax in the original answer is sometimes confusing and difficult to read, maybe we can write it in a different approach&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fileReadPromises = [];\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;readAndLogFile&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; filePath =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&quot;utf8&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; contents;\n  };\n\n  files.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    fileReadPromises.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;readAndLogFile&lt;/span&gt;(file));\n  });\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(fileReadPromises);\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;For sequential operation, not just &lt;strong&gt;for...of&lt;/strong&gt;, normal for loop will also work&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; files.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; file = files[i];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&quot;utf8&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents);\n  }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Like @Bergi&apos;s response, but with one difference.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Promise.all&lt;/code&gt; rejects all promises if one gets rejected.&lt;/p&gt;\n\n&lt;p&gt;So, use a recursion.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; readFilesQueue = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (files, index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(files[index], &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; files.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;lt;= index\n        ? &lt;span class=&quot;hljs-title function_&quot;&gt;readFilesQueue&lt;/span&gt;(files, ++index)\n        : files\n\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; printFiles &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; printContents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;readFilesQueue&lt;/span&gt;(files)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; printContents\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;readFilesQueue&lt;/code&gt; is outside of &lt;code&gt;printFiles&lt;/code&gt; cause the side effect* introduced by &lt;code&gt;console.log&lt;/code&gt;, it&apos;s better to mock, test, and or spy so, it&apos;s not cool to have a function that returns the content(sidenote).&lt;/p&gt;\n\n&lt;p&gt;Therefore, the code can simply be designed by that: three separated functions that are &quot;pure&quot;** and introduce no side effects, process the entire list and can easily be modified to handle failed cases.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilesPath&lt;/span&gt;()\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFile&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; content = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(content)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; readFiles = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;files, index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFile&lt;/span&gt;(files[index])\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; files.&lt;span class=&quot;hljs-property&quot;&gt;lengh&lt;/span&gt; &amp;lt;= index\n        ? &lt;span class=&quot;hljs-title function_&quot;&gt;readFiles&lt;/span&gt;(files, ++index)\n        : files\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;readFiles&lt;/span&gt;(files)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Future edit/current state&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Node supports top-level await (this doesn&apos;t have a plugin yet, won&apos;t have and can be enabled via harmony flags), it&apos;s cool but doesn&apos;t solve one problem (strategically I work only on LTS versions). How to get the files?&lt;/p&gt;\n\n&lt;p&gt;Using composition. Given the code, causes to me a sensation that this is inside a module, so, should have a function to do it. If not, you should use an IIFE to wrap the role code into an async function creating simple module that&apos;s do all for you, or you can go with the right way, there is, composition.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// more complex version with IIFE to a single module&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (files) =&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;readFiles&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;files&lt;/span&gt;())(getFilesPath)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the name of variable changes due to semantics. You pass a functor (a function that can be invoked by another function) and recieves a pointer on memory that contains the initial block of logic of the application.&lt;/p&gt;\n\n&lt;p&gt;But, if&apos;s not a module and you need to export the logic?&lt;/p&gt;\n\n&lt;p&gt;Wrap the functions in a async function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;readFilesQueue&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ... to code goes here&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or change the names of variables, whatever...&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;code&gt;*&lt;/code&gt; by side effect menans any colacteral effect of application  that can change the statate/behaviour or introuce bugs in the application, like IO.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;**&lt;/code&gt; by &quot;pure&quot;, it&apos;s in apostrophe since the functions it&apos;s not pure and the code can be converged to a pure version, when there&apos;s no console output, only data manipulations.&lt;/p&gt;\n\n&lt;p&gt;Aside this, to be pure, you&apos;ll need to work with monads that handles the side effect, that are error prone, and treats that error separately of the application. &lt;/p&gt;\n    ","\n&lt;p&gt;Today I came across multiple solutions for this. Running the async await functions in the forEach Loop. By building the wrapper around we can make this happen.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.creospiders.com/2019/11/api-call-or-async-await-not-working-in.html&quot; rel=&quot;noreferrer&quot;&gt;More detailed explanation on how it works internally, for the native forEach and why it is not able to make a async function call and other details on the various methods are provided in link here&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The multiple ways through which it can be done and they are as follows,&lt;/p&gt;\n\n&lt;p&gt;Method 1 : Using the wrapper.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; (&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;{\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n       items.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (item,index)=&amp;gt;{\n           &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n               &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someAPICall&lt;/span&gt;();\n           } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n              &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(e)\n           }\n           count++;\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(index === items.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n             &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Done&apos;&lt;/span&gt;)\n           }\n         });\n     });\n    })();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Method 2: Using the same as a generic function of Array.prototype&lt;/p&gt;\n\n&lt;p&gt;Array.prototype.forEachAsync.js&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;forEachAsync&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;forEachAsync&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;async&lt;/span&gt;(item,index,array)=&amp;gt;{\n            &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(item,index,array);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(index === array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n                &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;done&apos;&lt;/span&gt;);\n            }\n        })\n      });\n    };\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;./Array.prototype.forEachAsync&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hello&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;) =&amp;gt; {\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Method 1 - Using the Array.prototype.forEach &lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; items.&lt;span class=&quot;hljs-title function_&quot;&gt;forEachAsync&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {\n         &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n               &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someAPICall&lt;/span&gt;();\n           } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n              &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(e)\n           }\n        count++;\n    });\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;count = &quot;&lt;/span&gt; + count);\n}\n\nsomeAPICall = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;done&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// or reject(&apos;error&apos;)&lt;/span&gt;\n        }, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;);\n    })\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;hello&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;// hello([]) empty array is also be handled by default&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Method 3 :&lt;/p&gt;\n\n&lt;p&gt;Using Promise.all&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(items.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (item) =&amp;gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someAPICall&lt;/span&gt;();\n        count++;\n    }));\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;count = &quot;&lt;/span&gt; + count);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Method 4 : Traditional for loop or modern for loop&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Method 4 - using for loop directly&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 1. Using the modern for(.. in..) loop&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items){\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someAPICall&lt;/span&gt;();\n        count++;\n    }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//2. Using the traditional for loop &lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;items.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;i++){\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someAPICall&lt;/span&gt;();\n        count++;\n    }\n\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;count = &quot;&lt;/span&gt; + count);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;code&gt;Array.prototype.forEach&lt;/code&gt;, but async/await is not so compatible. This is because the promise returned from an async callback expects to be resolved, but &lt;code&gt;Array.prototype.forEach&lt;/code&gt; does not resolve any promises from the execution of its callback. So then, you can use forEach, but you&apos;ll have to handle the promise resolution yourself.&lt;/p&gt;\n\n&lt;p&gt;Here is a way to read and print each file in series using &lt;code&gt;Array.prototype.forEach&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFilesInSeries&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;()\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; promiseChain = &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;()\n  files.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    promiseChain = promiseChain.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n      fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;contents&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents)\n      })\n    })\n  })\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; promiseChain\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is a way (still using &lt;code&gt;Array.prototype.forEach&lt;/code&gt;) to print the contents of files in parallel&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFilesInParallel&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;()\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; promises = []\n  files.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    promises.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(\n      fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;contents&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents)\n      })\n    )\n  })\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(promises)\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Currently the Array.forEach prototype property doesn&apos;t support async operations, but we can create our own poly-fill to meet our needs.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Example of asyncForEach Array poly-fill for NodeJs&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// file: asyncForEach.js&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Define asynForEach function &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asyncForEach&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iteratorFunction&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; indexer = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;iteratorFunction&lt;/span&gt;(data, indexer)\n    indexer++\n  }\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// Append it as an Array prototype property&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;asyncForEach&lt;/span&gt; = asyncForEach\n&lt;span class=&quot;hljs-variable language_&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;exports&lt;/span&gt; = {&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And that&apos;s it! You now have an async forEach method available on any arrays that are defined after these to operations.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s test it...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Nodejs style&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// file: someOtherFile.js&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; readline = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;readline&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;./asyncForEach&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;Array&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; log = &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Create a stream interface&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createReader&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;options={prompt: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;gt;&apos;&lt;/span&gt;}&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; readline.&lt;span class=&quot;hljs-title function_&quot;&gt;createInterface&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;input&lt;/span&gt;: process.&lt;span class=&quot;hljs-property&quot;&gt;stdin&lt;/span&gt;\n    ,&lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: process.&lt;span class=&quot;hljs-property&quot;&gt;stdout&lt;/span&gt;\n    ,&lt;span class=&quot;hljs-attr&quot;&gt;prompt&lt;/span&gt;: options.&lt;span class=&quot;hljs-property&quot;&gt;prompt&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; ? options.&lt;span class=&quot;hljs-property&quot;&gt;prompt&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;gt;&apos;&lt;/span&gt;\n  })\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// Create a cli stream reader&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUserIn&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;question, options={prompt:&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;gt;&apos;&lt;/span&gt;}&lt;/span&gt;){\n  &lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(question)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; reader = &lt;span class=&quot;hljs-title function_&quot;&gt;createReader&lt;/span&gt;(options)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n    reader.&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;line&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;answer&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n      process.&lt;span class=&quot;hljs-property&quot;&gt;stdout&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;cursorTo&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n      process.&lt;span class=&quot;hljs-property&quot;&gt;stdout&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;clearScreenDown&lt;/span&gt;()\n      reader.&lt;span class=&quot;hljs-title function_&quot;&gt;close&lt;/span&gt;()\n      &lt;span class=&quot;hljs-title function_&quot;&gt;res&lt;/span&gt;(answer)\n    })\n  })\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; questions = [\n  &lt;span class=&quot;hljs-string&quot;&gt;`What&apos;s your name`&lt;/span&gt;\n  ,&lt;span class=&quot;hljs-string&quot;&gt;`What&apos;s your favorite programming language`&lt;/span&gt;\n  ,&lt;span class=&quot;hljs-string&quot;&gt;`What&apos;s your favorite async function`&lt;/span&gt;\n]\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; responses = {}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getResponses&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n&lt;span class=&quot;hljs-comment&quot;&gt;// Notice we have to prepend await before calling the async Array function&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// in order for it to function as expected&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; questions.&lt;span class=&quot;hljs-title function_&quot;&gt;asyncForEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;question, index&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; answer = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUserIn&lt;/span&gt;(question)\n    responses[question] = answer\n  })\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getResponses&lt;/span&gt;()\n  &lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(responses)\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;()\n&lt;span class=&quot;hljs-comment&quot;&gt;// Should prompt user for an answer to each question and then &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// log each question and answer as an object to the terminal&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We could do the same for some of the other array functions like map...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asyncMap&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iteratorFunction&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newMap = []\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; indexer = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;){\n    newMap[indexer] = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;iteratorFunction&lt;/span&gt;(data, indexer, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)\n    indexer++\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newMap\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;asyncMap&lt;/span&gt; = asyncMap\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... and so on :)&lt;/p&gt;\n\n&lt;p&gt;Some things to note:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Your iteratorFunction must be an async function or promise&lt;/li&gt;\n&lt;li&gt;Any arrays created before &lt;code&gt;Array.prototype.&amp;lt;yourAsyncFunc&amp;gt; = &amp;lt;yourAsyncFunc&amp;gt;&lt;/code&gt; will not have this feature available&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;To see how that can go wrong, print console.log at the end of the method.&lt;/p&gt;\n\n&lt;p&gt;Things that can go wrong in general:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Arbitrary order.&lt;/li&gt;\n&lt;li&gt;printFiles can finish running before printing files.&lt;/li&gt;\n&lt;li&gt;Poor performance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;These are not always wrong but frequently are in standard use cases.&lt;/p&gt;\n\n&lt;p&gt;Generally, using forEach will result in all but the last. It&apos;ll call each function without awaiting for the function meaning it tells all of the functions to start then finishes without waiting for the functions to finish.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; fs &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;fs-promise&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = (&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt; =&amp;gt;&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;))\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; files)\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; file)\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is an example in native JS that will preserve order, prevent the function from returning prematurely and in theory retain optimal performance.&lt;/p&gt;\n\n&lt;p&gt;This will:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Initiate all of the file reads to happen in parallel.&lt;/li&gt;\n&lt;li&gt;Preserve the order via the use of map to map file names to promises to wait for.&lt;/li&gt;\n&lt;li&gt;Wait for each promise in the order defined by the array.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;With this solution the first file will be shown as soon as it is available without having to wait for the others to be available first.&lt;/p&gt;\n\n&lt;p&gt;It will also be loading all files at the same time rather than having to wait for the first to finish before the second file read can be started.&lt;/p&gt;\n\n&lt;p&gt;The only draw back of this and the original version is that if multiple reads are started at once then it&apos;s more difficult to handle errors on account of having more errors that can happen at a time.&lt;/p&gt;\n\n&lt;p&gt;With versions that read a file at a time then then will stop on a failure without wasting time trying to read any more files. Even with an elaborate cancellation system it can be hard to avoid it failing on the first file but reading most of the other files already as well.&lt;/p&gt;\n\n&lt;p&gt;Performance is not always predictable. While many systems will be faster with parallel file reads some will prefer sequential. Some are dynamic and may shift under load, optimisations that offer latency do not always yield good throughput under heavy contention.&lt;/p&gt;\n\n&lt;p&gt;There is also no error handling in that example. If something requires them to either all be successfully shown or not at all it won&apos;t do that.&lt;/p&gt;\n\n&lt;p&gt;In depth experimentation is recommended with console.log at each stage and fake file read solutions (random delay instead). Although many solutions appear to do the same in simple cases all have subtle differences that take some extra scrutiny to squeeze out.&lt;/p&gt;\n\n&lt;p&gt;Use this mock to help tell the difference between solutions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; start = +&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mock&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n      &lt;span class=&quot;hljs-attr&quot;&gt;fs&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;readFile&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Instead of this just make three files and try each timing arrangement.&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// IE, all same, [100, 200, 300], [300, 200, 100], [100, 300, 200], etc.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; time = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;4900&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Read of &lt;span class=&quot;hljs-subst&quot;&gt;${file}&lt;/span&gt; started at &lt;span class=&quot;hljs-subst&quot;&gt;${&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;() - start}&lt;/span&gt; and will take &lt;span class=&quot;hljs-subst&quot;&gt;${time}&lt;/span&gt;ms.`&lt;/span&gt;)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n          &lt;span class=&quot;hljs-comment&quot;&gt;// Bonus material here if random reject instead.&lt;/span&gt;\n          &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Read of &lt;span class=&quot;hljs-subst&quot;&gt;${file}&lt;/span&gt; finished, resolving promise at &lt;span class=&quot;hljs-subst&quot;&gt;${&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;() - start}&lt;/span&gt;.`&lt;/span&gt;);\n          &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(file);\n        }, time);\n      })},\n      &lt;span class=&quot;hljs-attr&quot;&gt;console&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;log&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Console Log of &lt;span class=&quot;hljs-subst&quot;&gt;${file}&lt;/span&gt; finished at &lt;span class=&quot;hljs-subst&quot;&gt;${&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;() - start}&lt;/span&gt;.`&lt;/span&gt;)},\n      &lt;span class=&quot;hljs-attr&quot;&gt;getFilePaths&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;]\n    };\n  };\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; printFiles = (&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{fs, &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;, getFilePaths}&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = (&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt; =&amp;gt;&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;));\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; files)\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; file);\n    };\n  })(&lt;span class=&quot;hljs-title function_&quot;&gt;mock&lt;/span&gt;());\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Running at &lt;span class=&quot;hljs-subst&quot;&gt;${&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;() - start}&lt;/span&gt;`&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt;();\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`Finished running at &lt;span class=&quot;hljs-subst&quot;&gt;${&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;() - start}&lt;/span&gt;`&lt;/span&gt;);\n})();\n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using Task, futurize, and a traversable List, you can simply do&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFiles&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-title class_&quot;&gt;List&lt;/span&gt;(files).&lt;span class=&quot;hljs-title function_&quot;&gt;traverse&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;Task&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;of&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;( f, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;))\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;fork&lt;/span&gt;( &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is how you&apos;d set this up&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; fs &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;fs&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { futurize } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;futurize&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;data.task&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;hljs-title class_&quot;&gt;List&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;immutable-ext&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; future = &lt;span class=&quot;hljs-title function_&quot;&gt;futurizeP&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Task&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; readFile = &lt;span class=&quot;hljs-title function_&quot;&gt;future&lt;/span&gt;(fs.&lt;span class=&quot;hljs-property&quot;&gt;readFile&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another way to have structured the desired code would be&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt; = files =&amp;gt; \n  &lt;span class=&quot;hljs-title class_&quot;&gt;List&lt;/span&gt;(files).&lt;span class=&quot;hljs-title function_&quot;&gt;traverse&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;Task&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;of&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;( fn, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;))\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;fork&lt;/span&gt;( &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or perhaps even more functionally oriented&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 90% of encodings are utf-8, making that use case super easy is prudent&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// handy-library.js&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt; = f =&amp;gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;future&lt;/span&gt;(fs.&lt;span class=&quot;hljs-property&quot;&gt;readFile&lt;/span&gt;)( f, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf-8&apos;&lt;/span&gt; )\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arrayToTaskList&lt;/span&gt; = list =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;taskFn&lt;/span&gt; =&amp;gt;&lt;/span&gt; \n  &lt;span class=&quot;hljs-title class_&quot;&gt;List&lt;/span&gt;(files).&lt;span class=&quot;hljs-title function_&quot;&gt;traverse&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;Task&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;of&lt;/span&gt;, taskFn ) \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;readFiles&lt;/span&gt; = files =&amp;gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;arrayToTaskList&lt;/span&gt;( files, readFile )\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt; = files =&amp;gt; \n  &lt;span class=&quot;hljs-title function_&quot;&gt;readFiles&lt;/span&gt;(files).&lt;span class=&quot;hljs-title function_&quot;&gt;fork&lt;/span&gt;( &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then from the parent function&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;/* awesome code with side-effects before */&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFiles&lt;/span&gt;() );\n  &lt;span class=&quot;hljs-comment&quot;&gt;/* awesome code with side-effects after */&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you really wanted more flexibility in encoding, you could just do this (for fun, I&apos;m using the proposed &lt;a href=&quot;https://github.com/tc39/proposal-pipeline-operator&quot; rel=&quot;nofollow noreferrer&quot;&gt;Pipe Forward operator&lt;/a&gt; )&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { curry, flip } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ramda&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; readFile = fs.&lt;span class=&quot;hljs-property&quot;&gt;readFile&lt;/span&gt; \n  |&amp;gt; future,\n  |&amp;gt; curry,\n  |&amp;gt; flip\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; readFileUtf8 = &lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;PS - I didn&apos;t try this code on the console, might have some typos... &quot;straight freestyle, off the top of the dome!&quot; as the 90s kids would say. :-p&lt;/p&gt;\n    ","\n&lt;h3&gt;Here is a great example for using async in forEach loop.&lt;/h3&gt;\n&lt;p&gt;&lt;strong&gt;Write your own asyncForEach&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asyncForEach&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array, callback&lt;/span&gt;) {  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; index &amp;lt; array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; index++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(array[index], index, array)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;You can use it like this&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asyncForEach&lt;/span&gt;(array, &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item,index,array&lt;/span&gt;){\n     &lt;span class=&quot;hljs-comment&quot;&gt;//await here&lt;/span&gt;\n   }\n)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The OP&apos;s orignal question&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Are there any issues with using async/await in a forEach loop? ...&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;was covered to an extent in @Bergi&apos;s &lt;a href=&quot;https://stackoverflow.com/a/37576787/4376643&quot;&gt;selected answer&lt;/a&gt;,\nwhich showed how to process in serial and in parallel.  However there are other issues noted with parallelism -&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Order -- &lt;a href=&quot;https://stackoverflow.com/a/48939529/4376643&quot;&gt;@chharvey&lt;/a&gt; notes that -&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;For example if a really small file finishes reading before a really large file, it will be logged first, even if the small file comes after the large file in the files array.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Possibly opening too many files at once -- A comment by Bergi under another &lt;a href=&quot;https://stackoverflow.com/a/66919921/4376643&quot;&gt;answer&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;It is also not good to open thousands of files at once to read them concurrently. One always has to do an assessment whether a sequential, parallel, or mixed approach is better.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So let&apos;s address these issues showing actual code that is brief and concise, and does &lt;em&gt;not&lt;/em&gt; use third party libraries.  Something easily cut, paste, and modifiable.&lt;/p&gt;\n&lt;h3&gt;Reading in parallel (all at once), printing in serial (as early as possible per file).&lt;/h3&gt;\n&lt;p&gt;The easiest improvement is perform full parallelism as in &lt;a href=&quot;https://stackoverflow.com/a/37576787/4376643&quot;&gt;@Bergi&apos;s answer&lt;/a&gt;, but make a small change so that each file is &lt;em&gt;printed as soon as possible while preserving order&lt;/em&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; readProms = (&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n    fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&quot;utf8&quot;&lt;/span&gt;)\n  );\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;([\n    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(readProms),                      &lt;span class=&quot;hljs-comment&quot;&gt;// branch 1&lt;/span&gt;\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {                                     &lt;span class=&quot;hljs-comment&quot;&gt;// branch 2&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; readProms) &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; p);\n    })(),\n  ]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Above, two seperate branches are run concurrently.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;branch 1: Reading in parallel, all at once,&lt;/li&gt;\n&lt;li&gt;branch 2: Reading in serial to force order, but waiting no longer than necessary&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;That was easy.&lt;/p&gt;\n&lt;h3&gt;Reading in parallel with a concurrency limit, printing in serial (as early as possible per file).&lt;/h3&gt;\n&lt;p&gt;A &quot;concurrecy limit&quot; means that no more than &lt;code&gt;N&lt;/code&gt; files will ever being read at the same time.&lt;br&gt;\nLike a store that only allows in so many customers at a time (at least during COVID).&lt;/p&gt;\n&lt;p&gt;First a helper function is introduced -&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bootablePromise&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;kickMe: () =&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Promise&lt;/span&gt;&amp;lt;any&amp;gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;resolve&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value: unknown&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {};\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; promise = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { resolve = res; });\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;boot&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; { &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;kickMe&lt;/span&gt;()); };\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; { promise, boot };\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The funciton &lt;code&gt;bootablePromise(kickMe:() =&amp;gt; Promise&amp;lt;any&amp;gt;)&lt;/code&gt; takes an\nfunction &lt;code&gt;kickMe&lt;/code&gt; as an argumment to start a task (in our case &lt;code&gt;readFile&lt;/code&gt;).  But it is not started immediately.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;bootablePromise&lt;/code&gt; returns a couple of properties&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;promise&lt;/code&gt; of type &lt;code&gt;Promise&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;boot&lt;/code&gt; of type function &lt;code&gt;()=&amp;gt;void&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;promise&lt;/code&gt; has two stages in life&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Being a promise to start a task&lt;/li&gt;\n&lt;li&gt;Being a promise complete a task it has already started.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;code&gt;promise&lt;/code&gt; transitions from the first to the second state when &lt;code&gt;boot()&lt;/code&gt; is called.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;bootablePromise&lt;/code&gt; is used in &lt;code&gt;printFiles&lt;/code&gt; --&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;boots&lt;/span&gt;: (&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;)[] = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;set&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;&amp;lt;{ &lt;span class=&quot;hljs-attr&quot;&gt;pidx&lt;/span&gt;: number }&amp;gt;&amp;gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;&amp;lt;any&amp;gt;&amp;gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; bootableProms = files.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file,pidx&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { promise, boot } = &lt;span class=&quot;hljs-title function_&quot;&gt;bootablePromise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&quot;utf8&quot;&lt;/span&gt;));\n    boots.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(boot);\n    set.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(promise.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; ({ pidx })));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; promise;\n  });\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; concurLimit = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;([\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {                                       &lt;span class=&quot;hljs-comment&quot;&gt;// branch 1&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; idx = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n      boots.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, concurLimit).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;(); idx++; });\n      &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (idx&amp;lt;boots.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { pidx } = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;race&lt;/span&gt;([...set]);\n        set.&lt;span class=&quot;hljs-title function_&quot;&gt;delete&lt;/span&gt;([...set][pidx]);\n        boots[idx++]();\n      }\n    })(),\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt; {                                       &lt;span class=&quot;hljs-comment&quot;&gt;// branch 2&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; bootableProms) &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; p);\n    })(),\n  ]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As before there are two branches&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;branch 1:   For running and handling concurrecy.&lt;/li&gt;\n&lt;li&gt;branch 2:   For printing&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The difference now is the never more than &lt;code&gt;concurLimit&lt;/code&gt; promises are allowed to run concurrently.&lt;/p&gt;\n&lt;p&gt;The important variables are&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;boots&lt;/code&gt;: The array of functions to call to force it&apos;s corresponding promise to transition. It is used only in branch 1.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;set&lt;/code&gt;: There are promises in a random acces container so that they can be easily removed once fulfilled.  This contianer is used only in branch 1.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;bootableProms&lt;/code&gt;:  These are the smae promises as initally in &lt;code&gt;set&lt;/code&gt;, but it is an array not a set, and the array is never changed.  It is used only in branch 2.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Running with a mock &lt;code&gt;fs.readFile&lt;/code&gt; that takes times as follows (filename vs. time in ms).&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timeTable = {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;600&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;6&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;,\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;test run times such as this are seen, showing the concurrency is working --&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;--&lt;span class=&quot;hljs-number&quot;&gt;0.601&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;--&lt;span class=&quot;hljs-number&quot;&gt;0.502&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;hljs-number&quot;&gt;0.503&lt;/span&gt;--&lt;span class=&quot;hljs-number&quot;&gt;0.904&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;hljs-number&quot;&gt;0.608&lt;/span&gt;--&lt;span class=&quot;hljs-number&quot;&gt;0.908&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;hljs-number&quot;&gt;0.905&lt;/span&gt;--&lt;span class=&quot;hljs-number&quot;&gt;1.105&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]&lt;span class=&quot;hljs-number&quot;&gt;0.905&lt;/span&gt;--&lt;span class=&quot;hljs-number&quot;&gt;1.005&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Available as executable in the &lt;a href=&quot;https://www.typescriptlang.org/play?#code/FAYw9gdgzgLgBDAlgWwKYBUCGAjANquAXjgG9g44AiARkoC44A2ABmYBpyqAmeuAVlYcKlAMy8ALIM6VxvEVOF9eXBVUa9qUgL4BuYKEiw4sTACcY6InAAimGKgB0EMAHcAFAEpgAMwCuEECRIOAATVFwYTDcADzoIX2RsVFMPElNUGF9TCDgYgFoTc3QPAHpNVh0tfUwoAE8AuD8AoJyAcwyAMUR8AAU7AAsoTwYe0zBkRChUAB5YU0QIVoBtAF0APlJOdMzsuAB5bAArVECHAGtUWqGkNCw8VA89KoNoeG8oKzIKGvqQOHTMCEuvg3N5uqgGHMFq02HAHPCzK0oAxMBBaqsPCMxhMprMYPNFhsvhQ4OBXnAkq0FpZiLZ7E5XJ5OBRtlkcpgXJhEPAIKgXHBRuNJjMoYS3G50lBYelDh4iETmSTFRQphYUKgwL4YOK5YQFSSDaTDPBUBAQjSbHZHM53F5DSTJW4AAZLAAkJDB+C0K3dYQiUUp1I8WjyeV94UiblN5uDTseyrgWlhbhuGBw+DgNUzaI8S09qBWcAA-EW4Mx4watBXExxdPofP5AohgtgwGBIvdBTjUG4zogQGcALIQ3K6jZd4XTVG1NaYkgAB2xwroE9x07WbFb7bonj1ADcwIgQlpNhR8PBJWBcHuR2495hcL4R-4zjaIGO4Aej1ZPPLSHWKDJIxFyFKYrF5flVx7CVUCgD8SH+WCrxvKxJR0RNqyA+At3gYhfz1UhEKgZCez7Adh08R5Ez0FkMjZQiQO7WEcOo4Bnh+BomibYJFwWGBgVg8Rf2JLDGnBD5iA5Ll4HafjwT6GBBk8GijXJHDkVyfCNi-EJc0LYhVhU0TVQYABlDJpig6YEPnI9YjgeJEmSRM1g2YgILgcyYEspc1zRVzlM4UScPTVAuwksT8CgBxkEwedxXzNhbJCaJ4MVUSbN81BmLbeAT2IELOyynU-3eBwASBcFQXBWFKC1bwAA5KA8asKHUhx518KB+jcHDWuMDIHEBEI3EY4UHEU00SoItwbLsjCWpU2idhyMaphUqsjONVSQCyAAZFBuSsLgVKko6oKG3BcDcJZFTcDi-i009DXPOB5uIZglpJdqoFwfse3YHb9sOmAPAcbwwFMABRTAQB63r4IpZS3pSgBqVH0M2hMXH6cFcjs6Z2vwRZFLlYl7QyuBkuiRMrDO+ALtMWGeyWeEHFVFZ+oNYK-QyVAQisVUHF5+wbrZjmlmpzmvoNdSljs9GVkC+0qkrDxPCEEl7rqBonvJkkIdMXJRPnOAwG8ClctC8K5SAq9HFwMBWnuzkjvnfqqw1zhpbY-Rtd+Uc-2JemqYJOSoqE+NPfjIA&quot; rel=&quot;nofollow noreferrer&quot;&gt;typescript playground sandbox&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As other answers have mentioned, you&apos;re probably wanting it to be executed in sequence rather in parallel. Ie. run for first file, wait until it&apos;s done, &lt;em&gt;then&lt;/em&gt; once it&apos;s done run for second file. That&apos;s not what will happen.&lt;/p&gt;\n&lt;p&gt;I think it&apos;s important to address &lt;em&gt;why&lt;/em&gt; this doesn&apos;t happen.&lt;/p&gt;\n&lt;p&gt;Think about how &lt;code&gt;forEach&lt;/code&gt; works. I can&apos;t find the source, but I presume it works something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;arr, cb&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(arr[i]);\n  }\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now think about what happens when you do something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(files, &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;logFile&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Inside &lt;code&gt;forEach&lt;/code&gt;&apos;s &lt;code&gt;for&lt;/code&gt; loop we&apos;re calling &lt;code&gt;cb(arr[i])&lt;/code&gt;, which ends up being &lt;code&gt;logFile(file)&lt;/code&gt;. The &lt;code&gt;logFile&lt;/code&gt; function has an &lt;code&gt;await&lt;/code&gt; inside it, so maybe the &lt;code&gt;for&lt;/code&gt; loop will wait for this &lt;code&gt;await&lt;/code&gt; before proceeding to &lt;code&gt;i++&lt;/code&gt;?&lt;/p&gt;\n&lt;p&gt;No, it won&apos;t. Confusingly, that&apos;s not how &lt;code&gt;await&lt;/code&gt; works. From &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await&quot; rel=&quot;nofollow noreferrer&quot;&gt;the docs&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An await splits execution flow, allowing the caller of the async function to resume execution. After the await defers the continuation of the async function, execution of subsequent statements ensues. If this await is the last expression executed by its function execution continues by returning to the function&apos;s caller a pending Promise for completion of the await&apos;s function and resuming execution of that caller.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So if you have the following, the numbers won&apos;t be logged before &lt;code&gt;&quot;b&quot;&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delay&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;ms&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(resolve, ms);\n  });\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;logNumbers&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delay&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delay&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-title function_&quot;&gt;logNumbers&lt;/span&gt;();\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;);\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Circling back to &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt; is like &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;logFile&lt;/code&gt; is like &lt;code&gt;logNumbers&lt;/code&gt;. &lt;code&gt;main&lt;/code&gt; won&apos;t stop just because &lt;code&gt;logNumbers&lt;/code&gt; does some &lt;code&gt;await&lt;/code&gt;ing, and &lt;code&gt;forEach&lt;/code&gt; won&apos;t stop just because &lt;code&gt;logFile&lt;/code&gt; does some &lt;code&gt;await&lt;/code&gt;ing.&lt;/p&gt;\n    ","\n&lt;p&gt;Similar to Antonio Val&apos;s &lt;a href=&quot;https://stackoverflow.com/a/45006966/8550747&quot;&gt;&lt;code&gt;p-iteration&lt;/code&gt;&lt;/a&gt;, an alternative npm module is &lt;a href=&quot;https://async-af.js.org/AsyncAF.html#forEachAF&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;async-af&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AsyncAF&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;async-af&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs-promise&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// since AsyncAF accepts promises or non-promises, there&apos;s no need to await here&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-title class_&quot;&gt;AsyncAF&lt;/span&gt;(files).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; file =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; contents = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(contents);\n  });\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, &lt;a href=&quot;https://async-af.js.org/AsyncAF.html#logAF&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;async-af&lt;/code&gt;&lt;/a&gt; has a static method (log/logAF) that logs the results of promises:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AsyncAF&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;async-af&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs-promise&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-title class_&quot;&gt;AsyncAF&lt;/span&gt;(files).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title class_&quot;&gt;AsyncAF&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;));\n  });\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, the main advantage of the library is that you can chain asynchronous methods to do something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; aaf = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;async-af&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs-promise&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;aaf&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;())\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt; =&amp;gt;&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;))\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt; =&amp;gt;&lt;/span&gt; aaf.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(file));\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://async-af.js.org/AsyncAF&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;async-af&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In 2022 I would still advise using external libraries to handle all this async flow.  I&apos;ve created the module &lt;a href=&quot;https://github.com/atmajs/alot&quot; rel=&quot;nofollow noreferrer&quot;&gt;alot&lt;/a&gt; for similar things.&lt;/p&gt;\n&lt;p&gt;Your example would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; fs &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;fs-promise&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; alot &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;alot&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt; () {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; files = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Assume this works fine&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;alot&lt;/span&gt;(files)\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;forEachAsync&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; file =&amp;gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; content = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fs.&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(content);\n        })\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;toArrayAsync&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;threads&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; });\n    }\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;printFiles&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For simple examples surely the async &lt;code&gt;for..of&lt;/code&gt; would do the job, but as soon the task is more complicated you have to use some utility for this.&lt;/p&gt;\n&lt;p&gt;Alot has dozens of other methods that you can chain, like &lt;code&gt;mapAsync&lt;/code&gt;, &lt;code&gt;filterAsync&lt;/code&gt;, &lt;code&gt;groupAsync&lt;/code&gt;, etc.&lt;/p&gt;\n&lt;p&gt;As an example:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Load JSON files with products meta&lt;/li&gt;\n&lt;li&gt;Extract &lt;code&gt;ProductID&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Load products from the server&lt;/li&gt;\n&lt;li&gt;Filter those with a price &amp;gt; 100$&lt;/li&gt;\n&lt;li&gt;Order by price ascending&lt;/li&gt;\n&lt;li&gt;Take top 50&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; fs &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;fs-promise&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; alot &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;alot&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; axios &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;axios&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;hljs-title class_&quot;&gt;File&lt;/span&gt; } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;atma-io&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; paths = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getFilePaths&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; products = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;alot&lt;/span&gt;(paths)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;mapAsync&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; path =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;File&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;readAsync&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;IProductMeta&lt;/span&gt;&amp;gt;(path))\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;mapAsync&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; meta =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; axios.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${server}&lt;/span&gt;/api/product/&lt;span class=&quot;hljs-subst&quot;&gt;${meta.productId}&lt;/span&gt;`&lt;/span&gt;))\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;mapAsync&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;resp&lt;/span&gt; =&amp;gt;&lt;/span&gt; resp.&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;filterAsync&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;product&lt;/span&gt; =&amp;gt;&lt;/span&gt; product.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;sortBy&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;product&lt;/span&gt; =&amp;gt;&lt;/span&gt; product.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;asc&apos;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;takeAsync&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;toArrayAsync&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;threads&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;errors&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;include&apos;&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you&apos;d like to iterate over all elements concurrently:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asyncForEach&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, fn&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(arr.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(fn));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you&apos;d like to iterate over all elements non-concurrently (e.g. when your mapping function has side effects or running mapper over all array elements at once would be too resource costly):&lt;/p&gt;\n&lt;p&gt;Option A: Promises&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asyncForEachStrict&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, fn&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    arr.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(\n      &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;promise, cur, idx&lt;/span&gt;) =&amp;gt;&lt;/span&gt; promise\n        .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(cur, idx, arr)),\n      &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(),\n    ).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;());\n  });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Option B: async/await&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asyncForEachStrict&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, fn&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; idx = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; idx &amp;lt; arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; idx += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; cur = arr[idx];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(cur, idx, arr);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;If you can&apos;t use async/await&lt;/strong&gt; (IE11, old packer, etc.) then you can try this recursive function. I used &lt;code&gt;fetch&lt;/code&gt; as my asynchronous call, but you could use any function that returns a promise.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; urlsToGet = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;https://google.com&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;https://yahoo.com&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;fetchOneAtATime&lt;/span&gt;(urlsToGet);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchOneAtATime&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;urls&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (urls.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(urls[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]).&lt;span class=&quot;hljs-title function_&quot;&gt;finally&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchOneAtATime&lt;/span&gt;(urls.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"ctor-initializer","slug":"ctor-initializer"},{"name":"chunks","slug":"chunks"},{"name":"sequence-points","slug":"sequence-points"},{"name":"assignment-operator","slug":"assignment-operator"},{"name":"google-maps","slug":"google-maps"},{"name":"foreach","slug":"foreach"},{"name":"readlines","slug":"readlines"},{"name":"recursive-query","slug":"recursive-query"},{"name":"prop","slug":"prop"},{"name":"q","slug":"q"},{"name":"objective-c","slug":"objective-c"},{"name":"soft-keyboard","slug":"soft-keyboard"},{"name":"linux","slug":"linux"},{"name":"return-type","slug":"return-type"},{"name":"require","slug":"require"},{"name":"slice","slug":"slice"},{"name":"httprequest","slug":"httprequest"},{"name":"dhtml","slug":"dhtml"},{"name":"least-astonishment","slug":"least-astonishment"},{"name":"boolean-logic","slug":"boolean-logic"}]},"__N_SSG":true}