{"pageProps":{"data":{"count":1,"rows":[{"id":603,"title":"How to use java.util.Scanner to correctly read user input from System.in and act on it?","slug":"how-to-use-java.util.scanner-to-correctly-read-user-input-from-system.in-and-act-on-it-1657388546306","postType":"QUESTION","createdAt":"2022-07-09T17:42:26.000Z","updatedAt":"2022-07-09T17:42:26.000Z","tags":[{"id":2860,"name":"system.in","slug":"system.in","createdAt":"2022-07-09T17:42:26.000Z","updatedAt":"2022-07-09T17:42:26.000Z","Questions_Tags":{"questionId":603,"tagId":2860}}]}]},"slug":"system.in","page":1,"answers":{"603":["\n&lt;h2&gt;Idiomatic Example:&lt;/h2&gt;\n\n&lt;p&gt;The following is how to properly use the &lt;code&gt;java.util.Scanner&lt;/code&gt; class to interactively read user input from &lt;code&gt;System.in&lt;/code&gt; correctly( sometimes referred to as &lt;code&gt;stdin&lt;/code&gt;, especially in C, C++ and other languages as well as in Unix and Linux). It idiomatically demonstrates the most common things that are requested to be done.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.stackoverflow.scanner;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.annotation.Nonnull;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.math.BigInteger;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.net.MalformedURLException;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.net.URL;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.regex.Pattern;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; java.lang.String.format;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScannerExample&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Set&amp;lt;String&amp;gt; EXIT_COMMANDS;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Set&amp;lt;String&amp;gt; HELP_COMMANDS;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Pattern DATE_PATTERN;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String HELP_MESSAGE;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; SortedSet&amp;lt;String&amp;gt; ecmds = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TreeSet&lt;/span&gt;&amp;lt;String&amp;gt;(String.CASE_INSENSITIVE_ORDER);\n        ecmds.addAll(Arrays.asList(&lt;span class=&quot;hljs-string&quot;&gt;&quot;exit&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;done&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;quit&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;end&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;fino&quot;&lt;/span&gt;));\n        EXIT_COMMANDS = Collections.unmodifiableSortedSet(ecmds);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; SortedSet&amp;lt;String&amp;gt; hcmds = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TreeSet&lt;/span&gt;&amp;lt;String&amp;gt;(String.CASE_INSENSITIVE_ORDER);\n        hcmds.addAll(Arrays.asList(&lt;span class=&quot;hljs-string&quot;&gt;&quot;help&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;helpi&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;?&quot;&lt;/span&gt;));\n        HELP_COMMANDS = Collections.unmodifiableSet(hcmds);\n        DATE_PATTERN = Pattern.compile(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\d{4}([-\\\\/])\\\\d{2}\\\\1\\\\d{2}&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// http://regex101.com/r/xB8dR3/1&lt;/span&gt;\n        HELP_MESSAGE = format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter some data or enter one of the following commands to exit %s&quot;&lt;/span&gt;, EXIT_COMMANDS);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Using exceptions to control execution flow is always bad.\n     * That is why this is encapsulated in a method, this is done this\n     * way specifically so as not to introduce any external libraries\n     * so that this is a completely self contained example.\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; s possible url\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; true if s represents a valid url, false otherwise\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isValidURL&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@Nonnull&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String s)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;URL&lt;/span&gt;(s); &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; MalformedURLException e) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-meta&quot;&gt;@Nonnull&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String format, &lt;span class=&quot;hljs-meta&quot;&gt;@Nonnull&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Object... args)&lt;/span&gt;\n    {\n        System.out.println(format(format, args));\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String[] args)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sis&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Scanner&lt;/span&gt;(System.in);\n        output(HELP_MESSAGE);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (sis.hasNext())\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sis.hasNextInt())\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sis.nextInt();\n                output(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You entered an Integer = %d&quot;&lt;/span&gt;, next);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sis.hasNextLong())\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sis.nextLong();\n                output(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You entered a Long = %d&quot;&lt;/span&gt;, next);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sis.hasNextDouble())\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sis.nextDouble();\n                output(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You entered a Double = %f&quot;&lt;/span&gt;, next);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sis.hasNext(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\d+&quot;&lt;/span&gt;))\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BigInteger&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sis.nextBigInteger();\n                output(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You entered a BigInteger = %s&quot;&lt;/span&gt;, next);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sis.hasNextBoolean())\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sis.nextBoolean();\n                output(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You entered a Boolean representation = %s&quot;&lt;/span&gt;, next);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sis.hasNext(DATE_PATTERN))\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sis.next(DATE_PATTERN);\n                output(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You entered a Date representation = %s&quot;&lt;/span&gt;, next);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// unclassified&lt;/span&gt;\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sis.next();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isValidURL(next))\n                {\n                    output(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You entered a valid URL = %s&quot;&lt;/span&gt;, next);\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (EXIT_COMMANDS.contains(next))\n                    {\n                        output(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Exit command %s issued, exiting!&quot;&lt;/span&gt;, next);\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    }\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (HELP_COMMANDS.contains(next)) { output(HELP_MESSAGE); }\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { output(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You entered an unclassified String = %s&quot;&lt;/span&gt;, next); }\n                }\n            }\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;/*\n           This will close the underlying InputStream, in this case System.in, and free those resources.\n           WARNING: You will not be able to read from System.in anymore after you call .close().\n           If you wanted to use System.in for something else, then don&apos;t close the Scanner.\n        */&lt;/span&gt;\n        sis.close();\n        System.exit(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Notes:&lt;/h2&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This may look like a lot of code, but it illustrates the minimum\n  effort needed to use the &lt;code&gt;Scanner&lt;/code&gt; class correctly and not have to\n  deal with subtle bugs and side effects that plague those new to\n  programming and this terribly implemented class called\n  &lt;code&gt;java.util.Scanner&lt;/code&gt;. It tries to illustrate what idiomatic Java code\n  should look like and behave like.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;em&gt;Below are some of the things I was thinking about when I wrote this example:&lt;/em&gt;&lt;/p&gt;\n\n&lt;h3&gt;JDK Version:&lt;/h3&gt;\n\n&lt;p&gt;I purposely kept this example compatible with JDK 6. If some scenario really demands a feature of JDK 7/8 I or someone else will post a new answer with specifics about how to modify this for that version JDK.&lt;/p&gt;\n\n&lt;p&gt;The majority of questions about this class come from students and they usually have restrictions on what they can use to solve a problem so I restricted this as much as I could to show how to do the common things without any other dependencies. &lt;em&gt;In the 22+ years I have been working with Java and consulting the majority of that time I have never encountered professional use of this class in the 10&apos;s of millions of lines source code I have seen.&lt;/em&gt;&lt;/p&gt;\n\n&lt;h3&gt;Processing commands:&lt;/h3&gt;\n\n&lt;p&gt;This shows exactly how to &lt;a href=&quot;http://en.wikipedia.org/wiki/Idiom_(language_structure)&quot; rel=&quot;noreferrer&quot;&gt;idiomatically&lt;/a&gt; read commands from the user interactively and dispatch those commands. The majority of questions about &lt;code&gt;java.util.Scanner&lt;/code&gt; are of the &lt;em&gt;how can I get my program to quit when I enter some specific input&lt;/em&gt; category. This shows that clearly.&lt;/p&gt;\n\n&lt;h3&gt;Naive Dispatcher&lt;/h3&gt;\n\n&lt;p&gt;The dispatch logic is intentionally naive so as to not complicate the solution for new readers. A dispatcher based on a &lt;code&gt;Strategy Pattern&lt;/code&gt; or &lt;code&gt;Chain Of Responsibility&lt;/code&gt; pattern would be more appropriate for real world problems that would be much more complex.&lt;/p&gt;\n\n&lt;h3&gt;Error Handling&lt;/h3&gt;\n\n&lt;p&gt;The code was deliberately structured as to require no &lt;code&gt;Exception&lt;/code&gt; handling because there is no scenario where some data might not be correct.&lt;/p&gt;\n\n&lt;h3&gt;&lt;code&gt;.hasNext()&lt;/code&gt; and &lt;code&gt;.hasNextXxx()&lt;/code&gt;&lt;/h3&gt;\n\n&lt;p&gt;I rarely see anyone using the &lt;code&gt;.hasNext()&lt;/code&gt; properly, by testing for the generic &lt;code&gt;.hasNext()&lt;/code&gt; to control the event loop, and then using the &lt;code&gt;if(.hasNextXxx())&lt;/code&gt; idiom lets you decide how and what to proceed with your code without having to worry about asking for an &lt;code&gt;int&lt;/code&gt; when none is available, thus no exception handling code.&lt;/p&gt;\n\n&lt;h3&gt;&lt;code&gt;.nextXXX()&lt;/code&gt; vs &lt;code&gt;.nextLine()&lt;/code&gt;&lt;/h3&gt;\n\n&lt;p&gt;This is something that breaks everyone&apos;s code. It is a &lt;a href=&quot;https://stackoverflow.com/questions/13102045/scanner-is-skipping-nextline-after-using-next-or-nextfoo&quot;&gt;finicky detail&lt;/a&gt; that should not have to be dealt with and has a very obfusated bug that is hard to reason about because of it breaks the &lt;a href=&quot;https://en.wikipedia.org/wiki/Principle_of_least_astonishment&quot; rel=&quot;noreferrer&quot;&gt;Principal of Least Astonishment&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;.nextXXX()&lt;/code&gt; methods do not consume the line ending. &lt;code&gt;.nextLine()&lt;/code&gt; does.&lt;/p&gt;\n\n&lt;p&gt;That means that calling &lt;code&gt;.nextLine()&lt;/code&gt; immediately after &lt;code&gt;.nextXXX()&lt;/code&gt; will just return the line ending. You have to call it again to actually get the next line.&lt;/p&gt;\n\n&lt;p&gt;This is why many people advocate either use nothing but the &lt;code&gt;.nextXXX()&lt;/code&gt; methods or only &lt;code&gt;.nextLine()&lt;/code&gt; but not both at the same time so that this finicky behavior does not trip you up. Personally I think the type safe methods are much better than having to then test and parse and catch errors manually.&lt;/p&gt;\n\n&lt;h3&gt;Immutablity:&lt;/h3&gt;\n\n&lt;p&gt;Notice that there are no mutable variables used in the code, this is important to learn how to do, it eliminates four of the most major sources of runtime errors and subtle bugs.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;No &lt;code&gt;nulls&lt;/code&gt; means no possibility of a  &lt;code&gt;NullPointerExceptions&lt;/code&gt;!&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;No mutability means that you don&apos;t have to worry about method arguments changing or anything else changing. When you step debug through you never have to use &lt;code&gt;watch&lt;/code&gt; to see what variables are change to what values, if they are changing. This makes the logic 100% deterministic when you read it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;No mutability means your code is automatically thread-safe.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;No side effects. If nothing can change, the you don&apos;t have to worry about some subtle side effect of some edge case changing something unexpectedly!&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.vertigrated.com/blog/2011/05/the-final-word-on-final/&quot; rel=&quot;noreferrer&quot;&gt;Read this if you don&apos;t understand how to apply the &lt;code&gt;final&lt;/code&gt; keyword in your own code.&lt;/a&gt;&lt;/p&gt;\n\n&lt;h3&gt;Using a Set instead of massive &lt;code&gt;switch&lt;/code&gt; or &lt;code&gt;if/elseif&lt;/code&gt; blocks:&lt;/h3&gt;\n\n&lt;p&gt;Notice how I use a &lt;code&gt;Set&amp;lt;String&amp;gt;&lt;/code&gt; and use &lt;code&gt;.contains()&lt;/code&gt; to classify the commands instead of a massive &lt;code&gt;switch&lt;/code&gt; or &lt;code&gt;if/elseif&lt;/code&gt; monstrosity that would bloat your code and more importantly make maintenance a nightmare! Adding a new overloaded command is as simple as adding a new &lt;code&gt;String&lt;/code&gt; to the array in the constructor.&lt;/p&gt;\n\n&lt;p&gt;This also would work very well with &lt;code&gt;i18n&lt;/code&gt; and &lt;code&gt;i10n&lt;/code&gt; and the proper &lt;code&gt;ResourceBundles&lt;/code&gt;.\nA &lt;code&gt;Map&amp;lt;Locale,Set&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; would let you have multiple language support with very little overhead!&lt;/p&gt;\n\n&lt;h3&gt;@Nonnull&lt;/h3&gt;\n\n&lt;p&gt;I have decided that all my code should &lt;a href=&quot;https://stackoverflow.com/a/228305/177800&quot;&gt;explicitly&lt;/a&gt; declare if something is &lt;code&gt;@Nonnull&lt;/code&gt; or &lt;code&gt;@Nullable&lt;/code&gt;. It lets your IDE help warn you about potential &lt;code&gt;NullPointerException&lt;/code&gt; hazards and when you do not have to check.&lt;/p&gt;\n\n&lt;p&gt;Most importantly it documents the expectation for future readers that none of these method parameters should be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Calling .close()&lt;/h3&gt;\n\n&lt;p&gt;Really think about this one before you do it.&lt;/p&gt;\n\n&lt;p&gt;What do you think will happen &lt;code&gt;System.in&lt;/code&gt; if you were to call &lt;code&gt;sis.close()&lt;/code&gt;? See the comments in the listing above.&lt;/p&gt;\n\n&lt;h3&gt;Please &lt;a href=&quot;https://gist.github.com/jarrodhroberson/c35130cb8ee107ab10e9#file-scannerexample-java&quot; rel=&quot;noreferrer&quot;&gt;fork and send pull requests&lt;/a&gt; and I will update this question and answer for other basic usage scenarios.&lt;/h3&gt;\n    "]},"randomTags":[{"name":"super","slug":"super"},{"name":"arrays","slug":"arrays"},{"name":"overflow","slug":"overflow"},{"name":"for-loop","slug":"for-loop"},{"name":"git-reset","slug":"git-reset"},{"name":"form-submit","slug":"form-submit"},{"name":"winforms","slug":"winforms"},{"name":"sh","slug":"sh"},{"name":"events","slug":"events"},{"name":"date-parsing","slug":"date-parsing"},{"name":"clone","slug":"clone"},{"name":"argument-unpacking","slug":"argument-unpacking"},{"name":"same-origin-policy","slug":"same-origin-policy"},{"name":"x509certificate","slug":"x509certificate"},{"name":"chromium","slug":"chromium"},{"name":"language-lawyer","slug":"language-lawyer"},{"name":"gets","slug":"gets"},{"name":"instantiation","slug":"instantiation"},{"name":"repr","slug":"repr"},{"name":"static","slug":"static"}]},"__N_SSG":true}