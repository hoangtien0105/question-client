{"pageProps":{"data":{"count":1,"rows":[{"id":193,"title":"Difference between single and double quotes in Bash","slug":"difference-between-single-and-double-quotes-in-bash-1657385460827","postType":"QUESTION","createdAt":"2022-07-09T16:51:00.000Z","updatedAt":"2022-07-09T16:51:00.000Z","tags":[{"id":1410,"name":"double-quotes","slug":"double-quotes","createdAt":"2022-07-09T16:51:00.000Z","updatedAt":"2022-07-09T16:51:00.000Z","Questions_Tags":{"questionId":193,"tagId":1410}}]}]},"slug":"double-quotes","page":1,"answers":{"193":["\n&lt;p&gt;Single quotes won&apos;t interpolate anything, but double quotes will. For example: variables, backticks, certain &lt;code&gt;\\&lt;/code&gt; escapes, etc. &lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$(echo &lt;span class=&quot;hljs-string&quot;&gt;&quot;upg&quot;&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;\nupg\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;$(echo &quot;upg&quot;)&apos;&lt;/span&gt;\n$(&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;upg&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The Bash manual has this to say:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;a href=&quot;http://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html&quot; rel=&quot;noreferrer&quot;&gt;3.1.2.2 Single Quotes&lt;/a&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Enclosing characters in single quotes (&lt;code&gt;&apos;&lt;/code&gt;) preserves the literal value of each character within the quotes. A single quote may not occur between single quotes, even when preceded by a backslash. &lt;/p&gt;\n  \n  &lt;p&gt;&lt;a href=&quot;http://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html&quot; rel=&quot;noreferrer&quot;&gt;3.1.2.3 Double Quotes&lt;/a&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Enclosing characters in double quotes (&lt;code&gt;&quot;&lt;/code&gt;) preserves the literal value of all characters within the quotes, with the exception of &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;`&lt;/code&gt;, &lt;code&gt;\\&lt;/code&gt;, and, when history expansion is enabled, &lt;code&gt;!&lt;/code&gt;. The characters &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;`&lt;/code&gt; retain their special meaning within double quotes (see &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Shell-Expansions.html#Shell-Expansions&quot; rel=&quot;noreferrer&quot;&gt;Shell Expansions&lt;/a&gt;). The backslash retains its special meaning only when followed by one of the following characters: &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;`&lt;/code&gt;, &lt;code&gt;&quot;&lt;/code&gt;, &lt;code&gt;\\&lt;/code&gt;, or newline. Within double quotes, backslashes that are followed by one of these characters are removed. Backslashes preceding characters without a special meaning are left unmodified. A double quote may be quoted within double quotes by preceding it with a backslash. If enabled, history expansion will be performed unless an &lt;code&gt;!&lt;/code&gt; appearing in double quotes is escaped using a backslash. The backslash preceding the &lt;code&gt;!&lt;/code&gt; is not removed.&lt;/p&gt;\n  \n  &lt;p&gt;The special parameters &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; have special meaning when in double quotes (see &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html#Shell-Parameter-Expansion&quot; rel=&quot;noreferrer&quot;&gt;Shell Parameter Expansion&lt;/a&gt;). &lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;https://stackoverflow.com/a/6697781/6862601&quot;&gt;accepted answer&lt;/a&gt; is great. I am making a table that helps in quick comprehension of the topic.  The explanation involves a simple variable &lt;code&gt;a&lt;/code&gt; as well as an indexed array &lt;code&gt;arr&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;If we set&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;a=apple      &lt;span class=&quot;hljs-comment&quot;&gt;# a simple variable&lt;/span&gt;\narr=(apple)  &lt;span class=&quot;hljs-comment&quot;&gt;# an indexed array with a single element&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and then &lt;code&gt;echo&lt;/code&gt; the expression in the second column, we would get the result / behavior shown in the third column.  The fourth column explains the behavior.&lt;/p&gt;\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;#&lt;/th&gt;\n&lt;th&gt;Expression&lt;/th&gt;\n&lt;th&gt;Result&lt;/th&gt;\n&lt;th&gt;Comments&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;$a&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;apple&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;variables are expanded inside &lt;code&gt;&quot;&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&apos;$a&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;$a&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;variables are not expanded inside &lt;code&gt;&apos;&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;3&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;&apos;$a&apos;&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&apos;apple&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&apos;&apos;&lt;/code&gt; has no special meaning inside &lt;code&gt;&quot;&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;4&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&apos;&quot;$a&quot;&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;$a&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;&quot;&lt;/code&gt; is treated literally inside &lt;code&gt;&apos;&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;5&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&apos;\\&apos;&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;invalid&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;can not escape a &lt;code&gt;&apos;&lt;/code&gt; within &lt;code&gt;&apos;&apos;&lt;/code&gt;; use &lt;code&gt;&quot;&apos;&quot;&lt;/code&gt; or &lt;code&gt;$&apos;\\&apos;&apos;&lt;/code&gt; (ANSI-C quoting)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;6&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;red$arocks&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;red&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;$arocks&lt;/code&gt; does not expand &lt;code&gt;$a&lt;/code&gt;; use &lt;code&gt;${a}rocks&lt;/code&gt; to preserve &lt;code&gt;$a&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;7&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;redapple$&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;redapple$&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;$&lt;/code&gt; followed by no variable name evaluates to &lt;code&gt;$&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;8&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&apos;\\&quot;&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;\\&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;\\&lt;/code&gt; has no special meaning inside &lt;code&gt;&apos;&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;9&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;\\&apos;&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;\\&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;\\&apos;&lt;/code&gt; is interpreted inside &lt;code&gt;&quot;&quot;&lt;/code&gt; but has no significance for &lt;code&gt;&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;10&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;\\&quot;&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;\\&quot;&lt;/code&gt; is interpreted inside &lt;code&gt;&quot;&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;11&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;*&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;glob does not work inside &lt;code&gt;&quot;&quot;&lt;/code&gt; or &lt;code&gt;&apos;&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;12&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;\\t\\n&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;\\t\\n&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;\\t&lt;/code&gt; and &lt;code&gt;\\n&lt;/code&gt; have no special meaning inside &lt;code&gt;&quot;&quot;&lt;/code&gt; or &lt;code&gt;&apos;&apos;&lt;/code&gt;; use ANSI-C quoting&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;13&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;`echo hi`&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;hi&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;``&lt;/code&gt; and &lt;code&gt;$()&lt;/code&gt; are evaluated inside &lt;code&gt;&quot;&quot;&lt;/code&gt; (backquotes are retained in actual output)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;14&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&apos;`echo hi`&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;`echo hi`&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;``&lt;/code&gt; and &lt;code&gt;$()&lt;/code&gt; are not evaluated inside &lt;code&gt;&apos;&apos;&lt;/code&gt; (backquotes are retained in actual output)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;15&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&apos;${arr[0]}&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;${arr[0]}&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;array access not possible inside &lt;code&gt;&apos;&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;16&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;${arr[0]}&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;apple&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;array access works inside &lt;code&gt;&quot;&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;17&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;$&apos;$a\\&apos;&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;$a&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;single quotes can be escaped inside ANSI-C quoting&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;18&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;$&apos;\\t&apos;&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;$&apos;\\t&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;ANSI-C quoting is not interpreted inside &lt;code&gt;&quot;&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;19&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&apos;!cmd&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;!cmd&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;history expansion character &lt;code&gt;&apos;!&apos;&lt;/code&gt; is ignored inside &lt;code&gt;&apos;&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;20&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;&quot;!cmd&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;cmd args&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;expands to the most recent command matching &lt;code&gt;&quot;cmd&quot;&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;21&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;$&apos;!cmd&apos;&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;&lt;code&gt;!cmd&lt;/code&gt;&lt;/td&gt;\n&lt;td&gt;history expansion character &lt;code&gt;&apos;!&apos;&lt;/code&gt; is ignored inside ANSI-C quotes&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;&lt;hr&gt;\n&lt;p&gt;See also:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html&quot; rel=&quot;noreferrer&quot;&gt;ANSI-C quoting with &lt;code&gt;$&apos;&apos;&lt;/code&gt; - GNU Bash Manual&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Locale-Translation.html#Locale-Translation&quot; rel=&quot;noreferrer&quot;&gt;Locale translation with &lt;code&gt;$&quot;&quot;&lt;/code&gt; - GNU Bash Manual&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/42104627/6862601&quot;&gt;A three-point formula for quotes&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;If you&apos;re referring to what happens when you echo something, the single quotes will literally echo what you have between them, while the double quotes will evaluate variables between them and output the value of the variable.&lt;/p&gt;\n\n&lt;p&gt;For example, this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/bin/sh&lt;/span&gt;\nMYVAR=sometext\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;double quotes gives you &lt;span class=&quot;hljs-variable&quot;&gt;$MYVAR&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;single quotes gives you $MYVAR&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will give this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;double quotes gives you sometext\nsingle quotes gives you &lt;span class=&quot;hljs-variable&quot;&gt;$MYVAR&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Others explained very well and just want to give with simple examples.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Single quotes&lt;/strong&gt; can be used around text to prevent the shell from interpreting any special characters.  Dollar signs, spaces, ampersands, asterisks and other special characters are all ignored when enclosed within single quotes.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;All sorts of things are ignored in single quotes, like $ &amp;amp; * ; |.&apos;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will give this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;All sorts of things are ignored &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; single quotes, like $ &amp;amp; * ; |.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The only thing that cannot be put within single quotes is a single quote.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Double quotes&lt;/strong&gt; act similarly to single quotes, except double quotes still allow the shell to interpret dollar signs, back quotes and backslashes.  It is already known that backslashes prevent a single special character from being interpreted.  This can be useful within double quotes if a dollar sign needs to be used as text instead of for a variable.  It also allows double quotes to be escaped so they are not interpreted as the end of a quoted string.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Here&apos;s how we can use single &apos; and double \\&quot; quotes within double quotes&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will give this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;Here&lt;span class=&quot;hljs-string&quot;&gt;&apos;s how we can use single &apos;&lt;/span&gt; and double &lt;span class=&quot;hljs-string&quot;&gt;&quot; quotes within double quotes\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It may also be noticed that the apostrophe, which would otherwise be interpreted as the beginning of a quoted string, is ignored within double quotes.  Variables, however, are interpreted and substituted with their values within double quotes.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;The current Oracle SID is &lt;span class=&quot;hljs-variable&quot;&gt;$ORACLE_SID&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will give this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;The current Oracle SID is &lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Back quotes&lt;/strong&gt; are wholly unlike single or double quotes.  Instead of being used to prevent the interpretation of special characters, back quotes actually force the execution of the commands they enclose.  After the enclosed commands are executed, their output is substituted in place of the back quotes in the original line.  This will be clearer with an example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ today=`&lt;span class=&quot;hljs-built_in&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;+%A, %B %d, %Y&apos;&lt;/span&gt;`\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$today&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will give this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;Monday, September 28, 2015 \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Since this is the de facto answer when dealing with quotes in &lt;code&gt;bash&lt;/code&gt;, I&apos;ll add upon one more point missed in the answers above, when dealing with the arithmetic operators in the shell.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;bash&lt;/code&gt; shell supports two ways do arithmetic operation, one defined by the built-in &lt;code&gt;let&lt;/code&gt; command and the &lt;code&gt;$((..))&lt;/code&gt; operator. The former evaluates an arithmetic expression while the latter is more of a compound statement.&lt;/p&gt;\n\n&lt;p&gt;It is important to understand that the arithmetic expression used with &lt;code&gt;let&lt;/code&gt; undergoes word-splitting, pathname expansion just like any other shell commands. So proper quoting and escaping needs to be done. &lt;/p&gt;\n\n&lt;p&gt;See this example when using &lt;code&gt;let&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo = 2 + 1&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;\n3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using single quotes here is absolutely fine here, as there is no need for variable expansions here, consider a case of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;bar=1\n&lt;span class=&quot;hljs-built_in&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo = $bar + 1&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;would fail miserably, as the &lt;code&gt;$bar&lt;/code&gt; under single quotes would &lt;em&gt;not&lt;/em&gt; expand and needs to be double-quoted as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo = &apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$bar&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos; + 1&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This should be one of the reasons, the &lt;code&gt;$((..))&lt;/code&gt; should always be considered over using &lt;code&gt;let&lt;/code&gt;. Because inside it, the contents aren&apos;t subject to word-splitting. The previous example using &lt;code&gt;let&lt;/code&gt; can be simply written as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;(( bar=1, foo = bar + 1 ))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Always remember to use &lt;code&gt;$((..))&lt;/code&gt; without single quotes&lt;/h3&gt;\n\n&lt;p&gt;Though the &lt;code&gt;$((..))&lt;/code&gt; can be used with double-quotes, there is no purpose to it as the result of it &lt;em&gt;cannot&lt;/em&gt; contain a content that would need the double-quote. Just ensure it is not single quoted.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%d\\n&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;$((1+1))&apos;&lt;/span&gt;\n-bash: &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;: $((&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)): invalid number\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%d\\n&apos;&lt;/span&gt; $((&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n2\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%d\\n&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$((1+1)&lt;/span&gt;)&quot;&lt;/span&gt;\n2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;May be in some special cases of using the &lt;code&gt;$((..))&lt;/code&gt; operator inside a single quoted string, you need to interpolate quotes in a way that the operator either is left unquoted or under double quotes. E.g. consider a case, when you are tying to use the operator inside a &lt;code&gt;curl&lt;/code&gt; statement to pass a counter every time a request is made, do&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;curl http://myurl.com --data-binary &lt;span class=&quot;hljs-string&quot;&gt;&apos;{&quot;requestCounter&quot;:&apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$((reqcnt++)&lt;/span&gt;)&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;}&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice the use of nested double-quotes inside, without which the literal string &lt;code&gt;$((reqcnt++))&lt;/code&gt; is passed to &lt;code&gt;requestCounter&lt;/code&gt; field.&lt;/p&gt;\n    ","\n&lt;p&gt;There is a clear distinction between the usage of &lt;code&gt;&apos; &apos;&lt;/code&gt; and &lt;code&gt;&quot; &quot;&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;When &lt;code&gt;&apos; &apos;&lt;/code&gt; is used around anything, there is no &quot;transformation or translation&quot; done. It is printed as it is. &lt;/p&gt;\n\n&lt;p&gt;With &lt;code&gt;&quot; &quot;&lt;/code&gt;, whatever it surrounds, is &quot;translated or transformed&quot; into its value. &lt;/p&gt;\n\n&lt;p&gt;By translation/ transformation I mean the following:\nAnything within the single quotes will not be &quot;translated&quot; to their values. They will be taken as they are inside quotes. Example: &lt;code&gt;a=23&lt;/code&gt;, then &lt;code&gt;echo &apos;$a&apos;&lt;/code&gt; will produce &lt;code&gt;$a&lt;/code&gt; on standard output. Whereas &lt;code&gt;echo &quot;$a&quot;&lt;/code&gt; will produce &lt;code&gt;23&lt;/code&gt; on standard output.&lt;/p&gt;\n    ","\n&lt;p&gt;A minimal answer is needed for people to get going without spending a lot of time as I had to.&lt;/p&gt;\n&lt;p&gt;The following is, surprisingly (to those looking for an answer), a complete command:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;whose output is:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;\\\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Backslashes, surprisingly to even long-time users of bash, have no meaning inside single quotes. Nor does anything else.&lt;/p&gt;\n    "]},"randomTags":[{"name":"python-module","slug":"python-module"},{"name":"struct","slug":"struct"},{"name":"equality","slug":"equality"},{"name":"selenium","slug":"selenium"},{"name":"jakarta-mail","slug":"jakarta-mail"},{"name":"jtable","slug":"jtable"},{"name":"double-quotes","slug":"double-quotes"},{"name":"variable-length-array","slug":"variable-length-array"},{"name":"text-files","slug":"text-files"},{"name":"sqliteopenhelper","slug":"sqliteopenhelper"},{"name":"html-parsing","slug":"html-parsing"},{"name":"jsf-2","slug":"jsf-2"},{"name":"android-resources","slug":"android-resources"},{"name":"vb.net","slug":"vb.net"},{"name":"non-static","slug":"non-static"},{"name":"casting","slug":"casting"},{"name":"hover","slug":"hover"},{"name":"comparison","slug":"comparison"},{"name":"dynamic-variables","slug":"dynamic-variables"},{"name":"lifetime","slug":"lifetime"}]},"__N_SSG":true}