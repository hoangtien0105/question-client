{"pageProps":{"data":{"count":1,"rows":[{"id":105,"title":"What is the difference between single-quoted and double-quoted strings in PHP?","slug":"what-is-the-difference-between-single-quoted-and-double-quoted-strings-in-php-1657384624345","postType":"QUESTION","createdAt":"2022-07-09T16:37:04.000Z","updatedAt":"2022-07-09T16:37:04.000Z","tags":[{"id":385,"name":"syntax","slug":"syntax","createdAt":"2022-07-09T16:37:04.000Z","updatedAt":"2022-07-09T16:37:04.000Z","Questions_Tags":{"questionId":105,"tagId":385}}]}]},"slug":"syntax","page":"1","answers":{"105":["\n&lt;p&gt;&lt;a href=&quot;https://php.net/manual/en/language.types.string.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;PHP strings&lt;/strong&gt;&lt;/a&gt; can be specified not just in &lt;em&gt;two&lt;/em&gt; ways, but in &lt;strong&gt;four&lt;/strong&gt; ways.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.single&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Single quoted strings&lt;/strong&gt;&lt;/a&gt; will display things almost completely &quot;as is.&quot; Variables and most escape sequences will not be interpreted. The exception is that to display a literal single quote, you can escape it with a back slash &lt;code&gt;\\&apos;&lt;/code&gt;, and to display a back slash, you can escape it with another backslash &lt;code&gt;\\\\&lt;/code&gt; (&lt;strong&gt;So yes, even single quoted strings are parsed&lt;/strong&gt;).&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Double quote strings&lt;/strong&gt;&lt;/a&gt; will display a host of escaped characters (including some regexes), and variables in the strings will be evaluated. An important point here is that &lt;strong&gt;you can use curly braces to isolate the name of the variable you want evaluated&lt;/strong&gt;. For example let&apos;s say you have the variable &lt;code&gt;$type&lt;/code&gt; and you want to &lt;code&gt;echo &quot;The $types are&quot;&lt;/code&gt;. That will look for the variable &lt;code&gt;$types&lt;/code&gt;. To get around this use &lt;code&gt;echo &quot;The {$type}s are&quot;&lt;/code&gt; You can put the left brace before or after the dollar sign. Take a look at &lt;a href=&quot;https://www.php.net/manual/en/language.types.string.php#language.types.string.parsing&quot; rel=&quot;noreferrer&quot;&gt;string parsing&lt;/a&gt; to see how to use array variables and such.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Heredoc&lt;/strong&gt;&lt;/a&gt; string syntax works like double quoted strings. It starts with &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;. After this operator, an identifier is provided, then a newline. The string itself follows, and then the same identifier again to close the quotation. You don&apos;t need to escape quotes in this syntax. &lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.nowdoc&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Nowdoc&lt;/strong&gt;&lt;/a&gt; (since PHP 5.3.0) string syntax works essentially like single quoted strings. The difference is that not even single quotes or backslashes have to be escaped. A nowdoc is identified with the same &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; sequence used for heredocs, but the identifier which follows is enclosed in single quotes, e.g. &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&apos;EOT&apos;&lt;/code&gt;. &lt;strong&gt;No parsing is done in nowdoc.&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;\nSingle quotes inside of single quotes and double quotes inside of double quotes must be escaped:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;He said &quot;What\\&apos;s up?&quot;&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;He said \\&quot;What&apos;s up?\\&quot;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Speed:&lt;/strong&gt;&lt;br&gt;\nI would not put too much weight on single quotes being faster than double quotes. They probably are faster in certain situations. Here&apos;s an article &lt;a href=&quot;https://web.archive.org/web/20170703004051/https://www.phplens.com/lens/php-book/optimizing-debugging-php.php&quot; rel=&quot;noreferrer&quot;&gt;explaining one manner in which single and double quotes are essentially equally fast since PHP 4.3&lt;/a&gt; (&lt;code&gt;Useless Optimizations&lt;/code&gt; toward the bottom, section &lt;code&gt;C&lt;/code&gt;). Also, this &lt;a href=&quot;https://www.phpbench.com/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;benchmarks page&lt;/strong&gt;&lt;/a&gt; has a single vs double quote comparison. Most of the comparisons are the same. There is one comparison where double quotes are slower than single quotes.&lt;/p&gt;\n    ","\n&lt;p&gt;Things get evaluated in double quotes but not in single:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$s&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;dollars&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;This costs a lot of $s.&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// This costs a lot of $s.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This costs a lot of &lt;span class=&quot;hljs-subst&quot;&gt;$s&lt;/span&gt;.&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// This costs a lot of dollars.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;&lt;code&gt;&apos;&lt;/code&gt; Single quoted&lt;/h1&gt;\n\n&lt;p&gt;The simplest way to specify a string is to enclose it in single quotes. Single quote is generally faster, and everything quoted inside treated as plain string.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Start with a simple string&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;String\\&apos;s apostrophe&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;String with a php variable&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;&lt;code&gt;&quot;&lt;/code&gt; Double quoted&lt;/h1&gt;\n\n&lt;p&gt;Use double quotes in PHP to avoid having to use the period to separate code (Note: Use curly braces &lt;code&gt;{}&lt;/code&gt; to include variables if you do not want to use concatenation (&lt;code&gt;.&lt;/code&gt;) operator) in string.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Start with a simple string&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;String&apos;s apostrophe&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;String with a php variable &lt;span class=&quot;hljs-subst&quot;&gt;{$name}&lt;/span&gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Is there a performance benefit single quote vs double quote in PHP?&lt;/h2&gt;\n\n&lt;p&gt;Yes. It is slightly faster to use single quotes.&lt;/p&gt;\n\n&lt;p&gt;PHP won&apos;t use additional processing to interpret what is inside the single quote. when you use double quotes PHP has to parse to check if there are any variables within the string.&lt;/p&gt;\n    ","\n&lt;p&gt;A single-quoted string does not have variables within it interpreted.  A double-quoted string does.&lt;/p&gt;\n\n&lt;p&gt;Also, a double-quoted string can contain apostrophes without backslashes, while a single-quoted string can contain unescaped quotation marks.&lt;/p&gt;\n\n&lt;p&gt;The single-quoted strings are faster at runtime because they do not need to be parsed.&lt;/p&gt;\n    ","\n&lt;p&gt;In PHP, both &lt;code&gt;&apos;my name&apos;&lt;/code&gt; and &lt;code&gt;&quot;my name&quot;&lt;/code&gt; are string. You can read more about it &lt;a href=&quot;http://www.php.net/manual/en/book.strings.php&quot; rel=&quot;noreferrer&quot;&gt;at the PHP manual&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Thing you should know are&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;my &lt;span class=&quot;hljs-subst&quot;&gt;$a&lt;/span&gt;&quot;&lt;/span&gt;; == &lt;span class=&quot;hljs-string&quot;&gt;&apos;my name&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$c&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;my $a&apos;&lt;/span&gt;; != &lt;span class=&quot;hljs-string&quot;&gt;&apos;my name&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In PHP, people use single quote to define a constant string, like &lt;code&gt;&apos;a&apos;&lt;/code&gt;, &lt;code&gt;&apos;my name&apos;&lt;/code&gt;, &lt;code&gt;&apos;abc xyz&apos;&lt;/code&gt;, while using double quote to define a string contain identifier like &lt;code&gt;&quot;a $b $c $d&quot;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;And other thing is, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;my name&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is faster than&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;my name&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;my &apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is slower than&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;my &lt;span class=&quot;hljs-subst&quot;&gt;$a&lt;/span&gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is true for other used of string.&lt;/p&gt;\n    ","\n&lt;p&gt;Both kinds of enclosed characters are strings.  One type of quote is conveniently used to enclose the other type of quote.  &lt;code&gt;&quot;&apos;&quot;&lt;/code&gt;  and &lt;code&gt;&apos;&quot;&apos;&lt;/code&gt;.   The biggest difference between the types of quotes is that enclosed identifier references are substituted for inside double quotes, but not inside single quotes.&lt;/p&gt;\n    ","\n&lt;p&gt;Some might say that I&apos;m a little off-topic, but here it is anyway:&lt;/p&gt;\n&lt;p&gt;You don&apos;t necessarily have to choose because of your string&apos;s content between:&lt;br&gt;\n&lt;code&gt;echo &quot;It&apos;s \\&quot;game\\&quot; time.&quot;;&lt;/code&gt; or &lt;code&gt;echo &apos;It\\&apos;s &quot;game&quot; time.&apos;;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;If you&apos;re familiar with the use of the english quotation marks, and the correct character for the apostrophe, you can use either double or single quotes, because it won&apos;t matter anymore:&lt;br&gt;\n&lt;code&gt;echo &quot;Its game time.&quot;;&lt;/code&gt; and &lt;code&gt;echo &apos;Its game time.&apos;;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Of course you can also add variables if needed. Just don&apos;t forget that they get evaluated only when in double quotes!&lt;/p&gt;\n    "]},"randomTags":[{"name":"oracle","slug":"oracle"},{"name":"pygame2","slug":"pygame2"},{"name":"terminate","slug":"terminate"},{"name":"date","slug":"date"},{"name":"pivot-table","slug":"pivot-table"},{"name":"invoke","slug":"invoke"},{"name":"gets","slug":"gets"},{"name":"apache","slug":"apache"},{"name":"directory","slug":"directory"},{"name":"standards","slug":"standards"},{"name":"sticky-footer","slug":"sticky-footer"},{"name":"return-value","slug":"return-value"},{"name":"prototype","slug":"prototype"},{"name":"hash","slug":"hash"},{"name":"https","slug":"https"},{"name":"uitableview","slug":"uitableview"},{"name":"nosuchelementexception","slug":"nosuchelementexception"},{"name":"linked-list","slug":"linked-list"},{"name":"serialization","slug":"serialization"},{"name":"jquery-selectors","slug":"jquery-selectors"}]},"__N_SSG":true}