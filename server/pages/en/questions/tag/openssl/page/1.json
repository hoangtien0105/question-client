{"pageProps":{"data":{"count":1,"rows":[{"id":526,"title":"How to generate a self-signed SSL certificate using OpenSSL? [closed]","slug":"how-to-generate-a-self-signed-ssl-certificate-using-openssl-closed-1657388298626","postType":"QUESTION","createdAt":"2022-07-09T17:38:18.000Z","updatedAt":"2022-07-09T17:38:18.000Z","tags":[{"id":2586,"name":"openssl","slug":"openssl","createdAt":"2022-07-09T17:38:18.000Z","updatedAt":"2022-07-09T17:38:18.000Z","Questions_Tags":{"questionId":526,"tagId":2586}}]}]},"slug":"openssl","page":"1","answers":{"526":["\n&lt;p&gt;You can do that in one command:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 365\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can also add &lt;code&gt;-nodes&lt;/code&gt; (short for &quot;no DES&quot;) if you don&apos;t want to protect your private key with a passphrase. Otherwise it will prompt you for &quot;at least a 4 character&quot; password.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;days&lt;/code&gt; parameter (365) you can replace with any number to affect the expiration date. It will then prompt you for things like &quot;Country Name&quot;, but you can just hit &lt;kbd&gt;Enter&lt;/kbd&gt; and accept the defaults.&lt;/p&gt;\n&lt;p&gt;Add &lt;code&gt;-subj &apos;/CN=localhost&apos;&lt;/code&gt; to suppress questions about the contents of the certificate (replace &lt;code&gt;localhost&lt;/code&gt; with your desired domain).&lt;/p&gt;\n&lt;p&gt;Self-signed certificates are not validated with any third party unless you import them to the browsers previously. If you need more security, you should use a certificate signed by a &lt;a href=&quot;https://en.wikipedia.org/wiki/Certificate_authority&quot; rel=&quot;nofollow noreferrer&quot;&gt;certificate authority&lt;/a&gt; (CA).&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;Am I missing something? Is this the correct way to build a self-signed certificate?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;It&apos;s easy to create a self-signed certificate. You just use the &lt;code&gt;openssl req&lt;/code&gt; command. It can be tricky to create one that can be consumed by the largest selection of clients, like browsers and command line tools.&lt;/p&gt;\n&lt;p&gt;It&apos;s difficult because the browsers have their own set of requirements, and they are more restrictive than the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force&quot; rel=&quot;noreferrer&quot;&gt;IETF&lt;/a&gt;. The requirements used by browsers are documented at the &lt;a href=&quot;https://cabforum.org/&quot; rel=&quot;noreferrer&quot;&gt;CA/Browser Forums&lt;/a&gt; (see references below). The restrictions arise in two key areas: (1) trust anchors, and (2) DNS names.&lt;/p&gt;\n&lt;p&gt;Modern browsers (like the warez we&apos;re using in 2014/2015) want a certificate that chains back to a trust anchor, and they want DNS names to be presented in particular ways in the certificate. And browsers are actively moving against self-signed server certificates.&lt;/p&gt;\n&lt;p&gt;Some browsers don&apos;t exactly make it easy to import a self-signed server certificate. In fact, you can&apos;t with some browsers, like Android&apos;s browser. So the complete solution is to become your own authority.&lt;/p&gt;\n&lt;p&gt;In the absence of becoming your own authority, you have to get the DNS names right to give the certificate the greatest chance of success. But I would encourage you to become your own authority. It&apos;s easy to become your own authority, and it will sidestep all the trust issues (who better to trust than yourself?).&lt;/p&gt;\n&lt;hr&gt;\n&lt;blockquote&gt;\n&lt;p&gt;This is probably not the site you are looking for!&lt;br&gt;\nThe site&apos;s security certificate is not trusted!&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This is because browsers use a predefined list of trust anchors to validate server certificates. A self-signed certificate does not chain back to a trusted anchor.&lt;/p&gt;\n&lt;p&gt;The best way to avoid this is:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Create your own authority (i.e., become a &lt;a href=&quot;https://en.wikipedia.org/wiki/Certificate_authority&quot; rel=&quot;noreferrer&quot;&gt;CA&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;Create a certificate signing request (CSR) for the server&lt;/li&gt;\n&lt;li&gt;Sign the server&apos;s CSR with your CA key&lt;/li&gt;\n&lt;li&gt;Install the server certificate on the server&lt;/li&gt;\n&lt;li&gt;Install the CA certificate on the client&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Step 1 - &lt;em&gt;Create your own authority&lt;/em&gt; just means to create a self-signed certificate with &lt;code&gt;CA: true&lt;/code&gt; and proper key usage. That means the &lt;em&gt;Subject&lt;/em&gt; and &lt;em&gt;Issuer&lt;/em&gt; are the same entity, CA is set to true in &lt;em&gt;Basic Constraints&lt;/em&gt; (it should also be marked as critical), key usage is &lt;code&gt;keyCertSign&lt;/code&gt; and &lt;code&gt;crlSign&lt;/code&gt; (if you are using CRLs), and the &lt;em&gt;Subject Key Identifier&lt;/em&gt; (SKI) is the same as the &lt;em&gt;Authority Key Identifier&lt;/em&gt; (AKI).&lt;/p&gt;\n&lt;p&gt;To become your own certificate authority, see *&lt;a href=&quot;https://stackoverflow.com/questions/21297139/how-do-you-sign-a-certificate-signing-request-with-your-certification-authority/21340898#21340898&quot;&gt;How do you sign a certificate signing request with your certification authority?&lt;/a&gt; on Stack Overflow. Then, import your CA into the Trust Store used by the browser.&lt;/p&gt;\n&lt;p&gt;Steps 2 - 4 are roughly what you do now for a public facing server when you enlist the services of a CA like &lt;a href=&quot;https://www.startssl.com/&quot; rel=&quot;noreferrer&quot;&gt;Startcom&lt;/a&gt; or &lt;a href=&quot;https://www.cacert.org/&quot; rel=&quot;noreferrer&quot;&gt;CAcert&lt;/a&gt;. Steps 1 and 5 allows you to avoid the third-party authority, and act as your own authority (who better to trust than yourself?).&lt;/p&gt;\n&lt;p&gt;The next best way to avoid the browser warning is to trust the server&apos;s certificate. But some browsers, like Android&apos;s default browser, do not let you do it. So it will never work on the platform.&lt;/p&gt;\n&lt;p&gt;The issue of browsers (and other similar user agents) &lt;em&gt;not&lt;/em&gt; trusting self-signed certificates is going to be a big problem in the Internet of Things (IoT). For example, what is going to happen when you connect to your thermostat or refrigerator to program it? The answer is, nothing good as far as the user experience is concerned.&lt;/p&gt;\n&lt;p&gt;The W3C&apos;s WebAppSec Working Group is starting to look at the issue.  See, for example, &lt;a href=&quot;http://lists.w3.org/Archives/Public/public-webappsec/2014Dec/0203.html&quot; rel=&quot;noreferrer&quot;&gt;Proposal: Marking HTTP As Non-Secure&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;blockquote&gt;\n&lt;p&gt;How to create a self-signed certificate with OpenSSL&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The commands below and the configuration file create a self-signed certificate (it also shows you how to create a signing request). They differ from other answers in one respect: the DNS names used for the self signed certificate are in the &lt;em&gt;Subject Alternate Name (SAN)&lt;/em&gt;, and not the &lt;em&gt;Common Name (CN)&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;The DNS names are placed in the SAN through the configuration file with the line &lt;code&gt;subjectAltName = @alternate_names&lt;/code&gt; (there&apos;s no way to do it through the command line). Then there&apos;s an &lt;code&gt;alternate_names&lt;/code&gt; section in the configuration file (you should tune this to suit your taste):&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;[ alternate_names ]\n\nDNS.1       = example.com\nDNS.2       = www.example.com\nDNS.3       = mail.example.com\nDNS.4       = ftp.example.com\n\n# Add these if you need them. But usually you don&apos;t want them or\n#   need them in production. You may need them for development.\n# DNS.5       = localhost\n# DNS.6       = localhost.localdomain\n# IP.1        = 127.0.0.1\n# IP.2        = ::1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s important to put DNS name in the SAN and not the CN, because &lt;em&gt;both&lt;/em&gt; the IETF and the CA/Browser Forums specify the practice. They also specify that DNS names in the CN are deprecated (but not prohibited). &lt;em&gt;If&lt;/em&gt; you put a DNS name in the CN, then it &lt;em&gt;must&lt;/em&gt; be included in the SAN under the CA/B policies. So you can&apos;t avoid using the Subject Alternate Name.&lt;/p&gt;\n&lt;p&gt;If you don&apos;t do put DNS names in the SAN, then the certificate will fail to validate under a browser and other user agents which follow the CA/Browser Forum guidelines.&lt;/p&gt;\n&lt;p&gt;Related: browsers follow the CA/Browser Forum policies; and not the IETF policies. That&apos;s one of the reasons a certificate created with OpenSSL (which generally follows the IETF) sometimes does not validate under a browser (browsers follow the CA/B). They are different standards, they have different issuing policies and different validation requirements.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Create a self signed certificate&lt;/strong&gt; (notice the addition of &lt;code&gt;-x509&lt;/code&gt; option):&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl req -config example-com.conf -new -x509 -sha256 -newkey rsa:2048 -nodes \\\n    -keyout example-com.key.pem -days 365 -out example-com.cert.pem\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Create a signing request&lt;/strong&gt; (notice the lack of &lt;code&gt;-x509&lt;/code&gt; option):&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl req -config example-com.conf -new -sha256 -newkey rsa:2048 -nodes \\\n    -keyout example-com.key.pem -days 365 -out example-com.req.pem\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Print a self-signed certificate&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl x509 -in example-com.cert.pem -text -noout\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Print a signing request&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl req -in example-com.req.pem -text -noout\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Configuration file (passed via &lt;code&gt;-config&lt;/code&gt; option)&lt;/strong&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;[ req ]\ndefault_bits        = 2048\ndefault_keyfile     = server-key.pem\ndistinguished_name  = subject\nreq_extensions      = req_ext\nx509_extensions     = x509_ext\nstring_mask         = utf8only\n\n# The Subject DN can be formed using X501 or RFC 4514 (see RFC 4519 for a description).\n#   Its sort of a mashup. For example, RFC 4514 does not provide emailAddress.\n[ subject ]\ncountryName         = Country Name (2 letter code)\ncountryName_default     = US\n\nstateOrProvinceName     = State or Province Name (full name)\nstateOrProvinceName_default = NY\n\nlocalityName            = Locality Name (eg, city)\nlocalityName_default        = New York\n\norganizationName         = Organization Name (eg, company)\norganizationName_default    = Example, LLC\n\n# Use a friendly name here because it&apos;s presented to the user. The server&apos;s DNS\n#   names are placed in Subject Alternate Names. Plus, DNS names here is deprecated\n#   by both IETF and CA/Browser Forums. If you place a DNS name here, then you\n#   must include the DNS name in the SAN too (otherwise, Chrome and others that\n#   strictly follow the CA/Browser Baseline Requirements will fail).\ncommonName          = Common Name (e.g. server FQDN or YOUR name)\ncommonName_default      = Example Company\n\nemailAddress            = Email Address\nemailAddress_default        = test@example.com\n\n# Section x509_ext is used when generating a self-signed certificate. I.e., openssl req -x509 ...\n[ x509_ext ]\n\nsubjectKeyIdentifier        = hash\nauthorityKeyIdentifier    = keyid,issuer\n\n# You only need digitalSignature below. *If* you don&apos;t allow\n#   RSA Key transport (i.e., you use ephemeral cipher suites), then\n#   omit keyEncipherment because that&apos;s key transport.\nbasicConstraints        = CA:FALSE\nkeyUsage            = digitalSignature, keyEncipherment\nsubjectAltName          = @alternate_names\nnsComment           = &quot;OpenSSL Generated Certificate&quot;\n\n# RFC 5280, Section 4.2.1.12 makes EKU optional\n#   CA/Browser Baseline Requirements, Appendix (B)(3)(G) makes me confused\n#   In either case, you probably only need serverAuth.\n# extendedKeyUsage    = serverAuth, clientAuth\n\n# Section req_ext is used when generating a certificate signing request. I.e., openssl req ...\n[ req_ext ]\n\nsubjectKeyIdentifier        = hash\n\nbasicConstraints        = CA:FALSE\nkeyUsage            = digitalSignature, keyEncipherment\nsubjectAltName          = @alternate_names\nnsComment           = &quot;OpenSSL Generated Certificate&quot;\n\n# RFC 5280, Section 4.2.1.12 makes EKU optional\n#   CA/Browser Baseline Requirements, Appendix (B)(3)(G) makes me confused\n#   In either case, you probably only need serverAuth.\n# extendedKeyUsage    = serverAuth, clientAuth\n\n[ alternate_names ]\n\nDNS.1       = example.com\nDNS.2       = www.example.com\nDNS.3       = mail.example.com\nDNS.4       = ftp.example.com\n\n# Add these if you need them. But usually you don&apos;t want them or\n#   need them in production. You may need them for development.\n# DNS.5       = localhost\n# DNS.6       = localhost.localdomain\n# DNS.7       = 127.0.0.1\n\n# IPv6 localhost\n# DNS.8     = ::1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You may need to do the following for Chrome. Otherwise &lt;a href=&quot;https://superuser.com/questions/1202498/create-self-signed-certificate-with-subjectaltname-to-fix-missing-subjectaltnam/1202506#1202506&quot;&gt;Chrome may complain a &lt;em&gt;Common Name&lt;/em&gt; is invalid (&lt;code&gt;ERR_CERT_COMMON_NAME_INVALID&lt;/code&gt;)&lt;/a&gt;. I&apos;m not sure what the relationship is between an IP address in the SAN and a CN in this instance.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;# IPv4 localhost\n# IP.1       = 127.0.0.1\n\n# IPv6 localhost\n# IP.2     = ::1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;There are other rules concerning the handling of DNS names in X.509/PKIX certificates. Refer to these documents for the rules:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;RFC 5280, &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5280&quot; rel=&quot;noreferrer&quot;&gt;Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;RFC 6125, &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6125&quot; rel=&quot;noreferrer&quot;&gt;Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;RFC 6797, Appendix A, &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6797&quot; rel=&quot;noreferrer&quot;&gt;HTTP Strict Transport Security (HSTS)&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;RFC 7469, &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7469&quot; rel=&quot;noreferrer&quot;&gt;Public Key Pinning Extension for HTTP&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;CA/Browser Forum &lt;a href=&quot;https://cabforum.org/baseline-requirements-documents/&quot; rel=&quot;noreferrer&quot;&gt;Baseline Requirements&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;CA/Browser Forum &lt;a href=&quot;https://cabforum.org/extended-validation-2/&quot; rel=&quot;noreferrer&quot;&gt;Extended Validation Guidelines&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;RFC 6797 and RFC 7469 are listed, because they are more restrictive than the other RFCs and CA/B documents. RFCs 6797 and 7469 &lt;em&gt;do not&lt;/em&gt; allow an IP address, either.&lt;/p&gt;\n    ","\n&lt;p&gt;As of 2022 with OpenSSL  1.1.1, the following command serves all your needs, including &lt;a href=&quot;https://www.openssl.org/docs/manmaster/man5/x509v3_config.html#Subject-Alternative-Name&quot; rel=&quot;noreferrer&quot;&gt;Subject Alternate Name (SAN)&lt;/a&gt;:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl req -x509 -newkey rsa:4096 -sha256 -days 3650 -nodes \\\n  -keyout example.key -out example.crt -subj &quot;/CN=example.com&quot; \\\n  -addext &quot;subjectAltName=DNS:example.com,DNS:www.example.net,IP:10.0.0.1&quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;On old systems with OpenSSL  1.1.0, such as Debian  9 or CentOS  7, a longer version of this command needs to be used:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl req -x509 -newkey rsa:4096 -sha256 -days 3650 -nodes \\\n  -keyout example.key -out example.crt -extensions san -config \\\n  &amp;lt;(echo &quot;[req]&quot;; \n    echo distinguished_name=req; \n    echo &quot;[san]&quot;; \n    echo subjectAltName=DNS:example.com,DNS:www.example.net,IP:10.0.0.1\n    ) \\\n  -subj &quot;/CN=example.com&quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Either command creates a certificate that is&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;valid for the (sub)domains &lt;code&gt;example.com&lt;/code&gt; and &lt;code&gt;www.example.net&lt;/code&gt; (SAN),&lt;/li&gt;\n&lt;li&gt;also valid for the IP address &lt;code&gt;10.0.0.1&lt;/code&gt; (SAN),&lt;/li&gt;\n&lt;li&gt;relatively strong (as of 2022) and&lt;/li&gt;\n&lt;li&gt;valid for &lt;code&gt;3650&lt;/code&gt; days (~10 years).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The following files are generated:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Private key: &lt;code&gt;example.key&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Certificate: &lt;code&gt;example.crt&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;All information is provided at the command line. There is &lt;strong&gt;no interactive input&lt;/strong&gt; that annoys you. There are &lt;strong&gt;no config files&lt;/strong&gt; you have to mess around with. All necessary steps are executed by a &lt;strong&gt;single OpenSSL invocation&lt;/strong&gt;: from private key generation up to the self-signed certificate.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;Remark #1: Crypto parameters&lt;/h3&gt;\n&lt;p&gt;Since the certificate is self-signed and needs to be accepted by users manually, it doesn&apos;t make sense to use a short expiration or weak cryptography.&lt;/p&gt;\n&lt;p&gt;In the future, you might want to use more than &lt;code&gt;4096&lt;/code&gt; bits for the RSA key and a hash algorithm stronger than &lt;code&gt;sha256&lt;/code&gt;, but as of 2022 these are sane values. They are sufficiently strong while being supported by all modern browsers.&lt;/p&gt;\n&lt;h3&gt;Remark #2: Parameter &quot;&lt;code&gt;-nodes&lt;/code&gt;&quot;&lt;/h3&gt;\n&lt;p&gt;Theoretically you could leave out the &lt;code&gt;-nodes&lt;/code&gt; parameter (which means &quot;no DES encryption&quot;), in which case &lt;code&gt;example.key&lt;/code&gt; would be encrypted with a password. However, this is almost never useful for a server installation, because you would either have to store the password on the server as well, or you&apos;d have to enter it manually on each reboot.&lt;/p&gt;\n&lt;h3&gt;Remark #3: See also&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://security.stackexchange.com/a/198409/133603&quot;&gt;Provide subjectAltName to openssl directly on command line&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://unix.stackexchange.com/a/333325/20407&quot;&gt;How to add multiple email addresses to an SSL certificate via the command line?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/34386471/19163&quot;&gt;More information about MSYS_NO_PATHCONV&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Here are the options described in &lt;a href=&quot;https://stackoverflow.com/a/10176685/456814&quot;&gt;@diegows&apos;s answer&lt;/a&gt;, described in more detail, from &lt;a href=&quot;https://www.openssl.org/docs/apps/req.html&quot; rel=&quot;noreferrer&quot;&gt;the documentation&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days XXX\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;pre&gt;&lt;code&gt;req\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;PKCS#10 certificate request and certificate generating utility.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-x509\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;this option outputs a self signed certificate instead of a certificate request.\n  This is typically used to generate a test certificate or a self signed root CA.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-newkey arg\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;this option creates a new certificate request and a new private key. The argument\n  takes one of several forms. &lt;strong&gt;rsa:nbits&lt;/strong&gt;, where &lt;strong&gt;nbits&lt;/strong&gt; is the number of bits,\n  generates an RSA key &lt;strong&gt;nbits&lt;/strong&gt; in size.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-keyout filename\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;this gives the filename to write the newly created private key to.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-out filename\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;This specifies the output filename to write to or standard output by default.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-days n\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;when the &lt;strong&gt;-x509&lt;/strong&gt; option is being used this specifies the number of days to certify\n  the certificate for. The default is 30 days.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-nodes\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;if this option is specified then if a private key is created it will not be encrypted.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The documentation is actually more detailed than the above; I just summarized it here.&lt;/p&gt;\n    ","\n&lt;p&gt;I can&apos;t comment, so I will put this as a separate answer. I found a few issues with the accepted one-liner answer:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The one-liner includes a passphrase in the key.&lt;/li&gt;\n&lt;li&gt;The one-liner uses SHA-1 which in many browsers throws warnings in console.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Here is a simplified version that removes the passphrase, ups the security to suppress warnings and includes a suggestion in comments to pass in -subj to remove the full question list:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;openssl genrsa -out server.key 2048\nopenssl rsa -in server.key -out server.key\nopenssl req -sha256 -new -key server.key -out server.csr -subj &apos;/CN=localhost&apos;\nopenssl x509 -req -sha256 -days 365 -in server.csr -signkey server.key -out server.crt\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Replace &apos;localhost&apos; with whatever domain you require.  You will need to run the first two commands one by one as OpenSSL will prompt for a passphrase.&lt;/p&gt;\n\n&lt;p&gt;To combine the two into a .pem file:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;cat server.crt server.key &amp;gt; cert.pem\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Modern browsers now throw a security error for otherwise well-formed self-signed certificates if they are missing a SAN (Subject Alternate Name). &lt;strong&gt;&lt;em&gt;OpenSSL does not provide a command-line way to specify this&lt;/em&gt;&lt;/strong&gt;, so many developers&apos; tutorials and bookmarks are suddenly outdated.&lt;/p&gt;\n\n&lt;p&gt;The quickest way to get running again is a short, stand-alone conf file:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Create an OpenSSL config file (example: &lt;code&gt;req.cnf&lt;/code&gt;)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[req]\ndistinguished_name = req_distinguished_name\nx509_extensions = v3_req\nprompt = no\n[req_distinguished_name]\nC = US\nST = VA\nL = SomeCity\nO = MyCompany\nOU = MyDivision\nCN = www.company.com\n[v3_req]\nkeyUsage = critical, digitalSignature, keyAgreement\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = www.company.com\nDNS.2 = company.com\nDNS.3 = company.net\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Create the certificate referencing this config file&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;openssl req -x509 -nodes -days 730 -newkey rsa:2048 \\\n -keyout cert.key -out cert.pem -config req.cnf -sha256\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;em&gt;Example config from &lt;a href=&quot;https://support.citrix.com/article/CTX135602_&quot; rel=&quot;noreferrer&quot;&gt;https://support.citrix.com/article/CTX135602&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I would recommend to add the &lt;strong&gt;-sha256&lt;/strong&gt; parameter, to use the SHA-2 hash algorithm, because major browsers are considering to show &quot;SHA-1 certificates&quot; as not secure.&lt;/p&gt;\n\n&lt;p&gt;The same command line from the accepted answer - @diegows with added -sha256&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;openssl req -x509 &lt;strong&gt;-sha256&lt;/strong&gt; -newkey rsa:2048 -keyout key.pem -out cert.pem -days XXX&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;More information in &lt;a href=&quot;http://googleonlinesecurity.blogspot.com/2014/09/gradually-sunsetting-sha-1.html&quot; rel=&quot;noreferrer&quot;&gt;Google Security blog&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Update May 2018.&lt;/strong&gt; As many noted in the comments that using SHA-2 does not add any security to a self-signed certificate. But I still recommend using it as a good habit of not using outdated / insecure cryptographic hash functions. Full explanation is available in &lt;em&gt;&lt;a href=&quot;https://security.stackexchange.com/questions/91913/why-is-it-fine-for-certificates-above-the-end-entity-certificate-to-be-sha1-base&quot;&gt;Why is it fine for certificates above the end-entity certificate to be SHA-1 based?&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I can`t comment so I add a separate answer.\nI tried to create a self-signed certificate for NGINX and it was easy, but when I wanted to add it to Chrome white list I had a problem. And my solution was to create a Root certificate and signed a child certificate by it.&lt;/p&gt;\n&lt;p&gt;So step by step.\nCreate file &lt;strong&gt;config_ssl_ca.cnf&lt;/strong&gt;\nNotice, config file has an option &lt;strong&gt;basicConstraints=CA:true&lt;/strong&gt; which means that this certificate is supposed to be root.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;This is a good practice, because you create it once and can reuse.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre&gt;&lt;code&gt;[ req ]\ndefault_bits = 2048\n\nprompt = no\ndistinguished_name=req_distinguished_name\nreq_extensions = v3_req\n\n[ req_distinguished_name ]\ncountryName=UA\nstateOrProvinceName=root region\nlocalityName=root city\norganizationName=Market(localhost)\norganizationalUnitName=roote department\ncommonName=market.localhost\nemailAddress=root_email@root.localhost\n\n[ alternate_names ]\nDNS.1        = market.localhost\nDNS.2        = www.market.localhost\nDNS.3        = mail.market.localhost\nDNS.4        = ftp.market.localhost\nDNS.5        = *.market.localhost\n\n[ v3_req ]\nkeyUsage=digitalSignature\nbasicConstraints=CA:true\nsubjectKeyIdentifier = hash\nsubjectAltName = @alternate_names\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Next config file for your child certificate will be call &lt;strong&gt;config_ssl.cnf&lt;/strong&gt;.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;[ req ]\ndefault_bits = 2048\n\nprompt = no\ndistinguished_name=req_distinguished_name\nreq_extensions = v3_req\n\n[ req_distinguished_name ]\ncountryName=UA\nstateOrProvinceName=Kyiv region\nlocalityName=Kyiv\norganizationName=market place\norganizationalUnitName=market place department\ncommonName=market.localhost\nemailAddress=email@market.localhost\n\n[ alternate_names ]\nDNS.1        = market.localhost\nDNS.2        = www.market.localhost\nDNS.3        = mail.market.localhost\nDNS.4        = ftp.market.localhost\nDNS.5        = *.market.localhost\n\n[ v3_req ]\nkeyUsage=digitalSignature\nbasicConstraints=CA:false\nsubjectAltName = @alternate_names\nsubjectKeyIdentifier = hash\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The first step - create Root key and certificate&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl genrsa -out ca.key 2048\nopenssl req -new -x509 -key ca.key -out ca.crt -days 365 -config config_ssl_ca.cnf\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The second step creates child key and file CSR - Certificate Signing Request. Because the idea is to sign the child certificate by root and get a correct certificate&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl genrsa -out market.key 2048\nopenssl req -new -sha256 -key market.key -config config_ssl.cnf -out market.csr\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Open Linux terminal and do this command&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;echo 00 &amp;gt; ca.srl\ntouch index.txt\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;strong&gt;ca.srl&lt;/strong&gt; text file containing the next serial number to use in hex.\nMandatory.  This file must be present and contain a valid serial number.&lt;/p&gt;\n&lt;p&gt;Last Step, create one more config file and call it &lt;strong&gt;config_ca.cnf&lt;/strong&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;# we use &apos;ca&apos; as the default section because we&apos;re usign the ca command\n[ ca ]\ndefault_ca = my_ca\n\n[ my_ca ]\n#  a text file containing the next serial number to use in hex. Mandatory.\n#  This file must be present and contain a valid serial number.\nserial = ./ca.srl\n\n# the text database file to use. Mandatory. This file must be present though\n# initially it will be empty.\ndatabase = ./index.txt\n\n# specifies the directory where new certificates will be placed. Mandatory.\nnew_certs_dir = ./\n\n# the file containing the CA certificate. Mandatory\ncertificate = ./ca.crt\n\n# the file contaning the CA private key. Mandatory\nprivate_key = ./ca.key\n\n# the message digest algorithm. Remember to not use MD5\ndefault_md = sha256\n\n# for how many days will the signed certificate be valid\ndefault_days = 365\n\n# a section with a set of variables corresponding to DN fields\npolicy = my_policy\n\n# MOST IMPORTANT PART OF THIS CONFIG\ncopy_extensions = copy\n\n[ my_policy ]\n# if the value is &quot;match&quot; then the field value must match the same field in the\n# CA certificate. If the value is &quot;supplied&quot; then it must be present.\n# Optional means it may be present. Any fields not mentioned are silently\n# deleted.\ncountryName = match\nstateOrProvinceName = supplied\norganizationName = supplied\ncommonName = market.localhost\norganizationalUnitName = optional\ncommonName = supplied\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You may ask, why so difficult, why we must create one more config to sign child certificate by root. The answer is simple because child certificate must have a SAN block - Subject Alternative Names.\nIf we sign the child certificate by &quot;openssl x509&quot; utils, the Root certificate will delete the SAN field in child certificate.\nSo we use &quot;openssl ca&quot; instead of &quot;openssl x509&quot; to avoid the deleting of the SAN field. We create a new config file and tell it to copy all extended fields &lt;strong&gt;copy_extensions = copy&lt;/strong&gt;.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl ca -config config_ca.cnf -out market.crt -in market.csr\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The program asks you 2 questions:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Sign the certificate? Say &quot;Y&quot;&lt;/li&gt;\n&lt;li&gt;1 out of 1 certificate requests certified, commit? Say &quot;Y&quot;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;In terminal you can see a sentence with the word &quot;Database&quot;, it means file index.txt which you create by the command &quot;touch&quot;. It will contain all information by all certificates you create by &quot;openssl ca&quot; util.\nTo check the certificate valid use:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl rsa -in market.key -check\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to see what inside in CRT:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl x509 -in market.crt -text -noout\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to see what inside in CSR:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl req -in market.csr -noout -text \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is the script I use on local boxes to set the SAN (subjectAltName) in self-signed certificates. &lt;/p&gt;\n\n&lt;p&gt;This script takes the domain name (example.com) and generates the SAN for *.example.com and example.com in the same certificate. The sections below are commented. Name the script (e.g. &lt;code&gt;generate-ssl.sh&lt;/code&gt;) and give it executable permissions. The files will be written to the same directory as the script.&lt;/p&gt;\n\n&lt;p&gt;Chrome 58 an onward requires SAN to be set in self-signed certificates.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash\n\n# Set the TLD domain we want to use\nBASE_DOMAIN=&quot;example.com&quot;\n\n# Days for the cert to live\nDAYS=1095\n\n# A blank passphrase\nPASSPHRASE=&quot;&quot;\n\n# Generated configuration file\nCONFIG_FILE=&quot;config.txt&quot;\n\ncat &amp;gt; $CONFIG_FILE &amp;lt;&amp;lt;-EOF\n[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\nx509_extensions = v3_req\ndistinguished_name = dn\n\n[dn]\nC = CA\nST = BC\nL = Vancouver\nO = Example Corp\nOU = Testing Domain\nemailAddress = webmaster@$BASE_DOMAIN\nCN = $BASE_DOMAIN\n\n[v3_req]\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = *.$BASE_DOMAIN\nDNS.2 = $BASE_DOMAIN\nEOF\n\n# The file name can be anything\nFILE_NAME=&quot;$BASE_DOMAIN&quot;\n\n# Remove previous keys\necho &quot;Removing existing certs like $FILE_NAME.*&quot;\nchmod 770 $FILE_NAME.*\nrm $FILE_NAME.*\n\necho &quot;Generating certs for $BASE_DOMAIN&quot;\n\n# Generate our Private Key, CSR and Certificate\n# Use SHA-2 as SHA-1 is unsupported from Jan 1, 2017\n\nopenssl req -new -x509 -newkey rsa:2048 -sha256 -nodes -keyout &quot;$FILE_NAME.key&quot; -days $DAYS -out &quot;$FILE_NAME.crt&quot; -passin pass:$PASSPHRASE -config &quot;$CONFIG_FILE&quot;\n\n# OPTIONAL - write an info to see the details of the generated crt\nopenssl x509 -noout -fingerprint -text &amp;lt; &quot;$FILE_NAME.crt&quot; &amp;gt; &quot;$FILE_NAME.info&quot;\n\n# Protect the key\nchmod 400 &quot;$FILE_NAME.key&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This script also writes an information file, so you can inspect the new certificate and verify the SAN is set properly.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;                ...\n                28:dd:b8:1e:34:b5:b1:44:1a:60:6d:e3:3c:5a:c4:\n                da:3d\n            Exponent: 65537 (0x10001)\n    X509v3 extensions:\n        X509v3 Subject Alternative Name: \n            DNS:*.example.com, DNS:example.com\nSignature Algorithm: sha256WithRSAEncryption\n     3b:35:5a:d6:9e:92:4f:fc:f4:f4:87:78:cd:c7:8d:cd:8c:cc:\n     ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you are using Apache, then you can reference the above certificate in your configuration file like so:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost _default_:443&amp;gt;\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/htdocs\n\n    SSLEngine on\n    SSLCertificateFile path/to/your/example.com.crt\n    SSLCertificateKeyFile path/to/your/example.com.key\n&amp;lt;/VirtualHost&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Remember to restart your Apache (or Nginx, or IIS) server for the new certificate to take effect.&lt;/p&gt;\n    ","\n&lt;p&gt;2017 one-liner:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;openssl req \\\n-newkey rsa:2048 \\\n-x509 \\\n-nodes \\\n-keyout server.pem \\\n-new \\\n-out server.pem \\\n-subj /CN=localhost \\\n-reqexts SAN \\\n-extensions SAN \\\n-config &amp;lt;(cat /System/Library/OpenSSL/openssl.cnf \\\n    &amp;lt;(printf &apos;[SAN]\\nsubjectAltName=DNS:localhost&apos;)) \\\n-sha256 \\\n-days 3650\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This also works in Chrome 57, as it provides the SAN, without having another configuration file.\nIt was taken from an answer &lt;a href=&quot;https://github.com/webpack/webpack-dev-server/issues/854&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;This creates a single .pem file that contains both the private key and cert. You can move them to separate .pem files if needed.&lt;/p&gt;\n    ","\n&lt;p&gt;One-liner version 2017:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;CentOS:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;openssl req -x509 -nodes -sha256 -newkey rsa:2048 \\\n-keyout localhost.key -out localhost.crt \\\n-days 3650 \\\n-subj &quot;CN=localhost&quot; \\\n-reqexts SAN -extensions SAN \\\n-config &amp;lt;(cat /etc/pki/tls/openssl.cnf &amp;lt;(printf &quot;\\n[SAN]\\nsubjectAltName=IP:127.0.0.1,DNS:localhost&quot;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Ubuntu:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;openssl req -x509 -nodes -sha256 -newkey rsa:2048 \\\n-keyout localhost.key -out localhost.crt \\\n-days 3650 \\\n-subj &quot;/CN=localhost&quot; \\\n-reqexts SAN -extensions SAN \\\n-config &amp;lt;(cat /etc/ssl/openssl.cnf &amp;lt;(printf &quot;\\n[SAN]\\nsubjectAltName=IP:127.0.0.1,DNS:localhost&quot;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit: added prepending Slash to &apos;subj&apos; option for Ubuntu.&lt;/p&gt;\n    ","\n&lt;p&gt;One liner FTW. I like to keep it simple. Why not use one command that contains ALL the arguments needed? This is how I like it - this creates an x509 certificate and its PEM key:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;openssl req -x509 \\\n -nodes -days 365 -newkey rsa:4096 \\\n -keyout self.key.pem \\\n -out self-x509.crt \\\n -subj &quot;/C=US/ST=WA/L=Seattle/CN=example.com/emailAddress=someEmail@gmail.com&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That single command contains all the answers you would normally provide for the certificate details.  This way you can set the parameters and run the command, get your output - then go for coffee.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://scaleup.us/2017/09/10/create-self-signed-tls-certificates-pkcs8-key-x509-cert-graylog-gelf/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&amp;gt;&amp;gt; More here &amp;lt;&amp;lt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;openssl&lt;/code&gt; allows to generate self-signed certificate by a single command (&lt;code&gt;-newkey&lt;/code&gt;\ninstructs to generate a private key and &lt;code&gt;-x509&lt;/code&gt; instructs to issue a self-signed\ncertificate instead of a signing request)::&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl req -x509 -newkey rsa:4096 \\\n-keyout my.key -passout pass:123456 -out my.crt \\\n-days 365 \\\n-subj /CN=localhost/O=home/C=US/emailAddress=me@mail.internal \\\n-addext &quot;subjectAltName = DNS:localhost,DNS:web.internal,email:me@mail.internal&quot; \\\n-addext keyUsage=digitalSignature -addext extendedKeyUsage=serverAuth\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can generate a private key and construct a self-signing certificate in separate steps::&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl genrsa -out my.key -passout pass:123456 2048\n\nopenssl req -x509 \\\n-key my.key -passin pass:123456 -out my.csr \\\n-days 3650 \\\n-subj /CN=localhost/O=home/C=US/emailAddress=me@mail.internal \\\n-addext &quot;subjectAltName = DNS:localhost,DNS:web.internal,email:me@mail.internal&quot; \\\n-addext keyUsage=digitalSignature -addext extendedKeyUsage=serverAuth\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Review the resulting certificate::&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl x509 -text -noout -in my.crt\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Java &lt;code&gt;keytool&lt;/code&gt; creates PKCS#12 store::&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;keytool -genkeypair -keystore my.p12 -alias master \\\n-storetype pkcs12 -keyalg RSA -keysize 2048 -validity 3650 \\\n-storepass 123456 \\\n-dname &quot;CN=localhost,O=home,C=US&quot; \\\n-ext &apos;san=dns:localhost,dns:web.internal,email:me@mail.internal&apos;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To export the self-signed certificate::&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;keytool -exportcert -keystore my.p12 -file my.crt \\\n-alias master -rfc -storepass 123456\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Review the resulting certificate::&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;keytool -printcert -file my.crt\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;certtool&lt;/code&gt; from GnuTLS doesn&apos;t allow passing different attributes from CLI. I don&apos;t like to mess with config files ((&lt;/p&gt;\n    ","\n&lt;p&gt;You have the general procedure correct. The syntax for the command is below.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;openssl req -new -key {private key file} -out {output file}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, the warnings are displayed, because the browser was not able to verify the identify by validating the certificate with a known Certificate Authority (CA). &lt;/p&gt;\n\n&lt;p&gt;As this is a self-signed certificate there is no CA and you can safely ignore the warning and proceed. Should you want to get a real certificate that will be recognizable by anyone on the public Internet then the procedure is below.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Generate a private key&lt;/li&gt;\n&lt;li&gt;Use that private key to create a CSR file&lt;/li&gt;\n&lt;li&gt;Submit CSR to CA (Verisign or others, etc.)&lt;/li&gt;\n&lt;li&gt;Install received cert from CA on web server&lt;/li&gt;\n&lt;li&gt;Add other certs to authentication chain depending on the type cert&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I have more details about this in a post at &lt;em&gt;&lt;a href=&quot;https://bigthinkingapplied.com/secure-the-connection-installing-certificates-on-3-common-web-servers/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Securing the Connection: Creating a Security Certificate with OpenSSL&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;h2&gt;Generate keys&lt;/h2&gt;\n  \n  &lt;p&gt;I am using &lt;code&gt;/etc/mysql&lt;/code&gt; for cert storage because &lt;code&gt;/etc/apparmor.d/usr.sbin.mysqld&lt;/code&gt; contains &lt;code&gt;/etc/mysql/*.pem r&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sudo su -\ncd /etc/mysql\nopenssl genrsa -out ca-key.pem 2048;\nopenssl req -new -x509 -nodes -days 1000 -key ca-key.pem -out ca-cert.pem;\nopenssl req -newkey rsa:2048 -days 1000 -nodes -keyout server-key.pem -out server-req.pem;\nopenssl x509 -req -in server-req.pem -days 1000 -CA ca-cert.pem -CAkey ca-key.pem -set_serial 01 -out server-cert.pem;\nopenssl req -newkey rsa:2048 -days 1000 -nodes -keyout client-key.pem -out client-req.pem;\nopenssl x509 -req -in client-req.pem -days 1000 -CA ca-cert.pem -CAkey ca-key.pem -set_serial 01 -out client-cert.pem;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;h2&gt;Add configuration&lt;/h2&gt;\n  \n  &lt;p&gt;&lt;code&gt;/etc/mysql/my.cnf&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[client]\nssl-ca=/etc/mysql/ca-cert.pem\nssl-cert=/etc/mysql/client-cert.pem\nssl-key=/etc/mysql/client-key.pem\n\n[mysqld]\nssl-ca=/etc/mysql/ca-cert.pem\nssl-cert=/etc/mysql/server-cert.pem\nssl-key=/etc/mysql/server-key.pem\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;On my setup, Ubuntu server logged to: &lt;code&gt;/var/log/mysql/error.log&lt;/code&gt;&lt;/p&gt;\n\n&lt;h1&gt;Follow up notes:&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;SSL error: Unable to get certificate from &apos;...&apos;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://ubuntuforums.org/showthread.php?t=1121458&amp;amp;p=7048357#post7048357&quot; rel=&quot;nofollow noreferrer&quot;&gt;MySQL might be denied read access to your certificate file if it is not in apparmors configuration&lt;/a&gt;. As mentioned in the previous steps^, save all our certificates as &lt;code&gt;.pem&lt;/code&gt; files in the &lt;code&gt;/etc/mysql/&lt;/code&gt; directory which is approved by default by apparmor (or modify your apparmor/SELinux to allow access to wherever you stored them.)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;SSL error: Unable to get private key&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://askubuntu.com/a/439274/250556&quot;&gt;Your MySQL server version may not support the default &lt;code&gt;rsa:2048&lt;/code&gt; format&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Convert generated &lt;code&gt;rsa:2048&lt;/code&gt; to plain &lt;code&gt;rsa&lt;/code&gt; with:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;openssl rsa -in server-key.pem -out server-key.pem\nopenssl rsa -in client-key.pem -out client-key.pem\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mifosforge.jira.com/wiki/display/MIFOS/How+to+enable+MySQL+SSL+on+Ubuntu&quot; rel=&quot;nofollow noreferrer&quot;&gt;Check if local server supports SSL&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre&gt;&lt;code&gt;mysql -u root -p\nmysql&amp;gt; show variables like &quot;%ssl%&quot;;\n+---------------+----------------------------+\n| Variable_name | Value                      |\n+---------------+----------------------------+\n| have_openssl  | YES                        |\n| have_ssl      | YES                        |\n| ssl_ca        | /etc/mysql/ca-cert.pem     |\n| ssl_capath    |                            |\n| ssl_cert      | /etc/mysql/server-cert.pem |\n| ssl_cipher    |                            |\n| ssl_key       | /etc/mysql/server-key.pem  |\n+---------------+----------------------------+\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://kb.berkeley.edu/page.php?id=23112&quot; rel=&quot;nofollow noreferrer&quot;&gt;Verifying a connection to the database is SSL encrypted&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h2&gt;Verifying connection&lt;/h2&gt;\n  \n  &lt;p&gt;When logged in to the MySQL instance, you can issue the query:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;show status like &apos;Ssl_cipher&apos;;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;If your connection is not encrypted, the result will be blank:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show status like &apos;Ssl_cipher&apos;;\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| Ssl_cipher    |       |\n+---------------+-------+\n1 row in set (0.00 sec)\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;Otherwise, it would show a non-zero length string for the cypher in use:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show status like &apos;Ssl_cipher&apos;;\n+---------------+--------------------+\n| Variable_name | Value              |\n+---------------+--------------------+\n| Ssl_cipher    | DHE-RSA-AES256-SHA |\n+---------------+--------------------+\n1 row in set (0.00 sec)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/grant.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Require ssl for specific user&apos;s connection&lt;/a&gt; (&apos;require ssl&apos;):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;ul&gt;\n  &lt;li&gt;SSL&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;p&gt;Tells the server to permit only SSL-encrypted connections for the account.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;GRANT ALL PRIVILEGES ON test.* TO &apos;root&apos;@&apos;localhost&apos;\n  REQUIRE SSL;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;To connect, the client must specify the --ssl-ca option to authenticate the server certificate, and may additionally specify the --ssl-key and --ssl-cert options. If neither --ssl-ca option nor --ssl-capath option is specified, the client does not authenticate the server certificate.&lt;/p&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Alternate link: Lengthy tutorial in &lt;em&gt;&lt;a href=&quot;http://www.madirish.net/214&quot; rel=&quot;nofollow noreferrer&quot;&gt;Secure PHP Connections to MySQL with SSL&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;As has been discussed in detail, &lt;a href=&quot;https://en.wikipedia.org/wiki/Self-signed_certificate&quot; rel=&quot;nofollow noreferrer&quot;&gt;self-signed certificates&lt;/a&gt; &lt;a href=&quot;https://www.globalsign.com/en/ssl-information-center/dangers-self-signed-certificates/&quot; rel=&quot;nofollow noreferrer&quot;&gt;are not trusted for the Internet&lt;/a&gt;. You can &lt;a href=&quot;https://stackoverflow.com/questions/7580508/getting-chrome-to-accept-self-signed-localhost-certificate&quot;&gt;add your self-signed certificate to many but not all browsers&lt;/a&gt;. Alternatively you can &lt;a href=&quot;https://stackoverflow.com/questions/21297139/how-do-you-sign-a-certificate-signing-request-with-your-certification-authority/21340898#21340898&quot;&gt;become your own certificate authority&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The primary reason one does not want to get a signed certificate from a certificate authority is cost -- &lt;a href=&quot;https://www.websecurity.symantec.com/buy-renew?ef_id=Cj0KCQiAwc7jBRD8ARIsAKSUBHL3u_wl0kyXRrvQM3Fj2H9j9T6FogZsQVjmxinnw6KIf9xVvUP9O64aAj0KEALw_wcB:G:s&amp;amp;s_kwcid=AL!6100!3!225648135095!e!!g!!symantec%20ssl%20certificate&amp;amp;gclid=Cj0KCQiAwc7jBRD8ARIsAKSUBHL3u_wl0kyXRrvQM3Fj2H9j9T6FogZsQVjmxinnw6KIf9xVvUP9O64aAj0KEALw_wcB&quot; rel=&quot;nofollow noreferrer&quot;&gt;Symantec charges between $995 - $1,999 per year for certificates -- just for a certificate intended for internal network, Symantec charges $399 per year&lt;/a&gt;. That cost is easy to justify if you are processing credit card payments or work for the profit center of a highly profitable company. It is more than many can afford for a personal project one is creating on the internet, or for a non-profit running on a minimal budget, or if one works in a cost center of an organization -- cost centers always try to do more with less.&lt;/p&gt;\n\n&lt;p&gt;An alternative is to use &lt;a href=&quot;https://certbot.eff.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;certbot&lt;/a&gt; (see &lt;a href=&quot;https://certbot.eff.org/about/&quot; rel=&quot;nofollow noreferrer&quot;&gt;about certbot&lt;/a&gt;). Certbot is an easy-to-use automatic client that fetches and deploys SSL/TLS certificates for your web server.&lt;/p&gt;\n\n&lt;p&gt;If you setup certbot, you can enable it to create and maintain a certificate for you issued by the &lt;a href=&quot;https://letsencrypt.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Lets Encrypt&lt;/a&gt; certificate authority.&lt;/p&gt;\n\n&lt;p&gt;I did this over the weekend for my organization. I installed the required packages for certbot on my server (Ubuntu 16.04) and then ran the command necessary to setup and enable certbot. One likely needs a &lt;a href=&quot;https://certbot.eff.org/docs/using.html#dns-plugins&quot; rel=&quot;nofollow noreferrer&quot;&gt;DNS plugin&lt;/a&gt; for certbot - we are presently using &lt;a href=&quot;https://certbot-dns-digitalocean.readthedocs.io/en/stable/&quot; rel=&quot;nofollow noreferrer&quot;&gt;DigitalOcean&lt;/a&gt; though may be migrating to another service soon.&lt;/p&gt;\n\n&lt;p&gt;Note that some of the instructions were not quite right and took a little poking and time with Google to figure out. This took a fair amount of my time the first time but now I think I could do it in minutes.&lt;/p&gt;\n\n&lt;p&gt;For DigitalOcean, one area I struggled was when I was prompted to input the path to your DigitalOcean credentials INI file. What the script is referring to is the &lt;a href=&quot;https://cloud.digitalocean.com/account/api/tokens&quot; rel=&quot;nofollow noreferrer&quot;&gt;Applications &amp;amp; API&lt;/a&gt; page and the Tokens/Key tab on that page. You need to have or generate a personal access token (read and write) for DigitalOcean&apos;s API -- this is a 65 character hexadecimal string. This string then needs to be put into a file on the webserver from which you are running certbot. That file can have a comment as its first line (comments start with #). The seccond line is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;dns_digitalocean_token = 0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Once I figured out how to set up a read+write token for DigitalOcean&apos;s API, it was pretty easy to use certbot to setup a &lt;a href=&quot;https://en.wikipedia.org/wiki/Wildcard_certificate&quot; rel=&quot;nofollow noreferrer&quot;&gt;wildcard certificate&lt;/a&gt;. Note that one does not have to setup a wildcard certificate, one may instead specify each domain and sub-domain that one wants the certificate to appply to. It was the wildcard certificate that required the credentials INI file that contained the personal access token from DigitalOcean.&lt;/p&gt;\n\n&lt;p&gt;Note that public key certificates (also known as identity certificates or SSL certificates) expire and require renewal. Thus you will need to renew your certificate on a periodic (reoccurring) basis. The certbot documentation covers &lt;a href=&quot;https://certbot.eff.org/docs/using.html#renewing-certificates&quot; rel=&quot;nofollow noreferrer&quot;&gt;renewing certificates&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;My plan is to write a script to use the openssl command to get my certificate&apos;s expiration date and to trigger renewal when it is 30 days or less until it expires. I will then add this script to cron and run it once per day.&lt;/p&gt;\n\n&lt;p&gt;Here is the command to read your certificate&apos;s expiration date:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;root@prod-host:~# /usr/bin/openssl x509 -enddate -noout -in path-to-certificate-pem-file\nnotAfter=May 25 19:24:12 2019 GMT\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;this worked for me&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl req -x509 -nodes -subj &apos;/CN=localhost&apos;  -newkey rsa:4096 -keyout ./sslcert/key.pem -out ./sslcert/cert.pem -days 365\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;server.js&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;var fs = require(&apos;fs&apos;);\nvar path = require(&apos;path&apos;);\nvar http = require(&apos;http&apos;);\nvar https = require(&apos;https&apos;);\nvar compression = require(&apos;compression&apos;);\nvar express = require(&apos;express&apos;);\nvar app = express();\n\napp.use(compression());\napp.use(express.static(__dirname + &apos;/www&apos;));    \n\napp.get(&apos;/*&apos;, function(req,res) {\n  res.sendFile(path.join(__dirname+&apos;/www/index.html&apos;));\n});\n\n// your express configuration here\n\nvar httpServer = http.createServer(app);\nvar credentials = {\n    key: fs.readFileSync(&apos;./sslcert/key.pem&apos;, &apos;utf8&apos;),\n    cert: fs.readFileSync(&apos;./sslcert/cert.pem&apos;, &apos;utf8&apos;)\n};\nvar httpsServer = https.createServer(credentials, app);\n\nhttpServer.listen(8080);\nhttpsServer.listen(8443);\n\nconsole.log(`RUNNING ON  http://127.0.0.1:8080`);\nconsole.log(`RUNNING ON  http://127.0.0.1:8443`);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;After much of going around, playing with various solutions, still I faced the problem that issuing a self-signed certificate for localhost, gave me error&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;ERR_CERT_INVALID&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;When expanding the details, chrome said:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;You cannot visit localhost right now because the website sent\nscrambled credentials...&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;And the only ugly way to get through is to type (directly in this screen, without seeing any cursor for the text) :&lt;/p&gt;\n&lt;p&gt;(type in the keyboard) &lt;em&gt;&lt;strong&gt;thisisunsafe&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Which let me proceed.&lt;/p&gt;\n&lt;h4&gt;Until I found &lt;code&gt;extendedKeyUsage = serverAuth, clientAuth&lt;/code&gt;&lt;/h4&gt;\n&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;openssl genrsa -out localhost.key 2048&lt;/code&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;openssl req -key localhost.key -new -out localhost.csr&lt;/code&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;(click enter on everything and just fill in the common name (CN) with localhost or your other FQDN.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;put the following in a file named &lt;code&gt;v3.ext&lt;/code&gt; (edit whatever you need):&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre&gt;&lt;code&gt;subjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid:always,issuer:always\nbasicConstraints       = CA:TRUE\nkeyUsage               = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, keyCertSign\nextendedKeyUsage       = serverAuth, clientAuth\nsubjectAltName         = DNS:localhost, DNS:localhost.localdomain\nissuerAltName          = issuer:copy\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;5&quot;&gt;\n&lt;li&gt;&lt;code&gt;openssl x509 -req -in localhost.csr -signkey localhost.key -out localhost.pem -days 3650 -sha256 -extfile v3.ext&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;And voilà!\nYou can visit the website, expand &quot;Advanced&quot; and click &quot;Proceed to localhost (unsafe)&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;Generate a key without password and certificate for 10 years, the short way:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;openssl req  -x509 -nodes -new  -keyout server.key -out server.crt -days 3650 -subj &quot;/C=/ST=/L=/O=/OU=web/CN=www.server.com&quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;for the flag &lt;code&gt;-subj | -subject&lt;/code&gt; &lt;strong&gt;empty values are permitted&lt;/strong&gt; &lt;code&gt;-subj &quot;/C=/ST=/L=/O=/OU=web/CN=www.server.com&quot;&lt;/code&gt;, but you can sets more details as you like:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;C - Country Name (2 letter code)&lt;/li&gt;\n&lt;li&gt;ST - State&lt;/li&gt;\n&lt;li&gt;L - Locality Name (eg, city)&lt;/li&gt;\n&lt;li&gt;O - Organization Name&lt;/li&gt;\n&lt;li&gt;OU - Organizational Unit Name&lt;/li&gt;\n&lt;li&gt;CN - Common Name - &lt;strong&gt;required!&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;This very simple Python app that creates a self-signed certificate.\nCode:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;from OpenSSL import crypto, SSL\nfrom secrets import randbelow\nprint(&quot;Please know, if you make a mistake, you must restart the program.&quot;)\ndef cert_gen(\n    emailAddress=input(&quot;Enter Email Address: &quot;),\n    commonName=input(&quot;Enter Common Name: &quot;),\n    countryName=input(&quot;Enter Country Name (2 characters): &quot;),\n    localityName=input(&quot;Enter Locality Name: &quot;),\n    stateOrProvinceName=input(&quot;Enter State of Province Name: &quot;),\n    organizationName=input(&quot;Enter Organization Name: &quot;),\n    organizationUnitName=input(&quot;Enter Organization Unit Name: &quot;),\n    serialNumber=randbelow(1000000),\n    validityStartInSeconds=0,\n    validityEndInSeconds=10*365*24*60*60,\n    KEY_FILE = &quot;private.key&quot;,\n    CERT_FILE=&quot;selfsigned.crt&quot;):\n    #can look at generated file using openssl:\n    #openssl x509 -inform pem -in selfsigned.crt -noout -text\n    # create a key pair\n    k = crypto.PKey()\n    k.generate_key(crypto.TYPE_RSA, 4096)\n    # create a self-signed cert\n    cert = crypto.X509()\n    cert.get_subject().C = countryName\n    cert.get_subject().ST = stateOrProvinceName\n    cert.get_subject().L = localityName\n    cert.get_subject().O = organizationName\n    cert.get_subject().OU = organizationUnitName\n    cert.get_subject().CN = commonName\n    cert.get_subject().emailAddress = emailAddress\n    cert.set_serial_number(serialNumber)\n    cert.gmtime_adj_notBefore(0)\n    cert.gmtime_adj_notAfter(validityEndInSeconds)\n    cert.set_issuer(cert.get_subject())\n    cert.set_pubkey(k)\n    cert.sign(k, &apos;sha512&apos;)\n    with open(CERT_FILE, &quot;wt&quot;) as f:\n        f.write(crypto.dump_certificate(crypto.FILETYPE_PEM, cert).decode(&quot;utf-8&quot;))\n    with open(KEY_FILE, &quot;wt&quot;) as f:\n        f.write(crypto.dump_privatekey(crypto.FILETYPE_PEM, k).decode(&quot;utf-8&quot;))\n    print(&quot;GENERATED&quot;)\n    input(&quot;Press enter to close program.&quot;)\ncert_gen()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, you still get the &quot;certificate is not trusted&quot; error. This is because of a few reasons:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;It is self-signed/not verified (a verified certificate would need a CA (Certificate Authority), like Let&apos;s Encrypt to be trusted on all devices).&lt;/li&gt;\n&lt;li&gt;It is not trusted on your machine. (&lt;a href=&quot;https://stackoverflow.com/a/48790088/14739273&quot;&gt;this&lt;/a&gt; answer shows how you can make Windows trust your certificate).&lt;/li&gt;\n&lt;/ol&gt;\n    "]},"randomTags":[{"name":"mariadb","slug":"mariadb"},{"name":"environment-variables","slug":"environment-variables"},{"name":"datediff","slug":"datediff"},{"name":"utc","slug":"utc"},{"name":"invoke","slug":"invoke"},{"name":"branch-prediction","slug":"branch-prediction"},{"name":"observable","slug":"observable"},{"name":"bluebird","slug":"bluebird"},{"name":"excel","slug":"excel"},{"name":"ereg","slug":"ereg"},{"name":"android-sqlite","slug":"android-sqlite"},{"name":"javafx","slug":"javafx"},{"name":"setter","slug":"setter"},{"name":"dictionary","slug":"dictionary"},{"name":"http-status-code-404","slug":"http-status-code-404"},{"name":"interop","slug":"interop"},{"name":"pageload","slug":"pageload"},{"name":"firebase","slug":"firebase"},{"name":"hashcode","slug":"hashcode"},{"name":"memory-leaks","slug":"memory-leaks"}]},"__N_SSG":true}