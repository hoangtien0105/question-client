{"pageProps":{"data":{"count":1,"rows":[{"id":317,"title":"How to remove \"noise\" from GCC/clang assembly output?","slug":"how-to-remove-\"noise\"-from-gccclang-assembly-output-1657387612391","postType":"QUESTION","createdAt":"2022-07-09T17:26:52.000Z","updatedAt":"2022-07-09T17:26:52.000Z","tags":[{"id":1858,"name":"clang","slug":"clang","createdAt":"2022-07-09T17:26:52.000Z","updatedAt":"2022-07-09T17:26:52.000Z","Questions_Tags":{"questionId":317,"tagId":1858}}]}]},"slug":"clang","page":1,"answers":{"317":["\n&lt;p&gt;Stripping out the &lt;code&gt;.cfi&lt;/code&gt; directives, unused labels, and comment lines is a solved problem: the scripts behind &lt;a href=&quot;http://gcc.godbolt.org/#compilers:!((compiler:g530,options:%27-std%3Dgnu%2B%2B14+-Wall+-Wextra++-O3+-fno-verbose-asm+-ffast-math+-march%3Dhaswell%27,source:%27%23include+%3Cboost/variant.hpp%3E%0A%0Astruct+Foo%0A%7B%0A++++int+get()+%7B+return+100%3B+%7D%0A%7D%3B%0A%0Astruct+Bar%0A%7B%0A++++int+get()+%7B+return+999%3B+%7D%0A%7D%3B%0A%0Ausing+Variant+%3D+boost::variant%3CFoo,+Bar%3E%3B%0A%0A%0Aint+run(Variant+v)%0A%7B%0A++++return+boost::apply_visitor(%5B%5D(auto%26+x)%7Breturn+x.get()%3B%7D,+v)%3B%0A%7D%0Aint+main()%0A%7B%0A++++Foo+f%3B%0A++++return+run(f)%3B%0A%7D%0A%27)),filterAsm:(commentOnly:!t,directives:!t,intel:!t,labels:!t),version:3&quot; rel=&quot;noreferrer&quot;&gt;Matt Godbolt&apos;s compiler explorer&lt;/a&gt; are open source on &lt;a href=&quot;https://github.com/mattgodbolt/gcc-explorer&quot; rel=&quot;noreferrer&quot;&gt;its github project&lt;/a&gt;.  It can even do colour highlighting to match source lines to asm lines (using the debug info).&lt;/p&gt;\n&lt;p&gt;You can set it up locally so you can feed it files that are part of your project with all the &lt;code&gt;#include&lt;/code&gt; paths and so on (using &lt;code&gt;-I/...&lt;/code&gt;).  And so you can use it on private source code that you don&apos;t want to send out over the Internet.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Matt Godbolt&apos;s CppCon2017 talk &lt;a href=&quot;https://youtu.be/bSkpMdDe4g4&quot; rel=&quot;noreferrer&quot;&gt;What Has My Compiler Done for Me Lately? Unbolting the Compiler&apos;s Lid&lt;/a&gt; shows how to use it&lt;/strong&gt; (it&apos;s pretty self-explanatory but has some neat features if you read the docs on github), and also &lt;strong&gt;how to read x86 asm&lt;/strong&gt;, with a gentle introduction to x86 asm itself for total beginners, and to looking at compiler output.  He goes on to show some neat compiler optimizations (e.g. for dividing by a constant), and what kind of functions give useful asm output for looking at optimized compiler output (function args, not &lt;code&gt;int a = 123;&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;On the Godbolt compiler explorer, it can be useful to use &lt;code&gt;-g0 -fno-asynchronous-unwind-tables&lt;/code&gt; if you want to uncheck the filter option for directives, e.g. because you want to see the &lt;code&gt;.section&lt;/code&gt; and &lt;code&gt;.p2align&lt;/code&gt; stuff in the compiler output.  The default is to add &lt;code&gt;-g&lt;/code&gt; to your options to get the debug info it uses to colour-highlight matching source and asm lines, but this means &lt;code&gt;.cfi&lt;/code&gt; directives for every stack operation, and &lt;code&gt;.loc&lt;/code&gt; for every source line, among other things.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;With plain gcc/clang (not g++), &lt;code&gt;-fno-asynchronous-unwind-tables&lt;/code&gt; avoids &lt;code&gt;.cfi&lt;/code&gt; directives.  Possibly also useful: &lt;code&gt;-fno-exceptions -fno-rtti&lt;/code&gt; &lt;code&gt;-masm=intel&lt;/code&gt;.  Make sure to omit &lt;code&gt;-g&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Copy/paste this for local use&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;g++ -fno-asynchronous-unwind-tables -fno-exceptions -fno-rtti -fverbose-&lt;span class=&quot;hljs-keyword&quot;&gt;asm&lt;/span&gt; \\\n    -Wall -Wextra  foo.cpp   -O3 -masm=intel -S -o- | less\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or &lt;code&gt;-Os&lt;/code&gt; can be more readable, e.g. using &lt;code&gt;div&lt;/code&gt; for division by non-power-of-2 constants instead of a multiplicative inverse even though that&apos;s a lot worse for performance and only a bit smaller, if at all.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;But really, I&apos;d recommend just using Godbolt directly (online or set it up locally)!  You can quickly flip between versions of gcc and clang to see if old or new compilers do something dumb.  (Or what ICC does, or even what MSVC does.)  There&apos;s even ARM / ARM64 gcc 6.3, and various gcc for PowerPC, MIPS, AVR, MSP430.  (It can be interesting to see what happens on a machine where &lt;code&gt;int&lt;/code&gt; is wider than a register, or isn&apos;t 32-bit.  Or on a RISC vs. x86).&lt;/p&gt;\n&lt;p&gt;For C instead of C++, you can use &lt;code&gt;-xc -std=gnu11&lt;/code&gt; to avoid flipping the language drop-down to C, which resets your source pane and compiler choices, and has a different set of compilers available.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Useful compiler options for making asm for human consumption&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Remember, your code only has to compile, not link: passing a pointer to an external function like &lt;code&gt;void ext(void*p)&lt;/code&gt; is a good way to stop something from optimizing away&lt;/strong&gt;.  You only need a prototype for it, with no definition so the compiler can&apos;t inline it or make any assumptions about what it does.  (Or &lt;a href=&quot;https://stackoverflow.com/questions/40122141/preventing-compiler-optimizations-while-benchmarking&quot;&gt;inline asm like &lt;code&gt;Benchmark::DoNotOptimize&lt;/code&gt;&lt;/a&gt; can force a compiler to materialize a value in a register, or forget about it being a known constant, if you know GNU C inline asm syntax well enough to use constraints to understand the effect you&apos;re having on what you&apos;re requiring of the compiler.)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;I&apos;d recommend using &lt;code&gt;-O3 -Wall -Wextra -fverbose-asm -march=haswell&lt;/code&gt; for looking at code.  (&lt;code&gt;-fverbose-asm&lt;/code&gt; can just make the source look noisy, though, when all you get are numbered temporaries as names for the operands.)  When you&apos;re fiddling with the source to see how it changes the asm, you &lt;em&gt;definitely&lt;/em&gt; want compiler warnings enabled.  You don&apos;t want to waste time scratching your head over the asm when the explanation is that you did something that deserves a warning in the source.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;To see how the calling convention works, &lt;strong&gt;you often want to look at caller and callee without inlining&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;You can use &lt;code&gt;__attribute__((noipa)) foo_t foo(bar_t x) { ... }&lt;/code&gt; on a definition, or compile with &lt;code&gt;gcc -O3 -fno-inline-functions -fno-inline-functions-called-once -fno-inline-small-functions&lt;/code&gt; to disable inlining.  (But those command line options don&apos;t disable cloning a function for constant-propagation.  &lt;code&gt;noipa&lt;/code&gt; = no Inter-Procedural Analysis.  It&apos;s even stronger than &lt;code&gt;__attribute__((noinline,noclone))&lt;/code&gt;.)  See &lt;a href=&quot;https://stackoverflow.com/questions/50775127/from-compiler-perspective-how-is-reference-for-array-dealt-with-and-why-passi&quot;&gt;From compiler perspective, how is reference for array dealt with, and, why passing by value(not decay) is not allowed?&lt;/a&gt; for an example.&lt;/p&gt;\n&lt;p&gt;Or if you just want to see how functions pass / receive args of different types, you could use different names but the same prototype so the compiler doesn&apos;t have a definition to inline.  This works with any compiler.  Without a definition, a function is just a black box to the optimizer, governed only by the calling convention / ABI.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;-ffast-math&lt;/code&gt; will get many libm functions to inline, some to a single instruction (esp. with SSE4 available for &lt;code&gt;roundsd&lt;/code&gt;).  Some will inline with just &lt;code&gt;-fno-math-errno&lt;/code&gt;, or other &quot;safer&quot; parts of &lt;code&gt;-ffast-math&lt;/code&gt;, without the parts that allow the compiler to round differently.  If you have FP code, definitely look at it with/without &lt;code&gt;-ffast-math&lt;/code&gt;.  If you can&apos;t safely enable any of &lt;code&gt;-ffast-math&lt;/code&gt; in your regular build, maybe you&apos;ll get an idea for a safe change you can make in the source to allow the same optimization without &lt;code&gt;-ffast-math&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;-O3 -fno-tree-vectorize&lt;/code&gt; will optimize without auto-vectorizing&lt;/strong&gt;, so you can get full optimization without if you want to compare with &lt;code&gt;-O2&lt;/code&gt; (which doesn&apos;t enable autovectorization on gcc11 and earlier, but does on all clang).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;-Os&lt;/code&gt; (optimize for size and speed) can be helpful&lt;/strong&gt; to keep the code more compact, which means less code to understand.    clang&apos;s &lt;code&gt;-Oz&lt;/code&gt; optimizes for size even when it hurts speed, even using &lt;code&gt;push 1&lt;/code&gt; / &lt;code&gt;pop rax&lt;/code&gt; instead of &lt;code&gt;mov eax, 1&lt;/code&gt;, so that&apos;s only interesting for &lt;a href=&quot;https://codegolf.stackexchange.com/questions/132981/tips-for-golfing-in-x86-x64-machine-code&quot;&gt;code golf&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Even &lt;code&gt;-Og&lt;/code&gt; (minimal optimization) might be what you want to look at, depending on your goals.  &lt;code&gt;-O0&lt;/code&gt; is full of store/reload noise, which makes it harder to follow, &lt;a href=&quot;https://stackoverflow.com/questions/53366394/why-does-clang-produce-inefficient-asm-with-o0-for-this-simple-floating-point&quot;&gt;unless you use &lt;code&gt;register&lt;/code&gt; vars&lt;/a&gt;.  The only upside is that each C statement compiles to a separate block of instructions, and it makes &lt;code&gt;-fverbose-asm&lt;/code&gt; able to use the actual C var names.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;clang unrolls loops by default, so &lt;strong&gt;&lt;code&gt;-fno-unroll-loops&lt;/code&gt; can be useful in complex functions&lt;/strong&gt;.  You can get a sense of &quot;what the compiler did&quot; without having to wade through the unrolled loops.  (gcc enables &lt;code&gt;-funroll-loops&lt;/code&gt; with &lt;code&gt;-fprofile-use&lt;/code&gt;, but not with &lt;code&gt;-O3&lt;/code&gt;).  (This is a suggestion for human-readable code, not for code that would run faster.)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Definitely enable some level of optimization, unless you specifically want to know what &lt;code&gt;-O0&lt;/code&gt; did&lt;/strong&gt;.  Its &quot;predictable debug behaviour&quot; requirement makes the compiler store/reload everything between every C statement, so you can modify C variables with a debugger and even &quot;jump&quot; to a different source line within the same function, and have execution continue as if you did that in the C source.  &lt;code&gt;-O0&lt;/code&gt; output is so noisy with stores/reloads (and so slow) not just from lack of optimization, but &lt;a href=&quot;https://stackoverflow.com/questions/53366394/why-does-clang-produce-inefficient-asm-with-o0-for-this-simple-floating-point&quot;&gt;forced de-optimization to support debugging&lt;/a&gt;.  (also &lt;a href=&quot;https://stackoverflow.com/questions/46638527/when-will-the-trivial-code-that-has-no-effect-code-gets-removed-in-compilation/46640101#46640101&quot;&gt;related&lt;/a&gt;).&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;To get a mix of source and asm&lt;/strong&gt;, use &lt;a href=&quot;https://stackoverflow.com/a/137479/224132&quot;&gt;&lt;code&gt;gcc -Wa,-adhln -c -g foo.c | less&lt;/code&gt;&lt;/a&gt; to pass extra options to &lt;code&gt;as&lt;/code&gt;.  (More discussion of this in &lt;a href=&quot;http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/&quot; rel=&quot;noreferrer&quot;&gt;a blog post&lt;/a&gt;, and &lt;a href=&quot;https://panthema.net/2013/0124-GCC-Output-Assembler-Code/&quot; rel=&quot;noreferrer&quot;&gt;another blog&lt;/a&gt;.).  Note that the output of this isn&apos;t valid assembler input, because the C source is there directly, not as an assembler comment.  So don&apos;t call it a &lt;code&gt;.s&lt;/code&gt;.  A &lt;code&gt;.lst&lt;/code&gt; might make sense if you want to save it to a file.&lt;/p&gt;\n&lt;p&gt;Godbolt&apos;s color highlighting serves a similar purpose, and is great at helping you see when multiple &lt;em&gt;non-contiguous&lt;/em&gt; asm instructions come from the same source line.  I haven&apos;t used that gcc listing command at all, so IDK how well it does, and how easy it is for the eye to see, in that case.&lt;/p&gt;\n&lt;p&gt;I like the high code density of godbolt&apos;s asm pane, so I don&apos;t think I&apos;d like having source lines mixed in.  At least not for simple functions.  Maybe with a function that was too complex to get a handle on the overall structure of what the asm does...&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;And remember, when you want to just look at the asm, &lt;strong&gt;leave out the &lt;code&gt;main()&lt;/code&gt; and the compile-time constants&lt;/strong&gt;.  You want to see the code for dealing with a function arg in a register, not for the code after constant-propagation turns it into &lt;code&gt;return 42&lt;/code&gt;, or at least optimizes away some stuff.&lt;/p&gt;\n&lt;p&gt;Removing &lt;code&gt;static&lt;/code&gt; and/or &lt;code&gt;inline&lt;/code&gt; from functions will produce a stand-alone definition for them, as well as a definition for any callers, so you can just look at that.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Don&apos;t put your code in a function called &lt;code&gt;main()&lt;/code&gt;&lt;/strong&gt;.  gcc knows that &lt;code&gt;main&lt;/code&gt; is special and assumes it will only be called once, so it marks it as &quot;cold&quot; and optimizes it less.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The other thing you can do: If you did make a &lt;code&gt;main()&lt;/code&gt;, you can run it and use a debugger.  &lt;code&gt;stepi&lt;/code&gt; (&lt;code&gt;si&lt;/code&gt;) steps by instruction.  See the bottom of the &lt;a href=&quot;/questions/tagged/x86&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;x86&apos;&quot; rel=&quot;tag&quot;&gt;x86&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/tags/x86/info&quot;&gt;tag wiki&lt;/a&gt; for instructions.  But remember that code might optimize away after inlining into main with compile-time-constant args.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;__attribute__((noinline))&lt;/code&gt; may help, on a function that you want to not be inlined.  gcc will also make constant-propagation clones of functions, i.e. a special version with one of the args as a constant, for call-sites that know they&apos;re passing a constant.  The symbol name will be &lt;code&gt;.clone.foo.constprop_1234&lt;/code&gt; or something in the asm output. You can use &lt;code&gt;__attribute__((noclone))&lt;/code&gt; to disable that, too.).&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;For example&lt;/h2&gt;\n&lt;p&gt;If you want to see how the compiler multiplies two integers:  I put the following code &lt;a href=&quot;http://gcc.godbolt.org/#compilers:!((compiler:g530,options:%27-xc+-std%3Dgnu11+-Wall+-Wextra++-O3+-fverbose-asm+-ffast-math+-march%3Dhaswell%27,source:%27int+constants()+%7B+int+a+%3D+10,+b+%3D+20%3B+return+a+*+b%3B+%7D%0Aint+variables(int+a,+int+b)+%7B+return+a+*+b%3B+%7D%0A%27)),filterAsm:(commentOnly:!t,directives:!t,intel:!t,labels:!t),version:3&quot; rel=&quot;noreferrer&quot;&gt;on the Godbolt compiler explorer&lt;/a&gt; to get the asm (from &lt;code&gt;gcc -O3 -march=haswell -fverbose-asm&lt;/code&gt;) for the wrong way and the right way to test this.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// the wrong way, which people often write when they&apos;re used to creating a runnable test-case with a main() and a printf&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// or worse, people will actually look at the asm for such a main()&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;constants&lt;/span&gt;()&lt;/span&gt; { &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, b = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a * b; }\n    mov     eax, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;#,&lt;/span&gt;\n    ret                     &lt;span class=&quot;hljs-meta&quot;&gt;# compiles the same as  return 200;  not interesting&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// the right way: compiler doesn&apos;t know anything about the inputs&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// so we get asm like what would happen when this inlines into a bigger function.&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;variables&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; b&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a * b; }\n    mov     eax, edi  &lt;span class=&quot;hljs-meta&quot;&gt;# D.2345, a&lt;/span&gt;\n    imul    eax, esi        &lt;span class=&quot;hljs-meta&quot;&gt;# D.2345, b&lt;/span&gt;\n    ret\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(This mix of asm and C was hand-crafted by copy-pasting the asm output from godbolt into the right place.  I find it&apos;s a good way to show how a short function compiles in SO answers / compiler bug reports / emails.)&lt;/p&gt;\n    ","\n&lt;p&gt;You can always look at the generated assembly from the object file, instead of using the compilers assembly output. &lt;code&gt;objdump&lt;/code&gt; comes to mind.&lt;/p&gt;\n\n&lt;p&gt;You can even tell &lt;code&gt;objdump&lt;/code&gt; to intermix source with assembly, making it easier to figure out what source line corresponds to what instructions. Example session:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;$ cat test.&lt;span class=&quot;hljs-function&quot;&gt;cc\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; arg&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arg * &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;;\n}\n\n$ g++ -g -O3 -std=c++&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; -c test.cc -o test.o &amp;amp;&amp;amp; objdump -dS -M intel test.o\n\ntest.o:     file format elf64-x86&lt;span class=&quot;hljs-number&quot;&gt;-64&lt;/span&gt;\n\n\nDisassembly of section .text:\n\n&lt;span class=&quot;hljs-number&quot;&gt;0000000000000000&lt;/span&gt; &amp;lt;_Z3fooi&amp;gt;:\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; arg&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arg + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;d &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;                lea    eax,[rdi+&lt;span class=&quot;hljs-number&quot;&gt;0x1&lt;/span&gt;]\n}\n   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:   c3                      ret    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Explanation of &lt;code&gt;objdump&lt;/code&gt; flags:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; disassembles all executable sections&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;-S&lt;/code&gt; intermixes assembly with source (&lt;code&gt;-g&lt;/code&gt; required while compiling with &lt;code&gt;g++&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;-M intel&lt;/code&gt; choses intel syntax over ugly AT&amp;amp;T syntax (&lt;em&gt;optional&lt;/em&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I like to insert labels that I can easily grep out of the objdump output.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;interesting_part_begin%=:&quot;&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;do_something&lt;/span&gt;();\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;interesting_part_end%=:&quot;&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I haven&apos;t had a problem with this yet, but &lt;code&gt;asm volatile&lt;/code&gt; can be very hard on a compiler&apos;s optimizer because it tends to leave such code untouched.&lt;/p&gt;\n    "]},"randomTags":[{"name":"unix","slug":"unix"},{"name":"android-asynctask","slug":"android-asynctask"},{"name":"cpu-architecture","slug":"cpu-architecture"},{"name":"collections","slug":"collections"},{"name":"formatting","slug":"formatting"},{"name":"heredoc","slug":"heredoc"},{"name":"iteration","slug":"iteration"},{"name":"restriction","slug":"restriction"},{"name":"webdriver","slug":"webdriver"},{"name":"projection","slug":"projection"},{"name":"java.util.scanner","slug":"java.util.scanner"},{"name":"pageload","slug":"pageload"},{"name":"sorting","slug":"sorting"},{"name":"sequence-points","slug":"sequence-points"},{"name":"where-in","slug":"where-in"},{"name":"w3c","slug":"w3c"},{"name":"full-outer-join","slug":"full-outer-join"},{"name":"invoke","slug":"invoke"},{"name":"linker-errors","slug":"linker-errors"},{"name":"error-reporting","slug":"error-reporting"}]},"__N_SSG":true}