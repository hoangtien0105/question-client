{"pageProps":{"data":{"count":1,"rows":[{"id":353,"title":"Truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()","slug":"truth-value-of-a-series-is-ambiguous.-use-a.empty-a.bool()-a.item()-a.any()-or-a.all()-1657387724259","postType":"QUESTION","createdAt":"2022-07-09T17:28:44.000Z","updatedAt":"2022-07-09T17:28:44.000Z","tags":[{"id":1981,"name":"filtering","slug":"filtering","createdAt":"2022-07-09T17:28:44.000Z","updatedAt":"2022-07-09T17:28:44.000Z","Questions_Tags":{"questionId":353,"tagId":1981}}]}]},"slug":"filtering","page":1,"answers":{"353":["\n&lt;p&gt;The &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;and&lt;/code&gt; python statements require &lt;code&gt;truth&lt;/code&gt;-values. For &lt;code&gt;pandas&lt;/code&gt;, these are considered ambiguous so you should use &quot;bitwise&quot; &lt;code&gt;|&lt;/code&gt; (or) or &lt;code&gt;&amp;amp;&lt;/code&gt; (and) operations:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;These are overloaded for these kinds of data structures to yield the element-wise &lt;code&gt;or&lt;/code&gt; or &lt;code&gt;and&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Just to add some more explanation to this statement:&lt;/p&gt;\n&lt;p&gt;The exception is thrown when you want to get the &lt;code&gt;bool&lt;/code&gt; of a &lt;code&gt;pandas.Series&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = pd.Series([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(x)\nValueError: The truth value of a Series &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ambiguous. Use a.empty, a.&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(), a.item(), a.&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; a.&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;().\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What you hit was a place where the operator &lt;strong&gt;implicitly&lt;/strong&gt; converted the operands to &lt;code&gt;bool&lt;/code&gt; (you used &lt;code&gt;or&lt;/code&gt; but it also happens for &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; x\nValueError: The truth value of a Series &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ambiguous. Use a.empty, a.&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(), a.item(), a.&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; a.&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;().\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; x\nValueError: The truth value of a Series &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ambiguous. Use a.empty, a.&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(), a.item(), a.&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; a.&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;().\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fun&apos;&lt;/span&gt;)\nValueError: The truth value of a Series &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ambiguous. Use a.empty, a.&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(), a.item(), a.&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; a.&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;().\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; x:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fun&apos;&lt;/span&gt;)\nValueError: The truth value of a Series &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ambiguous. Use a.empty, a.&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(), a.item(), a.&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; a.&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;().\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Besides these 4 statements there are several python functions that hide some &lt;code&gt;bool&lt;/code&gt; calls (like &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, ...) these are normally not problematic with &lt;code&gt;pandas.Series&lt;/code&gt; but for completeness I wanted to mention these.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;In your case, the exception isn&apos;t really helpful, because it doesn&apos;t mention the &lt;strong&gt;right alternatives&lt;/strong&gt;. For &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;, if you want element-wise comparisons, you can use:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_or.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;numpy.logical_or&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n  &amp;gt;&amp;gt;&amp;gt; np.logical_or(x, y)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or simply the &lt;code&gt;|&lt;/code&gt; operator:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; x | y\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_and.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;numpy.logical_and&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; np.logical_and(x, y)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or simply the &lt;code&gt;&amp;amp;&lt;/code&gt; operator:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; x &amp;amp; y\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If you&apos;re using the operators, then be sure to set your parentheses correctly because of &lt;a href=&quot;https://docs.python.org/reference/expressions.html#operator-precedence&quot; rel=&quot;noreferrer&quot;&gt;operator precedence&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;There are &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/routines.logic.html&quot; rel=&quot;noreferrer&quot;&gt;several logical numpy functions&lt;/a&gt; which &lt;em&gt;should&lt;/em&gt; work on &lt;code&gt;pandas.Series&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The alternatives mentioned in the Exception are more suited if you encountered it when doing &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt;. I&apos;ll shortly explain each of these:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If you want to check if your Series is &lt;strong&gt;empty&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; x = pd.Series([])\n  &amp;gt;&amp;gt;&amp;gt; x.empty\n  &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n  &amp;gt;&amp;gt;&amp;gt; x = pd.Series([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n  &amp;gt;&amp;gt;&amp;gt; x.empty\n  &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python normally interprets the &lt;code&gt;len&lt;/code&gt;gth of containers (like &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, ...) as truth-value if it has no explicit boolean interpretation. So if you want the python-like check, you could do: &lt;code&gt;if x.size&lt;/code&gt; or &lt;code&gt;if not x.empty&lt;/code&gt; instead of &lt;code&gt;if x&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If your &lt;code&gt;Series&lt;/code&gt; contains &lt;strong&gt;one and only one&lt;/strong&gt; boolean value:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; x = pd.Series([&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;])\n  &amp;gt;&amp;gt;&amp;gt; (x &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;()\n  &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n  &amp;gt;&amp;gt;&amp;gt; (x &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;()\n  &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you want to check the &lt;strong&gt;first and only item&lt;/strong&gt; of your Series (like &lt;code&gt;.bool()&lt;/code&gt; but works even for not boolean contents):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; x = pd.Series([&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;])\n  &amp;gt;&amp;gt;&amp;gt; x.item()\n  &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you want to check if &lt;strong&gt;all&lt;/strong&gt; or &lt;strong&gt;any&lt;/strong&gt; item is not-zero, not-empty or not-False:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; x = pd.Series([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;])\n  &amp;gt;&amp;gt;&amp;gt; x.&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;()   &lt;span class=&quot;hljs-comment&quot;&gt;# because one element is zero&lt;/span&gt;\n  &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n  &amp;gt;&amp;gt;&amp;gt; x.&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;()   &lt;span class=&quot;hljs-comment&quot;&gt;# because one (or more) elements are non-zero&lt;/span&gt;\n  &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Well pandas use bitwise &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; and each condition should be wrapped in a &lt;code&gt;()&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;For example following works&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data_query = data[(data[&lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;] &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;) &amp;amp; (data[&lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;] &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But the same query without proper brackets does not&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data_query = data[(data[&lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;] &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt; &amp;amp; data[&lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;] &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For boolean logic, use &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;np.random.seed(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\ndf = pd.DataFrame(np.random.randn(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), columns=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABC&apos;&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;df\n          A         B         C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.950088&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.151357&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.103219&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.410599&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.144044&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.454274&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.761038&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.121675&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.443863&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;df.loc[(df.C &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df.C &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n          A         B         C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.410599&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.144044&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.454274&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.761038&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.121675&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.443863&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To see what is happening, you get a column of booleans for each comparison, e.g.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.C &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\nName: C, dtype: &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When you have multiple criteria, you will get multiple columns returned.  This is why the join logic is ambiguous.  Using &lt;code&gt;and&lt;/code&gt; or &lt;code&gt;or&lt;/code&gt; treats each column separately, so you first need to reduce that column to a single boolean value.  For example, to see if any value or all values in each of the columns is True.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Any value in either column is True?&lt;/span&gt;\n(df.C &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (df.C &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;()\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# All values in either column is True?&lt;/span&gt;\n(df.C &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (df.C &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;()\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;One convoluted way to achieve the same thing is to zip all of these columns together, and perform the appropriate logic.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;df[[&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;([a, b]) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a, b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(df.C &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;, df.C &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]]\n          A         B         C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.410599&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.144044&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.454274&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.761038&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.121675&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.443863&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For more details, refer to &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/indexing.html#boolean-indexing&quot; rel=&quot;noreferrer&quot;&gt;Boolean Indexing&lt;/a&gt; in the docs.&lt;/p&gt;\n    ","\n&lt;p&gt;Or, alternatively, you could use Operator module. More detailed information is here &lt;a href=&quot;https://docs.python.org/2/library/operator.html&quot; rel=&quot;noreferrer&quot;&gt;Python docs&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\nnp.random.seed(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\ndf = pd.DataFrame(np.random.randn(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), columns=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABC&apos;&lt;/span&gt;))\ndf.loc[operator.or_(df.C &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;, df.C &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n\n          A         B         C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.410599&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.144044&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.454274&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.761038&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.121675&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.4438&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/36922103/1878788&quot;&gt;This excellent answer&lt;/a&gt; explains very well what is happening and provides a solution. I would like to add another solution that might be suitable in similar cases: using the &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.query.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;query&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df.query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(col &amp;gt; 0.25) or (col &amp;lt; -0.25)&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See also &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-query&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-query&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;(Some tests with a dataframe I&apos;m currently working with suggest that this method is a bit slower than using the bitwise operators on series of booleans: 2 ms vs. 870 µs)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;A piece of warning&lt;/strong&gt;: At least one situation where this is not straightforward is when column names happen to be python expressions. I had columns named &lt;code&gt;WT_38hph_IP_2&lt;/code&gt;, &lt;code&gt;WT_38hph_input_2&lt;/code&gt; and &lt;code&gt;log2(WT_38hph_IP_2/WT_38hph_input_2)&lt;/code&gt; and wanted to perform the following query: &lt;code&gt;&quot;(log2(WT_38hph_IP_2/WT_38hph_input_2) &amp;gt; 1) and (WT_38hph_IP_2 &amp;gt; 20)&quot;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;I obtained the following exception cascade:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;KeyError: &apos;log2&apos;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;UndefinedVariableError: name &apos;log2&apos; is not defined&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ValueError: &quot;log2&quot; is not a supported function&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;I guess this happened because the query parser was trying to make something from the first two columns instead of identifying the expression with the name of the third column.&lt;/p&gt;\n&lt;p&gt;A possible workaround is proposed &lt;a href=&quot;https://stackoverflow.com/a/40083013/1878788&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This is quite a common question for beginners when making multiple conditions in Pandas. Generally speaking, there are two possible conditions causing this error:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Condition 1: Python Operator Precedence&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;There is a paragraph of &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#boolean-indexing&quot; rel=&quot;nofollow noreferrer&quot;&gt;Boolean indexing | Indexing and selecting data  pandas documentation&lt;/a&gt; explains this&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Another common operation is the use of boolean vectors to filter the data. The operators are: &lt;code&gt;|&lt;/code&gt; for &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; for &lt;code&gt;and&lt;/code&gt;, and &lt;code&gt;~&lt;/code&gt; for &lt;code&gt;not&lt;/code&gt;. These &lt;strong&gt;must&lt;/strong&gt; be grouped by using &lt;strong&gt;parentheses&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;By default Python will evaluate an expression such as &lt;code&gt;df[&apos;A&apos;] &amp;gt; 2 &amp;amp; df[&apos;B&apos;] &amp;lt; 3&lt;/code&gt; as &lt;code&gt;df[&apos;A&apos;] &amp;gt; (2 &amp;amp; df[&apos;B&apos;]) &amp;lt; 3&lt;/code&gt;, while the desired evaluation order is &lt;code&gt;(df[&apos;A&apos;] &amp;gt; 2) &amp;amp; (df[&apos;B&apos;] &amp;lt; 3)&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Wrong&lt;/span&gt;\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt; | df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Right&lt;/span&gt;\n(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There are some possible ways to get rid off the parentheses, I will cover this later.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Condition 2: Improper Operator/Statement&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;As is explained in previous quotation, you need use &lt;code&gt;|&lt;/code&gt; for &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; for &lt;code&gt;and&lt;/code&gt;, and &lt;code&gt;~&lt;/code&gt; for &lt;code&gt;not&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Wrong&lt;/span&gt;\n(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Right&lt;/span&gt;\n(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Another possible situation is that you are using a boolean Series in &lt;code&gt;if&lt;/code&gt; statement.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Wrong&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; pd.Series([&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;]):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s clear that Python &lt;code&gt;if&lt;/code&gt; statement accepts boolean like expression rather than Pandas Series. You should use &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.any.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.any&lt;/code&gt;&lt;/a&gt; or methods listed in the error message to convert the Series to a value according to your need.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Right&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].eq(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;():\n    &lt;span class=&quot;hljs-comment&quot;&gt;# If you want all column values equal to zero&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;do something&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Right&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].eq(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;():\n    &lt;span class=&quot;hljs-comment&quot;&gt;# If you want at least one column value equal to zero&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;do something&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Let&apos;s talk about ways to escape the parentheses in the first situation.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Use Pandas mathematical functions&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Pandas has defined a lot of mathematical functions including comparison as follows:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.lt.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.lt()&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;less than&lt;/em&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.gt.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.gt()&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;greater than&lt;/em&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.le.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.le()&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;less and equal&lt;/em&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.ge.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.ge()&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;greater and equal&lt;/em&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.ne.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.ne()&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;not equal&lt;/em&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.eq.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.eq()&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;equal&lt;/em&gt;;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;As a result, you can use&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# is equal to&lt;/span&gt;\n\ndf = df[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].lt(-&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].gt(&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;strong&gt;Use &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.between.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.between()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;If you want to select rows in between two values, you can use &lt;code&gt;pandas.Series.between&lt;/code&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;df[&apos;col].between(left, right)&lt;/code&gt; is equal to &lt;br&gt;\n&lt;code&gt;(left &amp;lt;= df[&apos;col&apos;]) &amp;amp; (df[&apos;col&apos;] &amp;lt;= right)&lt;/code&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;df[&apos;col].between(left, right, inclusive=&apos;left)&lt;/code&gt; is equal to &lt;br&gt;\n&lt;code&gt;(left &amp;lt;= df[&apos;col&apos;]) &amp;amp; (df[&apos;col&apos;] &amp;lt; right)&lt;/code&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;df[&apos;col].between(left, right, inclusive=&apos;right&apos;)&lt;/code&gt; is equal to &lt;br&gt;\n&lt;code&gt;(left &amp;lt; df[&apos;col&apos;]) &amp;amp; (df[&apos;col&apos;] &amp;lt;= right)&lt;/code&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;df[&apos;col].between(left, right, inclusive=&apos;neither&apos;)&lt;/code&gt; is equal to &lt;br&gt;\n&lt;code&gt;(left &amp;lt; df[&apos;col&apos;]) &amp;amp; (df[&apos;col&apos;] &amp;lt; right)&lt;/code&gt;;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) &amp;amp; (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# is equal to&lt;/span&gt;\n\ndf = df[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].between(-&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;, inclusive=&lt;span class=&quot;hljs-string&quot;&gt;&apos;neither&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;&lt;strong&gt;Use &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.DataFrame.query()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Document referenced before has a chapter &lt;a href=&quot;https://pandas.pydata.org/docs/user_guide/indexing.html#the-query-method&quot; rel=&quot;nofollow noreferrer&quot;&gt;The &lt;code&gt;query()&lt;/code&gt; Method&lt;/a&gt; explains this well.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;pandas.DataFrame.query()&lt;/code&gt; can help you select a DataFrame with a condition string. Within the query string, you can use both bitwise operators(&lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt;) and their boolean cousins(&lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;). Moreover, you can omit the parentheses, but I don&apos;t recommend for readable reason.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# is equal to&lt;/span&gt;\n\ndf = df.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;col &amp;lt; -0.25 or col &amp;gt; 0.25&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;4&quot;&gt;\n&lt;li&gt;&lt;strong&gt;Use &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.eval.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.DataFrame.eval()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;code&gt;pandas.DataFrame.eval()&lt;/code&gt; evaluates a string describing operations on DataFrame columns. Thus, we can use this method to build our multiple condition. The syntax is same with &lt;code&gt;pandas.DataFrame.query()&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# is equal to&lt;/span&gt;\n\ndf = df[df.&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;col &amp;lt; -0.25 or col &amp;gt; 0.25&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;pandas.DataFrame.query()&lt;/code&gt; and &lt;code&gt;pandas.DataFrame.eval()&lt;/code&gt; can do more things than I describe here, you are recommended to read their documentation and have fun with them.&lt;/p&gt;\n    ","\n&lt;p&gt;If you have more than one value:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If its only a single value:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].item()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I was getting error in this command:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; df != &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But it worked when I changed it to this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; df &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You need to use bitwise operators &lt;code&gt;|&lt;/code&gt; instead of &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt; instead of &lt;code&gt;and&lt;/code&gt; in pandas, you can&apos;t simply use the bool statements from python.&lt;br&gt;\n&lt;br&gt;\nFor much complex filtering create a &lt;code&gt;mask&lt;/code&gt; and apply the mask on the dataframe.&lt;br&gt;\nPut all your query in the mask and apply it.&lt;br&gt;\nSuppose,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mask = (df[&lt;span class=&quot;hljs-string&quot;&gt;&quot;col1&quot;&lt;/span&gt;]&amp;gt;=df[&lt;span class=&quot;hljs-string&quot;&gt;&quot;col2&quot;&lt;/span&gt;]) &amp;amp; (stock[&lt;span class=&quot;hljs-string&quot;&gt;&quot;col1&quot;&lt;/span&gt;]&amp;lt;=df[&lt;span class=&quot;hljs-string&quot;&gt;&quot;col2&quot;&lt;/span&gt;])\ndf_new = df[mask]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ll try to give the benchmark of the three most common way (also mentioned above):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; timeit &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; repeat\n\nsetup = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\nimport numpy as np;\nimport random;\nx = np.linspace(0,100);\nlb, ub = np.sort([random.random() * 100, random.random() * 100]).tolist()\n&quot;&quot;&quot;&lt;/span&gt;\nstmts = &lt;span class=&quot;hljs-string&quot;&gt;&apos;x[(x &amp;gt; lb) * (x &amp;lt;= ub)]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; stmt &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; stmts:\n        t = &lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(repeat(stmt, setup, number=&lt;span class=&quot;hljs-number&quot;&gt;100_000&lt;/span&gt;))\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%.4f&apos;&lt;/span&gt; % t, stmt)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;result:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.4808&lt;/span&gt; x[(x &amp;gt; lb) * (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.4726&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.4904&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-number&quot;&gt;0.4725&lt;/span&gt; x[(x &amp;gt; lb) * (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.4806&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.5002&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-number&quot;&gt;0.4781&lt;/span&gt; x[(x &amp;gt; lb) * (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.4336&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.4974&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But, &lt;code&gt;*&lt;/code&gt; is not supported in Panda Series, and NumPy Array is faster than pandas data frame (arround 1000 times slower, see number):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; timeit &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; repeat\n\nsetup = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\nimport numpy as np;\nimport random;\nimport pandas as pd;\nx = pd.DataFrame(np.linspace(0,100));\nlb, ub = np.sort([random.random() * 100, random.random() * 100]).tolist()\n&quot;&quot;&quot;&lt;/span&gt;\nstmts = &lt;span class=&quot;hljs-string&quot;&gt;&apos;x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; stmt &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; stmts:\n        t = &lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(repeat(stmt, setup, number=&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;))\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%.4f&apos;&lt;/span&gt; % t, stmt)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;result:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1964&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.1992&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-number&quot;&gt;0.2018&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.1838&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-number&quot;&gt;0.1871&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.1883&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note: adding one line of code &lt;code&gt;x = x.to_numpy()&lt;/code&gt; will need about 20 µs.&lt;/p&gt;\n&lt;p&gt;For those who prefer &lt;code&gt;%timeit&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; random\nlb, ub = np.sort([random.random() * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, random.random() * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;]).tolist()\nlb, ub\nx = pd.DataFrame(np.linspace(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asterik&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    x = x.to_numpy()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x[(x &amp;gt; lb) * (x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;and_symbol&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    x = x.to_numpy()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;numpy_logical&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    x = x.to_numpy()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;):\n    %timeit asterik(x)\n    %timeit and_symbol(x)\n    %timeit numpy_logical(x)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;result:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;3.62&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;35.6&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;9.53&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;31.3&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;8.9&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n\n\n&lt;span class=&quot;hljs-number&quot;&gt;21.4&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;3.35&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;21.9&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;1.02&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;21.7&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; ns per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n\n\n&lt;span class=&quot;hljs-number&quot;&gt;25.1&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;3.71&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;36.8&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;18.3&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;28.2&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;5.97&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I encountered the same error and got stalled with a pyspark dataframe for few days, &lt;strong&gt;&lt;em&gt;I was able to resolve it successfully by filling na values with 0&lt;/em&gt;&lt;/strong&gt; since I was comparing integer values from 2 fields.&lt;/p&gt;\n    ","\n&lt;p&gt;One minor thing, which wasted my time.&lt;/p&gt;\n&lt;p&gt;Put the conditions(if comparing using &quot; = &quot;, &quot; != &quot;) in parenthesis, failing to do so also raises this exception.\nThis will work&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[(some condition) conditional operator (some conditions)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will not&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[some condition conditional-operator some condition]\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"generics","slug":"generics"},{"name":"unsupported-class-version","slug":"unsupported-class-version"},{"name":"post","slug":"post"},{"name":"python-datamodel","slug":"python-datamodel"},{"name":"thread-safety","slug":"thread-safety"},{"name":"sql-server","slug":"sql-server"},{"name":"database-normalization","slug":"database-normalization"},{"name":"subprocess","slug":"subprocess"},{"name":"intersection","slug":"intersection"},{"name":"clipboard","slug":"clipboard"},{"name":"full-outer-join","slug":"full-outer-join"},{"name":"combinations","slug":"combinations"},{"name":"object","slug":"object"},{"name":"nested","slug":"nested"},{"name":"razor","slug":"razor"},{"name":"relative-path","slug":"relative-path"},{"name":"data-manipulation","slug":"data-manipulation"},{"name":"idioms","slug":"idioms"},{"name":"duplicates","slug":"duplicates"},{"name":"grouping","slug":"grouping"}]},"__N_SSG":true}