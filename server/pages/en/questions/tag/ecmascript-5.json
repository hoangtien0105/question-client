{"pageProps":{"data":{"count":1,"rows":[{"id":292,"title":"What is the purpose of the var keyword and when should I use it (or omit it)?","slug":"what-is-the-purpose-of-the-var-keyword-and-when-should-i-use-it-(or-omit-it)-1657387525538","postType":"QUESTION","createdAt":"2022-07-09T17:25:25.000Z","updatedAt":"2022-07-09T17:25:25.000Z","tags":[{"id":1770,"name":"ecmascript-5","slug":"ecmascript-5","createdAt":"2022-07-09T17:25:25.000Z","updatedAt":"2022-07-09T17:25:25.000Z","Questions_Tags":{"questionId":292,"tagId":1770}}]}]},"slug":"ecmascript-5","page":1,"answers":{"292":["\n&lt;p&gt;If you&apos;re in the global scope then there&apos;s not much difference. Read &lt;a href=&quot;https://stackoverflow.com/a/1471738/1541051&quot;&gt;Kangax&apos;s&lt;/a&gt; answer for explanation&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re in a function then &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; will create a local variable, &quot;no var&quot; will look up the scope chain until it finds the variable or hits the global scope (at which point it will create it):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// These are both globals&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\nbar = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Local&lt;/span&gt;\n    bar = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;     &lt;span class=&quot;hljs-comment&quot;&gt;// Global&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Execute an anonymous function&lt;/span&gt;\n    (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; wibble = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Local&lt;/span&gt;\n        foo = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Inherits from scope above (creating a closure)&lt;/span&gt;\n        moo = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Global&lt;/span&gt;\n    }())\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you&apos;re not doing an assignment then you need to use &lt;code&gt;var&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x; &lt;span class=&quot;hljs-comment&quot;&gt;// Declare x&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;There&apos;s a difference&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;var x = 1&lt;/code&gt; &lt;strong&gt;declares variable&lt;/strong&gt; &lt;code&gt;x&lt;/code&gt; in current scope (aka execution context). If the declaration appears in a function - a local variable is declared; if it&apos;s in global scope - a global variable is declared.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;x = 1&lt;/code&gt;, on the other hand, is merely a property assignment. It first tries to resolve &lt;code&gt;x&lt;/code&gt; against scope chain. If it finds it anywhere in that scope chain, it performs assignment; if it doesn&apos;t find &lt;code&gt;x&lt;/code&gt;, only then does &lt;strong&gt;it creates &lt;code&gt;x&lt;/code&gt; property on a global object&lt;/strong&gt; (which is a top level object in a scope chain). &lt;/p&gt;\n\n&lt;p&gt;Now, notice that it doesn&apos;t declare a global variable, it creates a global property.&lt;/p&gt;\n\n&lt;p&gt;The difference between the two is subtle and might be confusing unless you understand that &lt;strong&gt;variable declarations also create properties&lt;/strong&gt; (only on a Variable Object) and that every property in Javascript (well, ECMAScript) have certain flags that describe their properties - ReadOnly, DontEnum and DontDelete.&lt;/p&gt;\n\n&lt;p&gt;Since variable declaration creates property with the DontDelete flag, the difference between &lt;code&gt;var x = 1&lt;/code&gt; and &lt;code&gt;x = 1&lt;/code&gt; (when executed in global scope) is that the former one - variable declaration - creates the DontDelete&apos;able property, and latter one doesn&apos;t. As a consequence, the property created via this implicit assignment can then be deleted from the global object, and the former one - the one created via variable declaration - cannot be deleted.&lt;/p&gt;\n\n&lt;p&gt;But this is just theory of course, and &lt;strong&gt;in practice there are even more differences between the two&lt;/strong&gt;, due to various bugs in implementations (such as those from IE).&lt;/p&gt;\n\n&lt;p&gt;Hope it all makes sense : )&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;[Update 2010/12/16]&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In ES5 (ECMAScript 5; recently standardized, 5th edition of the language) there&apos;s a so-called &quot;strict mode&quot;  an opt-in language mode, which slightly changes the behavior of undeclared assignments. In strict mode, assignment to an undeclared identifier is a &lt;strong&gt;ReferenceError&lt;/strong&gt;. The rationale for this was to catch accidental assignments, preventing creation of undesired global properties. Some of the newer browsers have already started rolling support for strict mode. See, for example, &lt;a href=&quot;http://kangax.github.com/es5-compat-table&quot; rel=&quot;noreferrer&quot;&gt;my compat table&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Saying it&apos;s the difference between &quot;&lt;strong&gt;local&lt;/strong&gt; and &lt;strong&gt;global&lt;/strong&gt;&quot; isn&apos;t entirely accurate.&lt;/p&gt;\n\n&lt;p&gt;It might be better to think of it as the difference between &quot;&lt;strong&gt;local&lt;/strong&gt; and &lt;strong&gt;nearest&lt;/strong&gt;&quot;. The nearest can surely be global, but that won&apos;t always be the case.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* global scope */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outer&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* local scope */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* nearest scope = outer */&lt;/span&gt;\n    local = !&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;/* nearest scope = outer */&lt;/span&gt;\n        local = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;/* nearest scope = undefined */&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;/* defaults to defining a global */&lt;/span&gt;\n        public = &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When Javascript is executed in a browser, all your code is surrounded by a with statement, like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Your code&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More info on &lt;a href=&quot;https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Statements/with&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;with&lt;/code&gt; - MDN&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Since &lt;code&gt;var&lt;/code&gt; declares a variable &lt;em&gt;in the current scope&lt;/em&gt; , there is no difference between declaring &lt;code&gt;var&lt;/code&gt; &lt;strong&gt;inside window&lt;/strong&gt; and not declaring it at all.&lt;/p&gt;\n\n&lt;p&gt;The difference comes when you&apos;re not directly inside the window, e.g. inside a function or inside a block.&lt;/p&gt;\n\n&lt;p&gt;Using &lt;code&gt;var&lt;/code&gt; lets you hide external variables that have the same name. In this way you can simulate a &quot;private&quot; variable, but that&apos;s another topic.&lt;/p&gt;\n\n&lt;p&gt;A rule of thumb is to always use &lt;code&gt;var&lt;/code&gt;, because otherwise you run the risk of introducing subtle bugs.&lt;/p&gt;\n\n&lt;p&gt;EDIT:\nAfter the critiques I received, I would like to emphasize the following:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;var&lt;/code&gt; declares a variable &lt;em&gt;in the current scope&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;The global scope is &lt;code&gt;window&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Not using &lt;code&gt;var&lt;/code&gt; implicitly declares &lt;code&gt;var&lt;/code&gt; in the global scope (window)&lt;/li&gt;\n&lt;li&gt;Declaring a variable in the global scope (window) using &lt;code&gt;var&lt;/code&gt; is the same as omitting it.&lt;/li&gt;\n&lt;li&gt;Declaring a variable in scopes different from window using &lt;code&gt;var&lt;/code&gt; &lt;strong&gt;is not the same thing&lt;/strong&gt; as declaring a variable without &lt;code&gt;var&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Always declare &lt;code&gt;var&lt;/code&gt; explicitly because it&apos;s good practice&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Always use the &lt;code&gt;var&lt;/code&gt; keyword to declare variables. Why? Good coding practice should be enough of a reason in itself, but omitting it means it is declared in the &lt;strong&gt;global&lt;/strong&gt; scope (a variable like this is called an &quot;implied&quot; global). Douglas Crockford &lt;a href=&quot;http://javascript.crockford.com/code.html#variable%20declarations&quot; rel=&quot;noreferrer&quot;&gt;recommends never using implied globals&lt;/a&gt;, and according to the &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/ScriptingAutomation/Conceptual/JSCodingGuide/Advanced/Advanced.html#//apple_ref/doc/uid/TP40006541&quot; rel=&quot;noreferrer&quot;&gt;Apple JavaScript Coding Guidelines&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Any variable created without the &lt;code&gt;var&lt;/code&gt;\n  keyword is created at the global scope\n  and is not garbage collected when the\n  function returns (because it doesnt\n  go out of scope), presenting the\n  opportunity for a memory leak.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Here&apos;s quite a good example of how you can get caught out from not declaring local variables with &lt;code&gt;var&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;one&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;one&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;i++)\n    {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;two&lt;/span&gt;();\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(i);\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;two&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;(&lt;code&gt;i&lt;/code&gt; is reset at every iteration of the loop, as it&apos;s not declared locally in the &lt;code&gt;for&lt;/code&gt; loop but globally) eventually resulting in infinite loop&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I would say it&apos;s better to use &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; in most situations.&lt;/p&gt;\n\n&lt;p&gt;Local variables are always faster than the variables in global scope.&lt;/p&gt;\n\n&lt;p&gt;If you do not use &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; to declare a variable, the variable will be in global scope.&lt;/p&gt;\n\n&lt;p&gt;For more information, you can search &quot;scope chain JavaScript&quot; in Google.&lt;/p&gt;\n    ","\n&lt;h1&gt;Don&apos;t use &lt;code&gt;var&lt;/code&gt;!&lt;/h1&gt;\n&lt;p&gt;&lt;code&gt;var&lt;/code&gt; was the pre-ES6 way to declare a variable. We are now &lt;em&gt;in the future&lt;/em&gt;, and you should be coding as such.&lt;/p&gt;\n&lt;h2&gt;Use &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;&lt;code&gt;const&lt;/code&gt; should be used for ~95% of cases. It makes it so the variable reference can&apos;t change, thus array, object, and DOM node properties can change and should likely be &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;let&lt;/code&gt; should be be used for any variable expecting to be reassigned. This includes within a for loop. If you ever write &lt;code&gt;varName =&lt;/code&gt; beyond the initialization, use &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Both have block level scoping, as expected in most other languages.&lt;/p&gt;\n    ","\n&lt;p&gt;another difference \ne.g&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = a || [] ; &lt;span class=&quot;hljs-comment&quot;&gt;// works &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;while &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = a || [] ; &lt;span class=&quot;hljs-comment&quot;&gt;// a is undefined error.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;var&lt;/code&gt; is always a good idea to prevent variables from cluttering the global scope and variables from conflicting with each other, causing unwanted overwriting.&lt;/p&gt;\n    ","\n&lt;p&gt;Without &lt;code&gt;var&lt;/code&gt; - global variable.&lt;/p&gt;\n\n&lt;p&gt;Strongly recommended to &lt;strong&gt;ALWAYS&lt;/strong&gt; use &lt;code&gt;var&lt;/code&gt; statement, because init global variable in local context - is evil. But, if you need this dirty trick, you should write comment at start of page:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* global: varname1, varname2... */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is example code I have written for you to understand this concept:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; \nbar = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;     \nfooba = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Execute an anonymous function&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {    \n    bar = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;             &lt;span class=&quot;hljs-comment&quot;&gt;//overwrites global scope bar&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;           &lt;span class=&quot;hljs-comment&quot;&gt;//a new foo variable is created in this&apos; function&apos;s scope&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fooba = &lt;span class=&quot;hljs-number&quot;&gt;900&lt;/span&gt;;       &lt;span class=&quot;hljs-comment&quot;&gt;//same as above&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(foo);   &lt;span class=&quot;hljs-comment&quot;&gt;//prints 4&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(bar);   &lt;span class=&quot;hljs-comment&quot;&gt;//prints 100&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(fooba); &lt;span class=&quot;hljs-comment&quot;&gt;//prints 900&lt;/span&gt;\n})();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br/&amp;gt;&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br/&amp;gt;&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(foo);       &lt;span class=&quot;hljs-comment&quot;&gt;//prints 5&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(bar);       &lt;span class=&quot;hljs-comment&quot;&gt;//prints 100&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(fooba);     &lt;span class=&quot;hljs-comment&quot;&gt;//prints 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;@Chris S gave a nice example showcasing the practical difference (and danger) between &lt;code&gt;var&lt;/code&gt; and no &lt;code&gt;var&lt;/code&gt;. Here&apos;s another one, I find this one particularly dangerous because the difference is only visible in an asynchronous environment so it can easily slip by during testing.&lt;/p&gt;\n\n&lt;p&gt;As you&apos;d expect the following snippet outputs &lt;code&gt;[&quot;text&quot;]&lt;/code&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; array = []\n  array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;())&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;So does the following snippet (note the missing &lt;code&gt;let&lt;/code&gt; before &lt;code&gt;array&lt;/code&gt;):&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  array = []\n  array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;())&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Executing the data manipulation asynchronously still produces the same result with a single executor:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  array = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n  })\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result)})&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;But behaves differently with multiple ones:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  array = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n  })\n}\n\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result)})\n})&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Using let however:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; array = [];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array\n  })\n}\n\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;var_fun&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(result)})\n})&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As someeone trying to learn this this is how I see it. The above examples were maybe a bit overly complicated for a beginner. &lt;/p&gt;\n\n&lt;p&gt;If you run this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(local)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(local);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output will read as:  false, false, true, true&lt;/p&gt;\n\n&lt;p&gt;Because it sees the variables in the function as seperate from those outside of it, hence the term local variable and this was because we used var in the assignment. If you take away the var in the function so it now reads like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  local = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(local)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(local);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output is false, false, false, false&lt;/p&gt;\n\n&lt;p&gt;This is because rather than creating a new variable in the local scope or function it simply uses the global variables and reassigns them to false. &lt;/p&gt;\n    ","\n&lt;p&gt;I see people are confused when declaring variables with or without &lt;strong&gt;var&lt;/strong&gt; and inside or outside the function. Here is a deep example that will walk you through these steps:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/ozkantarik/L0avu6vh/&quot; rel=&quot;noreferrer&quot;&gt;See the script below in action here at jsfiddle&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined outside the function without var&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined outside the function with var&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting outside of all functions... \\n \\n a, b defined but c, d not defined yet: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n \\n (If I try to show the value of the undefined c or d, console.log would throw &apos;Uncaught ReferenceError: c is not defined&apos; error and script would stop running!)&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testVar1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined inside the function without var&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined inside the function with var&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Now inside the 1. function: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n d:&quot;&lt;/span&gt; + d);\n\n    a = a + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    b = b + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    d = d + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;After added values inside the 1. function: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n d:&quot;&lt;/span&gt; + d);\n};\n\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;testVar1&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Run the 1. function again...&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;testVar1&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testVar2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// Defined inside the function with var&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Now inside the 2. function: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n d:&quot;&lt;/span&gt; + d);\n\n    a = a + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    b = b + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    d = d + &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;After added values inside the 2. function: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n d:&quot;&lt;/span&gt; + d);\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;testVar2&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Now outside of all functions... \\n \\n Final Values: \\n a:&quot;&lt;/span&gt; + a + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n b:&quot;&lt;/span&gt; + b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n c:&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n You will not be able to see d here because then the value is requested, console.log would throw error &apos;Uncaught ReferenceError: d is not defined&apos; and script would stop. \\n &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;**************\\n Conclusion \\n ************** \\n \\n 1. No matter declared with or without var (like a, b) if they get their value outside the function, they will preserve their value and also any other values that are added inside various functions through the script are preserved.\\n 2. If the variable is declared without var inside a function (like c), it will act like the previous rule, it will preserve its value across all functions from now on. Either it got its first value in function testVar1() it still preserves the value and get additional value in function testVar2() \\n 3. If the variable is declared with var inside a function only (like d in testVar1 or testVar2) it will will be undefined whenever the function ends. So it will be temporary variable in a function.&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Now check console.log for the error when value d is requested next:&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(d);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt; &lt;/p&gt;\n  \n  &lt;ol&gt;\n  &lt;li&gt;No matter declared with or without var (like a, b) if they get their value outside the function, they will preserve their value and also any other values that are added inside various functions through the script are preserved.&lt;/li&gt;\n  &lt;li&gt;If the variable is declared without var inside a function (like c), it will act like the previous rule, it will preserve its value across all functions from now on. Either it got its first value in function testVar1() it still preserves the value and get additional value in function testVar2() &lt;/li&gt;\n  &lt;li&gt;If the variable is declared with var inside a function only (like d in testVar1 or testVar2) it will will be undefined whenever the function ends. So it will be temporary variable in a function.&lt;/li&gt;\n  &lt;/ol&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Inside a code you if you use a variable without using var, then what happens is the automatically var var_name is placed in the global scope eg:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;someFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = some_value; &lt;span class=&quot;hljs-comment&quot;&gt;/*a has local scope and it cannot be accessed when this\n    function is not active*/&lt;/span&gt;\n    b = a; &lt;span class=&quot;hljs-comment&quot;&gt;/*here it places &quot;var b&quot; at top of script i.e. gives b global scope or\n    uses already defined global variable b */&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Besides scopes issue, some folks also mention &lt;a href=&quot;https://www.w3schools.com/js/js_hoisting.asp&quot; rel=&quot;nofollow noreferrer&quot;&gt;hoisting&lt;/a&gt;, but no one gave an example. Here&apos;s one for global scope:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(noErrorCase);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; noErrorCase = &lt;span class=&quot;hljs-string&quot;&gt;&quot;you will reach that point&quot;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(runTimeError);\nrunTimeError = &lt;span class=&quot;hljs-string&quot;&gt;&quot;you won&apos;t reach that point&quot;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Without using &quot;var&quot; variables can only define when set a value. In example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;my_var;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;cannot work in &lt;strong&gt;global scope&lt;/strong&gt; or &lt;strong&gt;any other scope&lt;/strong&gt;. It should be with value like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;my_var = &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On the other hand you can define a vaiable like;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; my_var;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Its value is &lt;code&gt;undefined&lt;/code&gt; ( Its value is not &lt;code&gt;null&lt;/code&gt; and it is not equal to &lt;code&gt;null&lt;/code&gt; interestingly.).&lt;/p&gt;\n    ","\n&lt;p&gt;You should use var keyword unless you intend to have the variable attached to window object in browser. &lt;a href=&quot;http://www.yourtechchick.com/javascript/difference-between-javascript-variables-with-var-and-without-var/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&apos;s a link that explains scoping and difference between glocal scoping and local scoping with and wihtout var keyword.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;When variables get defined without the use of var keyword, what it looks like is a simple assignment operation.&lt;/p&gt;\n\n&lt;p&gt;When the value is assigned to a variable in javascript, the interpreter first tries to find the variable declaration in the same context/scope as that of assignment. When the interpreter executes &lt;code&gt;dummyVariable = 20&lt;/code&gt;, it looks up for the declaration of dummyVariable at beginning of the function. \n(Since all Variable declarations are moved to the beginning of the context by javascript interpreter and this is called hoisting)&lt;/p&gt;\n\n&lt;p&gt;You may also want to look at &lt;a href=&quot;http://www.yourtechchick.com/javascript/what-is-hoisting-in-javascript-javascript-hoisting-explained/&quot; rel=&quot;nofollow noreferrer&quot;&gt;hoisting in javascript&lt;/a&gt;&lt;/p&gt;\n    "]},"randomTags":[{"name":"pygame","slug":"pygame"},{"name":"strcmp","slug":"strcmp"},{"name":"package","slug":"package"},{"name":"file-io","slug":"file-io"},{"name":"httpurlconnection","slug":"httpurlconnection"},{"name":"undefined-index","slug":"undefined-index"},{"name":"raw-types","slug":"raw-types"},{"name":"server-side","slug":"server-side"},{"name":"integer","slug":"integer"},{"name":"async-await","slug":"async-await"},{"name":"return","slug":"return"},{"name":"html-select","slug":"html-select"},{"name":"php-password-hash","slug":"php-password-hash"},{"name":"type-punning","slug":"type-punning"},{"name":"intersection","slug":"intersection"},{"name":"pdo","slug":"pdo"},{"name":"q","slug":"q"},{"name":"include-path","slug":"include-path"},{"name":"repr","slug":"repr"},{"name":"generic-list","slug":"generic-list"}]},"__N_SSG":true}