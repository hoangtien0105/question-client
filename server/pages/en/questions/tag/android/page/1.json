{"pageProps":{"data":{"count":1,"rows":[{"id":32,"title":"How to use ThreeTenABP in Android Project","slug":"how-to-use-threetenabp-in-android-project-1657384345704","postType":"QUESTION","createdAt":"2022-07-09T16:32:25.000Z","updatedAt":"2022-07-09T16:32:25.000Z","tags":[{"id":107,"name":"android","slug":"android","createdAt":"2022-07-09T16:32:25.000Z","updatedAt":"2022-07-09T16:32:25.000Z","Questions_Tags":{"questionId":32,"tagId":107}}]}]},"slug":"android","page":"1","answers":{"32":["\n&lt;h1&gt;Attention: This answer, while technically correct, is now out of date&lt;/h1&gt;\n&lt;h3&gt;Java 8+ API desugaring support now available via Android Gradle Plugin 4.0.0+&lt;/h3&gt;\n&lt;p&gt;(Also see &lt;a href=&quot;https://stackoverflow.com/a/61603915/2065427&quot;&gt;Basil Bourque&apos;s answer below&lt;/a&gt;)&lt;/p&gt;\n&lt;p&gt;Development on the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot; rel=&quot;noreferrer&quot;&gt;ThreeTenABP Library&lt;/a&gt; is winding down. Please consider switching to Android Gradle plugin 4.0, java.time.*, and its core library desugaring feature in the coming months.&lt;/p&gt;\n&lt;p&gt;To enable support for these language APIs on any version of the Android platform, update the &lt;a href=&quot;https://developer.android.com/studio/write/java8-support#library-desugaring&quot; rel=&quot;noreferrer&quot;&gt;Android plugin to 4.0.0 (or higher)&lt;/a&gt; and include the following in your modules build.gradle file:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;android {\n  defaultConfig {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Required when setting minSdkVersion to 20 or lower&lt;/span&gt;\n    multiDexEnabled &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n  }\n\n  compileOptions {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Flag to enable support for the new language APIs&lt;/span&gt;\n    coreLibraryDesugaringEnabled &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Sets Java compatibility to Java 8&lt;/span&gt;\n    sourceCompatibility JavaVersion.VERSION_1_8\n    targetCompatibility JavaVersion.VERSION_1_8\n  }\n}\n\ndependencies {\n  coreLibraryDesugaring &lt;span class=&quot;hljs-string&quot;&gt;&apos;com.android.tools:desugar_jdk_libs:1.0.5&apos;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h1&gt;Original Answer&lt;/h1&gt;\n&lt;h2&gt;First Discovery: Why You Have To Use &lt;em&gt;ThreeTenABP&lt;/em&gt; Instead of &lt;em&gt;java.time&lt;/em&gt;, &lt;em&gt;ThreeTen-Backport&lt;/em&gt;, or even &lt;em&gt;Joda-Time&lt;/em&gt;&lt;/h2&gt;\n&lt;p&gt;This is a really short version of the VERY LONG PROCESS of defining a new standard. All of these packages are pretty much the same thing: libraries that provide good, modern time handling functionality for Java. The differences are subtle but important.&lt;/p&gt;\n&lt;p&gt;The most obvious solution would be to use the built-in &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;java.time&lt;/code&gt;&lt;/a&gt; package, since this is the new standard way to deal with time and dates in Java. It is an implementation of &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=310&quot; rel=&quot;noreferrer&quot;&gt;JSR 310&lt;/a&gt;, which was a new standard proposal for time handling based on the &lt;a href=&quot;http://www.joda.org/joda-time/&quot; rel=&quot;noreferrer&quot;&gt;Joda-Time&lt;/a&gt; library.&lt;/p&gt;\n&lt;p&gt;However, &lt;code&gt;java.time&lt;/code&gt; was introduced in &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_8&quot; rel=&quot;noreferrer&quot;&gt;Java 8&lt;/a&gt;. Android up to &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Marshmallow&quot; rel=&quot;noreferrer&quot;&gt;Marshmallow&lt;/a&gt; runs on Java 7 (&quot;Android N&quot; is the first version to introduce Java 8 language features). Thus, unless you&apos;re only targeting &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Nougat&quot; rel=&quot;noreferrer&quot;&gt;Android N &lt;em&gt;Nougat&lt;/em&gt;&lt;/a&gt; and above, you can&apos;t rely on Java 8 language features (I&apos;m not actually sure this is 100% true, but this is how I understand it). So &lt;code&gt;java.time&lt;/code&gt; is out.&lt;/p&gt;\n&lt;p&gt;The next option might be &lt;a href=&quot;http://www.joda.org/joda-time/&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Joda-Time&lt;/em&gt;&lt;/a&gt;, since &lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=310&quot; rel=&quot;noreferrer&quot;&gt;JSR 310&lt;/a&gt; was based on Joda-Time. However, as the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot; rel=&quot;noreferrer&quot;&gt;ThreeTenABP readme&lt;/a&gt; indicates, for a number of reasons, Joda-Time is not the best option.&lt;/p&gt;\n&lt;p&gt;Next is &lt;a href=&quot;http://www.threeten.org/threetenbp/&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;ThreeTen-Backport&lt;/em&gt;&lt;/a&gt;, which back-ports much (but not all) of the Java 8 &lt;code&gt;java.time&lt;/code&gt; functionality to Java 7. This is fine for most use cases, but, as indicated in the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot; rel=&quot;noreferrer&quot;&gt;ThreeTenABP readme&lt;/a&gt;, it has performance issues with Android.&lt;/p&gt;\n&lt;p&gt;So the last and seemingly correct option is &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;ThreeTenABP&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;h2&gt;Second Discovery: Build Tools and Dependency Management&lt;/h2&gt;\n&lt;p&gt;Since compiling a program -- especially one using a bunch of external libraries -- is complex, Java almost invariably uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Build_automation&quot; rel=&quot;noreferrer&quot;&gt;&quot;build tool&quot;&lt;/a&gt; to manage the process. &lt;a href=&quot;https://en.wikipedia.org/wiki/Make_(software)&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Make&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Ant&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Apache Ant&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Maven&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Apache Maven&lt;/em&gt;&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Gradle&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Gradle&lt;/em&gt;&lt;/a&gt; are all build tools that are used with Java programs (see &lt;a href=&quot;https://technologyconversations.com/2014/06/18/build-tools/&quot; rel=&quot;noreferrer&quot;&gt;this post&lt;/a&gt; for comparisons). As noted further down, Gradle is the chosen build tool for Android projects.&lt;/p&gt;\n&lt;p&gt;These build tools include dependency management. Apache Maven appears to be the first to include a centralized package repository. Maven introduced the &lt;a href=&quot;https://search.maven.org/&quot; rel=&quot;noreferrer&quot;&gt;Maven Central Repository&lt;/a&gt;, which allows functionality equivalent to php&apos;s &lt;code&gt;composer&lt;/code&gt; with Packagist and Ruby&apos;s &lt;code&gt;gem&lt;/code&gt; with rubygems.org. In other words, the Maven Central Repository is to Maven (and Gradle) what Packagist is to composer -- a definitive and secure source for versioned packages.&lt;/p&gt;\n&lt;h2&gt;Third Discovery: Gradle Handles Dependencies in Android Projects&lt;/h2&gt;\n&lt;p&gt;High on my to-do list is to read the Gradle docs &lt;a href=&quot;https://gradle.org/getting-started-gradle/&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;, including their free eBooks. Had I read these weeks ago when I started learning Android, I would surely have known that Gradle can use the Maven Central Repository to manage dependencies in Android Projects. Furthermore, as detailed in &lt;a href=&quot;https://stackoverflow.com/a/26630422/2065427&quot;&gt;this&lt;/a&gt; StackOverflow answer, as of Android Studio 0.8.9, Gradle uses Maven Central Repository implicitly through Bintray&apos;s JCenter, which means you don&apos;t have to do any extra config to set up the repo -- you just list the dependencies.&lt;/p&gt;\n&lt;h2&gt;Fourth Discovery: Project Dependencies Are Listed in [project dir]/app/build.gradle&lt;/h2&gt;\n&lt;p&gt;Again, obvious to those who have any experience using Gradle in Java, but it took me a while to figure this out. If you see people saying &quot;Oh, just add &lt;code&gt;compile &apos;this-or-that.jar&apos;&lt;/code&gt;&quot; or something similar, know that &lt;code&gt;compile&lt;/code&gt; is a directive in that build.gradle file that indicates compile-time dependencies. &lt;a href=&quot;https://docs.gradle.org/current/userguide/artifact_dependencies_tutorial.html&quot; rel=&quot;noreferrer&quot;&gt;Here&apos;s&lt;/a&gt; the official Gradle page on dependency management.&lt;/p&gt;\n&lt;h2&gt;Fifth Discovery: ThreeTenABP Is Managed by Jake Wharton, not by ThreeTen&lt;/h2&gt;\n&lt;p&gt;Yet another issue I spent too much time figuring out. If you look for ThreeTen in Maven Central, you&apos;ll only see packages for &lt;code&gt;threetenbp&lt;/code&gt;, not &lt;code&gt;threetenabp&lt;/code&gt;. If you go to the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot; rel=&quot;noreferrer&quot;&gt;github repo for ThreeTenABP&lt;/a&gt;, you&apos;ll see that infamous &lt;code&gt;compile &apos;this-or-that&apos;&lt;/code&gt; line under the Download section of the Readme.&lt;/p&gt;\n&lt;p&gt;When I first hit this github repo, I didn&apos;t know what that compile line meant, and I tried to run it in my terminal (with an obvious and predictable failure). Frustrated, I didn&apos;t return to it until long after I figured the rest out, and finally realized that it&apos;s a Maven Repo line pointing to the &lt;code&gt;com.jakewharton.threetenabp&lt;/code&gt; repo, as opposed to the &lt;code&gt;org.threeten&lt;/code&gt; repo. That&apos;s why I thought the ThreeTenABP package wasn&apos;t in the Maven repo.&lt;/p&gt;\n&lt;h2&gt;Summary: Making it work&lt;/h2&gt;\n&lt;p&gt;Now it all seems pretty easy. You can get modern time handling functions in an Android project by making sure your &lt;code&gt;[project folder]/app/build.gradle&lt;/code&gt; file has the &lt;code&gt;implementation &apos;com.jakewharton.threetenabp:threetenabp:1.2.1&apos;&lt;/code&gt; line in its &lt;code&gt;dependencies&lt;/code&gt; section:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;apply plugin: &lt;span class=&quot;hljs-string&quot;&gt;&apos;com.android.application&apos;&lt;/span&gt;\n\nandroid {\n    compileSdkVersion &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;\n    buildToolsVersion &lt;span class=&quot;hljs-string&quot;&gt;&quot;23.0.3&quot;&lt;/span&gt;\n\n    defaultConfig {\n        applicationId &lt;span class=&quot;hljs-string&quot;&gt;&quot;me.ahuman.myapp&quot;&lt;/span&gt;\n        minSdkVersion &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;\n        targetSdkVersion &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;\n        versionCode &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        versionName &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;\n    }\n    buildTypes {\n        release {\n            minifyEnabled &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n            proguardFiles &lt;span class=&quot;hljs-title function_&quot;&gt;getDefaultProguardFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;proguard-android.txt&apos;&lt;/span&gt;)&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;proguard-rules.pro&apos;&lt;/span&gt;\n        }\n    }\n}\n\n\ndependencies {\n    implementation &lt;span class=&quot;hljs-title function_&quot;&gt;fileTree&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(dir: &lt;span class=&quot;hljs-string&quot;&gt;&apos;libs&apos;&lt;/span&gt;, include: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;*.jar&apos;&lt;/span&gt;])&lt;/span&gt;\n    testImplementation &lt;span class=&quot;hljs-string&quot;&gt;&apos;junit:junit:4.12&apos;&lt;/span&gt;\n    implementation &lt;span class=&quot;hljs-string&quot;&gt;&apos;com.android.support:appcompat-v7:23.4.0&apos;&lt;/span&gt;\n    implementation &lt;span class=&quot;hljs-string&quot;&gt;&apos;com.android.support:design:23.4.0&apos;&lt;/span&gt;\n    implementation &lt;span class=&quot;hljs-string&quot;&gt;&apos;com.jakewharton.threetenabp:threetenabp:1.2.1&apos;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Also add this to Application class:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Application&lt;/span&gt; &lt;/span&gt;{    \n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    public void onCreate() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onCreate();\n        &lt;span class=&quot;hljs-type&quot;&gt;AndroidThreeTen&lt;/span&gt;.init(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n        &lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The accepted &lt;a href=&quot;https://stackoverflow.com/a/38922755/642706&quot;&gt;Answer by kael&lt;/a&gt; is correct. In addition, I will mention a couple things, and provide a diagram about obtaining &lt;em&gt;java.time&lt;/em&gt; functionality.&lt;/p&gt;\n&lt;h1&gt;&lt;em&gt;java.time&lt;/em&gt; built into Android 26+&lt;/h1&gt;\n&lt;p&gt;If targeting &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_version_history#Android_8.0_Oreo_(API_26)&quot; rel=&quot;nofollow noreferrer&quot;&gt;Android 26&lt;/a&gt; or later, you will find an implementation of &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=310&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSR 310&lt;/a&gt; (&lt;em&gt;java.time&lt;/em&gt; classes) bundled with Android. No need to add &lt;em&gt;ThreeTenABP&lt;/em&gt;.&lt;/p&gt;\n&lt;h1&gt;APIs nearly identical&lt;/h1&gt;\n&lt;p&gt;Just to clarify, &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;ThreeTenABP&lt;/em&gt;&lt;/a&gt; for Android is an adaptation of the &lt;a href=&quot;https://www.threeten.org/threetenbp/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;ThreeTen-Backport&lt;/em&gt;&lt;/a&gt; library that brings most of the &lt;em&gt;java.time&lt;/em&gt; functionality to &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_6&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java 6&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_7&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java 7&lt;/a&gt;. This back-port shares nearly an identical API with &lt;em&gt;java.time&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Suppose you are now targeting Android earlier than 26, so you use &lt;em&gt;ThreeTenABP&lt;/em&gt;. Later, your may eventually drop support for these earlier versions of Android, to use the &lt;em&gt;java.time&lt;/em&gt; classes bundled with Android. When that happens, you need make few changes to your codebase other than (a) switching &lt;code&gt;import&lt;/code&gt; statements, and (b) changing any calls you made to &lt;a href=&quot;https://www.threeten.org/threetenbp/apidocs/org/threeten/bp/DateTimeUtils.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;org.threeten.bp.DateTimeUtils&lt;/code&gt;&lt;/a&gt; to use the new conversion methods that were added to the old legacy date-time classes (&lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;GregorianCalendar&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;The transition process from &lt;em&gt;ThreeTenABP&lt;/em&gt; to &lt;em&gt;java.time&lt;/em&gt; should be smooth and nearly painless.&lt;/p&gt;\n&lt;h1&gt;When to use which framework&lt;/h1&gt;\n&lt;p&gt;Here is a chart showing the three frameworks, and indicating when to use which one in which scenarios.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt; Update:&lt;/strong&gt; Android Gradle Plugin 4.0.0+ brings a new 4th option, &lt;a href=&quot;https://developer.android.com/studio/write/java8-support#library-desugaring&quot; rel=&quot;nofollow noreferrer&quot;&gt;API desugaring&lt;/a&gt; to make available a &lt;a href=&quot;https://developer.android.com/studio/write/java8-support-table&quot; rel=&quot;nofollow noreferrer&quot;&gt;subset of &lt;em&gt;java.time&lt;/em&gt; functionality&lt;/a&gt; not originally built into earlier Android. See the top of the &lt;a href=&quot;https://stackoverflow.com/a/38922755/642706&quot;&gt;main Answer&lt;/a&gt; by kael.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Sksw9.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Sksw9.png&quot; alt=&quot;Table of which java.time library to use with which version of Java or Android&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;About &lt;em&gt;java.time&lt;/em&gt;&lt;/h1&gt;\n&lt;p&gt;The &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/package-summary.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;java.time&lt;/em&gt;&lt;/a&gt; framework is built into Java 8 and later. These classes supplant the troublesome old &lt;a href=&quot;https://en.wikipedia.org/wiki/Legacy_system&quot; rel=&quot;nofollow noreferrer&quot;&gt;legacy&lt;/a&gt; date-time classes such as &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Date.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;java.util.Date&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Calendar&lt;/code&gt;&lt;/a&gt;, &amp;amp; &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/text/SimpleDateFormat.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;SimpleDateFormat&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;To learn more, see the &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/datetime/TOC.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;Oracle Tutorial&lt;/em&gt;&lt;/a&gt;. And search Stack Overflow for many examples and explanations. Specification is &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=310&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSR 310&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The &lt;a href=&quot;http://www.joda.org/joda-time/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;Joda-Time&lt;/em&gt;&lt;/a&gt; project, now in &lt;a href=&quot;https://en.wikipedia.org/wiki/Maintenance_mode&quot; rel=&quot;nofollow noreferrer&quot;&gt;maintenance mode&lt;/a&gt;, advises migration to the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/package-summary.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;java.time&lt;/a&gt; classes.&lt;/p&gt;\n&lt;p&gt;You may exchange &lt;em&gt;java.time&lt;/em&gt; objects directly with your database. Use a &lt;a href=&quot;https://en.wikipedia.org/wiki/JDBC_driver&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDBC driver&lt;/a&gt; compliant with &lt;a href=&quot;http://openjdk.java.net/jeps/170&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDBC 4.2&lt;/a&gt; or later. No need for strings, no need for &lt;code&gt;java.sql.*&lt;/code&gt; classes. Hibernate 5 &amp;amp; JPA 2.2 support &lt;em&gt;java.time&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Where to obtain the java.time classes?&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_8&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Java SE 8&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_9&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Java SE 9&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_10&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Java SE 10&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_11&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Java SE 11&lt;/strong&gt;&lt;/a&gt;, and later  - Part of the standard Java API with a bundled implementation.\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_9&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Java 9&lt;/strong&gt;&lt;/a&gt; brought some minor features and fixes.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_6&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Java SE 6&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_7&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Java SE 7&lt;/strong&gt;&lt;/a&gt;\n&lt;ul&gt;\n&lt;li&gt;Most of the &lt;em&gt;java.time&lt;/em&gt; functionality is back-ported to Java 6 &amp;amp; 7 in &lt;a href=&quot;http://www.threeten.org/threetenbp/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;&lt;strong&gt;ThreeTen-Backport&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Android_(operating_system)&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Android&lt;/strong&gt;&lt;/a&gt;\n&lt;ul&gt;\n&lt;li&gt;Later versions of Android (26+) bundle implementations of the &lt;em&gt;java.time&lt;/em&gt; classes.&lt;/li&gt;\n&lt;li&gt;For earlier Android (&amp;lt;26), the process of &lt;a href=&quot;https://developer.android.com/studio/write/java8-support#library-desugaring&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;API desugaring&lt;/em&gt;&lt;/a&gt; brings a &lt;a href=&quot;https://developer.android.com/studio/write/java8-support-table&quot; rel=&quot;nofollow noreferrer&quot;&gt;subset of the &lt;em&gt;java.time&lt;/em&gt;&lt;/a&gt; functionality not originally built into Android.\n&lt;ul&gt;\n&lt;li&gt;If the desugaring does not offer what you need, the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;&lt;strong&gt;ThreeTenABP&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; project adapts &lt;a href=&quot;http://www.threeten.org/threetenbp/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;&lt;strong&gt;ThreeTen-Backport&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; (mentioned above) to Android. See &lt;a href=&quot;http://stackoverflow.com/q/38922754/642706&quot;&gt;&lt;em&gt;How to use ThreeTenABP&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Add the following in your build gradle (Module level) file in Android Studio:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-delphi&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;com.jakewharton.threetenabp:threetenabp:1.2.1&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Create the Application class and initialize it like so:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;App&lt;/span&gt; : &lt;span class=&quot;hljs-type&quot;&gt;Application&lt;/span&gt;&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onCreate()\n        AndroidThreeTen.&lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"randomTags":[{"name":"promise","slug":"promise"},{"name":"cpu-architecture","slug":"cpu-architecture"},{"name":"footer","slug":"footer"},{"name":"attr","slug":"attr"},{"name":"include","slug":"include"},{"name":"password-hash","slug":"password-hash"},{"name":"http","slug":"http"},{"name":"frame","slug":"frame"},{"name":"delayedvariableexpansion","slug":"delayedvariableexpansion"},{"name":"optimization","slug":"optimization"},{"name":"http-status-code-301","slug":"http-status-code-301"},{"name":"currency","slug":"currency"},{"name":"razor","slug":"razor"},{"name":"pygame2","slug":"pygame2"},{"name":"heap-memory","slug":"heap-memory"},{"name":"boolean","slug":"boolean"},{"name":"sorting","slug":"sorting"},{"name":"pcre","slug":"pcre"},{"name":"dictionary","slug":"dictionary"},{"name":"asp.net-mvc-4","slug":"asp.net-mvc-4"}]},"__N_SSG":true}