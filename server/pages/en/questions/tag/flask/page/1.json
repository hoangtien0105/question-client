{"pageProps":{"data":{"count":1,"rows":[{"id":379,"title":"Get the data received in a Flask request","slug":"get-the-data-received-in-a-flask-request-1657387804432","postType":"QUESTION","createdAt":"2022-07-09T17:30:04.000Z","updatedAt":"2022-07-09T17:30:04.000Z","tags":[{"id":2072,"name":"flask","slug":"flask","createdAt":"2022-07-09T17:30:04.000Z","updatedAt":"2022-07-09T17:30:04.000Z","Questions_Tags":{"questionId":379,"tagId":2072}}]}]},"slug":"flask","page":"1","answers":{"379":["\n&lt;p&gt;The &lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt; describe the attributes available on the &lt;code&gt;request&lt;/code&gt; object (&lt;code&gt;from flask import request&lt;/code&gt;) during a request. In most common cases &lt;code&gt;request.data&lt;/code&gt; will be empty because it&apos;s used as a fallback:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;request.data&lt;/code&gt; Contains the incoming request data as string in case it came with a mimetype Flask does not handle.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.args&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.args&lt;/code&gt;&lt;/a&gt;: the key/value pairs in the URL query string&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.form&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.form&lt;/code&gt;&lt;/a&gt;: the key/value pairs in the body, from a HTML post form, or JavaScript request that isn&apos;t JSON encoded&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.files&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.files&lt;/code&gt;&lt;/a&gt;: the files in the body, which Flask keeps separate from &lt;code&gt;form&lt;/code&gt;. HTML forms must use &lt;code&gt;enctype=multipart/form-data&lt;/code&gt; or files will not be uploaded.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.values&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.values&lt;/code&gt;&lt;/a&gt;: combined &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;form&lt;/code&gt;, preferring &lt;code&gt;args&lt;/code&gt; if keys overlap&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.json&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.json&lt;/code&gt;&lt;/a&gt;: parsed JSON data. The request must have the &lt;code&gt;application/json&lt;/code&gt; content type, or use &lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.get_json&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.get_json(force=True)&lt;/code&gt;&lt;/a&gt; to ignore the content type.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;All of these are &lt;a href=&quot;https://werkzeug.palletsprojects.com/datastructures/#werkzeug.datastructures.MultiDict&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; instances (except for &lt;code&gt;json&lt;/code&gt;). You can access values using:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;request.form[&apos;name&apos;]&lt;/code&gt;: use indexing if you know the key exists&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;request.form.get(&apos;name&apos;)&lt;/code&gt;: use &lt;code&gt;get&lt;/code&gt; if the key might not exist&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;request.form.getlist(&apos;name&apos;)&lt;/code&gt;: use &lt;code&gt;getlist&lt;/code&gt; if the key is sent multiple times and you want a list of values. &lt;code&gt;get&lt;/code&gt; only returns the first value.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;To get the raw data, use &lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.data&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.data&lt;/code&gt;&lt;/a&gt;. This only works if it couldn&apos;t be parsed as form data, otherwise it will be empty and &lt;code&gt;request.form&lt;/code&gt; will have the parsed data.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; request\nrequest.data\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For URL query parameters, use &lt;code&gt;request.args&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;search = request.args.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;search&quot;&lt;/span&gt;)\npage = request.args.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;page&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For posted form input, use &lt;code&gt;request.form&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;email = request.form.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;email&apos;&lt;/span&gt;)\npassword = request.form.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For JSON posted with content type &lt;code&gt;application/json&lt;/code&gt;, use &lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.get_json&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.get_json()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data = request.get_json()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s an example of parsing posted JSON data and echoing it back.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Flask, request, jsonify\n\napp = Flask(__name__)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/foo&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;) &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;():\n    data = request.json\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jsonify(data)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To post JSON with curl:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;curl -i -H &quot;Content-Type: application/json&quot; -X POST -d &apos;{&quot;userId&quot;:&quot;1&quot;, &quot;username&quot;: &quot;fizz bizz&quot;}&apos; http://localhost:5000/foo\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or to use Postman:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/2CaoI.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/2CaoI.png&quot; alt=&quot;using postman to post JSON&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To get the raw post body regardless of the content type, use &lt;code&gt;request.get_data()&lt;/code&gt;. If you use &lt;code&gt;request.data&lt;/code&gt;, it calls &lt;code&gt;request.get_data(parse_form_data=True)&lt;/code&gt;, which will populate the &lt;code&gt;request.form&lt;/code&gt; &lt;code&gt;MultiDict&lt;/code&gt; and leave &lt;code&gt;data&lt;/code&gt; empty.&lt;/p&gt;\n    ","\n&lt;p&gt;If you post JSON with content type &lt;code&gt;application/json&lt;/code&gt;, use &lt;code&gt;request.get_json()&lt;/code&gt; to get it in Flask. If the content type is not correct, &lt;code&gt;None&lt;/code&gt; is returned. If the data is not JSON, an error is raised.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;/something&quot;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;do_something&lt;/span&gt;():\n    data = request.get_json()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To get &lt;code&gt;request.form&lt;/code&gt; as a normal dictionary , use &lt;code&gt;request.form.to_dict(flat=False)&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;To return JSON data for an API, pass it to &lt;code&gt;jsonify&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;This example returns form data as JSON data.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/form_to_json&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;form_to_json&lt;/span&gt;():\n    data = request.form.to_dict(flat=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jsonify(data)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&apos;s an example of POST form data with curl, returning as JSON:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;$ curl http://127.0.0.1:5000/data -d &quot;name=ivanleoncz&amp;amp;role=Software Developer&quot;\n{\n  &quot;name&quot;: &quot;ivanleoncz&quot;, \n  &quot;role&quot;: &quot;Software Developer&quot;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;request.get_json()&lt;/code&gt; to get posted JSON data.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data = request.get_json()\nname = data.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use &lt;code&gt;request.form&lt;/code&gt; to get data when submitting a form with the POST method.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;name = request.form.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use &lt;code&gt;request.args&lt;/code&gt; to get data passed in the query string of the URL, like when submitting a form with the GET method.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;request.args.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;request.form&lt;/code&gt; etc. are dict-like, use the &lt;code&gt;get&lt;/code&gt; method to get a value with a default if it wasn&apos;t passed.&lt;/p&gt;\n    ","\n&lt;p&gt;To get JSON posted without the &lt;code&gt;application/json&lt;/code&gt; content type, use &lt;code&gt;request.get_json(force=True)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/process_data&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;process_data&lt;/span&gt;():\n    req_data = request.get_json(force=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n    language = req_data[&lt;span class=&quot;hljs-string&quot;&gt;&apos;language&apos;&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;The language value is: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(language)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To post JSON with jQuery in JavaScript, use &lt;code&gt;JSON.stringify&lt;/code&gt; to dump the data, and set the content type to &lt;code&gt;application/json&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value_data = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;/process&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(value_data),\n    &lt;span class=&quot;hljs-attr&quot;&gt;contentType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;application/json&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;response_data&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;success&quot;&lt;/span&gt;);\n    }   \n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Parse it in Flask with &lt;code&gt;request.get_json()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data = request.get_json()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Import request:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; request\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;URL query parameters:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;name = request.args.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;)\nage = request.args.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Form Input:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;name = request.form.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;)\nage = request.form.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;OR (use indexing if you know the key exists, &lt;strong&gt;specify the name of input fields&lt;/strong&gt;)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;name = request.form[&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]\nage = request.form[&lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;JSON Data (for content type &lt;strong&gt;application/json&lt;/strong&gt;)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data = request.get_json()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The raw data is passed in to the Flask application from the WSGI server as &lt;code&gt;request.stream&lt;/code&gt;. The length of the stream is in the &lt;code&gt;Content-Length&lt;/code&gt; header.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;length = request.headers[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;]\ndata = request.stream.read(length)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is usually safer to use &lt;code&gt;request.get_data()&lt;/code&gt; instead.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s an example of posting form data to add a user to a database. Check &lt;code&gt;request.method == &quot;POST&quot;&lt;/code&gt; to check if the form was submitted. Use keys from &lt;code&gt;request.form&lt;/code&gt; to get the form data. Render an HTML template with a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; otherwise. The fields in the form should have &lt;code&gt;name&lt;/code&gt; attributes that match the keys in &lt;code&gt;request.form&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Flask, request, render_template\n\napp = Flask(__name__)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;/user/add&quot;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&quot;GET&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add_user&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; request.method == &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;:\n        user = User(\n            username=request.form[&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;],\n            email=request.form[&lt;span class=&quot;hljs-string&quot;&gt;&quot;email&quot;&lt;/span&gt;],\n        )\n        db.session.add(user)\n        db.session.commit()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; redirect(url_for(&lt;span class=&quot;hljs-string&quot;&gt;&quot;index&quot;&lt;/span&gt;))\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; render_template(&lt;span class=&quot;hljs-string&quot;&gt;&quot;add_user.html&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Username&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;email&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Email&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;email&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;email&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;email&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can get request data from&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;request.form&lt;/code&gt; for form data, this includes form and file data,&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;request.json&lt;/code&gt; and &lt;code&gt;request.get_json&lt;/code&gt; for JSON data&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;request.headers&lt;/code&gt; for headers&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;request.args&lt;/code&gt; to get query params&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;They&apos;re all like a dictionary, use &lt;code&gt;request.form[&apos;name&apos;]&lt;/code&gt; if you know the key exists, or &lt;code&gt;request.form.get(&apos;name&apos;)&lt;/code&gt; if it is optional.&lt;/p&gt;\n    ","\n&lt;p&gt;To parse JSON, use &lt;code&gt;request.get_json()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;/something&quot;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;do_something&lt;/span&gt;():\n    result = handle(request.get_json())\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jsonify(data=result)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When writing a Slack bot, which is supposed to send JSON data, I got a payload where the &lt;code&gt;Content-Type&lt;/code&gt; was &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;I tried &lt;code&gt;request.get_json()&lt;/code&gt; and it didn&apos;t work.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/process_data&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;process_data&lt;/span&gt;():\n   req_data = request.get_json(force=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Instead I used &lt;code&gt;request.form&lt;/code&gt; to get the form data field that &lt;em&gt;contained&lt;/em&gt; JSON, then loaded that.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; json\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@ app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/slack/request_handler&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;request_handler&lt;/span&gt;():\n   req_data = json.loads(request.form[&lt;span class=&quot;hljs-string&quot;&gt;&quot;payload&quot;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If the content type is recognized as form data, &lt;code&gt;request.data&lt;/code&gt; will parse that into &lt;code&gt;request.form&lt;/code&gt; and return an empty string.&lt;/p&gt;\n\n&lt;p&gt;To get the raw data regardless of content type, call &lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.get_data&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.get_data()&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;request.data&lt;/code&gt; calls &lt;code&gt;get_data(parse_form_data=True)&lt;/code&gt;, while the default is &lt;code&gt;False&lt;/code&gt; if you call it directly.&lt;/p&gt;\n    ","\n&lt;p&gt;If the body is recognized as form data, it will be in &lt;code&gt;request.form&lt;/code&gt;. If it&apos;s JSON, it will be in &lt;code&gt;request.get_json()&lt;/code&gt;. Otherwise the raw data will be in &lt;code&gt;request.data&lt;/code&gt;. If you&apos;re not sure how data will be submitted, you can use an &lt;code&gt;or&lt;/code&gt; chain to get the first one with data.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_request_data&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (\n        request.args\n        &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; request.form\n        &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; request.get_json(force=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, silent=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; request.data\n    )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;request.args&lt;/code&gt; contains args parsed from the query string, regardless of what was in the body, so you would remove that from &lt;code&gt;get_request_data()&lt;/code&gt; if both it and a body should data at  the same time.&lt;/p&gt;\n    ","\n&lt;p&gt;When posting form data with an HTML form, be sure the &lt;code&gt;input&lt;/code&gt; tags have &lt;code&gt;name&lt;/code&gt; attributes, otherwise they won&apos;t be present in &lt;code&gt;request.form&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;index&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(request.form)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n&amp;lt;form method=&quot;post&quot;&amp;gt;\n    &amp;lt;input type=&quot;text&quot;&amp;gt;\n    &amp;lt;input type=&quot;text&quot; id=&quot;txt2&quot;&amp;gt;\n    &amp;lt;input type=&quot;text&quot; name=&quot;txt3&quot; id=&quot;txt3&quot;&amp;gt;  \n    &amp;lt;input type=&quot;submit&quot;&amp;gt;\n&amp;lt;/form&amp;gt;\n&quot;&quot;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;ImmutableMultiDict([(&apos;txt3&apos;, &apos;text 3&apos;)])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Only the &lt;code&gt;txt3&lt;/code&gt; input had a &lt;code&gt;name&lt;/code&gt;, so it&apos;s the only key present in &lt;code&gt;request.form&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/addData&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add_data&lt;/span&gt;():\n     data_in = mongo.db.Data\n     &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt; = request.values.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;)\n     name = request.values.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;)\n     newuser = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt; : name}\n     &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; voter.find({&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt; : name}).count() &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Data Exists&quot;&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            data_in.insert(newuser)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Data Added&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I just faced the same need. I have to save information in case of any unexpected situation. So, I use the following formula:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Info = &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s/%s/%s&quot;&lt;/span&gt; % (request.remote_addr, &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(request), &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(session))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;repr(request) will give a string representation of the basic information. You could add user-agent data with:\nrequest.headers.get(&apos;User-Agent&apos;)&lt;/p&gt;\n&lt;p&gt;I also save the session continent as it could contain valuable information&lt;/p&gt;\n    ","\n&lt;p&gt;Try - &amp;gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; request\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parse_request&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; request.method == &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;:\n       data = request.form.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;request.data\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is great to use but remember that it comes in as a string and will need iterated through.&lt;/p&gt;\n    "]},"randomTags":[{"name":"click","slug":"click"},{"name":"hash","slug":"hash"},{"name":"c++-faq","slug":"c++-faq"},{"name":"swift","slug":"swift"},{"name":"design-patterns","slug":"design-patterns"},{"name":"sql","slug":"sql"},{"name":"undefined-behavior","slug":"undefined-behavior"},{"name":"variable-length-array","slug":"variable-length-array"},{"name":"spl","slug":"spl"},{"name":"hashcode","slug":"hashcode"},{"name":"optimization","slug":"optimization"},{"name":"rule-of-three","slug":"rule-of-three"},{"name":"oracle","slug":"oracle"},{"name":"object-literal","slug":"object-literal"},{"name":"command","slug":"command"},{"name":"reserved-words","slug":"reserved-words"},{"name":"opengl","slug":"opengl"},{"name":"database","slug":"database"},{"name":"restriction","slug":"restriction"},{"name":"python","slug":"python"}]},"__N_SSG":true}