{"pageProps":{"data":{"count":1,"rows":[{"id":374,"title":"Importing installed package from script raises \"AttributeError: module has no attribute\" or \"ImportError: cannot import name\"","slug":"importing-installed-package-from-script-raises-\"attributeerror:-module-has-no-attribute\"-or-\"importerror:-cannot-import-name\"-1657387790607","postType":"QUESTION","createdAt":"2022-07-09T17:29:50.000Z","updatedAt":"2022-07-09T17:29:50.000Z","tags":[{"id":2055,"name":"shadowing","slug":"shadowing","createdAt":"2022-07-09T17:29:50.000Z","updatedAt":"2022-07-09T17:29:50.000Z","Questions_Tags":{"questionId":374,"tagId":2055}}]}]},"slug":"shadowing","page":"1","answers":{"374":["\n&lt;p&gt;This happens because your local module named &lt;code&gt;requests.py&lt;/code&gt; shadows the installed &lt;code&gt;requests&lt;/code&gt; module you are trying to use.  The current directory is prepended to &lt;code&gt;sys.path&lt;/code&gt;, so the local name takes precedence over the installed name.&lt;/p&gt;\n\n&lt;p&gt;An extra debugging tip when this comes up is to look at the Traceback carefully, and realize that the name of your script in question is matching the module you are trying to import: &lt;/p&gt;\n\n&lt;p&gt;Notice the name you used in your script:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;File &lt;span class=&quot;hljs-string&quot;&gt;&quot;/Users/me/dev/rough/requests.py&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The module you are trying to import: &lt;code&gt;requests&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Rename your module to something else to avoid the name collision.&lt;/p&gt;\n\n&lt;p&gt;Python may generate a &lt;code&gt;requests.pyc&lt;/code&gt; file next to your &lt;code&gt;requests.py&lt;/code&gt; file (in the &lt;code&gt;__pycache__&lt;/code&gt; directory in Python 3).  Remove that as well after your rename, as the interpreter will still reference that file, re-producing the error. However, the &lt;code&gt;pyc&lt;/code&gt; file in &lt;code&gt;__pycache__&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; not affect your code if the &lt;code&gt;py&lt;/code&gt; file has been removed.&lt;/p&gt;\n\n&lt;p&gt;In the example, renaming the file to &lt;code&gt;my_requests.py&lt;/code&gt;, removing &lt;code&gt;requests.pyc&lt;/code&gt;, and running again successfully prints &lt;code&gt;&amp;lt;Response [200]&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;For the writer of the original question, and for those people searching on the AttributeError: module has no attribute string, then the common explanation as per the accepted answer, is that a user-created script has a name-clash with a library filename. Note, however, that the trouble might not be in the name of the script that generates the error (as it was in the above case), nor in any of the names of the library modules explicitly imported by that script. It might take a little detective work to figure out which file is causing the problem. &lt;/p&gt;\n\n&lt;p&gt;As an example to illustrate the problem, imagine that you are creating a script that uses the &quot;decimal&quot; library for accurate floating-point calculations with decimal numbers, and you name your script &quot;&lt;code&gt;mydecimal.py&lt;/code&gt;&quot; that contains the line &quot;&lt;code&gt;import decimal&lt;/code&gt;&quot;. There&apos;s no problem with any of that but you find that it raises this error:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;AttributeError: &lt;span class=&quot;hljs-string&quot;&gt;&apos;module&apos;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; has no attribute &lt;span class=&quot;hljs-string&quot;&gt;&apos;Number&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This would happen if you had &lt;em&gt;previously&lt;/em&gt; written a script called &quot;&lt;code&gt;numbers.py&lt;/code&gt;&quot; because the &quot;decimal&quot; library calls on the standard library &quot;numbers&quot; but finds your old script instead. Even if you had deleted that, it might not end the problem because python might have converted that into bytecode and stored it in a cache as &quot;&lt;code&gt;numbers.pyc&lt;/code&gt;&quot;, so you&apos;d have to hunt that down as well.&lt;/p&gt;\n    ","\n&lt;p&gt;Python is looking for the requests object within your &lt;code&gt;requests.py&lt;/code&gt; module.&lt;/p&gt;\n&lt;p&gt;Either &lt;strong&gt;RENAME&lt;/strong&gt; that file to something else or use&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; absolute_import \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;at the top of your &lt;code&gt;requests.py&lt;/code&gt; module.&lt;/p&gt;\n    ","\n&lt;p&gt;By &lt;code&gt;import requests&lt;/code&gt; you import the file requests.py, not the module.\nSimply rename your file.&lt;/p&gt;\n    "]},"randomTags":[{"name":"public","slug":"public"},{"name":"database","slug":"database"},{"name":"pygame","slug":"pygame"},{"name":"linux","slug":"linux"},{"name":"fgets","slug":"fgets"},{"name":"event-handling","slug":"event-handling"},{"name":"dynamic-arrays","slug":"dynamic-arrays"},{"name":"post","slug":"post"},{"name":"c++-standard-library","slug":"c++-standard-library"},{"name":"pecs","slug":"pecs"},{"name":"easy-install","slug":"easy-install"},{"name":"file","slug":"file"},{"name":"equals","slug":"equals"},{"name":"default-parameters","slug":"default-parameters"},{"name":"client-side","slug":"client-side"},{"name":"stack-overflow","slug":"stack-overflow"},{"name":"uitableview","slug":"uitableview"},{"name":"managed-bean","slug":"managed-bean"},{"name":"q","slug":"q"},{"name":"inheritance","slug":"inheritance"}]},"__N_SSG":true}