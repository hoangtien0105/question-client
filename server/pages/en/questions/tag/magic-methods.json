{"pageProps":{"data":{"count":1,"rows":[{"id":359,"title":"What is the difference between __str__ and __repr__?","slug":"what-is-the-difference-between-__str__-and-__repr__-1657387738760","postType":"QUESTION","createdAt":"2022-07-09T17:28:58.000Z","updatedAt":"2022-07-09T17:28:58.000Z","tags":[{"id":2003,"name":"magic-methods","slug":"magic-methods","createdAt":"2022-07-09T17:28:58.000Z","updatedAt":"2022-07-09T17:28:58.000Z","Questions_Tags":{"questionId":359,"tagId":2003}}]}]},"slug":"magic-methods","page":1,"answers":{"359":["\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/users/95810/alex-martelli&quot;&gt;Alex&lt;/a&gt; summarized well but, surprisingly, was too succinct.&lt;/p&gt;\n&lt;p&gt;First, let me reiterate the main points in &lt;a href=&quot;https://stackoverflow.com/a/1436756/3798217&quot;&gt;Alexs post&lt;/a&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The default implementation is useless (its hard to think of one which wouldnt be, but yeah)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;__repr__&lt;/code&gt; goal is to be unambiguous&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;__str__&lt;/code&gt; goal is to be readable&lt;/li&gt;\n&lt;li&gt;Containers &lt;code&gt;__str__&lt;/code&gt; uses contained objects &lt;code&gt;__repr__&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Default implementation is useless&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This is mostly a surprise because Pythons defaults tend to be fairly useful. However, in this case, having a default for &lt;code&gt;__repr__&lt;/code&gt; which would act like:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s(%r)&quot;&lt;/span&gt; % (self.__class__, self.__dict__)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;would have been too dangerous (for example, too easy to get into infinite recursion if objects reference each other). So Python cops out. Note that there is one default which is true: if &lt;code&gt;__repr__&lt;/code&gt; is defined, and &lt;code&gt;__str__&lt;/code&gt; is not, the object will behave as though &lt;code&gt;__str__=__repr__&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;This means, in simple terms: almost every object you implement should have a functional &lt;code&gt;__repr__&lt;/code&gt; thats usable for understanding the object. Implementing &lt;code&gt;__str__&lt;/code&gt; is optional: do that if you need a pretty print functionality (for example, used by a report generator).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The goal of &lt;code&gt;__repr__&lt;/code&gt; is to be unambiguous&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Let me come right out and say it  I do not believe in debuggers. I dont really know how to use any debugger, and have never used one seriously. Furthermore, I believe that the big fault in debuggers is their basic nature  most failures I debug happened a long long time ago, in a galaxy far far away. This means that I do believe, with religious fervor, in logging. Logging is the lifeblood of any decent fire-and-forget server system. Python makes it easy to log: with maybe some project specific wrappers, all you need is a&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;log(INFO, &lt;span class=&quot;hljs-string&quot;&gt;&quot;I am in the weird function and a is&quot;&lt;/span&gt;, a, &lt;span class=&quot;hljs-string&quot;&gt;&quot;and b is&quot;&lt;/span&gt;, b, &lt;span class=&quot;hljs-string&quot;&gt;&quot;but I got a null C  using default&quot;&lt;/span&gt;, default_c)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But you have to do the last step  make sure every object you implement has a useful repr, so code like that can just work. This is why the eval thing comes up: if you have enough information so &lt;code&gt;eval(repr(c))==c&lt;/code&gt;, that means you know everything there is to know about &lt;code&gt;c&lt;/code&gt;. If thats easy enough, at least in a fuzzy way, do it. If not, make sure you have enough information about &lt;code&gt;c&lt;/code&gt; anyway. I usually use an eval-like format: &lt;code&gt;&quot;MyClass(this=%r,that=%r)&quot; % (self.this,self.that)&lt;/code&gt;. It does not mean that you can actually construct MyClass, or that those are the right constructor arguments  but it is a useful form to express this is everything you need to know about this instance.&lt;/p&gt;\n&lt;p&gt;Note: I used &lt;code&gt;%r&lt;/code&gt; above, not &lt;code&gt;%s&lt;/code&gt;. You always want to use &lt;code&gt;repr()&lt;/code&gt; [or &lt;code&gt;%r&lt;/code&gt; formatting character, equivalently] inside &lt;code&gt;__repr__&lt;/code&gt; implementation, or youre defeating the goal of repr. You want to be able to differentiate &lt;code&gt;MyClass(3)&lt;/code&gt; and &lt;code&gt;MyClass(&quot;3&quot;)&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The goal of &lt;code&gt;__str__&lt;/code&gt; is to be readable&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Specifically, it is not intended to be unambiguous  notice that &lt;code&gt;str(3)==str(&quot;3&quot;)&lt;/code&gt;. Likewise, if you implement an IP abstraction, having the str of it look like 192.168.1.1 is just fine. When implementing a date/time abstraction, the str can be &quot;2010/4/12 15:35:22&quot;, etc. The goal is to represent it in a way that a user, not a programmer, would want to read it. Chop off useless digits, pretend to be some other class  as long is it supports readability, it is an improvement.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Containers &lt;code&gt;__str__&lt;/code&gt; uses contained objects &lt;code&gt;__repr__&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This seems surprising, doesnt it? It is a little, but how readable would it be if it used their &lt;code&gt;__str__&lt;/code&gt;?&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[moshe &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, hello\nworld, this &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; a &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, oh I don&lt;span class=&quot;hljs-string&quot;&gt;&apos;t know, containing just 4 elements]\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Not very. Specifically, the strings in a container would find it way too easy to disturb its string representation. In the face of ambiguity, remember, Python resists the temptation to guess. If you want the above behavior when youre printing a list, just&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;.join(l) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(you can probably also figure out what to do about dictionaries.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Implement &lt;code&gt;__repr__&lt;/code&gt; for any class you implement. This should be second nature. Implement &lt;code&gt;__str__&lt;/code&gt; if you think it would be useful to have a string version which errs on the side of readability.&lt;/p&gt;\n    ","\n&lt;p&gt;My rule of thumb:  &lt;code&gt;__repr__&lt;/code&gt; is for developers, &lt;code&gt;__str__&lt;/code&gt; is for customers.&lt;/p&gt;\n    ","\n&lt;p&gt;Unless you specifically act to ensure otherwise, most classes don&apos;t have helpful results for either:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Sic&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(Sic()))\n&amp;lt;__main__.Sic &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x8b7d0&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(Sic()))\n&amp;lt;__main__.Sic &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x8b7d0&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you see -- no difference, and no info beyond the class and object&apos;s &lt;code&gt;id&lt;/code&gt;.  If you only override one of the two...:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Sic&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;): \n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(Sic()))\nfoo\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(Sic()))\nfoo\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Sic&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(Sic()))\nfoo\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(Sic()))\n&amp;lt;__main__.Sic &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x2617f0&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;as you see, if you override &lt;code&gt;__repr__&lt;/code&gt;, that&apos;s ALSO used for &lt;code&gt;__str__&lt;/code&gt;, but not vice versa.&lt;/p&gt;\n&lt;p&gt;Other crucial tidbits to know: &lt;code&gt;__str__&lt;/code&gt; on a built-on container uses the &lt;code&gt;__repr__&lt;/code&gt;, NOT the &lt;code&gt;__str__&lt;/code&gt;, for the items it contains. And, despite the words on the subject found in typical docs, hardly anybody bothers making the &lt;code&gt;__repr__&lt;/code&gt; of objects be a string that &lt;code&gt;eval&lt;/code&gt; may use to build an equal object (it&apos;s just too hard, AND not knowing how the relevant module was actually imported makes it actually flat out impossible).&lt;/p&gt;\n&lt;p&gt;So, my advice: focus on making &lt;code&gt;__str__&lt;/code&gt; reasonably human-readable, and &lt;code&gt;__repr__&lt;/code&gt; as unambiguous as you possibly can, even if that interferes with the fuzzy unattainable goal of making &lt;code&gt;__repr__&lt;/code&gt;&apos;s returned value acceptable as input to &lt;code&gt;__eval__&lt;/code&gt;!&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;__repr__&lt;/code&gt;&lt;/strong&gt;: representation of python object usually eval will convert it back to that object&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;__str__&lt;/code&gt;&lt;/strong&gt;: is whatever you think is that object in text form&lt;/p&gt;\n\n&lt;p&gt;e.g.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;s=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;w&apos;o&quot;w&quot;&quot;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(s)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;w\\\\\\&apos;o&quot;w\\&apos;&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(s)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;w\\&apos;o&quot;w&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(s))==s\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;string&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    w&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&quot;w\n       ^\nSyntaxError: EOL while scanning single-quoted string\n&amp;gt;&amp;gt;&amp;gt; eval(repr(s))==s\nTrue\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;In short, the goal of &lt;code&gt;__repr__&lt;/code&gt; is to be unambiguous and &lt;code&gt;__str__&lt;/code&gt; is to be\n  readable.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Here is a good example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;today = datetime.datetime.now()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(today)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;2012-03-14 09:21:58.130922&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(today)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;datetime.datetime(2012, 3, 14, 9, 21, 58, 130922)&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Read this documentation for repr:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;repr(object)&lt;/code&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Return a string containing a printable representation of an object. This is the same value yielded by conversions (reverse\n  quotes). It is sometimes useful to be able to access this operation as\n  an ordinary function. For many types, this function makes an attempt\n  to return a string that would yield an object with the same value when\n  passed to &lt;code&gt;eval()&lt;/code&gt;, otherwise the representation is a string enclosed in\n  angle brackets that contains the name of the type of the object\n  together with additional information often including the name and\n  address of the object. A class can control what this function returns\n  for its instances by defining a &lt;code&gt;__repr__()&lt;/code&gt; method.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Here is the documentation for str:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;str(object=&apos;&apos;)&lt;/code&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Return a string containing a nicely printable\n  representation of an object. For strings, this returns the string\n  itself. The difference with &lt;code&gt;repr(object)&lt;/code&gt; is that &lt;code&gt;str(object)&lt;/code&gt; does not\n  always attempt to return a string that is acceptable to &lt;code&gt;eval()&lt;/code&gt;; its\n  goal is to return a printable string. If no argument is given, returns\n  the empty string, &lt;code&gt;&apos;&apos;&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;blockquote&gt;\n&lt;h1&gt;What is the difference between &lt;code&gt;__str__&lt;/code&gt; and &lt;code&gt;__repr__&lt;/code&gt; in Python?&lt;/h1&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;code&gt;__str__&lt;/code&gt; (read as &quot;dunder (double-underscore) string&quot;) and &lt;code&gt;__repr__&lt;/code&gt; (read as &quot;dunder-repper&quot; (for &quot;representation&quot;)) are both special methods that return strings based on the state of the object.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;__repr__&lt;/code&gt; provides backup behavior if &lt;code&gt;__str__&lt;/code&gt; is missing.&lt;/p&gt;\n&lt;p&gt;So one should first write a &lt;code&gt;__repr__&lt;/code&gt; that allows you to reinstantiate an equivalent object from the string it returns e.g. using &lt;code&gt;eval&lt;/code&gt; or by typing it in character-for-character in a Python shell.&lt;/p&gt;\n&lt;p&gt;At any time later, one can write a &lt;code&gt;__str__&lt;/code&gt; for a user-readable string representation of the instance, when one believes it to be necessary.&lt;/p&gt;\n&lt;h1&gt;&lt;code&gt;__str__&lt;/code&gt;&lt;/h1&gt;\n&lt;p&gt;If you print an object, or pass it to &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;str.format&lt;/code&gt;, or &lt;code&gt;str&lt;/code&gt;, then if a &lt;code&gt;__str__&lt;/code&gt; method is defined, that method will be called, otherwise, &lt;code&gt;__repr__&lt;/code&gt; will be used.&lt;/p&gt;\n&lt;h1&gt;&lt;code&gt;__repr__&lt;/code&gt;&lt;/h1&gt;\n&lt;p&gt;The &lt;code&gt;__repr__&lt;/code&gt; method is called by the builtin function &lt;code&gt;repr&lt;/code&gt; and is what is echoed on your python shell when it evaluates an expression that returns an object.&lt;/p&gt;\n&lt;p&gt;Since it provides a backup for &lt;code&gt;__str__&lt;/code&gt;, if you can only write one, start with &lt;code&gt;__repr__&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Here&apos;s the builtin help on &lt;code&gt;repr&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(...)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;) -&amp;gt; string\n    \n    Return the canonical string representation of the &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.\n    For most &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; types, &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;)) == &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That is, for most objects, if you type in what is printed by &lt;code&gt;repr&lt;/code&gt;, you should be able to create an equivalent object. &lt;em&gt;But this is not the default implementation.&lt;/em&gt;&lt;/p&gt;\n&lt;h1&gt;Default Implementation of &lt;code&gt;__repr__&lt;/code&gt;&lt;/h1&gt;\n&lt;p&gt;The default object &lt;code&gt;__repr__&lt;/code&gt; is (&lt;a href=&quot;https://github.com/python/cpython/blob/v3.7.3/Objects/object.c#L496&quot; rel=&quot;noreferrer&quot;&gt;C Python source&lt;/a&gt;) something like:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;{0}.{1} object at {2}&amp;gt;&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(\n      &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(self).__module__, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(self).__qualname__, &lt;span class=&quot;hljs-built_in&quot;&gt;hex&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(self)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That means by default you&apos;ll print the module the object is from, the class name, and the hexadecimal representation of its location in memory - for example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;__main__.Foo &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x7f80665abdd0&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This information isn&apos;t very useful, but there&apos;s no way to derive how one might accurately create a canonical representation of any given instance, and it&apos;s better than nothing, at least telling us how we might uniquely identify it in memory.&lt;/p&gt;\n&lt;h1&gt;How can &lt;code&gt;__repr__&lt;/code&gt; be useful?&lt;/h1&gt;\n&lt;p&gt;Let&apos;s look at how useful it can be, using the Python shell and &lt;code&gt;datetime&lt;/code&gt; objects. First we need to import the &lt;code&gt;datetime&lt;/code&gt; module:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If we call &lt;code&gt;datetime.now&lt;/code&gt; in the shell, we&apos;ll see everything we need to recreate an equivalent datetime object. This is created by the datetime &lt;code&gt;__repr__&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;datetime.datetime.now()\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;491180&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If we print a datetime object, we see a nice human readable (in fact, ISO) format. This is implemented by datetime&apos;s &lt;code&gt;__str__&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(datetime.datetime.now())\n&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;-01-&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:05:&lt;span class=&quot;hljs-number&quot;&gt;44.977951&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is a simple matter to recreate the object we lost because we didn&apos;t assign it to a variable by copying and pasting from the &lt;code&gt;__repr__&lt;/code&gt; output, and then printing it, and we get it in the same human readable output as the other object:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;the_past = datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;491180&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(the_past)\n&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;-01-&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:05:&lt;span class=&quot;hljs-number&quot;&gt;36.491180&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;#How do I implement them?&lt;/p&gt;\n&lt;p&gt;As you&apos;re developing, you&apos;ll want to be able to reproduce objects in the same state, if possible. This, for example, is how the datetime object defines &lt;code&gt;__repr__&lt;/code&gt; (&lt;a href=&quot;https://github.com/python/cpython/blob/v3.7.3/Lib/datetime.py#L1876&quot; rel=&quot;noreferrer&quot;&gt;Python source&lt;/a&gt;). It is fairly complex, because of all of the attributes needed to reproduce such an object:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Convert to formal string, for repr().&quot;&quot;&quot;&lt;/span&gt;\n    L = [self._year, self._month, self._day,  &lt;span class=&quot;hljs-comment&quot;&gt;# These are never zero&lt;/span&gt;\n         self._hour, self._minute, self._second, self._microsecond]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; L[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; L[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; L[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; L[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n    s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s.%s(%s)&quot;&lt;/span&gt; % (self.__class__.__module__,\n                       self.__class__.__qualname__,\n                       &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;.join(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, L)))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self._tzinfo &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; s[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;\n        s = s[:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, tzinfo=%r&quot;&lt;/span&gt; % self._tzinfo + &lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self._fold:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; s[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;\n        s = s[:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, fold=1)&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want your object to have a more human readable representation, you can implement &lt;code&gt;__str__&lt;/code&gt; next. Here&apos;s how the datetime object (&lt;a href=&quot;https://github.com/python/cpython/blob/v3.7.3/Lib/datetime.py#L1895&quot; rel=&quot;noreferrer&quot;&gt;Python source&lt;/a&gt;) implements &lt;code&gt;__str__&lt;/code&gt;, which it easily does because it already has a function to display it in ISO format:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Convert to string, for str().&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.isoformat(sep=&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Set &lt;code&gt;__repr__ = __str__&lt;/code&gt;?&lt;/h2&gt;\n&lt;p&gt;This is a critique of another answer here that suggests setting &lt;code&gt;__repr__ = __str__&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Setting &lt;code&gt;__repr__ = __str__&lt;/code&gt; is silly - &lt;code&gt;__repr__&lt;/code&gt; is a fallback for &lt;code&gt;__str__&lt;/code&gt; and a &lt;code&gt;__repr__&lt;/code&gt;, written for developers usage in debugging, should be written before you write a &lt;code&gt;__str__&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;You need a &lt;code&gt;__str__&lt;/code&gt; only when you need a textual representation of the object.&lt;/p&gt;\n&lt;h1&gt;Conclusion&lt;/h1&gt;\n&lt;p&gt;Define &lt;code&gt;__repr__&lt;/code&gt; for objects you write so you and other developers have a reproducible example when using it as you develop. Define &lt;code&gt;__str__&lt;/code&gt; when you need a human readable string representation of it.&lt;/p&gt;\n    ","\n&lt;p&gt;On page 358 of the book &lt;strong&gt;&lt;em&gt;Python scripting for computational science&lt;/em&gt;&lt;/strong&gt; by Hans Petter Langtangen, it clearly states that &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The &lt;code&gt;__repr__&lt;/code&gt; aims at a complete string representation of the object;&lt;/li&gt;\n&lt;li&gt;The &lt;code&gt;__str__&lt;/code&gt; is to return a nice string for printing.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So, I prefer to understand them as&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;repr = reproduce&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;str = string (representation)&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;from the user&apos;s point of view\nalthough this is a misunderstanding I made when learning python.&lt;/p&gt;\n\n&lt;p&gt;A small but good example is also given on the same page as follows:&lt;/p&gt;\n\n&lt;h2&gt;Example&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;s&apos;&quot;&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;))\nTraceback (most recent call last):\n\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;ipython-input-40-abd46c0c43e7&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;))\n\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;string&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\n\nNameError: name &lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; defined\n\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;))\nOut[&lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Apart from all the answers given, I would like to add few points :-&lt;/p&gt;\n\n&lt;p&gt;1) &lt;code&gt;__repr__()&lt;/code&gt; is invoked when you simply write object&apos;s name on interactive python console and press enter.&lt;/p&gt;\n\n&lt;p&gt;2) &lt;code&gt;__str__()&lt;/code&gt; is invoked when you use object with print statement.&lt;/p&gt;\n\n&lt;p&gt;3) In case, if &lt;code&gt;__str__&lt;/code&gt; is missing, then print and any function using &lt;code&gt;str()&lt;/code&gt; invokes &lt;code&gt;__repr__()&lt;/code&gt; of object.&lt;/p&gt;\n\n&lt;p&gt;4) &lt;code&gt;__str__()&lt;/code&gt; of containers, when invoked will execute &lt;code&gt;__repr__()&lt;/code&gt; method of its contained elements.&lt;/p&gt;\n\n&lt;p&gt;5) &lt;code&gt;str()&lt;/code&gt; called within &lt;code&gt;__str__()&lt;/code&gt; could potentially recurse without a base case, and error on maximum recursion depth.&lt;/p&gt;\n\n&lt;p&gt;6) &lt;code&gt;__repr__()&lt;/code&gt; can call &lt;code&gt;repr()&lt;/code&gt; which will attempt to avoid infinite recursion automatically, replacing an already represented object with &lt;code&gt;...&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;(2020 entry)&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; What&apos;s the difference between &lt;code&gt;__str__()&lt;/code&gt; and &lt;code&gt;__repr__()&lt;/code&gt;?&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/cpqeK.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/cpqeK.png&quot; alt=&quot;Differences between str()/repr() and __str__()/__repr__()&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;LONG&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This question has been around a long time, and there are a variety of answers of which most are correct (not to mention from several Python community legends[!]). However when it comes down to the nitty-gritty, this question is analogous to asking the difference between the &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt; built-in functions. I&apos;m going to describe the differences in my own words (which means I may be &quot;borrowing&quot; liberally from &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0132269937&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Core Python Programming&lt;/em&gt;&lt;/a&gt; so pls forgive me).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Both&lt;/strong&gt; &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt; have the same basic job: their goal is to return a string representation of a Python object. What &lt;em&gt;kind&lt;/em&gt; of string representation is what differentiates them.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;str()&lt;/code&gt; &amp;amp; &lt;code&gt;__str__()&lt;/code&gt; return a &lt;em&gt;printable&lt;/em&gt; string representation of\nan object... something human-readable/for human consumption&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;repr()&lt;/code&gt; &amp;amp; &lt;code&gt;__repr__()&lt;/code&gt; return a string representation of an object that is a &lt;em&gt;valid Python expression&lt;/em&gt;, an object you can pass to &lt;code&gt;eval()&lt;/code&gt; or type into the Python shell without getting an error.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;For example, let&apos;s assign a string to &lt;code&gt;x&lt;/code&gt; and an &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;, and simply showing human-readable string versions of each:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x, y = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(x), &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(y)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Can we take &lt;strong&gt;what is inside the quotes&lt;/strong&gt; in both cases and enter them verbatim into the Python interpreter? Let&apos;s give it a try:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nNameError: name &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; defined\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Clearly you can for an &lt;code&gt;int&lt;/code&gt; but not necessarily for a &lt;code&gt;str&lt;/code&gt;. Similarly, while I can pass &lt;code&gt;&apos;123&apos;&lt;/code&gt; to &lt;code&gt;eval()&lt;/code&gt;, that doesn&apos;t work for &lt;code&gt;&apos;foo&apos;&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;)\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;string&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nNameError: name &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; defined\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So this tells you the Python shell just &lt;code&gt;eval()&lt;/code&gt;s what you give it. Got it? Now, let&apos;s &lt;code&gt;repr()&lt;/code&gt; both expressions and see what we get. More specifically, take its output and dump &lt;em&gt;those&lt;/em&gt; out in the interpreter (there&apos;s a point to this which we&apos;ll address afterwards):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(x), &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(y)\n(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;foo&apos;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Wow, they &lt;em&gt;both&lt;/em&gt; work? That&apos;s because &lt;code&gt;&apos;foo&apos;&lt;/code&gt;, while a printable string representation of that string, it&apos;s &lt;strong&gt;not&lt;/strong&gt; evaluatable, but &lt;code&gt;&quot;&apos;foo&apos;&quot;&lt;/code&gt; is. &lt;code&gt;123&lt;/code&gt; is a valid Python &lt;code&gt;int&lt;/code&gt; called by either &lt;code&gt;str()&lt;/code&gt; or &lt;code&gt;repr()&lt;/code&gt;. What happens when we call &lt;code&gt;eval()&lt;/code&gt; with these?&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;foo&apos;&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It works because &lt;code&gt;123&lt;/code&gt; and &lt;code&gt;&apos;foo&apos;&lt;/code&gt; are valid Python objects. Another key takeaway is that while sometimes both return the same thing (the same string representation), that&apos;s not always the case. (And yes, yes, I can go create a variable &lt;code&gt;foo&lt;/code&gt; where the &lt;code&gt;eval()&lt;/code&gt; works, but that&apos;s not the point.)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;More factoids about both pairs&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Sometimes, &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt; are called &lt;em&gt;implicitly&lt;/em&gt;, meaning they&apos;re called on behalf of users: when users execute &lt;strong&gt;&lt;code&gt;print&lt;/code&gt;&lt;/strong&gt; (Py1/Py2) or call &lt;code&gt;print()&lt;/code&gt; (Py3+), even if users don&apos;t call &lt;code&gt;str()&lt;/code&gt; explicitly, such a call is made on their behalf before the object is displayed.&lt;/li&gt;\n&lt;li&gt;In the Python shell (interactive interpreter), if you enter a variable at the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; prompt and press RETURN, the interpreter displays the results of &lt;code&gt;repr()&lt;/code&gt; implicitly called on that object.&lt;/li&gt;\n&lt;li&gt;To connect &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt; to &lt;code&gt;__str__()&lt;/code&gt; and &lt;code&gt;__repr__()&lt;/code&gt;, realize that calls to the built-in functions, i.e., &lt;code&gt;str(x)&lt;/code&gt; or &lt;code&gt;repr(y)&lt;/code&gt; result in calling their object&apos;s corresponding special methods: &lt;code&gt;x.__str__()&lt;/code&gt; or &lt;code&gt;y.__repr()__&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;By implementing &lt;code&gt;__str__()&lt;/code&gt; and &lt;code&gt;__repr__()&lt;/code&gt; for &lt;em&gt;your&lt;/em&gt; Python classes, you overload the built-in functions (&lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt;), allowing instances of your classes to be passed in to &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt;. When such calls are made, they turn around and call the class&apos; &lt;code&gt;__str__()&lt;/code&gt; and &lt;code&gt;__repr__()&lt;/code&gt; (per #3).&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;To put it simply:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__str__&lt;/code&gt; is used in to show a string representation of your object &lt;strong&gt;to be read easily&lt;/strong&gt; by others.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__repr__&lt;/code&gt; is used to show a string representation of &lt;strong&gt;the&lt;/strong&gt; object.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s say I want to create a &lt;code&gt;Fraction&lt;/code&gt; class where the string representation of a fraction is &apos;(1/2)&apos; and the object (Fraction class) is to be represented as &apos;Fraction (1,2)&apos;&lt;/p&gt;\n\n&lt;p&gt;So we can create a simple Fraction class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Fraction&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, num, den&lt;/span&gt;):\n        self.__num = num\n        self.__den = den\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(self.__num) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(self.__den) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Fraction (&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(self.__num) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(self.__den) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;\n\n\n\nf = Fraction(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;I want to represent the Fraction STRING as &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(f)) &lt;span class=&quot;hljs-comment&quot;&gt;# (1/2)&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;I want to represent the Fraction OBJECT as &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(f)) &lt;span class=&quot;hljs-comment&quot;&gt;# Fraction (1,2)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;From &lt;a href=&quot;https://web.archive.org/web/20071127054034/http://pyref.infogami.com/__str__&quot; rel=&quot;nofollow noreferrer&quot;&gt;an (An Unofficial) Python Reference Wiki (archive copy)&lt;/a&gt; by effbot:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__str__&lt;/code&gt; &quot;&lt;em&gt;computes the &quot;informal&quot; string representation of an object. This differs from &lt;code&gt;__repr__&lt;/code&gt; in that it does not have to be a valid Python expression: a more convenient or concise representation may be used instead.&lt;/em&gt;&quot;&lt;/p&gt;\n    ","\n&lt;p&gt;In all honesty, &lt;code&gt;eval(repr(obj))&lt;/code&gt; is never used. If you find yourself using it, you should stop, because &lt;code&gt;eval&lt;/code&gt; is dangerous, and strings are a very inefficient way to serialize your objects (use &lt;code&gt;pickle&lt;/code&gt; instead).&lt;/p&gt;\n&lt;p&gt;Therefore, I would recommend setting &lt;code&gt;__repr__ = __str__&lt;/code&gt;. The reason is that &lt;code&gt;str(list)&lt;/code&gt; calls &lt;code&gt;repr&lt;/code&gt; on the elements (I consider this to be one of the biggest design flaws of Python that was not addressed by Python 3). An actual &lt;code&gt;repr&lt;/code&gt; will probably not be very helpful as the output of &lt;code&gt;print([your, objects])&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;To qualify this, in my experience, the most useful use case of the &lt;code&gt;repr&lt;/code&gt; function is to put a string inside another string (using string formatting). This way, you don&apos;t have to worry about escaping quotes or anything. But note that there is no &lt;code&gt;eval&lt;/code&gt; happening here.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;str&lt;/code&gt; - Creates a new string object from the given object.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;repr&lt;/code&gt; - Returns the canonical string representation of the object.&lt;/p&gt;\n\n&lt;p&gt;The differences:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;str():&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;makes object readable&lt;/li&gt;\n&lt;li&gt;generates output for end-user&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;repr():&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;needs code that reproduces object&lt;/li&gt;\n&lt;li&gt;generates output for developer&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;One aspect that is missing in other answers. It&apos;s true that in general the pattern is:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Goal of &lt;code&gt;__str__&lt;/code&gt;: human-readable&lt;/li&gt;\n&lt;li&gt;Goal of &lt;code&gt;__repr__&lt;/code&gt;: unambiguous, possibly machine-readable via &lt;code&gt;eval&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Unfortunately, this differentiation is flawed, because the Python REPL and also IPython use &lt;code&gt;__repr__&lt;/code&gt; for printing objects in a REPL console (see related questions for &lt;a href=&quot;https://stackoverflow.com/questions/28304092/when-i-am-in-the-python-or-ipython-console-what-is-called-when-i-am-returned-an&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/41453624/tell-ipython-to-use-an-objects-str-instead-of-repr-for-output&quot;&gt;IPython&lt;/a&gt;). Thus, projects which are targeted for interactive console work (e.g., Numpy or Pandas) have started to ignore above rules and provide a human-readable &lt;code&gt;__repr__&lt;/code&gt; implementation instead.&lt;/p&gt;\n    ","\n&lt;p&gt;From the book &lt;em&gt;Fluent Python&lt;/em&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A basic requirement for a Python object is to provide usable \n       string   representations of itself, one used for debugging and\n       logging, another for presentation to end users. That is why the&lt;br&gt;\n       special methods &lt;code&gt;__repr__&lt;/code&gt; and &lt;code&gt;__str__&lt;/code&gt; exist in the data model.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;You can get some insight from this code:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;repr&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str&quot;&lt;/span&gt;)\n\nfoo = Foo()\nfoo &lt;span class=&quot;hljs-comment&quot;&gt;#repr&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(foo) &lt;span class=&quot;hljs-comment&quot;&gt;#str&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;__str__&lt;/code&gt; can be invoked on an object by calling &lt;code&gt;str(obj)&lt;/code&gt; and should return a human readable string. &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__repr__&lt;/code&gt; can be invoked on an object by calling &lt;code&gt;repr(obj)&lt;/code&gt; and should return internal object (object fields/attributes)&lt;/p&gt;\n\n&lt;p&gt;This example may help:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C1&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C2&lt;/span&gt;:        \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;&lt;span class=&quot;hljs-subst&quot;&gt;{self.__class__.__name__}&lt;/span&gt; class str &quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C3&lt;/span&gt;:        \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):        \n         &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;&lt;span class=&quot;hljs-subst&quot;&gt;{self.__class__.__name__}&lt;/span&gt; class repr&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C4&lt;/span&gt;:        \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;&lt;span class=&quot;hljs-subst&quot;&gt;{self.__class__.__name__}&lt;/span&gt; class str &quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):        \n         &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;&lt;span class=&quot;hljs-subst&quot;&gt;{self.__class__.__name__}&lt;/span&gt; class repr&quot;&lt;/span&gt;)\n\n\nci1 = C1()    \nci2 = C2()  \nci3 = C3()  \nci4 = C4()\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ci1)       &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;__main__.C1 object at 0x0000024C44A80C18&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(ci1))  &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;__main__.C1 object at 0x0000024C44A80C18&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(ci1)) &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;__main__.C1 object at 0x0000024C44A80C18&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ci2)       &lt;span class=&quot;hljs-comment&quot;&gt;#C2 class str&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(ci2))  &lt;span class=&quot;hljs-comment&quot;&gt;#C2 class str&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(ci2)) &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;__main__.C2 object at 0x0000024C44AE12E8&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ci3)       &lt;span class=&quot;hljs-comment&quot;&gt;#C3 class repr&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(ci3))  &lt;span class=&quot;hljs-comment&quot;&gt;#C3 class repr&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(ci3)) &lt;span class=&quot;hljs-comment&quot;&gt;#C3 class repr&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ci4)       &lt;span class=&quot;hljs-comment&quot;&gt;#C4 class str &lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(ci4))  &lt;span class=&quot;hljs-comment&quot;&gt;#C4 class str &lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(ci4)) &lt;span class=&quot;hljs-comment&quot;&gt;#C4 class repr&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Excellent answers already cover the difference between &lt;code&gt;__str__&lt;/code&gt; and &lt;code&gt;__repr__&lt;/code&gt;, which for me boils down to the former being readable even by an end user, and the latter being as useful as possible to developers. Given that, I find that the default implementation of &lt;code&gt;__repr__&lt;/code&gt; often fails to achieve this goal because it &lt;em&gt;omits&lt;/em&gt; information useful to developers.&lt;/p&gt;\n\n&lt;p&gt;For this reason, if I have a simple enough &lt;code&gt;__str__&lt;/code&gt;, I generally just try to get the best of both worlds with something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;{0} ({1})&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__repr__(self), &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(self))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(decimal.Decimal(&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;) / decimal.Decimal(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.05&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-number&quot;&gt;21.90476190476190476190476190&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;decimal.Decimal(&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;) / decimal.Decimal(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.05&quot;&lt;/span&gt;)\nDecimal(&lt;span class=&quot;hljs-string&quot;&gt;&apos;21.90476190476190476190476190&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When &lt;code&gt;print()&lt;/code&gt; is called on the result of &lt;code&gt;decimal.Decimal(23) / decimal.Decimal(&quot;1.05&quot;)&lt;/code&gt; the raw number is printed; this output is in &lt;strong&gt;string form&lt;/strong&gt; which can be achieved with &lt;code&gt;__str__()&lt;/code&gt;. If we simply enter the expression we get a &lt;code&gt;decimal.Decimal&lt;/code&gt; output  this output is in &lt;strong&gt;representational form&lt;/strong&gt; which can be achieved with &lt;code&gt;__repr__()&lt;/code&gt;. All Python objects have two output forms. String form is designed to be human-readable. The representational form is designed to produce output that if fed to a Python interpreter would (when possible) reproduce the represented object.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;One important thing to keep in mind is that container&apos;s &lt;code&gt;__str__&lt;/code&gt; uses contained objects&apos; &lt;code&gt;__repr__&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; decimal &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Decimal\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (Decimal(&lt;span class=&quot;hljs-string&quot;&gt;&apos;52&apos;&lt;/span&gt;), datetime.now())\n(Decimal(&lt;span class=&quot;hljs-string&quot;&gt;&apos;52&apos;&lt;/span&gt;), datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;51&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;185000&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;((Decimal(&lt;span class=&quot;hljs-string&quot;&gt;&apos;52&apos;&lt;/span&gt;), datetime.now()))\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;(Decimal(&apos;52&apos;), datetime.datetime(2015, 11, 16, 10, 52, 22, 176000))&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Python favors unambiguity over readability&lt;/em&gt;, the &lt;code&gt;__str__&lt;/code&gt; call of a &lt;code&gt;tuple&lt;/code&gt; calls the contained objects&apos; &lt;code&gt;__repr__&lt;/code&gt;, the &lt;em&gt;&quot;formal&quot;&lt;/em&gt; representation of an object. Although the formal representation is harder to read than an informal one, it is unambiguous and more robust against bugs.&lt;/p&gt;\n    ","\n&lt;p&gt;In a nutshell:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Demo&lt;/span&gt;:\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;repr&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;\n\ndemo = Demo()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(demo) &lt;span class=&quot;hljs-comment&quot;&gt;# use __str__, output &apos;str&apos; to stdout&lt;/span&gt;\n\ns = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(demo) &lt;span class=&quot;hljs-comment&quot;&gt;# __str__ is used, return &apos;str&apos;&lt;/span&gt;\nr = &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(demo) &lt;span class=&quot;hljs-comment&quot;&gt;# __repr__ is used, return &apos;repr&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; logging\nlogger = logging.getLogger(logging.INFO)\nlogger.info(demo) &lt;span class=&quot;hljs-comment&quot;&gt;# use __str__, output &apos;str&apos; to stdout&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pprint &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pprint, pformat\npprint(demo) &lt;span class=&quot;hljs-comment&quot;&gt;# use __repr__, output &apos;repr&apos; to stdout&lt;/span&gt;\nresult = pformat(demo) &lt;span class=&quot;hljs-comment&quot;&gt;# use __repr__, result is string which value is &apos;str&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Understand &lt;code&gt;__str__&lt;/code&gt; and &lt;code&gt;__repr__&lt;/code&gt; intuitively and permanently distinguish them at all.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__str__&lt;/code&gt; return the string disguised body of a given object for readable of eyes&lt;br&gt;\n&lt;code&gt;__repr__&lt;/code&gt; return the real flesh body of a given object (return itself) for unambiguity to identify.&lt;/p&gt;\n\n&lt;p&gt;See it in an example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(datetime.datetime.now())\nOut[&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;2017-12-07 15:41:14.002752&apos;&lt;/span&gt;\nDisguised &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; string form\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As to &lt;code&gt;__repr__&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;]: datetime.datetime.now()\nOut[&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;]: datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;297769&lt;/span&gt;)\nPresence &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; real body which allows to be manipulated directly.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can do arithmetic operation on &lt;code&gt;__repr__&lt;/code&gt; results conveniently.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;]: datetime.datetime.now()\nOut[&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;]: datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;741521&lt;/span&gt;)\nIn [&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;]: datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;741521&lt;/span&gt;) - datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n    ...: 017, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;297769&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;]: datetime.timedelta(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;443752&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;if apply the operation on &lt;code&gt;__str__&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;2017-12-07 15:43:14.002752&apos;&lt;/span&gt; - &lt;span class=&quot;hljs-string&quot;&gt;&apos;2017-12-07 15:41:14.002752&apos;&lt;/span&gt;\nTypeError: unsupported operand &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(s) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; -: &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Returns nothing but error.&lt;/p&gt;\n\n&lt;p&gt;Another example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;string_body&apos;&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;string_body&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# in string form&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;real_body&apos;&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;real_body&apos;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;#its real body hide inside&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hope this help you build concrete grounds to explore more answers.&lt;/p&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;__str__&lt;/code&gt; must return string object whereas &lt;code&gt;__repr__&lt;/code&gt; can return any python expression.&lt;/li&gt;\n&lt;li&gt;If &lt;code&gt;__str__&lt;/code&gt; implementation is missing then &lt;code&gt;__repr__&lt;/code&gt; function is used as fallback. There is no fallback if &lt;code&gt;__repr__&lt;/code&gt; function implementation is missing.&lt;/li&gt;\n&lt;li&gt;If &lt;code&gt;__repr__&lt;/code&gt; function is returning String representation of the object, we can skip implementation of &lt;code&gt;__str__&lt;/code&gt; function.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;https://www.journaldev.com/22460/python-str-repr-functions&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.journaldev.com/22460/python-str-repr-functions&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;__repr__&lt;/code&gt; is used everywhere, except by &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; methods (when a &lt;code&gt;__str__&lt;/code&gt;is defined !)&lt;/p&gt;\n    ","\n&lt;p&gt;Every object inherits &lt;code&gt;__repr__&lt;/code&gt;  from the base class that all objects created.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;:\n     &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\np=Person()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;if you call &lt;code&gt;repr(p)&lt;/code&gt; you will get this as default:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &amp;lt;__main__.Person &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x7fb2604f03a0&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But if you call &lt;code&gt;str(p)&lt;/code&gt; you will get the same output. it is because when &lt;code&gt;__str__&lt;/code&gt; does not exist, Python calls &lt;code&gt;__repr__&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Let&apos;s implement our own &lt;code&gt;__str__&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self,name,age&lt;/span&gt;):\n        self.name=name\n        self.age=age\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;__repr__ called&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;f&quot;Person(name=&apos;&lt;span class=&quot;hljs-subst&quot;&gt;{self.name}&lt;/span&gt;&apos;,age=&lt;span class=&quot;hljs-subst&quot;&gt;{self.age}&lt;/span&gt;)&quot;&lt;/span&gt;\n\np=Person(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ali&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;print(p)&lt;/code&gt; and &lt;code&gt;str(p)&lt;/code&gt;will return&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; __repr__ called\n     Person(name=&lt;span class=&quot;hljs-string&quot;&gt;&apos;ali&apos;&lt;/span&gt;,age=&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;let&apos;s add &lt;code&gt;__str__()&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name, age&lt;/span&gt;):\n        self.name = name\n        self.age = age\n        \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;__repr__ called&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;f&quot;Person(name=&apos;&lt;span class=&quot;hljs-subst&quot;&gt;{self.name}&lt;/span&gt;, age=self.age&apos;)&quot;&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;__str__ called&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.name\n\np=Person(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ali&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;if we call &lt;code&gt;print(p)&lt;/code&gt; and str(p), it will call &lt;code&gt;__str__()&lt;/code&gt; so it will return&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;__str__ called\nali\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;repr(p)&lt;/code&gt; will return&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;repr&lt;/strong&gt; called\n&quot;Person(name=&apos;ali, age=self.age&apos;)&quot;&lt;/p&gt;\n&lt;p&gt;Let&apos;s omit &lt;code&gt;__repr__&lt;/code&gt; and just implement &lt;code&gt;__str__&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;:\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name, age&lt;/span&gt;):\n    self.name = name\n    self.age = age\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;__str__ called&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.name\n\np=Person(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ali&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;print(p)&lt;/code&gt; will look for the &lt;code&gt;__str__&lt;/code&gt; and will return:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;__str__ called\nali\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;NOTE= if we had &lt;code&gt;__repr__&lt;/code&gt; and &lt;code&gt;__str__&lt;/code&gt; defined, &lt;code&gt;f&apos;name is {p}&apos;&lt;/code&gt; would call &lt;code&gt;__str__&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;Programmers with prior experience in languages with a &lt;code&gt;toString&lt;/code&gt; method tend to implement &lt;code&gt;__str__&lt;/code&gt; and not &lt;code&gt;__repr__&lt;/code&gt;.\nIf you only implement one of these special methods in Python, choose &lt;code&gt;__repr__&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;From &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/B09WZJMMJP&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fluent Python&lt;/a&gt; book, by Ramalho, Luciano.&lt;/p&gt;\n    ","\n&lt;p&gt;Basically &lt;code&gt;__str__&lt;/code&gt; or &lt;strong&gt;str()&lt;/strong&gt; is used for creating output that is human-readable are must be for end-users.\nOn the other hand, &lt;strong&gt;repr()&lt;/strong&gt; or &lt;code&gt;__repr__&lt;/code&gt; mainly returns canonical string representation of objects which serve the purpose of debugging and development helps the programmers.&lt;/p&gt;\n    "]},"randomTags":[{"name":"storage","slug":"storage"},{"name":"http-status-code-404","slug":"http-status-code-404"},{"name":"currency","slug":"currency"},{"name":"max","slug":"max"},{"name":"user-interface","slug":"user-interface"},{"name":"password-hash","slug":"password-hash"},{"name":"android-intent","slug":"android-intent"},{"name":"android-input-method","slug":"android-input-method"},{"name":"click","slug":"click"},{"name":"margin","slug":"margin"},{"name":"concatenation","slug":"concatenation"},{"name":"android-permissions","slug":"android-permissions"},{"name":"language-features","slug":"language-features"},{"name":"intersection","slug":"intersection"},{"name":"viewmodel","slug":"viewmodel"},{"name":"using-directives","slug":"using-directives"},{"name":"android-sqlite","slug":"android-sqlite"},{"name":"return-value","slug":"return-value"},{"name":"methods","slug":"methods"},{"name":"com-interop","slug":"com-interop"}]},"__N_SSG":true}