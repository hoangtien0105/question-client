{"pageProps":{"data":{"count":1,"rows":[{"id":214,"title":"What is this weird colon-member (\" : \") syntax in the constructor?","slug":"what-is-this-weird-colon-member-(\"-:-\")-syntax-in-the-constructor-1657387264047","postType":"QUESTION","createdAt":"2022-07-09T17:21:04.000Z","updatedAt":"2022-07-09T17:21:04.000Z","tags":[{"id":1487,"name":"constructor","slug":"constructor","createdAt":"2022-07-09T17:21:04.000Z","updatedAt":"2022-07-09T17:21:04.000Z","Questions_Tags":{"questionId":214,"tagId":1487}}]}]},"slug":"constructor","page":"1","answers":{"214":["\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; num): &lt;span class=&quot;hljs-built_in&quot;&gt;bar&lt;/span&gt;(num)    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This construct is called a &lt;strong&gt;Member Initializer List&lt;/strong&gt; in C++.&lt;/p&gt;\n&lt;p&gt;Simply said, it &lt;strong&gt;initializes&lt;/strong&gt; your member &lt;code&gt;bar&lt;/code&gt; to a value &lt;code&gt;num&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;What is the difference between Initializing and Assignment inside a constructor?&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Member Initialization:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; num): &lt;span class=&quot;hljs-built_in&quot;&gt;bar&lt;/span&gt;(num) {};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Member Assignment:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; num)\n{\n   bar = num;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There is a significant difference between Initializing a member using Member initializer list and assigning it an value inside the constructor body.&lt;/p&gt;\n&lt;p&gt;When you &lt;em&gt;&lt;strong&gt;initialize&lt;/strong&gt;&lt;/em&gt; fields via Member initializer list the constructors will be called once and the object will be constructed and initialized in one operation.&lt;/p&gt;\n&lt;p&gt;If you use &lt;em&gt;&lt;strong&gt;assignment&lt;/strong&gt;&lt;/em&gt; then the fields will be first initialized with default constructors and then reassigned (via assignment operator) with actual values.&lt;/p&gt;\n&lt;p&gt;As you see there is an additional overhead of creation &amp;amp; assignment in the latter, which might be considerable for user defined classes.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Cost of Member Initialization = Object Construction \nCost of Member Assignment = Object Construction + Assignment\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The latter is actually equivalent to:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; num) : &lt;span class=&quot;hljs-built_in&quot;&gt;bar&lt;/span&gt;() {bar = num;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;While the former is equivalent to just:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; num): &lt;span class=&quot;hljs-built_in&quot;&gt;bar&lt;/span&gt;(num){}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For an inbuilt (your code example) or POD class members there is no practical overhead.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;When do you HAVE TO use Member Initializer list?&lt;/h2&gt;\n&lt;p&gt;You will &lt;strong&gt;have(rather forced) to&lt;/strong&gt; use a Member Initializer list if:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Your class has a reference member&lt;/li&gt;\n&lt;li&gt;Your class has a non static const member or&lt;/li&gt;\n&lt;li&gt;Your class member doesn&apos;t have a default constructor or&lt;/li&gt;\n&lt;li&gt;For initialization of base class members or&lt;/li&gt;\n&lt;li&gt;When constructors parameter name is same as data member(this is not really a MUST)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;A code example:&lt;/h2&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Reference member, has to be Initialized in Member Initializer List&lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &amp;amp;i;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Non static const member, must be Initialized in Member Initializer List&lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; k;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Constructors parameter name b is same as class data member&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Other way is to use this-&amp;gt;b to refer to data member&lt;/span&gt;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;MyClass&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c) : &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;(a), &lt;span class=&quot;hljs-built_in&quot;&gt;b&lt;/span&gt;(b), &lt;span class=&quot;hljs-built_in&quot;&gt;k&lt;/span&gt;(c) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Without Member Initializer&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this-&amp;gt;b = b;&lt;/span&gt;\n  }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass2&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; MyClass {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; p;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; q;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;MyClass2&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; z, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; l, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; m) : &lt;span class=&quot;hljs-built_in&quot;&gt;MyClass&lt;/span&gt;(x, y, z), &lt;span class=&quot;hljs-built_in&quot;&gt;p&lt;/span&gt;(l), &lt;span class=&quot;hljs-built_in&quot;&gt;q&lt;/span&gt;(m) {}\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; z = &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;;\n  &lt;span class=&quot;hljs-function&quot;&gt;MyClass &lt;span class=&quot;hljs-title&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(x, y, z)&lt;/span&gt;&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; l = &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; m = &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;;\n  &lt;span class=&quot;hljs-function&quot;&gt;MyClass2 &lt;span class=&quot;hljs-title&quot;&gt;obj2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(x, y, z, l, m)&lt;/span&gt;&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;MyClass2&lt;/code&gt; doesn&apos;t have a default constructor so it has to be initialized through member initializer list.&lt;/li&gt;\n&lt;li&gt;Base class &lt;code&gt;MyClass&lt;/code&gt; does not have a default constructor, So to initialize its member one will need to use Member Initializer List.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;Important points to Note while using Member Initializer Lists:&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Class Member variables are always initialized in the order in which they are declared in the class.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;They are &lt;strong&gt;not&lt;/strong&gt; initialized in the order in which they are specified in the Member Initializer List.&lt;br&gt;\nIn short, Member initialization list does not determine the order of initialization.&lt;/p&gt;\n&lt;p&gt;Given the above it is always a good practice to maintain the same order of members for Member initialization as the order in which they are declared in the class definition. This is because compilers do not warn if the two orders are different but a relatively new user might confuse member Initializer list as the order of initialization and write some code dependent on that.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s a &lt;em&gt;member initialization list&lt;/em&gt;.  You should find information about it in any &lt;a href=&quot;https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot;&gt;good C++ book&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://isocpp.org/wiki/faq/ctors#init-lists&quot; rel=&quot;noreferrer&quot;&gt;You should, in most cases, initialize all member objects in the member initialization list&lt;/a&gt; (however, do note the exceptions listed at the end of the FAQ entry).  &lt;/p&gt;\n\n&lt;p&gt;The takeaway point from the FAQ entry is that,&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;All other things being equal, your code will run faster if you use initialization lists rather than assignment. &lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;That&apos;s constructor initialisation.  It is the correct way to initialise members in a class constructor, as it prevents the default constructor being invoked.&lt;/p&gt;\n\n&lt;p&gt;Consider these two examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Example 1&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(Bar b)\n{\n   bar = b;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 2&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(Bar b)\n   : &lt;span class=&quot;hljs-built_in&quot;&gt;bar&lt;/span&gt;(b)\n{\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In example 1:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Bar bar;  &lt;span class=&quot;hljs-comment&quot;&gt;// default constructor&lt;/span&gt;\nbar = b;  &lt;span class=&quot;hljs-comment&quot;&gt;// assignment&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In example 2:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;Bar &lt;span class=&quot;hljs-title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b)&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// copy constructor&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s all about efficiency.&lt;/p&gt;\n    ","\n&lt;p&gt;This is called an initialization list.  It is a way of initializing class members.  There are benefits to using this instead of simply assigning new values to the members in the body of the constructor, but if you have class members which are &lt;em&gt;constants&lt;/em&gt; or &lt;em&gt;references&lt;/em&gt; they &lt;em&gt;must&lt;/em&gt; be initialized.&lt;/p&gt;\n    ","\n&lt;p&gt;This is not obscure, it&apos;s the &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/initializer_list&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++ initialization list syntax&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Basically, in your case, &lt;code&gt;x&lt;/code&gt; will be initialized with &lt;code&gt;_x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; with &lt;code&gt;_y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; with &lt;code&gt;_z&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The other already explained to you that the syntax that you observe is called &quot;constructor initializer list&quot;. This syntax lets you to custom-initialize base subobjects and member subobjects of the class (as opposed to allowing them to default-initialize or to remain uninitialized).&lt;/p&gt;\n\n&lt;p&gt;I just want to note that the syntax that, as you said, &quot;looks like a constructor call&quot;, is not necessarily a constructor call. In C++ language the &lt;code&gt;()&lt;/code&gt; syntax is just one standard form of &lt;em&gt;initialization syntax&lt;/em&gt;. It is interpreted differently for different types. For class types with user-defined constructor it means one thing (it is indeed a constructor call), for class types without user-defined constructor it means another thing (so called &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/value_initialization&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;&lt;em&gt;value initialization&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; ) for empty &lt;code&gt;()&lt;/code&gt;) and for non-class types it again means something different (since non-class types have no constructors).&lt;/p&gt;\n\n&lt;p&gt;In your case the data member has type &lt;code&gt;int&lt;/code&gt;. &lt;code&gt;int&lt;/code&gt; is not a class type, so it has no constructor. For type &lt;code&gt;int&lt;/code&gt; this syntax means simply &quot;initialize &lt;code&gt;bar&lt;/code&gt; with the value of &lt;code&gt;num&lt;/code&gt;&quot; and that&apos;s it. It is done just like that, directly, no constructors involved, since, once again, &lt;code&gt;int&lt;/code&gt; is not a class type of therefore it can&apos;t have any constructors.&lt;/p&gt;\n    ","\n&lt;p&gt;I don&apos;t know how you could miss this one, it&apos;s pretty basic. That&apos;s the syntax for initializing member variables or base class constructors.  It works for plain old data types as well as class objects.&lt;/p&gt;\n    ","\n&lt;p&gt;This is an initialization list. It&apos;ll initialize the members before the constructor body is run.\nConsider&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n   string str;\n   &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(string &amp;amp;p)\n   {\n      str = p;\n   };\n };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;vs &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  string str;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(string &amp;amp;p): &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(p) {};\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the first example, str will be initialized by its no-argument constructor&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;before the body of the Foo constructor. Inside the foo constructor, the&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;string&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;=( &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; s );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will be called on &apos;str&apos; as you do   str = p;&lt;/p&gt;\n\n&lt;p&gt;Wheras in the second example, str will be initialized directly by\ncalling its constructor&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;( &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; s );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;with &apos;p&apos; as an argument.&lt;/p&gt;\n    ","\n&lt;p&gt;You are correct, this is indeed a way to initialize member variables.  I&apos;m not sure that there&apos;s much benefit to this, other than clearly expressing that it&apos;s an initialization.  Having a &quot;bar=num&quot; inside the code could get moved around, deleted, or misinterpreted much more easily.&lt;/p&gt;\n    ","\n&lt;p&gt;there is another &apos;benefit&apos;&lt;/p&gt;\n\n&lt;p&gt;if the member variable type does not support null initialization or if its a reference (which cannot be null initialized) then you have no choice but to supply an initialization list&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s an initialization list for the constructor. Instead of default constructing &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; and then assigning them the values received in the parameters, those members will be initialized with those values right off the bat. This may not seem terribly useful for &lt;code&gt;float&lt;/code&gt;s, but it can be quite a timesaver with custom classes that are expensive to construct.&lt;/p&gt;\n    ","\n&lt;p&gt;Not mentioned yet on this thread: since C++11, the member initializer list can use list-initialization  (aka. &quot;uniform initialization&quot;, &quot;braced initialization&quot;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; num): bar{num} {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which has the same semantics as list-initialization in other contexts.&lt;/p&gt;\n    ","\n&lt;p&gt;Although this is an old discussion, I couldn&apos;t find any mention about &lt;a href=&quot;https://en.cppreference.com/w/cpp/language/constructor&quot; rel=&quot;nofollow noreferrer&quot;&gt;delegating constructor&lt;/a&gt;, which uses the weird &quot;:&quot; symbol in the following way.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; \n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;: \n    &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y) \n    {}\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y) : &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, y) \n    {}\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What it does is simply delegating &lt;code&gt;Foo(y)&lt;/code&gt; into &lt;code&gt;Foo(&apos;a&apos;, y) &lt;/code&gt;. So that&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;Foo &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; foo(&apos;a&apos;, 15)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When defining a delegating constructor, you cannot have any members in initializer list besides targeted constructor.&lt;/p&gt;\n    "]},"randomTags":[{"name":"ecmascript-6","slug":"ecmascript-6"},{"name":"event-handling","slug":"event-handling"},{"name":"foreach","slug":"foreach"},{"name":"getelementbyid","slug":"getelementbyid"},{"name":"css-selectors","slug":"css-selectors"},{"name":"pageload","slug":"pageload"},{"name":"python-3.6","slug":"python-3.6"},{"name":"variable-variables","slug":"variable-variables"},{"name":"format","slug":"format"},{"name":"restriction","slug":"restriction"},{"name":"jtable","slug":"jtable"},{"name":"chromium","slug":"chromium"},{"name":"super","slug":"super"},{"name":"chunks","slug":"chunks"},{"name":"selenium-webdriver","slug":"selenium-webdriver"},{"name":"permutation","slug":"permutation"},{"name":"pip","slug":"pip"},{"name":"full-outer-join","slug":"full-outer-join"},{"name":"data.table","slug":"data.table"},{"name":"compiler-errors","slug":"compiler-errors"}]},"__N_SSG":true}